{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["AVG([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the average value of the argument", "\nAVG([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the average value of\n            expr. The\n            DISTINCT option can be used to return the\n            average of the distinct values of\n            expr.\n          ", "\n            If there are no matching rows,\n            AVG() returns\n            NULL. The function also returns\n            NULL if expr\n            is NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, AVG(test_score)\n       FROM student\n       GROUP BY student_name;"], "Examples": ["mysql> SELECT student_name, AVG(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_avg"], "Feature Type": ["Function"], "index": 0, "vector_txt": "0:Feature: AVG([DISTINCT]\n            expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["FIND_IN_SET(str,strlist)"], "Description": ["Index (position) of first argument within second argument", "\nFIND_IN_SET(str,strlist)\n", "\n          Returns a value in the range of 1 to\n          N if the string\n          str is in the string list\n          strlist consisting of\n          N substrings. A string list is a\n          string composed of substrings separated by\n          , characters. If the first argument is a\n          constant string and the second is a column of type\n          SET, the\n          FIND_IN_SET() function is\n          optimized to use bit arithmetic. Returns 0\n          if str is not in\n          strlist or if\n          strlist is the empty string.\n          Returns NULL if either argument is\n          NULL. This function does not work properly\n          if the first argument contains a comma (,)\n          character.\n        ", "Press CTRL+C to copy mysql> SELECT FIND_IN_SET('b','a,b,c,d');\n        -> 2"], "Examples": ["mysql> SELECT FIND_IN_SET('b','a,b,c,d');\n        -> 2"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_find-in-set"], "Feature Type": ["Function"], "index": 1, "vector_txt": "1:Feature: FIND_IN_SET(str,strlist)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["FIRST_VALUE(expr)"], "Description": ["Value of argument from first row of window frame", "\nFIRST_VALUE(expr)\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the first row of the window frame.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            The following query demonstrates\n            FIRST_VALUE(),\n            LAST_VALUE(), and two\n            instances of NTH_VALUE():\n          ", "Press CTRL+C to copy mysql> SELECT\n         time, subject, val,\n         FIRST_VALUE(val)  OVER w AS 'first',\n         LAST_VALUE(val)   OVER w AS 'last',\n         NTH_VALUE(val, 2) OVER w AS 'second',\n         NTH_VALUE(val, 4) OVER w AS 'fourth'\n       FROM observations\n       WINDOW w AS (PARTITION BY subject ORDER BY time\n                    ROWS UNBOUNDED PRECEDING);\n+----------+---------+------+-------+------+--------+--------+\n| time     | subject | val  | first | last | second | fourth |\n+----------+---------+------+-------+------+--------+--------+\n| 07:00:00 | st113   |   10 |    10 |   10 |   NULL |   NULL |\n| 07:15:00 | st113   |    9 |    10 |    9 |      9 |   NULL |\n| 07:30:00 | st113   |   25 |    10 |   25 |      9 |   NULL |\n| 07:45:00 | st113   |   20 |    10 |   20 |      9 |     20 |\n| 07:00:00 | xh458   |    0 |     0 |    0 |   NULL |   NULL |\n| 07:15:00 | xh458   |   10 |     0 |   10 |     10 |   NULL |\n| 07:30:00 | xh458   |    5 |     0 |    5 |     10 |   NULL |\n| 07:45:00 | xh458   |   30 |     0 |   30 |     10 |     30 |\n| 08:00:00 | xh458   |   25 |     0 |   25 |     10 |     30 |\n+----------+---------+------+-------+------+--------+--------+", "\n            Each function uses the rows in the current frame, which, per\n            the window definition shown, extends from the first\n            partition row to the current row. For the\n            NTH_VALUE() calls, the\n            current frame does not always include the requested row; in\n            such cases, the return value is NULL.\n          "], "Examples": ["mysql> SELECT\n         time, subject, val,\n         FIRST_VALUE(val)  OVER w AS 'first',\n         LAST_VALUE(val)   OVER w AS 'last',\n         NTH_VALUE(val, 2) OVER w AS 'second',\n         NTH_VALUE(val, 4) OVER w AS 'fourth'\n       FROM observations\n       WINDOW w AS (PARTITION BY subject ORDER BY time\n                    ROWS UNBOUNDED PRECEDING);\n+----------+---------+------+-------+------+--------+--------+\n| time     | subject | val  | first | last | second | fourth |\n+----------+---------+------+-------+------+--------+--------+\n| 07:00:00 | st113   |   10 |    10 |   10 |   NULL |   NULL |\n| 07:15:00 | st113   |    9 |    10 |    9 |      9 |   NULL |\n| 07:30:00 | st113   |   25 |    10 |   25 |      9 |   NULL |\n| 07:45:00 | st113   |   20 |    10 |   20 |      9 |     20 |\n| 07:00:00 | xh458   |    0 |     0 |    0 |   NULL |   NULL |\n| 07:15:00 | xh458   |   10 |     0 |   10 |     10 |   NULL |\n| 07:30:00 | xh458   |    5 |     0 |    5 |     10 |   NULL |\n| 07:45:00 | xh458   |   30 |     0 |   30 |     10 |     30 |\n| 08:00:00 | xh458   |   25 |     0 |   25 |     10 |     30 |\n+----------+---------+------+-------+------+--------+--------+"], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_first-value"], "Feature Type": ["Function"], "index": 2, "vector_txt": "2:Feature: FIRST_VALUE(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["FLOOR(X)"], "Description": ["Return the largest integer value not greater than the argument", "\nFLOOR(X)\n", "\n            Returns the largest integer value not greater than\n            X. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT FLOOR(1.23), FLOOR(-1.23);\n        -> 1, -2", "\n            For exact-value numeric arguments, the return value has an\n            exact-value numeric type. For string or floating-point\n            arguments, the return value has a floating-point type.\n          "], "Examples": ["mysql> SELECT FLOOR(1.23), FLOOR(-1.23);\n        -> 1, -2"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_floor"], "Feature Type": ["Function"], "index": 3, "vector_txt": "3:Feature: FLOOR(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["FORMAT(X,D[,locale])"], "Description": ["Return a number formatted to specified number of decimal places", "\nFORMAT(X,D[,locale])\n", "\n          Formats the number X to a format\n          like '#,###,###.##', rounded to\n          D decimal places, and returns the\n          result as a string. If D is\n          0, the result has no decimal point or\n          fractional part. If X or\n          D is NULL, the\n          function returns NULL.\n        ", "\n          The optional third parameter enables a locale to be specified\n          to be used for the result number's decimal point, thousands\n          separator, and grouping between separators. Permissible locale\n          values are the same as the legal values for the\n          lc_time_names system variable\n          (see Section\u00a012.16, \u201cMySQL Server Locale Support\u201d). If the locale is\n          NULL or not specified, the default locale\n          is 'en_US'.\n        ", "Press CTRL+C to copy mysql> SELECT FORMAT(12332.123456, 4);\n        -> '12,332.1235'\nmysql> SELECT FORMAT(12332.1,4);\n        -> '12,332.1000'\nmysql> SELECT FORMAT(12332.2,0);\n        -> '12,332'\nmysql> SELECT FORMAT(12332.2,2,'de_DE');\n        -> '12.332,20'"], "Examples": ["mysql> SELECT FORMAT(12332.123456, 4);\n        -> '12,332.1235'\nmysql> SELECT FORMAT(12332.1,4);\n        -> '12,332.1000'\nmysql> SELECT FORMAT(12332.2,0);\n        -> '12,332'\nmysql> SELECT FORMAT(12332.2,2,'de_DE');\n        -> '12.332,20'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_format"], "Feature Type": ["Function"], "index": 4, "vector_txt": "4:Feature: FORMAT(X,D[,locale])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.21 Performance Schema Functions"], "Feature": ["FORMAT_BYTES(count)"], "Description": ["Convert byte count to value with units", "\nFORMAT_BYTES(count)\n", "\n          Given a numeric byte count, converts it to human-readable\n          format and returns a string consisting of a value and a units\n          indicator. The string contains the number of bytes rounded to\n          2 decimal places and a minimum of 3 significant digits.\n          Numbers less than 1024 bytes are represented as whole numbers\n          and are not rounded. Returns NULL if\n          count is NULL.\n        ", "\n          The units indicator depends on the size of the byte-count\n          argument as shown in the following table.\n", "\n\nArgument Value\nResult Units\nResult Units Indicator\n\nUp to 1023\nbytes\nbytes\n\nUp to 10242 \u2212 1\nkibibytes\nKiB\n\nUp to 10243 \u2212 1\nmebibytes\nMiB\n\nUp to 10244 \u2212 1\ngibibytes\nGiB\n\nUp to 10245 \u2212 1\ntebibytes\nTiB\n\nUp to 10246 \u2212 1\npebibytes\nPiB\n\n10246 and up\nexbibytes\nEiB\n\n", "Press CTRL+C to copy mysql> SELECT FORMAT_BYTES(512), FORMAT_BYTES(18446644073709551615);\n+-------------------+------------------------------------+\n| FORMAT_BYTES(512) | FORMAT_BYTES(18446644073709551615) |\n+-------------------+------------------------------------+\n|  512 bytes        | 16.00 EiB                          |\n+-------------------+------------------------------------+", "\nFORMAT_BYTES() may be used\n          instead of the sys schema\n          format_bytes() function, keeping\n          in mind this difference:\n", "\n\nFORMAT_BYTES() uses the\n              EiB units indicator.\n              sys.format_bytes() does not.\n\n"], "Examples": ["mysql> SELECT FORMAT_BYTES(512), FORMAT_BYTES(18446644073709551615);\n+-------------------+------------------------------------+\n| FORMAT_BYTES(512) | FORMAT_BYTES(18446644073709551615) |\n+-------------------+------------------------------------+\n|  512 bytes        | 16.00 EiB                          |\n+-------------------+------------------------------------+"], "Category": ["Built-In Functions", "Performance Schema Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_format-bytes"], "Feature Type": ["Function"], "index": 5, "vector_txt": "5:Feature: FORMAT_BYTES(count)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.21 Performance Schema Functions"], "Feature": ["FORMAT_PICO_TIME(time_val)"], "Description": ["Convert time in picoseconds to value with units", "\nFORMAT_PICO_TIME(time_val)\n", "\n          Given a numeric Performance Schema latency or wait time in\n          picoseconds, converts it to human-readable format and returns\n          a string consisting of a value and a units indicator. The\n          string contains the decimal time rounded to 2 decimal places\n          and a minimum of 3 significant digits. Times under 1\n          nanosecond are represented as whole numbers and are not\n          rounded.\n        ", "\n          If time_val is\n          NULL, this function returns\n          NULL.\n        ", "\n          The units indicator depends on the size of the time-value\n          argument as shown in the following table.\n", "\n\nArgument Value\nResult Units\nResult Units Indicator\n\nUp to 103 \u2212 1\npicoseconds\nps\n\nUp to 106 \u2212 1\nnanoseconds\nns\n\nUp to 109 \u2212 1\nmicroseconds\nus\n\nUp to 1012 \u2212 1\nmilliseconds\nms\n\nUp to 60\u00d71012 \u2212 1\nseconds\ns\n\nUp to 3.6\u00d71015 \u2212 1\nminutes\nmin\n\nUp to 8.64\u00d71016 \u2212 1\nhours\nh\n\n8.64\u00d71016 and up\ndays\nd\n\n", "Press CTRL+C to copy mysql> SELECT FORMAT_PICO_TIME(3501), FORMAT_PICO_TIME(188732396662000);\n+------------------------+-----------------------------------+\n| FORMAT_PICO_TIME(3501) | FORMAT_PICO_TIME(188732396662000) |\n+------------------------+-----------------------------------+\n| 3.50 ns                | 3.15 min                          |\n+------------------------+-----------------------------------+", "\nFORMAT_PICO_TIME() may be used\n          instead of the sys schema\n          format_time() function, keeping\n          in mind these differences:\n", "\n\n              To indicate minutes,\n              sys.format_time() uses the\n              m units indicator, whereas\n              FORMAT_PICO_TIME() uses\n              min.\n            \nsys.format_time() uses the\n              w (weeks) units indicator.\n              FORMAT_PICO_TIME() does\n              not.\n\n"], "Examples": ["mysql> SELECT FORMAT_PICO_TIME(3501), FORMAT_PICO_TIME(188732396662000);\n+------------------------+-----------------------------------+\n| FORMAT_PICO_TIME(3501) | FORMAT_PICO_TIME(188732396662000) |\n+------------------------+-----------------------------------+\n| 3.50 ns                | 3.15 min                          |\n+------------------------+-----------------------------------+"], "Category": ["Built-In Functions", "Performance Schema Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_format-pico-time"], "Feature Type": ["Function"], "index": 6, "vector_txt": "6:Feature: FORMAT_PICO_TIME(time_val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["FOUND_ROWS()"], "Description": ["For a SELECT with a LIMIT clause, the number of rows that would be", "\nFOUND_ROWS()\n", "\n\nNote\n\n\n            The SQL_CALC_FOUND_ROWS query modifier\n            and accompanying FOUND_ROWS()\n            function are deprecated; expect them to be removed in a\n            future version of MySQL. Execute the query with\n            LIMIT, and then a second query with\n            COUNT(*) and without\n            LIMIT to determine whether there are\n            additional rows. For example, instead of these queries:\n          Press CTRL+C to copy SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT FOUND_ROWS();\n            Use these queries instead:\n          Press CTRL+C to copy SELECT * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT COUNT(*) FROM tbl_name WHERE id > 100;\nCOUNT(*) is subject to\n            certain optimizations.\n            SQL_CALC_FOUND_ROWS causes some\n            optimizations to be disabled.\n\n", "\n          A SELECT statement may include\n          a LIMIT clause to restrict the number of\n          rows the server returns to the client. In some cases, it is\n          desirable to know how many rows the statement would have\n          returned without the LIMIT, but without\n          running the statement again. To obtain this row count, include\n          an SQL_CALC_FOUND_ROWS option in the\n          SELECT statement, and then\n          invoke FOUND_ROWS() afterward:\n        ", "Press CTRL+C to copy mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n    -> WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();", "\n          The second SELECT returns a\n          number indicating how many rows the first\n          SELECT would have returned had\n          it been written without the LIMIT clause.\n        ", "\n          In the absence of the SQL_CALC_FOUND_ROWS\n          option in the most recent successful\n          SELECT statement,\n          FOUND_ROWS() returns the number\n          of rows in the result set returned by that statement. If the\n          statement includes a LIMIT clause,\n          FOUND_ROWS() returns the number\n          of rows up to the limit. For example,\n          FOUND_ROWS() returns 10 or 60,\n          respectively, if the statement includes LIMIT\n          10 or LIMIT 50, 10.\n        ", "\n          The row count available through\n          FOUND_ROWS() is transient and\n          not intended to be available past the statement following the\n          SELECT SQL_CALC_FOUND_ROWS statement. If\n          you need to refer to the value later, save it:\n        ", "Press CTRL+C to copy mysql> SELECT SQL_CALC_FOUND_ROWS * FROM ... ;\nmysql> SET @rows = FOUND_ROWS();", "\n          If you are using SELECT\n          SQL_CALC_FOUND_ROWS, MySQL must calculate how many\n          rows are in the full result set. However, this is faster than\n          running the query again without LIMIT,\n          because the result set need not be sent to the client.\n        ", "\nSQL_CALC_FOUND_ROWS and\n          FOUND_ROWS() can be useful in\n          situations when you want to restrict the number of rows that a\n          query returns, but also determine the number of rows in the\n          full result set without running the query again. An example is\n          a Web script that presents a paged display containing links to\n          the pages that show other sections of a search result. Using\n          FOUND_ROWS() enables you to\n          determine how many other pages are needed for the rest of the\n          result.\n        ", "\n          The use of SQL_CALC_FOUND_ROWS and\n          FOUND_ROWS() is more complex\n          for UNION statements than for\n          simple SELECT statements,\n          because LIMIT may occur at multiple places\n          in a UNION. It may be applied\n          to individual SELECT statements\n          in the UNION, or global to the\n          UNION result as a whole.\n        ", "\n          The intent of SQL_CALC_FOUND_ROWS for\n          UNION is that it should return\n          the row count that would be returned without a global\n          LIMIT. The conditions for use of\n          SQL_CALC_FOUND_ROWS with\n          UNION are:\n", "\n\n              The SQL_CALC_FOUND_ROWS keyword must\n              appear in the first SELECT\n              of the UNION.\n            \n              The value of FOUND_ROWS()\n              is exact only if\n              UNION ALL\n              is used. If UNION without\n              ALL is used, duplicate removal occurs\n              and the value of\n              FOUND_ROWS() is only\n              approximate.\n            \n              If no LIMIT is present in the\n              UNION,\n              SQL_CALC_FOUND_ROWS is ignored and\n              returns the number of rows in the temporary table that is\n              created to process the\n              UNION.\n\n", "\n          Beyond the cases described here, the behavior of\n          FOUND_ROWS() is undefined (for\n          example, its value following a\n          SELECT statement that fails\n          with an error).\n", "\n\nImportant\n\n\nFOUND_ROWS() is not\n            replicated reliably using statement-based replication. This\n            function is automatically replicated using row-based\n            replication.\n\n"], "Examples": ["SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT FOUND_ROWS();", "SELECT * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT COUNT(*) FROM tbl_name WHERE id > 100;", "mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n    -> WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();", "mysql> SELECT SQL_CALC_FOUND_ROWS * FROM ... ;\nmysql> SET @rows = FOUND_ROWS();"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_found-rows"], "Feature Type": ["Function"], "index": 7, "vector_txt": "7:Feature: FOUND_ROWS()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["FROM_DAYS(N)"], "Description": ["Convert a day number to a date", "\nFROM_DAYS(N)\n", "\n          Given a day number N, returns a\n          DATE value. Returns\n          NULL if N is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT FROM_DAYS(730669);\n        -> '2000-07-03'", "\n          Use FROM_DAYS() with caution on\n          old dates. It is not intended for use with values that precede\n          the advent of the Gregorian calendar (1582). See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d.\n        "], "Examples": ["mysql> SELECT FROM_DAYS(730669);\n        -> '2000-07-03'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_from-days"], "Feature Type": ["Function"], "index": 8, "vector_txt": "8:Feature: FROM_DAYS(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["FROM_UNIXTIME(unix_timestamp[,format])"], "Description": ["Format Unix timestamp as a date", "\nFROM_UNIXTIME(unix_timestamp[,format])\n", "\n          Returns a representation of\n          unix_timestamp as a datetime or\n          character string value. The value returned is expressed using\n          the session time zone. (Clients can set the session time zone\n          as described in Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.)\n          unix_timestamp is an internal\n          timestamp value representing seconds since\n          '1970-01-01 00:00:00' UTC, such as produced\n          by the UNIX_TIMESTAMP()\n          function.\n        ", "\n          If format is omitted, this function\n          returns a DATETIME value.\n        ", "\n          If unix_timestamp or\n          format is NULL,\n          this function returns NULL.\n        ", "\n          If unix_timestamp is an integer,\n          the fractional seconds precision of the\n          DATETIME is zero. When\n          unix_timestamp is a decimal value,\n          the fractional seconds precision of the\n          DATETIME is the same as the precision of\n          the decimal value, up to a maximum of 6. When\n          unix_timestamp is a floating point\n          number, the fractional seconds precision of the datetime is 6.\n        ", "\n          On 32-bit platforms, the maximum useful value for\n          unix_timestamp is\n          2147483647.999999, which returns '2038-01-19\n          03:14:07.999999' UTC. On 64-bit platforms, the\n          effective maximum is 32536771199.999999, which returns\n          '3001-01-18 23:59:59.999999' UTC.\n          Regardless of platform or version, a greater value for\n          unix_timestamp than the effective\n          maximum returns 0.\n        ", "\nformat is used to format the result\n          in the same way as the format string used for the\n          DATE_FORMAT() function. If\n          format is supplied, the value\n          returned is a VARCHAR.\n        ", "Press CTRL+C to copy mysql> SELECT FROM_UNIXTIME(1447430881);\n        -> '2015-11-13 10:08:01'\nmysql> SELECT FROM_UNIXTIME(1447430881) + 0;\n        -> 20151113100801\nmysql> SELECT FROM_UNIXTIME(1447430881,\n    ->                      '%Y %D %M %h:%i:%s %x');\n        -> '2015 13th November 10:08:01 2015'", "\n\nNote\n\n\n            If you use UNIX_TIMESTAMP()\n            and FROM_UNIXTIME() to\n            convert between values in a non-UTC time zone and Unix\n            timestamp values, the conversion is lossy because the\n            mapping is not one-to-one in both directions. For details,\n            see the description of the\n            UNIX_TIMESTAMP() function.\n\n"], "Examples": ["mysql> SELECT FROM_UNIXTIME(1447430881);\n        -> '2015-11-13 10:08:01'\nmysql> SELECT FROM_UNIXTIME(1447430881) + 0;\n        -> 20151113100801\nmysql> SELECT FROM_UNIXTIME(1447430881,\n    ->                      '%Y %D %M %h:%i:%s %x');\n        -> '2015 13th November 10:08:01 2015'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_from-unixtime"], "Feature Type": ["Function"], "index": 9, "vector_txt": "9:Feature: FROM_UNIXTIME(unix_timestamp[,format])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["GeomCollection(g\n          [, g] ...)"], "Description": ["Construct geometry collection from geometries", "\nGeomCollection(g\n          [, g] ...)\n", "\n          Constructs a GeomCollection value from the\n          geometry arguments.\n        ", "\nGeomCollection() returns all\n          the proper geometries contained in the arguments even if a\n          nonsupported geometry is present.\n        ", "\nGeomCollection() with no\n          arguments is permitted as a way to create an empty geometry.\n          Also, functions such as\n          ST_GeomFromText() that accept\n          WKT geometry collection arguments understand both OpenGIS\n          'GEOMETRYCOLLECTION EMPTY' standard syntax\n          and MySQL 'GEOMETRYCOLLECTION()'\n          nonstandard syntax.\n        ", "\nGeomCollection() and\n          GeometryCollection() are\n          synonymous, with\n          GeomCollection() the preferred\n          function.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_geomcollection"], "Feature Type": ["Function"], "index": 10, "vector_txt": "10:Feature: GeomCollection(g\n          [, g] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["MIN([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the minimum value", "\nMIN([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the minimum value of\n            expr.\n            MIN() may take a string\n            argument; in such cases, it returns the minimum string\n            value. See Section\u00a010.3.1, \u201cHow MySQL Uses Indexes\u201d. The\n            DISTINCT keyword can be used to find the\n            minimum of the distinct values of\n            expr, however, this produces the\n            same result as omitting DISTINCT.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            MIN() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            For MIN(), MySQL currently\n            compares ENUM and\n            SET columns by their string\n            value rather than by the string's relative position in the\n            set. This differs from how ORDER BY\n            compares them.\n          "], "Examples": ["mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_min"], "Feature Type": ["Function"], "index": 11, "vector_txt": "11:Feature: MIN([DISTINCT]\n            expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["GeometryCollection(g\n          [, g] ...)"], "Description": ["Construct geometry collection from geometries", "\nGeometryCollection(g\n          [, g] ...)\n", "\n          Constructs a GeomCollection value from the\n          geometry arguments.\n        ", "\nGeometryCollection() returns\n          all the proper geometries contained in the arguments even if a\n          nonsupported geometry is present.\n        ", "\nGeometryCollection() with no\n          arguments is permitted as a way to create an empty geometry.\n          Also, functions such as\n          ST_GeomFromText() that accept\n          WKT geometry collection arguments understand both OpenGIS\n          'GEOMETRYCOLLECTION EMPTY' standard syntax\n          and MySQL 'GEOMETRYCOLLECTION()'\n          nonstandard syntax.\n        ", "\nGeomCollection() and\n          GeometryCollection() are\n          synonymous, with\n          GeomCollection() the preferred\n          function.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_geometrycollection"], "Feature Type": ["Function"], "index": 12, "vector_txt": "12:Feature: GeometryCollection(g\n          [, g] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["GET_DD_COLUMN_PRIVILEGES(ARGS)"], "Description": ["Internal use only", "\nGET_DD_COLUMN_PRIVILEGES(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_get-dd-column-privileges"], "Feature Type": ["Function"], "index": 13, "vector_txt": "13:Feature: GET_DD_COLUMN_PRIVILEGES(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["GET_DD_CREATE_OPTIONS(ARGS)"], "Description": ["Internal use only", "\nGET_DD_CREATE_OPTIONS(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_get-dd-create-options"], "Feature Type": ["Function"], "index": 14, "vector_txt": "14:Feature: GET_DD_CREATE_OPTIONS(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["GET_DD_INDEX_SUB_PART_LENGTH(ARGS)"], "Description": ["Internal use only", "\nGET_DD_INDEX_SUB_PART_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_get-dd-index-sub-part-length"], "Feature Type": ["Function"], "index": 15, "vector_txt": "15:Feature: GET_DD_INDEX_SUB_PART_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["GET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})"], "Description": ["Return a date format string", "\nGET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})\n", "\n          Returns a format string. This function is useful in\n          combination with the\n          DATE_FORMAT() and the\n          STR_TO_DATE() functions.\n        ", "\n          If format is\n          NULL, this function returns\n          NULL.\n        ", "\n          The possible values for the first and second arguments result\n          in several possible format strings (for the specifiers used,\n          see the table in the\n          DATE_FORMAT() function\n          description). ISO format refers to ISO 9075, not ISO 8601.\n", "\n\nFunction Call\nResult\n\nGET_FORMAT(DATE,'USA')\n'%m.%d.%Y'\n\nGET_FORMAT(DATE,'JIS')\n'%Y-%m-%d'\n\nGET_FORMAT(DATE,'ISO')\n'%Y-%m-%d'\n\nGET_FORMAT(DATE,'EUR')\n'%d.%m.%Y'\n\nGET_FORMAT(DATE,'INTERNAL')\n'%Y%m%d'\n\nGET_FORMAT(DATETIME,'USA')\n'%Y-%m-%d %H.%i.%s'\n\nGET_FORMAT(DATETIME,'JIS')\n'%Y-%m-%d %H:%i:%s'\n\nGET_FORMAT(DATETIME,'ISO')\n'%Y-%m-%d %H:%i:%s'\n\nGET_FORMAT(DATETIME,'EUR')\n'%Y-%m-%d %H.%i.%s'\n\nGET_FORMAT(DATETIME,'INTERNAL')\n'%Y%m%d%H%i%s'\n\nGET_FORMAT(TIME,'USA')\n'%h:%i:%s %p'\n\nGET_FORMAT(TIME,'JIS')\n'%H:%i:%s'\n\nGET_FORMAT(TIME,'ISO')\n'%H:%i:%s'\n\nGET_FORMAT(TIME,'EUR')\n'%H.%i.%s'\n\nGET_FORMAT(TIME,'INTERNAL')\n'%H%i%s'\n\n", "\nFunction Call\nResult\n", "\nTIMESTAMP can also be used as\n          the first argument to\n          GET_FORMAT(), in which case the\n          function returns the same values as for\n          DATETIME.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n        -> '03.10.2003'\nmysql> SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n        -> '2003-10-31'"], "Examples": ["mysql> SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n        -> '03.10.2003'\nmysql> SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n        -> '2003-10-31'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_get-format"], "Feature Type": ["Function"], "index": 16, "vector_txt": "16:Feature: GET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.14 Locking Functions"], "Feature": ["GET_LOCK(str,timeout)"], "Description": ["Get a named lock", "\nGET_LOCK(str,timeout)\n", "\n          Tries to obtain a lock with a name given by the string\n          str, using a timeout of\n          timeout seconds. A negative\n          timeout value means infinite\n          timeout. The lock is exclusive. While held by one session,\n          other sessions cannot obtain a lock of the same name.\n        ", "\n          Returns 1 if the lock was obtained\n          successfully, 0 if the attempt timed out\n          (for example, because another client has previously locked the\n          name), or NULL if an error occurred (such\n          as running out of memory or the thread was killed with\n          mysqladmin kill).\n        ", "\n          A lock obtained with GET_LOCK()\n          is released explicitly by executing\n          RELEASE_LOCK() or implicitly\n          when your session terminates (either normally or abnormally).\n          Locks obtained with GET_LOCK()\n          are not released when transactions commit or roll back.\n        ", "\nGET_LOCK() is implemented using\n          the metadata locking (MDL) subsystem. Multiple simultaneous\n          locks can be acquired and\n          GET_LOCK() does not release any\n          existing locks. For example, suppose that you execute these\n          statements:\n        ", "Press CTRL+C to copy SELECT GET_LOCK('lock1',10);\nSELECT GET_LOCK('lock2',10);\nSELECT RELEASE_LOCK('lock2');\nSELECT RELEASE_LOCK('lock1');", "\n          The second GET_LOCK() acquires\n          a second lock and both\n          RELEASE_LOCK() calls return 1\n          (success).\n        ", "\n          It is even possible for a given session to acquire multiple\n          locks for the same name. Other sessions cannot acquire a lock\n          with that name until the acquiring session releases all its\n          locks for the name.\n        ", "\n          Uniquely named locks acquired with\n          GET_LOCK() appear in the\n          Performance Schema metadata_locks\n          table. The OBJECT_TYPE column says\n          USER LEVEL LOCK and the\n          OBJECT_NAME column indicates the lock name.\n          In the case that multiple locks are acquired for the\n          same name, only the first lock for the\n          name registers a row in the\n          metadata_locks table. Subsequent\n          locks for the name increment a counter in the lock but do not\n          acquire additional metadata locks. The\n          metadata_locks row for the lock\n          is deleted when the last lock instance on the name is\n          released.\n        ", "\n          The capability of acquiring multiple locks means there is the\n          possibility of deadlock among clients. When this happens, the\n          server chooses a caller and terminates its lock-acquisition\n          request with an\n          ER_USER_LOCK_DEADLOCK error.\n          This error does not cause transactions to roll back.\n        ", "\n          MySQL enforces a maximum length on lock names of 64\n          characters.\n        ", "\nGET_LOCK() can be used to\n          implement application locks or to simulate record locks. Names\n          are locked on a server-wide basis. If a name has been locked\n          within one session, GET_LOCK()\n          blocks any request by another session for a lock with the same\n          name. This enables clients that agree on a given lock name to\n          use the name to perform cooperative advisory locking. But be\n          aware that it also enables a client that is not among the set\n          of cooperating clients to lock a name, either inadvertently or\n          deliberately, and thus prevent any of the cooperating clients\n          from locking that name. One way to reduce the likelihood of\n          this is to use lock names that are database-specific or\n          application-specific. For example, use lock names of the form\n          db_name.str or\n          app_name.str.\n        ", "\n          If multiple clients are waiting for a lock, the order in which\n          they acquire it is undefined. Applications should not assume\n          that clients acquire the lock in the same order that they\n          issued the lock requests.\n        ", "\nGET_LOCK() is unsafe for\n          statement-based replication. A warning is logged if you use\n          this function when\n          binlog_format is set to\n          STATEMENT.\n        ", "\n          Since GET_LOCK() establishes a lock only on\n          a single mysqld, it is not suitable for use\n          with NDB Cluster, which has no way of enforcing an SQL lock\n          across multiple MySQL servers. See\n          Section\u00a025.2.7.10, \u201cLimitations Relating to Multiple NDB Cluster Nodes\u201d,\n          for more information.\n", "\n\nCaution\n\n\n            With the capability of acquiring multiple named locks, it is\n            possible for a single statement to acquire a large number of\n            locks. For example:\n          Press CTRL+C to copy INSERT INTO ... SELECT GET_LOCK(t1.col_name) FROM t1;\n            These types of statements may have certain adverse effects.\n            For example, if the statement fails part way through and\n            rolls back, locks acquired up to the point of failure still\n            exist. If the intent is for there to be a correspondence\n            between rows inserted and locks acquired, that intent is not\n            satisfied. Also, if it is important that locks are granted\n            in a certain order, be aware that result set order may\n            differ depending on which execution plan the optimizer\n            chooses. For these reasons, it may be best to limit\n            applications to a single lock-acquisition call per\n            statement.\n\n", "\n          A different locking interface is available as either a plugin\n          service or a set of loadable functions. This interface\n          provides lock namespaces and distinct read and write locks,\n          unlike the interface provided by\n          GET_LOCK() and related\n          functions. For details, see Section\u00a07.6.9.1, \u201cThe Locking Service\u201d.\n        "], "Examples": ["SELECT GET_LOCK('lock1',10);\nSELECT GET_LOCK('lock2',10);\nSELECT RELEASE_LOCK('lock2');\nSELECT RELEASE_LOCK('lock1');", "INSERT INTO ... SELECT GET_LOCK(t1.col_name) FROM t1;"], "Category": ["Built-In Functions", "Locking Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_get-lock"], "Feature Type": ["Function"], "index": 17, "vector_txt": "17:Feature: GET_LOCK(str,timeout)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["GREATEST(value1,value2,...)"], "Description": ["Return the largest argument", "\nGREATEST(value1,value2,...)\n", "\n            With two or more arguments, returns the largest\n            (maximum-valued) argument. The arguments are compared using\n            the same rules as for\n            LEAST().\n          ", "Press CTRL+C to copy mysql> SELECT GREATEST(2,0);\n        -> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n        -> 767.0\nmysql> SELECT GREATEST('B','A','C');\n        -> 'C'", "\nGREATEST() returns\n            NULL if any argument is\n            NULL.\n          "], "Examples": ["mysql> SELECT GREATEST(2,0);\n        -> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n        -> 767.0\nmysql> SELECT GREATEST('B','A','C');\n        -> 'C'"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_greatest"], "Feature Type": ["Function"], "index": 18, "vector_txt": "18:Feature: GREATEST(value1,value2,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["GROUP_CONCAT(expr)"], "Description": ["Return a concatenated string", "\nGROUP_CONCAT(expr)\n", "\n            This function returns a string result with the concatenated\n            non-NULL values from a group. It returns\n            NULL if there are no\n            non-NULL values. The full syntax is as\n            follows:\n          ", "Press CTRL+C to copy GROUP_CONCAT([DISTINCT] expr [,expr ...]\n             [ORDER BY {unsigned_integer | col_name | expr}\n                 [ASC | DESC] [,col_name ...]]\n             [SEPARATOR str_val])", "Press CTRL+C to copy mysql> SELECT student_name,\n         GROUP_CONCAT(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            Or:\n          ", "Press CTRL+C to copy mysql> SELECT student_name,\n         GROUP_CONCAT(DISTINCT test_score\n                      ORDER BY test_score DESC SEPARATOR ' ')\n       FROM student\n       GROUP BY student_name;", "\n            In MySQL, you can get the concatenated values of expression\n            combinations. To eliminate duplicate values, use the\n            DISTINCT clause. To sort values in the\n            result, use the ORDER BY clause. To sort\n            in reverse order, add the DESC\n            (descending) keyword to the name of the column you are\n            sorting by in the ORDER BY clause. The\n            default is ascending order; this may be specified explicitly\n            using the ASC keyword. The default\n            separator between values in a group is comma\n            (,). To specify a separator explicitly,\n            use SEPARATOR followed by the string\n            literal value that should be inserted between group values.\n            To eliminate the separator altogether, specify\n            SEPARATOR ''.\n          ", "\n            The result is truncated to the maximum length that is given\n            by the group_concat_max_len\n            system variable, which has a default value of 1024. The\n            value can be set higher, although the effective maximum\n            length of the return value is constrained by the value of\n            max_allowed_packet. The\n            syntax to change the value of\n            group_concat_max_len at\n            runtime is as follows, where val\n            is an unsigned integer:\n          ", "Press CTRL+C to copy SET [GLOBAL | SESSION] group_concat_max_len = val;", "\n            The return value is a nonbinary or binary string, depending\n            on whether the arguments are nonbinary or binary strings.\n            The result type is TEXT or\n            BLOB unless\n            group_concat_max_len is\n            less than or equal to 512, in which case the result type is\n            VARCHAR or\n            VARBINARY.\n          ", "\n            If GROUP_CONCAT() is invoked\n            from within the mysql client, binary\n            string results display using hexadecimal notation, depending\n            on the value of the\n            --binary-as-hex. For more\n            information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            See also CONCAT() and\n            CONCAT_WS():\n            Section\u00a014.8, \u201cString Functions and Operators\u201d.\n          "], "Examples": ["mysql> SELECT student_name,\n         GROUP_CONCAT(test_score)\n       FROM student\n       GROUP BY student_name;", "mysql> SELECT student_name,\n         GROUP_CONCAT(DISTINCT test_score\n                      ORDER BY test_score DESC SEPARATOR ' ')\n       FROM student\n       GROUP BY student_name;", "SET [GLOBAL | SESSION] group_concat_max_len = val;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_group-concat"], "Feature Type": ["Function"], "index": 19, "vector_txt": "19:Feature: GROUP_CONCAT(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_disable_member_action()"], "Description": ["Disable member action for event specified", "\ngroup_replication_disable_member_action()\n", "\n              Disable a member action so that the member does not take\n              it in the specified situation. If the server where you use\n              the function is part of a group, it must be the current\n              primary in a group in single-primary mode, and it must be\n              part of the majority. The changed setting is propagated to\n              other group members and joining members, so they will all\n              act in the same way when they are in the specified\n              situation, and you only need to use the function on the\n              primary.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_disable_member_action(name, event)", "\n              Arguments:\n", "\n\nname: The name of the\n                  member action to disable.\n                \nevent: The event that\n                  triggers the member action.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_disable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n            "], "Examples": ["SELECT group_replication_disable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-disable-member-action"], "Feature Type": ["Function"], "index": 20, "vector_txt": "20:Feature: group_replication_disable_member_action()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_enable_member_action()"], "Description": ["Enable member action for event specified", "\ngroup_replication_enable_member_action()\n", "\n              Enable a member action for the member to take in the\n              specified situation. If the server where you use the\n              function is part of a group, it must be the current\n              primary in a group in single-primary mode, and it must be\n              part of the majority. The changed setting is propagated to\n              other group members and joining members, so they will all\n              act in the same way when they are in the specified\n              situation, and you only need to use the function on the\n              primary.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_enable_member_action(name, event)", "\n              Arguments:\n", "\n\nname: The name of the\n                  member action to enable.\n                \nevent: The event that\n                  triggers the member action.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_enable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n            "], "Examples": ["SELECT group_replication_enable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-enable-member-action"], "Feature Type": ["Function"], "index": 21, "vector_txt": "21:Feature: group_replication_enable_member_action()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["STD(expr)\n            [over_clause]"], "Description": ["Return the population standard deviation", "\nSTD(expr)\n            [over_clause]\n", "\n            Returns the population standard deviation of\n            expr.\n            STD() is a synonym for the\n            standard SQL function\n            STDDEV_POP(), provided as a\n            MySQL extension.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STD() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_std"], "Feature Type": ["Function"], "index": 22, "vector_txt": "22:Feature: STD(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_get_communication_protocol()"], "Description": ["Get version of group replication communication protocol currently", "\ngroup_replication_get_communication_protocol()\n", "\n              Inspect the Group Replication communication protocol\n              version that is currently in use for a group.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_get_communication_protocol()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              The oldest MySQL Server version that can join this group\n              and use the group's communication protocol. Note that\n              the\n              group_replication_get_communication_protocol()\n              function returns the minimum MySQL version that the group\n              supports, which might differ from the version number that\n              was passed to\n              group_replication_set_communication_protocol(),\n              and from the MySQL Server version that is installed on the\n              member where you use the function.\n            ", "\n              If the protocol cannot be inspected because this server\n              instance does not belong to a replication group, an error\n              is returned as a string.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_get_communication_protocol();\n+------------------------------------------------+\n| group_replication_get_communication_protocol() |\n+------------------------------------------------+\n| 8.4.0                                          |\n+------------------------------------------------+", "\n              For more information, see\n              Section\u00a020.5.1.4, \u201cSetting a Group's Communication Protocol Version\u201d.\n            "], "Examples": ["SELECT group_replication_get_communication_protocol();\n+------------------------------------------------+\n| group_replication_get_communication_protocol() |\n+------------------------------------------------+\n| 8.4.0                                          |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-communication-protocol.html#function_group-replication-get-communication-protocol"], "Feature Type": ["Function"], "index": 23, "vector_txt": "23:Feature: group_replication_get_communication_protocol()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_get_write_concurrency()"], "Description": ["Get maximum number of consensus instances currently set for group", "\ngroup_replication_get_write_concurrency()\n", "\n              Check the maximum number of consensus instances that a\n              group can execute in parallel.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy INT group_replication_get_write_concurrency()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              The maximum number of consensus instances currently set\n              for the group.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_get_write_concurrency()", "\n              For more information, see\n              Section\u00a020.5.1.3, \u201cUsing Group Replication Group Write Consensus\u201d.\n            "], "Examples": [], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-maximum-consensus.html#function_group-replication-get-write-concurrency"], "Feature Type": ["Function"], "index": 24, "vector_txt": "24:Feature: group_replication_get_write_concurrency()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_reset_member_actions()"], "Description": ["Reset all member actions to defaults and configuration version", "\ngroup_replication_reset_member_actions()\n", "\n              Reset the member actions configuration to the default\n              settings, and reset its version number to 1.\n            ", "\n              The\n              group_replication_reset_member_actions()\n              function can only be used on a server that is not\n              currently part of a group. The server must be writeable\n              (with the read_only\n              system variable set to OFF) and have\n              the Group Replication plugin installed. You can use this\n              function to remove the member actions configuration that a\n              server used when it was part of a group, if you intend to\n              use it as a standalone server with no member actions or\n              different member actions.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_reset_member_actions()", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_reset_member_actions();", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n"], "Examples": ["SELECT group_replication_reset_member_actions();"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-reset-member-actions"], "Feature Type": ["Function"], "index": 25, "vector_txt": "25:Feature: group_replication_reset_member_actions()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_set_as_primary()"], "Description": ["Make a specific group member the primary", "\ngroup_replication_set_as_primary()\n", "\n              Appoints a specific member of the group as the new\n              primary, overriding any election process.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_as_primary(member_uuid[, timeout])", "\n              Arguments:\n", "\n\nmember_uuid: A string\n                  containing the UUID of the member of the group that\n                  you want to become the new primary.\n                \ntimeout: An integer\n                  specifying a timeout in seconds for transactions that\n                  are running on the existing primary when you use the\n                  function. You can set a timeout from 0 seconds\n                  (immediately) up to 3600 seconds (60 minutes). When\n                  you set a timeout, new transactions cannot start on\n                  the primary from that point on. There is no default\n                  setting for the timeout, so if you do not set it,\n                  there is no upper limit to the wait time, and new\n                  transactions can start during that time.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_as_primary(\u201800371d66-3c45-11ea-804b-080027337932\u2019, 300);", "\n              This function waits for all ongoing transactions and DML\n              operations to finish before electing the new primary. In\n              MySQL 8.4, it also waits for the completion\n              of any ongoing DDL statements such as\n              ALTER TABLE. Operations\n              that are considered DDL statements for this purpose are\n              listed here:\n", "\n\nALTER DATABASE\n\nALTER FUNCTION\n\nALTER INSTANCE\n\nALTER PROCEDURE\n\nALTER SERVER\n\nALTER TABLE\n\nALTER TABLESPACE\n\nALTER USER\n\nALTER VIEW\n\nANALYZE TABLE\n\nCACHE INDEX\n\nCHECK TABLE\n\nCREATE DATABASE\n\nCREATE FUNCTION\n\nCREATE INDEX\n\nCREATE ROLE\n\nCREATE PROCEDURE\n\nCREATE SERVER\n\nCREATE SPATIAL REFERENCE\n                  SYSTEM\n\nCREATE TABLE\n\nCREATE TABLESPACE\n\nCREATE TRIGGER\n\nCREATE USER\n\nCREATE VIEW\n\nDROP DATABASE\n\nDROP FUNCTION\n\nDROP INDEX\n\nDROP PROCEDURE\n\nDROP ROLE\n\nDROP SERVER\n\nDROP SPATIAL REFERENCE\n                  SYSTEM\n\nDROP TABLE\n\nDROP TABLESPACE\n\nDROP TRIGGER\n\nDROP USER\n\nDROP VIEW\n\nGRANT\n\nLOAD INDEX\n\nOPTIMIZE TABLE\n\nRENAME TABLE\n\nREPAIR TABLE\n\nREVOKE\n\nTRUNCATE TABLE\n\n", "\n              This also includes any open cursors (see\n              Section\u00a015.6.6, \u201cCursors\u201d).\n            ", "\n              For more information, see\n              Section\u00a020.5.1.1, \u201cChanging the Primary\u201d.\n"], "Examples": ["SELECT group_replication_set_as_primary(\u201800371d66-3c45-11ea-804b-080027337932\u2019, 300);"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-new-primary.html#function_group-replication-set-as-primary"], "Feature Type": ["Function"], "index": 26, "vector_txt": "26:Feature: group_replication_set_as_primary()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_set_communication_protocol()"], "Description": ["Set version for group replication communication protocol to use", "\ngroup_replication_set_communication_protocol()\n", "\n              Downgrade the Group Replication communication protocol\n              version of a group so that members at earlier releases can\n              join, or upgrade the Group Replication communication\n              protocol version of a group after upgrading MySQL Server\n              on all members. The\n              GROUP_REPLICATION_ADMIN\n              privilege is required to use this function, and all\n              existing group members must be online when you issue the\n              statement, with no loss of majority.\n", "\n\nNote\n\n\n                For MySQL InnoDB cluster, the communication protocol\n                version is managed automatically whenever the cluster\n                topology is changed using AdminAPI operations. You do\n                not have to use these functions yourself for an InnoDB\n                cluster.\n\n", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_communication_protocol(version)", "\n              Arguments:\n", "\n\nversion: For a downgrade,\n                  specify the MySQL Server version of the prospective\n                  group member that has the oldest installed server\n                  version. In this case, the command makes the group\n                  fall back to a communication protocol compatible with\n                  that server version if possible. The minimum server\n                  version that you can specify is MySQL 5.7.14. For an\n                  upgrade, specify the new MySQL Server version to which\n                  the existing group members have been upgraded.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_communication_protocol(\"5.7.25\");", "\n              For more information, see\n              Section\u00a020.5.1.4, \u201cSetting a Group's Communication Protocol Version\u201d.\n"], "Examples": ["SELECT group_replication_set_communication_protocol(\"5.7.25\");"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-communication-protocol.html#function_group-replication-set-communication-protocol"], "Feature Type": ["Function"], "index": 27, "vector_txt": "27:Feature: group_replication_set_communication_protocol()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_set_write_concurrency()"], "Description": ["Set maximum number of consensus instances that can be executed in", "\ngroup_replication_set_write_concurrency()\n", "\n              Configures the maximum number of consensus instances that\n              a group can execute in parallel. The\n              GROUP_REPLICATION_ADMIN\n              privilege is required to use this function.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_write_concurrency(instances)", "\n              Arguments:\n", "\n\nmembers: Sets the maximum\n                  number of consensus instances that a group can execute\n                  in parallel. Default value is 10, valid values are\n                  integers in the range of 10 to 200.\n\n", "\n              Return value:\n            ", "\n              Any resulting error as a string.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_write_concurrency(instances);", "\n              For more information, see\n              Section\u00a020.5.1.3, \u201cUsing Group Replication Group Write Consensus\u201d.\n"], "Examples": ["SELECT group_replication_set_write_concurrency(instances);"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-maximum-consensus.html#function_group-replication-set-write-concurrency"], "Feature Type": ["Function"], "index": 28, "vector_txt": "28:Feature: group_replication_set_write_concurrency()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_switch_to_multi_primary_mode()"], "Description": ["Changes the mode of a group running in single-primary mode to", "\ngroup_replication_switch_to_multi_primary_mode()\n", "\n              Changes a group running in single-primary mode to\n              multi-primary mode. Must be issued on a member of a\n              replication group running in single-primary mode.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_switch_to_multi_primary_mode()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_switch_to_multi_primary_mode()", "\n              All members which belong to the group become primaries.\n            ", "\n              For more information, see\n              Section\u00a020.5.1.2, \u201cChanging the Group Mode\u201d\n"], "Examples": [], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-mode.html#function_group-replication-switch-to-multi-primary-mode"], "Feature Type": ["Function"], "index": 29, "vector_txt": "29:Feature: group_replication_switch_to_multi_primary_mode()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_switch_to_single_primary_mode()"], "Description": ["Changes the mode of a group running in multi-primary mode to", "\ngroup_replication_switch_to_single_primary_mode()\n", "\n              Changes a group running in multi-primary mode to\n              single-primary mode, without the need to stop Group\n              Replication. Must be issued on a member of a replication\n              group running in multi-primary mode. When you change to\n              single-primary mode, strict consistency checks are also\n              disabled on all group members, as required in\n              single-primary mode\n              (group_replication_enforce_update_everywhere_checks=OFF).\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_switch_to_single_primary_mode([str])", "\n              Arguments:\n", "\n\nstr: A string containing\n                  the UUID of a member of the group which should become\n                  the new single primary. Other members of the group\n                  become secondaries.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_switch_to_single_primary_mode(member_uuid);", "\n              For more information, see\n              Section\u00a020.5.1.2, \u201cChanging the Group Mode\u201d\n"], "Examples": ["SELECT group_replication_switch_to_single_primary_mode(member_uuid);"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-mode.html#function_group-replication-switch-to-single-primary-mode"], "Feature Type": ["Function"], "index": 30, "vector_txt": "30:Feature: group_replication_switch_to_single_primary_mode()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["GROUPING(expr\n          [, expr] ...)"], "Description": ["Distinguish super-aggregate ROLLUP rows from regular rows", "\nGROUPING(expr\n          [, expr] ...)\n", "\n          For GROUP BY queries that include a\n          WITH ROLLUP modifier, the\n          ROLLUP operation produces super-aggregate\n          output rows where NULL represents the set\n          of all values. The GROUPING()\n          function enables you to distinguish NULL\n          values for super-aggregate rows from NULL\n          values in regular grouped rows.\n        ", "\nGROUPING() is permitted in the\n          select list, HAVING clause, and\n          ORDER BY clause.\n        ", "\n          Each argument to GROUPING()\n          must be an expression that exactly matches an expression in\n          the GROUP BY clause. The expression cannot\n          be a positional specifier. For each expression,\n          GROUPING() produces 1 if the\n          expression value in the current row is a\n          NULL representing a super-aggregate value.\n          Otherwise, GROUPING() produces\n          0, indicating that the expression value is a\n          NULL for a regular result row or is not\n          NULL.\n        ", "\n          Suppose that table t1 contains these rows,\n          where NULL indicates something like\n          \u201cother\u201d or \u201cunknown\u201d:\n        ", "Press CTRL+C to copy mysql> SELECT * FROM t1;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "\n          A summary of the table without WITH ROLLUP\n          looks like this:\n        ", "Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "\n          The result contains NULL values, but those\n          do not represent super-aggregate rows because the query does\n          not include WITH ROLLUP.\n        ", "\n          Adding WITH ROLLUP produces super-aggregate\n          summary rows containing additional NULL\n          values. However, without comparing this result to the previous\n          one, it is not easy to see which NULL\n          values occur in super-aggregate rows and which occur in\n          regular grouped rows:\n        ", "Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | NULL  |        5 |\n| ball | large |       20 |\n| ball | small |       10 |\n| ball | NULL  |       35 |\n| hoop | NULL  |        3 |\n| hoop | large |        5 |\n| hoop | small |       15 |\n| hoop | NULL  |       23 |\n| NULL | NULL  |       58 |\n+------+-------+----------+", "\n          To distinguish NULL values in\n          super-aggregate rows from those in regular grouped rows, use\n          GROUPING(), which returns 1\n          only for super-aggregate NULL values:\n        ", "Press CTRL+C to copy mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+\n| name | size  | quantity | grp_name | grp_size |\n+------+-------+----------+----------+----------+\n| ball | NULL  |        5 |        0 |        0 |\n| ball | large |       20 |        0 |        0 |\n| ball | small |       10 |        0 |        0 |\n| ball | NULL  |       35 |        0 |        1 |\n| hoop | NULL  |        3 |        0 |        0 |\n| hoop | large |        5 |        0 |        0 |\n| hoop | small |       15 |        0 |        0 |\n| hoop | NULL  |       23 |        0 |        1 |\n| NULL | NULL  |       58 |        1 |        1 |\n+------+-------+----------+----------+----------+", "\n          Common uses for GROUPING():\n", "\n\n              Substitute a label for super-aggregate\n              NULL values:\n            Press CTRL+C to copy mysql> SELECT\n         IF(GROUPING(name) = 1, 'All items', name) AS name,\n         IF(GROUPING(size) = 1, 'All sizes', size) AS size,\n         SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+-----------+-----------+----------+\n| name      | size      | quantity |\n+-----------+-----------+----------+\n| ball      | NULL      |        5 |\n| ball      | large     |       20 |\n| ball      | small     |       10 |\n| ball      | All sizes |       35 |\n| hoop      | NULL      |        3 |\n| hoop      | large     |        5 |\n| hoop      | small     |       15 |\n| hoop      | All sizes |       23 |\n| All items | All sizes |       58 |\n+-----------+-----------+----------+\n              Return only super-aggregate lines by filtering out the\n              regular grouped lines:\n            Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name) = 1 OR GROUPING(size) = 1;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+\n", "\nGROUPING() permits multiple\n          expression arguments. In this case, the\n          GROUPING() return value\n          represents a bitmask combined from the results for each\n          expression, where the lowest-order bit corresponds to the\n          result for the rightmost expression. For example, with three\n          expression arguments,\n          GROUPING(expr1,\n          expr2,\n          expr3) is evaluated like\n          this:\n        ", "Press CTRL+C to copy   result for GROUPING(expr3)\n+ result for GROUPING(expr2) << 1\n+ result for GROUPING(expr1) << 2", "\n          The following query shows how\n          GROUPING() results for single\n          arguments combine for a multiple-argument call to produce a\n          bitmask value:\n        ", "Press CTRL+C to copy mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size,\n       GROUPING(name, size) AS grp_all\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+---------+\n| name | size  | quantity | grp_name | grp_size | grp_all |\n+------+-------+----------+----------+----------+---------+\n| ball | NULL  |        5 |        0 |        0 |       0 |\n| ball | large |       20 |        0 |        0 |       0 |\n| ball | small |       10 |        0 |        0 |       0 |\n| ball | NULL  |       35 |        0 |        1 |       1 |\n| hoop | NULL  |        3 |        0 |        0 |       0 |\n| hoop | large |        5 |        0 |        0 |       0 |\n| hoop | small |       15 |        0 |        0 |       0 |\n| hoop | NULL  |       23 |        0 |        1 |       1 |\n| NULL | NULL  |       58 |        1 |        1 |       3 |\n+------+-------+----------+----------+----------+---------+", "\n          With multiple expression arguments, the\n          GROUPING() return value is\n          nonzero if any expression represents a super-aggregate value.\n          Multiple-argument GROUPING()\n          syntax thus provides a simpler way to write the earlier query\n          that returned only super-aggregate rows, by using a single\n          multiple-argument GROUPING()\n          call rather than multiple single-argument calls:\n        ", "Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name, size) <> 0;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+", "\n          Use of GROUPING() is subject to\n          these limitations:\n", "\n\n              Do not use subquery GROUP BY\n              expressions as GROUPING()\n              arguments because matching might fail. For example,\n              matching fails for this query:\n            Press CTRL+C to copy mysql> SELECT GROUPING((SELECT MAX(name) FROM t1))\n       FROM t1\n       GROUP BY (SELECT MAX(name) FROM t1) WITH ROLLUP;\nERROR 3580 (HY000): Argument #1 of GROUPING function is not in GROUP BY\nGROUP BY literal expressions should not\n              be used within a HAVING clause as\n              GROUPING() arguments. Due\n              to differences between when the optimizer evaluates\n              GROUP BY and HAVING,\n              matching may succeed but\n              GROUPING() evaluation does\n              not produce the expected result. Consider this query:\n            Press CTRL+C to copy SELECT a AS f1, 'w' AS f2\nFROM t\nGROUP BY f1, f2 WITH ROLLUP\nHAVING GROUPING(f2) = 1;\nGROUPING() is evaluated\n              earlier for the literal constant expression than for the\n              HAVING clause as a whole and returns 0.\n              To check whether a query such as this is affected, use\n              EXPLAIN and look for\n              Impossible having in the\n              Extra column.\n\n", "\n          For more information about WITH ROLLUP and\n          GROUPING(), see\n          Section\u00a014.19.2, \u201cGROUP BY Modifiers\u201d.\n        "], "Examples": ["mysql> SELECT * FROM t1;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | NULL  |        5 |\n| ball | large |       20 |\n| ball | small |       10 |\n| ball | NULL  |       35 |\n| hoop | NULL  |        3 |\n| hoop | large |        5 |\n| hoop | small |       15 |\n| hoop | NULL  |       23 |\n| NULL | NULL  |       58 |\n+------+-------+----------+", "mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+\n| name | size  | quantity | grp_name | grp_size |\n+------+-------+----------+----------+----------+\n| ball | NULL  |        5 |        0 |        0 |\n| ball | large |       20 |        0 |        0 |\n| ball | small |       10 |        0 |        0 |\n| ball | NULL  |       35 |        0 |        1 |\n| hoop | NULL  |        3 |        0 |        0 |\n| hoop | large |        5 |        0 |        0 |\n| hoop | small |       15 |        0 |        0 |\n| hoop | NULL  |       23 |        0 |        1 |\n| NULL | NULL  |       58 |        1 |        1 |\n+------+-------+----------+----------+----------+", "mysql> SELECT\n         IF(GROUPING(name) = 1, 'All items', name) AS name,\n         IF(GROUPING(size) = 1, 'All sizes', size) AS size,\n         SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+-----------+-----------+----------+\n| name      | size      | quantity |\n+-----------+-----------+----------+\n| ball      | NULL      |        5 |\n| ball      | large     |       20 |\n| ball      | small     |       10 |\n| ball      | All sizes |       35 |\n| hoop      | NULL      |        3 |\n| hoop      | large     |        5 |\n| hoop      | small     |       15 |\n| hoop      | All sizes |       23 |\n| All items | All sizes |       58 |\n+-----------+-----------+----------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name) = 1 OR GROUPING(size) = 1;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+", "mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size,\n       GROUPING(name, size) AS grp_all\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+---------+\n| name | size  | quantity | grp_name | grp_size | grp_all |\n+------+-------+----------+----------+----------+---------+\n| ball | NULL  |        5 |        0 |        0 |       0 |\n| ball | large |       20 |        0 |        0 |       0 |\n| ball | small |       10 |        0 |        0 |       0 |\n| ball | NULL  |       35 |        0 |        1 |       1 |\n| hoop | NULL  |        3 |        0 |        0 |       0 |\n| hoop | large |        5 |        0 |        0 |       0 |\n| hoop | small |       15 |        0 |        0 |       0 |\n| hoop | NULL  |       23 |        0 |        1 |       1 |\n| NULL | NULL  |       58 |        1 |        1 |       3 |\n+------+-------+----------+----------+----------+---------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name, size) <> 0;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+", "mysql> SELECT GROUPING((SELECT MAX(name) FROM t1))\n       FROM t1\n       GROUP BY (SELECT MAX(name) FROM t1) WITH ROLLUP;\nERROR 3580 (HY000): Argument #1 of GROUPING function is not in GROUP BY", "SELECT a AS f1, 'w' AS f2\nFROM t\nGROUP BY f1, f2 WITH ROLLUP\nHAVING GROUPING(f2) = 1;"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_grouping"], "Feature Type": ["Function"], "index": 31, "vector_txt": "31:Feature: GROUPING(expr\n          [, expr] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["HEX(str)"], "Description": ["Hexadecimal representation of decimal or string value", "\nHEX(str),\n          HEX(N)\n", "\n          For a string argument str,\n          HEX() returns a hexadecimal\n          string representation of str where\n          each byte of each character in str\n          is converted to two hexadecimal digits. (Multibyte characters\n          therefore become more than two digits.) The inverse of this\n          operation is performed by the\n          UNHEX() function.\n        ", "\n          For a numeric argument N,\n          HEX() returns a hexadecimal\n          string representation of the value of\n          N treated as a longlong\n          (BIGINT) number. This is\n          equivalent to\n          CONV(N,10,16).\n          The inverse of this operation is performed by\n          CONV(HEX(N),16,10).\n        ", "\n          For a NULL argument, this function returns\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT X'616263', HEX('abc'), UNHEX(HEX('abc'));\n        -> 'abc', 616263, 'abc'\nmysql> SELECT HEX(255), CONV(HEX(255),16,10);\n        -> 'FF', 255"], "Examples": ["mysql> SELECT X'616263', HEX('abc'), UNHEX(HEX('abc'));\n        -> 'abc', 616263, 'abc'\nmysql> SELECT HEX(255), CONV(HEX(255),16,10);\n        -> 'FF', 255"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_hex"], "Feature Type": ["Function"], "index": 32, "vector_txt": "32:Feature: HEX(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["STDDEV(expr)\n            [over_clause]"], "Description": ["Return the population standard deviation", "\nSTDDEV(expr)\n            [over_clause]\n", "\n            Returns the population standard deviation of\n            expr.\n            STDDEV() is a synonym for the\n            standard SQL function\n            STDDEV_POP(), provided for\n            compatibility with Oracle.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STDDEV() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_stddev"], "Feature Type": ["Function"], "index": 33, "vector_txt": "33:Feature: STDDEV(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["HOUR(time)"], "Description": ["Extract the hour", "\nHOUR(time)\n", "\n          Returns the hour for time. The\n          range of the return value is 0 to\n          23 for time-of-day values. However, the\n          range of TIME values actually\n          is much larger, so HOUR can return values\n          greater than 23. Returns\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT HOUR('10:05:03');\n        -> 10\nmysql> SELECT HOUR('272:59:59');\n        -> 272"], "Examples": ["mysql> SELECT HOUR('10:05:03');\n        -> 10\nmysql> SELECT HOUR('272:59:59');\n        -> 272"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_hour"], "Feature Type": ["Function"], "index": 34, "vector_txt": "34:Feature: HOUR(time)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["ICU_VERSION()"], "Description": ["ICU library version", "\nICU_VERSION()\n", "\n          The version of the International Components for Unicode (ICU)\n          library used to support regular expression operations (see\n          Section\u00a014.8.2, \u201cRegular Expressions\u201d). This function is primarily intended\n          for use in test cases.\n        "], "Examples": [], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_icu-version"], "Feature Type": ["Function"], "index": 35, "vector_txt": "35:Feature: ICU_VERSION()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.5 Flow Control Functions"], "Feature": ["IF(expr1,expr2,expr3)"], "Description": ["If/else construct", "\nIF(expr1,expr2,expr3)\n", "\n          If expr1 is TRUE\n          (expr1 <>\n          0 and expr1 IS\n          NOT NULL), IF()\n          returns expr2. Otherwise, it\n          returns expr3.\n", "\n\nNote\n\n\n            There is also an IF\nstatement, which differs from the\n            IF()\nfunction described here. See\n            Section\u00a015.6.5.2, \u201cIF Statement\u201d.\n\n", "\n          If only one of expr2 or\n          expr3 is explicitly\n          NULL, the result type of the\n          IF() function is the type of\n          the non-NULL expression.\n        ", "\n          The default return type of IF()\n          (which may matter when it is stored into a temporary table) is\n          calculated as follows:\n", "\n\n              If expr2 or\n              expr3 produce a string, the\n              result is a string.\n            \n              If expr2 and\n              expr3 are both strings, the\n              result is case-sensitive if either string is\n              case-sensitive.\n            \n              If expr2 or\n              expr3 produce a floating-point\n              value, the result is a floating-point value.\n            \n              If expr2 or\n              expr3 produce an integer, the\n              result is an integer.\n\n", "Press CTRL+C to copy mysql> SELECT IF(1>2,2,3);\n        -> 3\nmysql> SELECT IF(1<2,'yes','no');\n        -> 'yes'\nmysql> SELECT IF(STRCMP('test','test1'),'no','yes');\n        -> 'no'"], "Examples": ["mysql> SELECT IF(1>2,2,3);\n        -> 3\nmysql> SELECT IF(1<2,'yes','no');\n        -> 'yes'\nmysql> SELECT IF(STRCMP('test','test1'),'no','yes');\n        -> 'no'"], "Category": ["Built-In Functions", "Flow Control Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html#function_if"], "Feature Type": ["Function"], "index": 36, "vector_txt": "36:Feature: IF(expr1,expr2,expr3)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.5 Flow Control Functions"], "Feature": ["IFNULL(expr1,expr2)"], "Description": ["Null if/else construct", "\nIFNULL(expr1,expr2)\n", "\n          If expr1 is not\n          NULL,\n          IFNULL() returns\n          expr1; otherwise it returns\n          expr2.\n        ", "Press CTRL+C to copy mysql> SELECT IFNULL(1,0);\n        -> 1\nmysql> SELECT IFNULL(NULL,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,'yes');\n        -> 'yes'", "\n          The default return type of\n          IFNULL(expr1,expr2)\n          is the more \u201cgeneral\u201d of the two expressions, in\n          the order STRING, REAL,\n          or INTEGER. Consider the case of a table\n          based on expressions or where MySQL must internally store a\n          value returned by IFNULL() in a\n          temporary table:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE tmp SELECT IFNULL(1,'test') AS test;\nmysql> DESCRIBE tmp;\n+-------+--------------+------+-----+---------+-------+\n| Field | Type         | Null | Key | Default | Extra |\n+-------+--------------+------+-----+---------+-------+\n| test  | varbinary(4) | NO   |     |         |       |\n+-------+--------------+------+-----+---------+-------+", "\n          In this example, the type of the test\n          column is VARBINARY(4) (a\n          string type).\n        "], "Examples": ["mysql> SELECT IFNULL(1,0);\n        -> 1\nmysql> SELECT IFNULL(NULL,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,'yes');\n        -> 'yes'", "mysql> CREATE TABLE tmp SELECT IFNULL(1,'test') AS test;\nmysql> DESCRIBE tmp;\n+-------+--------------+------+-----+---------+-------+\n| Field | Type         | Null | Key | Default | Extra |\n+-------+--------------+------+-----+---------+-------+\n| test  | varbinary(4) | NO   |     |         |       |\n+-------+--------------+------+-----+---------+-------+"], "Category": ["Built-In Functions", "Flow Control Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html#function_ifnull"], "Feature Type": ["Function"], "index": 37, "vector_txt": "37:Feature: IFNULL(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4 Operators", "14.4.2 Comparison Functions and Operators"], "Feature": ["expr\n            IN (value,...)"], "Description": ["Whether a value is within a set of values", "\nexpr\n            IN (value,...)\n", "\n            Returns 1 (true) if\n            expr is equal to any of the\n            values in the IN() list, else returns\n            0 (false).\n          ", "\n            Type conversion takes place according to the rules described\n            in Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d, applied to all the\n            arguments. If no type conversion is needed for the values in\n            the IN() list, they are all\n            non-JSON constants of the same type, and\n            expr can be compared to each of\n            them as a value of the same type (possibly after type\n            conversion), an optimization takes place. The values the\n            list are sorted and the search for\n            expr is done using a binary\n            search, which makes the IN() operation\n            very quick.\n          ", "Press CTRL+C to copy mysql> SELECT 2 IN (0,3,5,7);\n        -> 0\nmysql> SELECT 'wefwf' IN ('wee','wefwf','weg');\n        -> 1", "\nIN() can be used to compare row\n            constructors:\n          ", "Press CTRL+C to copy mysql> SELECT (3,4) IN ((1,2), (3,4));\n        -> 1\nmysql> SELECT (3,4) IN ((1,2), (3,5));\n        -> 0", "\n            You should never mix quoted and unquoted values in an\n            IN() list because the comparison rules\n            for quoted values (such as strings) and unquoted values\n            (such as numbers) differ. Mixing types may therefore lead to\n            inconsistent results. For example, do not write an\n            IN() expression like this:\n          ", "Press CTRL+C to copy SELECT val1 FROM tbl1 WHERE val1 IN (1,2,'a');", "\n            Instead, write it like this:\n          ", "Press CTRL+C to copy SELECT val1 FROM tbl1 WHERE val1 IN ('1','2','a');", "\n            Implicit type conversion may produce nonintuitive results:\n          ", "Press CTRL+C to copy mysql> SELECT 'a' IN (0), 0 IN ('b');\n        -> 1, 1", "\n            In both cases, the comparison values are converted to\n            floating-point values, yielding 0.0 in each case, and a\n            comparison result of 1 (true).\n          ", "\n            The number of values in the IN() list is\n            only limited by the\n            max_allowed_packet value.\n          ", "\n            To comply with the SQL standard, IN()\n            returns NULL not only if the expression\n            on the left hand side is NULL, but also\n            if no match is found in the list and one of the expressions\n            in the list is NULL.\n          ", "\nIN() syntax can also be used to write\n            certain types of subqueries. See\n            Section\u00a015.2.15.3, \u201cSubqueries with ANY, IN, or SOME\u201d.\n          "], "Examples": ["mysql> SELECT 2 IN (0,3,5,7);\n        -> 0\nmysql> SELECT 'wefwf' IN ('wee','wefwf','weg');\n        -> 1", "mysql> SELECT (3,4) IN ((1,2), (3,4));\n        -> 1\nmysql> SELECT (3,4) IN ((1,2), (3,5));\n        -> 0", "SELECT val1 FROM tbl1 WHERE val1 IN (1,2,'a');", "SELECT val1 FROM tbl1 WHERE val1 IN ('1','2','a');", "mysql> SELECT 'a' IN (0), 0 IN ('b');\n        -> 1, 1"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_in"], "Feature Type": ["Function"], "index": 38, "vector_txt": "38:Feature: expr\n            IN (value,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["INET_ATON(expr)"], "Description": ["Return the numeric value of an IP address", "\nINET_ATON(expr)\n", "\n          Given the dotted-quad representation of an IPv4 network\n          address as a string, returns an integer that represents the\n          numeric value of the address in network byte order (big\n          endian). INET_ATON() returns\n          NULL if it does not understand its\n          argument, or if expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT INET_ATON('10.0.5.9');\n        -> 167773449", "\n          For this example, the return value is calculated as\n          10\u00d72563 +\n          0\u00d72562 + 5\u00d7256 + 9.\n        ", "\nINET_ATON() may or may not\n          return a non-NULL result for short-form IP\n          addresses (such as '127.1' as a\n          representation of '127.0.0.1'). Because of\n          this, INET_ATON()a should not\n          be used for such addresses.\n", "\n\nNote\n\n\n            To store values generated by\n            INET_ATON(), use an\n            INT UNSIGNED column rather than\n            INT, which is signed. If you\n            use a signed column, values corresponding to IP addresses\n            for which the first octet is greater than 127 cannot be\n            stored correctly. See\n            Section\u00a013.1.7, \u201cOut-of-Range and Overflow Handling\u201d.\n\n"], "Examples": ["mysql> SELECT INET_ATON('10.0.5.9');\n        -> 167773449"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_inet-aton"], "Feature Type": ["Function"], "index": 39, "vector_txt": "39:Feature: INET_ATON(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["INET_NTOA(expr)"], "Description": ["Return the IP address from a numeric value", "\nINET_NTOA(expr)\n", "\n          Given a numeric IPv4 network address in network byte order,\n          returns the dotted-quad string representation of the address\n          as a string in the connection character set.\n          INET_NTOA() returns\n          NULL if it does not understand its\n          argument.\n        ", "Press CTRL+C to copy mysql> SELECT INET_NTOA(167773449);\n        -> '10.0.5.9'"], "Examples": ["mysql> SELECT INET_NTOA(167773449);\n        -> '10.0.5.9'"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_inet-ntoa"], "Feature Type": ["Function"], "index": 40, "vector_txt": "40:Feature: INET_NTOA(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["INSERT(str,pos,len,newstr)"], "Description": ["Insert substring at specified position up to specified number of", "\nINSERT(str,pos,len,newstr)\n", "\n          Returns the string str, with the\n          substring beginning at position pos\n          and len characters long replaced by\n          the string newstr. Returns the\n          original string if pos is not\n          within the length of the string. Replaces the rest of the\n          string from position pos if\n          len is not within the length of the\n          rest of the string. Returns NULL if any\n          argument is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT INSERT('Quadratic', 3, 4, 'What');\n        -> 'QuWhattic'\nmysql> SELECT INSERT('Quadratic', -1, 4, 'What');\n        -> 'Quadratic'\nmysql> SELECT INSERT('Quadratic', 3, 100, 'What');\n        -> 'QuWhat'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT INSERT('Quadratic', 3, 4, 'What');\n        -> 'QuWhattic'\nmysql> SELECT INSERT('Quadratic', -1, 4, 'What');\n        -> 'Quadratic'\nmysql> SELECT INSERT('Quadratic', 3, 100, 'What');\n        -> 'QuWhat'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_insert"], "Feature Type": ["Function"], "index": 41, "vector_txt": "41:Feature: INSERT(str,pos,len,newstr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["INSTR(str,substr)"], "Description": ["Return the index of the first occurrence of substring", "\nINSTR(str,substr)\n", "\n          Returns the position of the first occurrence of substring\n          substr in string\n          str. This is the same as the\n          two-argument form of LOCATE(),\n          except that the order of the arguments is reversed.\n        ", "Press CTRL+C to copy mysql> SELECT INSTR('foobarbar', 'bar');\n        -> 4\nmysql> SELECT INSTR('xbar', 'foobar');\n        -> 0", "\n          This function is multibyte safe, and is case-sensitive only if\n          at least one argument is a binary string. If either argument\n          is NULL, this functions returns\n          NULL.\n        "], "Examples": ["mysql> SELECT INSTR('foobarbar', 'bar');\n        -> 4\nmysql> SELECT INSTR('xbar', 'foobar');\n        -> 0"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_instr"], "Feature Type": ["Function"], "index": 42, "vector_txt": "42:Feature: INSTR(str,substr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_AUTO_INCREMENT(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_AUTO_INCREMENT(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-auto-increment"], "Feature Type": ["Function"], "index": 43, "vector_txt": "43:Feature: INTERNAL_AUTO_INCREMENT(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["STDDEV_POP(expr)\n            [over_clause]"], "Description": ["Return the population standard deviation", "\nSTDDEV_POP(expr)\n            [over_clause]\n", "\n            Returns the population standard deviation of\n            expr (the square root of\n            VAR_POP()). You can also use\n            STD() or\n            STDDEV(), which are\n            equivalent but not standard SQL.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STDDEV_POP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_stddev-pop"], "Feature Type": ["Function"], "index": 44, "vector_txt": "44:Feature: STDDEV_POP(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_AVG_ROW_LENGTH(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_AVG_ROW_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-avg-row-length"], "Feature Type": ["Function"], "index": 45, "vector_txt": "45:Feature: INTERNAL_AVG_ROW_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_CHECK_TIME(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_CHECK_TIME(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-check-time"], "Feature Type": ["Function"], "index": 46, "vector_txt": "46:Feature: INTERNAL_CHECK_TIME(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_CHECKSUM(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_CHECKSUM(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-checksum"], "Feature Type": ["Function"], "index": 47, "vector_txt": "47:Feature: INTERNAL_CHECKSUM(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_DATA_FREE(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_DATA_FREE(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-data-free"], "Feature Type": ["Function"], "index": 48, "vector_txt": "48:Feature: INTERNAL_DATA_FREE(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_DATA_LENGTH(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_DATA_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-data-length"], "Feature Type": ["Function"], "index": 49, "vector_txt": "49:Feature: INTERNAL_DATA_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_DD_CHAR_LENGTH(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_DD_CHAR_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-dd-char-length"], "Feature Type": ["Function"], "index": 50, "vector_txt": "50:Feature: INTERNAL_DD_CHAR_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_GET_COMMENT_OR_ERROR(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_GET_COMMENT_OR_ERROR(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-comment-or-error"], "Feature Type": ["Function"], "index": 51, "vector_txt": "51:Feature: INTERNAL_GET_COMMENT_OR_ERROR(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_GET_ENABLED_ROLE_JSON(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_GET_ENABLED_ROLE_JSON(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-enabled-role-json"], "Feature Type": ["Function"], "index": 52, "vector_txt": "52:Feature: INTERNAL_GET_ENABLED_ROLE_JSON(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_GET_HOSTNAME(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_GET_HOSTNAME(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-hostname"], "Feature Type": ["Function"], "index": 53, "vector_txt": "53:Feature: INTERNAL_GET_HOSTNAME(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_GET_USERNAME(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_GET_USERNAME(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-username"], "Feature Type": ["Function"], "index": 54, "vector_txt": "54:Feature: INTERNAL_GET_USERNAME(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["STDDEV_SAMP(expr)\n            [over_clause]"], "Description": ["Return the sample standard deviation", "\nSTDDEV_SAMP(expr)\n            [over_clause]\n", "\n            Returns the sample standard deviation of\n            expr (the square root of\n            VAR_SAMP().\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STDDEV_SAMP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_stddev-samp"], "Feature Type": ["Function"], "index": 55, "vector_txt": "55:Feature: STDDEV_SAMP(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_GET_VIEW_WARNING_OR_ERROR(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_GET_VIEW_WARNING_OR_ERROR(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-view-warning-or-error"], "Feature Type": ["Function"], "index": 56, "vector_txt": "56:Feature: INTERNAL_GET_VIEW_WARNING_OR_ERROR(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_INDEX_COLUMN_CARDINALITY(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_INDEX_COLUMN_CARDINALITY(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-index-column-cardinality"], "Feature Type": ["Function"], "index": 57, "vector_txt": "57:Feature: INTERNAL_INDEX_COLUMN_CARDINALITY(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_INDEX_LENGTH(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_INDEX_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-index-length"], "Feature Type": ["Function"], "index": 58, "vector_txt": "58:Feature: INTERNAL_INDEX_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_IS_ENABLED_ROLE(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_IS_ENABLED_ROLE(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-is-enabled-role"], "Feature Type": ["Function"], "index": 59, "vector_txt": "59:Feature: INTERNAL_IS_ENABLED_ROLE(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_IS_MANDATORY_ROLE(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_IS_MANDATORY_ROLE(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-is-mandatory-role"], "Feature Type": ["Function"], "index": 60, "vector_txt": "60:Feature: INTERNAL_IS_MANDATORY_ROLE(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_KEYS_DISABLED(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_KEYS_DISABLED(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-keys-disabled"], "Feature Type": ["Function"], "index": 61, "vector_txt": "61:Feature: INTERNAL_KEYS_DISABLED(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_MAX_DATA_LENGTH(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_MAX_DATA_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-max-data-length"], "Feature Type": ["Function"], "index": 62, "vector_txt": "62:Feature: INTERNAL_MAX_DATA_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_TABLE_ROWS(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_TABLE_ROWS(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-table-rows"], "Feature Type": ["Function"], "index": 63, "vector_txt": "63:Feature: INTERNAL_TABLE_ROWS(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_UPDATE_TIME(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_UPDATE_TIME(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-update-time"], "Feature Type": ["Function"], "index": 64, "vector_txt": "64:Feature: INTERNAL_UPDATE_TIME(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["INTERVAL(N,N1,N2,N3,...)"], "Description": ["Return the index of the argument that is less than the first", "\nINTERVAL(N,N1,N2,N3,...)\n", "\n            Returns 0 if N\n            \u2264 N1, 1 if\n            N \u2264\n            N2 and so on, or\n            -1 if N is\n            NULL. All arguments are treated as\n            integers. It is required that N1\n            \u2264 N2 \u2264\n            N3 \u2264 ...\n            \u2264 Nn for this function to work\n            correctly. This is because a binary search is used (very\n            fast).\n          ", "Press CTRL+C to copy mysql> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n        -> 3\nmysql> SELECT INTERVAL(10, 1, 10, 100, 1000);\n        -> 2\nmysql> SELECT INTERVAL(22, 23, 30, 44, 200);\n        -> 0"], "Examples": ["mysql> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n        -> 3\nmysql> SELECT INTERVAL(10, 1, 10, 100, 1000);\n        -> 2\nmysql> SELECT INTERVAL(22, 23, 30, 44, 200);\n        -> 0"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_interval"], "Feature Type": ["Function"], "index": 65, "vector_txt": "65:Feature: INTERVAL(N,N1,N2,N3,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["SUM([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the sum", "\nSUM([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the sum of expr. If the\n            return set has no rows, SUM()\n            returns NULL. The\n            DISTINCT keyword can be used to sum only\n            the distinct values of expr.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            SUM() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_sum"], "Feature Type": ["Function"], "index": 66, "vector_txt": "66:Feature: SUM([DISTINCT]\n            expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.14 Locking Functions"], "Feature": ["IS_FREE_LOCK(str)"], "Description": ["Whether the named lock is free", "\nIS_FREE_LOCK(str)\n", "\n          Checks whether the lock named str\n          is free to use (that is, not locked). Returns\n          1 if the lock is free (no one is using the\n          lock), 0 if the lock is in use, and\n          NULL if an error occurs (such as an\n          incorrect argument).\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": [], "Category": ["Built-In Functions", "Locking Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_is-free-lock"], "Feature Type": ["Function"], "index": 67, "vector_txt": "67:Feature: IS_FREE_LOCK(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.14 Locking Functions"], "Feature": ["IS_USED_LOCK(str)"], "Description": ["Whether the named lock is in use; return connection identifier if", "\nIS_USED_LOCK(str)\n", "\n          Checks whether the lock named str\n          is in use (that is, locked). If so, it returns the connection\n          identifier of the client session that holds the lock.\n          Otherwise, it returns NULL.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": [], "Category": ["Built-In Functions", "Locking Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_is-used-lock"], "Feature Type": ["Function"], "index": 68, "vector_txt": "68:Feature: IS_USED_LOCK(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["IS_UUID(string_uuid)"], "Description": ["Whether argument is a valid UUID", "\nIS_UUID(string_uuid)\n", "\n          Returns 1 if the argument is a valid string-format UUID, 0 if\n          the argument is not a valid UUID, and NULL\n          if the argument is NULL.\n        ", "\n\u201cValid\u201d means that the value is in a format that\n          can be parsed. That is, it has the correct length and contains\n          only the permitted characters (hexadecimal digits in any\n          lettercase and, optionally, dashes and curly braces). This\n          format is most common:\n        ", "Press CTRL+C to copy aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", "\n          These other formats are also permitted:\n        ", "Press CTRL+C to copy aaaaaaaabbbbccccddddeeeeeeeeeeee\n{aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee}", "\n          For the meanings of fields within the value, see the\n          UUID() function description.\n        ", "Press CTRL+C to copy mysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db');\n+-------------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB');\n+-------------------------------------------------+\n| IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780cbaba102695645b8c656024db');\n+---------------------------------------------+\n| IS_UUID('6ccd780cbaba102695645b8c656024db') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}');\n+---------------------------------------------------+\n| IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}') |\n+---------------------------------------------------+\n|                                                 1 |\n+---------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c6560');\n+---------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c6560') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID(RAND());\n+-----------------+\n| IS_UUID(RAND()) |\n+-----------------+\n|               0 |\n+-----------------+"], "Examples": ["mysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db');\n+-------------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB');\n+-------------------------------------------------+\n| IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780cbaba102695645b8c656024db');\n+---------------------------------------------+\n| IS_UUID('6ccd780cbaba102695645b8c656024db') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}');\n+---------------------------------------------------+\n| IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}') |\n+---------------------------------------------------+\n|                                                 1 |\n+---------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c6560');\n+---------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c6560') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID(RAND());\n+-----------------+\n| IS_UUID(RAND()) |\n+-----------------+\n|               0 |\n+-----------------+"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_is-uuid"], "Feature Type": ["Function"], "index": 69, "vector_txt": "69:Feature: IS_UUID(string_uuid)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["ISNULL(expr)"], "Description": ["Test whether the argument is NULL", "\nISNULL(expr)\n", "\n            If expr is\n            NULL,\n            ISNULL() returns\n            1, otherwise it returns\n            0.\n          ", "Press CTRL+C to copy mysql> SELECT ISNULL(1+1);\n        -> 0\nmysql> SELECT ISNULL(1/0);\n        -> 1", "\nISNULL() can be used instead\n            of = to test\n            whether a value is NULL. (Comparing a\n            value to NULL using\n            = always\n            yields NULL.)\n          ", "\n            The ISNULL() function shares\n            some special behaviors with the\n            IS NULL\n            comparison operator. See the description of\n            IS NULL.\n          "], "Examples": ["mysql> SELECT ISNULL(1+1);\n        -> 0\nmysql> SELECT ISNULL(1/0);\n        -> 1"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_isnull"], "Feature Type": ["Function"], "index": 70, "vector_txt": "70:Feature: ISNULL(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY([val[,\n          val] ...])"], "Description": ["Create JSON array", "\nJSON_ARRAY([val[,\n          val] ...])\n", "\n          Evaluates a (possibly empty) list of values and returns a JSON\n          array containing those values.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME());\n+---------------------------------------------+\n| JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME()) |\n+---------------------------------------------+\n| [1, \"abc\", null, true, \"11:30:24.000000\"]   |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME());\n+---------------------------------------------+\n| JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME()) |\n+---------------------------------------------+\n| [1, \"abc\", null, true, \"11:30:24.000000\"]   |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-array"], "Feature Type": ["Function"], "index": 71, "vector_txt": "71:Feature: JSON_ARRAY([val[,\n          val] ...])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY_APPEND(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Append data to JSON document", "\nJSON_ARRAY_APPEND(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Appends values to the end of the indicated arrays within a\n          JSON document and returns the result. Returns\n          NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          If a path selects a scalar or object value, that value is\n          autowrapped within an array and the new value is added to that\n          array. Pairs for which the path does not identify any value in\n          the JSON document are ignored.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1]', 1) |\n+----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\"]        |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[0]', 2) |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\"]      |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |\n+-------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\"]         |\n+-------------------------------------+\n\nmysql> SET @j = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');\n+------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.b', 'x')  |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');\n+--------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.c', 'y')    |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n\nmysql> SET @j = '{\"a\": 1}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$', 'z');\n+---------------------------------+\n| JSON_ARRAY_APPEND(@j, '$', 'z') |\n+---------------------------------+\n| [{\"a\": 1}, \"z\"]                 |\n+---------------------------------+"], "Examples": ["mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1]', 1) |\n+----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\"]        |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[0]', 2) |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\"]      |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |\n+-------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\"]         |\n+-------------------------------------+\n\nmysql> SET @j = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');\n+------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.b', 'x')  |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');\n+--------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.c', 'y')    |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n\nmysql> SET @j = '{\"a\": 1}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$', 'z');\n+---------------------------------+\n| JSON_ARRAY_APPEND(@j, '$', 'z') |\n+---------------------------------+\n| [{\"a\": 1}, \"z\"]                 |\n+---------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-array-append"], "Feature Type": ["Function"], "index": 72, "vector_txt": "72:Feature: JSON_ARRAY_APPEND(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert into JSON array", "\nJSON_ARRAY_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Updates a JSON document, inserting into an array within the\n          document and returning the modified document. Returns\n          NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard or does\n          not end with an array element identifier.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          Pairs for which the path does not identify any array in the\n          JSON document are ignored. If a path identifies an array\n          element, the corresponding value is inserted at that element\n          position, shifting any following values to the right. If a\n          path identifies an array position past the end of an array,\n          the value is inserted at the end of the array.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+", "\n          Earlier modifications affect the positions of the following\n          elements in the array, so subsequent paths in the same\n          JSON_ARRAY_INSERT() call should\n          take this into account. In the final example, the second path\n          inserts nothing because the path no longer matches anything\n          after the first insert.\n        "], "Examples": ["mysql> SET @j = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-array-insert"], "Feature Type": ["Function"], "index": 73, "vector_txt": "73:Feature: JSON_ARRAY_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["JSON_ARRAYAGG(col_or_expr)\n            [over_clause]"], "Description": ["Return result set as a single JSON array", "\nJSON_ARRAYAGG(col_or_expr)\n            [over_clause]\n", "\n            Aggregates a result set as a single\n            JSON array whose elements\n            consist of the rows. The order of elements in this array is\n            undefined. The function acts on a column or an expression\n            that evaluates to a single value. Returns\n            NULL if the result contains no rows, or\n            in the event of an error. If\n            col_or_expr is\n            NULL, the function returns an array of\n            JSON [null] elements.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_ARRAYAGG(attribute) AS attributes\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------+\n| o_id | attributes          |\n+------+---------------------+\n|    2 | [\"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\"]  |\n+------+---------------------+\n2 rows in set (0.00 sec)"], "Examples": ["mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_ARRAYAGG(attribute) AS attributes\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------+\n| o_id | attributes          |\n+------+---------------------+\n|    2 | [\"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\"]  |\n+------+---------------------+\n2 rows in set (0.00 sec)"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_json-arrayagg"], "Feature Type": ["Function"], "index": 74, "vector_txt": "74:Feature: JSON_ARRAYAGG(col_or_expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_CONTAINS(target,\n          candidate[,\n          path])"], "Description": ["Whether JSON document contains specific object at path", "\nJSON_CONTAINS(target,\n          candidate[,\n          path])\n", "\n          Indicates by returning 1 or 0 whether a given\n          candidate JSON document is\n          contained within a target JSON\n          document, or\u2014if a path\n          argument was supplied\u2014whether the candidate is found at\n          a specific path within the target. Returns\n          NULL if any argument is\n          NULL, or if the path argument does not\n          identify a section of the target document. An error occurs if\n          target or\n          candidate is not a valid JSON\n          document, or if the path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          To check only whether any data exists at the path, use\n          JSON_CONTAINS_PATH() instead.\n        ", "\n          The following rules define containment:\n", "\n\n              A candidate scalar is contained in a target scalar if and\n              only if they are comparable and are equal. Two scalar\n              values are comparable if they have the same\n              JSON_TYPE() types, with the\n              exception that values of types INTEGER\n              and DECIMAL are also comparable to each\n              other.\n            \n              A candidate array is contained in a target array if and\n              only if every element in the candidate is contained in\n              some element of the target.\n            \n              A candidate nonarray is contained in a target array if and\n              only if the candidate is contained in some element of the\n              target.\n            \n              A candidate object is contained in a target object if and\n              only if for each key in the candidate there is a key with\n              the same name in the target and the value associated with\n              the candidate key is contained in the value associated\n              with the target key.\n\n", "\n          Otherwise, the candidate value is not contained in the target\n          document.\n        ", "\n          Queries using JSON_CONTAINS() on\n          InnoDB tables can be optimized\n          using multi-valued indexes; see\n          Multi-Valued Indexes, for more\n          information.\n        ", "Press CTRL+C to copy mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SET @j2 = '1';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.b');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.b') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nmysql> SET @j2 = '{\"d\": 4}';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.c');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.c') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+"], "Examples": ["mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SET @j2 = '1';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.b');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.b') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nmysql> SET @j2 = '{\"d\": 4}';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.c');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.c') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-contains"], "Feature Type": ["Function"], "index": 75, "vector_txt": "75:Feature: JSON_CONTAINS(target,\n          candidate[,\n          path])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_CONTAINS_PATH(json_doc,\n          one_or_all,\n          path[,\n          path] ...)"], "Description": ["Whether JSON document contains any data at path", "\nJSON_CONTAINS_PATH(json_doc,\n          one_or_all,\n          path[,\n          path] ...)\n", "\n          Returns 0 or 1 to indicate whether a JSON document contains\n          data at a given path or paths. Returns NULL\n          if any argument is NULL. An error occurs if\n          the json_doc argument is not a\n          valid JSON document, any path\n          argument is not a valid path expression, or\n          one_or_all is not\n          'one' or 'all'.\n        ", "\n          To check for a specific value at a path, use\n          JSON_CONTAINS() instead.\n        ", "\n          The return value is 0 if no specified path exists within the\n          document. Otherwise, the return value depends on the\n          one_or_all argument:\n", "\n\n'one': 1 if at least one path exists\n              within the document, 0 otherwise.\n            \n'all': 1 if all paths exist within the\n              document, 0 otherwise.\n\n", "Press CTRL+C to copy mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+"], "Examples": ["mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-contains-path"], "Feature Type": ["Function"], "index": 76, "vector_txt": "76:Feature: JSON_CONTAINS_PATH(json_doc,\n          one_or_all,\n          path[,\n          path] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["VAR_POP(expr)\n            [over_clause]"], "Description": ["Return the population standard variance", "\nVAR_POP(expr)\n            [over_clause]\n", "\n            Returns the population standard variance of\n            expr. It considers rows as the\n            whole population, not as a sample, so it has the number of\n            rows as the denominator. You can also use\n            VARIANCE(), which is\n            equivalent but is not standard SQL.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            VAR_POP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_var-pop"], "Feature Type": ["Function"], "index": 77, "vector_txt": "77:Feature: VAR_POP(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_DEPTH(json_doc)"], "Description": ["Maximum depth of JSON document", "\nJSON_DEPTH(json_doc)\n", "\n          Returns the maximum depth of a JSON document. Returns\n          NULL if the argument is\n          NULL. An error occurs if the argument is\n          not a valid JSON document.\n        ", "\n          An empty array, empty object, or scalar value has depth 1. A\n          nonempty array containing only elements of depth 1 or nonempty\n          object containing only member values of depth 1 has depth 2.\n          Otherwise, a JSON document has depth greater than 2.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\nmysql> SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');\n+------------------------+------------------------+\n| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |\n+------------------------+------------------------+\n|                      2 |                      2 |\n+------------------------+------------------------+\nmysql> SELECT JSON_DEPTH('[10, {\"a\": 20}]');\n+-------------------------------+\n| JSON_DEPTH('[10, {\"a\": 20}]') |\n+-------------------------------+\n|                             3 |\n+-------------------------------+"], "Examples": ["mysql> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\nmysql> SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');\n+------------------------+------------------------+\n| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |\n+------------------------+------------------------+\n|                      2 |                      2 |\n+------------------------+------------------------+\nmysql> SELECT JSON_DEPTH('[10, {\"a\": 20}]');\n+-------------------------------+\n| JSON_DEPTH('[10, {\"a\": 20}]') |\n+-------------------------------+\n|                             3 |\n+-------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-depth"], "Feature Type": ["Function"], "index": 78, "vector_txt": "78:Feature: JSON_DEPTH(json_doc)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_EXTRACT(json_doc,\n          path[,\n          path] ...)"], "Description": ["Return data from JSON document", "\nJSON_EXTRACT(json_doc,\n          path[,\n          path] ...)\n", "\n          Returns data from a JSON document, selected from the parts of\n          the document matched by the path\n          arguments. Returns NULL if any argument is\n          NULL or no paths locate a value in the\n          document. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression.\n        ", "\n          The return value consists of all values matched by the\n          path arguments. If it is possible\n          that those arguments could return multiple values, the matched\n          values are autowrapped as an array, in the order corresponding\n          to the paths that produced them. Otherwise, the return value\n          is the single matched value.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |\n+--------------------------------------------+\n| 20                                         |\n+--------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');\n+----------------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |\n+----------------------------------------------------+\n| [20, 10]                                           |\n+----------------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |\n+-----------------------------------------------+\n| [30, 40]                                      |\n+-----------------------------------------------+", "\n          MySQL supports the\n          ->\n          operator as shorthand for this function as used with 2\n          arguments where the left hand side is a\n          JSON column identifier (not an\n          expression) and the right hand side is the JSON path to be\n          matched within the column.\n        "], "Examples": ["mysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |\n+--------------------------------------------+\n| 20                                         |\n+--------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');\n+----------------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |\n+----------------------------------------------------+\n| [20, 10]                                           |\n+----------------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |\n+-----------------------------------------------+\n| [30, 40]                                      |\n+-----------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-extract"], "Feature Type": ["Function"], "index": 79, "vector_txt": "79:Feature: JSON_EXTRACT(json_doc,\n          path[,\n          path] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert data into JSON document", "\nJSON_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Inserts data into a JSON document and returns the result.\n          Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document is\n          ignored and does not overwrite the existing document value. A\n          path-value pair for a nonexisting path in the document adds\n          the value to the document if the path identifies one of these\n          types of values:\n", "\n\n              A member not present in an existing object. The member is\n              added to the object and associated with the new value.\n            \n              A position past the end of an existing array. The array is\n              extended with the new value. If the existing value is not\n              an array, it is autowrapped as an array, then extended\n              with the new value.\n\n", "\n          Otherwise, a path-value pair for a nonexisting path in the\n          document is ignored and has no effect.\n        ", "\n          For a comparison of\n          JSON_INSERT(),\n          JSON_REPLACE(), and\n          JSON_SET(), see the discussion\n          of JSON_SET().\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+", "\n          The third and final value listed in the result is a quoted\n          string and not an array like the second one (which is not\n          quoted in the output); no casting of values to the JSON type\n          is performed. To insert the array as an array, you must\n          perform such casts explicitly, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON));\n+------------------------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON)) |\n+------------------------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [true, false]}                        |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+", "mysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON));\n+------------------------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON)) |\n+------------------------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [true, false]}                        |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-insert"], "Feature Type": ["Function"], "index": 80, "vector_txt": "80:Feature: JSON_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_KEYS(json_doc[,\n          path])"], "Description": ["Array of keys from JSON document", "\nJSON_KEYS(json_doc[,\n          path])\n", "\n          Returns the keys from the top-level value of a JSON object as\n          a JSON array, or, if a path\n          argument is given, the top-level keys from the selected path.\n          Returns NULL if any argument is\n          NULL, the\n          json_doc argument is not an object,\n          or path, if given, does not locate\n          an object. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or the path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The result array is empty if the selected object is empty. If\n          the top-level value has nested subobjects, the return value\n          does not include keys from those subobjects.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\nmysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+"], "Examples": ["mysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\nmysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-keys"], "Feature Type": ["Function"], "index": 81, "vector_txt": "81:Feature: JSON_KEYS(json_doc[,\n          path])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_LENGTH(json_doc[,\n          path])"], "Description": ["Number of elements in JSON document", "\nJSON_LENGTH(json_doc[,\n          path])\n", "\n          Returns the length of a JSON document, or, if a\n          path argument is given, the length\n          of the value within the document identified by the path.\n          Returns NULL if any argument is\n          NULL or the path\n          argument does not identify a value in the document. An error\n          occurs if the json_doc argument is\n          not a valid JSON document or the\n          path argument is not a valid path\n          expression.\n        ", "\n          The length of a document is determined as follows:\n", "\n\n              The length of a scalar is 1.\n            \n              The length of an array is the number of array elements.\n            \n              The length of an object is the number of object members.\n            \n              The length does not count the length of nested arrays or\n              objects.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}]');\n+---------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}]') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}');\n+-----------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+-----------------------------------------+\n|                                       2 |\n+-----------------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+"], "Examples": ["mysql> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}]');\n+---------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}]') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}');\n+-----------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+-----------------------------------------+\n|                                       2 |\n+-----------------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-length"], "Feature Type": ["Function"], "index": 82, "vector_txt": "82:Feature: JSON_LENGTH(json_doc[,\n          path])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, preserving duplicate keys. Deprecated", "\nJSON_MERGE(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Deprecated synonym for\n          JSON_MERGE_PRESERVE().\n        "], "Examples": [], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge"], "Feature Type": ["Function"], "index": 83, "vector_txt": "83:Feature: JSON_MERGE(json_doc,\n          json_doc[,\n          json_doc] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE_PATCH(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, replacing values of duplicate keys", "\nJSON_MERGE_PATCH(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Performs an\n          RFC\n          7396 compliant merge of two or more JSON documents and\n          returns the merged result, without preserving members having\n          duplicate keys. Raises an error if at least one of the\n          documents passed as arguments to this function is not valid.\n", "\n\nNote\n\n\n            For an explanation and example of the differences between\n            this function and JSON_MERGE_PRESERVE(),\n            see\n            JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE().\n\n", "\nJSON_MERGE_PATCH() performs a merge as\n          follows:\n", "\n\n              If the first argument is not an object, the result of the\n              merge is the same as if an empty object had been merged\n              with the second argument.\n            \n              If the second argument is not an object, the result of the\n              merge is the second argument.\n            \n              If both arguments are objects, the result of the merge is\n              an object with the following members:\n\n\n\n                  All members of the first object which do not have a\n                  corresponding member with the same key in the second\n                  object.\n                \n                  All members of the second object which do not have a\n                  corresponding key in the first object, and whose value\n                  is not the JSON null literal.\n                \n                  All members with a key that exists in both the first\n                  and the second object, and whose value in the second\n                  object is not the JSON null\n                  literal. The values of these members are the results\n                  of recursively merging the value in the first object\n                  with the value in the second object.\n\n\n\n", "\n          For additional information, see\n          Normalization, Merging, and Autowrapping of JSON Values.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '[true, false]') |\n+---------------------------------------------+\n| [true, false]                               |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}') |\n+-------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}');\n+------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}') |\n+------------------------------------------+\n| {\"id\": 47}                               |\n+------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',\n     >     '{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }',\n     >     '{ \"a\": 5, \"d\":6 }');\n+-------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }','{ \"a\": 5, \"d\":6 }') |\n+-------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                              |\n+-------------------------------------------------------------------------------+", "\n          You can use this function to remove a member by specifying\n          null as the value of the same member in the\n          second argument, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}');\n+--------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}') |\n+--------------------------------------------------+\n| {\"a\": 1}                                         |\n+--------------------------------------------------+", "\n          This example shows that the function operates in a recursive\n          fashion; that is, values of members are not limited to\n          scalars, but rather can themselves be JSON documents:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}');\n+----------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}') |\n+----------------------------------------------------+\n| {\"a\": {\"x\": 1, \"y\": 2}}                            |\n+----------------------------------------------------+", "JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE().\u00a0\n            The behavior of JSON_MERGE_PATCH() is the\n            same as that of\n            JSON_MERGE_PRESERVE(), with\n            the following two exceptions:\n", "\n\nJSON_MERGE_PATCH() removes any member\n              in the first object with a matching key in the second\n              object, provided that the value associated with the key in\n              the second object is not JSON null.\n            \n              If the second object has a member with a key matching a\n              member in the first object,\n              JSON_MERGE_PATCH()\nreplaces the value in the first\n              object with the value in the second object, whereas\n              JSON_MERGE_PRESERVE()\nappends the second value to the first\n              value.\n\n", "\n          This example compares the results of merging the same 3 JSON\n          objects, each having a matching key \"a\",\n          with each of these two functions:\n        ", "Press CTRL+C to copy mysql> SET @x = '{ \"a\": 1, \"b\": 2 }',\n     >     @y = '{ \"a\": 3, \"c\": 4 }',\n     >     @z = '{ \"a\": 5, \"d\": 6 }';\n\nmysql> SELECT  JSON_MERGE_PATCH(@x, @y, @z)    AS Patch,\n    ->         JSON_MERGE_PRESERVE(@x, @y, @z) AS Preserve\\G\n*************************** 1. row ***************************\n   Patch: {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}\nPreserve: {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}"], "Examples": ["mysql> SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '[true, false]') |\n+---------------------------------------------+\n| [true, false]                               |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}') |\n+-------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}');\n+------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}') |\n+------------------------------------------+\n| {\"id\": 47}                               |\n+------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',\n     >     '{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }',\n     >     '{ \"a\": 5, \"d\":6 }');\n+-------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }','{ \"a\": 5, \"d\":6 }') |\n+-------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                              |\n+-------------------------------------------------------------------------------+", "mysql> SELECT JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}');\n+--------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}') |\n+--------------------------------------------------+\n| {\"a\": 1}                                         |\n+--------------------------------------------------+", "mysql> SELECT JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}');\n+----------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}') |\n+----------------------------------------------------+\n| {\"a\": {\"x\": 1, \"y\": 2}}                            |\n+----------------------------------------------------+", "mysql> SET @x = '{ \"a\": 1, \"b\": 2 }',\n     >     @y = '{ \"a\": 3, \"c\": 4 }',\n     >     @z = '{ \"a\": 5, \"d\": 6 }';\n\nmysql> SELECT  JSON_MERGE_PATCH(@x, @y, @z)    AS Patch,\n    ->         JSON_MERGE_PRESERVE(@x, @y, @z) AS Preserve\\G\n*************************** 1. row ***************************\n   Patch: {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}\nPreserve: {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge-patch"], "Feature Type": ["Function"], "index": 84, "vector_txt": "84:Feature: JSON_MERGE_PATCH(json_doc,\n          json_doc[,\n          json_doc] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE_PRESERVE(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, preserving duplicate keys", "\nJSON_MERGE_PRESERVE(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Merges two or more JSON documents and returns the merged\n          result. Returns NULL if any argument is\n          NULL. An error occurs if any argument is\n          not a valid JSON document.\n        ", "\n          Merging takes place according to the following rules. For\n          additional information, see\n          Normalization, Merging, and Autowrapping of JSON Values.\n", "\n\n              Adjacent arrays are merged to a single array.\n            \n              Adjacent objects are merged to a single object.\n            \n              A scalar value is autowrapped as an array and merged as an\n              array.\n            \n              An adjacent array and object are merged by autowrapping\n              the object as an array and merging the two arrays.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '[true, false]') |\n+------------------------------------------------+\n| [1, 2, true, false]                            |\n+------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}');\n+----------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}') |\n+----------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                            |\n+----------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}');\n+---------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}') |\n+---------------------------------------------+\n| [1, 2, {\"id\": 47}]                          |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }',\n     >    '{ \"a\": 3, \"c\": 4 }');\n+--------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\":4 }') |\n+--------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": 4}                                |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }',\n     >    '{ \"a\": 5, \"d\": 6 }');\n+----------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }','{ \"a\": 5, \"d\": 6 }') |\n+----------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                         |\n+----------------------------------------------------------------------------------+", "\n          This function is similar to but differs from\n          JSON_MERGE_PATCH() in\n          significant respects; see\n          JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE(),\n          for more information.\n        "], "Examples": ["mysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '[true, false]') |\n+------------------------------------------------+\n| [1, 2, true, false]                            |\n+------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}');\n+----------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}') |\n+----------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                            |\n+----------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}');\n+---------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}') |\n+---------------------------------------------+\n| [1, 2, {\"id\": 47}]                          |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }',\n     >    '{ \"a\": 3, \"c\": 4 }');\n+--------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\":4 }') |\n+--------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": 4}                                |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }',\n     >    '{ \"a\": 5, \"d\": 6 }');\n+----------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }','{ \"a\": 5, \"d\": 6 }') |\n+----------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                         |\n+----------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge-preserve"], "Feature Type": ["Function"], "index": 85, "vector_txt": "85:Feature: JSON_MERGE_PRESERVE(json_doc,\n          json_doc[,\n          json_doc] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_OBJECT([key,\n          val[,\n          key,\n          val] ...])"], "Description": ["Create JSON object", "\nJSON_OBJECT([key,\n          val[,\n          key,\n          val] ...])\n", "\n          Evaluates a (possibly empty) list of key-value pairs and\n          returns a JSON object containing those pairs. An error occurs\n          if any key name is NULL or the number of\n          arguments is odd.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECT('id', 87, 'name', 'carrot');\n+-----------------------------------------+\n| JSON_OBJECT('id', 87, 'name', 'carrot') |\n+-----------------------------------------+\n| {\"id\": 87, \"name\": \"carrot\"}            |\n+-----------------------------------------+"], "Examples": ["mysql> SELECT JSON_OBJECT('id', 87, 'name', 'carrot');\n+-----------------------------------------+\n| JSON_OBJECT('id', 87, 'name', 'carrot') |\n+-----------------------------------------+\n| {\"id\": 87, \"name\": \"carrot\"}            |\n+-----------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-object"], "Feature Type": ["Function"], "index": 86, "vector_txt": "86:Feature: JSON_OBJECT([key,\n          val[,\n          key,\n          val] ...])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["JSON_OBJECTAGG(key,\n            value)\n            [over_clause]"], "Description": ["Return result set as a single JSON object", "\nJSON_OBJECTAGG(key,\n            value)\n            [over_clause]\n", "\n            Takes two column names or expressions as arguments, the\n            first of these being used as a key and the second as a\n            value, and returns a JSON object containing key-value pairs.\n            Returns NULL if the result contains no\n            rows, or in the event of an error. An error occurs if any\n            key name is NULL or the number of\n            arguments is not equal to 2.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_OBJECTAGG(attribute, value)\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------------------------+\n| o_id | JSON_OBJECTAGG(attribute, value)      |\n+------+---------------------------------------+\n|    2 | {\"color\": \"red\", \"fabric\": \"silk\"}    |\n|    3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set (0.00 sec)", "Duplicate key handling.\u00a0\n              When the result of this function is normalized, values\n              having duplicate keys are discarded. In keeping with the\n              MySQL JSON data type\n              specification that does not permit duplicate keys, only\n              the last value encountered is used with that key in the\n              returned object (\u201clast duplicate key wins\u201d).\n              This means that the result of using this function on\n              columns from a SELECT can depend on the\n              order in which the rows are returned, which is not\n              guaranteed.\n            ", "\n            When used as a window function, if there are duplicate keys\n            within a frame, only the last value for the key is present\n            in the result. The value for the key from the last row in\n            the frame is deterministic if the ORDER\n            BY specification guarantees that the values have a\n            specific order. If not, the resulting value of the key is\n            nondeterministic.\n          ", "\n            Consider the following:\n          ", "Press CTRL+C to copy mysql> CREATE TABLE t(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected (0.33 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected (0.10 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    4 |\n| key  |    5 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5}           |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t;\nQuery OK, 3 rows affected (0.08 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 5), ('key', 4);\nQuery OK, 3 rows affected (0.06 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    5 |\n| key  |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 4}           |\n+----------------------+\n1 row in set (0.00 sec)", "\n            The key chosen from the last query is nondeterministic. If\n            the query does not use GROUP BY (which\n            usually imposes its own ordering regardless) and you prefer\n            a particular key ordering, you can invoke\n            JSON_OBJECTAGG() as a window function by\n            including an OVER clause with an\n            ORDER BY specification to impose a\n            particular order on frame rows. The following examples show\n            what happens with and without ORDER BY\n            for a few different frame specifications.\n          ", "\n            Without ORDER BY, the frame is the entire\n            partition:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER () AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n+-------------+", "\n            With ORDER BY, where the frame is the\n            default of RANGE BETWEEN UNBOUNDED PRECEDING AND\n            CURRENT ROW (in both ascending and descending\n            order):\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n| {\"key\": 4}  |\n| {\"key\": 5}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 4}  |\n| {\"key\": 3}  |\n+-------------+", "\n            With ORDER BY and an explicit frame of\n            the entire partition:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n        AS json_object\n       FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n+-------------+", "\n            To return a particular key value (such as the smallest or\n            largest), include a LIMIT clause in the\n            appropriate query. For example:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n+-------------+", "\n            See Normalization, Merging, and Autowrapping of JSON Values, for additional\n            information and examples.\n          "], "Examples": ["mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_OBJECTAGG(attribute, value)\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------------------------+\n| o_id | JSON_OBJECTAGG(attribute, value)      |\n+------+---------------------------------------+\n|    2 | {\"color\": \"red\", \"fabric\": \"silk\"}    |\n|    3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set (0.00 sec)", "mysql> CREATE TABLE t(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected (0.33 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected (0.10 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    4 |\n| key  |    5 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5}           |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t;\nQuery OK, 3 rows affected (0.08 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 5), ('key', 4);\nQuery OK, 3 rows affected (0.06 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    5 |\n| key  |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 4}           |\n+----------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER () AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n+-------------+", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n| {\"key\": 4}  |\n| {\"key\": 5}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 4}  |\n| {\"key\": 3}  |\n+-------------+", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n        AS json_object\n       FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n+-------------+", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n+-------------+"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_json-objectagg"], "Feature Type": ["Function"], "index": 87, "vector_txt": "87:Feature: JSON_OBJECTAGG(key,\n            value)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["VAR_SAMP(expr)\n            [over_clause]"], "Description": ["Return the sample variance", "\nVAR_SAMP(expr)\n            [over_clause]\n", "\n            Returns the sample variance of\n            expr. That is, the denominator is\n            the number of rows minus one.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            VAR_SAMP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_var-samp"], "Feature Type": ["Function"], "index": 88, "vector_txt": "88:Feature: VAR_SAMP(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_OVERLAPS(json_doc1,\n          json_doc2)"], "Description": ["Compares two JSON documents, returns TRUE (1) if these have any", "\nJSON_OVERLAPS(json_doc1,\n          json_doc2)\n", "\n          Compares two JSON documents. Returns true (1) if the two\n          document have any key-value pairs or array elements in common.\n          If both arguments are scalars, the function performs a simple\n          equality test. If either argument is NULL,\n          the function returns NULL.\n        ", "\n          This function serves as counterpart to\n          JSON_CONTAINS(), which requires\n          all elements of the array searched for to be present in the\n          array searched in. Thus, JSON_CONTAINS()\n          performs an AND operation on search keys,\n          while JSON_OVERLAPS() performs an\n          OR operation.\n        ", "\n          Queries on JSON columns of InnoDB\n          tables using JSON_OVERLAPS() in the\n          WHERE clause can be optimized using\n          multi-valued indexes.\n          Multi-Valued Indexes, provides detailed\n          information and examples.\n        ", "\n          When comparing two arrays, JSON_OVERLAPS()\n          returns true if they share one or more array elements in\n          common, and false if they do not:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "\n          Partial matches are treated as no match, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)", "\n          When comparing objects, the result is true if they have at\n          least one key-value pair in common.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}') |\n+-----------------------------------------------------------------------+\n|                                                                     1 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}') |\n+-----------------------------------------------------------------------+\n|                                                                     0 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)", "\n          If two scalars are used as the arguments to the function,\n          JSON_OVERLAPS() performs a simple test for\n          equality:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('5', '5');\n+-------------------------+\n| JSON_OVERLAPS('5', '5') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('5', '6');\n+-------------------------+\n| JSON_OVERLAPS('5', '6') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)", "\n          When comparing a scalar with an array,\n          JSON_OVERLAPS() attempts to treat the\n          scalar as an array element. In this example, the second\n          argument 6 is interpreted as\n          [6], as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '6');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '6') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set (0.00 sec)", "\n          The function does not perform type conversions:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[4,5,\"6\",7]', '6');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,\"6\",7]', '6') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '\"6\"');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '\"6\"') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}') |\n+-----------------------------------------------------------------------+\n|                                                                     1 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}') |\n+-----------------------------------------------------------------------+\n|                                                                     0 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('5', '5');\n+-------------------------+\n| JSON_OVERLAPS('5', '5') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('5', '6');\n+-------------------------+\n| JSON_OVERLAPS('5', '6') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '6');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '6') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[4,5,\"6\",7]', '6');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,\"6\",7]', '6') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '\"6\"');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '\"6\"') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-overlaps"], "Feature Type": ["Function"], "index": 89, "vector_txt": "89:Feature: JSON_OVERLAPS(json_doc1,\n          json_doc2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_PRETTY(json_val)"], "Description": ["Print a JSON document in human-readable format", "\nJSON_PRETTY(json_val)\n", "\n          Provides pretty-printing of JSON values similar to that\n          implemented in PHP and by other languages and database\n          systems. The value supplied must be a JSON value or a valid\n          string representation of a JSON value. Extraneous whitespaces\n          and newlines present in this value have no effect on the\n          output. For a NULL value, the function\n          returns NULL. If the value is not a JSON\n          document, or if it cannot be parsed as one, the function fails\n          with an error.\n        ", "\n          Formatting of the output from this function adheres to the\n          following rules:\n", "\n\n              Each array element or object member appears on a separate\n              line, indented by one additional level as compared to its\n              parent.\n            \n              Each level of indentation adds two leading spaces.\n            \n              A comma separating individual array elements or object\n              members is printed before the newline that separates the\n              two elements or members.\n            \n              The key and the value of an object member are separated by\n              a colon followed by a space (': ').\n            \n              An empty object or array is printed on a single line. No\n              space is printed between the opening and closing brace.\n            \n              Special characters in string scalars and key names are\n              escaped employing the same rules used by the\n              JSON_QUOTE() function.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_PRETTY('123'); # scalar\n+--------------------+\n| JSON_PRETTY('123') |\n+--------------------+\n| 123                |\n+--------------------+\n\nmysql> SELECT JSON_PRETTY(\"[1,3,5]\"); # array\n+------------------------+\n| JSON_PRETTY(\"[1,3,5]\") |\n+------------------------+\n| [\n  1,\n  3,\n  5\n]      |\n+------------------------+\n\nmysql> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}'); # object\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"15\",\n  \"x\": \"25\"\n}   |\n+---------------------------------------------+\n\nmysql> SELECT JSON_PRETTY('[\"a\",1,{\"key1\":\n    '>    \"value1\"},\"5\",     \"77\" ,\n    '>       {\"key2\":[\"value3\",\"valueX\",\n    '> \"valueY\"]},\"j\", \"2\"   ]')\\G  # nested arrays and objects\n*************************** 1. row ***************************\nJSON_PRETTY('[\"a\",1,{\"key1\":\n             \"value1\"},\"5\",     \"77\" ,\n                {\"key2\":[\"value3\",\"valuex\",\n          \"valuey\"]},\"j\", \"2\"   ]'): [\n  \"a\",\n  1,\n  {\n    \"key1\": \"value1\"\n  },\n  \"5\",\n  \"77\",\n  {\n    \"key2\": [\n      \"value3\",\n      \"valuex\",\n      \"valuey\"\n    ]\n  },\n  \"j\",\n  \"2\"\n]"], "Examples": ["mysql> SELECT JSON_PRETTY('123'); # scalar\n+--------------------+\n| JSON_PRETTY('123') |\n+--------------------+\n| 123                |\n+--------------------+\n\nmysql> SELECT JSON_PRETTY(\"[1,3,5]\"); # array\n+------------------------+\n| JSON_PRETTY(\"[1,3,5]\") |\n+------------------------+\n| [\n  1,\n  3,\n  5\n]      |\n+------------------------+\n\nmysql> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}'); # object\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"15\",\n  \"x\": \"25\"\n}   |\n+---------------------------------------------+\n\nmysql> SELECT JSON_PRETTY('[\"a\",1,{\"key1\":\n    '>    \"value1\"},\"5\",     \"77\" ,\n    '>       {\"key2\":[\"value3\",\"valueX\",\n    '> \"valueY\"]},\"j\", \"2\"   ]')\\G  # nested arrays and objects\n*************************** 1. row ***************************\nJSON_PRETTY('[\"a\",1,{\"key1\":\n             \"value1\"},\"5\",     \"77\" ,\n                {\"key2\":[\"value3\",\"valuex\",\n          \"valuey\"]},\"j\", \"2\"   ]'): [\n  \"a\",\n  1,\n  {\n    \"key1\": \"value1\"\n  },\n  \"5\",\n  \"77\",\n  {\n    \"key2\": [\n      \"value3\",\n      \"valuex\",\n      \"valuey\"\n    ]\n  },\n  \"j\",\n  \"2\"\n]"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-pretty"], "Feature Type": ["Function"], "index": 90, "vector_txt": "90:Feature: JSON_PRETTY(json_val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Feature": ["JSON_QUOTE(string)"], "Description": ["Quote JSON document", "\nJSON_QUOTE(string)\n", "\n          Quotes a string as a JSON value by wrapping it with double\n          quote characters and escaping interior quote and other\n          characters, then returning the result as a\n          utf8mb4 string. Returns\n          NULL if the argument is\n          NULL.\n        ", "\n          This function is typically used to produce a valid JSON string\n          literal for inclusion within a JSON document.\n        ", "\n          Certain special characters are escaped with backslashes per\n          the escape sequences shown in\n          Table\u00a014.23, \u201cJSON_UNQUOTE() Special Character Escape Sequences\u201d.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_QUOTE('null'), JSON_QUOTE('\"null\"');\n+--------------------+----------------------+\n| JSON_QUOTE('null') | JSON_QUOTE('\"null\"') |\n+--------------------+----------------------+\n| \"null\"             | \"\\\"null\\\"\"           |\n+--------------------+----------------------+\nmysql> SELECT JSON_QUOTE('[1, 2, 3]');\n+-------------------------+\n| JSON_QUOTE('[1, 2, 3]') |\n+-------------------------+\n| \"[1, 2, 3]\"             |\n+-------------------------+"], "Examples": ["mysql> SELECT JSON_QUOTE('null'), JSON_QUOTE('\"null\"');\n+--------------------+----------------------+\n| JSON_QUOTE('null') | JSON_QUOTE('\"null\"') |\n+--------------------+----------------------+\n| \"null\"             | \"\\\"null\\\"\"           |\n+--------------------+----------------------+\nmysql> SELECT JSON_QUOTE('[1, 2, 3]');\n+-------------------------+\n| JSON_QUOTE('[1, 2, 3]') |\n+-------------------------+\n| \"[1, 2, 3]\"             |\n+-------------------------+"], "Category": ["Built-In Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-quote"], "Feature Type": ["Function"], "index": 91, "vector_txt": "91:Feature: JSON_QUOTE(string)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_REMOVE(json_doc,\n          path[,\n          path] ...)"], "Description": ["Remove data from JSON document", "\nJSON_REMOVE(json_doc,\n          path[,\n          path] ...)\n", "\n          Removes data from a JSON document and returns the result.\n          Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or is $ or\n          contains a * or **\n          wildcard.\n        ", "\n          The path arguments are evaluated\n          left to right. The document produced by evaluating one path\n          becomes the new value against which the next path is\n          evaluated.\n        ", "\n          It is not an error if the element to be removed does not exist\n          in the document; in that case, the path does not affect the\n          document.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_REMOVE(@j, '$[1]');\n+-------------------------+\n| JSON_REMOVE(@j, '$[1]') |\n+-------------------------+\n| [\"a\", \"d\"]              |\n+-------------------------+"], "Examples": ["mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_REMOVE(@j, '$[1]');\n+-------------------------+\n| JSON_REMOVE(@j, '$[1]') |\n+-------------------------+\n| [\"a\", \"d\"]              |\n+-------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-remove"], "Feature Type": ["Function"], "index": 92, "vector_txt": "92:Feature: JSON_REMOVE(json_doc,\n          path[,\n          path] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_REPLACE(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Replace values in JSON document", "\nJSON_REPLACE(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Replaces existing values in a JSON document and returns the\n          result. Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document\n          overwrites the existing document value with the new value. A\n          path-value pair for a nonexisting path in the document is\n          ignored and has no effect.\n        ", "\n          The optimizer can perform a partial, in-place update of a\n          JSON column instead of removing the old\n          document and writing the new document in its entirety to the\n          column. This optimization can be performed for an update\n          statement that uses the\n          JSON_REPLACE() function and\n          meets the conditions outlined in\n          Partial Updates of JSON Values.\n        ", "\n          For a comparison of\n          JSON_INSERT(),\n          JSON_REPLACE(), and\n          JSON_SET(), see the discussion\n          of JSON_SET().\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-replace"], "Feature Type": ["Function"], "index": 93, "vector_txt": "93:Feature: JSON_REPLACE(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Feature": ["JSON_SCHEMA_VALID(schema,document)"], "Description": ["Validate JSON document against JSON schema; returns TRUE/1 if", "\nJSON_SCHEMA_VALID(schema,document)\n", "\n          Validates a JSON document against a\n          JSON schema. Both\n          schema and\n          document are required. The schema\n          must be a valid JSON object; the document must be a valid JSON\n          document. Provided that these conditions are met: If the\n          document validates against the schema, the function returns\n          true (1); otherwise, it returns false (0).\n        ", "\n          In this example, we set a user variable\n          @schema to the value of a JSON schema for\n          geographical coordinates, and another one\n          @document to the value of a JSON document\n          containing one such coordinate. We then verify that\n          @document validates according to\n          @schema by using them as the arguments to\n          JSON_SCHEMA_VALID():\n        ", "Press CTRL+C to copy mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "\n          Since @schema contains the\n          required attribute, we can set\n          @document to a value that is otherwise\n          valid but does not contain the required properties, then test\n          it against @schema, like this:\n        ", "Press CTRL+C to copy mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "\n          If we now set the value of @schema to the\n          same JSON schema but without the required\n          attribute, @document validates because it\n          is a valid JSON object, even though it contains no properties,\n          as shown here:\n        ", "Press CTRL+C to copy mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "JSON_SCHEMA_VALID() and CHECK constraints.\u00a0\nJSON_SCHEMA_VALID() can also be used to\n            enforce CHECK constraints.\n          ", "\n          Consider the table geo created as shown\n          here, with a JSON column coordinate\n          representing a point of latitude and longitude on a map,\n          governed by the JSON schema used as an argument in a\n          JSON_SCHEMA_VALID() call which is passed as\n          the expression for a CHECK constraint on\n          this table:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE geo (\n    ->     coordinate JSON,\n    ->     CHECK(\n    ->         JSON_SCHEMA_VALID(\n    ->             '{\n    '>                 \"type\":\"object\",\n    '>                 \"properties\":{\n    '>                       \"latitude\":{\"type\":\"number\", \"minimum\":-90, \"maximum\":90},\n    '>                       \"longitude\":{\"type\":\"number\", \"minimum\":-180, \"maximum\":180}\n    '>                 },\n    '>                 \"required\": [\"latitude\", \"longitude\"]\n    '>             }',\n    ->             coordinate\n    ->         )\n    ->     )\n    -> );\nQuery OK, 0 rows affected (0.45 sec)", "\n\nNote\n\n\n            Because a MySQL CHECK constraint cannot\n            contain references to variables, you must pass the JSON\n            schema to JSON_SCHEMA_VALID() inline when\n            using it to specify such a constraint for a table.\n\n", "\n          We assign JSON values representing coordinates to three\n          variables, as shown here:\n        ", "Press CTRL+C to copy mysql> SET @point1 = '{\"latitude\":59, \"longitude\":18}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @point2 = '{\"latitude\":91, \"longitude\":0}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @point3 = '{\"longitude\":120}';\nQuery OK, 0 rows affected (0.00 sec)", "\n          The first of these values is valid, as can be seen in the\n          following INSERT statement:\n        ", "Press CTRL+C to copy mysql> INSERT INTO geo VALUES(@point1);\nQuery OK, 1 row affected (0.05 sec)", "\n          The second JSON value is invalid and so fails the constraint,\n          as shown here:\n        ", "Press CTRL+C to copy mysql> INSERT INTO geo VALUES(@point2);\nERROR 3819 (HY000): Check constraint 'geo_chk_1' is violated.", "\n          You can obtain precise information about the nature of the\n          failure\u2014in this case, that the\n          latitude value exceeds the maximum defined\n          in the schema\u2014by issuing a SHOW\n          WARNINGS statement:\n        ", "Press CTRL+C to copy mysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Error\n   Code: 3934\nMessage: The JSON document location '#/latitude' failed requirement 'maximum' at\nJSON Schema location '#/properties/latitude'.\n*************************** 2. row ***************************\n  Level: Error\n   Code: 3819\nMessage: Check constraint 'geo_chk_1' is violated.\n2 rows in set (0.00 sec)", "\n          The third coordinate value defined above is also invalid,\n          since it is missing the required latitude\n          property. As before, you can see this by attempting to insert\n          the value into the geo table, then issuing\n          SHOW WARNINGS afterwards:\n        ", "Press CTRL+C to copy mysql> INSERT INTO geo VALUES(@point3);\nERROR 3819 (HY000): Check constraint 'geo_chk_1' is violated.\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Error\n   Code: 3934\nMessage: The JSON document location '#' failed requirement 'required' at JSON\nSchema location '#'.\n*************************** 2. row ***************************\n  Level: Error\n   Code: 3819\nMessage: Check constraint 'geo_chk_1' is violated.\n2 rows in set (0.00 sec)", "\n          See Section\u00a015.1.20.6, \u201cCHECK Constraints\u201d, for more\n          information.\n        ", "\n          JSON Schema has support for specifying regular expression\n          patterns for strings, but the implementation used by MySQL\n          silently ignores invalid patterns. This means that\n          JSON_SCHEMA_VALID() can return true even\n          when a regular expression pattern is invalid, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"');\n+---------------------------------------------------------------+\n| JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"') |\n+---------------------------------------------------------------+\n|                                                             1 |\n+---------------------------------------------------------------+\n1 row in set (0.04 sec)"], "Examples": ["mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "mysql> CREATE TABLE geo (\n    ->     coordinate JSON,\n    ->     CHECK(\n    ->         JSON_SCHEMA_VALID(\n    ->             '{\n    '>                 \"type\":\"object\",\n    '>                 \"properties\":{\n    '>                       \"latitude\":{\"type\":\"number\", \"minimum\":-90, \"maximum\":90},\n    '>                       \"longitude\":{\"type\":\"number\", \"minimum\":-180, \"maximum\":180}\n    '>                 },\n    '>                 \"required\": [\"latitude\", \"longitude\"]\n    '>             }',\n    ->             coordinate\n    ->         )\n    ->     )\n    -> );\nQuery OK, 0 rows affected (0.45 sec)", "mysql> SET @point1 = '{\"latitude\":59, \"longitude\":18}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @point2 = '{\"latitude\":91, \"longitude\":0}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @point3 = '{\"longitude\":120}';\nQuery OK, 0 rows affected (0.00 sec)", "mysql> INSERT INTO geo VALUES(@point1);\nQuery OK, 1 row affected (0.05 sec)", "mysql> INSERT INTO geo VALUES(@point2);\nERROR 3819 (HY000): Check constraint 'geo_chk_1' is violated.", "mysql> INSERT INTO geo VALUES(@point3);\nERROR 3819 (HY000): Check constraint 'geo_chk_1' is violated.\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Error\n   Code: 3934\nMessage: The JSON document location '#' failed requirement 'required' at JSON\nSchema location '#'.\n*************************** 2. row ***************************\n  Level: Error\n   Code: 3819\nMessage: Check constraint 'geo_chk_1' is violated.\n2 rows in set (0.00 sec)", "mysql> SELECT JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"');\n+---------------------------------------------------------------+\n| JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"') |\n+---------------------------------------------------------------+\n|                                                             1 |\n+---------------------------------------------------------------+\n1 row in set (0.04 sec)"], "Category": ["Built-In Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-validation-functions.html#function_json-schema-valid"], "Feature Type": ["Function"], "index": 94, "vector_txt": "94:Feature: JSON_SCHEMA_VALID(schema,document)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SCHEMA_VALIDATION_REPORT(schema,document)"], "Description": ["Validate JSON document against JSON schema; returns report in JSON", "\nJSON_SCHEMA_VALIDATION_REPORT(schema,document)\n", "\n          Validates a JSON document against a\n          JSON schema. Both\n          schema and\n          document are required. As with\n          JSON_VALID_SCHEMA(), the schema must be a valid JSON object,\n          and the document must be a valid JSON document. Provided that\n          these conditions are met, the function returns a report, as a\n          JSON document, on the outcome of the validation. If the JSON\n          document is considered valid according to the JSON Schema, the\n          function returns a JSON object with one property\n          valid having the value \"true\". If the JSON\n          document fails validation, the function returns a JSON object\n          which includes the properties listed here:\n", "\n\nvalid: Always \"false\" for a failed\n              schema validation\n            \nreason: A human-readable string\n              containing the reason for the failure\n            \nschema-location: A JSON pointer URI\n              fragment identifier indicating where in the JSON schema\n              the validation failed (see Note following this list)\n            \ndocument-location: A JSON pointer URI\n              fragment identifier indicating where in the JSON document\n              the validation failed (see Note following this list)\n            \nschema-failed-keyword: A string\n              containing the name of the keyword or property in the JSON\n              schema that was violated\n\n", "\n\nNote\n\n\n            JSON pointer URI fragment identifiers are defined in\n            RFC\n            6901 - JavaScript Object Notation (JSON) Pointer.\n            (These are not the same as the JSON\n            path notation used by\n            JSON_EXTRACT() and other\n            MySQL JSON functions.) In this notation,\n            # represents the entire document, and\n            #/myprop represents the portion of the\n            document included in the top-level property named\n            myprop. See the specification just cited\n            and the examples shown later in this section for more\n            information.\n\n", "\n          In this example, we set a user variable\n          @schema to the value of a JSON schema for\n          geographical coordinates, and another one\n          @document to the value of a JSON document\n          containing one such coordinate. We then verify that\n          @document validates according to\n          @schema by using them as the arguments to\n          JSON_SCHEMA_VALIDATION_REORT():\n        ", "Press CTRL+C to copy mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)", "\n          Now we set @document such that it specifies\n          an illegal value for one of its properties, like this:\n        ", "Press CTRL+C to copy mysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 310.445118\n    '> }';", "\n          Validation of @document now fails when\n          tested with\n          JSON_SCHEMA_VALIDATION_REPORT(). The output\n          from the function call contains detailed information about the\n          failure (with the function wrapped by\n          JSON_PRETTY() to provide better\n          formatting), as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#/longitude' failed requirement 'maximum' at JSON Schema location '#/properties/longitude'\",\n  \"schema-location\": \"#/properties/longitude\",\n  \"document-location\": \"#/longitude\",\n  \"schema-failed-keyword\": \"maximum\"\n}\n1 row in set (0.00 sec)", "\n          Since @schema contains the\n          required attribute, we can set\n          @document to a value that is otherwise\n          valid but does not contain the required properties, then test\n          it against @schema. The output of\n          JSON_SCHEMA_VALIDATION_REPORT() shows that\n          validation fails due to lack of a required element, like this:\n        ", "Press CTRL+C to copy mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#' failed requirement 'required' at JSON Schema location '#'\",\n  \"schema-location\": \"#\",\n  \"document-location\": \"#\",\n  \"schema-failed-keyword\": \"required\"\n}\n1 row in set (0.00 sec)", "\n          If we now set the value of @schema to the\n          same JSON schema but without the required\n          attribute, @document validates because it\n          is a valid JSON object, even though it contains no properties,\n          as shown here:\n        ", "Press CTRL+C to copy mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 310.445118\n    '> }';", "mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#' failed requirement 'required' at JSON Schema location '#'\",\n  \"schema-location\": \"#\",\n  \"document-location\": \"#\",\n  \"schema-failed-keyword\": \"required\"\n}\n1 row in set (0.00 sec)", "mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-validation-functions.html#function_json-schema-validation-report"], "Feature Type": ["Function"], "index": 95, "vector_txt": "95:Feature: JSON_SCHEMA_VALIDATION_REPORT(schema,document)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SEARCH(json_doc,\n          one_or_all,\n          search_str[,\n          escape_char[,\n          path] ...])"], "Description": ["Path to value within JSON document", "\nJSON_SEARCH(json_doc,\n          one_or_all,\n          search_str[,\n          escape_char[,\n          path] ...])\n", "\n          Returns the path to the given string within a JSON document.\n          Returns NULL if any of the\n          json_doc,\n          search_str, or\n          path arguments are\n          NULL; no path\n          exists within the document; or\n          search_str is not found. An error\n          occurs if the json_doc argument is\n          not a valid JSON document, any path\n          argument is not a valid path expression,\n          one_or_all is not\n          'one' or 'all', or\n          escape_char is not a constant\n          expression.\n        ", "\n          The one_or_all argument affects the\n          search as follows:\n", "\n\n'one': The search terminates after the\n              first match and returns one path string. It is undefined\n              which match is considered first.\n            \n'all': The search returns all matching\n              path strings such that no duplicate paths are included. If\n              there are multiple strings, they are autowrapped as an\n              array. The order of the array elements is undefined.\n\n", "\n          Within the search_str search string\n          argument, the % and _\n          characters work as for the LIKE\n          operator: % matches any number of\n          characters (including zero characters), and\n          _ matches exactly one character.\n        ", "\n          To specify a literal % or\n          _ character in the search string, precede\n          it by the escape character. The default is\n          \\ if the\n          escape_char argument is missing or\n          NULL. Otherwise,\n          escape_char must be a constant that\n          is empty or one character.\n        ", "\n          For more information about matching and escape character\n          behavior, see the description of\n          LIKE in\n          Section\u00a014.8.1, \u201cString Comparison Functions and Operators\u201d. For escape\n          character handling, a difference from the\n          LIKE behavior is that the escape\n          character for JSON_SEARCH()\n          must evaluate to a constant at compile time, not just at\n          execution time. For example, if\n          JSON_SEARCH() is used in a\n          prepared statement and the\n          escape_char argument is supplied\n          using a ? parameter, the parameter value\n          might be constant at execution time, but is not at compile\n          time.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"abc\", [{\"k\": \"10\"}, \"def\"], {\"x\":\"abc\"}, {\"y\":\"bcd\"}]';\n\nmysql> SELECT JSON_SEARCH(@j, 'one', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'one', 'abc') |\n+-------------------------------+\n| \"$[0]\"                        |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'ghi');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'ghi') |\n+-------------------------------+\n| NULL                          |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10');\n+------------------------------+\n| JSON_SEARCH(@j, 'all', '10') |\n+------------------------------+\n| \"$[1][0].k\"                  |\n+------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$');\n+-----------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$') |\n+-----------------------------------------+\n| \"$[1][0].k\"                             |\n+-----------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$**.k');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$**.k') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k');\n+-------------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k') |\n+-------------------------------------------------+\n| \"$[1][0].k\"                                     |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]');\n+-----------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]') |\n+-----------------------------------------------+\n| \"$[1][0].k\"                                   |\n+-----------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%a%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%a%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[3]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[3]') |\n+-------------------------------------------+\n| \"$[3].y\"                                  |\n+-------------------------------------------+", "\n          For more information about the JSON path syntax supported by\n          MySQL, including rules governing the wildcard operators\n          * and **, see\n          JSON Path Syntax.\n        "], "Examples": ["mysql> SET @j = '[\"abc\", [{\"k\": \"10\"}, \"def\"], {\"x\":\"abc\"}, {\"y\":\"bcd\"}]';\n\nmysql> SELECT JSON_SEARCH(@j, 'one', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'one', 'abc') |\n+-------------------------------+\n| \"$[0]\"                        |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'ghi');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'ghi') |\n+-------------------------------+\n| NULL                          |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10');\n+------------------------------+\n| JSON_SEARCH(@j, 'all', '10') |\n+------------------------------+\n| \"$[1][0].k\"                  |\n+------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$');\n+-----------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$') |\n+-----------------------------------------+\n| \"$[1][0].k\"                             |\n+-----------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$**.k');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$**.k') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k');\n+-------------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k') |\n+-------------------------------------------------+\n| \"$[1][0].k\"                                     |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]');\n+-----------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]') |\n+-----------------------------------------------+\n| \"$[1][0].k\"                                   |\n+-----------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%a%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%a%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[3]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[3]') |\n+-------------------------------------------+\n| \"$[3].y\"                                  |\n+-------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-search"], "Feature Type": ["Function"], "index": 96, "vector_txt": "96:Feature: JSON_SEARCH(json_doc,\n          one_or_all,\n          search_str[,\n          escape_char[,\n          path] ...])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SET(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert data into JSON document", "\nJSON_SET(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Inserts or updates data in a JSON document and returns the\n          result. Returns NULL if\n          json_doc or\n          path is NULL, or\n          if path, when given, does not\n          locate an object. Otherwise, an error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document\n          overwrites the existing document value with the new value. A\n          path-value pair for a nonexisting path in the document adds\n          the value to the document if the path identifies one of these\n          types of values:\n", "\n\n              A member not present in an existing object. The member is\n              added to the object and associated with the new value.\n            \n              A position past the end of an existing array. The array is\n              extended with the new value. If the existing value is not\n              an array, it is autowrapped as an array, then extended\n              with the new value.\n\n", "\n          Otherwise, a path-value pair for a nonexisting path in the\n          document is ignored and has no effect.\n        ", "\n          The optimizer can perform a partial, in-place update of a\n          JSON column instead of removing the old\n          document and writing the new document in its entirety to the\n          column. This optimization can be performed for an update\n          statement that uses the\n          JSON_SET() function and meets\n          the conditions outlined in\n          Partial Updates of JSON Values.\n        ", "\n          The JSON_SET(),\n          JSON_INSERT(), and\n          JSON_REPLACE() functions are\n          related:\n", "\n\nJSON_SET() replaces\n              existing values and adds nonexisting values.\n            \nJSON_INSERT() inserts\n              values without replacing existing values.\n            \nJSON_REPLACE() replaces\n              only existing values.\n\n", "\n          The following examples illustrate these differences, using one\n          path that does exist in the document ($.a)\n          and another that does not exist ($.c):\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_SET(@j, '$.a', 10, '$.c', '[true, false]');\n+-------------------------------------------------+\n| JSON_SET(@j, '$.a', 10, '$.c', '[true, false]') |\n+-------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}    |\n+-------------------------------------------------+\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_SET(@j, '$.a', 10, '$.c', '[true, false]');\n+-------------------------------------------------+\n| JSON_SET(@j, '$.a', 10, '$.c', '[true, false]') |\n+-------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}    |\n+-------------------------------------------------+\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-set"], "Feature Type": ["Function"], "index": 97, "vector_txt": "97:Feature: JSON_SET(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Feature": ["JSON_STORAGE_FREE(json_val)"], "Description": ["Freed space within binary representation of JSON column value", "\nJSON_STORAGE_FREE(json_val)\n", "\n          For a JSON column value, this\n          function shows how much storage space was freed in its binary\n          representation after it was updated in place using\n          JSON_SET(),\n          JSON_REPLACE(), or\n          JSON_REMOVE(). The argument can\n          also be a valid JSON document or a string which can be parsed\n          as one\u2014either as a literal value or as the value of a\n          user variable\u2014in which case the function returns 0. It\n          returns a positive, nonzero value if the argument is a\n          JSON column value which has been updated as\n          described previously, such that its binary representation\n          takes up less space than it did prior to the update. For a\n          JSON column which has been updated such\n          that its binary representation is the same as or larger than\n          before, or if the update was not able to take advantage of a\n          partial update, it returns 0; it returns\n          NULL if the argument is\n          NULL.\n        ", "\n          If json_val is not\n          NULL, and neither is a valid JSON document\n          nor can be successfully parsed as one, an error results.\n        ", "\n          In this example, we create a table containing a\n          JSON column, then insert a row containing a\n          JSON object:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.38 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 10, \"b\": \"wxyz\", \"c\": \"[true, false]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT * FROM jtable;\n+----------------------------------------------+\n| jcol                                         |\n+----------------------------------------------+\n| {\"a\": 10, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |\n+----------------------------------------------+\n1 row in set (0.00 sec)", "\n          Now we update the column value using\n          JSON_SET() such that a partial update can\n          be performed; in this case, we replace the value pointed to by\n          the c key (the array [true,\n          false]) with one that takes up less space (the\n          integer 1):\n        ", "Press CTRL+C to copy mysql> UPDATE jtable\n    ->     SET jcol = JSON_SET(jcol, \"$.a\", 10, \"$.b\", \"wxyz\", \"$.c\", 1);\nQuery OK, 1 row affected (0.03 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT * FROM jtable;\n+--------------------------------+\n| jcol                           |\n+--------------------------------+\n| {\"a\": 10, \"b\": \"wxyz\", \"c\": 1} |\n+--------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_STORAGE_FREE(jcol) FROM jtable;\n+-------------------------+\n| JSON_STORAGE_FREE(jcol) |\n+-------------------------+\n|                      14 |\n+-------------------------+\n1 row in set (0.00 sec)", "\n          The effects of successive partial updates on this free space\n          are cumulative, as shown in this example using\n          JSON_SET() to reduce the space taken up by\n          the value having key b (and making no other\n          changes):\n        ", "Press CTRL+C to copy mysql> UPDATE jtable\n    ->     SET jcol = JSON_SET(jcol, \"$.a\", 10, \"$.b\", \"wx\", \"$.c\", 1);\nQuery OK, 1 row affected (0.03 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT JSON_STORAGE_FREE(jcol) FROM jtable;\n+-------------------------+\n| JSON_STORAGE_FREE(jcol) |\n+-------------------------+\n|                      16 |\n+-------------------------+\n1 row in set (0.00 sec)", "\n          Updating the column without using\n          JSON_SET(),\n          JSON_REPLACE(), or\n          JSON_REMOVE() means that the optimizer\n          cannot perform the update in place; in this case,\n          JSON_STORAGE_FREE() returns 0, as shown\n          here:\n        ", "Press CTRL+C to copy mysql> UPDATE jtable SET jcol = '{\"a\": 10, \"b\": 1}';\nQuery OK, 1 row affected (0.05 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT JSON_STORAGE_FREE(jcol) FROM jtable;\n+-------------------------+\n| JSON_STORAGE_FREE(jcol) |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)", "\n          Partial updates of JSON documents can be performed only on\n          column values. For a user variable that stores a JSON value,\n          the value is always completely replaced, even when the update\n          is performed using JSON_SET():\n        ", "Press CTRL+C to copy mysql> SET @j = '{\"a\": 10, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$.a', 10, '$.b', 'wxyz', '$.c', '1');\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_FREE(@j) AS Free;\n+----------------------------------+------+\n| @j                               | Free |\n+----------------------------------+------+\n| {\"a\": 10, \"b\": \"wxyz\", \"c\": \"1\"} |    0 |\n+----------------------------------+------+\n1 row in set (0.00 sec)", "\n          For a JSON literal, this function always returns 0:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_STORAGE_FREE('{\"a\": 10, \"b\": \"wxyz\", \"c\": \"1\"}') AS Free;\n+------+\n| Free |\n+------+\n|    0 |\n+------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.38 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 10, \"b\": \"wxyz\", \"c\": \"[true, false]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT * FROM jtable;\n+----------------------------------------------+\n| jcol                                         |\n+----------------------------------------------+\n| {\"a\": 10, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |\n+----------------------------------------------+\n1 row in set (0.00 sec)", "mysql> UPDATE jtable\n    ->     SET jcol = JSON_SET(jcol, \"$.a\", 10, \"$.b\", \"wxyz\", \"$.c\", 1);\nQuery OK, 1 row affected (0.03 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT * FROM jtable;\n+--------------------------------+\n| jcol                           |\n+--------------------------------+\n| {\"a\": 10, \"b\": \"wxyz\", \"c\": 1} |\n+--------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_STORAGE_FREE(jcol) FROM jtable;\n+-------------------------+\n| JSON_STORAGE_FREE(jcol) |\n+-------------------------+\n|                      14 |\n+-------------------------+\n1 row in set (0.00 sec)", "mysql> UPDATE jtable\n    ->     SET jcol = JSON_SET(jcol, \"$.a\", 10, \"$.b\", \"wx\", \"$.c\", 1);\nQuery OK, 1 row affected (0.03 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT JSON_STORAGE_FREE(jcol) FROM jtable;\n+-------------------------+\n| JSON_STORAGE_FREE(jcol) |\n+-------------------------+\n|                      16 |\n+-------------------------+\n1 row in set (0.00 sec)", "mysql> UPDATE jtable SET jcol = '{\"a\": 10, \"b\": 1}';\nQuery OK, 1 row affected (0.05 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT JSON_STORAGE_FREE(jcol) FROM jtable;\n+-------------------------+\n| JSON_STORAGE_FREE(jcol) |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)", "mysql> SET @j = '{\"a\": 10, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$.a', 10, '$.b', 'wxyz', '$.c', '1');\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_FREE(@j) AS Free;\n+----------------------------------+------+\n| @j                               | Free |\n+----------------------------------+------+\n| {\"a\": 10, \"b\": \"wxyz\", \"c\": \"1\"} |    0 |\n+----------------------------------+------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_STORAGE_FREE('{\"a\": 10, \"b\": \"wxyz\", \"c\": \"1\"}') AS Free;\n+------+\n| Free |\n+------+\n|    0 |\n+------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-storage-free"], "Feature Type": ["Function"], "index": 98, "vector_txt": "98:Feature: JSON_STORAGE_FREE(json_val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["VARIANCE(expr)\n            [over_clause]"], "Description": ["Return the population standard variance", "\nVARIANCE(expr)\n            [over_clause]\n", "\n            Returns the population standard variance of\n            expr.\n            VARIANCE() is a synonym for\n            the standard SQL function\n            VAR_POP(), provided as a\n            MySQL extension.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            VARIANCE() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n"], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_variance"], "Feature Type": ["Function"], "index": 99, "vector_txt": "99:Feature: VARIANCE(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_STORAGE_SIZE(json_val)"], "Description": ["Space used for storage of binary representation of a JSON document", "\nJSON_STORAGE_SIZE(json_val)\n", "\n          This function returns the number of bytes used to store the\n          binary representation of a JSON document. When the argument is\n          a JSON column, this is the space used to\n          store the JSON document as it was inserted into the column,\n          prior to any partial updates that may have been performed on\n          it afterwards. json_val must be a\n          valid JSON document or a string which can be parsed as one. In\n          the case where it is string, the function returns the amount\n          of storage space in the JSON binary representation that is\n          created by parsing the string as JSON and converting it to\n          binary. It returns NULL if the argument is\n          NULL.\n        ", "\n          An error results when json_val is\n          not NULL, and is not\u2014or cannot be\n          successfully parsed as\u2014a JSON document.\n        ", "\n          To illustrate this function's behavior when used with a\n          JSON column as its argument, we create a\n          table named jtable containing a\n          JSON column jcol, insert\n          a JSON value into the table, then obtain the storage space\n          used by this column with\n          JSON_STORAGE_SIZE(), as shown here:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+-----------------------------------------------+------+------+\n| jcol                                          | Size | Free |\n+-----------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    0 |\n+-----------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          According to the output of\n          JSON_STORAGE_SIZE(), the JSON document\n          inserted into the column takes up 47 bytes. We also checked\n          the amount of space freed by any previous partial updates of\n          the column using\n          JSON_STORAGE_FREE(); since no\n          updates have yet been performed, this is 0, as expected.\n        ", "\n          Next we perform an UPDATE on\n          the table that should result in a partial update of the\n          document stored in jcol, and then test the\n          result as shown here:\n        ", "Press CTRL+C to copy mysql> UPDATE jtable SET jcol = \n    ->     JSON_SET(jcol, \"$.b\", \"a\");\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+--------------------------------------------+------+------+\n| jcol                                       | Size | Free |\n+--------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    3 |\n+--------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          The value returned by JSON_STORAGE_FREE()\n          in the previous query indicates that a partial update of the\n          JSON document was performed, and that this freed 3 bytes of\n          space used to store it. The result returned by\n          JSON_STORAGE_SIZE() is unchanged by the\n          partial update.\n        ", "\n          Partial updates are supported for updates using\n          JSON_SET(),\n          JSON_REPLACE(), or\n          JSON_REMOVE(). The direct\n          assignment of a value to a JSON column\n          cannot be partially updated; following such an update,\n          JSON_STORAGE_SIZE() always shows the\n          storage used for the newly-set value:\n        ", "Press CTRL+C to copy mysql> UPDATE jtable\nmysql>     SET jcol = '{\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+------------------------------------------------+------+------+\n| jcol                                           | Size | Free |\n+------------------------------------------------+------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |   56 |    0 |\n+------------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          A JSON user variable cannot be partially updated. This means\n          that this function always shows the space currently used to\n          store a JSON document in a user variable:\n        ", "Press CTRL+C to copy mysql> SET @j = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+------------------------------------+------+\n| @j                                 | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   45 |\n+------------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[1]', \"json\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+----------------------------------+------+\n| @j                               | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   43 |\n+----------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+---------------------------------------------+------+\n| @j                                          | Size |\n+---------------------------------------------+------+\n| [100, \"json\", [[10, 20, 30], 3, 5], 425.05] |   56 |\n+---------------------------------------------+------+\n1 row in set (0.00 sec)", "\n          For a JSON literal, this function always returns the current\n          storage space used:\n        ", "Press CTRL+C to copy mysql> SELECT\n    ->     JSON_STORAGE_SIZE('[100, \"sakila\", [1, 3, 5], 425.05]') AS A,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"}') AS B,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}') AS C,\n    ->     JSON_STORAGE_SIZE('[100, \"json\", [[10, 20, 30], 3, 5], 425.05]') AS D;\n+----+----+----+----+\n| A  | B  | C  | D  |\n+----+----+----+----+\n| 45 | 44 | 47 | 56 |\n+----+----+----+----+\n1 row in set (0.00 sec)"], "Examples": ["mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+-----------------------------------------------+------+------+\n| jcol                                          | Size | Free |\n+-----------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    0 |\n+-----------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> UPDATE jtable SET jcol = \n    ->     JSON_SET(jcol, \"$.b\", \"a\");\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+--------------------------------------------+------+------+\n| jcol                                       | Size | Free |\n+--------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    3 |\n+--------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> UPDATE jtable\nmysql>     SET jcol = '{\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+------------------------------------------------+------+------+\n| jcol                                           | Size | Free |\n+------------------------------------------------+------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |   56 |    0 |\n+------------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> SET @j = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+------------------------------------+------+\n| @j                                 | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   45 |\n+------------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[1]', \"json\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+----------------------------------+------+\n| @j                               | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   43 |\n+----------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+---------------------------------------------+------+\n| @j                                          | Size |\n+---------------------------------------------+------+\n| [100, \"json\", [[10, 20, 30], 3, 5], 425.05] |   56 |\n+---------------------------------------------+------+\n1 row in set (0.00 sec)", "mysql> SELECT\n    ->     JSON_STORAGE_SIZE('[100, \"sakila\", [1, 3, 5], 425.05]') AS A,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"}') AS B,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}') AS C,\n    ->     JSON_STORAGE_SIZE('[100, \"json\", [[10, 20, 30], 3, 5], 425.05]') AS D;\n+----+----+----+----+\n| A  | B  | C  | D  |\n+----+----+----+----+\n| 45 | 44 | 47 | 56 |\n+----+----+----+----+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-storage-size"], "Feature Type": ["Function"], "index": 100, "vector_txt": "100:Feature: JSON_STORAGE_SIZE(json_val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_TYPE(json_val)"], "Description": ["Type of JSON value", "\nJSON_TYPE(json_val)\n", "\n          Returns a utf8mb4 string indicating the\n          type of a JSON value. This can be an object, an array, or a\n          scalar type, as shown here:\n        ", "Press CTRL+C to copy mysql> SET @j = '{\"a\": [10, true]}';\nmysql> SELECT JSON_TYPE(@j);\n+---------------+\n| JSON_TYPE(@j) |\n+---------------+\n| OBJECT        |\n+---------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a'));\n+------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a')) |\n+------------------------------------+\n| ARRAY                              |\n+------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]')) |\n+---------------------------------------+\n| INTEGER                               |\n+---------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]')) |\n+---------------------------------------+\n| BOOLEAN                               |\n+---------------------------------------+", "\nJSON_TYPE() returns\n          NULL if the argument is\n          NULL:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+", "\n          An error occurs if the argument is not a valid JSON value:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required.", "\n          For a non-NULL, non-error result, the\n          following list describes the possible\n          JSON_TYPE() return values:\n", "\n\n              Purely JSON types:\n\n\n\nOBJECT: JSON objects\n                \nARRAY: JSON arrays\n                \nBOOLEAN: The JSON true and false\n                  literals\n                \nNULL: The JSON null literal\n\n\n\n              Numeric types:\n\n\n\nINTEGER: MySQL\n                  TINYINT,\n                  SMALLINT,\n                  MEDIUMINT and\n                  INT and\n                  BIGINT scalars\n                \nDOUBLE: MySQL\n                  DOUBLE\nFLOAT scalars\n                \nDECIMAL: MySQL\n                  DECIMAL and\n                  NUMERIC scalars\n\n\n\n              Temporal types:\n\n\n\nDATETIME: MySQL\n                  DATETIME and\n                  TIMESTAMP scalars\n                \nDATE: MySQL\n                  DATE scalars\n                \nTIME: MySQL\n                  TIME scalars\n\n\n\n              String types:\n\n\n\nSTRING: MySQL\n                  utf8mb3 character type scalars:\n                  CHAR,\n                  VARCHAR,\n                  TEXT,\n                  ENUM, and\n                  SET\n\n\n\n              Binary types:\n\n\n\nBLOB: MySQL binary type scalars\n                  including BINARY,\n                  VARBINARY,\n                  BLOB, and\n                  BIT\n\n\n\n              All other types:\n\n\n\nOPAQUE (raw bits)\n\n\n\n"], "Examples": ["mysql> SET @j = '{\"a\": [10, true]}';\nmysql> SELECT JSON_TYPE(@j);\n+---------------+\n| JSON_TYPE(@j) |\n+---------------+\n| OBJECT        |\n+---------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a'));\n+------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a')) |\n+------------------------------------+\n| ARRAY                              |\n+------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]')) |\n+---------------------------------------+\n| INTEGER                               |\n+---------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]')) |\n+---------------------------------------+\n| BOOLEAN                               |\n+---------------------------------------+", "mysql> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+", "mysql> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required."], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-type"], "Feature Type": ["Function"], "index": 101, "vector_txt": "101:Feature: JSON_TYPE(json_val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_UNQUOTE(json_val)"], "Description": ["Unquote JSON value", "\nJSON_UNQUOTE(json_val)\n", "\n          Unquotes JSON value and returns the result as a\n          utf8mb4 string. Returns\n          NULL if the argument is\n          NULL. An error occurs if the value starts\n          and ends with double quotes but is not a valid JSON string\n          literal.\n        ", "\n          Within a string, certain sequences have special meaning unless\n          the NO_BACKSLASH_ESCAPES SQL\n          mode is enabled. Each of these sequences begins with a\n          backslash (\\), known as the\n          escape character. MySQL recognizes the\n          escape sequences shown in\n          Table\u00a014.23, \u201cJSON_UNQUOTE() Special Character Escape Sequences\u201d. For\n          all other escape sequences, backslash is ignored. That is, the\n          escaped character is interpreted as if it was not escaped. For\n          example, \\x is just x.\n          These sequences are case-sensitive. For example,\n          \\b is interpreted as a backspace, but\n          \\B is interpreted as B.\n", "\nTable\u00a014.23\u00a0JSON_UNQUOTE() Special Character Escape Sequences\n\n\nEscape Sequence\nCharacter Represented by Sequence\n\n\\\"\nA double quote (\") character\n\n\\b\nA backspace character\n\n\\f\nA formfeed character\n\n\\n\nA newline (linefeed) character\n\n\\r\nA carriage return character\n\n\\t\nA tab character\n\n\\\\\nA backslash (\\) character\n\n\\uXXXX\nUTF-8 bytes for Unicode value XXXX\n\n\n", "\n          Two simple examples of the use of this function are shown\n          here:\n        ", "Press CTRL+C to copy mysql> SET @j = '\"abc\"';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-------+------------------+\n| @j    | JSON_UNQUOTE(@j) |\n+-------+------------------+\n| \"abc\" | abc              |\n+-------+------------------+\nmysql> SET @j = '[1, 2, 3]';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-----------+------------------+\n| @j        | JSON_UNQUOTE(@j) |\n+-----------+------------------+\n| [1, 2, 3] | [1, 2, 3]        |\n+-----------+------------------+", "\n          The following set of examples shows how\n          JSON_UNQUOTE handles escapes with\n          NO_BACKSLASH_ESCAPES\n          disabled and enabled:\n        ", "Press CTRL+C to copy mysql> SELECT @@sql_mode;\n+------------+\n| @@sql_mode |\n+------------+\n|            |\n+------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n|       2                           |\n+------------------------------+\n\nmysql> SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n| \\t\\u0032                     |\n+------------------------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\t\\u0032\"');\n+----------------------------+\n| JSON_UNQUOTE('\"\\t\\u0032\"') |\n+----------------------------+\n|       2                         |\n+----------------------------+"], "Examples": ["mysql> SET @j = '\"abc\"';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-------+------------------+\n| @j    | JSON_UNQUOTE(@j) |\n+-------+------------------+\n| \"abc\" | abc              |\n+-------+------------------+\nmysql> SET @j = '[1, 2, 3]';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-----------+------------------+\n| @j        | JSON_UNQUOTE(@j) |\n+-----------+------------------+\n| [1, 2, 3] | [1, 2, 3]        |\n+-----------+------------------+", "mysql> SELECT @@sql_mode;\n+------------+\n| @@sql_mode |\n+------------+\n|            |\n+------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n|       2                           |\n+------------------------------+\n\nmysql> SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n| \\t\\u0032                     |\n+------------------------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\t\\u0032\"');\n+----------------------------+\n| JSON_UNQUOTE('\"\\t\\u0032\"') |\n+----------------------------+\n|       2                         |\n+----------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-unquote"], "Feature Type": ["Function"], "index": 102, "vector_txt": "102:Feature: JSON_UNQUOTE(json_val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_VALID(val)"], "Description": ["Whether JSON value is valid", "\nJSON_VALID(val)\n", "\n          Returns 0 or 1 to indicate whether a value is valid JSON.\n          Returns NULL if the argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT JSON_VALID('hello'), JSON_VALID('\"hello\"');\n+---------------------+-----------------------+\n| JSON_VALID('hello') | JSON_VALID('\"hello\"') |\n+---------------------+-----------------------+\n|                   0 |                     1 |\n+---------------------+-----------------------+"], "Examples": ["mysql> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT JSON_VALID('hello'), JSON_VALID('\"hello\"');\n+---------------------+-----------------------+\n| JSON_VALID('hello') | JSON_VALID('\"hello\"') |\n+---------------------+-----------------------+\n|                   0 |                     1 |\n+---------------------+-----------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-valid"], "Feature Type": ["Function"], "index": 103, "vector_txt": "103:Feature: JSON_VALID(val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_VALUE(json_doc,\n          path)"], "Description": ["Extract value from JSON document at location pointed to by path", "\nJSON_VALUE(json_doc,\n          path)\n", "\n          Extracts a value from a JSON document at the path given in the\n          specified document, and returns the extracted value,\n          optionally converting it to a desired type. The complete\n          syntax is shown here:\n        ", "Press CTRL+C to copy JSON_VALUE(json_doc, path [RETURNING type] [on_empty] [on_error])\n\non_empty:\n    {NULL | ERROR | DEFAULT value} ON EMPTY\n\non_error:\n    {NULL | ERROR | DEFAULT value} ON ERROR", "\njson_doc is a valid JSON document.\n          If this is NULL, the function returns\n          NULL.\n        ", "\npath is a JSON path pointing to a\n          location in the document. This must be a string literal value.\n        ", "\ntype is one of the following data\n          types:\n", "\n\nFLOAT\n\nDOUBLE\n\nDECIMAL\n\nSIGNED\n\nUNSIGNED\n\nDATE\n\nTIME\n\nDATETIME\n\nYEAR\n\nYEAR values of one or two digits are\n              not supported.\n            \nCHAR\n\nJSON\n\n", "\n          The types just listed are the same as the (non-array) types\n          supported by the CAST()\n          function.\n        ", "\n          If not specified by a RETURNING clause, the\n          JSON_VALUE() function's return type is\n          VARCHAR(512). When no character\n          set is specified for the return type,\n          JSON_VALUE() uses\n          utf8mb4 with the binary collation, which is\n          case-sensitive; if utf8mb4 is specified as\n          the character set for the result, the server uses the default\n          collation for this character set, which is not case-sensitive.\n        ", "\n          When the data at the specified path consists of or resolves to\n          a JSON null literal, the function returns SQL\n          NULL.\n        ", "\non_empty, if specified, determines\n          how JSON_VALUE() behaves when no data is\n          found at the path given; this clause takes one of the\n          following values:\n", "\n\nNULL ON EMPTY: The function returns\n              NULL; this is the default ON\n              EMPTY behavior.\n            \nDEFAULT value ON\n              EMPTY: the provided\n              value is returned. The\n              value's type must match that of the return type.\n            \nERROR ON EMPTY: The function throws an\n              error.\n\n", "\n          If used, on_error takes one of the\n          following values with the corresponding outcome when an error\n          occurs, as listed here:\n", "\n\nNULL ON ERROR:\n              JSON_VALUE() returns\n              NULL; this is the default behavior if\n              no ON ERROR clause is used.\n            \nDEFAULT value ON\n              ERROR: This is the value returned; its value\n              must match that of the return type.\n            \nERROR ON ERROR: An error is thrown.\n\n", "\nON EMPTY, if used, must precede any\n          ON ERROR clause. Specifying them in the\n          wrong order results in a syntax error.\n        ", "Error handling.\u00a0\n            In general, errors are handled by\n            JSON_VALUE() as follows:\n", "\n\n              All JSON input (document and path) is checked for\n              validity. If any of it is not valid, an SQL error is\n              thrown without triggering the ON ERROR\n              clause.\n            \nON ERROR is triggered whenever any of\n              the following events occur:\n\n\n\n                  Attempting to extract an object or an array, such as\n                  that resulting from a path that resolves to multiple\n                  locations within the JSON document\n                \n                  Conversion errors, such as attempting to convert\n                  'asdf' to an\n                  UNSIGNED value\n                \n                  Truncation of values\n\n\n\n              A conversion error always triggers a warning even if\n              NULL ON ERROR or DEFAULT ...\n              ON ERROR is specified.\n            \n              The ON EMPTY clause is triggered when\n              the source JSON document (expr)\n              contains no data at the specified location\n              (path).\n\n", "Examples.\u00a0\n            Two simple examples are shown here:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Joe                                                          |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"49.95\"}', '$.price'\n    -> RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 49.95 |\n+-------+", "\n          The statement SELECT\n          JSON_VALUE(json_doc,\n          path RETURNING\n          type) is equivalent to\n          the following statement:\n        ", "Press CTRL+C to copy SELECT CAST(\n    JSON_UNQUOTE( JSON_EXTRACT(json_doc, path) )\n    AS type\n);", "\nJSON_VALUE() simplifies creating indexes on\n          JSON columns by making it unnecessary in many cases to create\n          a generated column and then an index on the generated column.\n          You can do this when creating a table t1\n          that has a JSON column by\n          creating an index on an expression that uses\n          JSON_VALUE() operating on that column (with\n          a path that matches a value in that column), as shown here:\n        ", "Press CTRL+C to copy CREATE TABLE t1(\n    j JSON,\n    INDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )\n);", "\n          The following EXPLAIN output\n          shows that a query against t1 employing the\n          index expression in the WHERE clause uses\n          the index thus created:\n        ", "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t1\n    ->     WHERE JSON_VALUE(j, '$.id' RETURNING UNSIGNED) = 123\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: t1\n   partitions: NULL\n         type: ref\npossible_keys: i1\n          key: i1\n      key_len: 9\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL", "\n          This achieves much the same effect as creating a table\n          t2 with an index on a generated column (see\n          Indexing a Generated Column to Provide a JSON Column Index), like this one:\n        ", "Press CTRL+C to copy CREATE TABLE t2 (\n    j JSON,\n    g INT GENERATED ALWAYS AS (j->\"$.id\"),\n    INDEX i1 (g)\n);", "\n          The EXPLAIN output for a query\n          against this table, referencing the generated column, shows\n          that the index is used in the same way as for the previous\n          query against table t1:\n        ", "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t2 WHERE g  = 123\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: t2\n   partitions: NULL\n         type: ref\npossible_keys: i1\n          key: i1\n      key_len: 5\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL", "\n          For information about using indexes on generated columns for\n          indirect indexing of JSON\n          columns, see Indexing a Generated Column to Provide a JSON Column Index.\n        "], "Examples": ["mysql> SELECT JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Joe                                                          |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"49.95\"}', '$.price'\n    -> RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 49.95 |\n+-------+", "SELECT CAST(\n    JSON_UNQUOTE( JSON_EXTRACT(json_doc, path) )\n    AS type\n);", "CREATE TABLE t1(\n    j JSON,\n    INDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )\n);", "CREATE TABLE t2 (\n    j JSON,\n    g INT GENERATED ALWAYS AS (j->\"$.id\"),\n    INDEX i1 (g)\n);"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-value"], "Feature Type": ["Function"], "index": 104, "vector_txt": "104:Feature: JSON_VALUE(json_doc,\n          path)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["LAG(expr [,\n            N[,\n            default]])"], "Description": ["Value of argument from row lagging current row within partition", "\nLAG(expr [,\n            N[,\n            default]])\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the row that lags (precedes) the current row by\n            N rows within its partition. If\n            there is no such row, the return value is\n            default. For example, if\n            N is 3, the return value is\n            default for the first three rows.\n            If N or\n            default are missing, the defaults\n            are 1 and NULL, respectively.\n          ", "\nN must be a literal nonnegative\n            integer. If N is 0,\n            expr is evaluated for the current\n            row.\n          ", "\nN cannot be\n            NULL, and must be an integer in the range\n            0 to\n            263,\n            inclusive, in any of the following forms:\n", "\n\n                an unsigned integer constant literal\n              \n                a positional parameter marker (?)\n              \n                a user-defined variable\n              \n                a local variable in a stored routine\n\n", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\nLAG() (and the similar\n            LEAD() function) are often\n            used to compute differences between rows. The following\n            query shows a set of time-ordered observations and, for each\n            one, the LAG() and\n            LEAD() values from the\n            adjoining rows, as well as the differences between the\n            current and adjoining rows:\n          ", "Press CTRL+C to copy mysql> SELECT\n         t, val,\n         LAG(val)        OVER w AS 'lag',\n         LEAD(val)       OVER w AS 'lead',\n         val - LAG(val)  OVER w AS 'lag diff',\n         val - LEAD(val) OVER w AS 'lead diff'\n       FROM series\n       WINDOW w AS (ORDER BY t);\n+----------+------+------+------+----------+-----------+\n| t        | val  | lag  | lead | lag diff | lead diff |\n+----------+------+------+------+----------+-----------+\n| 12:00:00 |  100 | NULL |  125 |     NULL |       -25 |\n| 13:00:00 |  125 |  100 |  132 |       25 |        -7 |\n| 14:00:00 |  132 |  125 |  145 |        7 |       -13 |\n| 15:00:00 |  145 |  132 |  140 |       13 |         5 |\n| 16:00:00 |  140 |  145 |  150 |       -5 |       -10 |\n| 17:00:00 |  150 |  140 |  200 |       10 |       -50 |\n| 18:00:00 |  200 |  150 | NULL |       50 |      NULL |\n+----------+------+------+------+----------+-----------+", "\n            In the example, the LAG() and\n            LEAD() calls use the default\n            N and\n            default values of 1 and\n            NULL, respectively.\n          ", "\n            The first row shows what happens when there is no previous\n            row for LAG(): The function\n            returns the default value (in\n            this case, NULL). The last row shows the\n            same thing when there is no next row for\n            LEAD().\n          ", "\nLAG() and\n            LEAD() also serve to compute\n            sums rather than differences. Consider this data set, which\n            contains the first few numbers of the Fibonacci series:\n          ", "Press CTRL+C to copy mysql> SELECT n FROM fib ORDER BY n;\n+------+\n| n    |\n+------+\n|    1 |\n|    1 |\n|    2 |\n|    3 |\n|    5 |\n|    8 |\n+------+", "\n            The following query shows the\n            LAG() and\n            LEAD() values for the rows\n            adjacent to the current row. It also uses those functions to\n            add to the current row value the values from the preceding\n            and following rows. The effect is to generate the next\n            number in the Fibonacci series, and the next number after\n            that:\n          ", "Press CTRL+C to copy mysql> SELECT\n         n,\n         LAG(n, 1, 0)      OVER w AS 'lag',\n         LEAD(n, 1, 0)     OVER w AS 'lead',\n         n + LAG(n, 1, 0)  OVER w AS 'next_n',\n         n + LEAD(n, 1, 0) OVER w AS 'next_next_n'\n       FROM fib\n       WINDOW w AS (ORDER BY n);\n+------+------+------+--------+-------------+\n| n    | lag  | lead | next_n | next_next_n |\n+------+------+------+--------+-------------+\n|    1 |    0 |    1 |      1 |           2 |\n|    1 |    1 |    2 |      2 |           3 |\n|    2 |    1 |    3 |      3 |           5 |\n|    3 |    2 |    5 |      5 |           8 |\n|    5 |    3 |    8 |      8 |          13 |\n|    8 |    5 |    0 |     13 |           8 |\n+------+------+------+--------+-------------+", "\n            One way to generate the initial set of Fibonacci numbers is\n            to use a recursive common table expression. For an example,\n            see\n            Fibonacci Series Generation.\n          ", "\n            You cannot use a negative value for the rows argument of\n            this function.\n          "], "Examples": ["mysql> SELECT\n         t, val,\n         LAG(val)        OVER w AS 'lag',\n         LEAD(val)       OVER w AS 'lead',\n         val - LAG(val)  OVER w AS 'lag diff',\n         val - LEAD(val) OVER w AS 'lead diff'\n       FROM series\n       WINDOW w AS (ORDER BY t);\n+----------+------+------+------+----------+-----------+\n| t        | val  | lag  | lead | lag diff | lead diff |\n+----------+------+------+------+----------+-----------+\n| 12:00:00 |  100 | NULL |  125 |     NULL |       -25 |\n| 13:00:00 |  125 |  100 |  132 |       25 |        -7 |\n| 14:00:00 |  132 |  125 |  145 |        7 |       -13 |\n| 15:00:00 |  145 |  132 |  140 |       13 |         5 |\n| 16:00:00 |  140 |  145 |  150 |       -5 |       -10 |\n| 17:00:00 |  150 |  140 |  200 |       10 |       -50 |\n| 18:00:00 |  200 |  150 | NULL |       50 |      NULL |\n+----------+------+------+------+----------+-----------+", "mysql> SELECT n FROM fib ORDER BY n;\n+------+\n| n    |\n+------+\n|    1 |\n|    1 |\n|    2 |\n|    3 |\n|    5 |\n|    8 |\n+------+", "mysql> SELECT\n         n,\n         LAG(n, 1, 0)      OVER w AS 'lag',\n         LEAD(n, 1, 0)     OVER w AS 'lead',\n         n + LAG(n, 1, 0)  OVER w AS 'next_n',\n         n + LEAD(n, 1, 0) OVER w AS 'next_next_n'\n       FROM fib\n       WINDOW w AS (ORDER BY n);\n+------+------+------+--------+-------------+\n| n    | lag  | lead | next_n | next_next_n |\n+------+------+------+--------+-------------+\n|    1 |    0 |    1 |      1 |           2 |\n|    1 |    1 |    2 |      2 |           3 |\n|    2 |    1 |    3 |      3 |           5 |\n|    3 |    2 |    5 |      5 |           8 |\n|    5 |    3 |    8 |      8 |          13 |\n|    8 |    5 |    0 |     13 |           8 |\n+------+------+------+--------+-------------+"], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_lag"], "Feature Type": ["Function"], "index": 105, "vector_txt": "105:Feature: LAG(expr [,\n            N[,\n            default]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["LAST_INSERT_ID()"], "Description": ["Value of the AUTOINCREMENT column for the last INSERT", "\nLAST_INSERT_ID(),\n          LAST_INSERT_ID(expr)\n", "\n          With no argument,\n          LAST_INSERT_ID() returns a\n          BIGINT UNSIGNED (64-bit) value representing\n          the first automatically generated value successfully inserted\n          for an AUTO_INCREMENT column as a result of\n          the most recently executed\n          INSERT statement. The value of\n          LAST_INSERT_ID() remains\n          unchanged if no rows are successfully inserted.\n        ", "\n          With an argument,\n          LAST_INSERT_ID() returns an\n          unsigned integer, or NULL if the argument\n          is NULL.\n        ", "\n          For example, after inserting a row that generates an\n          AUTO_INCREMENT value, you can get the value\n          like this:\n        ", "Press CTRL+C to copy mysql> SELECT LAST_INSERT_ID();\n        -> 195", "\n          The currently executing statement does not affect the value of\n          LAST_INSERT_ID(). Suppose that\n          you generate an AUTO_INCREMENT value with\n          one statement, and then refer to\n          LAST_INSERT_ID() in a\n          multiple-row INSERT statement\n          that inserts rows into a table with its own\n          AUTO_INCREMENT column. The value of\n          LAST_INSERT_ID() remains stable\n          in the second statement; its value for the second and later\n          rows is not affected by the earlier row insertions. (You\n          should be aware that, if you mix references to\n          LAST_INSERT_ID() and\n          LAST_INSERT_ID(expr),\n          the effect is undefined.)\n        ", "\n          If the previous statement returned an error, the value of\n          LAST_INSERT_ID() is undefined.\n          For transactional tables, if the statement is rolled back due\n          to an error, the value of\n          LAST_INSERT_ID() is left\n          undefined. For manual\n          ROLLBACK,\n          the value of LAST_INSERT_ID()\n          is not restored to that before the transaction; it remains as\n          it was at the point of the\n          ROLLBACK.\n        ", "\n          Within the body of a stored routine (procedure or function) or\n          a trigger, the value of\n          LAST_INSERT_ID() changes the\n          same way as for statements executed outside the body of these\n          kinds of objects. The effect of a stored routine or trigger\n          upon the value of\n          LAST_INSERT_ID() that is seen\n          by following statements depends on the kind of routine:\n", "\n\n              If a stored procedure executes statements that change the\n              value of LAST_INSERT_ID(),\n              the changed value is seen by statements that follow the\n              procedure call.\n            \n              For stored functions and triggers that change the value,\n              the value is restored when the function or trigger ends,\n              so statements coming after it do not see a changed value.\n\n", "\n          The ID that was generated is maintained in the server on a\n          per-connection basis. This means that the\n          value returned by the function to a given client is the first\n          AUTO_INCREMENT value generated for most\n          recent statement affecting an\n          AUTO_INCREMENT column by that\n          client. This value cannot be affected by other\n          clients, even if they generate\n          AUTO_INCREMENT values of their own. This\n          behavior ensures that each client can retrieve its own ID\n          without concern for the activity of other clients, and without\n          the need for locks or transactions.\n        ", "\n          The value of LAST_INSERT_ID()\n          is not changed if you set the\n          AUTO_INCREMENT column of a row to a\n          non-\u201cmagic\u201d value (that is, a value that is not\n          NULL and not 0).\n", "\n\nImportant\n\n\n            If you insert multiple rows using a single\n            INSERT statement,\n            LAST_INSERT_ID() returns the\n            value generated for the first inserted\n            row only. The reason for this is to\n            make it possible to reproduce easily the same\n            INSERT statement against some\n            other server.\n\n", "\n          For example:\n        ", "Press CTRL+C to copy mysql> USE test;\n\nmysql> CREATE TABLE t (\n       id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\n       name VARCHAR(10) NOT NULL\n       );\n\nmysql> INSERT INTO t VALUES (NULL, 'Bob');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nmysql> INSERT INTO t VALUES\n       (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n|  2 | Mary |\n|  3 | Jane |\n|  4 | Lisa |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                2 |\n+------------------+", "\n          Although the second INSERT\n          statement inserted three new rows into t,\n          the ID generated for the first of these rows was\n          2, and it is this value that is returned by\n          LAST_INSERT_ID() for the\n          following SELECT statement.\n        ", "\n          If you use INSERT\n          IGNORE and the row is ignored, the\n          LAST_INSERT_ID() remains\n          unchanged from the current value (or 0 is returned if the\n          connection has not yet performed a successful\n          INSERT) and, for non-transactional tables,\n          the AUTO_INCREMENT counter is not\n          incremented. For InnoDB tables, the\n          AUTO_INCREMENT counter is incremented if\n          innodb_autoinc_lock_mode is\n          set to 1 or 2, as\n          demonstrated in the following example:\n        ", "Press CTRL+C to copy mysql> USE test;\n\nmysql> SELECT @@innodb_autoinc_lock_mode;\n+----------------------------+\n| @@innodb_autoinc_lock_mode |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nmysql> CREATE TABLE `t` (\n       `id` INT(11) NOT NULL AUTO_INCREMENT,\n       `val` INT(11) DEFAULT NULL,\n       PRIMARY KEY (`id`),\n       UNIQUE KEY `i1` (`val`)\n       ) ENGINE=InnoDB;\n\n# Insert two rows\n\nmysql> INSERT INTO t (val) VALUES (1),(2);\n\n# With auto_increment_offset=1, the inserted rows\n# result in an AUTO_INCREMENT value of 3\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# LAST_INSERT_ID() returns the first automatically generated\n# value that is successfully inserted for the AUTO_INCREMENT column\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\n# The attempted insertion of duplicate rows fail but errors are ignored\n\nmysql> INSERT IGNORE INTO t (val) VALUES (1),(2);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 2  Duplicates: 2  Warnings: 0\n\n# With innodb_autoinc_lock_mode=1, the AUTO_INCREMENT counter\n# is incremented for the ignored rows\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# The LAST_INSERT_ID is unchanged because the previous insert was unsuccessful\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+", "\n          For more information, see\n          Section\u00a017.6.1.6, \u201cAUTO_INCREMENT Handling in InnoDB\u201d.\n        ", "\n          If expr is given as an argument to\n          LAST_INSERT_ID(), the value of\n          the argument is returned by the function and is remembered as\n          the next value to be returned by\n          LAST_INSERT_ID(). This can be\n          used to simulate sequences:\n", "\n\n              Create a table to hold the sequence counter and initialize\n              it:\n            Press CTRL+C to copy mysql> CREATE TABLE sequence (id INT NOT NULL);\nmysql> INSERT INTO sequence VALUES (0);\n              Use the table to generate sequence numbers like this:\n            Press CTRL+C to copy mysql> UPDATE sequence SET id=LAST_INSERT_ID(id+1);\nmysql> SELECT LAST_INSERT_ID();\n              The UPDATE statement\n              increments the sequence counter and causes the next call\n              to LAST_INSERT_ID() to\n              return the updated value. The\n              SELECT statement retrieves\n              that value. The\n              mysql_insert_id() C API\n              function can also be used to get the value. See\n              mysql_insert_id().\n\n", "\n          You can generate sequences without calling\n          LAST_INSERT_ID(), but the\n          utility of using the function this way is that the ID value is\n          maintained in the server as the last automatically generated\n          value. It is multi-user safe because multiple clients can\n          issue the UPDATE statement and\n          get their own sequence value with the\n          SELECT statement (or\n          mysql_insert_id()), without\n          affecting or being affected by other clients that generate\n          their own sequence values.\n        ", "\n          Note that mysql_insert_id() is\n          only updated after INSERT and\n          UPDATE statements, so you\n          cannot use the C API function to retrieve the value for\n          LAST_INSERT_ID(expr)\n          after executing other SQL statements like\n          SELECT or\n          SET.\n        "], "Examples": ["mysql> SELECT LAST_INSERT_ID();\n        -> 195", "mysql> USE test;\n\nmysql> CREATE TABLE t (\n       id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\n       name VARCHAR(10) NOT NULL\n       );\n\nmysql> INSERT INTO t VALUES (NULL, 'Bob');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nmysql> INSERT INTO t VALUES\n       (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n|  2 | Mary |\n|  3 | Jane |\n|  4 | Lisa |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                2 |\n+------------------+", "mysql> USE test;\n\nmysql> SELECT @@innodb_autoinc_lock_mode;\n+----------------------------+\n| @@innodb_autoinc_lock_mode |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nmysql> CREATE TABLE `t` (\n       `id` INT(11) NOT NULL AUTO_INCREMENT,\n       `val` INT(11) DEFAULT NULL,\n       PRIMARY KEY (`id`),\n       UNIQUE KEY `i1` (`val`)\n       ) ENGINE=InnoDB;\n\n# Insert two rows\n\nmysql> INSERT INTO t (val) VALUES (1),(2);\n\n# With auto_increment_offset=1, the inserted rows\n# result in an AUTO_INCREMENT value of 3\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# LAST_INSERT_ID() returns the first automatically generated\n# value that is successfully inserted for the AUTO_INCREMENT column\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\n# The attempted insertion of duplicate rows fail but errors are ignored\n\nmysql> INSERT IGNORE INTO t (val) VALUES (1),(2);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 2  Duplicates: 2  Warnings: 0\n\n# With innodb_autoinc_lock_mode=1, the AUTO_INCREMENT counter\n# is incremented for the ignored rows\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# The LAST_INSERT_ID is unchanged because the previous insert was unsuccessful\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+", "mysql> CREATE TABLE sequence (id INT NOT NULL);\nmysql> INSERT INTO sequence VALUES (0);", "mysql> UPDATE sequence SET id=LAST_INSERT_ID(id+1);\nmysql> SELECT LAST_INSERT_ID();"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_last-insert-id"], "Feature Type": ["Function"], "index": 106, "vector_txt": "106:Feature: LAST_INSERT_ID()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["LAST_VALUE(expr)"], "Description": ["Value of argument from last row of window frame", "\nLAST_VALUE(expr)\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the last row of the window frame.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            For an example, see the\n            FIRST_VALUE() function\n            description.\n          "], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_last-value"], "Feature Type": ["Function"], "index": 107, "vector_txt": "107:Feature: LAST_VALUE(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LCASE(str)"], "Description": ["Synonym for LOWER()", "\nLCASE(str)\n", "\nLCASE() is a synonym for\n          LOWER().\n        ", "\nLCASE() used in a view is rewritten as\n          LOWER() when storing the view's\n          definition. (Bug #12844279)\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_lcase"], "Feature Type": ["Function"], "index": 108, "vector_txt": "108:Feature: LCASE(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["LEAD(expr [,\n            N[,\n            default]])"], "Description": ["Value of argument from row leading current row within partition", "\nLEAD(expr [,\n            N[,\n            default]])\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the row that leads (follows) the current row by\n            N rows within its partition. If\n            there is no such row, the return value is\n            default. For example, if\n            N is 3, the return value is\n            default for the last three rows.\n            If N or\n            default are missing, the defaults\n            are 1 and NULL, respectively.\n          ", "\nN must be a literal nonnegative\n            integer. If N is 0,\n            expr is evaluated for the current\n            row.\n          ", "\nN cannot be\n            NULL, and must be an integer in the range\n            0 to\n            263,\n            inclusive, in any of the following forms:\n", "\n\n                an unsigned integer constant literal\n              \n                a positional parameter marker (?)\n              \n                a user-defined variable\n              \n                a local variable in a stored routine\n\n", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            For an example, see the LAG()\n            function description.\n          ", "\n            Use of a negative value for the rows argument of this\n            function is not permitted.\n          "], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_lead"], "Feature Type": ["Function"], "index": 109, "vector_txt": "109:Feature: LEAD(expr [,\n            N[,\n            default]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.12 Bit Functions and Operators"], "Feature": ["BIT_COUNT(N)"], "Description": ["Return the number of bits that are set", "\nBIT_COUNT(N)\n", "\n          Returns the number of bits that are set in the argument\n          N as an unsigned 64-bit integer, or\n          NULL if the argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT BIT_COUNT(64), BIT_COUNT(BINARY 64);\n        -> 1, 7\nmysql> SELECT BIT_COUNT('64'), BIT_COUNT(_binary '64');\n        -> 1, 7\nmysql> SELECT BIT_COUNT(X'40'), BIT_COUNT(_binary X'40');\n        -> 1, 1"], "Examples": ["mysql> SELECT BIT_COUNT(64), BIT_COUNT(BINARY 64);\n        -> 1, 7\nmysql> SELECT BIT_COUNT('64'), BIT_COUNT(_binary '64');\n        -> 1, 7\nmysql> SELECT BIT_COUNT(X'40'), BIT_COUNT(_binary X'40');\n        -> 1, 1"], "Category": ["Built-In Functions", "Bit Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html#function_bit-count"], "Feature Type": ["Function"], "index": 110, "vector_txt": "110:Feature: BIT_COUNT(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["BIT_AND(expr)\n            [over_clause]"], "Description": ["Return bitwise AND", "\nBIT_AND(expr)\n            [over_clause]\n", "\n            Returns the bitwise AND of all bits in\n            expr.\n          ", "\n            The result type depends on whether the function argument\n            values are evaluated as binary strings or numbers:\n", "\n\n                Binary-string evaluation occurs when the argument values\n                have a binary string type, and the argument is not a\n                hexadecimal literal, bit literal, or\n                NULL literal. Numeric evaluation\n                occurs otherwise, with argument value conversion to\n                unsigned 64-bit integers as necessary.\n              \n                Binary-string evaluation produces a binary string of the\n                same length as the argument values. If argument values\n                have unequal lengths, an\n                ER_INVALID_BITWISE_OPERANDS_SIZE\n                error occurs. If the argument size exceeds 511 bytes, an\n                ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE\n                error occurs. Numeric evaluation produces an unsigned\n                64-bit integer.\n\n", "\n            If there are no matching rows,\n            BIT_AND() returns a neutral\n            value (all bits set to 1) having the same length as the\n            argument values.\n          ", "\nNULL values do not affect the result\n            unless all values are NULL. In that case,\n            the result is a neutral value having the same length as the\n            argument values.\n          ", "\n            For more information discussion about argument evaluation\n            and result types, see the introductory discussion in\n            Section\u00a014.12, \u201cBit Functions and Operators\u201d.\n          ", "\n            If BIT_AND() is invoked from\n            within the mysql client, binary string\n            results display using hexadecimal notation, depending on the\n            value of the --binary-as-hex.\n            For more information about that option, see\n            Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_bit-and"], "Feature Type": ["Function"], "index": 111, "vector_txt": "111:Feature: BIT_AND(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["LEAST(value1,value2,...)"], "Description": ["Return the smallest argument", "\nLEAST(value1,value2,...)\n", "\n            With two or more arguments, returns the smallest\n            (minimum-valued) argument. The arguments are compared using\n            the following rules:\n", "\n\n                If any argument is NULL, the result\n                is NULL. No comparison is needed.\n              \n                If all arguments are integer-valued, they are compared\n                as integers.\n              \n                If at least one argument is double precision, they are\n                compared as double-precision values. Otherwise, if at\n                least one argument is a\n                DECIMAL value, they are\n                compared as DECIMAL\n                values.\n              \n                If the arguments comprise a mix of numbers and strings,\n                they are compared as strings.\n              \n                If any argument is a nonbinary (character) string, the\n                arguments are compared as nonbinary strings.\n              \n                In all other cases, the arguments are compared as binary\n                strings.\n\n", "\n            The return type of LEAST() is\n            the aggregated type of the comparison argument types.\n          ", "Press CTRL+C to copy mysql> SELECT LEAST(2,0);\n        -> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n        -> 3.0\nmysql> SELECT LEAST('B','A','C');\n        -> 'A'"], "Examples": ["mysql> SELECT LEAST(2,0);\n        -> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n        -> 3.0\nmysql> SELECT LEAST('B','A','C');\n        -> 'A'"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_least"], "Feature Type": ["Function"], "index": 112, "vector_txt": "112:Feature: LEAST(value1,value2,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LEFT(str,len)"], "Description": ["Return the leftmost number of characters as specified", "\nLEFT(str,len)\n", "\n          Returns the leftmost len characters\n          from the string str, or\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LEFT('foobarbar', 5);\n        -> 'fooba'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT LEFT('foobarbar', 5);\n        -> 'fooba'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_left"], "Feature Type": ["Function"], "index": 113, "vector_txt": "113:Feature: LEFT(str,len)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LENGTH(str)"], "Description": ["Return the length of a string in bytes", "\nLENGTH(str)\n", "\n          Returns the length of the string\n          str, measured in bytes. A multibyte\n          character counts as multiple bytes. This means that for a\n          string containing five 2-byte characters,\n          LENGTH() returns\n          10, whereas\n          CHAR_LENGTH() returns\n          5. Returns NULL if\n          str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LENGTH('text');\n        -> 4", "\n\nNote\n\n\n            The Length() OpenGIS spatial function is\n            named ST_Length() in MySQL.\n\n"], "Examples": ["mysql> SELECT LENGTH('text');\n        -> 4"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_length"], "Feature Type": ["Function"], "index": 114, "vector_txt": "114:Feature: LENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["LineString(pt\n          [, pt] ...)"], "Description": ["Construct LineString from Point values", "\nLineString(pt\n          [, pt] ...)\n", "\n          Constructs a LineString value from a number\n          of Point or WKB Point\n          arguments. If the number of arguments is less than two, the\n          return value is NULL.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_linestring"], "Feature Type": ["Function"], "index": 115, "vector_txt": "115:Feature: LineString(pt\n          [, pt] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["LN(X)"], "Description": ["Return the natural logarithm of the argument", "\nLN(X)\n", "\n            Returns the natural logarithm of\n            X; that is, the\n            base-e logarithm of\n            X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT LN(2);\n        -> 0.69314718055995\nmysql> SELECT LN(-2);\n        -> NULL", "\n            This function is synonymous with\n            LOG(X).\n            The inverse of this function is the\n            EXP() function.\n          "], "Examples": ["mysql> SELECT LN(2);\n        -> 0.69314718055995\nmysql> SELECT LN(-2);\n        -> NULL"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ln"], "Feature Type": ["Function"], "index": 116, "vector_txt": "116:Feature: LN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LOAD_FILE(file_name)"], "Description": ["Load the named file", "\nLOAD_FILE(file_name)\n", "\n          Reads the file and returns the file contents as a string. To\n          use this function, the file must be located on the server\n          host, you must specify the full path name to the file, and you\n          must have the FILE privilege.\n          The file must be readable by the server and its size less than\n          max_allowed_packet bytes. If\n          the secure_file_priv system\n          variable is set to a nonempty directory name, the file to be\n          loaded must be located in that directory.\n        ", "\n          If the file does not exist or cannot be read because one of\n          the preceding conditions is not satisfied, the function\n          returns NULL.\n        ", "\n          The character_set_filesystem\n          system variable controls interpretation of file names that are\n          given as literal strings.\n        ", "Press CTRL+C to copy mysql> UPDATE t\n            SET blob_col=LOAD_FILE('/tmp/picture')\n            WHERE id=1;"], "Examples": ["mysql> UPDATE t\n            SET blob_col=LOAD_FILE('/tmp/picture')\n            WHERE id=1;"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_load-file"], "Feature Type": ["Function"], "index": 117, "vector_txt": "117:Feature: LOAD_FILE(file_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["LOCALTIME"], "Description": ["Synonym for NOW()", "\nLOCALTIME,\n          LOCALTIME([fsp])\n", "\nLOCALTIME and\n          LOCALTIME() are synonyms for\n          NOW().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_localtime"], "Feature Type": ["Function"], "index": 118, "vector_txt": "118:Feature: LOCALTIME\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["LOCALTIMESTAMP"], "Description": ["Synonym for NOW()", "\nLOCALTIMESTAMP,\n          LOCALTIMESTAMP([fsp])\n", "\nLOCALTIMESTAMP and\n          LOCALTIMESTAMP() are synonyms\n          for NOW().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_localtimestamp"], "Feature Type": ["Function"], "index": 119, "vector_txt": "119:Feature: LOCALTIMESTAMP\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LOCATE(substr,str)"], "Description": ["Return the position of the first occurrence of substring", "\nLOCATE(substr,str),\n          LOCATE(substr,str,pos)\n", "\n          The first syntax returns the position of the first occurrence\n          of substring substr in string\n          str. The second syntax returns the\n          position of the first occurrence of substring\n          substr in string\n          str, starting at position\n          pos. Returns 0\n          if substr is not in\n          str. Returns\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LOCATE('bar', 'foobarbar');\n        -> 4\nmysql> SELECT LOCATE('xbar', 'foobar');\n        -> 0\nmysql> SELECT LOCATE('bar', 'foobarbar', 5);\n        -> 7", "\n          This function is multibyte safe, and is case-sensitive only if\n          at least one argument is a binary string.\n        "], "Examples": ["mysql> SELECT LOCATE('bar', 'foobarbar');\n        -> 4\nmysql> SELECT LOCATE('xbar', 'foobar');\n        -> 0\nmysql> SELECT LOCATE('bar', 'foobarbar', 5);\n        -> 7"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_locate"], "Feature Type": ["Function"], "index": 120, "vector_txt": "120:Feature: LOCATE(substr,str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["LOG(X)"], "Description": ["Return the natural logarithm of the first argument", "\nLOG(X),\n            LOG(B,X)\n", "\n            If called with one parameter, this function returns the\n            natural logarithm of X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X or B\n            is NULL.\n          ", "\n            The inverse of this function (when called with a single\n            argument) is the EXP()\n            function.\n          ", "Press CTRL+C to copy mysql> SELECT LOG(2);\n        -> 0.69314718055995\nmysql> SELECT LOG(-2);\n        -> NULL", "\n            If called with two parameters, this function returns the\n            logarithm of X to the base\n            B. If\n            X is less than or equal to 0, or\n            if B is less than or equal to 1,\n            then NULL is returned.\n          ", "Press CTRL+C to copy mysql> SELECT LOG(2,65536);\n        -> 16\nmysql> SELECT LOG(10,100);\n        -> 2\nmysql> SELECT LOG(1,100);\n        -> NULL", "\nLOG(B,X)\n            is equivalent to\n            LOG(X) /\n            LOG(B).\n          "], "Examples": ["mysql> SELECT LOG(2);\n        -> 0.69314718055995\nmysql> SELECT LOG(-2);\n        -> NULL", "mysql> SELECT LOG(2,65536);\n        -> 16\nmysql> SELECT LOG(10,100);\n        -> 2\nmysql> SELECT LOG(1,100);\n        -> NULL"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log"], "Feature Type": ["Function"], "index": 121, "vector_txt": "121:Feature: LOG(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ABS(X)"], "Description": ["Return the absolute value", "\nABS(X)\n", "\n            Returns the absolute value of X,\n            or NULL if X\n            is NULL.\n          ", "\n            The result type is derived from the argument type. An\n            implication of this is that\n            ABS(-9223372036854775808)\n            produces an error because the result cannot be stored in a\n            signed BIGINT value.\n          ", "Press CTRL+C to copy mysql> SELECT ABS(2);\n        -> 2\nmysql> SELECT ABS(-32);\n        -> 32", "\n            This function is safe to use with\n            BIGINT values.\n          "], "Examples": ["mysql> SELECT ABS(2);\n        -> 2\nmysql> SELECT ABS(-32);\n        -> 32"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_abs"], "Feature Type": ["Function"], "index": 122, "vector_txt": "122:Feature: ABS(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["LOG10(X)"], "Description": ["Return the base-10 logarithm of the argument", "\nLOG10(X)\n", "\n            Returns the base-10 logarithm of\n            X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT LOG10(2);\n        -> 0.30102999566398\nmysql> SELECT LOG10(100);\n        -> 2\nmysql> SELECT LOG10(-100);\n        -> NULL", "\nLOG10(X)\n            is equivalent to\n            LOG(10,X).\n          "], "Examples": ["mysql> SELECT LOG10(2);\n        -> 0.30102999566398\nmysql> SELECT LOG10(100);\n        -> 2\nmysql> SELECT LOG10(-100);\n        -> NULL"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log10"], "Feature Type": ["Function"], "index": 123, "vector_txt": "123:Feature: LOG10(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["LOG2(X)"], "Description": ["Return the base-2 logarithm of the argument", "\nLOG2(X)\n", "\n            Returns the base-2 logarithm of\n            X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT LOG2(65536);\n        -> 16\nmysql> SELECT LOG2(-100);\n        -> NULL", "\nLOG2() is useful for finding\n            out how many bits a number requires for storage. This\n            function is equivalent to the expression\n            LOG(X) /\n            LOG(2).\n          "], "Examples": ["mysql> SELECT LOG2(65536);\n        -> 16\nmysql> SELECT LOG2(-100);\n        -> NULL"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log2"], "Feature Type": ["Function"], "index": 124, "vector_txt": "124:Feature: LOG2(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LOWER(str)"], "Description": ["Return the argument in lowercase", "\nLOWER(str)\n", "\n          Returns the string str with all\n          characters changed to lowercase according to the current\n          character set mapping, or NULL if\n          str is NULL. The\n          default character set is utf8mb4.\n        ", "Press CTRL+C to copy mysql> SELECT LOWER('QUADRATICALLY');\n        -> 'quadratically'", "\nLOWER() (and\n          UPPER()) are ineffective when\n          applied to binary strings\n          (BINARY,\n          VARBINARY,\n          BLOB). To perform lettercase\n          conversion of a binary string, first convert it to a nonbinary\n          string using a character set appropriate for the data stored\n          in the string:\n        ", "Press CTRL+C to copy mysql> SET @str = BINARY 'New York';\nmysql> SELECT LOWER(@str), LOWER(CONVERT(@str USING utf8mb4));\n+-------------+------------------------------------+\n| LOWER(@str) | LOWER(CONVERT(@str USING utf8mb4)) |\n+-------------+------------------------------------+\n| New York    | new york                           |\n+-------------+------------------------------------+", "\n          For collations of Unicode character sets,\n          LOWER() and\n          UPPER() work according to the\n          Unicode Collation Algorithm (UCA) version in the collation\n          name, if there is one, and UCA 4.0.0 if no version is\n          specified. For example, utf8mb4_0900_ai_ci\n          and utf8mb3_unicode_520_ci work according\n          to UCA 9.0.0 and 5.2.0, respectively, whereas\n          utf8mb3_unicode_ci works according to UCA\n          4.0.0. See Section\u00a012.10.1, \u201cUnicode Character Sets\u201d.\n        ", "\n          This function is multibyte safe.\n        ", "\nLCASE() used within views is rewritten as\n          LOWER().\n        "], "Examples": ["mysql> SELECT LOWER('QUADRATICALLY');\n        -> 'quadratically'", "mysql> SET @str = BINARY 'New York';\nmysql> SELECT LOWER(@str), LOWER(CONVERT(@str USING utf8mb4));\n+-------------+------------------------------------+\n| LOWER(@str) | LOWER(CONVERT(@str USING utf8mb4)) |\n+-------------+------------------------------------+\n| New York    | new york                           |\n+-------------+------------------------------------+"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_lower"], "Feature Type": ["Function"], "index": 125, "vector_txt": "125:Feature: LOWER(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LPAD(str,len,padstr)"], "Description": ["Return the string argument, left-padded with the specified string", "\nLPAD(str,len,padstr)\n", "\n          Returns the string str, left-padded\n          with the string padstr to a length\n          of len characters. If\n          str is longer than\n          len, the return value is shortened\n          to len characters.\n        ", "Press CTRL+C to copy mysql> SELECT LPAD('hi',4,'??');\n        -> '??hi'\nmysql> SELECT LPAD('hi',1,'??');\n        -> 'h'", "\n          Returns NULL if any of its arguments are\n          NULL.\n        "], "Examples": ["mysql> SELECT LPAD('hi',4,'??');\n        -> '??hi'\nmysql> SELECT LPAD('hi',1,'??');\n        -> 'h'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_lpad"], "Feature Type": ["Function"], "index": 126, "vector_txt": "126:Feature: LPAD(str,len,padstr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LTRIM(str)"], "Description": ["Remove leading spaces", "\nLTRIM(str)\n", "\n          Returns the string str with leading\n          space characters removed. Returns NULL if\n          str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LTRIM('  barbar');\n        -> 'barbar'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT LTRIM('  barbar');\n        -> 'barbar'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ltrim"], "Feature Type": ["Function"], "index": 127, "vector_txt": "127:Feature: LTRIM(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["MAKE_SET(bits,str1,str2,...)"], "Description": ["Return a set of comma-separated strings that have the", "\nMAKE_SET(bits,str1,str2,...)\n", "\n          Returns a set value (a string containing substrings separated\n          by , characters) consisting of the strings\n          that have the corresponding bit in\n          bits set.\n          str1 corresponds to bit 0,\n          str2 to bit 1, and so on.\n          NULL values in\n          str1,\n          str2, ... are\n          not appended to the result.\n        ", "Press CTRL+C to copy mysql> SELECT MAKE_SET(1,'a','b','c');\n        -> 'a'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice','world');\n        -> 'hello,world'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');\n        -> 'hello'\nmysql> SELECT MAKE_SET(0,'a','b','c');\n        -> ''"], "Examples": ["mysql> SELECT MAKE_SET(1,'a','b','c');\n        -> 'a'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice','world');\n        -> 'hello,world'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');\n        -> 'hello'\nmysql> SELECT MAKE_SET(0,'a','b','c');\n        -> ''"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_make-set"], "Feature Type": ["Function"], "index": 128, "vector_txt": "128:Feature: MAKE_SET(bits,str1,str2,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MAKEDATE(year,dayofyear)"], "Description": ["Create a date from the year and day of year", "\nMAKEDATE(year,dayofyear)\n", "\n          Returns a date, given year and day-of-year values.\n          dayofyear must be greater than 0 or\n          the result is NULL. The result is also\n          NULL if either argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n        -> '2011-01-31', '2011-02-01'\nmysql> SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n        -> '2011-12-31', '2014-12-31'\nmysql> SELECT MAKEDATE(2011,0);\n        -> NULL"], "Examples": ["mysql> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n        -> '2011-01-31', '2011-02-01'\nmysql> SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n        -> '2011-12-31', '2014-12-31'\nmysql> SELECT MAKEDATE(2011,0);\n        -> NULL"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_makedate"], "Feature Type": ["Function"], "index": 129, "vector_txt": "129:Feature: MAKEDATE(year,dayofyear)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MAKETIME(hour,minute,second)"], "Description": ["Create time from hour, minute, second", "\nMAKETIME(hour,minute,second)\n", "\n          Returns a time value calculated from the\n          hour,\n          minute, and\n          second arguments. Returns\n          NULL if any of its arguments are\n          NULL.\n        ", "\n          The second argument can have a\n          fractional part.\n        ", "Press CTRL+C to copy mysql> SELECT MAKETIME(12,15,30);\n        -> '12:15:30'"], "Examples": ["mysql> SELECT MAKETIME(12,15,30);\n        -> '12:15:30'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_maketime"], "Feature Type": ["Function"], "index": 130, "vector_txt": "130:Feature: MAKETIME(hour,minute,second)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-synchronization.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.4 Position-Based Synchronization Functions"], "Feature": ["MASTER_POS_WAIT(log_name,log_pos[,timeout][,channel])"], "Description": ["Block until the replica has read and applied all updates up to the", "\nMASTER_POS_WAIT(log_name,log_pos[,timeout][,channel])\n", "\n            Deprecated alias for\n            SOURCE_POS_WAIT().\n          "], "Examples": [], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-synchronization.html#function_master-pos-wait"], "Feature Type": ["Function"], "index": 131, "vector_txt": "131:Feature: MASTER_POS_WAIT(log_name,log_pos[,timeout][,channel])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["MAX([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the maximum value", "\nMAX([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the maximum value of\n            expr.\n            MAX() may take a string\n            argument; in such cases, it returns the maximum string\n            value. See Section\u00a010.3.1, \u201cHow MySQL Uses Indexes\u201d. The\n            DISTINCT keyword can be used to find the\n            maximum of the distinct values of\n            expr, however, this produces the\n            same result as omitting DISTINCT.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            MAX() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            For MAX(), MySQL currently\n            compares ENUM and\n            SET columns by their string\n            value rather than by the string's relative position in the\n            set. This differs from how ORDER BY\n            compares them.\n          "], "Examples": ["mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_max"], "Feature Type": ["Function"], "index": 132, "vector_txt": "132:Feature: MAX([DISTINCT]\n            expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ACOS(X)"], "Description": ["Return the arc cosine", "\nACOS(X)\n", "\n            Returns the arc cosine of X, that\n            is, the value whose cosine is X.\n            Returns NULL if\n            X is not in the range\n            -1 to 1, or if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ACOS(1);\n        -> 0\nmysql> SELECT ACOS(1.0001);\n        -> NULL\nmysql> SELECT ACOS(0);\n        -> 1.5707963267949"], "Examples": ["mysql> SELECT ACOS(1);\n        -> 0\nmysql> SELECT ACOS(1.0001);\n        -> NULL\nmysql> SELECT ACOS(0);\n        -> 1.5707963267949"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_acos"], "Feature Type": ["Function"], "index": 133, "vector_txt": "133:Feature: ACOS(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRContains(g1,\n            g2)"], "Description": ["Whether MBR of one geometry contains MBR of another", "\nMBRContains(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 contains the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRWithin().\n          ", "\nMBRContains() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);\n+----------------------+--------------------+\n| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |\n+----------------------+--------------------+\n|                    1 |                  1 |\n+----------------------+--------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);\n+----------------------+--------------------+\n| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |\n+----------------------+--------------------+\n|                    1 |                  1 |\n+----------------------+--------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrcontains"], "Feature Type": ["Function"], "index": 134, "vector_txt": "134:Feature: MBRContains(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRCoveredBy(g1,\n            g2)"], "Description": ["Whether one MBR is covered by another", "\nMBRCoveredBy(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 is covered by the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRCovers().\n          ", "\nMBRCoveredBy() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRCovers(@g1,@g2), MBRCoveredby(@g1,@g2);\n+--------------------+-----------------------+\n| MBRCovers(@g1,@g2) | MBRCoveredby(@g1,@g2) |\n+--------------------+-----------------------+\n|                  1 |                     0 |\n+--------------------+-----------------------+\nmysql> SELECT MBRCovers(@g2,@g1), MBRCoveredby(@g2,@g1);\n+--------------------+-----------------------+\n| MBRCovers(@g2,@g1) | MBRCoveredby(@g2,@g1) |\n+--------------------+-----------------------+\n|                  0 |                     1 |\n+--------------------+-----------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRCovers(@g1,@g2), MBRCoveredby(@g1,@g2);\n+--------------------+-----------------------+\n| MBRCovers(@g1,@g2) | MBRCoveredby(@g1,@g2) |\n+--------------------+-----------------------+\n|                  1 |                     0 |\n+--------------------+-----------------------+\nmysql> SELECT MBRCovers(@g2,@g1), MBRCoveredby(@g2,@g1);\n+--------------------+-----------------------+\n| MBRCovers(@g2,@g1) | MBRCoveredby(@g2,@g1) |\n+--------------------+-----------------------+\n|                  0 |                     1 |\n+--------------------+-----------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrcoveredby"], "Feature Type": ["Function"], "index": 135, "vector_txt": "135:Feature: MBRCoveredBy(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRCovers(g1,\n            g2)"], "Description": ["Whether one MBR covers another", "\nMBRCovers(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 covers the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRCoveredBy(). See the\n            description of MBRCoveredBy()\n            for examples.\n          ", "\nMBRCovers() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrcovers"], "Feature Type": ["Function"], "index": 136, "vector_txt": "136:Feature: MBRCovers(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRDisjoint(g1,\n            g2)"], "Description": ["Whether MBRs of two geometries are disjoint", "\nMBRDisjoint(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangles of the two geometries\n            g1 and\n            g2 are disjoint (do not\n            intersect).\n          ", "\nMBRDisjoint() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrdisjoint"], "Feature Type": ["Function"], "index": 137, "vector_txt": "137:Feature: MBRDisjoint(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBREquals(g1,\n            g2)"], "Description": ["Whether MBRs of two geometries are equal", "\nMBREquals(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangles of the two geometries\n            g1 and\n            g2 are the same.\n          ", "\nMBREquals() handles its\n            arguments as described in the introduction to this section,\n            except that it does not return NULL for\n            empty geometry arguments.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrequals"], "Feature Type": ["Function"], "index": 138, "vector_txt": "138:Feature: MBREquals(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRIntersects(g1,\n            g2)"], "Description": ["Whether MBRs of two geometries intersect", "\nMBRIntersects(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangles of the two geometries\n            g1 and\n            g2 intersect.\n          ", "\nMBRIntersects() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrintersects"], "Feature Type": ["Function"], "index": 139, "vector_txt": "139:Feature: MBRIntersects(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBROverlaps(g1,\n            g2)"], "Description": ["Whether MBRs of two geometries overlap", "\nMBROverlaps(g1,\n            g2)\n", "\n            Two geometries spatially overlap if\n            they intersect and their intersection results in a geometry\n            of the same dimension but not equal to either of the given\n            geometries.\n          ", "\n            This function returns 1 or 0 to indicate whether the minimum\n            bounding rectangles of the two geometries\n            g1 and\n            g2 overlap.\n          ", "\nMBROverlaps() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbroverlaps"], "Feature Type": ["Function"], "index": 140, "vector_txt": "140:Feature: MBROverlaps(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRTouches(g1,\n            g2)"], "Description": ["Whether MBRs of two geometries touch", "\nMBRTouches(g1,\n            g2)\n", "\n            Two geometries spatially touch if their\n            interiors do not intersect, but the boundary of one of the\n            geometries intersects either the boundary or the interior of\n            the other.\n          ", "\n            This function returns 1 or 0 to indicate whether the minimum\n            bounding rectangles of the two geometries\n            g1 and\n            g2 touch.\n          ", "\nMBRTouches() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrtouches"], "Feature Type": ["Function"], "index": 141, "vector_txt": "141:Feature: MBRTouches(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRWithin(g1,\n            g2)"], "Description": ["Whether MBR of one geometry is within MBR of another", "\nMBRWithin(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 is within the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRContains().\n          ", "\nMBRWithin() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');\nmysql> SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');\nmysql> SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrwithin"], "Feature Type": ["Function"], "index": 142, "vector_txt": "142:Feature: MBRWithin(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["MD5(str)"], "Description": ["Calculate MD5 checksum", "\nMD5(str)\n", "\n          Calculates an MD5 128-bit checksum for the string. The value\n          is returned as a string of 32 hexadecimal digits, or\n          NULL if the argument was\n          NULL. The return value can, for example, be\n          used as a hash key. See the notes at the beginning of this\n          section about storing hash values efficiently.\n        ", "\n          The return value is a string in the connection character set.\n        ", "\n          If FIPS mode is enabled,\n          MD5() returns\n          NULL. See Section\u00a08.8, \u201cFIPS Support\u201d.\n        ", "Press CTRL+C to copy mysql> SELECT MD5('testing');\n        -> 'ae2b1fca515949e5d54fb22b8ed95575'", "\n          This is the \u201cRSA Data Security, Inc. MD5 Message-Digest\n          Algorithm.\u201d\n", "\n          See the note regarding the MD5 algorithm at the beginning this\n          section.\n        "], "Examples": ["mysql> SELECT MD5('testing');\n        -> 'ae2b1fca515949e5d54fb22b8ed95575'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_md5"], "Feature Type": ["Function"], "index": 143, "vector_txt": "143:Feature: MD5(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["ADDDATE(date,INTERVAL\n          expr\nunit)"], "Description": ["Add time values (intervals) to a date value", "\nADDDATE(date,INTERVAL\n          expr\nunit),\n          ADDDATE(date,days)\n", "\n          When invoked with the INTERVAL form of the\n          second argument, ADDDATE() is a\n          synonym for DATE_ADD(). The\n          related function SUBDATE() is a\n          synonym for DATE_SUB(). For\n          information on the INTERVAL\nunit argument, see\n          Temporal Intervals.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'\nmysql> SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'", "\n          When invoked with the days form of\n          the second argument, MySQL treats it as an integer number of\n          days to be added to expr.\n        ", "Press CTRL+C to copy mysql> SELECT ADDDATE('2008-01-02', 31);\n        -> '2008-02-02'", "\n          This function returns NULL if\n          date or\n          days is NULL.\n        "], "Examples": ["mysql> SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'\nmysql> SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'", "mysql> SELECT ADDDATE('2008-01-02', 31);\n        -> '2008-02-02'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_adddate"], "Feature Type": ["Function"], "index": 144, "vector_txt": "144:Feature: ADDDATE(date,INTERVAL\n          expr\nunit)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference", "14.4 Operators"], "Feature": ["value\n          MEMBER OF(json_array)"], "Description": ["Returns true (1) if first operand matches any element of JSON", "\nvalue\n          MEMBER OF(json_array)\n", "\n          Returns true (1) if value is an\n          element of json_array, otherwise\n          returns false (0). value must be a\n          scalar or a JSON document; if it is a scalar, the operator\n          attempts to treat it as an element of a JSON array. If\n          value or\n          json_array is\n          NULL, the function returns\n          NULL.\n        ", "\n          Queries using MEMBER OF() on JSON columns\n          of InnoDB tables in the\n          WHERE clause can be optimized using\n          multi-valued indexes. See\n          Multi-Valued Indexes, for detailed\n          information and examples.\n        ", "\n          Simple scalars are treated as array values, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+-------------------------------------------+\n| 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+-------------------------------------------+\n|                                         1 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+---------------------------------------------+\n| 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set (0.00 sec)", "\n          Partial matches of array element values do not match:\n        ", "Press CTRL+C to copy mysql> SELECT 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+------------------------------------------+\n| 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n1 row in set (0.00 sec)", "Press CTRL+C to copy mysql> SELECT 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+--------------------------------------------+\n| 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+--------------------------------------------+\n|                                          0 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "\n          Conversions to and from string types are not performed:\n        ", "Press CTRL+C to copy mysql> SELECT\n    -> 17 MEMBER OF('[23, \"abc\", \"17\", \"ab\", 10]'),\n    -> \"17\" MEMBER OF('[23, \"abc\", 17, \"ab\", 10]')\\G\n*************************** 1. row ***************************\n17 MEMBER OF('[23, \"abc\", \"17\", \"ab\", 10]'): 0\n\"17\" MEMBER OF('[23, \"abc\", 17, \"ab\", 10]'): 0\n1 row in set (0.00 sec)", "\n          To use this operator with a value which itself an array, it is\n          necessary to cast it explicitly as a JSON array. You can do\n          this with CAST(... AS JSON):\n        ", "Press CTRL+C to copy mysql> SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------------+\n| CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+\n1 row in set (0.00 sec)", "\n          It is also possible to perform the necessary cast using the\n          JSON_ARRAY() function, like\n          this:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------+\n| JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "\n          Any JSON objects used as values to be tested or which appear\n          in the target array must be coerced to the correct type using\n          CAST(... AS JSON) or\n          JSON_OBJECT(). In addition, a\n          target array containing JSON objects must itself be cast using\n          JSON_ARRAY. This is demonstrated in the\n          following sequence of statements:\n        ", "Press CTRL+C to copy mysql> SET @a = CAST('{\"a\":1}' AS JSON);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @b = JSON_OBJECT(\"b\", 2);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @c = JSON_ARRAY(17, @b, \"abc\", @a, 23);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a MEMBER OF(@c), @b MEMBER OF(@c);\n+------------------+------------------+\n| @a MEMBER OF(@c) | @b MEMBER OF(@c) |\n+------------------+------------------+\n|                1 |                1 |\n+------------------+------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+-------------------------------------------+\n| 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+-------------------------------------------+\n|                                         1 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+---------------------------------------------+\n| 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+------------------------------------------+\n| 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+--------------------------------------------+\n| 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+--------------------------------------------+\n|                                          0 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------------+\n| CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------+\n| JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SET @a = CAST('{\"a\":1}' AS JSON);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @b = JSON_OBJECT(\"b\", 2);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @c = JSON_ARRAY(17, @b, \"abc\", @a, 23);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a MEMBER OF(@c), @b MEMBER OF(@c);\n+------------------+------------------+\n| @a MEMBER OF(@c) | @b MEMBER OF(@c) |\n+------------------+------------------+\n|                1 |                1 |\n+------------------+------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#operator_member-of"], "Feature Type": ["Function"], "index": 145, "vector_txt": "145:Feature: value\n          MEMBER OF(json_array)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MICROSECOND(expr)"], "Description": ["Return the microseconds from argument", "\nMICROSECOND(expr)\n", "\n          Returns the microseconds from the time or datetime expression\n          expr as a number in the range from\n          0 to 999999. Returns\n          NULL if expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MICROSECOND('12:00:00.123456');\n        -> 123456\nmysql> SELECT MICROSECOND('2019-12-31 23:59:59.000010');\n        -> 10"], "Examples": ["mysql> SELECT MICROSECOND('12:00:00.123456');\n        -> 123456\nmysql> SELECT MICROSECOND('2019-12-31 23:59:59.000010');\n        -> 10"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_microsecond"], "Feature Type": ["Function"], "index": 146, "vector_txt": "146:Feature: MICROSECOND(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["MID(str,pos,len)"], "Description": ["Return a substring starting from the specified position", "\nMID(str,pos,len)\n", "\nMID(str,pos,len)\n          is a synonym for\n          SUBSTRING(str,pos,len).\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_mid"], "Feature Type": ["Function"], "index": 147, "vector_txt": "147:Feature: MID(str,pos,len)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["MIN([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the minimum value", "\nMIN([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the minimum value of\n            expr.\n            MIN() may take a string\n            argument; in such cases, it returns the minimum string\n            value. See Section\u00a010.3.1, \u201cHow MySQL Uses Indexes\u201d. The\n            DISTINCT keyword can be used to find the\n            minimum of the distinct values of\n            expr, however, this produces the\n            same result as omitting DISTINCT.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            MIN() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            For MIN(), MySQL currently\n            compares ENUM and\n            SET columns by their string\n            value rather than by the string's relative position in the\n            set. This differs from how ORDER BY\n            compares them.\n          "], "Examples": ["mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_min"], "Feature Type": ["Function"], "index": 148, "vector_txt": "148:Feature: MIN([DISTINCT]\n            expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MINUTE(time)"], "Description": ["Return the minute from the argument", "\nMINUTE(time)\n", "\n          Returns the minute for time, in the\n          range 0 to 59, or\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MINUTE('2008-02-03 10:05:03');\n        -> 5"], "Examples": ["mysql> SELECT MINUTE('2008-02-03 10:05:03');\n        -> 5"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_minute"], "Feature Type": ["Function"], "index": 149, "vector_txt": "149:Feature: MINUTE(time)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["MOD(N,M)"], "Description": ["Return the remainder", "\nMOD(N,M),\n            N\n            % M,\n            N\n            MOD M\n", "\n            Modulo operation. Returns the remainder of\n            N divided by\n            M. Returns\n            NULL if M or\n            N is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT MOD(234, 10);\n        -> 4\nmysql> SELECT 253 % 7;\n        -> 1\nmysql> SELECT MOD(29,9);\n        -> 2\nmysql> SELECT 29 MOD 9;\n        -> 2", "\n            This function is safe to use with\n            BIGINT values.\n          ", "\nMOD() also works on values\n            that have a fractional part and returns the exact remainder\n            after division:\n          ", "Press CTRL+C to copy mysql> SELECT MOD(34.5,3);\n        -> 1.5", "\nMOD(N,0)\n            returns NULL.\n          "], "Examples": ["mysql> SELECT MOD(234, 10);\n        -> 4\nmysql> SELECT 253 % 7;\n        -> 1\nmysql> SELECT MOD(29,9);\n        -> 2\nmysql> SELECT 29 MOD 9;\n        -> 2", "mysql> SELECT MOD(34.5,3);\n        -> 1.5"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_mod"], "Feature Type": ["Function"], "index": 150, "vector_txt": "150:Feature: MOD(N,M)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MONTH(date)"], "Description": ["Return the month from the date passed", "\nMONTH(date)\n", "\n          Returns the month for date, in the\n          range 1 to 12 for\n          January to December, or 0 for dates such as\n          '0000-00-00' or\n          '2008-00-00' that have a zero month part.\n          Returns NULL if\n          date is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MONTH('2008-02-03');\n        -> 2"], "Examples": ["mysql> SELECT MONTH('2008-02-03');\n        -> 2"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_month"], "Feature Type": ["Function"], "index": 151, "vector_txt": "151:Feature: MONTH(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MONTHNAME(date)"], "Description": ["Return the name of the month", "\nMONTHNAME(date)\n", "\n          Returns the full name of the month for\n          date. The language used for the\n          name is controlled by the value of the\n          lc_time_names system variable\n          (Section\u00a012.16, \u201cMySQL Server Locale Support\u201d). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MONTHNAME('2008-02-03');\n        -> 'February'"], "Examples": ["mysql> SELECT MONTHNAME('2008-02-03');\n        -> 'February'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_monthname"], "Feature Type": ["Function"], "index": 152, "vector_txt": "152:Feature: MONTHNAME(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MultiLineString(ls\n          [, ls] ...)"], "Description": ["Contruct MultiLineString from LineString values", "\nMultiLineString(ls\n          [, ls] ...)\n", "\n          Constructs a MultiLineString value using\n          LineString or WKB\n          LineString arguments.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_multilinestring"], "Feature Type": ["Function"], "index": 153, "vector_txt": "153:Feature: MultiLineString(ls\n          [, ls] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MultiPoint(pt\n          [, pt2] ...)"], "Description": ["Construct MultiPoint from Point values", "\nMultiPoint(pt\n          [, pt2] ...)\n", "\n          Constructs a MultiPoint value using\n          Point or WKB Point\n          arguments.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_multipoint"], "Feature Type": ["Function"], "index": 154, "vector_txt": "154:Feature: MultiPoint(pt\n          [, pt2] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["ADDTIME(expr1,expr2)"], "Description": ["Add time", "\nADDTIME(expr1,expr2)\n", "\nADDTIME() adds\n          expr2 to\n          expr1 and returns the result.\n          expr1 is a time or datetime\n          expression, and expr2 is a time\n          expression. Returns NULL if\n          expr1or\n          expr2 is NULL.\n        ", "\n          The return type of this function and of the\n          SUBTIME() function is\n          determined as follows:\n", "\n\n              If the first argument is a dynamic parameter (such as in a\n              prepared statement), the return type is\n              TIME.\n            \n              Otherwise, the resolved type of the function is derived\n              from the resolved type of the first argument.\n\n", "Press CTRL+C to copy mysql> SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n        -> '2008-01-02 01:01:01.000001'\nmysql> SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n        -> '03:00:01.999997'"], "Examples": ["mysql> SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n        -> '2008-01-02 01:01:01.000001'\nmysql> SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n        -> '03:00:01.999997'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_addtime"], "Feature Type": ["Function"], "index": 155, "vector_txt": "155:Feature: ADDTIME(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MultiPolygon(poly\n          [, poly] ...)"], "Description": ["Construct MultiPolygon from Polygon values", "\nMultiPolygon(poly\n          [, poly] ...)\n", "\n          Constructs a MultiPolygon value from a set\n          of Polygon or WKB\n          Polygon arguments.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_multipolygon"], "Feature Type": ["Function"], "index": 156, "vector_txt": "156:Feature: MultiPolygon(poly\n          [, poly] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["NAME_CONST(name,value)"], "Description": ["Cause the column to have the given name", "\nNAME_CONST(name,value)\n", "\n          Returns the given value. When used to produce a result set\n          column, NAME_CONST() causes the\n          column to have the given name. The arguments should be\n          constants.\n        ", "Press CTRL+C to copy mysql> SELECT NAME_CONST('myname', 14);\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+", "\n          This function is for internal use only. The server uses it\n          when writing statements from stored programs that contain\n          references to local program variables, as described in\n          Section\u00a027.7, \u201cStored Program Binary Logging\u201d. You might see this\n          function in the output from mysqlbinlog.\n        ", "\n          For your applications, you can obtain exactly the same result\n          as in the example just shown by using simple aliasing, like\n          this:\n        ", "Press CTRL+C to copy mysql> SELECT 14 AS myname;\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+\n1 row in set (0.00 sec)", "\n          See Section\u00a015.2.13, \u201cSELECT Statement\u201d, for more information about\n          column aliases.\n        "], "Examples": ["mysql> SELECT NAME_CONST('myname', 14);\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+", "mysql> SELECT 14 AS myname;\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_name-const"], "Feature Type": ["Function"], "index": 157, "vector_txt": "157:Feature: NAME_CONST(name,value)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4 Operators", "14.4.2 Comparison Functions and Operators"], "Feature": ["expr\n            NOT IN (value,...)"], "Description": ["Whether a value is not within a set of values", "\nexpr\n            NOT IN (value,...)\n", "\n            This is the same as NOT\n            (expr IN\n            (value,...)).\n          "], "Examples": [], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_not-in"], "Feature Type": ["Function"], "index": 158, "vector_txt": "158:Feature: expr\n            NOT IN (value,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["NOW([fsp])"], "Description": ["Return the current date and time", "\nNOW([fsp])\n", "\n          Returns the current date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context. The\n          value is expressed in the session time zone.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT NOW();\n        -> '2007-12-15 23:50:26'\nmysql> SELECT NOW() + 0;\n        -> 20071215235026.000000", "\nNOW() returns a constant time\n          that indicates the time at which the statement began to\n          execute. (Within a stored function or trigger,\n          NOW() returns the time at which\n          the function or triggering statement began to execute.) This\n          differs from the behavior for\n          SYSDATE(), which returns the\n          exact time at which it executes.\n        ", "Press CTRL+C to copy mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+", "\n          In addition, the SET TIMESTAMP statement\n          affects the value returned by\n          NOW() but not by\n          SYSDATE(). This means that\n          timestamp settings in the binary log have no effect on\n          invocations of SYSDATE().\n          Setting the timestamp to a nonzero value causes each\n          subsequent invocation of NOW()\n          to return that value. Setting the timestamp to zero cancels\n          this effect so that NOW() once\n          again returns the current date and time.\n        ", "\n          See the description for\n          SYSDATE() for additional\n          information about the differences between the two functions.\n        "], "Examples": ["mysql> SELECT NOW();\n        -> '2007-12-15 23:50:26'\nmysql> SELECT NOW() + 0;\n        -> 20071215235026.000000", "mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_now"], "Feature Type": ["Function"], "index": 159, "vector_txt": "159:Feature: NOW([fsp])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["NTH_VALUE(expr,\n            N)"], "Description": ["Value of argument from N-th row of window frame", "\nNTH_VALUE(expr,\n            N)\n            [from_first_last]\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the N-th row of the window frame.\n            If there is no such row, the return value is\n            NULL.\n          ", "\nN must be a literal positive\n            integer.\n          ", "\nfrom_first_last is part of the\n            SQL standard, but the MySQL implementation permits only\n            FROM FIRST (which is also the default).\n            This means that calculations begin at the first row of the\n            window. FROM LAST is parsed, but produces\n            an error. To obtain the same effect as FROM\n            LAST (begin calculations at the last row of the\n            window), use ORDER BY to sort in reverse\n            order.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            For an example, see the\n            FIRST_VALUE() function\n            description.\n          ", "\n            You cannot use NULL for the row argument\n            of this function.\n          "], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_nth-value"], "Feature Type": ["Function"], "index": 160, "vector_txt": "160:Feature: NTH_VALUE(expr,\n            N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["NTILE(N)"], "Description": ["Bucket number of current row within its partition.", "\nNTILE(N)\nover_clause\n", "\n            Divides a partition into N groups\n            (buckets), assigns each row in the partition its bucket\n            number, and returns the bucket number of the current row\n            within its partition. For example, if\n            N is 4,\n            NTILE() divides rows into four buckets.\n            If N is 100,\n            NTILE() divides rows into 100 buckets.\n          ", "\nN must be a literal positive\n            integer. Bucket number return values range from 1 to\n            N.\n          ", "\nN cannot be\n            NULL, and must be an integer in the range\n            0 to\n            263,\n            inclusive, in any of the following forms:\n", "\n\n                an unsigned integer constant literal\n              \n                a positional parameter marker (?)\n              \n                a user-defined variable\n              \n                a local variable in a stored routine\n\n", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            The following query shows, for the set of values in the\n            val column, the percentile values\n            resulting from dividing the rows into two or four groups.\n            For reference, the query also displays row numbers using\n            ROW_NUMBER():\n          ", "Press CTRL+C to copy mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         NTILE(2)     OVER w AS 'ntile2',\n         NTILE(4)     OVER w AS 'ntile4'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------+--------+\n| val  | row_number | ntile2 | ntile4 |\n+------+------------+--------+--------+\n|    1 |          1 |      1 |      1 |\n|    1 |          2 |      1 |      1 |\n|    2 |          3 |      1 |      1 |\n|    3 |          4 |      1 |      2 |\n|    3 |          5 |      1 |      2 |\n|    3 |          6 |      2 |      3 |\n|    4 |          7 |      2 |      3 |\n|    4 |          8 |      2 |      4 |\n|    5 |          9 |      2 |      4 |\n+------+------------+--------+--------+", "\n            The construct NTILE(NULL) is not\n            permitted.\n          "], "Examples": ["mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         NTILE(2)     OVER w AS 'ntile2',\n         NTILE(4)     OVER w AS 'ntile4'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------+--------+\n| val  | row_number | ntile2 | ntile4 |\n+------+------------+--------+--------+\n|    1 |          1 |      1 |      1 |\n|    1 |          2 |      1 |      1 |\n|    2 |          3 |      1 |      1 |\n|    3 |          4 |      1 |      2 |\n|    3 |          5 |      1 |      2 |\n|    3 |          6 |      2 |      3 |\n|    4 |          7 |      2 |      3 |\n|    4 |          8 |      2 |      4 |\n|    5 |          9 |      2 |      4 |\n+------+------------+--------+--------+"], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_ntile"], "Feature Type": ["Function"], "index": 161, "vector_txt": "161:Feature: NTILE(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.5 Flow Control Functions"], "Feature": ["NULLIF(expr1,expr2)"], "Description": ["Return NULL if expr1 = expr2", "\nNULLIF(expr1,expr2)\n", "\n          Returns NULL if\n          expr1 =\n          expr2 is true, otherwise\n          returns expr1. This is the same as\n          CASE WHEN\n          expr1 =\n          expr2 THEN NULL ELSE\n          expr1 END.\n        ", "\n          The return value has the same type as the first argument.\n        ", "Press CTRL+C to copy mysql> SELECT NULLIF(1,1);\n        -> NULL\nmysql> SELECT NULLIF(1,2);\n        -> 1", "\n\nNote\n\n\n            MySQL evaluates expr1 twice if\n            the arguments are not equal.\n\n"], "Examples": ["mysql> SELECT NULLIF(1,1);\n        -> NULL\nmysql> SELECT NULLIF(1,2);\n        -> 1"], "Category": ["Built-In Functions", "Flow Control Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html#function_nullif"], "Feature Type": ["Function"], "index": 162, "vector_txt": "162:Feature: NULLIF(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["OCT(N)"], "Description": ["Return a string containing octal representation of a number", "\nOCT(N)\n", "\n          Returns a string representation of the octal value of\n          N, where\n          N is a longlong\n          (BIGINT) number. This is\n          equivalent to\n          CONV(N,10,8).\n          Returns NULL if\n          N is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT OCT(12);\n        -> '14'"], "Examples": ["mysql> SELECT OCT(12);\n        -> '14'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_oct"], "Feature Type": ["Function"], "index": 163, "vector_txt": "163:Feature: OCT(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["OCTET_LENGTH(str)"], "Description": ["Synonym for LENGTH()", "\nOCTET_LENGTH(str)\n", "\nOCTET_LENGTH() is a synonym for\n          LENGTH().\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_octet-length"], "Feature Type": ["Function"], "index": 164, "vector_txt": "164:Feature: OCTET_LENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["ORD(str)"], "Description": ["Return character code for leftmost character of the argument", "\nORD(str)\n", "\n          If the leftmost character of the string\n          str is a multibyte character,\n          returns the code for that character, calculated from the\n          numeric values of its constituent bytes using this formula:\n        ", "Press CTRL+C to copy   (1st byte code)\n+ (2nd byte code * 256)\n+ (3rd byte code * 256^2) ...", "\n          If the leftmost character is not a multibyte character,\n          ORD() returns the same value as\n          the ASCII() function. The\n          function returns NULL if\n          str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT ORD('2');\n        -> 50"], "Examples": ["mysql> SELECT ORD('2');\n        -> 50"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ord"], "Feature Type": ["Function"], "index": 165, "vector_txt": "165:Feature: ORD(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["AES_DECRYPT(crypt_str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])"], "Description": ["Decrypt using AES", "\nAES_DECRYPT(crypt_str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n", "\n          This function decrypts data using the official AES (Advanced\n          Encryption Standard) algorithm. For more information, see the\n          description of AES_ENCRYPT().\n        ", "\n          Statements that use\n          AES_DECRYPT() are unsafe for\n          statement-based replication.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_aes-decrypt"], "Feature Type": ["Function"], "index": 166, "vector_txt": "166:Feature: AES_DECRYPT(crypt_str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["PERCENT_RANK()"], "Description": ["Percentage rank value", "\nPERCENT_RANK()\nover_clause\n", "\n            Returns the percentage of partition values less than the\n            value in the current row, excluding the highest value.\n            Return values range from 0 to 1 and represent the row\n            relative rank, calculated as the result of this formula,\n            where rank is the row rank and\n            rows is the number of partition\n            rows:\n          ", "Press CTRL+C to copy (rank - 1) / (rows - 1)", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            For an example, see the\n            CUME_DIST() function\n            description.\n          "], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_percent-rank"], "Feature Type": ["Function"], "index": 167, "vector_txt": "167:Feature: PERCENT_RANK()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["PERIOD_ADD(P,N)"], "Description": ["Add a period to a year-month", "\nPERIOD_ADD(P,N)\n", "\n          Adds N months to period\n          P (in the format\n          YYMM or\n          YYYYMM). Returns a value in the\n          format YYYYMM.\n", "\n\nNote\n\n\n            The period argument P is\n            not a date value.\n\n", "\n          This function returns NULL if\n          P or N\n          is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT PERIOD_ADD(200801,2);\n        -> 200803"], "Examples": ["mysql> SELECT PERIOD_ADD(200801,2);\n        -> 200803"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_period-add"], "Feature Type": ["Function"], "index": 168, "vector_txt": "168:Feature: PERIOD_ADD(P,N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["PERIOD_DIFF(P1,P2)"], "Description": ["Return the number of months between periods", "\nPERIOD_DIFF(P1,P2)\n", "\n          Returns the number of months between periods\n          P1 and\n          P2. P1\n          and P2 should be in the format\n          YYMM or\n          YYYYMM. Note that the period\n          arguments P1 and\n          P2 are not\n          date values.\n        ", "\n          This function returns NULL if\n          P1 or P2\n          is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT PERIOD_DIFF(200802,200703);\n        -> 11"], "Examples": ["mysql> SELECT PERIOD_DIFF(200802,200703);\n        -> 11"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_period-diff"], "Feature Type": ["Function"], "index": 169, "vector_txt": "169:Feature: PERIOD_DIFF(P1,P2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["PI()"], "Description": ["Return the value of pi", "\nPI()\n", "\n            Returns the value of \u03c0 (pi). The default number of\n            decimal places displayed is seven, but MySQL uses the full\n            double-precision value internally.\n          ", "\n            Because the return value of this function is a\n            double-precision value, its exact representation may vary\n            between platforms or implementations. This also applies to\n            any expressions making use of PI(). See\n            Section\u00a013.1.4, \u201cFloating-Point Types (Approximate Value) - FLOAT, DOUBLE\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT PI();\n        -> 3.141593\nmysql> SELECT PI()+0.000000000000000000;\n        -> 3.141592653589793000"], "Examples": ["mysql> SELECT PI();\n        -> 3.141593\nmysql> SELECT PI()+0.000000000000000000;\n        -> 3.141592653589793000"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_pi"], "Feature Type": ["Function"], "index": 170, "vector_txt": "170:Feature: PI()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["Point(x,\n          y)"], "Description": ["Construct Point from coordinates", "\nPoint(x,\n          y)\n", "\n          Constructs a Point using its coordinates.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_point"], "Feature Type": ["Function"], "index": 171, "vector_txt": "171:Feature: Point(x,\n          y)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["Polygon(ls [,\n          ls] ...)"], "Description": ["Construct Polygon from LineString arguments", "\nPolygon(ls [,\n          ls] ...)\n", "\n          Constructs a Polygon value from a number of\n          LineString or WKB\n          LineString arguments. If any argument does\n          not represent a LinearRing (that is, not a\n          closed and simple LineString), the return\n          value is NULL.\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_polygon"], "Feature Type": ["Function"], "index": 172, "vector_txt": "172:Feature: Polygon(ls [,\n          ls] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["POSITION(substr\n          IN str)"], "Description": ["Synonym for LOCATE()", "\nPOSITION(substr\n          IN str)\n", "\nPOSITION(substr\n          IN str) is a synonym for\n          LOCATE(substr,str).\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_position"], "Feature Type": ["Function"], "index": 173, "vector_txt": "173:Feature: POSITION(substr\n          IN str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["POW(X,Y)"], "Description": ["Return the argument raised to the specified power", "\nPOW(X,Y)\n", "\n            Returns the value of X raised to\n            the power of Y. Returns\n            NULL if X or\n            Y is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT POW(2,2);\n        -> 4\nmysql> SELECT POW(2,-2);\n        -> 0.25"], "Examples": ["mysql> SELECT POW(2,2);\n        -> 4\nmysql> SELECT POW(2,-2);\n        -> 0.25"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_pow"], "Feature Type": ["Function"], "index": 174, "vector_txt": "174:Feature: POW(X,Y)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["POWER(X,Y)"], "Description": ["Return the argument raised to the specified power", "\nPOWER(X,Y)\n", "\n            This is a synonym for POW().\n          "], "Examples": [], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_power"], "Feature Type": ["Function"], "index": 175, "vector_txt": "175:Feature: POWER(X,Y)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.21 Performance Schema Functions"], "Feature": ["PS_CURRENT_THREAD_ID()"], "Description": ["Performance Schema thread ID for current thread", "\nPS_CURRENT_THREAD_ID()\n", "\n          Returns a BIGINT UNSIGNED value\n          representing the Performance Schema thread ID assigned to the\n          current connection.\n        ", "\n          The thread ID return value is a value of the type given in the\n          THREAD_ID column of Performance Schema\n          tables.\n        ", "\n          Performance Schema configuration affects\n          PS_CURRENT_THREAD_ID() the same\n          way as for PS_THREAD_ID(). For\n          details, see the description of that function.\n        ", "Press CTRL+C to copy mysql> SELECT PS_CURRENT_THREAD_ID();\n+------------------------+\n| PS_CURRENT_THREAD_ID() |\n+------------------------+\n|                     52 |\n+------------------------+\nmysql> SELECT PS_THREAD_ID(CONNECTION_ID());\n+-------------------------------+\n| PS_THREAD_ID(CONNECTION_ID()) |\n+-------------------------------+\n|                            52 |\n+-------------------------------+", "\nPS_CURRENT_THREAD_ID() may be\n          used as a shortcut for invoking the sys\n          schema ps_thread_id() function\n          with an argument of NULL or\n          CONNECTION_ID().\n        "], "Examples": ["mysql> SELECT PS_CURRENT_THREAD_ID();\n+------------------------+\n| PS_CURRENT_THREAD_ID() |\n+------------------------+\n|                     52 |\n+------------------------+\nmysql> SELECT PS_THREAD_ID(CONNECTION_ID());\n+-------------------------------+\n| PS_THREAD_ID(CONNECTION_ID()) |\n+-------------------------------+\n|                            52 |\n+-------------------------------+"], "Category": ["Built-In Functions", "Performance Schema Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_ps-current-thread-id"], "Feature Type": ["Function"], "index": 176, "vector_txt": "176:Feature: PS_CURRENT_THREAD_ID()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["AES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])"], "Description": ["Encrypt using AES", "\nAES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n", "\nAES_ENCRYPT() and\n          AES_DECRYPT() implement\n          encryption and decryption of data using the official AES\n          (Advanced Encryption Standard) algorithm, previously known as\n          \u201cRijndael.\u201d The AES standard permits various key\n          lengths. By default these functions implement AES with a\n          128-bit key length. Key lengths of 196 or 256 bits can be\n          used, as described later. The key length is a trade off\n          between performance and security.\n        ", "\nAES_ENCRYPT() encrypts the\n          string str using the key string\n          key_str, and returns a binary\n          string containing the encrypted output.\n          AES_DECRYPT() decrypts the\n          encrypted string crypt_str using\n          the key string key_str, and returns\n          the original (binary) string in hexadecimal format. (To obtain\n          the string as plaintext, cast the result to\n          CHAR. Alternatively, start the\n          mysql client with\n          --skip-binary-as-hex\n          to cause all binary values to be displayed as text.) If either\n          function argument is NULL, the function\n          returns NULL. If\n          AES_DECRYPT() detects invalid\n          data or incorrect padding, it returns NULL.\n          However, it is possible for\n          AES_DECRYPT() to return a\n          non-NULL value (possibly garbage) if the\n          input data or the key is invalid.\n        ", "\n          These functions support the use of a key derivation function\n          (KDF) to create a cryptographically strong secret key from the\n          information passed in key_str. The\n          derived key is used to encrypt and decrypt the data, and it\n          remains in the MySQL Server instance and is not accessible to\n          users. Using a KDF is highly recommended, as it provides\n          better security than specifying your own premade key or\n          deriving it by a simpler method as you use the function. The\n          functions support HKDF (available from OpenSSL 1.1.0), for\n          which you can specify an optional salt and context-specific\n          information to include in the keying material, and PBKDF2\n          (available from OpenSSL 1.0.2), for which you can specify an\n          optional salt and set the number of iterations used to produce\n          the key.\n        ", "\nAES_ENCRYPT() and\n          AES_DECRYPT() permit control of\n          the block encryption mode. The\n          block_encryption_mode system\n          variable controls the mode for block-based encryption\n          algorithms. Its default value is\n          aes-128-ecb, which signifies encryption\n          using a key length of 128 bits and ECB mode. For a description\n          of the permitted values of this variable, see\n          Section\u00a07.1.8, \u201cServer System Variables\u201d. The optional\n          init_vector argument is used to\n          provide an initialization vector for block encryption modes\n          that require it.\n        ", "\n          Statements that use\n          AES_ENCRYPT() or\n          AES_DECRYPT() are unsafe for\n          statement-based replication.\n        ", "\n          If AES_ENCRYPT() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        ", "\n          The arguments for the\n          AES_ENCRYPT() and\n          AES_DECRYPT() functions are as\n          follows:\n", "\n\nstr\n\n                The string for\n                AES_ENCRYPT() to encrypt\n                using the key string key_str,\n                or the key derived from it by the specified KDF. The\n                string can be any length. Padding is automatically added\n                to str so it is a multiple of\n                a block as required by block-based algorithms such as\n                AES. This padding is automatically removed by the\n                AES_DECRYPT() function.\n              \ncrypt_str\n\n                The encrypted string for\n                AES_DECRYPT() to decrypt\n                using the key string key_str,\n                or the key derived from it by the specified KDF. The\n                string can be any length. The length of\n                crypt_str can be calculated\n                from the length of the original string using this\n                formula:\n              Press CTRL+C to copy 16 * (trunc(string_length / 16) + 1)\nkey_str\n\n                The encryption key, or the input keying material that is\n                used as the basis for deriving a key using a key\n                derivation function (KDF). For the same instance of\n                data, use the same value of\n                key_str for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n              \n                If you are using a KDF,\n                key_str can be any arbitrary\n                information such as a password or passphrase. In the\n                further arguments for the function, you specify the KDF\n                name, then add further options to increase the security\n                as appropriate for the KDF.\n              \n                When you use a KDF, the function creates a\n                cryptographically strong secret key from the information\n                passed in key_str and any\n                salt or additional information that you provide in the\n                other arguments. The derived key is used to encrypt and\n                decrypt the data, and it remains in the MySQL Server\n                instance and is not accessible to users. Using a KDF is\n                highly recommended, as it provides better security than\n                specifying your own premade key or deriving it by a\n                simpler method as you use the function.\n              \n                If you are not using a KDF, for a key length of 128\n                bits, the most secure way to pass a key to the\n                key_str argument is to create\n                a truly random 128-bit value and pass it as a binary\n                value. For example:\n              Press CTRL+C to copy INSERT INTO t\nVALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));\n                A passphrase can be used to generate an AES key by\n                hashing the passphrase. For example:\n              Press CTRL+C to copy INSERT INTO t\nVALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));\n                If you exceed the maximum key length of 128 bits, a\n                warning is returned. If you are not using a KDF, do not\n                pass a password or passphrase directly to\n                key_str, hash it first.\n                Previous versions of this documentation suggested the\n                former approach, but it is no longer recommended as the\n                examples shown here are more secure.\n              \ninit_vector\n\n                An initialization vector, for block encryption modes\n                that require it. The\n                block_encryption_mode\n                system variable controls the mode. For the same instance\n                of data, use the same value of\n                init_vector for encryption\n                with AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n\n\n\nNote\n\n\n                  If you are using a KDF, you must specify an\n                  initialization vector or a null string for this\n                  argument, in order to access the later arguments to\n                  define the KDF.\n\n\n\n                For modes that require an initialization vector, it must\n                be 16 bytes or longer (bytes in excess of 16 are\n                ignored). An error occurs if\n                init_vector is missing. For\n                modes that do not require an initialization vector, it\n                is ignored and a warning is generated if\n                init_vector is specified,\n                unless you are using a KDF.\n              \n                The default value for the\n                block_encryption_mode\n                system variable is aes-128-ecb, or\n                ECB mode, which does not require an initialization\n                vector. The alternative permitted block encryption modes\n                CBC, CFB1, CFB8, CFB128, and OFB all require an\n                initialization vector.\n              \n                A random string of bytes to use for the initialization\n                vector can be produced by calling\n                RANDOM_BYTES(16).\n              \nkdf_name\n\n                The name of the key derivation function (KDF) to create\n                a key from the input keying material passed in\n                key_str, and other arguments\n                as appropriate for the KDF. Optional.\n              \n                For the same instance of data, use the same value of\n                kdf_name for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT(). When you\n                specify kdf_name, you must\n                specify init_vector, using\n                either a valid initialization vector, or a null string\n                if the encryption mode does not require an\n                initialization vector.\n              \n                The following values are supported:\n\n\n\nhkdf\n\n                      HKDF, which is available from OpenSSL 1.1.0. HKDF\n                      extracts a pseudorandom key from the keying\n                      material then expands it into additional keys.\n                      With HKDF, you can specify an optional salt\n                      (salt) and\n                      context-specific information such as application\n                      details (info) to\n                      include in the keying material.\n                    \npbkdf2_hmac\n\n                      PBKDF2, which is available from OpenSSL 1.0.2.\n                      PBKDF2 applies a pseudorandom function to the\n                      keying material, and repeats this process a large\n                      number of times to produce the key. With PBKDF2,\n                      you can specify an optional salt\n                      (salt) to include in\n                      the keying material, and set the number of\n                      iterations used to produce the key\n                      (iterations).\n\n\n\n                In this example, HKDF is specified as the key derivation\n                function, and a salt and context information are\n                provided. The argument for the initialization vector is\n                included but is the empty string:\n              Press CTRL+C to copy SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');\n                In this example, PBKDF2 is specified as the key\n                derivation function, a salt is provided, and the number\n                of iterations is doubled from the recommended minimum:\n              Press CTRL+C to copy SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');\nsalt\n\n                A salt to be passed to the key derivation function\n                (KDF). Optional. Both HKDF and PBKDF2 can use salts, and\n                their use is recommended to help prevent attacks based\n                on dictionaries of common passwords or rainbow tables.\n              \n                A salt consists of random data, which for security must\n                be different for each encryption operation. A random\n                string of bytes to use for the salt can be produced by\n                calling RANDOM_BYTES().\n                This example produces a 64-bit salt:\n              Press CTRL+C to copy SET @salt = RANDOM_BYTES(8);\n                For the same instance of data, use the same value of\n                salt for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT(). The salt\n                can safely be stored along with the encrypted data.\n              \ninfo\n\n                Context-specific information for HKDF to include in the\n                keying material, such as information about the\n                application. Optional; available when you specify\n                hkdf as the KDF name. HKDF adds this\n                information to the keying material specified in\n                key_str and the salt\n                specified in salt to produce\n                the key.\n              \n                For the same instance of data, use the same value of\n                info for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n              \niterations\n\n                The iteration count for PBKDF2 to use when producing the\n                key. Optional; available when you specify\n                pbkdf2_hmac as the KDF name. A higher\n                count gives greater resistance to brute-force attacks\n                because it has a greater computational cost for the\n                attacker, but the same is necessarily true for the key\n                derivation process. The default if you do not specify\n                this argument is 1000, which is the minimum recommended\n                by the OpenSSL standard.\n              \n                For the same instance of data, use the same value of\n                iterations for encryption\n                with AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n\n", "Press CTRL+C to copy mysql> SET block_encryption_mode = 'aes-256-cbc';\nmysql> SET @key_str = SHA2('My secret passphrase',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nmysql> SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);\n+-------------------------------------------------------------+\n| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |\n+-------------------------------------------------------------+\n| text                                                        |\n+-------------------------------------------------------------+"], "Examples": ["INSERT INTO t\nVALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));", "INSERT INTO t\nVALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));", "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');", "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');", "SET @salt = RANDOM_BYTES(8);", "mysql> SET block_encryption_mode = 'aes-256-cbc';\nmysql> SET @key_str = SHA2('My secret passphrase',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nmysql> SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);\n+-------------------------------------------------------------+\n| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |\n+-------------------------------------------------------------+\n| text                                                        |\n+-------------------------------------------------------------+"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_aes-encrypt"], "Feature Type": ["Function"], "index": 177, "vector_txt": "177:Feature: AES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.21 Performance Schema Functions"], "Feature": ["PS_THREAD_ID(connection_id)"], "Description": ["Performance Schema thread ID for given thread", "\nPS_THREAD_ID(connection_id)\n", "\n          Given a connection ID, returns a BIGINT\n          UNSIGNED value representing the Performance Schema\n          thread ID assigned to the connection ID, or\n          NULL if no thread ID exists for the\n          connection ID. The latter can occur for threads that are not\n          instrumented, or if connection_id\n          is NULL.\n        ", "\n          The connection ID argument is a value of the type given in the\n          PROCESSLIST_ID column of the Performance\n          Schema threads table or the\n          Id column of SHOW\n          PROCESSLIST output.\n        ", "\n          The thread ID return value is a value of the type given in the\n          THREAD_ID column of Performance Schema\n          tables.\n        ", "\n          Performance Schema configuration affects\n          PS_THREAD_ID() operation as\n          follows. (These remarks also apply to\n          PS_CURRENT_THREAD_ID().)\n", "\n\n              Disabling the thread_instrumentation\n              consumer disables statistics from being collected and\n              aggregated at the thread level, but has no effect on\n              PS_THREAD_ID().\n            \n              If\n              performance_schema_max_thread_instances\n              is not 0, the Performance Schema allocates memory for\n              thread statistics and assigns an internal ID to each\n              thread for which instance memory is available. If there\n              are threads for which instance memory is not available,\n              PS_THREAD_ID() returns\n              NULL; in this case,\n              Performance_schema_thread_instances_lost\n              is nonzero.\n            \n              If\n              performance_schema_max_thread_instances\n              is 0, the Performance Schema allocates no thread memory\n              and PS_THREAD_ID() returns\n              NULL.\n            \n              If the Performance Schema itself is disabled,\n              PS_THREAD_ID() produces an\n              error.\n\n", "Press CTRL+C to copy mysql> SELECT PS_THREAD_ID(6);\n+-----------------+\n| PS_THREAD_ID(6) |\n+-----------------+\n|              45 |\n+-----------------+", "\nPS_THREAD_ID() may be used\n          instead of the sys schema\n          ps_thread_id() function, keeping\n          in mind this difference:\n", "\n\n              With an argument of NULL,\n              sys.ps_thread_id() returns\n              the thread ID for the current connection, whereas\n              PS_THREAD_ID() returns\n              NULL. To obtain the current connection\n              thread ID, use\n              PS_CURRENT_THREAD_ID()\n              instead.\n\n"], "Examples": ["mysql> SELECT PS_THREAD_ID(6);\n+-----------------+\n| PS_THREAD_ID(6) |\n+-----------------+\n|              45 |\n+-----------------+"], "Category": ["Built-In Functions", "Performance Schema Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_ps-thread-id"], "Feature Type": ["Function"], "index": 178, "vector_txt": "178:Feature: PS_THREAD_ID(connection_id)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["QUARTER(date)"], "Description": ["Return the quarter from a date argument", "\nQUARTER(date)\n", "\n          Returns the quarter of the year for\n          date, in the range\n          1 to 4, or\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT QUARTER('2008-04-01');\n        -> 2"], "Examples": ["mysql> SELECT QUARTER('2008-04-01');\n        -> 2"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_quarter"], "Feature Type": ["Function"], "index": 179, "vector_txt": "179:Feature: QUARTER(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["QUOTE(str)"], "Description": ["Escape the argument for use in an SQL statement", "\nQUOTE(str)\n", "\n          Quotes a string to produce a result that can be used as a\n          properly escaped data value in an SQL statement. The string is\n          returned enclosed by single quotation marks and with each\n          instance of backslash (\\), single quote\n          ('), ASCII NUL, and\n          Control+Z preceded by a backslash. If the argument is\n          NULL, the return value is the word\n          \u201cNULL\u201d without enclosing single quotation marks.\n        ", "Press CTRL+C to copy mysql> SELECT QUOTE('Don\\'t!');\n        -> 'Don\\'t!'\nmysql> SELECT QUOTE(NULL);\n        -> NULL", "\n          For comparison, see the quoting rules for literal strings and\n          within the C API in Section\u00a011.1.1, \u201cString Literals\u201d, and\n          mysql_real_escape_string_quote().\n        "], "Examples": ["mysql> SELECT QUOTE('Don\\'t!');\n        -> 'Don\\'t!'\nmysql> SELECT QUOTE(NULL);\n        -> NULL"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_quote"], "Feature Type": ["Function"], "index": 180, "vector_txt": "180:Feature: QUOTE(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["RADIANS(X)"], "Description": ["Return argument converted to radians", "\nRADIANS(X)\n", "\n            Returns the argument X, converted\n            from degrees to radians. (Note that \u03c0 radians equals 180\n            degrees.) Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT RADIANS(90);\n        -> 1.5707963267949"], "Examples": ["mysql> SELECT RADIANS(90);\n        -> 1.5707963267949"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_radians"], "Feature Type": ["Function"], "index": 181, "vector_txt": "181:Feature: RADIANS(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["RAND([N])"], "Description": ["Return a random floating-point value", "\nRAND([N])\n", "\n            Returns a random floating-point value\n            v in the range\n            0 <= v <\n            1.0. To obtain a random integer\n            R in the range\n            i <=\n            R <\n            j, use the expression\n            FLOOR(i\n            + RAND() * (j\n            \u2212 i)).\n            For example, to obtain a random integer in the range the\n            range 7 <=\n            R < 12, use\n            the following statement:\n          ", "Press CTRL+C to copy SELECT FLOOR(7 + (RAND() * 5));", "\n            If an integer argument N is\n            specified, it is used as the seed value:\n", "\n\n                With a constant initializer argument, the seed is\n                initialized once when the statement is prepared, prior\n                to execution.\n              \n                With a nonconstant initializer argument (such as a\n                column name), the seed is initialized with the value for\n                each invocation of\n                RAND().\n\n", "\n            One implication of this behavior is that for equal argument\n            values,\n            RAND(N)\n            returns the same value each time, and thus produces a\n            repeatable sequence of column values. In the following\n            example, the sequence of values produced by\n            RAND(3) is the same both places it\n            occurs.\n          ", "Press CTRL+C to copy mysql> CREATE TABLE t (i INT);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.61914388706828 |\n|    2 | 0.93845168309142 |\n|    3 | 0.83482678498591 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.35877890638893 |\n|    2 | 0.28941420772058 |\n|    3 | 0.37073435016976 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.01 sec)", "\nRAND() in a\n            WHERE clause is evaluated for every row\n            (when selecting from one table) or combination of rows (when\n            selecting from a multiple-table join). Thus, for optimizer\n            purposes, RAND() is not a\n            constant value and cannot be used for index optimizations.\n            For more information, see\n            Section\u00a010.2.1.20, \u201cFunction Call Optimization\u201d.\n          ", "\n            Use of a column with RAND()\n            values in an ORDER BY or GROUP\n            BY clause may yield unexpected results because for\n            either clause a RAND()\n            expression can be evaluated multiple times for the same row,\n            each time returning a different result. If the goal is to\n            retrieve rows in random order, you can use a statement like\n            this:\n          ", "Press CTRL+C to copy SELECT * FROM tbl_name ORDER BY RAND();", "\n            To select a random sample from a set of rows, combine\n            ORDER BY RAND() with\n            LIMIT:\n          ", "Press CTRL+C to copy SELECT * FROM table1, table2 WHERE a=b AND c<d ORDER BY RAND() LIMIT 1000;", "\nRAND() is not meant to be a\n            perfect random generator. It is a fast way to generate\n            random numbers on demand that is portable between platforms\n            for the same MySQL version.\n          ", "\n            This function is unsafe for statement-based replication. A\n            warning is logged if you use this function when\n            binlog_format is set to\n            STATEMENT.\n          "], "Examples": ["SELECT FLOOR(7 + (RAND() * 5));", "mysql> CREATE TABLE t (i INT);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.61914388706828 |\n|    2 | 0.93845168309142 |\n|    3 | 0.83482678498591 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.35877890638893 |\n|    2 | 0.28941420772058 |\n|    3 | 0.37073435016976 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.01 sec)", "SELECT * FROM tbl_name ORDER BY RAND();", "SELECT * FROM table1, table2 WHERE a=b AND c<d ORDER BY RAND() LIMIT 1000;"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_rand"], "Feature Type": ["Function"], "index": 182, "vector_txt": "182:Feature: RAND([N])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["RANDOM_BYTES(len)"], "Description": ["Return a random byte vector", "\nRANDOM_BYTES(len)\n", "\n          This function returns a binary string of\n          len random bytes generated using\n          the random number generator of the SSL library. Permitted\n          values of len range from 1 to 1024.\n          For values outside that range, an error occurs. Returns\n          NULL if len is\n          NULL.\n        ", "\nRANDOM_BYTES() can be used to\n          provide the initialization vector for the\n          AES_DECRYPT() and\n          AES_ENCRYPT() functions. For\n          use in that context, len must be at\n          least 16. Larger values are permitted, but bytes in excess of\n          16 are ignored.\n        ", "\nRANDOM_BYTES() generates a\n          random value, which makes its result nondeterministic.\n          Consequently, statements that use this function are unsafe for\n          statement-based replication.\n        ", "\n          If RANDOM_BYTES() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_random-bytes"], "Feature Type": ["Function"], "index": 183, "vector_txt": "183:Feature: RANDOM_BYTES(len)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["RANK()"], "Description": ["Rank of current row within its partition, with gaps", "\nRANK()\nover_clause\n", "\n            Returns the rank of the current row within its partition,\n            with gaps. Peers are considered ties and receive the same\n            rank. This function does not assign consecutive ranks to\n            peer groups if groups of size greater than one exist; the\n            result is noncontiguous rank numbers.\n          ", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            The following query shows the difference between\n            RANK(), which produces ranks\n            with gaps, and DENSE_RANK(),\n            which produces ranks without gaps. The query shows rank\n            values for each member of a set of values in the\n            val column, which contains some\n            duplicates. RANK() assigns\n            peers (the duplicates) the same rank value, and the next\n            greater value has a rank higher by the number of peers minus\n            one. DENSE_RANK() also\n            assigns peers the same rank value, but the next higher value\n            has a rank one greater. For reference, the query also\n            displays row numbers using\n            ROW_NUMBER():\n          ", "Press CTRL+C to copy mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         RANK()       OVER w AS 'rank',\n         DENSE_RANK() OVER w AS 'dense_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+------+------------+\n| val  | row_number | rank | dense_rank |\n+------+------------+------+------------+\n|    1 |          1 |    1 |          1 |\n|    1 |          2 |    1 |          1 |\n|    2 |          3 |    3 |          2 |\n|    3 |          4 |    4 |          3 |\n|    3 |          5 |    4 |          3 |\n|    3 |          6 |    4 |          3 |\n|    4 |          7 |    7 |          4 |\n|    4 |          8 |    7 |          4 |\n|    5 |          9 |    9 |          5 |\n+------+------------+------+------------+"], "Examples": ["mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         RANK()       OVER w AS 'rank',\n         DENSE_RANK() OVER w AS 'dense_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+------+------------+\n| val  | row_number | rank | dense_rank |\n+------+------------+------+------------+\n|    1 |          1 |    1 |          1 |\n|    1 |          2 |    1 |          1 |\n|    2 |          3 |    3 |          2 |\n|    3 |          4 |    4 |          3 |\n|    3 |          5 |    4 |          3 |\n|    3 |          6 |    4 |          3 |\n|    4 |          7 |    7 |          4 |\n|    4 |          8 |    7 |          4 |\n|    5 |          9 |    9 |          5 |\n+------+------------+------+------------+"], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_rank"], "Feature Type": ["Function"], "index": 184, "vector_txt": "184:Feature: RANK()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/regexp.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators", "14.8.2 Regular Expressions"], "Feature": ["REGEXP_LIKE(expr,\n              pat[,\n              match_type])"], "Description": ["Whether string matches regular expression", "\nREGEXP_LIKE(expr,\n              pat[,\n              match_type])\n", "\n              Returns 1 if the string expr\n              matches the regular expression specified by the pattern\n              pat, 0 otherwise. If\n              expr or\n              pat is NULL,\n              the return value is NULL.\n            ", "\n              The pattern can be an extended regular expression, the\n              syntax for which is discussed in\n              Regular Expression Syntax. The pattern need not be a\n              literal string. For example, it can be specified as a\n              string expression or table column.\n            ", "\n              The optional match_type\n              argument is a string that may contain any or all the\n              following characters specifying how to perform matching:\n", "\n\nc: Case-sensitive matching.\n                \ni: Case-insensitive matching.\n                \nm: Multiple-line mode. Recognize\n                  line terminators within the string. The default\n                  behavior is to match line terminators only at the\n                  start and end of the string expression.\n                \nn: The .\n                  character matches line terminators. The default is for\n                  . matching to stop at the end of a\n                  line.\n                \nu: Unix-only line endings. Only the\n                  newline character is recognized as a line ending by\n                  the ., ^, and\n                  $ match operators.\n\n", "\n              If characters specifying contradictory options are\n              specified within match_type,\n              the rightmost one takes precedence.\n            ", "\n              By default, regular expression operations use the\n              character set and collation of the\n              expr and\n              pat arguments when deciding the\n              type of a character and performing the comparison. If the\n              arguments have different character sets or collations,\n              coercibility rules apply as described in\n              Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n              Arguments may be specified with explicit collation\n              indicators to change comparison behavior.\n            ", "mysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE');\n+---------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE') |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\nmysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs);\n+------------------------------------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs) |\n+------------------------------------------------------------------+\n|                                                                0 |\n+------------------------------------------------------------------+", "\nmatch_type may be specified\n              with the c or i\n              characters to override the default case sensitivity.\n              Exception: If either argument is a binary string, the\n              arguments are handled in case-sensitive fashion as binary\n              strings, even if match_type\n              contains the i character.\n", "\n\nNote\n\n\n                MySQL uses C escape syntax in strings (for example,\n                \\n to represent the newline\n                character). If you want your\n                expr or\n                pat argument to contain a\n                literal \\, you must double it.\n                (Unless the\n                NO_BACKSLASH_ESCAPES\n                SQL mode is enabled, in which case no escape character\n                is used.)\n\n", "mysql> SELECT REGEXP_LIKE('Michael!', '.*');\n+-------------------------------+\n| REGEXP_LIKE('Michael!', '.*') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line');\n+----------------------------------------------+\n| REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line') |\n+----------------------------------------------+\n|                                            0 |\n+----------------------------------------------+\nmysql> SELECT REGEXP_LIKE('a', '^[a-d]');\n+----------------------------+\n| REGEXP_LIKE('a', '^[a-d]') |\n+----------------------------+\n|                          1 |\n+----------------------------+", "mysql> SELECT REGEXP_LIKE('abc', 'ABC');\n+---------------------------+\n| REGEXP_LIKE('abc', 'ABC') |\n+---------------------------+\n|                         1 |\n+---------------------------+\nmysql> SELECT REGEXP_LIKE('abc', 'ABC', 'c');\n+--------------------------------+\n| REGEXP_LIKE('abc', 'ABC', 'c') |\n+--------------------------------+\n|                              0 |\n+--------------------------------+"], "Examples": ["mysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE');\n+---------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE') |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\nmysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs);\n+------------------------------------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs) |\n+------------------------------------------------------------------+\n|                                                                0 |\n+------------------------------------------------------------------+", "mysql> SELECT REGEXP_LIKE('Michael!', '.*');\n+-------------------------------+\n| REGEXP_LIKE('Michael!', '.*') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line');\n+----------------------------------------------+\n| REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line') |\n+----------------------------------------------+\n|                                            0 |\n+----------------------------------------------+\nmysql> SELECT REGEXP_LIKE('a', '^[a-d]');\n+----------------------------+\n| REGEXP_LIKE('a', '^[a-d]') |\n+----------------------------+\n|                          1 |\n+----------------------------+", "mysql> SELECT REGEXP_LIKE('abc', 'ABC');\n+---------------------------+\n| REGEXP_LIKE('abc', 'ABC') |\n+---------------------------+\n|                         1 |\n+---------------------------+\nmysql> SELECT REGEXP_LIKE('abc', 'ABC', 'c');\n+--------------------------------+\n| REGEXP_LIKE('abc', 'ABC', 'c') |\n+--------------------------------+\n|                              0 |\n+--------------------------------+"], "Category": ["Built-In Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/regexp.html#function_regexp-like"], "Feature Type": ["Function"], "index": 185, "vector_txt": "185:Feature: REGEXP_LIKE(expr,\n              pat[,\n              match_type])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/regexp.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators", "14.8.2 Regular Expressions"], "Feature": ["REGEXP_REPLACE(expr,\n              pat,\n              repl[,\n              pos[,\n              occurrence[,\n              match_type]]])"], "Description": ["Replace substrings matching regular expression", "\nREGEXP_REPLACE(expr,\n              pat,\n              repl[,\n              pos[,\n              occurrence[,\n              match_type]]])\n", "\n              Replaces occurrences in the string\n              expr that match the regular\n              expression specified by the pattern\n              pat with the replacement string\n              repl, and returns the resulting\n              string. If expr,\n              pat, or\n              repl is\n              NULL, the return value is\n              NULL.\n            ", "\nREGEXP_REPLACE() takes\n              these optional arguments:\n", "\n\npos: The position in\n                  expr at which to start the\n                  search. If omitted, the default is 1.\n                \noccurrence: Which\n                  occurrence of a match to replace. If omitted, the\n                  default is 0 (which means \u201creplace all\n                  occurrences\u201d).\n                \nmatch_type: A string that\n                  specifies how to perform matching. The meaning is as\n                  described for\n                  REGEXP_LIKE().\n\n", "\n              The result returned by this function uses the character\n              set and collation of the expression searched for matches.\n            ", "\n              For additional information about how matching occurs, see\n              the description for\n              REGEXP_LIKE().\n            ", "Press CTRL+C to copy mysql> SELECT REGEXP_REPLACE('a b c', 'b', 'X');\n+-----------------------------------+\n| REGEXP_REPLACE('a b c', 'b', 'X') |\n+-----------------------------------+\n| a X c                             |\n+-----------------------------------+\nmysql> SELECT REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3);\n+----------------------------------------------------+\n| REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3) |\n+----------------------------------------------------+\n| abc def X                                          |\n+----------------------------------------------------+"], "Examples": ["mysql> SELECT REGEXP_REPLACE('a b c', 'b', 'X');\n+-----------------------------------+\n| REGEXP_REPLACE('a b c', 'b', 'X') |\n+-----------------------------------+\n| a X c                             |\n+-----------------------------------+\nmysql> SELECT REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3);\n+----------------------------------------------------+\n| REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3) |\n+----------------------------------------------------+\n| abc def X                                          |\n+----------------------------------------------------+"], "Category": ["Built-In Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/regexp.html#function_regexp-replace"], "Feature Type": ["Function"], "index": 186, "vector_txt": "186:Feature: REGEXP_REPLACE(expr,\n              pat,\n              repl[,\n              pos[,\n              occurrence[,\n              match_type]]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/regexp.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators", "14.8.2 Regular Expressions"], "Feature": ["REGEXP_SUBSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              match_type]]])"], "Description": ["Return substring matching regular expression", "\nREGEXP_SUBSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              match_type]]])\n", "\n              Returns the substring of the string\n              expr that matches the regular\n              expression specified by the pattern\n              pat, NULL if\n              there is no match. If expr or\n              pat is NULL,\n              the return value is NULL.\n            ", "\nREGEXP_SUBSTR() takes these\n              optional arguments:\n", "\n\npos: The position in\n                  expr at which to start the\n                  search. If omitted, the default is 1.\n                \noccurrence: Which\n                  occurrence of a match to search for. If omitted, the\n                  default is 1.\n                \nmatch_type: A string that\n                  specifies how to perform matching. The meaning is as\n                  described for\n                  REGEXP_LIKE().\n\n", "\n              The result returned by this function uses the character\n              set and collation of the expression searched for matches.\n            ", "\n              For additional information about how matching occurs, see\n              the description for\n              REGEXP_LIKE().\n            ", "Press CTRL+C to copy mysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+');\n+----------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+') |\n+----------------------------------------+\n| abc                                    |\n+----------------------------------------+\nmysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3);\n+----------------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3) |\n+----------------------------------------------+\n| ghi                                          |\n+----------------------------------------------+"], "Examples": ["mysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+');\n+----------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+') |\n+----------------------------------------+\n| abc                                    |\n+----------------------------------------+\nmysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3);\n+----------------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3) |\n+----------------------------------------------+\n| ghi                                          |\n+----------------------------------------------+"], "Category": ["Built-In Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/regexp.html#function_regexp-substr"], "Feature Type": ["Function"], "index": 187, "vector_txt": "187:Feature: REGEXP_SUBSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              match_type]]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["ANY_VALUE(arg)"], "Description": ["Suppress ONLY_FULL_GROUP_BY value rejection", "\nANY_VALUE(arg)\n", "\n          This function is useful for GROUP BY\n          queries when the\n          ONLY_FULL_GROUP_BY SQL mode\n          is enabled, for cases when MySQL rejects a query that you know\n          is valid for reasons that MySQL cannot determine. The function\n          return value and type are the same as the return value and\n          type of its argument, but the function result is not checked\n          for the ONLY_FULL_GROUP_BY\n          SQL mode.\n        ", "\n          For example, if name is a nonindexed\n          column, the following query fails with\n          ONLY_FULL_GROUP_BY enabled:\n        ", "Press CTRL+C to copy mysql> SELECT name, address, MAX(age) FROM t GROUP BY name;\nERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP\nBY clause and contains nonaggregated column 'mydb.t.address' which\nis not functionally dependent on columns in GROUP BY clause; this\nis incompatible with sql_mode=only_full_group_by", "\n          The failure occurs because address is a\n          nonaggregated column that is neither named among\n          GROUP BY columns nor functionally dependent\n          on them. As a result, the address value for\n          rows within each name group is\n          nondeterministic. There are multiple ways to cause MySQL to\n          accept the query:\n", "\n\n              Alter the table to make name a primary\n              key or a unique NOT NULL column. This\n              enables MySQL to determine that address\n              is functionally dependent on name; that\n              is, address is uniquely determined by\n              name. (This technique is inapplicable\n              if NULL must be permitted as a valid\n              name value.)\n            \n              Use ANY_VALUE() to refer to\n              address:\n            Press CTRL+C to copy SELECT name, ANY_VALUE(address), MAX(age) FROM t GROUP BY name;\n              In this case, MySQL ignores the nondeterminism of\n              address values within each\n              name group and accepts the query. This\n              may be useful if you simply do not care which value of a\n              nonaggregated column is chosen for each group.\n              ANY_VALUE() is not an\n              aggregate function, unlike functions such as\n              SUM() or\n              COUNT(). It simply acts to\n              suppress the test for nondeterminism.\n            \n              Disable\n              ONLY_FULL_GROUP_BY. This\n              is equivalent to using\n              ANY_VALUE() with\n              ONLY_FULL_GROUP_BY\n              enabled, as described in the previous item.\n\n", "\nANY_VALUE() is also useful if\n          functional dependence exists between columns but MySQL cannot\n          determine it. The following query is valid because\n          age is functionally dependent on the\n          grouping column age-1, but MySQL cannot\n          tell that and rejects the query with\n          ONLY_FULL_GROUP_BY enabled:\n        ", "Press CTRL+C to copy SELECT age FROM t GROUP BY age-1;", "\n          To cause MySQL to accept the query, use\n          ANY_VALUE():\n        ", "Press CTRL+C to copy SELECT ANY_VALUE(age) FROM t GROUP BY age-1;", "\nANY_VALUE() can be used for\n          queries that refer to aggregate functions in the absence of a\n          GROUP BY clause:\n        ", "Press CTRL+C to copy mysql> SELECT name, MAX(age) FROM t;\nERROR 1140 (42000): In aggregated query without GROUP BY, expression\n#1 of SELECT list contains nonaggregated column 'mydb.t.name'; this\nis incompatible with sql_mode=only_full_group_by", "\n          Without GROUP BY, there is a single group\n          and it is nondeterministic which name value\n          to choose for the group.\n          ANY_VALUE() tells MySQL to\n          accept the query:\n        ", "Press CTRL+C to copy SELECT ANY_VALUE(name), MAX(age) FROM t;", "\n          It may be that, due to some property of a given data set, you\n          know that a selected nonaggregated column is effectively\n          functionally dependent on a GROUP BY\n          column. For example, an application may enforce uniqueness of\n          one column with respect to another. In this case, using\n          ANY_VALUE() for the effectively\n          functionally dependent column may make sense.\n        ", "\n          For additional discussion, see\n          Section\u00a014.19.3, \u201cMySQL Handling of GROUP BY\u201d.\n        "], "Examples": ["mysql> SELECT name, address, MAX(age) FROM t GROUP BY name;\nERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP\nBY clause and contains nonaggregated column 'mydb.t.address' which\nis not functionally dependent on columns in GROUP BY clause; this\nis incompatible with sql_mode=only_full_group_by", "SELECT name, ANY_VALUE(address), MAX(age) FROM t GROUP BY name;", "SELECT age FROM t GROUP BY age-1;", "SELECT ANY_VALUE(age) FROM t GROUP BY age-1;", "mysql> SELECT name, MAX(age) FROM t;\nERROR 1140 (42000): In aggregated query without GROUP BY, expression\n#1 of SELECT list contains nonaggregated column 'mydb.t.name'; this\nis incompatible with sql_mode=only_full_group_by", "SELECT ANY_VALUE(name), MAX(age) FROM t;"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_any-value"], "Feature Type": ["Function"], "index": 188, "vector_txt": "188:Feature: ANY_VALUE(arg)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.14 Locking Functions"], "Feature": ["RELEASE_ALL_LOCKS()"], "Description": ["Release all current named locks", "\nRELEASE_ALL_LOCKS()\n", "\n          Releases all named locks held by the current session and\n          returns the number of locks released (0 if there were none)\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": [], "Category": ["Built-In Functions", "Locking Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_release-all-locks"], "Feature Type": ["Function"], "index": 189, "vector_txt": "189:Feature: RELEASE_ALL_LOCKS()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.14 Locking Functions"], "Feature": ["RELEASE_LOCK(str)"], "Description": ["Release the named lock", "\nRELEASE_LOCK(str)\n", "\n          Releases the lock named by the string\n          str that was obtained with\n          GET_LOCK(). Returns\n          1 if the lock was released,\n          0 if the lock was not established by this\n          thread (in which case the lock is not released), and\n          NULL if the named lock did not exist. The\n          lock does not exist if it was never obtained by a call to\n          GET_LOCK() or if it has\n          previously been released.\n        ", "\n          The DO statement is convenient\n          to use with RELEASE_LOCK(). See\n          Section\u00a015.2.3, \u201cDO Statement\u201d.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n"], "Examples": [], "Category": ["Built-In Functions", "Locking Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_release-lock"], "Feature Type": ["Function"], "index": 190, "vector_txt": "190:Feature: RELEASE_LOCK(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["REPEAT(str,count)"], "Description": ["Repeat a string the specified number of times", "\nREPEAT(str,count)\n", "\n          Returns a string consisting of the string\n          str repeated\n          count times. If\n          count is less than 1, returns an\n          empty string. Returns NULL if\n          str or\n          count is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT REPEAT('MySQL', 3);\n        -> 'MySQLMySQLMySQL'"], "Examples": ["mysql> SELECT REPEAT('MySQL', 3);\n        -> 'MySQLMySQLMySQL'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_repeat"], "Feature Type": ["Function"], "index": 191, "vector_txt": "191:Feature: REPEAT(str,count)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["REPLACE(str,from_str,to_str)"], "Description": ["Replace occurrences of a specified string", "\nREPLACE(str,from_str,to_str)\n", "\n          Returns the string str with all\n          occurrences of the string from_str\n          replaced by the string to_str.\n          REPLACE() performs a\n          case-sensitive match when searching for\n          from_str.\n        ", "Press CTRL+C to copy mysql> SELECT REPLACE('www.mysql.com', 'w', 'Ww');\n        -> 'WwWwWw.mysql.com'", "\n          This function is multibyte safe. It returns\n          NULL if any of its arguments are\n          NULL.\n        "], "Examples": ["mysql> SELECT REPLACE('www.mysql.com', 'w', 'Ww');\n        -> 'WwWwWw.mysql.com'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_replace"], "Feature Type": ["Function"], "index": 192, "vector_txt": "192:Feature: REPLACE(str,from_str,to_str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["REVERSE(str)"], "Description": ["Reverse the characters in a string", "\nREVERSE(str)\n", "\n          Returns the string str with the\n          order of the characters reversed, or NULL\n          if str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT REVERSE('abc');\n        -> 'cba'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT REVERSE('abc');\n        -> 'cba'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_reverse"], "Feature Type": ["Function"], "index": 193, "vector_txt": "193:Feature: REVERSE(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["RIGHT(str,len)"], "Description": ["Return the specified rightmost number of characters", "\nRIGHT(str,len)\n", "\n          Returns the rightmost len\n          characters from the string str, or\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT RIGHT('foobarbar', 4);\n        -> 'rbar'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT RIGHT('foobarbar', 4);\n        -> 'rbar'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_right"], "Feature Type": ["Function"], "index": 194, "vector_txt": "194:Feature: RIGHT(str,len)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["ROLES_GRAPHML()"], "Description": ["Return a GraphML document representing memory role subgraphs", "\nROLES_GRAPHML()\n", "\n          Returns a utf8mb3 string containing a\n          GraphML document representing memory role subgraphs. The\n          ROLE_ADMIN privilege (or the\n          deprecated SUPER privilege) is\n          required to see content in the\n          <graphml> element. Otherwise, the\n          result shows only an empty element:\n        ", "Press CTRL+C to copy mysql> SELECT ROLES_GRAPHML();\n+---------------------------------------------------+\n| ROLES_GRAPHML()                                   |\n+---------------------------------------------------+\n| <?xml version=\"1.0\" encoding=\"UTF-8\"?><graphml /> |\n+---------------------------------------------------+"], "Examples": ["mysql> SELECT ROLES_GRAPHML();\n+---------------------------------------------------+\n| ROLES_GRAPHML()                                   |\n+---------------------------------------------------+\n| <?xml version=\"1.0\" encoding=\"UTF-8\"?><graphml /> |\n+---------------------------------------------------+"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_roles-graphml"], "Feature Type": ["Function"], "index": 195, "vector_txt": "195:Feature: ROLES_GRAPHML()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ROUND(X)"], "Description": ["Round the argument", "\nROUND(X),\n            ROUND(X,D)\n", "\n            Rounds the argument X to\n            D decimal places. The rounding\n            algorithm depends on the data type of\n            X. D\n            defaults to 0 if not specified. D\n            can be negative to cause D digits\n            left of the decimal point of the value\n            X to become zero. The maximum\n            absolute value for D is 30; any\n            digits in excess of 30 (or -30) are truncated. If\n            X or D\n            is NULL, the function returns\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ROUND(-1.23);\n        -> -1\nmysql> SELECT ROUND(-1.58);\n        -> -2\nmysql> SELECT ROUND(1.58);\n        -> 2\nmysql> SELECT ROUND(1.298, 1);\n        -> 1.3\nmysql> SELECT ROUND(1.298, 0);\n        -> 1\nmysql> SELECT ROUND(23.298, -1);\n        -> 20\nmysql> SELECT ROUND(.12345678901234567890123456789012345, 35);\n        -> 0.123456789012345678901234567890", "\n            The return value has the same type as the first argument\n            (assuming that it is integer, double, or decimal). This\n            means that for an integer argument, the result is an integer\n            (no decimal places):\n          ", "Press CTRL+C to copy mysql> SELECT ROUND(150.000,2), ROUND(150,2);\n+------------------+--------------+\n| ROUND(150.000,2) | ROUND(150,2) |\n+------------------+--------------+\n|           150.00 |          150 |\n+------------------+--------------+", "\nROUND() uses the following\n            rules depending on the type of the first argument:\n", "\n\n                For exact-value numbers,\n                ROUND() uses the\n                \u201cround half away from zero\u201d or \u201cround\n                toward nearest\u201d rule: A value with a fractional\n                part of .5 or greater is rounded up to the next integer\n                if positive or down to the next integer if negative. (In\n                other words, it is rounded away from zero.) A value with\n                a fractional part less than .5 is rounded down to the\n                next integer if positive or up to the next integer if\n                negative.\n              \n                For approximate-value numbers, the result depends on the\n                C library. On many systems, this means that\n                ROUND() uses the\n                \u201cround to nearest even\u201d rule: A value with\n                a fractional part exactly halfway between two integers\n                is rounded to the nearest even integer.\n\n", "\n            The following example shows how rounding differs for exact\n            and approximate values:\n          ", "Press CTRL+C to copy mysql> SELECT ROUND(2.5), ROUND(25E-1);\n+------------+--------------+\n| ROUND(2.5) | ROUND(25E-1) |\n+------------+--------------+\n| 3          |            2 |\n+------------+--------------+", "\n            For more information, see Section\u00a014.24, \u201cPrecision Math\u201d.\n          ", "\n            The data type returned by ROUND() (and\n            TRUNCATE()) is determined\n            according to the rules listed here:\n", "\n\n                When the first argument is of any integer type, the\n                return type is always\n                BIGINT.\n              \n                When the first argument is of any floating-point type or\n                of any non-numeric type, the return type is always\n                DOUBLE.\n              \n                When the first argument is a\n                DECIMAL value, the return\n                type is also DECIMAL.\n              \n                The type attributes for the return value are also copied\n                from the first argument, except in the case of\n                DECIMAL, when the second argument is\n                a constant value.\n              \n                When the desired number of decimal places is less than\n                the scale of the argument, the scale and the precision\n                of the result are adjusted accordingly.\n              \n                In addition, for ROUND() (but not for\n                the TRUNCATE() function),\n                the precision is extended by one place to accommodate\n                rounding that increases the number of significant\n                digits. If the second argument is negative, the return\n                type is adjusted such that its scale is 0, with a\n                corresponding precision. For example,\n                ROUND(99.999, 2) returns\n                100.00\u2014the first argument is\n                DECIMAL(5, 3), and the return type is\n                DECIMAL(5, 2).\n              \n                If the second argument is negative, the return type has\n                scale 0 and a corresponding precision;\n                ROUND(99.999, -1) returns\n                100, which is DECIMAL(3,\n                0).\n\n"], "Examples": ["mysql> SELECT ROUND(-1.23);\n        -> -1\nmysql> SELECT ROUND(-1.58);\n        -> -2\nmysql> SELECT ROUND(1.58);\n        -> 2\nmysql> SELECT ROUND(1.298, 1);\n        -> 1.3\nmysql> SELECT ROUND(1.298, 0);\n        -> 1\nmysql> SELECT ROUND(23.298, -1);\n        -> 20\nmysql> SELECT ROUND(.12345678901234567890123456789012345, 35);\n        -> 0.123456789012345678901234567890", "mysql> SELECT ROUND(150.000,2), ROUND(150,2);\n+------------------+--------------+\n| ROUND(150.000,2) | ROUND(150,2) |\n+------------------+--------------+\n|           150.00 |          150 |\n+------------------+--------------+", "mysql> SELECT ROUND(2.5), ROUND(25E-1);\n+------------+--------------+\n| ROUND(2.5) | ROUND(25E-1) |\n+------------+--------------+\n| 3          |            2 |\n+------------+--------------+"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_round"], "Feature Type": ["Function"], "index": 196, "vector_txt": "196:Feature: ROUND(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["ROW_COUNT()"], "Description": ["The number of rows updated", "\nROW_COUNT()\n", "\nROW_COUNT() returns a value as follows:\n", "\n\n              DDL statements: 0. This applies to statements such as\n              CREATE TABLE or\n              DROP TABLE.\n            \n              DML statements other than\n              SELECT: The number of\n              affected rows. This applies to statements such as\n              UPDATE,\n              INSERT, or\n              DELETE (as before), but now\n              also to statements such as ALTER\n              TABLE and LOAD\n              DATA.\n            \nSELECT: -1 if the statement\n              returns a result set, or the number of rows\n              \u201caffected\u201d if it does not. For example, for\n              SELECT * FROM t1,\n              ROW_COUNT() returns -1. For\n              SELECT * FROM t1 INTO OUTFILE\n              'file_name',\n              ROW_COUNT() returns the\n              number of rows written to the file.\n            \nSIGNAL statements: 0.\n\n", "\n          For UPDATE statements, the\n          affected-rows value by default is the number of rows actually\n          changed. If you specify the\n          CLIENT_FOUND_ROWS flag to\n          mysql_real_connect() when\n          connecting to mysqld, the affected-rows\n          value is the number of rows \u201cfound\u201d; that is,\n          matched by the WHERE clause.\n        ", "\n          For REPLACE statements, the\n          affected-rows value is 2 if the new row replaced an old row,\n          because in this case, one row was inserted after the duplicate\n          was deleted.\n        ", "\n          For\n          INSERT\n          ... ON DUPLICATE KEY UPDATE statements, the\n          affected-rows value per row is 1 if the row is inserted as a\n          new row, 2 if an existing row is updated, and 0 if an existing\n          row is set to its current values. If you specify the\n          CLIENT_FOUND_ROWS flag, the affected-rows\n          value is 1 (not 0) if an existing row is set to its current\n          values.\n        ", "\n          The ROW_COUNT() value is\n          similar to the value from the\n          mysql_affected_rows() C API\n          function and the row count that the mysql\n          client displays following statement execution.\n        ", "Press CTRL+C to copy mysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t WHERE i IN(1,2);\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           2 |\n+-------------+\n1 row in set (0.00 sec)", "\n\nImportant\n\n\nROW_COUNT() is not replicated\n            reliably using statement-based replication. This function is\n            automatically replicated using row-based replication.\n\n"], "Examples": ["mysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t WHERE i IN(1,2);\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           2 |\n+-------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_row-count"], "Feature Type": ["Function"], "index": 197, "vector_txt": "197:Feature: ROW_COUNT()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["ROW_NUMBER()"], "Description": ["Number of current row within its partition", "\nROW_NUMBER()\nover_clause\n", "\n            Returns the number of the current row within its partition.\n            Rows numbers range from 1 to the number of partition rows.\n          ", "\nORDER BY affects the order in which rows\n            are numbered. Without ORDER BY, row\n            numbering is nondeterministic.\n          ", "\nROW_NUMBER() assigns peers\n            different row numbers. To assign peers the same value, use\n            RANK() or\n            DENSE_RANK(). For an example,\n            see the RANK() function\n            description.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n"], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_row-number"], "Feature Type": ["Function"], "index": 198, "vector_txt": "198:Feature: ROW_NUMBER()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["ASCII(str)"], "Description": ["Return numeric value of left-most character", "\nASCII(str)\n", "\n          Returns the numeric value of the leftmost character of the\n          string str. Returns\n          0 if str is the\n          empty string. Returns NULL if\n          str is NULL.\n          ASCII() works for 8-bit\n          characters.\n        ", "Press CTRL+C to copy mysql> SELECT ASCII('2');\n        -> 50\nmysql> SELECT ASCII(2);\n        -> 50\nmysql> SELECT ASCII('dx');\n        -> 100", "\n          See also the ORD() function.\n        "], "Examples": ["mysql> SELECT ASCII('2');\n        -> 50\nmysql> SELECT ASCII(2);\n        -> 50\nmysql> SELECT ASCII('dx');\n        -> 100"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ascii"], "Feature Type": ["Function"], "index": 199, "vector_txt": "199:Feature: ASCII(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["RPAD(str,len,padstr)"], "Description": ["Append string the specified number of times", "\nRPAD(str,len,padstr)\n", "\n          Returns the string str,\n          right-padded with the string padstr\n          to a length of len characters. If\n          str is longer than\n          len, the return value is shortened\n          to len characters. If\n          str,\n          padstr, or\n          len is NULL, the\n          function returns NULL.\n        ", "Press CTRL+C to copy mysql> SELECT RPAD('hi',5,'?');\n        -> 'hi???'\nmysql> SELECT RPAD('hi',1,'?');\n        -> 'h'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT RPAD('hi',5,'?');\n        -> 'hi???'\nmysql> SELECT RPAD('hi',1,'?');\n        -> 'h'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_rpad"], "Feature Type": ["Function"], "index": 200, "vector_txt": "200:Feature: RPAD(str,len,padstr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["RTRIM(str)"], "Description": ["Remove trailing spaces", "\nRTRIM(str)\n", "\n          Returns the string str with\n          trailing space characters removed.\n        ", "Press CTRL+C to copy mysql> SELECT RTRIM('barbar   ');\n        -> 'barbar'", "\n          This function is multibyte safe, and returns\n          NULL if str is\n          NULL.\n        "], "Examples": ["mysql> SELECT RTRIM('barbar   ');\n        -> 'barbar'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_rtrim"], "Feature Type": ["Function"], "index": 201, "vector_txt": "201:Feature: RTRIM(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["SCHEMA()"], "Description": ["Synonym for DATABASE()", "\nSCHEMA()\n", "\n          This function is a synonym for\n          DATABASE().\n        "], "Examples": [], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_schema"], "Feature Type": ["Function"], "index": 202, "vector_txt": "202:Feature: SCHEMA()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["SEC_TO_TIME(seconds)"], "Description": ["Converts seconds to 'hh:mm:ss' format", "\nSEC_TO_TIME(seconds)\n", "\n          Returns the seconds argument,\n          converted to hours, minutes, and seconds, as a\n          TIME value. The range of the\n          result is constrained to that of the\n          TIME data type. A warning\n          occurs if the argument corresponds to a value outside that\n          range.\n        ", "\n          The function returns NULL if\n          seconds is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT SEC_TO_TIME(2378);\n        -> '00:39:38'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n        -> 3938"], "Examples": ["mysql> SELECT SEC_TO_TIME(2378);\n        -> '00:39:38'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n        -> 3938"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_sec-to-time"], "Feature Type": ["Function"], "index": 203, "vector_txt": "203:Feature: SEC_TO_TIME(seconds)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["SECOND(time)"], "Description": ["Return the second (0-59)", "\nSECOND(time)\n", "\n          Returns the second for time, in the\n          range 0 to 59, or\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT SECOND('10:05:03');\n        -> 3"], "Examples": ["mysql> SELECT SECOND('10:05:03');\n        -> 3"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_second"], "Feature Type": ["Function"], "index": 204, "vector_txt": "204:Feature: SECOND(time)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["SESSION_USER()"], "Description": ["Synonym for USER()", "\nSESSION_USER()\n", "\nSESSION_USER() is a synonym for\n          USER().\n        ", "\n          Like USER(), this function can\n          be used for the default value of a\n          VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (SESSION_USER()));"], "Examples": ["CREATE TABLE t (c VARCHAR(288) DEFAULT (SESSION_USER()));"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_session-user"], "Feature Type": ["Function"], "index": 205, "vector_txt": "205:Feature: SESSION_USER()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["SHA1(str)"], "Description": ["Calculate an SHA-1 160-bit checksum", "\nSHA1(str),\n          SHA(str)\n", "\n          Calculates an SHA-1 160-bit checksum for the string, as\n          described in RFC 3174 (Secure Hash Algorithm). The value is\n          returned as a string of 40 hexadecimal digits, or\n          NULL if the argument is\n          NULL. One of the possible uses for this\n          function is as a hash key. See the notes at the beginning of\n          this section about storing hash values efficiently.\n          SHA() is\n          synonymous with SHA1().\n        ", "\n          The return value is a string in the connection character set.\n        ", "Press CTRL+C to copy mysql> SELECT SHA1('abc');\n        -> 'a9993e364706816aba3e25717850c26c9cd0d89d'", "\nSHA1() can be considered a\n          cryptographically more secure equivalent of\n          MD5(). However, see the note\n          regarding the MD5 and SHA-1 algorithms at the beginning this\n          section.\n        "], "Examples": ["mysql> SELECT SHA1('abc');\n        -> 'a9993e364706816aba3e25717850c26c9cd0d89d'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_sha1"], "Feature Type": ["Function"], "index": 206, "vector_txt": "206:Feature: SHA1(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["SHA2(str,\n          hash_length)"], "Description": ["Calculate an SHA-2 checksum", "\nSHA2(str,\n          hash_length)\n", "\n          Calculates the SHA-2 family of hash functions (SHA-224,\n          SHA-256, SHA-384, and SHA-512). The first argument is the\n          plaintext string to be hashed. The second argument indicates\n          the desired bit length of the result, which must have a value\n          of 224, 256, 384, 512, or 0 (which is equivalent to 256). If\n          either argument is NULL or the hash length\n          is not one of the permitted values, the return value is\n          NULL. Otherwise, the function result is a\n          hash value containing the desired number of bits. See the\n          notes at the beginning of this section about storing hash\n          values efficiently.\n        ", "\n          The return value is a string in the connection character set.\n        ", "Press CTRL+C to copy mysql> SELECT SHA2('abc', 224);\n        -> '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7'", "\n          This function works only if MySQL has been configured with SSL\n          support. See Section\u00a08.3, \u201cUsing Encrypted Connections\u201d.\n        ", "\nSHA2() can be considered\n          cryptographically more secure than\n          MD5() or\n          SHA1().\n        "], "Examples": ["mysql> SELECT SHA2('abc', 224);\n        -> '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_sha2"], "Feature Type": ["Function"], "index": 207, "vector_txt": "207:Feature: SHA2(str,\n          hash_length)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["SIGN(X)"], "Description": ["Return the sign of the argument", "\nSIGN(X)\n", "\n            Returns the sign of the argument as -1,\n            0, or 1, depending on\n            whether X is negative, zero, or\n            positive. Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT SIGN(-32);\n        -> -1\nmysql> SELECT SIGN(0);\n        -> 0\nmysql> SELECT SIGN(234);\n        -> 1"], "Examples": ["mysql> SELECT SIGN(-32);\n        -> -1\nmysql> SELECT SIGN(0);\n        -> 0\nmysql> SELECT SIGN(234);\n        -> 1"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sign"], "Feature Type": ["Function"], "index": 208, "vector_txt": "208:Feature: SIGN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["SIN(X)"], "Description": ["Return the sine of the argument", "\nSIN(X)\n", "\n            Returns the sine of X, where\n            X is given in radians. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT SIN(PI());\n        -> 1.2246063538224e-16\nmysql> SELECT ROUND(SIN(PI()));\n        -> 0"], "Examples": ["mysql> SELECT SIN(PI());\n        -> 1.2246063538224e-16\nmysql> SELECT ROUND(SIN(PI()));\n        -> 0"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sin"], "Feature Type": ["Function"], "index": 209, "vector_txt": "209:Feature: SIN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ASIN(X)"], "Description": ["Return the arc sine", "\nASIN(X)\n", "\n            Returns the arc sine of X, that\n            is, the value whose sine is X.\n            Returns NULL if\n            X is not in the range\n            -1 to 1, or if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ASIN(0.2);\n        -> 0.20135792079033\nmysql> SELECT ASIN('foo');\n\n+-------------+\n| ASIN('foo') |\n+-------------+\n|           0 |\n+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-----------------------------------------+\n| Level   | Code | Message                                 |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'foo' |\n+---------+------+-----------------------------------------+"], "Examples": ["mysql> SELECT ASIN(0.2);\n        -> 0.20135792079033\nmysql> SELECT ASIN('foo');\n\n+-------------+\n| ASIN('foo') |\n+-------------+\n|           0 |\n+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-----------------------------------------+\n| Level   | Code | Message                                 |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'foo' |\n+---------+------+-----------------------------------------+"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_asin"], "Feature Type": ["Function"], "index": 210, "vector_txt": "210:Feature: ASIN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["SLEEP(duration)"], "Description": ["Sleep for a number of seconds", "\nSLEEP(duration)\n", "\n          Sleeps (pauses) for the number of seconds given by the\n          duration argument, then returns 0.\n          The duration may have a fractional part. If the argument is\n          NULL or negative,\n          SLEEP() produces a warning, or\n          an error in strict SQL mode.\n        ", "\n          When sleep returns normally (without interruption), it returns\n          0:\n        ", "Press CTRL+C to copy mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           0 |\n+-------------+", "\n          When SLEEP() is the only thing\n          invoked by a query that is interrupted, it returns 1 and the\n          query itself returns no error. This is true whether the query\n          is killed or times out:\n", "\n\n              This statement is interrupted using\n              KILL QUERY\n              from another session:\n            Press CTRL+C to copy mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+\n              This statement is interrupted by timing out:\n            Press CTRL+C to copy mysql> SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+\n", "\n          When SLEEP() is only part of a\n          query that is interrupted, the query returns an error:\n", "\n\n              This statement is interrupted using\n              KILL QUERY\n              from another session:\n            Press CTRL+C to copy mysql> SELECT 1 FROM t1 WHERE SLEEP(1000);\nERROR 1317 (70100): Query execution was interrupted\n              This statement is interrupted by timing out:\n            Press CTRL+C to copy mysql> SELECT /*+ MAX_EXECUTION_TIME(1000) */ 1 FROM t1 WHERE SLEEP(1000);\nERROR 3024 (HY000): Query execution was interrupted, maximum statement\nexecution time exceeded\n", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": ["mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           0 |\n+-------------+", "mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+", "mysql> SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+", "mysql> SELECT 1 FROM t1 WHERE SLEEP(1000);\nERROR 1317 (70100): Query execution was interrupted", "mysql> SELECT /*+ MAX_EXECUTION_TIME(1000) */ 1 FROM t1 WHERE SLEEP(1000);\nERROR 3024 (HY000): Query execution was interrupted, maximum statement\nexecution time exceeded"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_sleep"], "Feature Type": ["Function"], "index": 211, "vector_txt": "211:Feature: SLEEP(duration)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["SOUNDEX(str)"], "Description": ["Return a soundex string", "\nSOUNDEX(str)\n", "\n          Returns a soundex string from str,\n          or NULL if str\n          is NULL. Two strings that sound almost the\n          same should have identical soundex strings. A standard soundex\n          string is four characters long, but the\n          SOUNDEX() function returns an\n          arbitrarily long string. You can use\n          SUBSTRING() on the result to\n          get a standard soundex string. All nonalphabetic characters in\n          str are ignored. All international\n          alphabetic characters outside the A-Z range are treated as\n          vowels.\n", "\n\nImportant\n\n\n            When using SOUNDEX(), you\n            should be aware of the following limitations:\n\n", "\n\n              This function, as currently implemented, is intended to\n              work well with strings that are in the English language\n              only. Strings in other languages may not produce reliable\n              results.\n            \n              This function is not guaranteed to provide consistent\n              results with strings that use multibyte character sets,\n              including utf-8. See Bug #22638 for\n              more information.\n\n", "Press CTRL+C to copy mysql> SELECT SOUNDEX('Hello');\n        -> 'H400'\nmysql> SELECT SOUNDEX('Quadratically');\n        -> 'Q36324'", "\n\nNote\n\n\n            This function implements the original Soundex algorithm, not\n            the more popular enhanced version (also described by D.\n            Knuth). The difference is that original version discards\n            vowels first and duplicates second, whereas the enhanced\n            version discards duplicates first and vowels second.\n\n"], "Examples": ["mysql> SELECT SOUNDEX('Hello');\n        -> 'H400'\nmysql> SELECT SOUNDEX('Quadratically');\n        -> 'Q36324'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_soundex"], "Feature Type": ["Function"], "index": 212, "vector_txt": "212:Feature: SOUNDEX(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-synchronization.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.4 Position-Based Synchronization Functions"], "Feature": ["SOURCE_POS_WAIT(log_name,log_pos[,timeout][,channel])"], "Description": ["Block until the replica has read and applied all updates up to the", "\nSOURCE_POS_WAIT(log_name,log_pos[,timeout][,channel])\n", "\n            This function is for control of source-replica\n            synchronization. It blocks until the replica has read and\n            applied all updates up to the specified position in the\n            source's binary log.\n          ", "\n            The return value is the number of log events the replica had\n            to wait for to advance to the specified position. The\n            function returns NULL if the replication\n            SQL thread is not started, the replica's source information\n            is not initialized, the arguments are incorrect, or an error\n            occurs. It returns -1 if the timeout has\n            been exceeded. If the replication SQL thread stops while\n            SOURCE_POS_WAIT() is waiting,\n            the function returns NULL. If the replica\n            is past the specified position, the function returns\n            immediately.\n          ", "\n            If the binary log file position has been marked as invalid,\n            the function waits until a valid file position is known. The\n            binary log file position can be marked as invalid when the\n            CHANGE REPLICATION SOURCE TO\n            option GTID_ONLY is set for the\n            replication channel, and the server is restarted or\n            replication is stopped. The file position becomes valid\n            after a transaction is successfully applied past the given\n            file position. If the applier does not reach the stated\n            position, the function waits until the timeout. Use a\n            SHOW REPLICA STATUS statement\n            to check if the binary log file position has been marked as\n            invalid.\n          ", "\n            On a multithreaded replica, the function waits until expiry\n            of the limit set by the\n            replica_checkpoint_group or\n            replica_checkpoint_period\n            system variable, when the checkpoint operation is called to\n            update the status of the replica. Depending on the setting\n            for the system variables, the function might therefore\n            return some time after the specified position was reached.\n          ", "\n            If binary log transaction compression is in use and the\n            transaction payload at the specified position is compressed\n            (as a Transaction_payload_event), the\n            function waits until the whole transaction has been read and\n            applied, and the positions have updated.\n          ", "\n            If a timeout value is specified,\n            SOURCE_POS_WAIT() stops\n            waiting when timeout seconds have\n            elapsed. timeout must be greater\n            than or equal to 0. (When the server is running in strict\n            SQL mode, a negative timeout\n            value is immediately rejected with\n            ER_WRONG_ARGUMENTS;\n            otherwise the function returns NULL, and\n            raises a warning.)\n          ", "\n            The optional channel value\n            enables you to name which replication channel the function\n            applies to. See Section\u00a019.2.2, \u201cReplication Channels\u201d for\n            more information.\n          ", "\n            This function is unsafe for statement-based replication. A\n            warning is logged if you use this function when\n            binlog_format is set to\n            STATEMENT.\n"], "Examples": [], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-synchronization.html#function_source-pos-wait"], "Feature Type": ["Function"], "index": 213, "vector_txt": "213:Feature: SOURCE_POS_WAIT(log_name,log_pos[,timeout][,channel])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["SPACE(N)"], "Description": ["Return a string of the specified number of spaces", "\nSPACE(N)\n", "\n          Returns a string consisting of N\n          space characters, or NULL if\n          N is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT SPACE(6);\n        -> '      '"], "Examples": ["mysql> SELECT SPACE(6);\n        -> '      '"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_space"], "Feature Type": ["Function"], "index": 214, "vector_txt": "214:Feature: SPACE(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["SQRT(X)"], "Description": ["Return the square root of the argument", "\nSQRT(X)\n", "\n            Returns the square root of a nonnegative number\n            X. If\n            X is NULL, the\n            function returns NULL.\n          ", "Press CTRL+C to copy mysql> SELECT SQRT(4);\n        -> 2\nmysql> SELECT SQRT(20);\n        -> 4.4721359549996\nmysql> SELECT SQRT(-16);\n        -> NULL"], "Examples": ["mysql> SELECT SQRT(4);\n        -> 2\nmysql> SELECT SQRT(20);\n        -> 4.4721359549996\nmysql> SELECT SQRT(-16);\n        -> NULL"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sqrt"], "Feature Type": ["Function"], "index": 215, "vector_txt": "215:Feature: SQRT(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Area({poly|mpoly})"], "Description": ["Return Polygon or MultiPolygon area", "\nST_Area({poly|mpoly})\n", "\n            Returns a double-precision number indicating the area of the\n            Polygon or\n            MultiPolygon argument, as measured in its\n            spatial reference system.\n          ", "\nST_Area() handles its\n            arguments as described in the introduction to this section,\n            with these exceptions:\n", "\n\n                If the geometry is geometrically invalid, either the\n                result is an undefined area (that is, it can be any\n                number), or an error occurs.\n              \n                If the geometry is valid but is not a\n                Polygon or\n                MultiPolygon object, an\n                ER_UNEXPECTED_GEOMETRY_TYPE\n                error occurs.\n              \n                If the geometry is a valid Polygon in\n                a Cartesian SRS, the result is the Cartesian area of the\n                polygon.\n              \n                If the geometry is a valid\n                MultiPolygon in a Cartesian SRS, the\n                result is the sum of the Cartesian area of the polygons.\n              \n                If the geometry is a valid Polygon in\n                a geographic SRS, the result is the geodetic area of the\n                polygon in that SRS, in square meters.\n              \n                If the geometry is a valid\n                MultiPolygon in a geographic SRS, the\n                result is the sum of geodetic area of the polygons in\n                that SRS, in square meters.\n              \n                If an area computation results in\n                +inf, an\n                ER_DATA_OUT_OF_RANGE\n                error occurs.\n              \n                If the geometry has a geographic SRS with a longitude or\n                latitude that is out of range, an error occurs:\n\n\n\n                    If a longitude value is not in the range\n                    (\u2212180, 180], an\n                    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                    error occurs.\n                  \n                    If a latitude value is not in the range [\u221290,\n                    90], an\n                    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                    error occurs.\n\n\n\n                Ranges shown are in degrees. The exact range limits\n                deviate slightly due to floating-point arithmetic.\n\n", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';\nmysql> SELECT ST_Area(ST_GeomFromText(@poly));\n+---------------------------------+\n| ST_Area(ST_GeomFromText(@poly)) |\n+---------------------------------+\n|                               4 |\n+---------------------------------+\n\nmysql> SET @mpoly =\n       'MultiPolygon(((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1)))';\nmysql> SELECT ST_Area(ST_GeomFromText(@mpoly));\n+----------------------------------+\n| ST_Area(ST_GeomFromText(@mpoly)) |\n+----------------------------------+\n|                                8 |\n+----------------------------------+"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';\nmysql> SELECT ST_Area(ST_GeomFromText(@poly));\n+---------------------------------+\n| ST_Area(ST_GeomFromText(@poly)) |\n+---------------------------------+\n|                               4 |\n+---------------------------------+\n\nmysql> SET @mpoly =\n       'MultiPolygon(((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1)))';\nmysql> SELECT ST_Area(ST_GeomFromText(@mpoly));\n+----------------------------------+\n| ST_Area(ST_GeomFromText(@mpoly)) |\n+----------------------------------+\n|                                8 |\n+----------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-area"], "Feature Type": ["Function"], "index": 216, "vector_txt": "216:Feature: ST_Area({poly|mpoly})\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_AsBinary(g\n          [, options])"], "Description": ["Convert from internal geometry format to WKB", "\nST_AsBinary(g\n          [, options]),\n          ST_AsWKB(g\n          [, options])\n", "\n          Converts a value in internal geometry format to its WKB\n          representation and returns the binary result.\n        ", "\n          The function return value has geographic coordinates\n          (latitude, longitude) in the order specified by the spatial\n          reference system that applies to the geometry argument. An\n          optional options argument may be\n          given to override the default axis order.\n        ", "\nST_AsBinary() and\n          ST_AsWKB()\n          handle their arguments as described in the introduction to\n          this section.\n        ", "Press CTRL+C to copy mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)', 4326);\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g)));\n+-----------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g))) |\n+-----------------------------------------+\n| LINESTRING(5 0,10 5,15 10)              |\n+-----------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat'))) |\n+----------------------------------------------------------------+\n| LINESTRING(0 5,5 10,10 15)                                     |\n+----------------------------------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long'))) |\n+----------------------------------------------------------------+\n| LINESTRING(5 0,10 5,15 10)                                     |\n+----------------------------------------------------------------+"], "Examples": ["mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)', 4326);\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g)));\n+-----------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g))) |\n+-----------------------------------------+\n| LINESTRING(5 0,10 5,15 10)              |\n+-----------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat'))) |\n+----------------------------------------------------------------+\n| LINESTRING(0 5,5 10,10 15)                                     |\n+----------------------------------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long'))) |\n+----------------------------------------------------------------+\n| LINESTRING(5 0,10 5,15 10)                                     |\n+----------------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-format-conversion-functions.html#function_st-asbinary"], "Feature Type": ["Function"], "index": 217, "vector_txt": "217:Feature: ST_AsBinary(g\n          [, options])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_AsGeoJSON(g\n          [, max_dec_digits [,\n          options]])"], "Description": ["Generate GeoJSON object from geometry", "\nST_AsGeoJSON(g\n          [, max_dec_digits [,\n          options]])\n", "\n          Generates a GeoJSON object from the geometry\n          g. The object string has the\n          connection character set and collation.\n        ", "\n          If any argument is NULL, the return value\n          is NULL. If any non-NULL\n          argument is invalid, an error occurs.\n        ", "\nmax_dec_digits, if specified,\n          limits the number of decimal digits for coordinates and causes\n          rounding of output. If not specified, this argument defaults\n          to its maximum value of 232 \u2212\n          1. The minimum is 0.\n        ", "\noptions, if specified, is a\n          bitmask. The following table shows the permitted flag values.\n          If the geometry argument has an SRID of 0, no CRS object is\n          produced even for those flag values that request one.\n", "\n\nFlag Value\nMeaning\n\n0\nNo options. This is the default if options is\n                not specified.\n\n1\nAdd a bounding box to the output.\n\n2\nAdd a short-format CRS URN to the output. The default format is a short\n                format\n                (EPSG:srid).\n\n4\nAdd a long-format CRS URN\n                (urn:ogc:def:crs:EPSG::srid).\n                This flag overrides flag 2. For example, option values\n                of 5 and 7 mean the same (add a bounding box and a\n                long-format CRS URN).\n\n", "Press CTRL+C to copy mysql> SELECT ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2);\n+-------------------------------------------------------------+\n| ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2) |\n+-------------------------------------------------------------+\n| {\"type\": \"Point\", \"coordinates\": [11.11, 12.22]}            |\n+-------------------------------------------------------------+"], "Examples": ["mysql> SELECT ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2);\n+-------------------------------------------------------------+\n| ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2) |\n+-------------------------------------------------------------+\n| {\"type\": \"Point\", \"coordinates\": [11.11, 12.22]}            |\n+-------------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geojson-functions.html#function_st-asgeojson"], "Feature Type": ["Function"], "index": 218, "vector_txt": "218:Feature: ST_AsGeoJSON(g\n          [, max_dec_digits [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_AsText(g [,\n          options])"], "Description": ["Convert from internal geometry format to WKT", "\nST_AsText(g [,\n          options]),\n          ST_AsWKT(g\n          [, options])\n", "\n          Converts a value in internal geometry format to its WKT\n          representation and returns the string result.\n        ", "\n          The function return value has geographic coordinates\n          (latitude, longitude) in the order specified by the spatial\n          reference system that applies to the geometry argument. An\n          optional options argument may be\n          given to override the default axis order.\n        ", "\nST_AsText() and\n          ST_AsWKT()\n          handle their arguments as described in the introduction to\n          this section.\n        ", "Press CTRL+C to copy mysql> SET @g = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,2 2,3 3)        |\n+--------------------------------+", "\n          Output for MultiPoint values includes\n          parentheses around each point. For example:\n        ", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_GeomFromText(@mp));\n+---------------------------------+\n| ST_AsText(ST_GeomFromText(@mp)) |\n+---------------------------------+\n| MULTIPOINT((1 1),(2 2),(3 3))   |\n+---------------------------------+"], "Examples": ["mysql> SET @g = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,2 2,3 3)        |\n+--------------------------------+", "mysql> SELECT ST_AsText(ST_GeomFromText(@mp));\n+---------------------------------+\n| ST_AsText(ST_GeomFromText(@mp)) |\n+---------------------------------+\n| MULTIPOINT((1 1),(2 2),(3 3))   |\n+---------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-format-conversion-functions.html#function_st-astext"], "Feature Type": ["Function"], "index": 219, "vector_txt": "219:Feature: ST_AsText(g [,\n          options])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Buffer(g,\n          d [,\n          strategy1 [,\n          strategy2 [,\n          strategy3]]])"], "Description": ["Return geometry of points within given distance from geometry", "\nST_Buffer(g,\n          d [,\n          strategy1 [,\n          strategy2 [,\n          strategy3]]])\n", "\n          Returns a geometry that represents all points whose distance\n          from the geometry value g is less\n          than or equal to a distance of d.\n          The result is in the same SRS as the geometry argument.\n        ", "\n          If the geometry argument is empty,\n          ST_Buffer() returns an empty\n          geometry.\n        ", "\n          If the distance is 0,\n          ST_Buffer() returns the\n          geometry argument unchanged:\n        ", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 0));\n+------------------------------+\n| ST_AsText(ST_Buffer(@pt, 0)) |\n+------------------------------+\n| POINT(0 0)                   |\n+------------------------------+", "\n          If the geometry argument is in a Cartesian SRS:\n", "\n\nST_Buffer() supports\n              negative distances for Polygon and\n              MultiPolygon values, and for geometry\n              collections containing Polygon or\n              MultiPolygon values.\n            \n              If the result is reduced so much that it disappears, the\n              result is an empty geometry.\n            \n              An ER_WRONG_ARGUMENTS\n              error occurs for\n              ST_Buffer() with a negative\n              distance for Point,\n              MultiPoint,\n              LineString, and\n              MultiLineString values, and for\n              geometry collections not containing any\n              Polygon or\n              MultiPolygon values.\n\n", "\nPoint geometries in a geographic SRS are\n          permitted, subject to the following conditions:\n", "\n\n              If the distance is not negative and no strategies are\n              specified, the function returns the geographic buffer of\n              the Point in its SRS. The distance\n              argument must be in the SRS distance unit (currently\n              always meters).\n            \n              If the distance is negative or any strategy (except\n              NULL) is specified, an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n\n", "\n          For non-Point geometries, an\n          ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n          error occurs.\n        ", "\nST_Buffer() permits up to three\n          optional strategy arguments following the distance argument.\n          Strategies influence buffer computation. These arguments are\n          byte string values produced by the\n          ST_Buffer_Strategy() function,\n          to be used for point, join, and end strategies:\n", "\n\n              Point strategies apply to Point and\n              MultiPoint geometries. If no point\n              strategy is specified, the default is\n              ST_Buffer_Strategy('point_circle',\n              32).\n            \n              Join strategies apply to LineString,\n              MultiLineString,\n              Polygon, and\n              MultiPolygon geometries. If no join\n              strategy is specified, the default is\n              ST_Buffer_Strategy('join_round',\n              32).\n            \n              End strategies apply to LineString and\n              MultiLineString geometries. If no end\n              strategy is specified, the default is\n              ST_Buffer_Strategy('end_round',\n              32).\n\n", "\n          Up to one strategy of each type may be specified, and they may\n          be given in any order.\n        ", "\n          If the buffer strategies are invalid, an\n          ER_WRONG_ARGUMENTS error\n          occurs. Strategies are invalid under any of these\n          circumstances:\n", "\n\n              Multiple strategies of a given type (point, join, or end)\n              are specified.\n            \n              A value that is not a strategy (such as an arbitrary\n              binary string or a number) is passed as a strategy.\n            \n              A Point strategy is passed and the\n              geometry contains no Point or\n              MultiPoint values.\n            \n              An end or join strategy is passed and the geometry\n              contains no LineString,\n              Polygon,\n              MultiLinestring or\n              MultiPolygon values.\n\n", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt_strategy = ST_Buffer_Strategy('point_square');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 2, @pt_strategy));\n+--------------------------------------------+\n| ST_AsText(ST_Buffer(@pt, 2, @pt_strategy)) |\n+--------------------------------------------+\n| POLYGON((-2 -2,2 -2,2 2,-2 2,-2 -2))       |\n+--------------------------------------------+", "Press CTRL+C to copy mysql> SET @ls = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @end_strategy = ST_Buffer_Strategy('end_flat');\nmysql> SET @join_strategy = ST_Buffer_Strategy('join_round', 10);\nmysql> SELECT ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))\n+---------------------------------------------------------------+\n| ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))   |\n+---------------------------------------------------------------+\n| POLYGON((5 5,5 10,0 10,-3.5355339059327373 8.535533905932738, |\n| -5 5,-5 0,0 0,5 0,5 5))                                       |\n+---------------------------------------------------------------+"], "Examples": ["mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 0));\n+------------------------------+\n| ST_AsText(ST_Buffer(@pt, 0)) |\n+------------------------------+\n| POINT(0 0)                   |\n+------------------------------+", "mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt_strategy = ST_Buffer_Strategy('point_square');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 2, @pt_strategy));\n+--------------------------------------------+\n| ST_AsText(ST_Buffer(@pt, 2, @pt_strategy)) |\n+--------------------------------------------+\n| POLYGON((-2 -2,2 -2,2 2,-2 2,-2 -2))       |\n+--------------------------------------------+", "mysql> SET @ls = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @end_strategy = ST_Buffer_Strategy('end_flat');\nmysql> SET @join_strategy = ST_Buffer_Strategy('join_round', 10);\nmysql> SELECT ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))\n+---------------------------------------------------------------+\n| ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))   |\n+---------------------------------------------------------------+\n| POLYGON((5 5,5 10,0 10,-3.5355339059327373 8.535533905932738, |\n| -5 5,-5 0,0 0,5 0,5 5))                                       |\n+---------------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-buffer"], "Feature Type": ["Function"], "index": 220, "vector_txt": "220:Feature: ST_Buffer(g,\n          d [,\n          strategy1 [,\n          strategy2 [,\n          strategy3]]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_add_managed()"], "Description": ["Add group member source server configuration information to a", "\nasynchronous_connection_failover_add_managed()\n", "\n            Add configuration information for a replication source\n            server that is part of a managed group (a Group Replication\n            group member) to the source list for a replication channel.\n            You only need to add one group member. The replica\n            automatically adds the rest from the current group\n            membership, then keeps the source list updated in line with\n            membership change.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_add_managed(channel, managed_type, managed_name, host, port, network_namespace, primary_weight, secondary_weight)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server is part\n                of the source list.\n              \nmanaged_type: The type of\n                managed service that the asynchronous connection\n                failover mechanism must provide for this server. The\n                only value currently accepted is\n                GroupReplication.\n              \nmanaged_name: The identifier\n                for the managed group that the server is a part of. For\n                the GroupReplication managed service,\n                the identifier is the value of the\n                group_replication_group_name\n                system variable.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n              \nprimary_weight: The priority\n                of this replication source server in the replication\n                channel's source list when it is acting as the primary\n                for the managed group. The weight is from 1 to 100, with\n                100 being the highest. For the primary, 80 is a suitable\n                weight. The asynchronous connection failover mechanism\n                activates if the currently connected source is not the\n                highest weighted in the group. Assuming that you set up\n                the managed group to give a higher weight to a primary\n                and a lower weight to a secondary, when the primary\n                changes, its weight increases, and the replica changes\n                over the connection to it.\n              \nsecondary_weight: The\n                priority of this replication source server in the\n                replication channel's source list when it is acting as a\n                secondary in the managed group. The weight is from 1 to\n                100, with 100 being the highest. For a secondary, 60 is\n                a suitable weight.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_add_managed('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60);\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60) |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully inserted.                                                                                        |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_add_managed('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60);\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60) |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully inserted.                                                                                        |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-managed"], "Feature Type": ["Function"], "index": 221, "vector_txt": "221:Feature: asynchronous_connection_failover_add_managed()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["BIT_OR(expr)\n            [over_clause]"], "Description": ["Return bitwise OR", "\nBIT_OR(expr)\n            [over_clause]\n", "\n            Returns the bitwise OR of all bits in\n            expr.\n          ", "\n            The result type depends on whether the function argument\n            values are evaluated as binary strings or numbers:\n", "\n\n                Binary-string evaluation occurs when the argument values\n                have a binary string type, and the argument is not a\n                hexadecimal literal, bit literal, or\n                NULL literal. Numeric evaluation\n                occurs otherwise, with argument value conversion to\n                unsigned 64-bit integers as necessary.\n              \n                Binary-string evaluation produces a binary string of the\n                same length as the argument values. If argument values\n                have unequal lengths, an\n                ER_INVALID_BITWISE_OPERANDS_SIZE\n                error occurs. If the argument size exceeds 511 bytes, an\n                ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE\n                error occurs. Numeric evaluation produces an unsigned\n                64-bit integer.\n\n", "\n            If there are no matching rows,\n            BIT_OR() returns a neutral\n            value (all bits set to 0) having the same length as the\n            argument values.\n          ", "\nNULL values do not affect the result\n            unless all values are NULL. In that case,\n            the result is a neutral value having the same length as the\n            argument values.\n          ", "\n            For more information discussion about argument evaluation\n            and result types, see the introductory discussion in\n            Section\u00a014.12, \u201cBit Functions and Operators\u201d.\n          ", "\n            If BIT_OR() is invoked from\n            within the mysql client, binary string\n            results display using hexadecimal notation, depending on the\n            value of the --binary-as-hex.\n            For more information about that option, see\n            Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_bit-or"], "Feature Type": ["Function"], "index": 222, "vector_txt": "222:Feature: BIT_OR(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Buffer_Strategy(strategy\n          [, points_per_circle])"], "Description": ["Produce strategy option for ST_Buffer()", "\nST_Buffer_Strategy(strategy\n          [, points_per_circle])\n", "\n          This function returns a strategy byte string for use with\n          ST_Buffer() to influence buffer\n          computation.\n        ", "\n          Information about strategies is available at\n          Boost.org.\n        ", "\n          The first argument must be a string indicating a strategy\n          option:\n", "\n\n              For point strategies, permitted values are\n              'point_circle' and\n              'point_square'.\n            \n              For join strategies, permitted values are\n              'join_round' and\n              'join_miter'.\n            \n              For end strategies, permitted values are\n              'end_round' and\n              'end_flat'.\n\n", "\n          If the first argument is 'point_circle',\n          'join_round',\n          'join_miter', or\n          'end_round', the\n          points_per_circle argument must be\n          given as a positive numeric value. The maximum\n          points_per_circle value is the\n          value of the\n          max_points_in_geometry system\n          variable.\n        ", "\n          For examples, see the description of\n          ST_Buffer().\n        ", "\nST_Buffer_Strategy() handles\n          its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If any argument is invalid, an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n            \n              If the first argument is 'point_square'\n              or 'end_flat', the\n              points_per_circle argument must\n              not be given or an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-buffer-strategy"], "Feature Type": ["Function"], "index": 223, "vector_txt": "223:Feature: ST_Buffer_Strategy(strategy\n          [, points_per_circle])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Centroid({poly|mpoly})"], "Description": ["Return centroid as a point", "\nST_Centroid({poly|mpoly})\n", "\n            Returns the mathematical centroid for the\n            Polygon or\n            MultiPolygon argument as a\n            Point. The result is not guaranteed to be\n            on the MultiPolygon.\n          ", "\n            This function processes geometry collections by computing\n            the centroid point for components of highest dimension in\n            the collection. Such components are extracted and made into\n            a single MultiPolygon,\n            MultiLineString, or\n            MultiPoint for centroid computation.\n          ", "\nST_Centroid() handles its\n            arguments as described in the introduction to this section,\n            with these exceptions:\n", "\n\n                The return value is NULL for the\n                additional condition that the argument is an empty\n                geometry collection.\n              \n                If the geometry has an SRID value for a geographic\n                spatial reference system (SRS), an\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs.\n\n", "Press CTRL+C to copy mysql> SET @poly =\n       ST_GeomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7,5 5))');\nmysql> SELECT ST_GeometryType(@poly),ST_AsText(ST_Centroid(@poly));\n+------------------------+--------------------------------------------+\n| ST_GeometryType(@poly) | ST_AsText(ST_Centroid(@poly))              |\n+------------------------+--------------------------------------------+\n| POLYGON                | POINT(4.958333333333333 4.958333333333333) |\n+------------------------+--------------------------------------------+"], "Examples": ["mysql> SET @poly =\n       ST_GeomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7,5 5))');\nmysql> SELECT ST_GeometryType(@poly),ST_AsText(ST_Centroid(@poly));\n+------------------------+--------------------------------------------+\n| ST_GeometryType(@poly) | ST_AsText(ST_Centroid(@poly))              |\n+------------------------+--------------------------------------------+\n| POLYGON                | POINT(4.958333333333333 4.958333333333333) |\n+------------------------+--------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-centroid"], "Feature Type": ["Function"], "index": 224, "vector_txt": "224:Feature: ST_Centroid({poly|mpoly})\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Collect([DISTINCT]\n          g)\n          [over_clause]"], "Description": ["Aggregate spatial values into collection", "\nST_Collect([DISTINCT]\n          g)\n          [over_clause]\n", "\n          Aggregates geometry values and returns a single geometry\n          collection value. With the DISTINCT option,\n          returns the aggregation of the distinct geometry arguments.\n        ", "\n          As with other aggregate functions, GROUP BY\n          may be used to group arguments into subsets.\n          ST_Collect() returns an\n          aggregate value for each subset.\n        ", "\n          This function executes as a window function if\n          over_clause is present.\n          over_clause is as described in\n          Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d. In contrast to most\n          aggregate functions that support windowing,\n          ST_Collect() permits use of\n          over_clause together with\n          DISTINCT.\n        ", "\nST_Collect() handles its\n          arguments as follows:\n", "\n\nNULL arguments are ignored.\n            \n              If all arguments are NULL or the\n              aggregate result is empty, the return value is\n              NULL.\n            \n              If any geometry argument is not a syntactically\n              well-formed geometry, an\n              ER_GIS_INVALID_DATA error\n              occurs.\n            \n              If any geometry argument is a syntactically well-formed\n              geometry in an undefined spatial reference system (SRS),\n              an ER_SRS_NOT_FOUND error\n              occurs.\n            \n              If there are multiple geometry arguments and those\n              arguments are in the same SRS, the return value is in that\n              SRS. If those arguments are not in the same SRS, an\n              ER_GIS_DIFFERENT_SRIDS_AGGREGATION\n              error occurs.\n            \n              The result is the narrowest\n              MultiXxx or\n              GeometryCollection value possible, with\n              the result type determined from the\n              non-NULL geometry arguments as follows:\n\n\n\n                  If all arguments are Point values,\n                  the result is a MultiPoint value.\n                \n                  If all arguments are LineString\n                  values, the result is a\n                  MultiLineString value.\n                \n                  If all arguments are Polygon\n                  values, the result is a\n                  MultiPolygon value.\n                \n                  Otherwise, the arguments are a mix of geometry types\n                  and the result is a\n                  GeometryCollection value.\n\n\n\n", "\n          This example data set shows hypothetical products by year and\n          location of manufacture:\n        ", "Press CTRL+C to copy CREATE TABLE product (\n  year INTEGER,\n  product VARCHAR(256),\n  location Geometry\n);\n\nINSERT INTO product\n(year,  product,     location) VALUES\n(2000, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2000, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"Abacus\"    , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"TV\"        , ST_GeomFromText('point(38  60)',4326)),\n(2001, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2001, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326));", "\n          Some sample queries using\n          ST_Collect() on the data set:\n        ", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_Collect(location)) AS result\n       FROM product;\n+------------------------------------------------------------------+\n| result                                                           |\n+------------------------------------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60),(60 -24),(28 -77)) |\n+------------------------------------------------------------------+\n\nmysql> SELECT ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product;\n+---------------------------------------+\n| result                                |\n+---------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(38 60)) |\n+---------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(location)) AS result\n       FROM product GROUP BY year;\n+------+------------------------------------------------+\n| year | result                                         |\n+------+------------------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))                  |\n+------+------------------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product GROUP BY year;\n+------+---------------------------------------+\n| year | result                                |\n+------+---------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))         |\n+------+---------------------------------------+\n\n# selects nothing\nmysql> SELECT ST_Collect(location) AS result\n       FROM product WHERE year = 1999;\n+--------+\n| result |\n+--------+\n| NULL   |\n+--------+\n\nmysql> SELECT ST_AsText(ST_Collect(location)\n         OVER (ORDER BY year, product ROWS BETWEEN 1 PRECEDING AND CURRENT ROW))\n         AS result\n       FROM product;\n+-------------------------------+\n| result                        |\n+-------------------------------+\n| MULTIPOINT((28 -77))          |\n| MULTIPOINT((28 -77),(60 -24)) |\n| MULTIPOINT((60 -24),(28 -77)) |\n| MULTIPOINT((28 -77),(38 60))  |\n| MULTIPOINT((38 60),(60 -24))  |\n| MULTIPOINT((60 -24),(28 -77)) |\n+-------------------------------+"], "Examples": ["CREATE TABLE product (\n  year INTEGER,\n  product VARCHAR(256),\n  location Geometry\n);\n\nINSERT INTO product\n(year,  product,     location) VALUES\n(2000, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2000, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"Abacus\"    , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"TV\"        , ST_GeomFromText('point(38  60)',4326)),\n(2001, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2001, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326));", "mysql> SELECT ST_AsText(ST_Collect(location)) AS result\n       FROM product;\n+------------------------------------------------------------------+\n| result                                                           |\n+------------------------------------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60),(60 -24),(28 -77)) |\n+------------------------------------------------------------------+\n\nmysql> SELECT ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product;\n+---------------------------------------+\n| result                                |\n+---------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(38 60)) |\n+---------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(location)) AS result\n       FROM product GROUP BY year;\n+------+------------------------------------------------+\n| year | result                                         |\n+------+------------------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))                  |\n+------+------------------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product GROUP BY year;\n+------+---------------------------------------+\n| year | result                                |\n+------+---------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))         |\n+------+---------------------------------------+\n\n# selects nothing\nmysql> SELECT ST_Collect(location) AS result\n       FROM product WHERE year = 1999;\n+--------+\n| result |\n+--------+\n| NULL   |\n+--------+\n\nmysql> SELECT ST_AsText(ST_Collect(location)\n         OVER (ORDER BY year, product ROWS BETWEEN 1 PRECEDING AND CURRENT ROW))\n         AS result\n       FROM product;\n+-------------------------------+\n| result                        |\n+-------------------------------+\n| MULTIPOINT((28 -77))          |\n| MULTIPOINT((28 -77),(60 -24)) |\n| MULTIPOINT((60 -24),(28 -77)) |\n| MULTIPOINT((28 -77),(38 60))  |\n| MULTIPOINT((38 60),(60 -24))  |\n| MULTIPOINT((60 -24),(28 -77)) |\n+-------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-aggregate-functions.html#function_st-collect"], "Feature Type": ["Function"], "index": 225, "vector_txt": "225:Feature: ST_Collect([DISTINCT]\n          g)\n          [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Contains(g1,\n            g2)"], "Description": ["Whether one geometry contains another", "\nST_Contains(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 completely contains\n            g2. This tests the opposite\n            relationship as ST_Within().\n          ", "\nST_Contains() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-contains"], "Feature Type": ["Function"], "index": 226, "vector_txt": "226:Feature: ST_Contains(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_ConvexHull(g)"], "Description": ["Return convex hull of geometry", "\nST_ConvexHull(g)\n", "\n          Returns a geometry that represents the convex hull of the\n          geometry value g.\n        ", "\n          This function computes a geometry's convex hull by first\n          checking whether its vertex points are colinear. The function\n          returns a linear hull if so, a polygon hull otherwise. This\n          function processes geometry collections by extracting all\n          vertex points of all components of the collection, creating a\n          MultiPoint value from them, and computing\n          its convex hull.\n        ", "\nST_ConvexHull() handles its\n          arguments as described in the introduction to this section,\n          with this exception:\n", "\n\n              The return value is NULL for the\n              additional condition that the argument is an empty\n              geometry collection.\n\n", "Press CTRL+C to copy mysql> SET @g = 'MULTIPOINT(5 0,25 0,15 10,15 25)';\nmysql> SELECT ST_AsText(ST_ConvexHull(ST_GeomFromText(@g)));\n+-----------------------------------------------+\n| ST_AsText(ST_ConvexHull(ST_GeomFromText(@g))) |\n+-----------------------------------------------+\n| POLYGON((5 0,25 0,15 25,5 0))                 |\n+-----------------------------------------------+"], "Examples": ["mysql> SET @g = 'MULTIPOINT(5 0,25 0,15 10,15 25)';\nmysql> SELECT ST_AsText(ST_ConvexHull(ST_GeomFromText(@g)));\n+-----------------------------------------------+\n| ST_AsText(ST_ConvexHull(ST_GeomFromText(@g))) |\n+-----------------------------------------------+\n| POLYGON((5 0,25 0,15 25,5 0))                 |\n+-----------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-convexhull"], "Feature Type": ["Function"], "index": 227, "vector_txt": "227:Feature: ST_ConvexHull(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Crosses(g1,\n            g2)"], "Description": ["Whether one geometry crosses another", "\nST_Crosses(g1,\n            g2)\n", "\n            Two geometries spatially cross if their\n            spatial relation has the following properties:\n", "\n\n                Unless g1 and\n                g2 are both of dimension 1:\n                g1 crosses\n                g2 if the interior of\n                g2 has points in common with\n                the interior of g1, but\n                g2 does not cover the entire\n                interior of g1.\n              \n                If both g1 and\n                g2 are of dimension 1: If the\n                lines cross each other in a finite number of points\n                (that is, no common line segments, only single points in\n                common).\n\n", "\n            This function returns 1 or 0 to indicate whether\n            g1 spatially crosses\n            g2.\n          ", "\nST_Crosses() handles its\n            arguments as described in the introduction to this section\n            except that the return value is NULL for\n            these additional conditions:\n", "\n\ng1 is of dimension 2\n                (Polygon or\n                MultiPolygon).\n              \ng2 is of dimension 1\n                (Point or\n                MultiPoint).\n\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-crosses"], "Feature Type": ["Function"], "index": 228, "vector_txt": "228:Feature: ST_Crosses(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Difference(g1,\n          g2)"], "Description": ["Return point set difference of two geometries", "\nST_Difference(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set difference of\n          the geometry values g1 and\n          g2. The result is in the same SRS\n          as the geometry arguments.\n        ", "\nST_Difference() permits\n          arguments in either a Cartesian or a geographic SRS, and\n          handles its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(1 1)                         |\n+------------------------------------+"], "Examples": ["mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(1 1)                         |\n+------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-difference"], "Feature Type": ["Function"], "index": 229, "vector_txt": "229:Feature: ST_Difference(g1,\n          g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Dimension(g)"], "Description": ["Dimension of geometry", "\nST_Dimension(g)\n", "\n            Returns the inherent dimension of the geometry value\n            g. The dimension can be \u22121,\n            0, 1, or 2. The meaning of these values is given in\n            Section\u00a013.4.2.2, \u201cGeometry Class\u201d.\n          ", "\nST_Dimension() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------------+\n| ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------------+\n|                                                    1 |\n+------------------------------------------------------+"], "Examples": ["mysql> SELECT ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------------+\n| ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------------+\n|                                                    1 |\n+------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-dimension"], "Feature Type": ["Function"], "index": 230, "vector_txt": "230:Feature: ST_Dimension(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Disjoint(g1,\n            g2)"], "Description": ["Whether one geometry is disjoint from another", "\nST_Disjoint(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 is spatially disjoint from\n            (does not intersect) g2.\n          ", "\nST_Disjoint() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-disjoint"], "Feature Type": ["Function"], "index": 231, "vector_txt": "231:Feature: ST_Disjoint(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Distance(g1,\n            g2 [,\n            unit])"], "Description": ["The distance of one geometry from another", "\nST_Distance(g1,\n            g2 [,\n            unit])\n", "\n            Returns the distance between g1\n            and g2, measured in the length\n            unit of the spatial reference system (SRS) of the geometry\n            arguments, or in the unit of the optional\n            unit argument if that is\n            specified.\n          ", "\n            This function processes geometry collections by returning\n            the shortest distance among all combinations of the\n            components of the two geometry arguments.\n          ", "\nST_Distance() handles its\n            geometry arguments as described in the introduction to this\n            section, with these exceptions:\n", "\n\nST_Distance() detects\n                arguments in a geographic (ellipsoidal) spatial\n                reference system and returns the geodetic distance on\n                the ellipsoid.\n                ST_Distance() supports\n                distance calculations for geographic SRS arguments of\n                all geometry types.\n              \n                If any argument is geometrically invalid, either the\n                result is an undefined distance (that is, it can be any\n                number), or an error occurs.\n              \n                If an intermediate or final result produces\n                NaN or a negative number, an\n                ER_GIS_INVALID_DATA\n                error occurs.\n\n", "\nST_Distance() permits\n            specifying the linear unit for the returned distance value\n            with an optional unit argument\n            which ST_Distance() handles\n            as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('POINT(1 1)');\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)');\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|    1.4142135623730951 |\n+-----------------------+\n\nmysql> SET @g1 = ST_GeomFromText('POINT(1 1)', 4326);\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)', 4326);\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|     156874.3859490455 |\n+-----------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'metre');\n+--------------------------------+\n| ST_Distance(@g1, @g2, 'metre') |\n+--------------------------------+\n|              156874.3859490455 |\n+--------------------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'foot');\n+-------------------------------+\n| ST_Distance(@g1, @g2, 'foot') |\n+-------------------------------+\n|             514679.7439273146 |\n+-------------------------------+", "\n            For the special case of distance calculations on a sphere,\n            see the ST_Distance_Sphere()\n            function.\n          "], "Examples": ["mysql> SET @g1 = ST_GeomFromText('POINT(1 1)');\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)');\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|    1.4142135623730951 |\n+-----------------------+\n\nmysql> SET @g1 = ST_GeomFromText('POINT(1 1)', 4326);\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)', 4326);\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|     156874.3859490455 |\n+-----------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'metre');\n+--------------------------------+\n| ST_Distance(@g1, @g2, 'metre') |\n+--------------------------------+\n|              156874.3859490455 |\n+--------------------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'foot');\n+-------------------------------+\n| ST_Distance(@g1, @g2, 'foot') |\n+-------------------------------+\n|             514679.7439273146 |\n+-------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-distance"], "Feature Type": ["Function"], "index": 232, "vector_txt": "232:Feature: ST_Distance(g1,\n            g2 [,\n            unit])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_add_source()"], "Description": ["Add source server configuration information server to a", "\nasynchronous_connection_failover_add_source()\n", "\n            Add configuration information for a replication source\n            server to the source list for a replication channel.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_add_source(channel, host, port, network_namespace, weight)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server is part\n                of the source list.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n              \nweight: The priority of this\n                replication source server in the replication channel's\n                source list. The priority is from 1 to 100, with 100\n                being the highest, and 50 being the default. When the\n                asynchronous connection failover mechanism activates,\n                the source with the highest priority setting among the\n                alternative sources listed in the source list for the\n                channel is chosen for the first connection attempt. If\n                this attempt does not work, the replica tries with all\n                the listed sources in descending order of priority, then\n                starts again from the highest priority source. If\n                multiple sources have the same priority, the replica\n                orders them randomly. The asynchronous connection\n                failover mechanism activates if the source currently\n                connected is not the highest weighted in the group.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80);\n+-------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80)              |\n+-------------------------------------------------------------------------------------------------+\n| Source configuration details successfully inserted.                                             |\n+-------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80);\n+-------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80)              |\n+-------------------------------------------------------------------------------------------------+\n| Source configuration details successfully inserted.                                             |\n+-------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-source"], "Feature Type": ["Function"], "index": 233, "vector_txt": "233:Feature: asynchronous_connection_failover_add_source()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Distance_Sphere(g1,\n          g2 [,\n          radius])"], "Description": ["Minimum distance on earth between two geometries", "\nST_Distance_Sphere(g1,\n          g2 [,\n          radius])\n", "\n          Returns the minimum spherical distance between\n          Point or MultiPoint\n          arguments on a sphere, in meters. (For general-purpose\n          distance calculations, see the\n          ST_Distance() function.) The\n          optional radius argument should be\n          given in meters.\n        ", "\n          If both geometry parameters are valid Cartesian\n          Point or MultiPoint\n          values in SRID 0, the return value is shortest distance\n          between the two geometries on a sphere with the provided\n          radius. If omitted, the default radius is 6,370,986 meters,\n          Point X and Y coordinates are interpreted as longitude and\n          latitude, respectively, in degrees.\n        ", "\n          If both geometry parameters are valid Point\n          or MultiPoint values in a geographic\n          spatial reference system (SRS), the return value is the\n          shortest distance between the two geometries on a sphere with\n          the provided radius. If omitted, the default radius is equal\n          to the mean radius, defined as (2a+b)/3, where a is the\n          semi-major axis and b is the semi-minor axis of the SRS.\n        ", "\nST_Distance_Sphere() handles\n          its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              Supported geometry argument combinations are\n              Point and Point, or\n              Point and MultiPoint\n              (in any argument order). If at least one of the geometries\n              is neither Point nor\n              MultiPoint, and its SRID is 0, an\n              ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n              error occurs. If at least one of the geometries is neither\n              Point nor\n              MultiPoint, and its SRID refers to a\n              geographic SRS, an\n              ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n              error occurs. If any geometry refers to a projected SRS,\n              an\n              ER_NOT_IMPLEMENTED_FOR_PROJECTED_SRS\n              error occurs.\n            \n              If any argument has a longitude or latitude that is out of\n              range, an error occurs:\n\n\n\n                  If a longitude value is not in the range (\u2212180,\n                  180], an\n                  ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                  error occurs.\n                \n                  If a latitude value is not in the range [\u221290,\n                  90], an\n                  ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                  error occurs.\n\n\n\n              Ranges shown are in degrees. If an SRS uses another unit,\n              the range uses the corresponding values in its unit. The\n              exact range limits deviate slightly due to floating-point\n              arithmetic.\n            \n              If the radius argument is\n              present but not positive, an\n              ER_NONPOSITIVE_RADIUS\n              error occurs.\n            \n              If the distance exceeds the range of a double-precision\n              number, an\n              ER_STD_OVERFLOW_ERROR\n              error occurs.\n\n", "Press CTRL+C to copy mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(180 0)');\nmysql> SELECT ST_Distance_Sphere(@pt1, @pt2);\n+--------------------------------+\n| ST_Distance_Sphere(@pt1, @pt2) |\n+--------------------------------+\n|             20015042.813723423 |\n+--------------------------------+"], "Examples": ["mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(180 0)');\nmysql> SELECT ST_Distance_Sphere(@pt1, @pt2);\n+--------------------------------+\n| ST_Distance_Sphere(@pt1, @pt2) |\n+--------------------------------+\n|             20015042.813723423 |\n+--------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-distance-sphere"], "Feature Type": ["Function"], "index": 234, "vector_txt": "234:Feature: ST_Distance_Sphere(g1,\n          g2 [,\n          radius])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_EndPoint(ls)"], "Description": ["End Point of LineString", "\nST_EndPoint(ls)\n", "\n            Returns the Point that is the endpoint of\n            the LineString value\n            ls.\n          ", "\nST_EndPoint() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_EndPoint(ST_GeomFromText(@ls)));\n+----------------------------------------------+\n| ST_AsText(ST_EndPoint(ST_GeomFromText(@ls))) |\n+----------------------------------------------+\n| POINT(3 3)                                   |\n+----------------------------------------------+"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_EndPoint(ST_GeomFromText(@ls)));\n+----------------------------------------------+\n| ST_AsText(ST_EndPoint(ST_GeomFromText(@ls))) |\n+----------------------------------------------+\n| POINT(3 3)                                   |\n+----------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-endpoint"], "Feature Type": ["Function"], "index": 235, "vector_txt": "235:Feature: ST_EndPoint(ls)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Envelope(g)"], "Description": ["Return MBR of geometry", "\nST_Envelope(g)\n", "\n            Returns the minimum bounding rectangle (MBR) for the\n            geometry value g. The result is\n            returned as a Polygon value that is\n            defined by the corner points of the bounding box:\n          ", "Press CTRL+C to copy POLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)'))) |\n+----------------------------------------------------------------+\n| POLYGON((1 1,2 1,2 2,1 2,1 1))                                 |\n+----------------------------------------------------------------+", "\n            If the argument is a point or a vertical or horizontal line\n            segment, ST_Envelope()\n            returns the point or the line segment as its MBR rather than\n            returning an invalid polygon:\n          ", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)'))) |\n+----------------------------------------------------------------+\n| LINESTRING(1 1,1 2)                                            |\n+----------------------------------------------------------------+", "\nST_Envelope() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                If the geometry has an SRID value for a geographic\n                spatial reference system (SRS), an\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs.\n\n"], "Examples": ["mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)'))) |\n+----------------------------------------------------------------+\n| POLYGON((1 1,2 1,2 2,1 2,1 1))                                 |\n+----------------------------------------------------------------+", "mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)'))) |\n+----------------------------------------------------------------+\n| LINESTRING(1 1,1 2)                                            |\n+----------------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-envelope"], "Feature Type": ["Function"], "index": 236, "vector_txt": "236:Feature: ST_Envelope(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Equals(g1,\n            g2)"], "Description": ["Whether one geometry is equal to another", "\nST_Equals(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 is spatially equal to\n            g2.\n          ", "\nST_Equals() handles its\n            arguments as described in the introduction to this section,\n            except that it does not return NULL for\n            empty geometry arguments.\n          ", "Press CTRL+C to copy mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);\n+---------------------+---------------------+\n| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |\n+---------------------+---------------------+\n|                   1 |                   0 |\n+---------------------+---------------------+"], "Examples": ["mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);\n+---------------------+---------------------+\n| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |\n+---------------------+---------------------+\n|                   1 |                   0 |\n+---------------------+---------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-equals"], "Feature Type": ["Function"], "index": 237, "vector_txt": "237:Feature: ST_Equals(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_ExteriorRing(poly)"], "Description": ["Return exterior ring of Polygon", "\nST_ExteriorRing(poly)\n", "\n            Returns the exterior ring of the Polygon\n            value poly as a\n            LineString.\n          ", "\nST_ExteriorRing() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly)));\n+----------------------------------------------------+\n| ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly))) |\n+----------------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)                    |\n+----------------------------------------------------+"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly)));\n+----------------------------------------------------+\n| ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly))) |\n+----------------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)                    |\n+----------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-exteriorring"], "Feature Type": ["Function"], "index": 238, "vector_txt": "238:Feature: ST_ExteriorRing(poly)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_FrechetDistance(g1,\n            g2 [,\n            unit])"], "Description": ["The discrete Fr\u00e9chet distance of one geometry from another", "\nST_FrechetDistance(g1,\n            g2 [,\n            unit])\n", "\n            Returns the discrete Fr\u00e9chet distance between two\n            geometries, reflecting how similar the geometries are. The\n            result is a double-precision number measured in the length\n            unit of the spatial reference system (SRS) of the geometry\n            arguments, or in the length unit of the\n            unit argument if that argument is\n            given.\n          ", "\n            This function implements the discrete Fr\u00e9chet distance,\n            which means it is restricted to distances between the points\n            of the geometries. For example, given two\n            LineString arguments, only the points\n            explicitly mentioned in the geometries are considered.\n            Points on the line segments between these points are not\n            considered.\n          ", "\nST_FrechetDistance() handles\n            its geometry arguments as described in the introduction to\n            this section, with these exceptions:\n", "\n\n                The geometries may have a Cartesian or geographic SRS,\n                but only LineString values are\n                supported. If the arguments are in the same Cartesian or\n                geographic SRS, but either is not a\n                LineString, an\n                ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n                or\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs, depending on the SRS type.\n\n", "\nST_FrechetDistance() handles\n            its optional unit argument as\n            described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|             2.8284271247461903 |\n+--------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|              313421.1999416798 |\n+--------------------------------+\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2, 'foot');\n+----------------------------------------+\n| ST_FrechetDistance(@ls1, @ls2, 'foot') |\n+----------------------------------------+\n|                     1028284.7767115477 |\n+----------------------------------------+"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|             2.8284271247461903 |\n+--------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|              313421.1999416798 |\n+--------------------------------+\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2, 'foot');\n+----------------------------------------+\n| ST_FrechetDistance(@ls1, @ls2, 'foot') |\n+----------------------------------------+\n|                     1028284.7767115477 |\n+----------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-frechetdistance"], "Feature Type": ["Function"], "index": 239, "vector_txt": "239:Feature: ST_FrechetDistance(g1,\n            g2 [,\n            unit])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeoHash(longitude,\n          latitude,\n          max_length)"], "Description": ["Produce a geohash value", "\nST_GeoHash(longitude,\n          latitude,\n          max_length),\n          ST_GeoHash(point,\n          max_length)\n", "\n          Returns a geohash string in the connection character set and\n          collation.\n        ", "\n          For the first syntax, the longitude\n          must be a number in the range [\u2212180, 180], and the\n          latitude must be a number in the\n          range [\u221290, 90]. For the second syntax, a\n          POINT value is required, where the X and Y\n          coordinates are in the valid ranges for longitude and\n          latitude, respectively.\n        ", "\n          The resulting string is no longer than\n          max_length characters, which has an\n          upper limit of 100. The string might be shorter than\n          max_length characters because the\n          algorithm that creates the geohash value continues until it\n          has created a string that is either an exact representation of\n          the location or max_length\n          characters, whichever comes first.\n        ", "\nST_GeoHash() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SELECT ST_GeoHash(180,0,10), ST_GeoHash(-180,-90,15);\n+----------------------+-------------------------+\n| ST_GeoHash(180,0,10) | ST_GeoHash(-180,-90,15) |\n+----------------------+-------------------------+\n| xbpbpbpbpb           | 000000000000000         |\n+----------------------+-------------------------+"], "Examples": ["mysql> SELECT ST_GeoHash(180,0,10), ST_GeoHash(-180,-90,15);\n+----------------------+-------------------------+\n| ST_GeoHash(180,0,10) | ST_GeoHash(-180,-90,15) |\n+----------------------+-------------------------+\n| xbpbpbpbpb           | 000000000000000         |\n+----------------------+-------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-geohash"], "Feature Type": ["Function"], "index": 240, "vector_txt": "240:Feature: ST_GeoHash(longitude,\n          latitude,\n          max_length)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeomCollFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Return geometry collection from WKT", "\nST_GeomCollFromText(wkt\n          [, srid [,\n          options]]),\n          ST_GeometryCollectionFromText(wkt\n          [, srid [,\n          options]]),\n          ST_GeomCollFromTxt(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a GeometryCollection value using\n          its WKT representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g = \"MULTILINESTRING((10 10, 11 11), (9 9, 10 10))\";\nmysql> SELECT ST_AsText(ST_GeomCollFromText(@g));\n+--------------------------------------------+\n| ST_AsText(ST_GeomCollFromText(@g))         |\n+--------------------------------------------+\n| MULTILINESTRING((10 10,11 11),(9 9,10 10)) |\n+--------------------------------------------+"], "Examples": ["mysql> SET @g = \"MULTILINESTRING((10 10, 11 11), (9 9, 10 10))\";\nmysql> SELECT ST_AsText(ST_GeomCollFromText(@g));\n+--------------------------------------------+\n| ST_AsText(ST_GeomCollFromText(@g))         |\n+--------------------------------------------+\n| MULTILINESTRING((10 10,11 11),(9 9,10 10)) |\n+--------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-geomcollfromtext"], "Feature Type": ["Function"], "index": 241, "vector_txt": "241:Feature: ST_GeomCollFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeomCollFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Return geometry collection from WKB", "\nST_GeomCollFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_GeometryCollectionFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a GeometryCollection value using\n          its WKB representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-geomcollfromwkb"], "Feature Type": ["Function"], "index": 242, "vector_txt": "242:Feature: ST_GeomCollFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeometryN(gc,\n            N)"], "Description": ["Return N-th geometry from geometry collection", "\nST_GeometryN(gc,\n            N)\n", "\n            Returns the N-th geometry in the\n            GeometryCollection value\n            gc. Geometries are numbered\n            beginning with 1.\n          ", "\nST_GeometryN() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1));\n+-------------------------------------------------+\n| ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1)) |\n+-------------------------------------------------+\n| POINT(1 1)                                      |\n+-------------------------------------------------+"], "Examples": ["mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1));\n+-------------------------------------------------+\n| ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1)) |\n+-------------------------------------------------+\n| POINT(1 1)                                      |\n+-------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-geometrycollection-property-functions.html#function_st-geometryn"], "Feature Type": ["Function"], "index": 243, "vector_txt": "243:Feature: ST_GeometryN(gc,\n            N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.3 Asynchronous Replication Channel Failover Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_delete_managed()"], "Description": ["Remove a managed group from a replication channel source list", "\nasynchronous_connection_failover_delete_managed()\n", "\n            Remove an entire managed group from the source list for a\n            replication channel. When you use this function, all the\n            replication source servers defined in the managed group are\n            removed from the channel's source list.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_delete_managed(channel, managed_name)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server was\n                part of the source list.\n              \nmanaged_name: The identifier\n                for the managed group that the server is a part of. For\n                the GroupReplication managed service,\n                the identifier is the value of the\n                group_replication_group_name\n                system variable.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa');\n+-----------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa') |\n+-----------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully deleted.                                          |\n+-----------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa');\n+-----------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa') |\n+-----------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully deleted.                                          |\n+-----------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-managed"], "Feature Type": ["Function"], "index": 244, "vector_txt": "244:Feature: asynchronous_connection_failover_delete_managed()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeometryType(g)"], "Description": ["Return name of geometry type", "\nST_GeometryType(g)\n", "\n            Returns a binary string indicating the name of the geometry\n            type of which the geometry instance\n            g is a member. The name\n            corresponds to one of the instantiable\n            Geometry subclasses.\n          ", "\nST_GeometryType() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_GeometryType(ST_GeomFromText('POINT(1 1)'));\n+------------------------------------------------+\n| ST_GeometryType(ST_GeomFromText('POINT(1 1)')) |\n+------------------------------------------------+\n| POINT                                          |\n+------------------------------------------------+"], "Examples": ["mysql> SELECT ST_GeometryType(ST_GeomFromText('POINT(1 1)'));\n+------------------------------------------------+\n| ST_GeometryType(ST_GeomFromText('POINT(1 1)')) |\n+------------------------------------------------+\n| POINT                                          |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-geometrytype"], "Feature Type": ["Function"], "index": 245, "vector_txt": "245:Feature: ST_GeometryType(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeomFromGeoJSON(str\n          [, options [,\n          srid]])"], "Description": ["Generate geometry from GeoJSON object", "\nST_GeomFromGeoJSON(str\n          [, options [,\n          srid]])\n", "\n          Parses a string str representing a\n          GeoJSON object and returns a geometry.\n        ", "\n          If any argument is NULL, the return value\n          is NULL. If any non-NULL\n          argument is invalid, an error occurs.\n        ", "\noptions, if given, describes how to\n          handle GeoJSON documents that contain geometries with\n          coordinate dimensions higher than 2. The following table shows\n          the permitted options values.\n", "\n\nOption Value\nMeaning\n\n1\nReject the document and produce an error. This is the default if\n                options is not specified.\n\n2, 3, 4\nAccept the document and strip off the coordinates for higher coordinate\n                dimensions.\n\n", "\noptions values of 2, 3, and 4\n          currently produce the same effect. If geometries with\n          coordinate dimensions higher than 2 are supported in the\n          future, you can expect these values to produce different\n          effects.\n        ", "\n          The srid argument, if given, must\n          be a 32-bit unsigned integer. If not given, the geometry\n          return value has an SRID of 4326.\n        ", "\n          If srid refers to an undefined\n          spatial reference system (SRS), an\n          ER_SRS_NOT_FOUND error occurs.\n        ", "\n          For geographic SRS geometry arguments, if any argument has a\n          longitude or latitude that is out of range, an error occurs:\n", "\n\n              If a longitude value is not in the range (\u2212180,\n              180], an\n              ER_LONGITUDE_OUT_OF_RANGE\n              error occurs.\n            \n              If a latitude value is not in the range [\u221290, 90],\n              an\n              ER_LATITUDE_OUT_OF_RANGE\n              error occurs.\n\n", "\n          Ranges shown are in degrees. If an SRS uses another unit, the\n          range uses the corresponding values in its unit. The exact\n          range limits deviate slightly due to floating-point\n          arithmetic.\n        ", "\n          GeoJSON geometry, feature, and feature collection objects may\n          have a crs property. The parsing function\n          parses named CRS URNs in the\n          urn:ogc:def:crs:EPSG::srid\n          and EPSG:srid\n          namespaces, but not CRSs given as link objects. Also,\n          urn:ogc:def:crs:OGC:1.3:CRS84 is recognized\n          as SRID 4326. If an object has a CRS that is not understood,\n          an error occurs, with the exception that if the optional\n          srid argument is given, any CRS is\n          ignored even if it is invalid.\n        ", "\n          If a crs member that specifies an SRID\n          different from the top-level object SRID is found at a lower\n          level of the GeoJSON document, an\n          ER_INVALID_GEOJSON_CRS_NOT_TOP_LEVEL\n          error occurs.\n        ", "\n          As specified in the GeoJSON specification, parsing is\n          case-sensitive for the type member of the\n          GeoJSON input (Point,\n          LineString, and so forth). The\n          specification is silent regarding case sensitivity for other\n          parsing, which in MySQL is not case-sensitive.\n        ", "\n          This example shows the parsing result for a simple GeoJSON\n          object. Observe that the order of coordinates depends on the\n          SRID used.\n        ", "Press CTRL+C to copy mysql> SET @json = '{ \"type\": \"Point\", \"coordinates\": [102.0, 0.0]}';\nmysql> SELECT ST_AsText(ST_GeomFromGeoJSON(@json));\n+--------------------------------------+\n| ST_AsText(ST_GeomFromGeoJSON(@json)) |\n+--------------------------------------+\n| POINT(0 102)                         |\n+--------------------------------------+\nmysql> SELECT ST_SRID(ST_GeomFromGeoJSON(@json));\n+------------------------------------+\n| ST_SRID(ST_GeomFromGeoJSON(@json)) |\n+------------------------------------+\n|                               4326 |\n+------------------------------------+\nmysql> SELECT ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0));\n+-------------------------------------------------+\n| ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0)) |\n+-------------------------------------------------+\n| POINT(102 0)                                    |\n+-------------------------------------------------+"], "Examples": ["mysql> SET @json = '{ \"type\": \"Point\", \"coordinates\": [102.0, 0.0]}';\nmysql> SELECT ST_AsText(ST_GeomFromGeoJSON(@json));\n+--------------------------------------+\n| ST_AsText(ST_GeomFromGeoJSON(@json)) |\n+--------------------------------------+\n| POINT(0 102)                         |\n+--------------------------------------+\nmysql> SELECT ST_SRID(ST_GeomFromGeoJSON(@json));\n+------------------------------------+\n| ST_SRID(ST_GeomFromGeoJSON(@json)) |\n+------------------------------------+\n|                               4326 |\n+------------------------------------+\nmysql> SELECT ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0));\n+-------------------------------------------------+\n| ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0)) |\n+-------------------------------------------------+\n| POINT(102 0)                                    |\n+-------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geojson-functions.html#function_st-geomfromgeojson"], "Feature Type": ["Function"], "index": 246, "vector_txt": "246:Feature: ST_GeomFromGeoJSON(str\n          [, options [,\n          srid]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeomFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Return geometry from WKT", "\nST_GeomFromText(wkt\n          [, srid [,\n          options]]),\n          ST_GeometryFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a geometry value of any type using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-geomfromtext"], "Feature Type": ["Function"], "index": 247, "vector_txt": "247:Feature: ST_GeomFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeomFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Return geometry from WKB", "\nST_GeomFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_GeometryFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a geometry value of any type using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-geomfromwkb"], "Feature Type": ["Function"], "index": 248, "vector_txt": "248:Feature: ST_GeomFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_HausdorffDistance(g1,\n            g2 [,\n            unit])"], "Description": ["The discrete Hausdorff distance of one geometry from another", "\nST_HausdorffDistance(g1,\n            g2 [,\n            unit])\n", "\n            Returns the discrete Hausdorff distance between two\n            geometries, reflecting how similar the geometries are. The\n            result is a double-precision number measured in the length\n            unit of the spatial reference system (SRS) of the geometry\n            arguments, or in the length unit of the\n            unit argument if that argument is\n            given.\n          ", "\n            This function implements the discrete Hausdorff distance,\n            which means it is restricted to distances between the points\n            of the geometries. For example, given two\n            LineString arguments, only the points\n            explicitly mentioned in the geometries are considered.\n            Points on the line segments between these points are not\n            considered.\n          ", "\nST_HausdorffDistance()\n            handles its geometry arguments as described in the\n            introduction to this section, with these exceptions:\n", "\n\n                If the geometry arguments are in the same Cartesian or\n                geographic SRS, but are not in a supported combination,\n                an\n                ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n                or\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs, depending on the SRS type. These\n                combinations are supported:\n\n\n\nLineString and\n                    LineString\n\nPoint and\n                    MultiPoint\n\nLineString and\n                    MultiLineString\n\nMultiPoint and\n                    MultiPoint\n\nMultiLineString and\n                    MultiLineString\n\n\n\n", "\nST_HausdorffDistance()\n            handles its optional unit\n            argument as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|                                1 |\n+----------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|               111319.49079326246 |\n+----------------------------------+\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2, 'foot');\n+------------------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2, 'foot') |\n+------------------------------------------+\n|                        365221.4264870815 |\n+------------------------------------------+"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|                                1 |\n+----------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|               111319.49079326246 |\n+----------------------------------+\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2, 'foot');\n+------------------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2, 'foot') |\n+------------------------------------------+\n|                        365221.4264870815 |\n+------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-hausdorffdistance"], "Feature Type": ["Function"], "index": 249, "vector_txt": "249:Feature: ST_HausdorffDistance(g1,\n            g2 [,\n            unit])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_InteriorRingN(poly,\n            N)"], "Description": ["Return N-th interior ring of Polygon", "\nST_InteriorRingN(poly,\n            N)\n", "\n            Returns the N-th interior ring\n            for the Polygon value\n            poly as a\n            LineString. Rings are numbered beginning\n            with 1.\n          ", "\nST_InteriorRingN() handles\n            its arguments as described in the introduction to this\n            section.\n          ", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1));\n+-------------------------------------------------------+\n| ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1)) |\n+-------------------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)                       |\n+-------------------------------------------------------+"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1));\n+-------------------------------------------------------+\n| ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1)) |\n+-------------------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)                       |\n+-------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-interiorringn"], "Feature Type": ["Function"], "index": 250, "vector_txt": "250:Feature: ST_InteriorRingN(poly,\n            N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Intersection(g1,\n          g2)"], "Description": ["Return point set intersection of two geometries", "\nST_Intersection(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set intersection\n          of the geometry values g1 and\n          g2. The result is in the same SRS\n          as the geometry arguments.\n        ", "\nST_Intersection() permits\n          arguments in either a Cartesian or a geographic SRS, and\n          handles its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Intersection(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Intersection(@g1, @g2)) |\n+--------------------------------------+\n| POINT(2 2)                           |\n+--------------------------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Intersection(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Intersection(@g1, @g2)) |\n+--------------------------------------+\n| POINT(2 2)                           |\n+--------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-intersection"], "Feature Type": ["Function"], "index": 251, "vector_txt": "251:Feature: ST_Intersection(g1,\n          g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Intersects(g1,\n            g2)"], "Description": ["Whether one geometry intersects another", "\nST_Intersects(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 spatially intersects\n            g2.\n          ", "\nST_Intersects() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-intersects"], "Feature Type": ["Function"], "index": 252, "vector_txt": "252:Feature: ST_Intersects(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_IsClosed(ls)"], "Description": ["Whether a geometry is closed and simple", "\nST_IsClosed(ls)\n", "\n            For a LineString value\n            ls,\n            ST_IsClosed() returns 1 if\n            ls is closed (that is, its\n            ST_StartPoint() and\n            ST_EndPoint() values are the\n            same).\n          ", "\n            For a MultiLineString value\n            ls,\n            ST_IsClosed() returns 1 if\n            ls is closed (that is, the\n            ST_StartPoint() and\n            ST_EndPoint() values are the\n            same for each LineString in\n            ls).\n          ", "\nST_IsClosed() returns 0 if\n            ls is not closed, and\n            NULL if ls is\n            NULL.\n          ", "\nST_IsClosed() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                If the geometry has an SRID value for a geographic\n                spatial reference system (SRS), an\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = 'LineString(1 1,2 2,3 3,2 2)';\nmysql> SET @ls2 = 'LineString(1 1,2 2,3 3,1 1)';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls1));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls1)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls2));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls2)) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n\nmysql> SET @ls3 = 'MultiLineString((1 1,2 2,3 3),(4 4,5 5))';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls3));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls3)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+"], "Examples": ["mysql> SET @ls1 = 'LineString(1 1,2 2,3 3,2 2)';\nmysql> SET @ls2 = 'LineString(1 1,2 2,3 3,1 1)';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls1));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls1)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls2));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls2)) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n\nmysql> SET @ls3 = 'MultiLineString((1 1,2 2,3 3),(4 4,5 5))';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls3));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls3)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-isclosed"], "Feature Type": ["Function"], "index": 253, "vector_txt": "253:Feature: ST_IsClosed(ls)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_IsEmpty(g)"], "Description": ["Whether a geometry is empty", "\nST_IsEmpty(g)\n", "\n            This function is a placeholder that returns 1 for an empty\n            geometry collection value or 0 otherwise.\n          ", "\n            The only valid empty geometry is represented in the form of\n            an empty geometry collection value. MySQL does not support\n            GIS EMPTY values such as POINT\n            EMPTY.\n          ", "\nST_IsEmpty() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-isempty"], "Feature Type": ["Function"], "index": 254, "vector_txt": "254:Feature: ST_IsEmpty(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18.3 Asynchronous Replication Channel Failover Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_delete_source()"], "Description": ["Remove a source server from a replication channel source list", "\nasynchronous_connection_failover_delete_source()\n", "\n            Remove configuration information for a replication source\n            server from the source list for a replication channel.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_delete_source(channel, host, port, network_namespace)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server was\n                part of the source list.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '');\n+------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '')              |\n+------------------------------------------------------------------------------------------------+\n| Source configuration details successfully deleted.                                             |\n+------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '');\n+------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '')              |\n+------------------------------------------------------------------------------------------------+\n| Source configuration details successfully deleted.                                             |\n+------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-source"], "Feature Type": ["Function"], "index": 255, "vector_txt": "255:Feature: asynchronous_connection_failover_delete_source()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_IsSimple(g)"], "Description": ["Whether a geometry is simple", "\nST_IsSimple(g)\n", "\n            Returns 1 if the geometry value g\n            is simple according to the ISO SQL/MM Part 3:\n            Spatial standard.\n            ST_IsSimple() returns 0 if\n            the argument is not simple.\n          ", "\n            The descriptions of the instantiable geometric classes given\n            under Section\u00a013.4.2, \u201cThe OpenGIS Geometry Model\u201d include the\n            specific conditions that cause class instances to be\n            classified as not simple.\n          ", "\nST_IsSimple() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                If the geometry has a geographic SRS with a longitude or\n                latitude that is out of range, an error occurs:\n\n\n\n                    If a longitude value is not in the range\n                    (\u2212180, 180], an\n                    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                    error occurs.\n                  \n                    If a latitude value is not in the range [\u221290,\n                    90], an\n                    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                    error occurs.\n\n\n\n                Ranges shown are in degrees. The exact range limits\n                deviate slightly due to floating-point arithmetic.\n\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-issimple"], "Feature Type": ["Function"], "index": 256, "vector_txt": "256:Feature: ST_IsSimple(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_IsValid(g)"], "Description": ["Whether a geometry is valid", "\nST_IsValid(g)\n", "\n          Returns 1 if the argument is geometrically valid, 0 if the\n          argument is not geometrically valid. Geometry validity is\n          defined by the OGC specification.\n        ", "\n          The only valid empty geometry is represented in the form of an\n          empty geometry collection value.\n          ST_IsValid() returns 1 in this\n          case. MySQL does not support GIS EMPTY\n          values such as POINT EMPTY.\n        ", "\nST_IsValid() handles its\n          arguments as described in the introduction to this section,\n          with this exception:\n", "\n\n              If the geometry has a geographic SRS with a longitude or\n              latitude that is out of range, an error occurs:\n\n\n\n                  If a longitude value is not in the range (\u2212180,\n                  180], an\n                  ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                  error occurs.\n                \n                  If a latitude value is not in the range [\u221290,\n                  90], an\n                  ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                  error occurs.\n\n\n\n              Ranges shown are in degrees. If an SRS uses another unit,\n              the range uses the corresponding values in its unit. The\n              exact range limits deviate slightly due to floating-point\n              arithmetic.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,-0.00 0,0.0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_IsValid(@ls1);\n+------------------+\n| ST_IsValid(@ls1) |\n+------------------+\n|                0 |\n+------------------+\nmysql> SELECT ST_IsValid(@ls2);\n+------------------+\n| ST_IsValid(@ls2) |\n+------------------+\n|                1 |\n+------------------+"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,-0.00 0,0.0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_IsValid(@ls1);\n+------------------+\n| ST_IsValid(@ls1) |\n+------------------+\n|                0 |\n+------------------+\nmysql> SELECT ST_IsValid(@ls2);\n+------------------+\n| ST_IsValid(@ls2) |\n+------------------+\n|                1 |\n+------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-isvalid"], "Feature Type": ["Function"], "index": 257, "vector_txt": "257:Feature: ST_IsValid(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LatFromGeoHash(geohash_str)"], "Description": ["Return latitude from geohash value", "\nST_LatFromGeoHash(geohash_str)\n", "\n          Returns the latitude from a geohash string value, as a\n          double-precision number in the range [\u221290, 90].\n        ", "\n          The ST_LatFromGeoHash()\n          decoding function reads no more than 433 characters from the\n          geohash_str argument. That\n          represents the upper limit on information in the internal\n          representation of coordinate values. Characters past the 433rd\n          are ignored, even if they are otherwise illegal and produce an\n          error.\n        ", "\nST_LatFromGeoHash() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SELECT ST_LatFromGeoHash(ST_GeoHash(45,-20,10));\n+------------------------------------------+\n| ST_LatFromGeoHash(ST_GeoHash(45,-20,10)) |\n+------------------------------------------+\n|                                      -20 |\n+------------------------------------------+"], "Examples": ["mysql> SELECT ST_LatFromGeoHash(ST_GeoHash(45,-20,10));\n+------------------------------------------+\n| ST_LatFromGeoHash(ST_GeoHash(45,-20,10)) |\n+------------------------------------------+\n|                                      -20 |\n+------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-latfromgeohash"], "Feature Type": ["Function"], "index": 258, "vector_txt": "258:Feature: ST_LatFromGeoHash(geohash_str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Latitude(p\n            [, new_latitude_val])"], "Description": ["Return latitude of Point", "\nST_Latitude(p\n            [, new_latitude_val])\n", "\n            With a single argument representing a valid\n            Point object p\n            that has a geographic spatial reference system (SRS),\n            ST_Latitude() returns the\n            latitude value of p as a\n            double-precision number.\n          ", "\n            With the optional second argument representing a valid\n            latitude value, ST_Latitude()\n            returns a Point object like the first\n            argument with its latitude equal to the second argument.\n          ", "\nST_Latitude() handles its\n            arguments as described in the introduction to this section,\n            with the addition that if the Point\n            object is valid but does not have a geographic SRS, an\n            ER_SRS_NOT_GEOGRAPHIC error\n            occurs.\n          ", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Latitude(@pt);\n+------------------+\n| ST_Latitude(@pt) |\n+------------------+\n|               45 |\n+------------------+\nmysql> SELECT ST_AsText(ST_Latitude(@pt, 10));\n+---------------------------------+\n| ST_AsText(ST_Latitude(@pt, 10)) |\n+---------------------------------+\n| POINT(10 90)                    |\n+---------------------------------+"], "Examples": ["mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Latitude(@pt);\n+------------------+\n| ST_Latitude(@pt) |\n+------------------+\n|               45 |\n+------------------+\nmysql> SELECT ST_AsText(ST_Latitude(@pt, 10));\n+---------------------------------+\n| ST_AsText(ST_Latitude(@pt, 10)) |\n+---------------------------------+\n| POINT(10 90)                    |\n+---------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-latitude"], "Feature Type": ["Function"], "index": 259, "vector_txt": "259:Feature: ST_Latitude(p\n            [, new_latitude_val])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Length(ls\n            [, unit])"], "Description": ["Return length of LineString", "\nST_Length(ls\n            [, unit])\n", "\n            Returns a double-precision number indicating the length of\n            the LineString or\n            MultiLineString value\n            ls in its associated spatial\n            reference system. The length of a\n            MultiLineString value is equal to the sum\n            of the lengths of its elements.\n          ", "\nST_Length() computes a result\n            as follows:\n", "\n\n                If the geometry is a valid LineString\n                in a Cartesian SRS, the return value is the Cartesian\n                length of the geometry.\n              \n                If the geometry is a valid\n                MultiLineString in a Cartesian SRS,\n                the return value is the sum of the Cartesian lengths of\n                its elements.\n              \n                If the geometry is a valid LineString\n                in a geographic SRS, the return value is the geodetic\n                length of the geometry in that SRS, in meters.\n              \n                If the geometry is a valid\n                MultiLineString in a geographic SRS,\n                the return value is the sum of the geodetic lengths of\n                its elements in that SRS, in meters.\n\n", "\nST_Length() handles its\n            arguments as described in the introduction to this section,\n            with these exceptions:\n", "\n\n                If the geometry is not a LineString\n                or MultiLineString, the return value\n                is NULL.\n              \n                If the geometry is geometrically invalid, either the\n                result is an undefined length (that is, it can be any\n                number), or an error occurs.\n              \n                If the length computation result is\n                +inf, an\n                ER_DATA_OUT_OF_RANGE\n                error occurs.\n              \n                If the geometry has a geographic SRS with a longitude or\n                latitude that is out of range, an error occurs:\n\n\n\n                    If a longitude value is not in the range\n                    (\u2212180, 180], an\n                    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                    error occurs.\n                  \n                    If a latitude value is not in the range [\u221290,\n                    90], an\n                    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                    error occurs.\n\n\n\n                Ranges shown are in degrees. The exact range limits\n                deviate slightly due to floating-point arithmetic.\n\n", "\nST_Length() permits an\n            optional unit argument that\n            specifies the linear unit for the returned length value.\n            These rules apply:\n", "\n\n                If a unit is specified but not supported by MySQL, an\n                ER_UNIT_NOT_FOUND error\n                occurs.\n              \n                If a supported linear unit is specified and the SRID is\n                0, an\n                ER_GEOMETRY_IN_UNKNOWN_LENGTH_UNIT\n                error occurs.\n              \n                If a supported linear unit is specified and the SRID is\n                not 0, the result is in that unit.\n              \n                If a unit is not specified, the result is in the unit of\n                the SRS of the geometries, whether Cartesian or\n                geographic. Currently, all MySQL SRSs are expressed in\n                meters.\n\n", "\n            A unit is supported if it is found in the\n            INFORMATION_SCHEMA\nST_UNITS_OF_MEASURE table. See\n            Section\u00a028.3.37, \u201cThe INFORMATION_SCHEMA ST_UNITS_OF_MEASURE Table\u201d.\n          ", "Press CTRL+C to copy mysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)');\nmysql> SELECT ST_Length(@ls);\n+--------------------+\n| ST_Length(@ls)     |\n+--------------------+\n| 2.8284271247461903 |\n+--------------------+\n\nmysql> SET @mls = ST_GeomFromText('MultiLineString((1 1,2 2,3 3),(4 4,5 5))');\nmysql> SELECT ST_Length(@mls);\n+-------------------+\n| ST_Length(@mls)   |\n+-------------------+\n| 4.242640687119286 |\n+-------------------+\n\nmysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)', 4326);\nmysql> SELECT ST_Length(@ls);\n+-------------------+\n| ST_Length(@ls)    |\n+-------------------+\n| 313701.9623204328 |\n+-------------------+\nmysql> SELECT ST_Length(@ls, 'metre');\n+-------------------------+\n| ST_Length(@ls, 'metre') |\n+-------------------------+\n|       313701.9623204328 |\n+-------------------------+\nmysql> SELECT ST_Length(@ls, 'foot');\n+------------------------+\n| ST_Length(@ls, 'foot') |\n+------------------------+\n|     1029205.9131247795 |\n+------------------------+"], "Examples": ["mysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)');\nmysql> SELECT ST_Length(@ls);\n+--------------------+\n| ST_Length(@ls)     |\n+--------------------+\n| 2.8284271247461903 |\n+--------------------+\n\nmysql> SET @mls = ST_GeomFromText('MultiLineString((1 1,2 2,3 3),(4 4,5 5))');\nmysql> SELECT ST_Length(@mls);\n+-------------------+\n| ST_Length(@mls)   |\n+-------------------+\n| 4.242640687119286 |\n+-------------------+\n\nmysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)', 4326);\nmysql> SELECT ST_Length(@ls);\n+-------------------+\n| ST_Length(@ls)    |\n+-------------------+\n| 313701.9623204328 |\n+-------------------+\nmysql> SELECT ST_Length(@ls, 'metre');\n+-------------------------+\n| ST_Length(@ls, 'metre') |\n+-------------------------+\n|       313701.9623204328 |\n+-------------------------+\nmysql> SELECT ST_Length(@ls, 'foot');\n+------------------------+\n| ST_Length(@ls, 'foot') |\n+------------------------+\n|     1029205.9131247795 |\n+------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-length"], "Feature Type": ["Function"], "index": 260, "vector_txt": "260:Feature: ST_Length(ls\n            [, unit])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LineFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct LineString from WKT", "\nST_LineFromText(wkt\n          [, srid [,\n          options]]),\n          ST_LineStringFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a LineString value using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-linefromtext"], "Feature Type": ["Function"], "index": 261, "vector_txt": "261:Feature: ST_LineFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LineFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct LineString from WKB", "\nST_LineFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_LineStringFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a LineString value using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-linefromwkb"], "Feature Type": ["Function"], "index": 262, "vector_txt": "262:Feature: ST_LineFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LineInterpolatePoint(ls,\n          fractional_distance)"], "Description": ["The point a given percentage along a LineString", "\nST_LineInterpolatePoint(ls,\n          fractional_distance)\n", "\n          This function takes a LineString geometry\n          and a fractional distance in the range [0.0, 1.0] and returns\n          the Point along the\n          LineString at the given fraction of the\n          distance from its start point to its endpoint. It can be used\n          to answer questions such as which Point\n          lies halfway along the road described by the geometry\n          argument.\n        ", "\n          The function is implemented for LineString\n          geometries in all spatial reference systems, both Cartesian\n          and geographic.\n        ", "\n          If the fractional_distance argument\n          is 1.0, the result may not be exactly the last point of the\n          LineString argument but a point close to it\n          due to numerical inaccuracies in approximate-value\n          computations.\n        ", "\n          A related function,\n          ST_LineInterpolatePoints(),\n          takes similar arguments but returns a\n          MultiPoint consisting of\n          Point values along the\n          LineString at each fraction of the distance\n          from its start point to its endpoint. For examples of both\n          functions, see the\n          ST_LineInterpolatePoints()\n          description.\n        ", "\nST_LineInterpolatePoint()\n          handles its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If the geometry argument is not a\n              LineString, an\n              ER_UNEXPECTED_GEOMETRY_TYPE\n              error occurs.\n            \n              If the fractional distance argument is outside the range\n              [0.0, 1.0], an\n              ER_DATA_OUT_OF_RANGE error\n              occurs.\n\n", "\nST_LineInterpolatePoint() is a\n          MySQL extension to OpenGIS.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-lineinterpolatepoint"], "Feature Type": ["Function"], "index": 263, "vector_txt": "263:Feature: ST_LineInterpolatePoint(ls,\n          fractional_distance)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LineInterpolatePoints(ls,\n          fractional_distance)"], "Description": ["The points a given percentage along a LineString", "\nST_LineInterpolatePoints(ls,\n          fractional_distance)\n", "\n          This function takes a LineString geometry\n          and a fractional distance in the range (0.0, 1.0] and returns\n          the MultiPoint consisting of the\n          LineString start point, plus\n          Point values along the\n          LineString at each fraction of the distance\n          from its start point to its endpoint. It can be used to answer\n          questions such as which Point values lie\n          every 10% of the way along the road described by the geometry\n          argument.\n        ", "\n          The function is implemented for LineString\n          geometries in all spatial reference systems, both Cartesian\n          and geographic.\n        ", "\n          If the fractional_distance argument\n          divides 1.0 with zero remainder the result may not contain the\n          last point of the LineString argument but a\n          point close to it due to numerical inaccuracies in\n          approximate-value computations.\n        ", "\n          A related function,\n          ST_LineInterpolatePoint(),\n          takes similar arguments but returns the\n          Point along the\n          LineString at the given fraction of the\n          distance from its start point to its endpoint.\n        ", "\nST_LineInterpolatePoints()\n          handles its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If the geometry argument is not a\n              LineString, an\n              ER_UNEXPECTED_GEOMETRY_TYPE\n              error occurs.\n            \n              If the fractional distance argument is outside the range\n              [0.0, 1.0], an\n              ER_DATA_OUT_OF_RANGE error\n              occurs.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .5));\n+----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .5)) |\n+----------------------------------------------+\n| POINT(0 5)                                   |\n+----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .75));\n+-----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .75)) |\n+-----------------------------------------------+\n| POINT(2.5 5)                                  |\n+-----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, 1));\n+---------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, 1)) |\n+---------------------------------------------+\n| POINT(5 5)                                  |\n+---------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoints(@ls1, .25));\n+------------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoints(@ls1, .25)) |\n+------------------------------------------------+\n| MULTIPOINT((0 2.5),(0 5),(2.5 5),(5 5))        |\n+------------------------------------------------+", "\nST_LineInterpolatePoints() is a\n          MySQL extension to OpenGIS.\n        "], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .5));\n+----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .5)) |\n+----------------------------------------------+\n| POINT(0 5)                                   |\n+----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .75));\n+-----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .75)) |\n+-----------------------------------------------+\n| POINT(2.5 5)                                  |\n+-----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, 1));\n+---------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, 1)) |\n+---------------------------------------------+\n| POINT(5 5)                                  |\n+---------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoints(@ls1, .25));\n+------------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoints(@ls1, .25)) |\n+------------------------------------------------+\n| MULTIPOINT((0 2.5),(0 5),(2.5 5),(5 5))        |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-lineinterpolatepoints"], "Feature Type": ["Function"], "index": 264, "vector_txt": "264:Feature: ST_LineInterpolatePoints(ls,\n          fractional_distance)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LongFromGeoHash(geohash_str)"], "Description": ["Return longitude from geohash value", "\nST_LongFromGeoHash(geohash_str)\n", "\n          Returns the longitude from a geohash string value, as a\n          double-precision number in the range [\u2212180, 180].\n        ", "\n          The remarks in the description of\n          ST_LatFromGeoHash() regarding\n          the maximum number of characters processed from the\n          geohash_str argument also apply to\n          ST_LongFromGeoHash().\n        ", "\nST_LongFromGeoHash() handles\n          its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT ST_LongFromGeoHash(ST_GeoHash(45,-20,10));\n+-------------------------------------------+\n| ST_LongFromGeoHash(ST_GeoHash(45,-20,10)) |\n+-------------------------------------------+\n|                                        45 |\n+-------------------------------------------+"], "Examples": ["mysql> SELECT ST_LongFromGeoHash(ST_GeoHash(45,-20,10));\n+-------------------------------------------+\n| ST_LongFromGeoHash(ST_GeoHash(45,-20,10)) |\n+-------------------------------------------+\n|                                        45 |\n+-------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-longfromgeohash"], "Feature Type": ["Function"], "index": 265, "vector_txt": "265:Feature: ST_LongFromGeoHash(geohash_str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions"], "Feature": ["asynchronous_connection_failover_reset()"], "Description": ["Remove all settings relating to group replication asynchronous", "\nasynchronous_connection_failover_reset()\n", "\n            Remove all settings relating to the asynchronous connection\n            failover mechanism. The function clears the Performance\n            Schema tables\n            replication_asynchronous_connection_failover\n            and\n            replication_asynchronous_connection_failover_managed.\n          ", "\nasynchronous_connection_failover_reset()\n            can be used only on a server that is not currently part of a\n            group, and that does not have any replication channels\n            running. You can use this function to clean up a server that\n            is no longer being used in a managed group.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy STRING asynchronous_connection_failover_reset()", "\n            Arguments:\n          ", "\n            None.\n          ", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy mysql> SELECT asynchronous_connection_failover_reset();\n+-------------------------------------------------------------------------+\n| asynchronous_connection_failover_reset()                                |\n+-------------------------------------------------------------------------+\n| The UDF asynchronous_connection_failover_reset() executed successfully. |\n+-------------------------------------------------------------------------+\n1 row in set (0.00 sec)", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n"], "Examples": ["mysql> SELECT asynchronous_connection_failover_reset();\n+-------------------------------------------------------------------------+\n| asynchronous_connection_failover_reset()                                |\n+-------------------------------------------------------------------------+\n| The UDF asynchronous_connection_failover_reset() executed successfully. |\n+-------------------------------------------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Replication Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-reset"], "Feature Type": ["Function"], "index": 266, "vector_txt": "266:Feature: asynchronous_connection_failover_reset()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Longitude(p\n            [, new_longitude_val])"], "Description": ["Return longitude of Point", "\nST_Longitude(p\n            [, new_longitude_val])\n", "\n            With a single argument representing a valid\n            Point object p\n            that has a geographic spatial reference system (SRS),\n            ST_Longitude() returns the\n            longitude value of p as a\n            double-precision number.\n          ", "\n            With the optional second argument representing a valid\n            longitude value,\n            ST_Longitude() returns a\n            Point object like the first argument with\n            its longitude equal to the second argument.\n          ", "\nST_Longitude() handles its\n            arguments as described in the introduction to this section,\n            with the addition that if the Point\n            object is valid but does not have a geographic SRS, an\n            ER_SRS_NOT_GEOGRAPHIC error\n            occurs.\n          ", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Longitude(@pt);\n+-------------------+\n| ST_Longitude(@pt) |\n+-------------------+\n|                90 |\n+-------------------+\nmysql> SELECT ST_AsText(ST_Longitude(@pt, 10));\n+----------------------------------+\n| ST_AsText(ST_Longitude(@pt, 10)) |\n+----------------------------------+\n| POINT(45 10)                     |\n+----------------------------------+"], "Examples": ["mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Longitude(@pt);\n+-------------------+\n| ST_Longitude(@pt) |\n+-------------------+\n|                90 |\n+-------------------+\nmysql> SELECT ST_AsText(ST_Longitude(@pt, 10));\n+----------------------------------+\n| ST_AsText(ST_Longitude(@pt, 10)) |\n+----------------------------------+\n| POINT(45 10)                     |\n+----------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-longitude"], "Feature Type": ["Function"], "index": 267, "vector_txt": "267:Feature: ST_Longitude(p\n            [, new_longitude_val])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MakeEnvelope(pt1,\n          pt2)"], "Description": ["Rectangle around two points", "\nST_MakeEnvelope(pt1,\n          pt2)\n", "\n          Returns the rectangle that forms the envelope around two\n          points, as a Point,\n          LineString, or Polygon.\n        ", "\n          Calculations are done using the Cartesian coordinate system\n          rather than on a sphere, spheroid, or on earth.\n        ", "\n          Given two points pt1 and\n          pt2,\n          ST_MakeEnvelope() creates the\n          result geometry on an abstract plane like this:\n", "\n\n              If pt1 and\n              pt2 are equal, the result is\n              the point pt1.\n            \n              Otherwise, if (pt1,\n              pt2) is a vertical or\n              horizontal line segment, the result is the line segment\n              (pt1,\n              pt2).\n            \n              Otherwise, the result is a polygon using\n              pt1 and\n              pt2 as diagonal points.\n\n", "\n          The result geometry has an SRID of 0.\n        ", "\nST_MakeEnvelope() handles its\n          arguments as described in the introduction to this section,\n          with these exceptions:\n", "\n\n              If the arguments are not Point values,\n              an ER_WRONG_ARGUMENTS\n              error occurs.\n            \n              An ER_GIS_INVALID_DATA\n              error occurs for the additional condition that any\n              coordinate value of the two points is infinite or\n              NaN.\n            \n              If any geometry has an SRID value for a geographic spatial\n              reference system (SRS), an\n              ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n              error occurs.\n\n", "Press CTRL+C to copy mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(1 1)');\nmysql> SELECT ST_AsText(ST_MakeEnvelope(@pt1, @pt2));\n+----------------------------------------+\n| ST_AsText(ST_MakeEnvelope(@pt1, @pt2)) |\n+----------------------------------------+\n| POLYGON((0 0,1 0,1 1,0 1,0 0))         |\n+----------------------------------------+"], "Examples": ["mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(1 1)');\nmysql> SELECT ST_AsText(ST_MakeEnvelope(@pt1, @pt2));\n+----------------------------------------+\n| ST_AsText(ST_MakeEnvelope(@pt1, @pt2)) |\n+----------------------------------------+\n| POLYGON((0 0,1 0,1 1,0 1,0 0))         |\n+----------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-makeenvelope"], "Feature Type": ["Function"], "index": 268, "vector_txt": "268:Feature: ST_MakeEnvelope(pt1,\n          pt2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MLineFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct MultiLineString from WKT", "\nST_MLineFromText(wkt\n          [, srid [,\n          options]]),\n          ST_MultiLineStringFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiLineString value using\n          its WKT representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mlinefromtext"], "Feature Type": ["Function"], "index": 269, "vector_txt": "269:Feature: ST_MLineFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MLineFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct MultiLineString from WKB", "\nST_MLineFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_MultiLineStringFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiLineString value using\n          its WKB representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mlinefromwkb"], "Feature Type": ["Function"], "index": 270, "vector_txt": "270:Feature: ST_MLineFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MPointFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct MultiPoint from WKT", "\nST_MPointFromText(wkt\n          [, srid [,\n          options]]),\n          ST_MultiPointFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPoint value using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mpointfromtext"], "Feature Type": ["Function"], "index": 271, "vector_txt": "271:Feature: ST_MPointFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MPointFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct MultiPoint from WKB", "\nST_MPointFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_MultiPointFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPoint value using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mpointfromwkb"], "Feature Type": ["Function"], "index": 272, "vector_txt": "272:Feature: ST_MPointFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MPolyFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct MultiPolygon from WKT", "\nST_MPolyFromText(wkt\n          [, srid [,\n          options]]),\n          ST_MultiPolygonFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPolygon value using its\n          WKT representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mpolyfromtext"], "Feature Type": ["Function"], "index": 273, "vector_txt": "273:Feature: ST_MPolyFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MPolyFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct MultiPolygon from WKB", "\nST_MPolyFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_MultiPolygonFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPolygon value using its\n          WKB representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mpolyfromwkb"], "Feature Type": ["Function"], "index": 274, "vector_txt": "274:Feature: ST_MPolyFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_NumGeometries(gc)"], "Description": ["Return number of geometries in geometry collection", "\nST_NumGeometries(gc)\n", "\n            Returns the number of geometries in the\n            GeometryCollection value\n            gc.\n          ", "\nST_NumGeometries() handles\n            its arguments as described in the introduction to this\n            section.\n          ", "Press CTRL+C to copy mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_NumGeometries(ST_GeomFromText(@gc));\n+----------------------------------------+\n| ST_NumGeometries(ST_GeomFromText(@gc)) |\n+----------------------------------------+\n|                                      2 |\n+----------------------------------------+"], "Examples": ["mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_NumGeometries(ST_GeomFromText(@gc));\n+----------------------------------------+\n| ST_NumGeometries(ST_GeomFromText(@gc)) |\n+----------------------------------------+\n|                                      2 |\n+----------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-geometrycollection-property-functions.html#function_st-numgeometries"], "Feature Type": ["Function"], "index": 275, "vector_txt": "275:Feature: ST_NumGeometries(gc)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_NumInteriorRing(poly)"], "Description": ["Return number of interior rings in Polygon", "\nST_NumInteriorRing(poly),\n            ST_NumInteriorRings(poly)\n", "\n            Returns the number of interior rings in the\n            Polygon value\n            poly.\n          ", "\nST_NumInteriorRing()\n            and ST_NuminteriorRings()\n            handle their arguments as described in the introduction to\n            this section.\n          ", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));\n+---------------------------------------------+\n| ST_NumInteriorRings(ST_GeomFromText(@poly)) |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));\n+---------------------------------------------+\n| ST_NumInteriorRings(ST_GeomFromText(@poly)) |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-numinteriorrings"], "Feature Type": ["Function"], "index": 276, "vector_txt": "276:Feature: ST_NumInteriorRing(poly)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ATAN(X)"], "Description": ["Return the arc tangent", "\nATAN(X)\n", "\n            Returns the arc tangent of X,\n            that is, the value whose tangent is\n            X. Returns\n            NULL if\n            X is NULL\n", "Press CTRL+C to copy mysql> SELECT ATAN(2);\n        -> 1.1071487177941\nmysql> SELECT ATAN(-2);\n        -> -1.1071487177941"], "Examples": ["mysql> SELECT ATAN(2);\n        -> 1.1071487177941\nmysql> SELECT ATAN(-2);\n        -> -1.1071487177941"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_atan"], "Feature Type": ["Function"], "index": 277, "vector_txt": "277:Feature: ATAN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_NumPoints(ls)"], "Description": ["Return number of points in LineString", "\nST_NumPoints(ls)\n", "\n            Returns the number of Point objects in\n            the LineString value\n            ls.\n          ", "\nST_NumPoints() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_NumPoints(ST_GeomFromText(@ls));\n+------------------------------------+\n| ST_NumPoints(ST_GeomFromText(@ls)) |\n+------------------------------------+\n|                                  3 |\n+------------------------------------+"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_NumPoints(ST_GeomFromText(@ls));\n+------------------------------------+\n| ST_NumPoints(ST_GeomFromText(@ls)) |\n+------------------------------------+\n|                                  3 |\n+------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-numpoints"], "Feature Type": ["Function"], "index": 278, "vector_txt": "278:Feature: ST_NumPoints(ls)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Overlaps(g1,\n            g2)"], "Description": ["Whether one geometry overlaps another", "\nST_Overlaps(g1,\n            g2)\n", "\n            Two geometries spatially overlap if\n            they intersect and their intersection results in a geometry\n            of the same dimension but not equal to either of the given\n            geometries.\n          ", "\n            This function returns 1 or 0 to indicate whether\n            g1 spatially overlaps\n            g2.\n          ", "\nST_Overlaps() handles its\n            arguments as described in the introduction to this section\n            except that the return value is NULL for\n            the additional condition that the dimensions of the two\n            geometries are not equal.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-overlaps"], "Feature Type": ["Function"], "index": 279, "vector_txt": "279:Feature: ST_Overlaps(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PointAtDistance(ls,\n          distance)"], "Description": ["The point a given distance along a LineString", "\nST_PointAtDistance(ls,\n          distance)\n", "\n          This function takes a LineString geometry\n          and a distance in the range [0.0,\n          ST_Length(ls)]\n          measured in the unit of the spatial reference system (SRS) of\n          the LineString, and returns the\n          Point along the\n          LineString at that distance from its start\n          point. It can be used to answer questions such as which\n          Point value is 400 meters from the start of\n          the road described by the geometry argument.\n        ", "\n          The function is implemented for LineString\n          geometries in all spatial reference systems, both Cartesian\n          and geographic.\n        ", "\nST_PointAtDistance() handles\n          its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If the geometry argument is not a\n              LineString, an\n              ER_UNEXPECTED_GEOMETRY_TYPE\n              error occurs.\n            \n              If the fractional distance argument is outside the range\n              [0.0,\n              ST_Length(ls)],\n              an ER_DATA_OUT_OF_RANGE\n              error occurs.\n\n", "\nST_PointAtDistance() is a MySQL\n          extension to OpenGIS.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-pointatdistance"], "Feature Type": ["Function"], "index": 280, "vector_txt": "280:Feature: ST_PointAtDistance(ls,\n          distance)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PointFromGeoHash(geohash_str,\n          srid)"], "Description": ["Convert geohash value to POINT value", "\nST_PointFromGeoHash(geohash_str,\n          srid)\n", "\n          Returns a POINT value containing the\n          decoded geohash value, given a geohash string value.\n        ", "\n          The X and Y coordinates of the point are the longitude in the\n          range [\u2212180, 180] and the latitude in the range\n          [\u221290, 90], respectively.\n        ", "\n          The srid argument is an 32-bit\n          unsigned integer.\n        ", "\n          The remarks in the description of\n          ST_LatFromGeoHash() regarding\n          the maximum number of characters processed from the\n          geohash_str argument also apply to\n          ST_PointFromGeoHash().\n        ", "\nST_PointFromGeoHash() handles\n          its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SET @gh = ST_GeoHash(45,-20,10);\nmysql> SELECT ST_AsText(ST_PointFromGeoHash(@gh,0));\n+---------------------------------------+\n| ST_AsText(ST_PointFromGeoHash(@gh,0)) |\n+---------------------------------------+\n| POINT(45 -20)                         |\n+---------------------------------------+"], "Examples": ["mysql> SET @gh = ST_GeoHash(45,-20,10);\nmysql> SELECT ST_AsText(ST_PointFromGeoHash(@gh,0));\n+---------------------------------------+\n| ST_AsText(ST_PointFromGeoHash(@gh,0)) |\n+---------------------------------------+\n| POINT(45 -20)                         |\n+---------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-pointfromgeohash"], "Feature Type": ["Function"], "index": 281, "vector_txt": "281:Feature: ST_PointFromGeoHash(geohash_str,\n          srid)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PointFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct Point from WKT", "\nST_PointFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a Point value using its WKT\n          representation and SRID.\n        ", "\nST_PointFromText() handles its\n          arguments as described in the introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-pointfromtext"], "Feature Type": ["Function"], "index": 282, "vector_txt": "282:Feature: ST_PointFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PointFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct Point from WKB", "\nST_PointFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a Point value using its WKB\n          representation and SRID.\n        ", "\nST_PointFromWKB() handles its\n          arguments as described in the introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-pointfromwkb"], "Feature Type": ["Function"], "index": 283, "vector_txt": "283:Feature: ST_PointFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PointN(ls,\n            N)"], "Description": ["Return N-th point from LineString", "\nST_PointN(ls,\n            N)\n", "\n            Returns the N-th\n            Point in the\n            Linestring value\n            ls. Points are numbered beginning\n            with 1.\n          ", "\nST_PointN() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_PointN(ST_GeomFromText(@ls),2));\n+----------------------------------------------+\n| ST_AsText(ST_PointN(ST_GeomFromText(@ls),2)) |\n+----------------------------------------------+\n| POINT(2 2)                                   |\n+----------------------------------------------+"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_PointN(ST_GeomFromText(@ls),2));\n+----------------------------------------------+\n| ST_AsText(ST_PointN(ST_GeomFromText(@ls),2)) |\n+----------------------------------------------+\n| POINT(2 2)                                   |\n+----------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-pointn"], "Feature Type": ["Function"], "index": 284, "vector_txt": "284:Feature: ST_PointN(ls,\n            N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PolyFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct Polygon from WKT", "\nST_PolyFromText(wkt\n          [, srid [,\n          options]]),\n          ST_PolygonFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a Polygon value using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-polyfromtext"], "Feature Type": ["Function"], "index": 285, "vector_txt": "285:Feature: ST_PolyFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PolyFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct Polygon from WKB", "\nST_PolyFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_PolygonFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a Polygon value using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-polyfromwkb"], "Feature Type": ["Function"], "index": 286, "vector_txt": "286:Feature: ST_PolyFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Simplify(g,\n          max_distance)"], "Description": ["Return simplified geometry", "\nST_Simplify(g,\n          max_distance)\n", "\n          Simplifies a geometry using the Douglas-Peucker algorithm and\n          returns a simplified value of the same type.\n        ", "\n          The geometry may be any geometry type, although the\n          Douglas-Peucker algorithm may not actually process every type.\n          A geometry collection is processed by giving its components\n          one by one to the simplification algorithm, and the returned\n          geometries are put into a geometry collection as result.\n        ", "\n          The max_distance argument is the\n          distance (in units of the input coordinates) of a vertex to\n          other segments to be removed. Vertices within this distance of\n          the simplified linestring are removed.\n        ", "\n          According to Boost.Geometry, geometries might become invalid\n          as a result of the simplification process, and the process\n          might create self-intersections. To check the validity of the\n          result, pass it to\n          ST_IsValid().\n        ", "\nST_Simplify() handles its\n          arguments as described in the introduction to this section,\n          with this exception:\n", "\n\n              If the max_distance argument is\n              not positive, or is NaN, an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n\n", "Press CTRL+C to copy mysql> SET @g = ST_GeomFromText('LINESTRING(0 0,0 1,1 1,1 2,2 2,2 3,3 3)');\nmysql> SELECT ST_AsText(ST_Simplify(@g, 0.5));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 0.5)) |\n+---------------------------------+\n| LINESTRING(0 0,0 1,1 1,2 3,3 3) |\n+---------------------------------+\nmysql> SELECT ST_AsText(ST_Simplify(@g, 1.0));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 1.0)) |\n+---------------------------------+\n| LINESTRING(0 0,3 3)             |\n+---------------------------------+"], "Examples": ["mysql> SET @g = ST_GeomFromText('LINESTRING(0 0,0 1,1 1,1 2,2 2,2 3,3 3)');\nmysql> SELECT ST_AsText(ST_Simplify(@g, 0.5));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 0.5)) |\n+---------------------------------+\n| LINESTRING(0 0,0 1,1 1,2 3,3 3) |\n+---------------------------------+\nmysql> SELECT ST_AsText(ST_Simplify(@g, 1.0));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 1.0)) |\n+---------------------------------+\n| LINESTRING(0 0,3 3)             |\n+---------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-simplify"], "Feature Type": ["Function"], "index": 287, "vector_txt": "287:Feature: ST_Simplify(g,\n          max_distance)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ATAN(Y,X)"], "Description": ["Return the arc tangent of the two arguments", "\nATAN(Y,X),\n            ATAN2(Y,X)\n", "\n            Returns the arc tangent of the two variables\n            X and\n            Y. It is similar to calculating\n            the arc tangent of Y /\n            X, except that the\n            signs of both arguments are used to determine the quadrant\n            of the result. Returns NULL if\n            X or Y\n            is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ATAN(-2,2);\n        -> -0.78539816339745\nmysql> SELECT ATAN2(PI(),0);\n        -> 1.5707963267949"], "Examples": ["mysql> SELECT ATAN(-2,2);\n        -> -0.78539816339745\nmysql> SELECT ATAN2(PI(),0);\n        -> 1.5707963267949"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_atan2"], "Feature Type": ["Function"], "index": 288, "vector_txt": "288:Feature: ATAN(Y,X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_SRID(g [,\n            srid])"], "Description": ["Return spatial reference system ID for geometry", "\nST_SRID(g [,\n            srid])\n", "\n            With a single argument representing a valid geometry object\n            g,\n            ST_SRID() returns an integer\n            indicating the ID of the spatial reference system (SRS)\n            associated with g.\n          ", "\n            With the optional second argument representing a valid SRID\n            value, ST_SRID() returns an\n            object with the same type as its first argument with an SRID\n            value equal to the second argument. This only sets the SRID\n            value of the object; it does not perform any transformation\n            of coordinate values.\n          ", "\nST_SRID() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                For the single-argument syntax,\n                ST_SRID() returns the\n                geometry SRID even if it refers to an undefined SRS. An\n                ER_SRS_NOT_FOUND error\n                does not occur.\n\n", "\nST_SRID(g,\n            target_srid) and\n            ST_Transform(g,\n            target_srid) differ as\n            follows:\n", "\n\nST_SRID() changes the\n                geometry SRID value without transforming its\n                coordinates.\n              \nST_Transform() transforms\n                the geometry coordinates in addition to changing its\n                SRID value.\n\n", "Press CTRL+C to copy mysql> SET @g = ST_GeomFromText('LineString(1 1,2 2)', 0);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|           0 |\n+-------------+\nmysql> SET @g = ST_SRID(@g, 4326);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|        4326 |\n+-------------+", "\n            It is possible to create a geometry in a particular SRID by\n            passing to ST_SRID() the\n            result of one of the MySQL-specific functions for creating\n            spatial values, along with an SRID value. For example:\n          ", "Press CTRL+C to copy SET @g1 = ST_SRID(Point(1, 1), 4326);", "\n            However, that method creates the geometry in SRID 0, then\n            casts it to SRID 4326 (WGS 84). A preferable alternative is\n            to create the geometry with the correct spatial reference\n            system to begin with. For example:\n          ", "Press CTRL+C to copy SET @g1 = ST_PointFromText('POINT(1 1)', 4326);\nSET @g1 = ST_GeomFromText('POINT(1 1)', 4326);", "\n            The two-argument form of\n            ST_SRID() is useful for tasks\n            such as correcting or changing the SRS of geometries that\n            have an incorrect SRID.\n"], "Examples": ["mysql> SET @g = ST_GeomFromText('LineString(1 1,2 2)', 0);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|           0 |\n+-------------+\nmysql> SET @g = ST_SRID(@g, 4326);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|        4326 |\n+-------------+", "SET @g1 = ST_SRID(Point(1, 1), 4326);", "SET @g1 = ST_PointFromText('POINT(1 1)', 4326);\nSET @g1 = ST_GeomFromText('POINT(1 1)', 4326);"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-srid"], "Feature Type": ["Function"], "index": 289, "vector_txt": "289:Feature: ST_SRID(g [,\n            srid])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_StartPoint(ls)"], "Description": ["Start Point of LineString", "\nST_StartPoint(ls)\n", "\n            Returns the Point that is the start point\n            of the LineString value\n            ls.\n          ", "\nST_StartPoint() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_StartPoint(ST_GeomFromText(@ls)));\n+------------------------------------------------+\n| ST_AsText(ST_StartPoint(ST_GeomFromText(@ls))) |\n+------------------------------------------------+\n| POINT(1 1)                                     |\n+------------------------------------------------+"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_StartPoint(ST_GeomFromText(@ls)));\n+------------------------------------------------+\n| ST_AsText(ST_StartPoint(ST_GeomFromText(@ls))) |\n+------------------------------------------------+\n| POINT(1 1)                                     |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-startpoint"], "Feature Type": ["Function"], "index": 290, "vector_txt": "290:Feature: ST_StartPoint(ls)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_SwapXY(g)"], "Description": ["Return argument with X/Y coordinates swapped", "\nST_SwapXY(g)\n", "\n          Accepts an argument in internal geometry format, swaps the X\n          and Y values of each coordinate pair within the geometry, and\n          returns the result.\n        ", "\nST_SwapXY() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)');\nmysql> SELECT ST_AsText(@g);\n+----------------------------+\n| ST_AsText(@g)              |\n+----------------------------+\n| LINESTRING(0 5,5 10,10 15) |\n+----------------------------+\nmysql> SELECT ST_AsText(ST_SwapXY(@g));\n+----------------------------+\n| ST_AsText(ST_SwapXY(@g))   |\n+----------------------------+\n| LINESTRING(5 0,10 5,15 10) |\n+----------------------------+"], "Examples": ["mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)');\nmysql> SELECT ST_AsText(@g);\n+----------------------------+\n| ST_AsText(@g)              |\n+----------------------------+\n| LINESTRING(0 5,5 10,10 15) |\n+----------------------------+\nmysql> SELECT ST_AsText(ST_SwapXY(@g));\n+----------------------------+\n| ST_AsText(ST_SwapXY(@g))   |\n+----------------------------+\n| LINESTRING(5 0,10 5,15 10) |\n+----------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-format-conversion-functions.html#function_st-swapxy"], "Feature Type": ["Function"], "index": 291, "vector_txt": "291:Feature: ST_SwapXY(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_SymDifference(g1,\n          g2)"], "Description": ["Return point set symmetric difference of two geometries", "\nST_SymDifference(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set symmetric\n          difference of the geometry values\n          g1 and\n          g2, which is defined as:\n        ", "Press CTRL+C to copy g1 symdifference g2 := (g1 union g2) difference (g1 intersection g2)", "\n          Or, in function call notation:\n        ", "Press CTRL+C to copy ST_SymDifference(g1, g2) = ST_Difference(ST_Union(g1, g2), ST_Intersection(g1, g2))", "\n          The result is in the same SRS as the geometry arguments.\n        ", "\nST_SymDifference() permits\n          arguments in either a Cartesian or a geographic SRS, and\n          handles its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('MULTIPOINT(5 0,15 10,15 25)');\nmysql> SET @g2 = ST_GeomFromText('MULTIPOINT(1 1,15 10,15 25)');\nmysql> SELECT ST_AsText(ST_SymDifference(@g1, @g2));\n+---------------------------------------+\n| ST_AsText(ST_SymDifference(@g1, @g2)) |\n+---------------------------------------+\n| MULTIPOINT((1 1),(5 0))               |\n+---------------------------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('MULTIPOINT(5 0,15 10,15 25)');\nmysql> SET @g2 = ST_GeomFromText('MULTIPOINT(1 1,15 10,15 25)');\nmysql> SELECT ST_AsText(ST_SymDifference(@g1, @g2));\n+---------------------------------------+\n| ST_AsText(ST_SymDifference(@g1, @g2)) |\n+---------------------------------------+\n| MULTIPOINT((1 1),(5 0))               |\n+---------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-symdifference"], "Feature Type": ["Function"], "index": 292, "vector_txt": "292:Feature: ST_SymDifference(g1,\n          g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Touches(g1,\n            g2)"], "Description": ["Whether one geometry touches another", "\nST_Touches(g1,\n            g2)\n", "\n            Two geometries spatially touch if their\n            interiors do not intersect, but the boundary of one of the\n            geometries intersects either the boundary or the interior of\n            the other.\n          ", "\n            This function returns 1 or 0 to indicate whether\n            g1 spatially touches\n            g2.\n          ", "\nST_Touches() handles its\n            arguments as described in the introduction to this section\n            except that the return value is NULL for\n            the additional condition that both geometries are of\n            dimension 0 (Point or\n            MultiPoint).\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-touches"], "Feature Type": ["Function"], "index": 293, "vector_txt": "293:Feature: ST_Touches(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Transform(g,\n          target_srid)"], "Description": ["Transform coordinates of geometry", "\nST_Transform(g,\n          target_srid)\n", "\n          Transforms a geometry from one spatial reference system (SRS)\n          to another. The return value is a geometry of the same type as\n          the input geometry with all coordinates transformed to the\n          target SRID, target_srid. MySQL\n          supports all SRSs defined by EPSG except for those listed\n          here:\n", "\n\n              EPSG 1042 Krovak Modified\n            \n              EPSG 1043 Krovak Modified (North Orientated)\n            \n              EPSG 9816 Tunisia Mining Grid\n            \n              EPSG 9826 Lambert Conic Conformal (West Orientated)\n\n", "\nST_Transform() handles its\n          arguments as described in the introduction to this section,\n          with these exceptions:\n", "\n\n              Geometry arguments that have an SRID value for a\n              geographic SRS do not produce an error.\n            \n              If the geometry or target SRID argument has an SRID value\n              that refers to an undefined spatial reference system\n              (SRS), an ER_SRS_NOT_FOUND\n              error occurs.\n            \n              If the geometry is in an SRS that\n              ST_Transform() cannot\n              transform from, an\n              ER_TRANSFORM_SOURCE_SRS_NOT_SUPPORTED\n              error occurs.\n            \n              If the target SRID is in an SRS that\n              ST_Transform() cannot\n              transform to, an\n              ER_TRANSFORM_TARGET_SRS_NOT_SUPPORTED\n              error occurs.\n            \n              If the geometry is in an SRS that is not WGS 84 and has no\n              TOWGS84 clause, an\n              ER_TRANSFORM_SOURCE_SRS_MISSING_TOWGS84\n              error occurs.\n            \n              If the target SRID is in an SRS that is not WGS 84 and has\n              no TOWGS84 clause, an\n              ER_TRANSFORM_TARGET_SRS_MISSING_TOWGS84\n              error occurs.\n\n", "\nST_SRID(g,\n          target_srid) and\n          ST_Transform(g,\n          target_srid) differ as\n          follows:\n", "\n\nST_SRID() changes the\n              geometry SRID value without transforming its coordinates.\n            \nST_Transform() transforms\n              the geometry coordinates in addition to changing its SRID\n              value.\n\n", "Press CTRL+C to copy mysql> SET @p = ST_GeomFromText('POINT(52.381389 13.064444)', 4326);\nmysql> SELECT ST_AsText(@p);\n+----------------------------+\n| ST_AsText(@p)              |\n+----------------------------+\n| POINT(52.381389 13.064444) |\n+----------------------------+\nmysql> SET @p = ST_Transform(@p, 4230);\nmysql> SELECT ST_AsText(@p);\n+---------------------------------------------+\n| ST_AsText(@p)                               |\n+---------------------------------------------+\n| POINT(52.38208611407426 13.065520672345304) |\n+---------------------------------------------+"], "Examples": ["mysql> SET @p = ST_GeomFromText('POINT(52.381389 13.064444)', 4326);\nmysql> SELECT ST_AsText(@p);\n+----------------------------+\n| ST_AsText(@p)              |\n+----------------------------+\n| POINT(52.381389 13.064444) |\n+----------------------------+\nmysql> SET @p = ST_Transform(@p, 4230);\nmysql> SELECT ST_AsText(@p);\n+---------------------------------------------+\n| ST_AsText(@p)                               |\n+---------------------------------------------+\n| POINT(52.38208611407426 13.065520672345304) |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-transform"], "Feature Type": ["Function"], "index": 294, "vector_txt": "294:Feature: ST_Transform(g,\n          target_srid)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Union(g1,\n          g2)"], "Description": ["Return point set union of two geometries", "\nST_Union(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set union of the\n          geometry values g1 and\n          g2. The result is in the same SRS\n          as the geometry arguments.\n        ", "\nST_Union() permits arguments in\n          either a Cartesian or a geographic SRS, and handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Union(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Union(@g1, @g2))        |\n+--------------------------------------+\n| MULTILINESTRING((1 1,3 3),(1 3,3 1)) |\n+--------------------------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Union(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Union(@g1, @g2))        |\n+--------------------------------------+\n| MULTILINESTRING((1 1,3 3),(1 3,3 1)) |\n+--------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-union"], "Feature Type": ["Function"], "index": 295, "vector_txt": "295:Feature: ST_Union(g1,\n          g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Validate(g)"], "Description": ["Return validated geometry", "\nST_Validate(g)\n", "\n          Validates a geometry according to the OGC specification. A\n          geometry can be syntactically well-formed (WKB value plus\n          SRID) but geometrically invalid. For example, this polygon is\n          geometrically invalid: POLYGON((0 0, 0 0, 0 0, 0 0, 0\n          0))\n", "\nST_Validate() returns the\n          geometry if it is syntactically well-formed and is\n          geometrically valid, NULL if the argument\n          is not syntactically well-formed or is not geometrically valid\n          or is NULL.\n        ", "\nST_Validate() can be used to\n          filter out invalid geometry data, although at a cost. For\n          applications that require more precise results not tainted by\n          invalid data, this penalty may be worthwhile.\n        ", "\n          If the geometry argument is valid, it is returned as is,\n          except that if an input Polygon or\n          MultiPolygon has clockwise rings, those\n          rings are reversed before checking for validity. If the\n          geometry is valid, the value with the reversed rings is\n          returned.\n        ", "\n          The only valid empty geometry is represented in the form of an\n          empty geometry collection value.\n          ST_Validate() returns it\n          directly without further checks in this case.\n        ", "\nST_Validate() handles its\n          arguments as described in the introduction to this section,\n          with the exceptions listed here:\n", "\n\n              If the geometry has a geographic SRS with a longitude or\n              latitude that is out of range, an error occurs:\n\n\n\n                  If a longitude value is not in the range (\u2212180,\n                  180], an\n                  ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                  error occurs.\n                \n                  If a latitude value is not in the range [\u221290,\n                  90], an\n                  ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                  error occurs.\n\n\n\n              Ranges shown are in degrees. The exact range limits\n              deviate slightly due to floating-point arithmetic.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_AsText(ST_Validate(@ls1));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls1)) |\n+------------------------------+\n| NULL                         |\n+------------------------------+\nmysql> SELECT ST_AsText(ST_Validate(@ls2));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls2)) |\n+------------------------------+\n| LINESTRING(0 0,1 1)          |\n+------------------------------+"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_AsText(ST_Validate(@ls1));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls1)) |\n+------------------------------+\n| NULL                         |\n+------------------------------+\nmysql> SELECT ST_AsText(ST_Validate(@ls2));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls2)) |\n+------------------------------+\n| LINESTRING(0 0,1 1)          |\n+------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-validate"], "Feature Type": ["Function"], "index": 296, "vector_txt": "296:Feature: ST_Validate(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Within(g1,\n            g2)"], "Description": ["Whether one geometry is within another", "\nST_Within(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 is spatially within\n            g2. This tests the opposite\n            relationship as\n            ST_Contains().\n          ", "\nST_Within() handles its\n            arguments as described in the introduction to this section.\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-within"], "Feature Type": ["Function"], "index": 297, "vector_txt": "297:Feature: ST_Within(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_X(p [,\n            new_x_val])"], "Description": ["Return X coordinate of Point", "\nST_X(p [,\n            new_x_val])\n", "\n            With a single argument representing a valid\n            Point object\n            p,\n            ST_X() returns the\n            X-coordinate value of p as a\n            double-precision number. The X coordinate is considered to\n            refer to the axis that appears first in the\n            Point spatial reference system (SRS)\n            definition.\n          ", "\n            With the optional second argument,\n            ST_X() returns a\n            Point object like the first argument with\n            its X coordinate equal to the second argument. If the\n            Point object has a geographic SRS, the\n            second argument must be in the proper range for longitude or\n            latitude values.\n          ", "\nST_X() handles its arguments\n            as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_X(Point(56.7, 53.34));\n+--------------------------+\n| ST_X(Point(56.7, 53.34)) |\n+--------------------------+\n|                     56.7 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_X(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_X(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(10.5 53.34)                         |\n+-------------------------------------------+"], "Examples": ["mysql> SELECT ST_X(Point(56.7, 53.34));\n+--------------------------+\n| ST_X(Point(56.7, 53.34)) |\n+--------------------------+\n|                     56.7 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_X(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_X(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(10.5 53.34)                         |\n+-------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-x"], "Feature Type": ["Function"], "index": 298, "vector_txt": "298:Feature: ST_X(p [,\n            new_x_val])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["AVG([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the average value of the argument", "\nAVG([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the average value of\n            expr. The\n            DISTINCT option can be used to return the\n            average of the distinct values of\n            expr.\n          ", "\n            If there are no matching rows,\n            AVG() returns\n            NULL. The function also returns\n            NULL if expr\n            is NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, AVG(test_score)\n       FROM student\n       GROUP BY student_name;"], "Examples": ["mysql> SELECT student_name, AVG(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_avg"], "Feature Type": ["Function"], "index": 299, "vector_txt": "299:Feature: AVG([DISTINCT]\n            expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Y(p [,\n            new_y_val])"], "Description": ["Return Y coordinate of Point", "\nST_Y(p [,\n            new_y_val])\n", "\n            With a single argument representing a valid\n            Point object\n            p,\n            ST_Y() returns the\n            Y-coordinate value of p as a\n            double-precision number.The Y coordinate is considered to\n            refer to the axis that appears second in the\n            Point spatial reference system (SRS)\n            definition.\n          ", "\n            With the optional second argument,\n            ST_Y() returns a\n            Point object like the first argument with\n            its Y coordinate equal to the second argument. If the\n            Point object has a geographic SRS, the\n            second argument must be in the proper range for longitude or\n            latitude values.\n          ", "\nST_Y() handles its arguments\n            as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_Y(Point(56.7, 53.34));\n+--------------------------+\n| ST_Y(Point(56.7, 53.34)) |\n+--------------------------+\n|                    53.34 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_Y(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_Y(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(56.7 10.5)                          |\n+-------------------------------------------+"], "Examples": ["mysql> SELECT ST_Y(Point(56.7, 53.34));\n+--------------------------+\n| ST_Y(Point(56.7, 53.34)) |\n+--------------------------+\n|                    53.34 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_Y(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_Y(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(56.7 10.5)                          |\n+-------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-y"], "Feature Type": ["Function"], "index": 300, "vector_txt": "300:Feature: ST_Y(p [,\n            new_y_val])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["STATEMENT_DIGEST(statement)"], "Description": ["Compute statement digest hash value", "\nSTATEMENT_DIGEST(statement)\n", "\n          Given an SQL statement as a string, returns the statement\n          digest hash value as a string in the connection character set,\n          or NULL if the argument is\n          NULL. The related\n          STATEMENT_DIGEST_TEXT()\n          function returns the normalized statement digest. For\n          information about statement digesting, see\n          Section\u00a029.10, \u201cPerformance Schema Statement Digests and Sampling\u201d.\n        ", "\n          Both functions use the MySQL parser to parse the statement. If\n          parsing fails, an error occurs. The error message includes the\n          parse error only if the statement is provided as a literal\n          string.\n        ", "\n          The max_digest_length system\n          variable determines the maximum number of bytes available to\n          these functions for computing normalized statement digests.\n        ", "Press CTRL+C to copy mysql> SET @stmt = 'SELECT * FROM mytable WHERE cola = 10 AND colb = 20';\nmysql> SELECT STATEMENT_DIGEST(@stmt);\n+------------------------------------------------------------------+\n| STATEMENT_DIGEST(@stmt)                                          |\n+------------------------------------------------------------------+\n| 3bb95eeade896657c4526e74ff2a2862039d0a0fe8a9e7155b5fe492cbd78387 |\n+------------------------------------------------------------------+\nmysql> SELECT STATEMENT_DIGEST_TEXT(@stmt);\n+----------------------------------------------------------+\n| STATEMENT_DIGEST_TEXT(@stmt)                             |\n+----------------------------------------------------------+\n| SELECT * FROM `mytable` WHERE `cola` = ? AND `colb` = ?  |\n+----------------------------------------------------------+"], "Examples": ["mysql> SET @stmt = 'SELECT * FROM mytable WHERE cola = 10 AND colb = 20';\nmysql> SELECT STATEMENT_DIGEST(@stmt);\n+------------------------------------------------------------------+\n| STATEMENT_DIGEST(@stmt)                                          |\n+------------------------------------------------------------------+\n| 3bb95eeade896657c4526e74ff2a2862039d0a0fe8a9e7155b5fe492cbd78387 |\n+------------------------------------------------------------------+\nmysql> SELECT STATEMENT_DIGEST_TEXT(@stmt);\n+----------------------------------------------------------+\n| STATEMENT_DIGEST_TEXT(@stmt)                             |\n+----------------------------------------------------------+\n| SELECT * FROM `mytable` WHERE `cola` = ? AND `colb` = ?  |\n+----------------------------------------------------------+"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_statement-digest"], "Feature Type": ["Function"], "index": 301, "vector_txt": "301:Feature: STATEMENT_DIGEST(statement)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["STATEMENT_DIGEST_TEXT(statement)"], "Description": ["Compute normalized statement digest", "\nSTATEMENT_DIGEST_TEXT(statement)\n", "\n          Given an SQL statement as a string, returns the normalized\n          statement digest as a string in the connection character set,\n          or NULL if the argument is\n          NULL. For additional discussion and\n          examples, see the description of the related\n          STATEMENT_DIGEST() function.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_statement-digest-text"], "Feature Type": ["Function"], "index": 302, "vector_txt": "302:Feature: STATEMENT_DIGEST_TEXT(statement)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["STD(expr)\n            [over_clause]"], "Description": ["Return the population standard deviation", "\nSTD(expr)\n            [over_clause]\n", "\n            Returns the population standard deviation of\n            expr.\n            STD() is a synonym for the\n            standard SQL function\n            STDDEV_POP(), provided as a\n            MySQL extension.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STD() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_std"], "Feature Type": ["Function"], "index": 303, "vector_txt": "303:Feature: STD(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["STDDEV(expr)\n            [over_clause]"], "Description": ["Return the population standard deviation", "\nSTDDEV(expr)\n            [over_clause]\n", "\n            Returns the population standard deviation of\n            expr.\n            STDDEV() is a synonym for the\n            standard SQL function\n            STDDEV_POP(), provided for\n            compatibility with Oracle.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STDDEV() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_stddev"], "Feature Type": ["Function"], "index": 304, "vector_txt": "304:Feature: STDDEV(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["STDDEV_POP(expr)\n            [over_clause]"], "Description": ["Return the population standard deviation", "\nSTDDEV_POP(expr)\n            [over_clause]\n", "\n            Returns the population standard deviation of\n            expr (the square root of\n            VAR_POP()). You can also use\n            STD() or\n            STDDEV(), which are\n            equivalent but not standard SQL.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STDDEV_POP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_stddev-pop"], "Feature Type": ["Function"], "index": 305, "vector_txt": "305:Feature: STDDEV_POP(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["STDDEV_SAMP(expr)\n            [over_clause]"], "Description": ["Return the sample standard deviation", "\nSTDDEV_SAMP(expr)\n            [over_clause]\n", "\n            Returns the sample standard deviation of\n            expr (the square root of\n            VAR_SAMP().\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STDDEV_SAMP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_stddev-samp"], "Feature Type": ["Function"], "index": 306, "vector_txt": "306:Feature: STDDEV_SAMP(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["STR_TO_DATE(str,format)"], "Description": ["Convert a string to a date", "\nSTR_TO_DATE(str,format)\n", "\n          This is the inverse of the\n          DATE_FORMAT() function. It\n          takes a string str and a format\n          string format.\n          STR_TO_DATE() returns a\n          DATETIME value if the format\n          string contains both date and time parts, or a\n          DATE or\n          TIME value if the string\n          contains only date or time parts. If\n          str or\n          format is NULL,\n          the function returns NULL. If the date,\n          time, or datetime value extracted from\n          str cannot be parsed according to\n          the rules followed by the server,\n          STR_TO_DATE() returns\n          NULL and produces a warning.\n        ", "\n          The server scans str attempting to\n          match format to it. The format\n          string can contain literal characters and format specifiers\n          beginning with %. Literal characters in\n          format must match literally in\n          str. Format specifiers in\n          format must match a date or time\n          part in str. For the specifiers\n          that can be used in format, see the\n          DATE_FORMAT() function\n          description.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');\n        -> '2013-05-01'\nmysql> SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');\n        -> '2013-05-01'", "\n          Scanning starts at the beginning of\n          str and fails if\n          format is found not to match. Extra\n          characters at the end of str are\n          ignored.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');\n        -> '09:30:17'\nmysql> SELECT STR_TO_DATE('a09:30:17','%h:%i:%s');\n        -> NULL\nmysql> SELECT STR_TO_DATE('09:30:17a','%h:%i:%s');\n        -> '09:30:17'", "\n          Unspecified date or time parts have a value of 0, so\n          incompletely specified values in\n          str produce a result with some or\n          all parts set to 0:\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('abc','abc');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('9','%m');\n        -> '0000-09-00'\nmysql> SELECT STR_TO_DATE('9','%s');\n        -> '00:00:09'", "\n          Range checking on the parts of date values is as described in\n          Section\u00a013.2.2, \u201cThe DATE, DATETIME, and TIMESTAMP Types\u201d. This means, for example, that\n          \u201czero\u201d dates or dates with part values of 0 are\n          permitted unless the SQL mode is set to disallow such values.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');\n        -> '2004-04-31'", "\n          If the NO_ZERO_DATE SQL mode\n          is enabled, zero dates are disallowed. In that case,\n          STR_TO_DATE() returns\n          NULL and generates a warning:\n        ", "Press CTRL+C to copy mysql> SET sql_mode = '';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| 0000-00-00                            |\n+---------------------------------------+\nmysql> SET sql_mode = 'NO_ZERO_DATE';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| NULL                                  |\n+---------------------------------------+\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1411\nMessage: Incorrect datetime value: '00/00/0000' for function str_to_date", "\n          In some previous versions of MySQL, it was possible to pass an\n          invalid date string such as '2021-11-31' to\n          this function. In MySQL 8.4,\n          STR_TO_DATE() performs complete range\n          checking and raises an error if the date after conversion\n          would be invalid.\n", "\n\nNote\n\n\n            You cannot use format \"%X%V\" to convert a\n            year-week string to a date because the combination of a year\n            and week does not uniquely identify a year and month if the\n            week crosses a month boundary. To convert a year-week to a\n            date, you should also specify the weekday:\n          Press CTRL+C to copy mysql> SELECT STR_TO_DATE('200442 Monday', '%X%V %W');\n        -> '2004-10-18'\n", "\n          You should also be aware that, for dates and the date portions\n          of datetime values, STR_TO_DATE() checks\n          (only) the individual year, month, and day of month values for\n          validity. More precisely, this means that the year is checked\n          to be sure that it is in the range 0-9999 inclusive, the month\n          is checked to ensure that it is in the range 1-12 inclusive,\n          and the day of month is checked to make sure that it is in the\n          range 1-31 inclusive, but the server does not check the values\n          in combination. For example, SELECT\n          STR_TO_DATE('23-2-31', '%Y-%m-%d') returns\n          2023-02-31. Enabling or disabling the\n          ALLOW_INVALID_DATES server\n          SQL mode has no effect on this behavior. See\n          Section\u00a013.2.2, \u201cThe DATE, DATETIME, and TIMESTAMP Types\u201d, for more information.\n        "], "Examples": ["mysql> SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');\n        -> '2013-05-01'\nmysql> SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');\n        -> '2013-05-01'", "mysql> SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');\n        -> '09:30:17'\nmysql> SELECT STR_TO_DATE('a09:30:17','%h:%i:%s');\n        -> NULL\nmysql> SELECT STR_TO_DATE('09:30:17a','%h:%i:%s');\n        -> '09:30:17'", "mysql> SELECT STR_TO_DATE('abc','abc');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('9','%m');\n        -> '0000-09-00'\nmysql> SELECT STR_TO_DATE('9','%s');\n        -> '00:00:09'", "mysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');\n        -> '2004-04-31'", "mysql> SET sql_mode = '';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| 0000-00-00                            |\n+---------------------------------------+\nmysql> SET sql_mode = 'NO_ZERO_DATE';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| NULL                                  |\n+---------------------------------------+\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1411\nMessage: Incorrect datetime value: '00/00/0000' for function str_to_date", "mysql> SELECT STR_TO_DATE('200442 Monday', '%X%V %W');\n        -> '2004-10-18'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_str-to-date"], "Feature Type": ["Function"], "index": 307, "vector_txt": "307:Feature: STR_TO_DATE(str,format)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators", "14.8 String Functions and Operators", "14.8.1 String Comparison Functions and Operators"], "Feature": ["STRCMP(expr1,expr2)"], "Description": ["Compare two strings", "\nSTRCMP(expr1,expr2)\n", "\nSTRCMP() returns\n            0 if the strings are the same,\n            -1 if the first argument is smaller than\n            the second according to the current sort order, and\n            NULL if either argument is\n            NULL. It returns 1\n            otherwise.\n          ", "Press CTRL+C to copy mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "\nSTRCMP() performs the\n            comparison using the collation of the arguments.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "\n            If the collations are incompatible, one of the arguments\n            must be converted to be compatible with the other. See\n            Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "Comparison Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html#function_strcmp"], "Feature Type": ["Function"], "index": 308, "vector_txt": "308:Feature: STRCMP(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["SUBDATE(date,INTERVAL\n          expr\nunit)"], "Description": ["Synonym for DATE_SUB() when invoked with three arguments", "\nSUBDATE(date,INTERVAL\n          expr\nunit),\n          SUBDATE(expr,days)\n", "\n          When invoked with the INTERVAL form of the\n          second argument, SUBDATE() is a\n          synonym for DATE_SUB(). For\n          information on the INTERVAL\nunit argument, see the discussion\n          for DATE_ADD().\n        ", "Press CTRL+C to copy mysql> SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'\nmysql> SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'", "\n          The second form enables the use of an integer value for\n          days. In such cases, it is\n          interpreted as the number of days to be subtracted from the\n          date or datetime expression expr.\n        ", "Press CTRL+C to copy mysql> SELECT SUBDATE('2008-01-02 12:00:00', 31);\n        -> '2007-12-02 12:00:00'", "\n          This function returns NULL if any of its\n          arguments are NULL.\n        "], "Examples": ["mysql> SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'\nmysql> SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'", "mysql> SELECT SUBDATE('2008-01-02 12:00:00', 31);\n        -> '2007-12-02 12:00:00'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_subdate"], "Feature Type": ["Function"], "index": 309, "vector_txt": "309:Feature: SUBDATE(date,INTERVAL\n          expr\nunit)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["BENCHMARK(count,expr)"], "Description": ["Repeatedly execute an expression", "\nBENCHMARK(count,expr)\n", "\n          The BENCHMARK() function\n          executes the expression expr\n          repeatedly count times. It may be\n          used to time how quickly MySQL processes the expression. The\n          result value is 0, or\n          NULL for inappropriate arguments such as a\n          NULL or negative repeat count.\n        ", "\n          The intended use is from within the mysql\n          client, which reports query execution times:\n        ", "Press CTRL+C to copy mysql> SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));\n+---------------------------------------------------+\n| BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye')) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+\n1 row in set (4.74 sec)", "\n          The time reported is elapsed time on the client end, not CPU\n          time on the server end. It is advisable to execute\n          BENCHMARK() several times, and\n          to interpret the result with regard to how heavily loaded the\n          server machine is.\n        ", "\nBENCHMARK() is intended for\n          measuring the runtime performance of scalar expressions, which\n          has some significant implications for the way that you use it\n          and interpret the results:\n", "\n\n              Only scalar expressions can be used. Although the\n              expression can be a subquery, it must return a single\n              column and at most a single row. For example,\n              BENCHMARK(10, (SELECT * FROM\n              t)) fails if the table t has\n              more than one column or more than one row.\n            \n              Executing a SELECT\n              expr statement\n              N times differs from executing\n              SELECT BENCHMARK(N,\n              expr) in terms of the\n              amount of overhead involved. The two have very different\n              execution profiles and you should not expect them to take\n              the same amount of time. The former involves the parser,\n              optimizer, table locking, and runtime evaluation\n              N times each. The latter\n              involves only runtime evaluation\n              N times, and all the other\n              components just once. Memory structures already allocated\n              are reused, and runtime optimizations such as local\n              caching of results already evaluated for aggregate\n              functions can alter the results. Use of\n              BENCHMARK() thus measures\n              performance of the runtime component by giving more weight\n              to that component and removing the \u201cnoise\u201d\n              introduced by the network, parser, optimizer, and so\n              forth.\n\n"], "Examples": ["mysql> SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));\n+---------------------------------------------------+\n| BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye')) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+\n1 row in set (4.74 sec)"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_benchmark"], "Feature Type": ["Function"], "index": 310, "vector_txt": "310:Feature: BENCHMARK(count,expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["SUBSTR(str,pos)"], "Description": ["Return the substring as specified", "\nSUBSTR(str,pos),\n          SUBSTR(str\n          FROM pos),\n          SUBSTR(str,pos,len),\n          SUBSTR(str\n          FROM pos FOR\n          len)\n", "\nSUBSTR() is a synonym for\n          SUBSTRING().\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_substr"], "Feature Type": ["Function"], "index": 311, "vector_txt": "311:Feature: SUBSTR(str,pos)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["SUBSTRING(str,pos)"], "Description": ["Return the substring as specified", "\nSUBSTRING(str,pos),\n          SUBSTRING(str\n          FROM pos),\n          SUBSTRING(str,pos,len),\n          SUBSTRING(str\n          FROM pos FOR\n          len)\n", "\n          The forms without a len argument\n          return a substring from string str\n          starting at position pos. The forms\n          with a len argument return a\n          substring len characters long from\n          string str, starting at position\n          pos. The forms that use\n          FROM are standard SQL syntax. It is also\n          possible to use a negative value for\n          pos. In this case, the beginning of\n          the substring is pos characters\n          from the end of the string, rather than the beginning. A\n          negative value may be used for pos\n          in any of the forms of this function. A value of 0 for\n          pos returns an empty string.\n        ", "\n          For all forms of SUBSTRING(),\n          the position of the first character in the string from which\n          the substring is to be extracted is reckoned as\n          1.\n        ", "Press CTRL+C to copy mysql> SELECT SUBSTRING('Quadratically',5);\n        -> 'ratically'\nmysql> SELECT SUBSTRING('foobarbar' FROM 4);\n        -> 'barbar'\nmysql> SELECT SUBSTRING('Quadratically',5,6);\n        -> 'ratica'\nmysql> SELECT SUBSTRING('Sakila', -3);\n        -> 'ila'\nmysql> SELECT SUBSTRING('Sakila', -5, 3);\n        -> 'aki'\nmysql> SELECT SUBSTRING('Sakila' FROM -4 FOR 2);\n        -> 'ki'", "\n          This function is multibyte safe. It returns\n          NULL if any of its arguments are\n          NULL.\n        ", "\n          If len is less than 1, the result\n          is the empty string.\n        "], "Examples": ["mysql> SELECT SUBSTRING('Quadratically',5);\n        -> 'ratically'\nmysql> SELECT SUBSTRING('foobarbar' FROM 4);\n        -> 'barbar'\nmysql> SELECT SUBSTRING('Quadratically',5,6);\n        -> 'ratica'\nmysql> SELECT SUBSTRING('Sakila', -3);\n        -> 'ila'\nmysql> SELECT SUBSTRING('Sakila', -5, 3);\n        -> 'aki'\nmysql> SELECT SUBSTRING('Sakila' FROM -4 FOR 2);\n        -> 'ki'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_substring"], "Feature Type": ["Function"], "index": 312, "vector_txt": "312:Feature: SUBSTRING(str,pos)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["SUBSTRING_INDEX(str,delim,count)"], "Description": ["Return a substring from a string before the specified number of", "\nSUBSTRING_INDEX(str,delim,count)\n", "\n          Returns the substring from string\n          str before\n          count occurrences of the delimiter\n          delim. If\n          count is positive, everything to\n          the left of the final delimiter (counting from the left) is\n          returned. If count is negative,\n          everything to the right of the final delimiter (counting from\n          the right) is returned.\n          SUBSTRING_INDEX() performs a\n          case-sensitive match when searching for\n          delim.\n        ", "Press CTRL+C to copy mysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);\n        -> 'www.mysql'\nmysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);\n        -> 'mysql.com'", "\n          This function is multibyte safe.\n        ", "\nSUBSTRING_INDEX() returns\n          NULL if any of its arguments are\n          NULL.\n        "], "Examples": ["mysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);\n        -> 'www.mysql'\nmysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);\n        -> 'mysql.com'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_substring-index"], "Feature Type": ["Function"], "index": 313, "vector_txt": "313:Feature: SUBSTRING_INDEX(str,delim,count)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["SUBTIME(expr1,expr2)"], "Description": ["Subtract times", "\nSUBTIME(expr1,expr2)\n", "\nSUBTIME() returns\n          expr1 \u2212\n          expr2 expressed as a value in the\n          same format as expr1.\n          expr1 is a time or datetime\n          expression, and expr2 is a time\n          expression.\n        ", "\n          Resolution of this function's return type is performed as\n          it is for the ADDTIME()\n          function; see the description of that function for more\n          information.\n        ", "Press CTRL+C to copy mysql> SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n        -> '2007-12-30 22:58:58.999997'\nmysql> SELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n        -> '-00:59:59.999999'", "\n          This function returns NULL if\n          expr1 or\n          expr2 is NULL.\n        "], "Examples": ["mysql> SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n        -> '2007-12-30 22:58:58.999997'\nmysql> SELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n        -> '-00:59:59.999999'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_subtime"], "Feature Type": ["Function"], "index": 314, "vector_txt": "314:Feature: SUBTIME(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["SUM([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the sum", "\nSUM([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the sum of expr. If the\n            return set has no rows, SUM()\n            returns NULL. The\n            DISTINCT keyword can be used to sum only\n            the distinct values of expr.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            SUM() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_sum"], "Feature Type": ["Function"], "index": 315, "vector_txt": "315:Feature: SUM([DISTINCT]\n            expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["SYSDATE([fsp])"], "Description": ["Return the time at which the function executes", "\nSYSDATE([fsp])\n", "\n          Returns the current date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "\nSYSDATE() returns the time at\n          which it executes. This differs from the behavior for\n          NOW(), which returns a constant\n          time that indicates the time at which the statement began to\n          execute. (Within a stored function or trigger,\n          NOW() returns the time at which\n          the function or triggering statement began to execute.)\n        ", "Press CTRL+C to copy mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+", "\n          In addition, the SET TIMESTAMP statement\n          affects the value returned by\n          NOW() but not by\n          SYSDATE(). This means that\n          timestamp settings in the binary log have no effect on\n          invocations of SYSDATE().\n        ", "\n          Because SYSDATE() can return\n          different values even within the same statement, and is not\n          affected by SET TIMESTAMP, it is\n          nondeterministic and therefore unsafe for replication if\n          statement-based binary logging is used. If that is a problem,\n          you can use row-based logging.\n        ", "\n          Alternatively, you can use the\n          --sysdate-is-now option to\n          cause SYSDATE() to be an alias\n          for NOW(). This works if the\n          option is used on both the replication source server and the\n          replica.\n        ", "\n          The nondeterministic nature of\n          SYSDATE() also means that\n          indexes cannot be used for evaluating expressions that refer\n          to it.\n        "], "Examples": ["mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_sysdate"], "Feature Type": ["Function"], "index": 316, "vector_txt": "316:Feature: SYSDATE([fsp])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["SYSTEM_USER()"], "Description": ["Synonym for USER()", "\nSYSTEM_USER()\n", "\nSYSTEM_USER() is a synonym for\n          USER().\n", "\n\nNote\n\n\n            The SYSTEM_USER() function is\n            distinct from the SYSTEM_USER\n            privilege. The former returns the current MySQL account\n            name. The latter distinguishes the system user and regular\n            user account categories (see\n            Section\u00a08.2.11, \u201cAccount Categories\u201d).\n\n", "\n          Like USER(), this function can\n          be used for the default value of a\n          VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (SYSTEM_USER()));"], "Examples": ["CREATE TABLE t (c VARCHAR(288) DEFAULT (SYSTEM_USER()));"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_system-user"], "Feature Type": ["Function"], "index": 317, "vector_txt": "317:Feature: SYSTEM_USER()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["TAN(X)"], "Description": ["Return the tangent of the argument", "\nTAN(X)\n", "\n            Returns the tangent of X, where\n            X is given in radians. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT TAN(PI());\n        -> -1.2246063538224e-16\nmysql> SELECT TAN(PI()+1);\n        -> 1.5574077246549"], "Examples": ["mysql> SELECT TAN(PI());\n        -> -1.2246063538224e-16\nmysql> SELECT TAN(PI()+1);\n        -> 1.5574077246549"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_tan"], "Feature Type": ["Function"], "index": 318, "vector_txt": "318:Feature: TAN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIME(expr)"], "Description": ["Extract the time portion of the expression passed", "\nTIME(expr)\n", "\n          Extracts the time part of the time or datetime expression\n          expr and returns it as a string.\n          Returns NULL if\n          expr is NULL.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        ", "Press CTRL+C to copy mysql> SELECT TIME('2003-12-31 01:02:03');\n        -> '01:02:03'\nmysql> SELECT TIME('2003-12-31 01:02:03.000123');\n        -> '01:02:03.000123'"], "Examples": ["mysql> SELECT TIME('2003-12-31 01:02:03');\n        -> '01:02:03'\nmysql> SELECT TIME('2003-12-31 01:02:03.000123');\n        -> '01:02:03.000123'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time"], "Feature Type": ["Function"], "index": 319, "vector_txt": "319:Feature: TIME(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIME_FORMAT(time,format)"], "Description": ["Format as time", "\nTIME_FORMAT(time,format)\n", "\n          This is used like the\n          DATE_FORMAT() function, but the\n          format string may contain format\n          specifiers only for hours, minutes, seconds, and microseconds.\n          Other specifiers produce a NULL or\n          0. TIME_FORMAT() returns\n          NULL if time or\n          format is NULL.\n        ", "\n          If the time value contains an hour\n          part that is greater than 23, the\n          %H and %k hour format\n          specifiers produce a value larger than the usual range of\n          0..23. The other hour format specifiers\n          produce the hour value modulo 12.\n        ", "Press CTRL+C to copy mysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n        -> '100 100 04 04 4'"], "Examples": ["mysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n        -> '100 100 04 04 4'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time-format"], "Feature Type": ["Function"], "index": 320, "vector_txt": "320:Feature: TIME_FORMAT(time,format)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["BIN(N)"], "Description": ["Return a string containing binary representation of a number", "\nBIN(N)\n", "\n          Returns a string representation of the binary value of\n          N, where\n          N is a longlong\n          (BIGINT) number. This is\n          equivalent to\n          CONV(N,10,2).\n          Returns NULL if\n          N is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT BIN(12);\n        -> '1100'"], "Examples": ["mysql> SELECT BIN(12);\n        -> '1100'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_bin"], "Feature Type": ["Function"], "index": 321, "vector_txt": "321:Feature: BIN(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIME_TO_SEC(time)"], "Description": ["Return the argument converted to seconds", "\nTIME_TO_SEC(time)\n", "\n          Returns the time argument,\n          converted to seconds. Returns NULL if\n          time is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIME_TO_SEC('22:23:00');\n        -> 80580\nmysql> SELECT TIME_TO_SEC('00:39:38');\n        -> 2378"], "Examples": ["mysql> SELECT TIME_TO_SEC('22:23:00');\n        -> 80580\nmysql> SELECT TIME_TO_SEC('00:39:38');\n        -> 2378"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time-to-sec"], "Feature Type": ["Function"], "index": 322, "vector_txt": "322:Feature: TIME_TO_SEC(time)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIMEDIFF(expr1,expr2)"], "Description": ["Subtract time", "\nTIMEDIFF(expr1,expr2)\n", "\nTIMEDIFF() returns\n          expr1 \u2212\n          expr2 expressed as a time value.\n          expr1 and\n          expr2 are strings which are\n          converted to TIME or\n          DATETIME expressions; these must be of the\n          same type following conversion. Returns\n          NULL if expr1 or\n          expr2 is NULL.\n        ", "\n          The result returned by TIMEDIFF() is\n          limited to the range allowed for\n          TIME values. Alternatively, you\n          can use either of the functions\n          TIMESTAMPDIFF() and\n          UNIX_TIMESTAMP(), both of which\n          return integers.\n        ", "Press CTRL+C to copy mysql> SELECT TIMEDIFF('2000-01-01 00:00:00',\n    ->                 '2000-01-01 00:00:00.000001');\n        -> '-00:00:00.000001'\nmysql> SELECT TIMEDIFF('2008-12-31 23:59:59.000001',\n    ->                 '2008-12-30 01:01:01.000002');\n        -> '46:58:57.999999'"], "Examples": ["mysql> SELECT TIMEDIFF('2000-01-01 00:00:00',\n    ->                 '2000-01-01 00:00:00.000001');\n        -> '-00:00:00.000001'\nmysql> SELECT TIMEDIFF('2008-12-31 23:59:59.000001',\n    ->                 '2008-12-30 01:01:01.000002');\n        -> '46:58:57.999999'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timediff"], "Feature Type": ["Function"], "index": 323, "vector_txt": "323:Feature: TIMEDIFF(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIMESTAMP(expr)"], "Description": ["With a single argument, this function returns the date or datetime", "\nTIMESTAMP(expr),\n          TIMESTAMP(expr1,expr2)\n", "\n          With a single argument, this function returns the date or\n          datetime expression expr as a\n          datetime value. With two arguments, it adds the time\n          expression expr2 to the date or\n          datetime expression expr1 and\n          returns the result as a datetime value. Returns\n          NULL if expr,\n          expr1, or\n          expr2 is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMP('2003-12-31');\n        -> '2003-12-31 00:00:00'\nmysql> SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');\n        -> '2004-01-01 00:00:00'"], "Examples": ["mysql> SELECT TIMESTAMP('2003-12-31');\n        -> '2003-12-31 00:00:00'\nmysql> SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');\n        -> '2004-01-01 00:00:00'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestamp"], "Feature Type": ["Function"], "index": 324, "vector_txt": "324:Feature: TIMESTAMP(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIMESTAMPADD(unit,interval,datetime_expr)"], "Description": ["Add an interval to a datetime expression", "\nTIMESTAMPADD(unit,interval,datetime_expr)\n", "\n          Adds the integer expression\n          interval to the date or datetime\n          expression datetime_expr. The unit\n          for interval is given by the\n          unit argument, which should be one\n          of the following values: MICROSECOND\n          (microseconds), SECOND,\n          MINUTE, HOUR,\n          DAY, WEEK,\n          MONTH, QUARTER, or\n          YEAR.\n        ", "\n          The unit value may be specified\n          using one of keywords as shown, or with a prefix of\n          SQL_TSI_. For example,\n          DAY and SQL_TSI_DAY both\n          are legal.\n        ", "\n          This function returns NULL if\n          interval or\n          datetime_expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02');\n        -> '2003-01-02 00:01:00'\nmysql> SELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n        -> '2003-01-09'", "\n          When adding a MONTH interval to a\n          DATE or DATETIME value,\n          and the resulting date includes a day that does not exist in\n          the given month, the day is adjusted to the last day of the\n          month, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPADD(MONTH, 1, DATE '2024-03-30') AS t1, \n     >        TIMESTAMPADD(MONTH, 1, DATE '2024-03-31') AS t2;\n+------------+------------+\n| t1         | t2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02');\n        -> '2003-01-02 00:01:00'\nmysql> SELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n        -> '2003-01-09'", "mysql> SELECT TIMESTAMPADD(MONTH, 1, DATE '2024-03-30') AS t1, \n     >        TIMESTAMPADD(MONTH, 1, DATE '2024-03-31') AS t2;\n+------------+------------+\n| t1         | t2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestampadd"], "Feature Type": ["Function"], "index": 325, "vector_txt": "325:Feature: TIMESTAMPADD(unit,interval,datetime_expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)"], "Description": ["Return the difference of two datetime expressions, using the units", "\nTIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n", "\n          Returns datetime_expr2 \u2212\n          datetime_expr1, where\n          datetime_expr1 and\n          datetime_expr2 are date or datetime\n          expressions. One expression may be a date and the other a\n          datetime; a date value is treated as a datetime having the\n          time part '00:00:00' where necessary. The\n          unit for the result (an integer) is given by the\n          unit argument. The legal values for\n          unit are the same as those listed\n          in the description of the\n          TIMESTAMPADD() function.\n        ", "\n          This function returns NULL if\n          datetime_expr1 or\n          datetime_expr2 is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n        -> 3\nmysql> SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n        -> -1\nmysql> SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n        -> 128885", "\n\nNote\n\n\n            The order of the date or datetime arguments for this\n            function is the opposite of that used with the\n            TIMESTAMP() function when\n            invoked with 2 arguments.\n\n"], "Examples": ["mysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n        -> 3\nmysql> SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n        -> -1\nmysql> SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n        -> 128885"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestampdiff"], "Feature Type": ["Function"], "index": 326, "vector_txt": "326:Feature: TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TO_DAYS(date)"], "Description": ["Return the date argument converted to days", "\nTO_DAYS(date)\n", "\n          Given a date date, returns a day\n          number (the number of days since year 0). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS(950501);\n        -> 728779\nmysql> SELECT TO_DAYS('2007-10-07');\n        -> 733321", "\nTO_DAYS() is not intended for\n          use with values that precede the advent of the Gregorian\n          calendar (1582), because it does not take into account the\n          days that were lost when the calendar was changed. For dates\n          before 1582 (and possibly a later year in other locales),\n          results from this function are not reliable. See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d, for details.\n        ", "\n          Remember that MySQL converts two-digit year values in dates to\n          four-digit form using the rules in\n          Section\u00a013.2, \u201cDate and Time Data Types\u201d. For example,\n          '2008-10-07' and\n          '08-10-07' are seen as identical dates:\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS('2008-10-07'), TO_DAYS('08-10-07');\n        -> 733687, 733687", "\n          In MySQL, the zero date is defined as\n          '0000-00-00', even though this date is\n          itself considered invalid. This means that, for\n          '0000-00-00' and\n          '0000-01-01',\n          TO_DAYS() returns the values\n          shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS('0000-00-00');\n+-----------------------+\n| to_days('0000-00-00') |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| to_days('0000-01-01') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n1 row in set (0.00 sec)", "\n          This is true whether or not the\n          ALLOW_INVALID_DATES SQL\n          server mode is enabled.\n        "], "Examples": ["mysql> SELECT TO_DAYS(950501);\n        -> 728779\nmysql> SELECT TO_DAYS('2007-10-07');\n        -> 733321", "mysql> SELECT TO_DAYS('2008-10-07'), TO_DAYS('08-10-07');\n        -> 733687, 733687", "mysql> SELECT TO_DAYS('0000-00-00');\n+-----------------------+\n| to_days('0000-00-00') |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| to_days('0000-01-01') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_to-days"], "Feature Type": ["Function"], "index": 327, "vector_txt": "327:Feature: TO_DAYS(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TO_SECONDS(expr)"], "Description": ["Return the date or datetime argument converted to seconds since", "\nTO_SECONDS(expr)\n", "\n          Given a date or datetime expr,\n          returns the number of seconds since the year 0. If\n          expr is not a valid date or\n          datetime value (including NULL), it returns\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TO_SECONDS(950501);\n        -> 62966505600\nmysql> SELECT TO_SECONDS('2009-11-29');\n        -> 63426672000\nmysql> SELECT TO_SECONDS('2009-11-29 13:43:32');\n        -> 63426721412\nmysql> SELECT TO_SECONDS( NOW() );\n        -> 63426721458", "\n          Like TO_DAYS(),\n          TO_SECONDS() is not intended for use with\n          values that precede the advent of the Gregorian calendar\n          (1582), because it does not take into account the days that\n          were lost when the calendar was changed. For dates before 1582\n          (and possibly a later year in other locales), results from\n          this function are not reliable. See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d, for details.\n        ", "\n          Like TO_DAYS(),\n          TO_SECONDS(), converts two-digit year\n          values in dates to four-digit form using the rules in\n          Section\u00a013.2, \u201cDate and Time Data Types\u201d.\n        ", "\n          In MySQL, the zero date is defined as\n          '0000-00-00', even though this date is\n          itself considered invalid. This means that, for\n          '0000-00-00' and\n          '0000-01-01',\n          TO_SECONDS() returns the values\n          shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TO_SECONDS('0000-00-00');\n+--------------------------+\n| TO_SECONDS('0000-00-00') |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_SECONDS('0000-01-01');\n+--------------------------+\n| TO_SECONDS('0000-01-01') |\n+--------------------------+\n|                    86400 |\n+--------------------------+\n1 row in set (0.00 sec)", "\n          This is true whether or not the\n          ALLOW_INVALID_DATES SQL\n          server mode is enabled.\n        "], "Examples": ["mysql> SELECT TO_SECONDS(950501);\n        -> 62966505600\nmysql> SELECT TO_SECONDS('2009-11-29');\n        -> 63426672000\nmysql> SELECT TO_SECONDS('2009-11-29 13:43:32');\n        -> 63426721412\nmysql> SELECT TO_SECONDS( NOW() );\n        -> 63426721458", "mysql> SELECT TO_SECONDS('0000-00-00');\n+--------------------------+\n| TO_SECONDS('0000-00-00') |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_SECONDS('0000-01-01');\n+--------------------------+\n| TO_SECONDS('0000-01-01') |\n+--------------------------+\n|                    86400 |\n+--------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_to-seconds"], "Feature Type": ["Function"], "index": 328, "vector_txt": "328:Feature: TO_SECONDS(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["TRIM([{BOTH | LEADING | TRAILING}\n          [remstr] FROM]\n          str)"], "Description": ["Remove leading and trailing spaces", "\nTRIM([{BOTH | LEADING | TRAILING}\n          [remstr] FROM]\n          str),\n          TRIM([remstr\n          FROM] str)\n", "\n          Returns the string str with all\n          remstr prefixes or suffixes\n          removed. If none of the specifiers BOTH,\n          LEADING, or TRAILING is\n          given, BOTH is assumed.\n          remstr is optional and, if not\n          specified, spaces are removed.\n        ", "Press CTRL+C to copy mysql> SELECT TRIM('  bar   ');\n        -> 'bar'\nmysql> SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');\n        -> 'barxxx'\nmysql> SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');\n        -> 'bar'\nmysql> SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');\n        -> 'barx'", "\n          This function is multibyte safe. It returns\n          NULL if any of its arguments are\n          NULL.\n        "], "Examples": ["mysql> SELECT TRIM('  bar   ');\n        -> 'bar'\nmysql> SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');\n        -> 'barxxx'\nmysql> SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');\n        -> 'bar'\nmysql> SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');\n        -> 'barx'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_trim"], "Feature Type": ["Function"], "index": 329, "vector_txt": "329:Feature: TRIM([{BOTH | LEADING | TRAILING}\n          [remstr] FROM]\n          str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["TRUNCATE(X,D)"], "Description": ["Truncate to specified number of decimal places", "\nTRUNCATE(X,D)\n", "\n            Returns the number X, truncated\n            to D decimal places. If\n            D is 0, the\n            result has no decimal point or fractional part.\n            D can be negative to cause\n            D digits left of the decimal\n            point of the value X to become\n            zero. If X or\n            D is NULL, the\n            function returns NULL.\n          ", "Press CTRL+C to copy mysql> SELECT TRUNCATE(1.223,1);\n        -> 1.2\nmysql> SELECT TRUNCATE(1.999,1);\n        -> 1.9\nmysql> SELECT TRUNCATE(1.999,0);\n        -> 1\nmysql> SELECT TRUNCATE(-1.999,1);\n        -> -1.9\nmysql> SELECT TRUNCATE(122,-2);\n       -> 100\nmysql> SELECT TRUNCATE(10.28*100,0);\n       -> 1028", "\n            All numbers are rounded toward zero.\n          ", "\n            The data type returned by TRUNCATE()\n            follows the same rules that determine the return type of the\n            ROUND() function; for details, see the\n            description for ROUND().\n"], "Examples": ["mysql> SELECT TRUNCATE(1.223,1);\n        -> 1.2\nmysql> SELECT TRUNCATE(1.999,1);\n        -> 1.9\nmysql> SELECT TRUNCATE(1.999,0);\n        -> 1\nmysql> SELECT TRUNCATE(-1.999,1);\n        -> -1.9\nmysql> SELECT TRUNCATE(122,-2);\n       -> 100\nmysql> SELECT TRUNCATE(10.28*100,0);\n       -> 1028"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_truncate"], "Feature Type": ["Function"], "index": 330, "vector_txt": "330:Feature: TRUNCATE(X,D)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["UCASE(str)"], "Description": ["Synonym for UPPER()", "\nUCASE(str)\n", "\nUCASE() is a synonym for\n          UPPER().\n        ", "\nUCASE() used within views is rewritten as\n          UPPER().\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ucase"], "Feature Type": ["Function"], "index": 331, "vector_txt": "331:Feature: UCASE(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["BIN_TO_UUID(binary_uuid)"], "Description": ["Convert binary UUID to string", "\nBIN_TO_UUID(binary_uuid),\n          BIN_TO_UUID(binary_uuid,\n          swap_flag)\n", "\nBIN_TO_UUID() is the inverse of\n          UUID_TO_BIN(). It converts a\n          binary UUID to a string UUID and returns the result. The\n          binary value should be a UUID as a\n          VARBINARY(16) value. The return\n          value is a string of five hexadecimal numbers separated by\n          dashes. (For details about this format, see the\n          UUID() function description.)\n          If the UUID argument is NULL, the return\n          value is NULL. If any argument is invalid,\n          an error occurs.\n        ", "\nBIN_TO_UUID() takes one or two\n          arguments:\n", "\n\n              The one-argument form takes a binary UUID value. The UUID\n              value is assumed not to have its time-low and time-high\n              parts swapped. The string result is in the same order as\n              the binary argument.\n            \n              The two-argument form takes a binary UUID value and a\n              swap-flag value:\n\n\n\n                  If swap_flag is 0, the\n                  two-argument form is equivalent to the one-argument\n                  form. The string result is in the same order as the\n                  binary argument.\n                \n                  If swap_flag is 1, the UUID\n                  value is assumed to have its time-low and time-high\n                  parts swapped. These parts are swapped back to their\n                  original position in the result value.\n\n\n\n", "\n          For usage examples and information about time-part swapping,\n          see the UUID_TO_BIN() function\n          description.\n        "], "Examples": [], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_bin-to-uuid"], "Feature Type": ["Function"], "index": 332, "vector_txt": "332:Feature: BIN_TO_UUID(binary_uuid)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["BIT_XOR(expr)\n            [over_clause]"], "Description": ["Return bitwise XOR", "\nBIT_XOR(expr)\n            [over_clause]\n", "\n            Returns the bitwise XOR of all\n            bits in expr.\n          ", "\n            The result type depends on whether the function argument\n            values are evaluated as binary strings or numbers:\n", "\n\n                Binary-string evaluation occurs when the argument values\n                have a binary string type, and the argument is not a\n                hexadecimal literal, bit literal, or\n                NULL literal. Numeric evaluation\n                occurs otherwise, with argument value conversion to\n                unsigned 64-bit integers as necessary.\n              \n                Binary-string evaluation produces a binary string of the\n                same length as the argument values. If argument values\n                have unequal lengths, an\n                ER_INVALID_BITWISE_OPERANDS_SIZE\n                error occurs. If the argument size exceeds 511 bytes, an\n                ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE\n                error occurs. Numeric evaluation produces an unsigned\n                64-bit integer.\n\n", "\n            If there are no matching rows,\n            BIT_XOR() returns a neutral\n            value (all bits set to 0) having the same length as the\n            argument values.\n          ", "\nNULL values do not affect the result\n            unless all values are NULL. In that case,\n            the result is a neutral value having the same length as the\n            argument values.\n          ", "\n            For more information discussion about argument evaluation\n            and result types, see the introductory discussion in\n            Section\u00a014.12, \u201cBit Functions and Operators\u201d.\n          ", "\n            If BIT_XOR() is invoked from\n            within the mysql client, binary string\n            results display using hexadecimal notation, depending on the\n            value of the --binary-as-hex.\n            For more information about that option, see\n            Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_bit-xor"], "Feature Type": ["Function"], "index": 333, "vector_txt": "333:Feature: BIT_XOR(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["UNCOMPRESS(string_to_uncompress)"], "Description": ["Uncompress a string compressed", "\nUNCOMPRESS(string_to_uncompress)\n", "\n          Uncompresses a string compressed by the\n          COMPRESS() function. If the\n          argument is not a compressed value, the result is\n          NULL; if\n          string_to_uncompress is\n          NULL, the result is also\n          NULL. This function requires MySQL to have\n          been compiled with a compression library such as\n          zlib. Otherwise, the return value is always\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNCOMPRESS(COMPRESS('any string'));\n        -> 'any string'\nmysql> SELECT UNCOMPRESS('any string');\n        -> NULL"], "Examples": ["mysql> SELECT UNCOMPRESS(COMPRESS('any string'));\n        -> 'any string'\nmysql> SELECT UNCOMPRESS('any string');\n        -> NULL"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_uncompress"], "Feature Type": ["Function"], "index": 334, "vector_txt": "334:Feature: UNCOMPRESS(string_to_uncompress)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["UNCOMPRESSED_LENGTH(compressed_string)"], "Description": ["Return the length of a string before compression", "\nUNCOMPRESSED_LENGTH(compressed_string)\n", "\n          Returns the length that the compressed string had before being\n          compressed. Returns NULL if\n          compressed_string is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));\n        -> 30"], "Examples": ["mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));\n        -> 30"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_uncompressed-length"], "Feature Type": ["Function"], "index": 335, "vector_txt": "335:Feature: UNCOMPRESSED_LENGTH(compressed_string)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["UNHEX(str)"], "Description": ["Return a string containing hex representation of a number", "\nUNHEX(str)\n", "\n          For a string argument str,\n          UNHEX(str)\n          interprets each pair of characters in the argument as a\n          hexadecimal number and converts it to the byte represented by\n          the number. The return value is a binary string.\n        ", "Press CTRL+C to copy mysql> SELECT UNHEX('4D7953514C');\n        -> 'MySQL'\nmysql> SELECT X'4D7953514C';\n        -> 'MySQL'\nmysql> SELECT UNHEX(HEX('string'));\n        -> 'string'\nmysql> SELECT HEX(UNHEX('1267'));\n        -> '1267'", "\n          The characters in the argument string must be legal\n          hexadecimal digits: '0' ..\n          '9', 'A' ..\n          'F', 'a' ..\n          'f'. If the argument contains any\n          nonhexadecimal digits, or is itself NULL,\n          the result is NULL:\n        ", "Press CTRL+C to copy mysql> SELECT UNHEX('GG');\n+-------------+\n| UNHEX('GG') |\n+-------------+\n| NULL        |\n+-------------+\n\nmysql> SELECT UNHEX(NULL);\n+-------------+\n| UNHEX(NULL) |\n+-------------+\n| NULL        |\n+-------------+", "\n          A NULL result can also occur if the\n          argument to UNHEX() is a\n          BINARY column, because values\n          are padded with 0x00 bytes when stored but\n          those bytes are not stripped on retrieval. For example,\n          '41' is stored into a\n          CHAR(3) column as\n          '41\u00a0' and retrieved as\n          '41' (with the trailing pad space\n          stripped), so UNHEX() for the\n          column value returns X'41'. By contrast,\n          '41' is stored into a\n          BINARY(3) column as\n          '41\\0' and retrieved as\n          '41\\0' (with the trailing pad\n          0x00 byte not stripped).\n          '\\0' is not a legal hexadecimal digit, so\n          UNHEX() for the column value\n          returns NULL.\n        ", "\n          For a numeric argument N, the\n          inverse of\n          HEX(N)\n          is not performed by UNHEX().\n          Use\n          CONV(HEX(N),16,10)\n          instead. See the description of\n          HEX().\n        ", "\n          If UNHEX() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT UNHEX('4D7953514C');\n        -> 'MySQL'\nmysql> SELECT X'4D7953514C';\n        -> 'MySQL'\nmysql> SELECT UNHEX(HEX('string'));\n        -> 'string'\nmysql> SELECT HEX(UNHEX('1267'));\n        -> '1267'", "mysql> SELECT UNHEX('GG');\n+-------------+\n| UNHEX('GG') |\n+-------------+\n| NULL        |\n+-------------+\n\nmysql> SELECT UNHEX(NULL);\n+-------------+\n| UNHEX(NULL) |\n+-------------+\n| NULL        |\n+-------------+"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_unhex"], "Feature Type": ["Function"], "index": 336, "vector_txt": "336:Feature: UNHEX(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["UNIX_TIMESTAMP([date])"], "Description": ["Return a Unix timestamp", "\nUNIX_TIMESTAMP([date])\n", "\n          If UNIX_TIMESTAMP() is called\n          with no date argument, it returns a\n          Unix timestamp representing seconds since '1970-01-01\n          00:00:00' UTC.\n        ", "\n          If UNIX_TIMESTAMP() is called\n          with a date argument, it returns\n          the value of the argument as seconds since\n          '1970-01-01 00:00:00' UTC. The server\n          interprets date as a value in the\n          session time zone and converts it to an internal Unix\n          timestamp value in UTC. (Clients can set the session time zone\n          as described in Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.) The\n          date argument may be a\n          DATE,\n          DATETIME, or\n          TIMESTAMP string, or a number\n          in YYMMDD,\n          YYMMDDhhmmss,\n          YYYYMMDD, or\n          YYYYMMDDhhmmss format. If the\n          argument includes a time part, it may optionally include a\n          fractional seconds part.\n        ", "\n          The return value is an integer if no argument is given or the\n          argument does not include a fractional seconds part, or\n          DECIMAL if an argument is given\n          that includes a fractional seconds part.\n        ", "\n          When the date argument is a\n          TIMESTAMP column,\n          UNIX_TIMESTAMP() returns the\n          internal timestamp value directly, with no implicit\n          \u201cstring-to-Unix-timestamp\u201d conversion.\n        ", "\n          The valid range of argument values is the same as for the\n          TIMESTAMP data type:\n          '1970-01-01 00:00:01.000000' UTC to\n          '2038-01-19 03:14:07.999999' UTC for 32-bit\n          platforms; for MySQL running on 64-bit platforms, the valid\n          range of argument values for\n          UNIX_TIMESTAMP() is '1970-01-01\n          00:00:01.000000' UTC to '3001-01-19\n          03:14:07.999999' UTC (corresponding to\n          32536771199.999999 seconds).\n        ", "\n          Regardless of MySQL version or platform architecture, if you\n          pass an out-of-range date to\n          UNIX_TIMESTAMP(), it returns\n          0. If date is\n          NULL, it returns NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNIX_TIMESTAMP();\n        -> 1447431666\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');\n        -> 1447431619\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');\n        -> 1447431619.012", "\n          If you use UNIX_TIMESTAMP() and\n          FROM_UNIXTIME() to convert\n          between values in a non-UTC time zone and Unix timestamp\n          values, the conversion is lossy because the mapping is not\n          one-to-one in both directions. For example, due to conventions\n          for local time zone changes such as Daylight Saving Time\n          (DST), it is possible for\n          UNIX_TIMESTAMP() to map two\n          values that are distinct in a non-UTC time zone to the same\n          Unix timestamp value.\n          FROM_UNIXTIME() maps that value\n          back to only one of the original values. Here is an example,\n          using values that are distinct in the MET\n          time zone:\n        ", "Press CTRL+C to copy mysql> SET time_zone = 'MET';\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 03:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 03:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 02:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 02:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT FROM_UNIXTIME(1111885200);\n+---------------------------+\n| FROM_UNIXTIME(1111885200) |\n+---------------------------+\n| 2005-03-27 03:00:00       |\n+---------------------------+", "\n\nNote\n\n\n            To use named time zones such as 'MET' or\n            'Europe/Amsterdam', the time zone tables\n            must be properly set up. For instructions, see\n            Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.\n\n", "\n          If you want to subtract\n          UNIX_TIMESTAMP() columns, you\n          might want to cast them to signed integers. See\n          Section\u00a014.10, \u201cCast Functions and Operators\u201d.\n        "], "Examples": ["mysql> SELECT UNIX_TIMESTAMP();\n        -> 1447431666\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');\n        -> 1447431619\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');\n        -> 1447431619.012", "mysql> SET time_zone = 'MET';\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 03:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 03:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 02:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 02:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT FROM_UNIXTIME(1111885200);\n+---------------------------+\n| FROM_UNIXTIME(1111885200) |\n+---------------------------+\n| 2005-03-27 03:00:00       |\n+---------------------------+"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_unix-timestamp"], "Feature Type": ["Function"], "index": 337, "vector_txt": "337:Feature: UNIX_TIMESTAMP([date])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.11 XML Functions"], "Feature": ["UpdateXML(xml_target,\n          xpath_expr,\n          new_xml)"], "Description": ["Return replaced XML fragment", "\nUpdateXML(xml_target,\n          xpath_expr,\n          new_xml)\n", "\n          This function replaces a single portion of a given fragment of\n          XML markup xml_target with a new\n          XML fragment new_xml, and then\n          returns the changed XML. The portion of\n          xml_target that is replaced matches\n          an XPath expression xpath_expr\n          supplied by the user.\n        ", "\n          If no expression matching\n          xpath_expr is found, or if multiple\n          matches are found, the function returns the original\n          xml_target XML fragment. All three\n          arguments should be strings. If any of the arguments to\n          UpdateXML() are NULL,\n          the function returns NULL.\n        ", "Press CTRL+C to copy mysql> SELECT\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '/a', '<e>fff</e>') AS val1,\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '/b', '<e>fff</e>') AS val2,\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '//b', '<e>fff</e>') AS val3,\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val4,\n    ->   UpdateXML('<a><d></d><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val5\n    -> \\G\n\n*************************** 1. row ***************************\nval1: <e>fff</e>\nval2: <a><b>ccc</b><d></d></a>\nval3: <a><e>fff</e><d></d></a>\nval4: <a><b>ccc</b><e>fff</e></a>\nval5: <a><d></d><b>ccc</b><d></d></a>"], "Examples": [], "Category": ["Built-In Functions", "XML Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html#function_updatexml"], "Feature Type": ["Function"], "index": 338, "vector_txt": "338:Feature: UpdateXML(xml_target,\n          xpath_expr,\n          new_xml)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["UPPER(str)"], "Description": ["Convert to uppercase", "\nUPPER(str)\n", "\n          Returns the string str with all\n          characters changed to uppercase according to the current\n          character set mapping, or NULL if\n          str is NULL. The\n          default character set is utf8mb4.\n        ", "Press CTRL+C to copy mysql> SELECT UPPER('Hej');\n        -> 'HEJ'", "\n          See the description of LOWER()\n          for information that also applies to\n          UPPER(). This included\n          information about how to perform lettercase conversion of\n          binary strings (BINARY,\n          VARBINARY,\n          BLOB) for which these functions\n          are ineffective, and information about case folding for\n          Unicode character sets.\n        ", "\n          This function is multibyte safe.\n        ", "\nUCASE() used within views is rewritten as\n          UPPER().\n        "], "Examples": ["mysql> SELECT UPPER('Hej');\n        -> 'HEJ'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_upper"], "Feature Type": ["Function"], "index": 339, "vector_txt": "339:Feature: UPPER(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["USER()"], "Description": ["The user name and host name provided by the client", "\nUSER()\n", "\n          Returns the current MySQL user name and host name as a string\n          in the utf8mb3 character set.\n        ", "Press CTRL+C to copy mysql> SELECT USER();\n        -> 'davida@localhost'", "\n          The value indicates the user name you specified when\n          connecting to the server, and the client host from which you\n          connected. The value can be different from that of\n          CURRENT_USER().\n        ", "\n          This function can be used for the default value of a\n          VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (USER()));"], "Examples": ["mysql> SELECT USER();\n        -> 'davida@localhost'", "CREATE TABLE t (c VARCHAR(288) DEFAULT (USER()));"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_user"], "Feature Type": ["Function"], "index": 340, "vector_txt": "340:Feature: USER()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["UTC_DATE"], "Description": ["Return the current UTC date", "\nUTC_DATE,\n          UTC_DATE()\n", "\n          Returns the current UTC date as a value in\n          'YYYY-MM-DD' or\n          YYYYMMDD format, depending on\n          whether the function is used in string or numeric context.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n        -> '2003-08-14', 20030814"], "Examples": ["mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n        -> '2003-08-14', 20030814"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-date"], "Feature Type": ["Function"], "index": 341, "vector_txt": "341:Feature: UTC_DATE\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["UTC_TIME"], "Description": ["Return the current UTC time", "\nUTC_TIME,\n          UTC_TIME([fsp])\n", "\n          Returns the current UTC time as a value in\n          'hh:mm:ss' or\n          hhmmss format, depending on whether\n          the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n        -> '18:07:53', 180753.000000"], "Examples": ["mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n        -> '18:07:53', 180753.000000"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-time"], "Feature Type": ["Function"], "index": 342, "vector_txt": "342:Feature: UTC_TIME\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["UTC_TIMESTAMP"], "Description": ["Return the current UTC date and time", "\nUTC_TIMESTAMP,\n          UTC_TIMESTAMP([fsp])\n", "\n          Returns the current UTC date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n        -> '2003-08-14 18:08:04', 20030814180804.000000"], "Examples": ["mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n        -> '2003-08-14 18:08:04', 20030814180804.000000"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-timestamp"], "Feature Type": ["Function"], "index": 343, "vector_txt": "343:Feature: UTC_TIMESTAMP\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["BIT_AND(expr)\n            [over_clause]"], "Description": ["Return bitwise AND", "\nBIT_AND(expr)\n            [over_clause]\n", "\n            Returns the bitwise AND of all bits in\n            expr.\n          ", "\n            The result type depends on whether the function argument\n            values are evaluated as binary strings or numbers:\n", "\n\n                Binary-string evaluation occurs when the argument values\n                have a binary string type, and the argument is not a\n                hexadecimal literal, bit literal, or\n                NULL literal. Numeric evaluation\n                occurs otherwise, with argument value conversion to\n                unsigned 64-bit integers as necessary.\n              \n                Binary-string evaluation produces a binary string of the\n                same length as the argument values. If argument values\n                have unequal lengths, an\n                ER_INVALID_BITWISE_OPERANDS_SIZE\n                error occurs. If the argument size exceeds 511 bytes, an\n                ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE\n                error occurs. Numeric evaluation produces an unsigned\n                64-bit integer.\n\n", "\n            If there are no matching rows,\n            BIT_AND() returns a neutral\n            value (all bits set to 1) having the same length as the\n            argument values.\n          ", "\nNULL values do not affect the result\n            unless all values are NULL. In that case,\n            the result is a neutral value having the same length as the\n            argument values.\n          ", "\n            For more information discussion about argument evaluation\n            and result types, see the introductory discussion in\n            Section\u00a014.12, \u201cBit Functions and Operators\u201d.\n          ", "\n            If BIT_AND() is invoked from\n            within the mysql client, binary string\n            results display using hexadecimal notation, depending on the\n            value of the --binary-as-hex.\n            For more information about that option, see\n            Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_bit-and"], "Feature Type": ["Function"], "index": 344, "vector_txt": "344:Feature: BIT_AND(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["UUID()"], "Description": ["Return a Universal Unique Identifier (UUID)", "\nUUID()\n", "\n          Returns a Universal Unique Identifier (UUID) generated\n          according to RFC 4122, \u201cA Universally Unique IDentifier\n          (UUID) URN Namespace\u201d\n          (http://www.ietf.org/rfc/rfc4122.txt).\n        ", "\n          A UUID is designed as a number that is globally unique in\n          space and time. Two calls to\n          UUID() are expected to generate\n          two different values, even if these calls are performed on two\n          separate devices not connected to each other.\n", "\n\nWarning\n\n\n            Although UUID() values are\n            intended to be unique, they are not necessarily unguessable\n            or unpredictable. If unpredictability is required, UUID\n            values should be generated some other way.\n\n", "\nUUID() returns a value that\n          conforms to UUID version 1 as described in RFC 4122. The value\n          is a 128-bit number represented as a\n          utf8mb3 string of five hexadecimal numbers\n          in aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\n          format:\n", "\n\n              The first three numbers are generated from the low,\n              middle, and high parts of a timestamp. The high part also\n              includes the UUID version number.\n            \n              The fourth number preserves temporal uniqueness in case\n              the timestamp value loses monotonicity (for example, due\n              to daylight saving time).\n            \n              The fifth number is an IEEE 802 node number that provides\n              spatial uniqueness. A random number is substituted if the\n              latter is not available (for example, because the host\n              device has no Ethernet card, or it is unknown how to find\n              the hardware address of an interface on the host operating\n              system). In this case, spatial uniqueness cannot be\n              guaranteed. Nevertheless, a collision should have\n              very low probability.\n            \n              The MAC address of an interface is taken into account only\n              on FreeBSD, Linux, and Windows. On other operating\n              systems, MySQL uses a randomly generated 48-bit number.\n\n", "Press CTRL+C to copy mysql> SELECT UUID();\n        -> '6ccd780c-baba-1026-9564-5b8c656024db'", "\n          To convert between string and binary UUID values, use the\n          UUID_TO_BIN() and\n          BIN_TO_UUID() functions. To\n          check whether a string is a valid UUID value, use the\n          IS_UUID() function.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": ["mysql> SELECT UUID();\n        -> '6ccd780c-baba-1026-9564-5b8c656024db'"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_uuid"], "Feature Type": ["Function"], "index": 345, "vector_txt": "345:Feature: UUID()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["UUID_SHORT()"], "Description": ["Return an integer-valued universal identifier", "\nUUID_SHORT()\n", "\n          Returns a \u201cshort\u201d universal identifier as a\n          64-bit unsigned integer. Values returned by\n          UUID_SHORT() differ from the\n          string-format 128-bit identifiers returned by the\n          UUID() function and have\n          different uniqueness properties. The value of\n          UUID_SHORT() is guaranteed to\n          be unique if the following conditions hold:\n", "\n\n              The server_id value of\n              the current server is between 0 and 255 and is unique\n              among your set of source and replica servers\n            \n              You do not set back the system time for your server host\n              between mysqld restarts\n            \n              You invoke UUID_SHORT() on\n              average fewer than 16 million times per second between\n              mysqld restarts\n\n", "\n          The UUID_SHORT() return value\n          is constructed this way:\n        ", "Press CTRL+C to copy   (server_id & 255) << 56\n+ (server_startup_time_in_seconds << 24)\n+ incremented_variable++;", "Press CTRL+C to copy mysql> SELECT UUID_SHORT();\n        -> 92395783831158784", "\n\nNote\n\n\nUUID_SHORT() does not work\n            with statement-based replication.\n\n"], "Examples": ["mysql> SELECT UUID_SHORT();\n        -> 92395783831158784"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_uuid-short"], "Feature Type": ["Function"], "index": 346, "vector_txt": "346:Feature: UUID_SHORT()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["UUID_TO_BIN(string_uuid)"], "Description": ["Convert string UUID to binary", "\nUUID_TO_BIN(string_uuid),\n          UUID_TO_BIN(string_uuid,\n          swap_flag)\n", "\n          Converts a string UUID to a binary UUID and returns the\n          result. (The IS_UUID() function\n          description lists the permitted string UUID formats.) The\n          return binary UUID is a\n          VARBINARY(16) value. If the\n          UUID argument is NULL, the return value is\n          NULL. If any argument is invalid, an error\n          occurs.\n        ", "\nUUID_TO_BIN() takes one or two\n          arguments:\n", "\n\n              The one-argument form takes a string UUID value. The\n              binary result is in the same order as the string argument.\n            \n              The two-argument form takes a string UUID value and a flag\n              value:\n\n\n\n                  If swap_flag is 0, the\n                  two-argument form is equivalent to the one-argument\n                  form. The binary result is in the same order as the\n                  string argument.\n                \n                  If swap_flag is 1, the\n                  format of the return value differs: The time-low and\n                  time-high parts (the first and third groups of\n                  hexadecimal digits, respectively) are swapped. This\n                  moves the more rapidly varying part to the right and\n                  can improve indexing efficiency if the result is\n                  stored in an indexed column.\n\n\n\n", "\n          Time-part swapping assumes the use of UUID version 1 values,\n          such as are generated by the\n          UUID() function. For UUID\n          values produced by other means that do not follow version 1\n          format, time-part swapping provides no benefit. For details\n          about version 1 format, see the\n          UUID() function description.\n        ", "\n          Suppose that you have the following string UUID value:\n        ", "Press CTRL+C to copy mysql> SET @uuid = '6ccd780c-baba-1026-9564-5b8c656024db';", "\n          To convert the string UUID to binary with or without time-part\n          swapping, use UUID_TO_BIN():\n        ", "Press CTRL+C to copy mysql> SELECT HEX(UUID_TO_BIN(@uuid));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid))          |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 0));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 0))       |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 1));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 1))       |\n+----------------------------------+\n| 1026BABA6CCD780C95645B8C656024DB |\n+----------------------------------+", "\n          To convert a binary UUID returned by\n          UUID_TO_BIN() to a string UUID,\n          use BIN_TO_UUID(). If you\n          produce a binary UUID by calling\n          UUID_TO_BIN() with a second\n          argument of 1 to swap time parts, you should also pass a\n          second argument of 1 to\n          BIN_TO_UUID() to unswap the\n          time parts when converting the binary UUID back to a string\n          UUID:\n        ", "Press CTRL+C to copy mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid))      |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+", "\n          If the use of time-part swapping is not the same for the\n          conversion in both directions, the original UUID is not\n          recovered properly:\n        ", "Press CTRL+C to copy mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1)  |\n+--------------------------------------+\n| baba1026-780c-6ccd-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0)  |\n+--------------------------------------+\n| 1026baba-6ccd-780c-9564-5b8c656024db |\n+--------------------------------------+", "\n          If UUID_TO_BIN() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SET @uuid = '6ccd780c-baba-1026-9564-5b8c656024db';", "mysql> SELECT HEX(UUID_TO_BIN(@uuid));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid))          |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 0));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 0))       |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 1));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 1))       |\n+----------------------------------+\n| 1026BABA6CCD780C95645B8C656024DB |\n+----------------------------------+", "mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid))      |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+", "mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1)  |\n+--------------------------------------+\n| baba1026-780c-6ccd-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0)  |\n+--------------------------------------+\n| 1026baba-6ccd-780c-9564-5b8c656024db |\n+--------------------------------------+"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_uuid-to-bin"], "Feature Type": ["Function"], "index": 347, "vector_txt": "347:Feature: UUID_TO_BIN(string_uuid)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["VALIDATE_PASSWORD_STRENGTH(str)"], "Description": ["Determine strength of password", "\nVALIDATE_PASSWORD_STRENGTH(str)\n", "\n          Given an argument representing a plaintext password, this\n          function returns an integer to indicate how strong the\n          password is, or NULL if the argument is\n          NULL. The return value ranges from 0 (weak)\n          to 100 (strong).\n        ", "\n          Password assessment by\n          VALIDATE_PASSWORD_STRENGTH() is\n          done by the validate_password component. If\n          that component is not installed, the function always returns\n          0. For information about installing\n          validate_password, see\n          Section\u00a08.4.3, \u201cThe Password Validation Component\u201d. To examine or configure\n          the parameters that affect password testing, check or set the\n          system variables implemented by\n          validate_password. See\n          Section\u00a08.4.3.2, \u201cPassword Validation Options and Variables\u201d.\n        ", "\n          The password is subjected to increasingly strict tests and the\n          return value reflects which tests were satisfied, as shown in\n          the following table. In addition, if the\n          validate_password.check_user_name\n          system variable is enabled and the password matches the user\n          name,\n          VALIDATE_PASSWORD_STRENGTH()\n          returns 0 regardless of how other\n          validate_password system variables are set.\n", "\n\nPassword Test\nReturn Value\n\nLength < 4\n0\n\nLength \u2265 4 and <\n                validate_password.length\n25\n\nSatisfies policy 1 (LOW)\n50\n\nSatisfies policy 2 (MEDIUM)\n75\n\nSatisfies policy 3 (STRONG)\n100\n\n"], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_validate-password-strength"], "Feature Type": ["Function"], "index": 348, "vector_txt": "348:Feature: VALIDATE_PASSWORD_STRENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["VALUES(col_name)"], "Description": ["Define the values to be used during an INSERT", "\nVALUES(col_name)\n", "\n          In an\n          INSERT\n          ... ON DUPLICATE KEY UPDATE statement, you can use\n          the\n          VALUES(col_name)\n          function in the UPDATE clause\n          to refer to column values from the\n          INSERT portion of the\n          statement. In other words,\n          VALUES(col_name)\n          in the UPDATE clause refers to\n          the value of col_name that would be\n          inserted, had no duplicate-key conflict occurred. This\n          function is especially useful in multiple-row inserts. The\n          VALUES() function is meaningful\n          only in the ON DUPLICATE KEY UPDATE clause\n          of INSERT statements and\n          returns NULL otherwise. See\n          Section\u00a015.2.7.2, \u201cINSERT ... ON DUPLICATE KEY UPDATE Statement\u201d.\n        ", "Press CTRL+C to copy mysql> INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\n    -> ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);", "\n\nImportant\n\n\n            This usage is deprecated, and subject to removal in a future\n            release of MySQL. Use a row alias, or row and column\n            aliases, instead. For more information and examples, see\n            Section\u00a015.2.7.2, \u201cINSERT ... ON DUPLICATE KEY UPDATE Statement\u201d.\n\n"], "Examples": ["mysql> INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\n    -> ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_values"], "Feature Type": ["Function"], "index": 349, "vector_txt": "349:Feature: VALUES(col_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["VAR_POP(expr)\n            [over_clause]"], "Description": ["Return the population standard variance", "\nVAR_POP(expr)\n            [over_clause]\n", "\n            Returns the population standard variance of\n            expr. It considers rows as the\n            whole population, not as a sample, so it has the number of\n            rows as the denominator. You can also use\n            VARIANCE(), which is\n            equivalent but is not standard SQL.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            VAR_POP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_var-pop"], "Feature Type": ["Function"], "index": 350, "vector_txt": "350:Feature: VAR_POP(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["VAR_SAMP(expr)\n            [over_clause]"], "Description": ["Return the sample variance", "\nVAR_SAMP(expr)\n            [over_clause]\n", "\n            Returns the sample variance of\n            expr. That is, the denominator is\n            the number of rows minus one.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            VAR_SAMP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_var-samp"], "Feature Type": ["Function"], "index": 351, "vector_txt": "351:Feature: VAR_SAMP(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["VARIANCE(expr)\n            [over_clause]"], "Description": ["Return the population standard variance", "\nVARIANCE(expr)\n            [over_clause]\n", "\n            Returns the population standard variance of\n            expr.\n            VARIANCE() is a synonym for\n            the standard SQL function\n            VAR_POP(), provided as a\n            MySQL extension.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            VARIANCE() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n"], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_variance"], "Feature Type": ["Function"], "index": 352, "vector_txt": "352:Feature: VARIANCE(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["VERSION()"], "Description": ["Return a string that indicates the MySQL server version", "\nVERSION()\n", "\n          Returns a string that indicates the MySQL server version. The\n          string uses the utf8mb3 character set. The\n          value might have a suffix in addition to the version number.\n          See the description of the\n          version system variable in\n          Section\u00a07.1.8, \u201cServer System Variables\u201d.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        ", "Press CTRL+C to copy mysql> SELECT VERSION();\n        -> '8.4.0-standard'"], "Examples": ["mysql> SELECT VERSION();\n        -> '8.4.0-standard'"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_version"], "Feature Type": ["Function"], "index": 353, "vector_txt": "353:Feature: VERSION()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/gtid-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.2 Functions Used with Global Transaction Identifiers (GTIDs)"], "Feature": ["WAIT_FOR_EXECUTED_GTID_SET(gtid_set[,\n            timeout])"], "Description": ["Wait until the given GTIDs have executed on the replica.", "\nWAIT_FOR_EXECUTED_GTID_SET(gtid_set[,\n            timeout])\n", "\n            Wait until the server has applied all of the transactions\n            whose global transaction identifiers are contained in\n            gtid_set; that is, until the\n            condition\n            GTID_SUBSET(gtid_subset,\n            @@GLOBAL.gtid_executed) holds. See\n            Section\u00a019.1.3.1, \u201cGTID Format and Storage\u201d for a\n            definition of GTID sets.\n          ", "\n            If a timeout is specified, and\n            timeout seconds elapse before all\n            of the transactions in the GTID set have been applied, the\n            function stops waiting. timeout\n            is optional, and the default timeout is 0 seconds, in which\n            case the function always waits until all of the transactions\n            in the GTID set have been applied.\n            timeout must be greater than or\n            equal to 0; when running in strict SQL mode, a negative\n            timeout value is immediately\n            rejected with an error\n            (ER_WRONG_ARGUMENTS);\n            otherwise the function returns NULL, and\n            raises a warning.\n          ", "\nWAIT_FOR_EXECUTED_GTID_SET() monitors all\n            the GTIDs that are applied on the server, including\n            transactions that arrive from all replication channels and\n            user clients. It does not take into account whether\n            replication channels have been started or stopped.\n          ", "\n            For more information, see\n            Section\u00a019.1.3, \u201cReplication with Global Transaction Identifiers\u201d.\n          ", "\n            GTID sets used with this function are represented as strings\n            and so must be quoted as shown in the following example:\n          ", "Press CTRL+C to copy mysql> SELECT WAIT_FOR_EXECUTED_GTID_SET('3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5');\n        -> 0", "\n            For a syntax description for GTID sets, see\n            Section\u00a019.1.3.1, \u201cGTID Format and Storage\u201d.\n          ", "\n            For WAIT_FOR_EXECUTED_GTID_SET(), the\n            return value is the state of the query, where 0 represents\n            success, and 1 represents timeout. Any other failures\n            generate an error.\n          ", "\ngtid_mode cannot be changed\n            to OFF while any client is using this function to wait for\n            GTIDs to be applied.\n"], "Examples": ["mysql> SELECT WAIT_FOR_EXECUTED_GTID_SET('3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5');\n        -> 0"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gtid-functions.html#function_wait-for-executed-gtid-set"], "Feature Type": ["Function"], "index": 354, "vector_txt": "354:Feature: WAIT_FOR_EXECUTED_GTID_SET(gtid_set[,\n            timeout])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.12 Bit Functions and Operators"], "Feature": ["BIT_COUNT(N)"], "Description": ["Return the number of bits that are set", "\nBIT_COUNT(N)\n", "\n          Returns the number of bits that are set in the argument\n          N as an unsigned 64-bit integer, or\n          NULL if the argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT BIT_COUNT(64), BIT_COUNT(BINARY 64);\n        -> 1, 7\nmysql> SELECT BIT_COUNT('64'), BIT_COUNT(_binary '64');\n        -> 1, 7\nmysql> SELECT BIT_COUNT(X'40'), BIT_COUNT(_binary X'40');\n        -> 1, 1"], "Examples": ["mysql> SELECT BIT_COUNT(64), BIT_COUNT(BINARY 64);\n        -> 1, 7\nmysql> SELECT BIT_COUNT('64'), BIT_COUNT(_binary '64');\n        -> 1, 7\nmysql> SELECT BIT_COUNT(X'40'), BIT_COUNT(_binary X'40');\n        -> 1, 1"], "Category": ["Built-In Functions", "Bit Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html#function_bit-count"], "Feature Type": ["Function"], "index": 355, "vector_txt": "355:Feature: BIT_COUNT(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["WEEK(date[,mode])"], "Description": ["Return the week number", "\nWEEK(date[,mode])\n", "\n          This function returns the week number for\n          date. The two-argument form of\n          WEEK() enables you to specify\n          whether the week starts on Sunday or Monday and whether the\n          return value should be in the range from 0\n          to 53 or from 1 to\n          53. If the mode\n          argument is omitted, the value of the\n          default_week_format system\n          variable is used. See\n          Section\u00a07.1.8, \u201cServer System Variables\u201d. For a\n          NULL date value, the function returns\n          NULL.\n        ", "\n          The following table describes how the\n          mode argument works.\n", "\n\nMode\nFirst day of week\nRange\nWeek 1 is the first week \u2026\n\n0\nSunday\n0-53\nwith a Sunday in this year\n\n1\nMonday\n0-53\nwith 4 or more days this year\n\n2\nSunday\n1-53\nwith a Sunday in this year\n\n3\nMonday\n1-53\nwith 4 or more days this year\n\n4\nSunday\n0-53\nwith 4 or more days this year\n\n5\nMonday\n0-53\nwith a Monday in this year\n\n6\nSunday\n1-53\nwith 4 or more days this year\n\n7\nMonday\n1-53\nwith a Monday in this year\n\n", "\n          For mode values with a meaning of\n          \u201cwith 4 or more days this year,\u201d weeks are\n          numbered according to ISO 8601:1988:\n", "\n\n              If the week containing January 1 has 4 or more days in the\n              new year, it is week 1.\n            \n              Otherwise, it is the last week of the previous year, and\n              the next week is week 1.\n\n", "Press CTRL+C to copy mysql> SELECT WEEK('2008-02-20');\n        -> 7\nmysql> SELECT WEEK('2008-02-20',0);\n        -> 7\nmysql> SELECT WEEK('2008-02-20',1);\n        -> 8\nmysql> SELECT WEEK('2008-12-31',1);\n        -> 53", "\n          If a date falls in the last week of the previous year, MySQL\n          returns 0 if you do not use\n          2, 3,\n          6, or 7 as the optional\n          mode argument:\n        ", "Press CTRL+C to copy mysql> SELECT YEAR('2000-01-01'), WEEK('2000-01-01',0);\n        -> 2000, 0", "\n          One might argue that WEEK()\n          should return 52 because the given date\n          actually occurs in the 52nd week of 1999.\n          WEEK() returns\n          0 instead so that the return value is\n          \u201cthe week number in the given year.\u201d This makes\n          use of the WEEK() function\n          reliable when combined with other functions that extract a\n          date part from a date.\n        ", "\n          If you prefer a result evaluated with respect to the year that\n          contains the first day of the week for the given date, use\n          0, 2,\n          5, or 7 as the optional\n          mode argument.\n        ", "Press CTRL+C to copy mysql> SELECT WEEK('2000-01-01',2);\n        -> 52", "\n          Alternatively, use the\n          YEARWEEK() function:\n        ", "Press CTRL+C to copy mysql> SELECT YEARWEEK('2000-01-01');\n        -> 199952\nmysql> SELECT MID(YEARWEEK('2000-01-01'),5,2);\n        -> '52'"], "Examples": ["mysql> SELECT WEEK('2008-02-20');\n        -> 7\nmysql> SELECT WEEK('2008-02-20',0);\n        -> 7\nmysql> SELECT WEEK('2008-02-20',1);\n        -> 8\nmysql> SELECT WEEK('2008-12-31',1);\n        -> 53", "mysql> SELECT YEAR('2000-01-01'), WEEK('2000-01-01',0);\n        -> 2000, 0", "mysql> SELECT WEEK('2000-01-01',2);\n        -> 52", "mysql> SELECT YEARWEEK('2000-01-01');\n        -> 199952\nmysql> SELECT MID(YEARWEEK('2000-01-01'),5,2);\n        -> '52'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_week"], "Feature Type": ["Function"], "index": 356, "vector_txt": "356:Feature: WEEK(date[,mode])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["WEEKDAY(date)"], "Description": ["Return the weekday index", "\nWEEKDAY(date)\n", "\n          Returns the weekday index for date\n          (0 = Monday, 1 =\n          Tuesday, \u2026 6 = Sunday). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT WEEKDAY('2008-02-03 22:23:00');\n        -> 6\nmysql> SELECT WEEKDAY('2007-11-06');\n        -> 1"], "Examples": ["mysql> SELECT WEEKDAY('2008-02-03 22:23:00');\n        -> 6\nmysql> SELECT WEEKDAY('2007-11-06');\n        -> 1"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_weekday"], "Feature Type": ["Function"], "index": 357, "vector_txt": "357:Feature: WEEKDAY(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["WEEKOFYEAR(date)"], "Description": ["Return the calendar week of the date (1-53)", "\nWEEKOFYEAR(date)\n", "\n          Returns the calendar week of the date as a number in the range\n          from 1 to 53. Returns\n          NULL if date is\n          NULL.\n        ", "\nWEEKOFYEAR() is a compatibility\n          function that is equivalent to\n          WEEK(date,3).\n        ", "Press CTRL+C to copy mysql> SELECT WEEKOFYEAR('2008-02-20');\n        -> 8"], "Examples": ["mysql> SELECT WEEKOFYEAR('2008-02-20');\n        -> 8"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_weekofyear"], "Feature Type": ["Function"], "index": 358, "vector_txt": "358:Feature: WEEKOFYEAR(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["WEIGHT_STRING(str\n          [AS {CHAR|BINARY}(N)]\n          [flags])"], "Description": ["Return the weight string for a string", "\nWEIGHT_STRING(str\n          [AS {CHAR|BINARY}(N)]\n          [flags])\n", "\n          This function returns the weight string for the input string.\n          The return value is a binary string that represents the\n          comparison and sorting value of the string, or\n          NULL if the argument is\n          NULL. It has these properties:\n", "\n\n              If\n              WEIGHT_STRING(str1)\n              =\n              WEIGHT_STRING(str2),\n              then str1 =\n              str2\n              (str1 and\n              str2 are considered equal)\n            \n              If\n              WEIGHT_STRING(str1)\n              <\n              WEIGHT_STRING(str2),\n              then str1 <\n              str2\n              (str1 sorts before\n              str2)\n\n", "\nWEIGHT_STRING() is a debugging\n          function intended for internal use. Its behavior can change\n          without notice between MySQL versions. It can be used for\n          testing and debugging of collations, especially if you are\n          adding a new collation. See\n          Section\u00a012.14, \u201cAdding a Collation to a Character Set\u201d.\n        ", "\n          This list briefly summarizes the arguments. More details are\n          given in the discussion following the list.\n", "\n\nstr: The input string\n              expression.\n            \nAS clause: Optional; cast the input\n              string to a given type and length.\n            \nflags: Optional; unused.\n\n", "\n          The input string, str, is a string\n          expression. If the input is a nonbinary (character) string\n          such as a CHAR,\n          VARCHAR, or\n          TEXT value, the return value\n          contains the collation weights for the string. If the input is\n          a binary (byte) string such as a\n          BINARY,\n          VARBINARY, or\n          BLOB value, the return value is\n          the same as the input (the weight for each byte in a binary\n          string is the byte value). If the input is\n          NULL,\n          WEIGHT_STRING() returns\n          NULL.\n        ", "\n          Examples:\n        ", "Press CTRL+C to copy mysql> SET @s = _utf8mb4 'AB' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 1C471C60               |\n+------+---------+------------------------+", "Press CTRL+C to copy mysql> SET @s = _utf8mb4 'ab' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 1C471C60               |\n+------+---------+------------------------+", "Press CTRL+C to copy mysql> SET @s = CAST('AB' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+", "Press CTRL+C to copy mysql> SET @s = CAST('ab' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 6162                   |\n+------+---------+------------------------+", "\n          The preceding examples use\n          HEX() to display the\n          WEIGHT_STRING() result. Because\n          the result is a binary value,\n          HEX() can be especially useful\n          when the result contains nonprinting values, to display it in\n          printable form:\n        ", "Press CTRL+C to copy mysql> SET @s = CONVERT(X'C39F' USING utf8mb4) COLLATE utf8mb4_czech_ci;\nmysql> SELECT HEX(WEIGHT_STRING(@s));\n+------------------------+\n| HEX(WEIGHT_STRING(@s)) |\n+------------------------+\n| 0FEA0FEA               |\n+------------------------+", "\n          For non-NULL return values, the data type\n          of the value is VARBINARY if\n          its length is within the maximum length for\n          VARBINARY, otherwise the data\n          type is BLOB.\n        ", "\n          The AS clause may be given to cast the\n          input string to a nonbinary or binary string and to force it\n          to a given length:\n", "\n\nAS CHAR(N)\n              casts the string to a nonbinary string and pads it on the\n              right with spaces to a length of\n              N characters.\n              N must be at least 1. If\n              N is less than the length of\n              the input string, the string is truncated to\n              N characters. No warning occurs\n              for truncation.\n            \nAS BINARY(N)\n              is similar but casts the string to a binary string,\n              N is measured in bytes (not\n              characters), and padding uses 0x00\n              bytes (not spaces).\n\n", "Press CTRL+C to copy mysql> SET NAMES 'latin1';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 41422020                            |\n+-------------------------------------+\nmysql> SET NAMES 'utf8mb4';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 1C471C60                            |\n+-------------------------------------+", "Press CTRL+C to copy mysql> SELECT HEX(WEIGHT_STRING('ab' AS BINARY(4)));\n+---------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS BINARY(4))) |\n+---------------------------------------+\n| 61620000                              |\n+---------------------------------------+", "\n          The flags clause currently is\n          unused.\n        ", "\n          If WEIGHT_STRING() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n"], "Examples": ["mysql> SET @s = _utf8mb4 'AB' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 1C471C60               |\n+------+---------+------------------------+", "mysql> SET @s = _utf8mb4 'ab' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 1C471C60               |\n+------+---------+------------------------+", "mysql> SET @s = CAST('AB' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+", "mysql> SET @s = CAST('ab' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 6162                   |\n+------+---------+------------------------+", "mysql> SET @s = CONVERT(X'C39F' USING utf8mb4) COLLATE utf8mb4_czech_ci;\nmysql> SELECT HEX(WEIGHT_STRING(@s));\n+------------------------+\n| HEX(WEIGHT_STRING(@s)) |\n+------------------------+\n| 0FEA0FEA               |\n+------------------------+", "mysql> SET NAMES 'latin1';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 41422020                            |\n+-------------------------------------+\nmysql> SET NAMES 'utf8mb4';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 1C471C60                            |\n+-------------------------------------+", "mysql> SELECT HEX(WEIGHT_STRING('ab' AS BINARY(4)));\n+---------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS BINARY(4))) |\n+---------------------------------------+\n| 61620000                              |\n+---------------------------------------+"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_weight-string"], "Feature Type": ["Function"], "index": 359, "vector_txt": "359:Feature: WEIGHT_STRING(str\n          [AS {CHAR|BINARY}(N)]\n          [flags])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["YEAR(date)"], "Description": ["Return the year", "\nYEAR(date)\n", "\n          Returns the year for date, in the\n          range 1000 to 9999, or\n          0 for the \u201czero\u201d date. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT YEAR('1987-01-01');\n        -> 1987"], "Examples": ["mysql> SELECT YEAR('1987-01-01');\n        -> 1987"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_year"], "Feature Type": ["Function"], "index": 360, "vector_txt": "360:Feature: YEAR(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["YEARWEEK(date)"], "Description": ["Return the year and week", "\nYEARWEEK(date),\n          YEARWEEK(date,mode)\n", "\n          Returns year and week for a date. The year in the result may\n          be different from the year in the date argument for the first\n          and the last week of the year. Returns NULL\n          if date is NULL.\n        ", "\n          The mode argument works exactly\n          like the mode argument to\n          WEEK(). For the single-argument\n          syntax, a mode value of 0 is used.\n          Unlike WEEK(), the value of\n          default_week_format does not\n          influence YEARWEEK().\n        ", "Press CTRL+C to copy mysql> SELECT YEARWEEK('1987-01-01');\n        -> 198652", "\n          The week number is different from what the\n          WEEK() function would return\n          (0) for optional arguments\n          0 or 1, as\n          WEEK() then returns the week in\n          the context of the given year.\n"], "Examples": ["mysql> SELECT YEARWEEK('1987-01-01');\n        -> 198652"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_yearweek"], "Feature Type": ["Function"], "index": 361, "vector_txt": "361:Feature: YEARWEEK(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.10 Cast Functions and Operators"], "Feature": ["CAST(expr AS\n            type [ARRAY])"], "Description": ["Cast a value as a certain type", "\nCAST(expr AS\n            type [ARRAY])\n", "\nCAST(timestamp_value\n            AT TIME ZONE timezone_specifier\n            AS\n            DATETIME[(precision)])\n", "\ntimezone_specifier: [INTERVAL]\n            '+00:00' | 'UTC'\n          ", "\n            With\n            CAST(expr AS\n            type syntax, the\n            CAST() function takes an\n            expression of any type and produces a result value of the\n            specified type. This operation may also be expressed as\n            CONVERT(expr,\n            type), which is\n            equivalent. If expr is\n            NULL, CAST() returns\n            NULL.\n          ", "\n            These type values are permitted:\n", "\n\nBINARY[(N)]\n\n                Produces a string with the\n                VARBINARY data type,\n                except that when the expression\n                expr is empty (zero length),\n                the result type is BINARY(0). If the\n                optional length N is given,\n                BINARY(N)\n                causes the cast to use no more than\n                N bytes of the argument.\n                Values shorter than N bytes\n                are padded with 0x00 bytes to a\n                length of N. If the optional\n                length N is not given, MySQL\n                calculates the maximum length from the expression. If\n                the supplied or calculated length is greater than an\n                internal threshold, the result type is\n                BLOB. If the length is still too\n                long, the result type is LONGBLOB.\n              \n                For a description of how casting to\n                BINARY affects comparisons, see\n                Section\u00a013.3.3, \u201cThe BINARY and VARBINARY Types\u201d.\n              \nCHAR[(N)]\n                [charset_info]\n\n                Produces a string with the\n                VARCHAR data type, unless\n                the expression expr is empty\n                (zero length), in which case the result type is\n                CHAR(0). If the optional length\n                N is given,\n                CHAR(N)\n                causes the cast to use no more than\n                N characters of the argument.\n                No padding occurs for values shorter than\n                N characters. If the optional\n                length N is not given, MySQL\n                calculates the maximum length from the expression. If\n                the supplied or calculated length is greater than an\n                internal threshold, the result type is\n                TEXT. If the length is still too\n                long, the result type is LONGTEXT.\n              \n                With no charset_info clause,\n                CHAR produces a string with the\n                default character set. To specify the character set\n                explicitly, these\n                charset_info values are\n                permitted:\n\n\n\nCHARACTER SET\n                    charset_name:\n                    Produces a string with the given character set.\n                  \nASCII: Shorthand for\n                    CHARACTER SET latin1.\n                  \nUNICODE: Shorthand for\n                    CHARACTER SET ucs2.\n\n\n\n                In all cases, the string has the character set default\n                collation.\n              \nDATE\n\n                Produces a DATE value.\n              \nDATETIME[(M)]\n\n                Produces a DATETIME\n                value. If the optional M\n                value is given, it specifies the fractional seconds\n                precision.\n              \nDECIMAL[(M[,D])]\n\n                Produces a DECIMAL value.\n                If the optional M and\n                D values are given, they\n                specify the maximum number of digits (the precision) and\n                the number of digits following the decimal point (the\n                scale). If D is omitted, 0 is\n                assumed. If M is omitted, 10\n                is assumed.\n              \nDOUBLE\n\n                Produces a DOUBLE result.\n              \nFLOAT[(p)]\n\n                If the precision p is not\n                specified, produces a result of type\n                FLOAT. If\n                p is provided and 0 <=\n                < p <= 24, the result\n                is of type FLOAT. If 25 <=\n                p <= 53, the result is of\n                type DOUBLE. If\n                p < 0 or\n                p > 53, an error is\n                returned.\n              \nJSON\n\n                Produces a JSON value.\n                For details on the rules for conversion of values\n                between JSON and other\n                types, see Comparison and Ordering of JSON Values.\n              \nNCHAR[(N)]\n\n                Like CHAR, but produces a string with\n                the national character set. See\n                Section\u00a012.3.7, \u201cThe National Character Set\u201d.\n              \n                Unlike CHAR, NCHAR\n                does not permit trailing character set information to be\n                specified.\n              \nREAL\n\n                Produces a result of type\n                REAL. This is actually\n                FLOAT if the\n                REAL_AS_FLOAT SQL mode\n                is enabled; otherwise the result is of type\n                DOUBLE.\n              \nSIGNED [INTEGER]\n\n                Produces a signed BIGINT\n                value.\n              \nspatial_type\n\nCAST() and\n                CONVERT() support casting\n                geometry values from one spatial type to another, for\n                certain combinations of spatial types. For details, see\n                Cast Operations on Spatial Types.\n              \nTIME[(M)]\n\n                Produces a TIME value. If\n                the optional M value is\n                given, it specifies the fractional seconds precision.\n              \nUNSIGNED [INTEGER]\n\n                Produces an unsigned\n                BIGINT value.\n              \nYEAR\n\n                Produces a YEAR value.\n                These rules govern conversion to YEAR\n                as follows:\n\n\n\n                    For a four-digit number in the range 1901-2155\n                    inclusive, or for a string which can be interpreted\n                    as a four-digit number in this range, return the\n                    corresponding YEAR value.\n                  \n                    For a number consisting of one or two digits, or for\n                    a string which can be interpreted as such a number,\n                    return a YEAR value as follows:\n\n\n\n                        If the number is in the range 1-69 inclusive,\n                        add 2000 and return the sum.\n                      \n                        If the number is in the range 70-99 inclusive,\n                        add 1900 and return the sum.\n\n\n\n                    For a string which evaluates to 0, return 2000.\n                  \n                    For the number 0, return 0.\n                  \n                    For a DATE,\n                    DATETIME, or\n                    TIMESTAMP value,\n                    return the YEAR portion of the\n                    value. For a TIME\n                    value, return the current year.\n                  \n                    If you do not specify the type of a\n                    TIME argument, you may get a\n                    different result from what you expect, as shown\n                    here:\n                  Press CTRL+C to copy mysql> SELECT CAST(\"11:35:00\" AS YEAR), CAST(TIME \"11:35:00\" AS YEAR);\n+--------------------------+-------------------------------+\n| CAST(\"11:35:00\" AS YEAR) | CAST(TIME \"11:35:00\" AS YEAR) |\n+--------------------------+-------------------------------+\n|                     2011 |                          2021 |\n+--------------------------+-------------------------------+\n                    If the argument is of type\n                    DECIMAL,\n                    DOUBLE,\n                    DECIMAL, or\n                    REAL, round the value\n                    to the nearest integer, then attempt to cast the\n                    value to YEAR using the rules for\n                    integer values, as shown here:\n                  Press CTRL+C to copy mysql> SELECT CAST(1944.35 AS YEAR), CAST(1944.50 AS YEAR);\n+-----------------------+-----------------------+\n| CAST(1944.35 AS YEAR) | CAST(1944.50 AS YEAR) |\n+-----------------------+-----------------------+\n|                  1944 |                  1945 |\n+-----------------------+-----------------------+\n\nmysql> SELECT CAST(66.35 AS YEAR), CAST(66.50 AS YEAR);\n+---------------------+---------------------+\n| CAST(66.35 AS YEAR) | CAST(66.50 AS YEAR) |\n+---------------------+---------------------+\n|                2066 |                2067 |\n+---------------------+---------------------+\n                    An argument of type\n                    GEOMETRY cannot be\n                    converted to YEAR.\n                  \n                    For a value that cannot be successfully converted to\n                    YEAR, return\n                    NULL.\n\n\n\n                A string value containing non-numeric characters which\n                must be truncated prior to conversion raises a warning,\n                as shown here:\n              Press CTRL+C to copy mysql> SELECT CAST(\"1979aaa\" AS YEAR);\n+-------------------------+\n| CAST(\"1979aaa\" AS YEAR) |\n+-------------------------+\n|                    1979 |\n+-------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect YEAR value: '1979aaa' |\n+---------+------+-------------------------------------------+\n", "\nInnoDB allows the use of an\n            additional ARRAY keyword for creating a\n            multi-valued index on a JSON\n            array as part of CREATE\n            INDEX, CREATE\n            TABLE, and ALTER\n            TABLE statements. ARRAY is not\n            supported except when used to create a multi-valued index in\n            one of these statements, in which case it is required. The\n            column being indexed must be a column of type\n            JSON. With ARRAY, the\n            type following the\n            AS keyword may specify any of the types\n            supported by CAST(), with the exceptions\n            of BINARY, JSON, and\n            YEAR. For syntax information and\n            examples, as well as other relevant information, see\n            Multi-Valued Indexes.\n", "\n\nNote\n\n\nCONVERT(), unlike\n              CAST(), does\n              not support multi-valued index\n              creation or the ARRAY keyword.\n\n", "\nCAST() supports retrieval of a\n            TIMESTAMP value as being in\n            UTC, using the AT TIMEZONE operator. The\n            only supported time zone is UTC; this can be specified as\n            either of '+00:00' or\n            'UTC'. The only return type supported by\n            this syntax is DATETIME, with an optional\n            precision specifier in the range of 0 to 6, inclusive.\n          ", "\nTIMESTAMP values that use timezone\n            offsets are also supported.\n          ", "Press CTRL+C to copy mysql> SELECT @@system_time_zone;\n+--------------------+\n| @@system_time_zone |\n+--------------------+\n| EDT                |\n+--------------------+\n1 row in set (0.00 sec)\n\nmysql> CREATE TABLE tz (c TIMESTAMP);\nQuery OK, 0 rows affected (0.41 sec)\n\nmysql> INSERT INTO tz VALUES\n    ->     ROW(CURRENT_TIMESTAMP),\n    ->     ROW('2020-07-28 14:50:15+1:00');\nQuery OK, 1 row affected (0.08 sec)\n\nmysql> TABLE tz;\n+---------------------+\n| c                   |\n+---------------------+\n| 2020-07-28 09:22:41 |\n| 2020-07-28 09:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE '+00:00' AS DATETIME) AS u FROM tz;\n+---------------------+\n| u                   |\n+---------------------+\n| 2020-07-28 13:22:41 |\n| 2020-07-28 13:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE 'UTC' AS DATETIME(2)) AS u FROM tz;\n+------------------------+\n| u                      |\n+------------------------+\n| 2020-07-28 13:22:41.00 |\n| 2020-07-28 13:50:15.00 |\n+------------------------+\n2 rows in set (0.00 sec)", "\n            If you use 'UTC' as the time zone\n            specifier with this form of CAST(), and\n            the server raises an error such as Unknown or\n            incorrect time zone: 'UTC', you may need to\n            install the MySQL time zone tables (see\n            Populating the Time Zone Tables).\n          ", "\nAT TIME ZONE does not support the\n            ARRAY keyword, and is not supported by\n            the CONVERT() function.\n          "], "Examples": ["mysql> SELECT CAST(\"11:35:00\" AS YEAR), CAST(TIME \"11:35:00\" AS YEAR);\n+--------------------------+-------------------------------+\n| CAST(\"11:35:00\" AS YEAR) | CAST(TIME \"11:35:00\" AS YEAR) |\n+--------------------------+-------------------------------+\n|                     2011 |                          2021 |\n+--------------------------+-------------------------------+", "mysql> SELECT CAST(1944.35 AS YEAR), CAST(1944.50 AS YEAR);\n+-----------------------+-----------------------+\n| CAST(1944.35 AS YEAR) | CAST(1944.50 AS YEAR) |\n+-----------------------+-----------------------+\n|                  1944 |                  1945 |\n+-----------------------+-----------------------+\n\nmysql> SELECT CAST(66.35 AS YEAR), CAST(66.50 AS YEAR);\n+---------------------+---------------------+\n| CAST(66.35 AS YEAR) | CAST(66.50 AS YEAR) |\n+---------------------+---------------------+\n|                2066 |                2067 |\n+---------------------+---------------------+", "mysql> SELECT CAST(\"1979aaa\" AS YEAR);\n+-------------------------+\n| CAST(\"1979aaa\" AS YEAR) |\n+-------------------------+\n|                    1979 |\n+-------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect YEAR value: '1979aaa' |\n+---------+------+-------------------------------------------+", "mysql> SELECT @@system_time_zone;\n+--------------------+\n| @@system_time_zone |\n+--------------------+\n| EDT                |\n+--------------------+\n1 row in set (0.00 sec)\n\nmysql> CREATE TABLE tz (c TIMESTAMP);\nQuery OK, 0 rows affected (0.41 sec)\n\nmysql> INSERT INTO tz VALUES\n    ->     ROW(CURRENT_TIMESTAMP),\n    ->     ROW('2020-07-28 14:50:15+1:00');\nQuery OK, 1 row affected (0.08 sec)\n\nmysql> TABLE tz;\n+---------------------+\n| c                   |\n+---------------------+\n| 2020-07-28 09:22:41 |\n| 2020-07-28 09:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE '+00:00' AS DATETIME) AS u FROM tz;\n+---------------------+\n| u                   |\n+---------------------+\n| 2020-07-28 13:22:41 |\n| 2020-07-28 13:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE 'UTC' AS DATETIME(2)) AS u FROM tz;\n+------------------------+\n| u                      |\n+------------------------+\n| 2020-07-28 13:22:41.00 |\n| 2020-07-28 13:50:15.00 |\n+------------------------+\n2 rows in set (0.00 sec)"], "Category": ["Built-In Functions", "Cast Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html#function_cast"], "Feature Type": ["Function"], "index": 362, "vector_txt": "362:Feature: CAST(expr AS\n            type [ARRAY])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.10 Cast Functions and Operators"], "Feature": ["CONVERT(expr\n            USING transcoding_name)"], "Description": ["Cast a value as a certain type", "\nCONVERT(expr\n            USING transcoding_name)\n", "\nCONVERT(expr,type)\n", "\nCONVERT(expr\n            USING transcoding_name)\n            is standard SQL syntax. The non-USING\n            form of CONVERT() is ODBC\n            syntax. Regardless of the syntax used, the function returns\n            NULL if expr\n            is NULL.\n          ", "\nCONVERT(expr\n            USING transcoding_name)\n            converts data between different character sets. In MySQL,\n            transcoding names are the same as the corresponding\n            character set names. For example, this statement converts\n            the string 'abc' in the default character\n            set to the corresponding string in the\n            utf8mb4 character set:\n          ", "Press CTRL+C to copy SELECT CONVERT('abc' USING utf8mb4);", "\nCONVERT(expr,\n            type) syntax (without\n            USING) takes an expression and a\n            type value specifying a result\n            type, and produces a result value of the specified type.\n            This operation may also be expressed as\n            CAST(expr AS\n            type), which is\n            equivalent. For more information, see the description of\n            CAST().\n"], "Examples": ["SELECT CONVERT('abc' USING utf8mb4);"], "Category": ["Built-In Functions", "Cast Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html#function_convert"], "Feature Type": ["Function"], "index": 363, "vector_txt": "363:Feature: CONVERT(expr\n            USING transcoding_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["COALESCE(value,...)"], "Description": ["Return the first non-NULL argument", "\nCOALESCE(value,...)\n", "\n            Returns the first non-NULL value in the\n            list, or NULL if there are no\n            non-NULL values.\n          ", "\n            The return type of COALESCE()\n            is the aggregated type of the argument types.\n          ", "Press CTRL+C to copy mysql> SELECT COALESCE(NULL,1);\n        -> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n        -> NULL"], "Examples": ["mysql> SELECT COALESCE(NULL,1);\n        -> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n        -> NULL"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_coalesce"], "Feature Type": ["Function"], "index": 364, "vector_txt": "364:Feature: COALESCE(value,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["GREATEST(value1,value2,...)"], "Description": ["Return the largest argument", "\nGREATEST(value1,value2,...)\n", "\n            With two or more arguments, returns the largest\n            (maximum-valued) argument. The arguments are compared using\n            the same rules as for\n            LEAST().\n          ", "Press CTRL+C to copy mysql> SELECT GREATEST(2,0);\n        -> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n        -> 767.0\nmysql> SELECT GREATEST('B','A','C');\n        -> 'C'", "\nGREATEST() returns\n            NULL if any argument is\n            NULL.\n          "], "Examples": ["mysql> SELECT GREATEST(2,0);\n        -> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n        -> 767.0\nmysql> SELECT GREATEST('B','A','C');\n        -> 'C'"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_greatest"], "Feature Type": ["Function"], "index": 365, "vector_txt": "365:Feature: GREATEST(value1,value2,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["BIT_LENGTH(str)"], "Description": ["Return length of argument in bits", "\nBIT_LENGTH(str)\n", "\n          Returns the length of the string\n          str in bits. Returns\n          NULL if str is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT BIT_LENGTH('text');\n        -> 32"], "Examples": ["mysql> SELECT BIT_LENGTH('text');\n        -> 32"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_bit-length"], "Feature Type": ["Function"], "index": 366, "vector_txt": "366:Feature: BIT_LENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4 Operators", "14.4.2 Comparison Functions and Operators"], "Feature": ["expr\n            IN (value,...)"], "Description": ["Whether a value is within a set of values", "\nexpr\n            IN (value,...)\n", "\n            Returns 1 (true) if\n            expr is equal to any of the\n            values in the IN() list, else returns\n            0 (false).\n          ", "\n            Type conversion takes place according to the rules described\n            in Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d, applied to all the\n            arguments. If no type conversion is needed for the values in\n            the IN() list, they are all\n            non-JSON constants of the same type, and\n            expr can be compared to each of\n            them as a value of the same type (possibly after type\n            conversion), an optimization takes place. The values the\n            list are sorted and the search for\n            expr is done using a binary\n            search, which makes the IN() operation\n            very quick.\n          ", "Press CTRL+C to copy mysql> SELECT 2 IN (0,3,5,7);\n        -> 0\nmysql> SELECT 'wefwf' IN ('wee','wefwf','weg');\n        -> 1", "\nIN() can be used to compare row\n            constructors:\n          ", "Press CTRL+C to copy mysql> SELECT (3,4) IN ((1,2), (3,4));\n        -> 1\nmysql> SELECT (3,4) IN ((1,2), (3,5));\n        -> 0", "\n            You should never mix quoted and unquoted values in an\n            IN() list because the comparison rules\n            for quoted values (such as strings) and unquoted values\n            (such as numbers) differ. Mixing types may therefore lead to\n            inconsistent results. For example, do not write an\n            IN() expression like this:\n          ", "Press CTRL+C to copy SELECT val1 FROM tbl1 WHERE val1 IN (1,2,'a');", "\n            Instead, write it like this:\n          ", "Press CTRL+C to copy SELECT val1 FROM tbl1 WHERE val1 IN ('1','2','a');", "\n            Implicit type conversion may produce nonintuitive results:\n          ", "Press CTRL+C to copy mysql> SELECT 'a' IN (0), 0 IN ('b');\n        -> 1, 1", "\n            In both cases, the comparison values are converted to\n            floating-point values, yielding 0.0 in each case, and a\n            comparison result of 1 (true).\n          ", "\n            The number of values in the IN() list is\n            only limited by the\n            max_allowed_packet value.\n          ", "\n            To comply with the SQL standard, IN()\n            returns NULL not only if the expression\n            on the left hand side is NULL, but also\n            if no match is found in the list and one of the expressions\n            in the list is NULL.\n          ", "\nIN() syntax can also be used to write\n            certain types of subqueries. See\n            Section\u00a015.2.15.3, \u201cSubqueries with ANY, IN, or SOME\u201d.\n          "], "Examples": ["mysql> SELECT 2 IN (0,3,5,7);\n        -> 0\nmysql> SELECT 'wefwf' IN ('wee','wefwf','weg');\n        -> 1", "mysql> SELECT (3,4) IN ((1,2), (3,4));\n        -> 1\nmysql> SELECT (3,4) IN ((1,2), (3,5));\n        -> 0", "SELECT val1 FROM tbl1 WHERE val1 IN (1,2,'a');", "SELECT val1 FROM tbl1 WHERE val1 IN ('1','2','a');", "mysql> SELECT 'a' IN (0), 0 IN ('b');\n        -> 1, 1"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_in"], "Feature Type": ["Function"], "index": 367, "vector_txt": "367:Feature: expr\n            IN (value,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["INTERVAL(N,N1,N2,N3,...)"], "Description": ["Return the index of the argument that is less than the first", "\nINTERVAL(N,N1,N2,N3,...)\n", "\n            Returns 0 if N\n            \u2264 N1, 1 if\n            N \u2264\n            N2 and so on, or\n            -1 if N is\n            NULL. All arguments are treated as\n            integers. It is required that N1\n            \u2264 N2 \u2264\n            N3 \u2264 ...\n            \u2264 Nn for this function to work\n            correctly. This is because a binary search is used (very\n            fast).\n          ", "Press CTRL+C to copy mysql> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n        -> 3\nmysql> SELECT INTERVAL(10, 1, 10, 100, 1000);\n        -> 2\nmysql> SELECT INTERVAL(22, 23, 30, 44, 200);\n        -> 0"], "Examples": ["mysql> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n        -> 3\nmysql> SELECT INTERVAL(10, 1, 10, 100, 1000);\n        -> 2\nmysql> SELECT INTERVAL(22, 23, 30, 44, 200);\n        -> 0"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_interval"], "Feature Type": ["Function"], "index": 368, "vector_txt": "368:Feature: INTERVAL(N,N1,N2,N3,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["ISNULL(expr)"], "Description": ["Test whether the argument is NULL", "\nISNULL(expr)\n", "\n            If expr is\n            NULL,\n            ISNULL() returns\n            1, otherwise it returns\n            0.\n          ", "Press CTRL+C to copy mysql> SELECT ISNULL(1+1);\n        -> 0\nmysql> SELECT ISNULL(1/0);\n        -> 1", "\nISNULL() can be used instead\n            of = to test\n            whether a value is NULL. (Comparing a\n            value to NULL using\n            = always\n            yields NULL.)\n          ", "\n            The ISNULL() function shares\n            some special behaviors with the\n            IS NULL\n            comparison operator. See the description of\n            IS NULL.\n          "], "Examples": ["mysql> SELECT ISNULL(1+1);\n        -> 0\nmysql> SELECT ISNULL(1/0);\n        -> 1"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_isnull"], "Feature Type": ["Function"], "index": 369, "vector_txt": "369:Feature: ISNULL(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["LEAST(value1,value2,...)"], "Description": ["Return the smallest argument", "\nLEAST(value1,value2,...)\n", "\n            With two or more arguments, returns the smallest\n            (minimum-valued) argument. The arguments are compared using\n            the following rules:\n", "\n\n                If any argument is NULL, the result\n                is NULL. No comparison is needed.\n              \n                If all arguments are integer-valued, they are compared\n                as integers.\n              \n                If at least one argument is double precision, they are\n                compared as double-precision values. Otherwise, if at\n                least one argument is a\n                DECIMAL value, they are\n                compared as DECIMAL\n                values.\n              \n                If the arguments comprise a mix of numbers and strings,\n                they are compared as strings.\n              \n                If any argument is a nonbinary (character) string, the\n                arguments are compared as nonbinary strings.\n              \n                In all other cases, the arguments are compared as binary\n                strings.\n\n", "\n            The return type of LEAST() is\n            the aggregated type of the comparison argument types.\n          ", "Press CTRL+C to copy mysql> SELECT LEAST(2,0);\n        -> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n        -> 3.0\nmysql> SELECT LEAST('B','A','C');\n        -> 'A'"], "Examples": ["mysql> SELECT LEAST(2,0);\n        -> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n        -> 3.0\nmysql> SELECT LEAST('B','A','C');\n        -> 'A'"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_least"], "Feature Type": ["Function"], "index": 370, "vector_txt": "370:Feature: LEAST(value1,value2,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4 Operators", "14.4.2 Comparison Functions and Operators"], "Feature": ["expr\n            NOT IN (value,...)"], "Description": ["Whether a value is not within a set of values", "\nexpr\n            NOT IN (value,...)\n", "\n            This is the same as NOT\n            (expr IN\n            (value,...)).\n          "], "Examples": [], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_not-in"], "Feature Type": ["Function"], "index": 371, "vector_txt": "371:Feature: expr\n            NOT IN (value,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators", "14.8 String Functions and Operators", "14.8.1 String Comparison Functions and Operators"], "Feature": ["STRCMP(expr1,expr2)"], "Description": ["Compare two strings", "\nSTRCMP(expr1,expr2)\n", "\nSTRCMP() returns\n            0 if the strings are the same,\n            -1 if the first argument is smaller than\n            the second according to the current sort order, and\n            NULL if either argument is\n            NULL. It returns 1\n            otherwise.\n          ", "Press CTRL+C to copy mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "\nSTRCMP() performs the\n            comparison using the collation of the arguments.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "\n            If the collations are incompatible, one of the arguments\n            must be converted to be compatible with the other. See\n            Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "Comparison Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html#function_strcmp"], "Feature Type": ["Function"], "index": 372, "vector_txt": "372:Feature: STRCMP(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["ADDDATE(date,INTERVAL\n          expr\nunit)"], "Description": ["Add time values (intervals) to a date value", "\nADDDATE(date,INTERVAL\n          expr\nunit),\n          ADDDATE(date,days)\n", "\n          When invoked with the INTERVAL form of the\n          second argument, ADDDATE() is a\n          synonym for DATE_ADD(). The\n          related function SUBDATE() is a\n          synonym for DATE_SUB(). For\n          information on the INTERVAL\nunit argument, see\n          Temporal Intervals.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'\nmysql> SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'", "\n          When invoked with the days form of\n          the second argument, MySQL treats it as an integer number of\n          days to be added to expr.\n        ", "Press CTRL+C to copy mysql> SELECT ADDDATE('2008-01-02', 31);\n        -> '2008-02-02'", "\n          This function returns NULL if\n          date or\n          days is NULL.\n        "], "Examples": ["mysql> SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'\nmysql> SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2008-02-02'", "mysql> SELECT ADDDATE('2008-01-02', 31);\n        -> '2008-02-02'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_adddate"], "Feature Type": ["Function"], "index": 373, "vector_txt": "373:Feature: ADDDATE(date,INTERVAL\n          expr\nunit)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["ADDTIME(expr1,expr2)"], "Description": ["Add time", "\nADDTIME(expr1,expr2)\n", "\nADDTIME() adds\n          expr2 to\n          expr1 and returns the result.\n          expr1 is a time or datetime\n          expression, and expr2 is a time\n          expression. Returns NULL if\n          expr1or\n          expr2 is NULL.\n        ", "\n          The return type of this function and of the\n          SUBTIME() function is\n          determined as follows:\n", "\n\n              If the first argument is a dynamic parameter (such as in a\n              prepared statement), the return type is\n              TIME.\n            \n              Otherwise, the resolved type of the function is derived\n              from the resolved type of the first argument.\n\n", "Press CTRL+C to copy mysql> SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n        -> '2008-01-02 01:01:01.000001'\nmysql> SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n        -> '03:00:01.999997'"], "Examples": ["mysql> SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n        -> '2008-01-02 01:01:01.000001'\nmysql> SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n        -> '03:00:01.999997'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_addtime"], "Feature Type": ["Function"], "index": 374, "vector_txt": "374:Feature: ADDTIME(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CONVERT_TZ(dt,from_tz,to_tz)"], "Description": ["Convert from one time zone to another", "\nCONVERT_TZ(dt,from_tz,to_tz)\n", "\nCONVERT_TZ() converts a\n          datetime value dt from the time\n          zone given by from_tz to the time\n          zone given by to_tz and returns the\n          resulting value. Time zones are specified as described in\n          Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d. This function returns\n          NULL if any of the arguments are invalid,\n          or if any of them are NULL.\n        ", "\n          On 32-bit platforms, the supported range of values for this\n          function is the same as for the\n          TIMESTAMP type (see\n          Section\u00a013.2.1, \u201cDate and Time Data Type Syntax\u201d, for range\n          information). On 64-bit platforms, the maximum supported value\n          is '3001-01-18 23:59:59.999999' UTC.\n        ", "\n          Regardless of platform or MySQL version, if the value falls\n          out of the supported range when converted from\n          from_tz to UTC, no conversion\n          occurs.\n        ", "Press CTRL+C to copy mysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n        -> '2004-01-01 13:00:00'\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n        -> '2004-01-01 22:00:00'", "\n\nNote\n\n\n            To use named time zones such as 'MET' or\n            'Europe/Amsterdam', the time zone tables\n            must be properly set up. For instructions, see\n            Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.\n\n"], "Examples": ["mysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n        -> '2004-01-01 13:00:00'\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n        -> '2004-01-01 22:00:00'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_convert-tz"], "Feature Type": ["Function"], "index": 375, "vector_txt": "375:Feature: CONVERT_TZ(dt,from_tz,to_tz)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CURDATE()"], "Description": ["Return the current date", "\nCURDATE()\n", "\n          Returns the current date as a value in\n          'YYYY-MM-DD' or\n          YYYYMMDD format, depending on\n          whether the function is used in string or numeric context.\n        ", "Press CTRL+C to copy mysql> SELECT CURDATE();\n        -> '2008-06-13'\nmysql> SELECT CURDATE() + 0;\n        -> 20080613"], "Examples": ["mysql> SELECT CURDATE();\n        -> '2008-06-13'\nmysql> SELECT CURDATE() + 0;\n        -> 20080613"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_curdate"], "Feature Type": ["Function"], "index": 376, "vector_txt": "376:Feature: CURDATE()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["BIT_OR(expr)\n            [over_clause]"], "Description": ["Return bitwise OR", "\nBIT_OR(expr)\n            [over_clause]\n", "\n            Returns the bitwise OR of all bits in\n            expr.\n          ", "\n            The result type depends on whether the function argument\n            values are evaluated as binary strings or numbers:\n", "\n\n                Binary-string evaluation occurs when the argument values\n                have a binary string type, and the argument is not a\n                hexadecimal literal, bit literal, or\n                NULL literal. Numeric evaluation\n                occurs otherwise, with argument value conversion to\n                unsigned 64-bit integers as necessary.\n              \n                Binary-string evaluation produces a binary string of the\n                same length as the argument values. If argument values\n                have unequal lengths, an\n                ER_INVALID_BITWISE_OPERANDS_SIZE\n                error occurs. If the argument size exceeds 511 bytes, an\n                ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE\n                error occurs. Numeric evaluation produces an unsigned\n                64-bit integer.\n\n", "\n            If there are no matching rows,\n            BIT_OR() returns a neutral\n            value (all bits set to 0) having the same length as the\n            argument values.\n          ", "\nNULL values do not affect the result\n            unless all values are NULL. In that case,\n            the result is a neutral value having the same length as the\n            argument values.\n          ", "\n            For more information discussion about argument evaluation\n            and result types, see the introductory discussion in\n            Section\u00a014.12, \u201cBit Functions and Operators\u201d.\n          ", "\n            If BIT_OR() is invoked from\n            within the mysql client, binary string\n            results display using hexadecimal notation, depending on the\n            value of the --binary-as-hex.\n            For more information about that option, see\n            Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_bit-or"], "Feature Type": ["Function"], "index": 377, "vector_txt": "377:Feature: BIT_OR(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CURRENT_DATE"], "Description": ["Synonyms for CURDATE()", "\nCURRENT_DATE,\n          CURRENT_DATE()\n", "\nCURRENT_DATE and\n          CURRENT_DATE() are synonyms for\n          CURDATE().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-date"], "Feature Type": ["Function"], "index": 378, "vector_txt": "378:Feature: CURRENT_DATE\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CURRENT_TIME"], "Description": ["Synonyms for CURTIME()", "\nCURRENT_TIME,\n          CURRENT_TIME([fsp])\n", "\nCURRENT_TIME and\n          CURRENT_TIME() are synonyms for\n          CURTIME().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-time"], "Feature Type": ["Function"], "index": 379, "vector_txt": "379:Feature: CURRENT_TIME\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CURRENT_TIMESTAMP"], "Description": ["Synonyms for NOW()", "\nCURRENT_TIMESTAMP,\n          CURRENT_TIMESTAMP([fsp])\n", "\nCURRENT_TIMESTAMP and\n          CURRENT_TIMESTAMP() are\n          synonyms for NOW().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-timestamp"], "Feature Type": ["Function"], "index": 380, "vector_txt": "380:Feature: CURRENT_TIMESTAMP\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CURTIME([fsp])"], "Description": ["Return the current time", "\nCURTIME([fsp])\n", "\n          Returns the current time as a value in\n          'hh:mm:ss' or\n          hhmmss format, depending on whether\n          the function is used in string or numeric context. The value\n          is expressed in the session time zone.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 19:25:37  |\n+-----------+\n\nmysql> SELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n|        192537 |\n+---------------+\n\nmysql> SELECT CURTIME(3);\n+--------------+\n| CURTIME(3)   |\n+--------------+\n| 19:25:37.840 |\n+--------------+"], "Examples": ["mysql> SELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 19:25:37  |\n+-----------+\n\nmysql> SELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n|        192537 |\n+---------------+\n\nmysql> SELECT CURTIME(3);\n+--------------+\n| CURTIME(3)   |\n+--------------+\n| 19:25:37.840 |\n+--------------+"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_curtime"], "Feature Type": ["Function"], "index": 381, "vector_txt": "381:Feature: CURTIME([fsp])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DATE(expr)"], "Description": ["Extract the date part of a date or datetime expression", "\nDATE(expr)\n", "\n          Extracts the date part of the date or datetime expression\n          expr. Returns\n          NULL if expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DATE('2003-12-31 01:02:03');\n        -> '2003-12-31'"], "Examples": ["mysql> SELECT DATE('2003-12-31 01:02:03');\n        -> '2003-12-31'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date"], "Feature Type": ["Function"], "index": 382, "vector_txt": "382:Feature: DATE(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DATE_ADD(date,INTERVAL\n          expr\nunit)"], "Description": ["Add time values (intervals) to a date value", "\nDATE_ADD(date,INTERVAL\n          expr\nunit),\n          DATE_SUB(date,INTERVAL\n          expr\nunit)\n", "\n          These functions perform date arithmetic. The\n          date argument specifies the\n          starting date or datetime value.\n          expr is an expression specifying\n          the interval value to be added or subtracted from the starting\n          date. expr is evaluated as a\n          string; it may start with a - for negative\n          intervals. unit is a keyword\n          indicating the units in which the expression should be\n          interpreted.\n        ", "\n          For more information about temporal interval syntax, including\n          a full list of unit specifiers, the\n          expected form of the expr argument\n          for each unit value, and rules for\n          operand interpretation in temporal arithmetic, see\n          Temporal Intervals.\n        ", "\n          The return value depends on the arguments:\n", "\n\n              If date is\n              NULL, the function returns\n              NULL.\n            \nDATE if the\n              date argument is a\n              DATE value and your\n              calculations involve only YEAR,\n              MONTH, and DAY parts\n              (that is, no time parts).\n            \nTIME if the\n              date argument is a\n              TIME value and the calculations involve\n              only HOURS, MINUTES,\n              and SECONDS parts (that is, no date\n              parts).\n            \nDATETIME if the first\n              argument is a DATETIME (or\n              TIMESTAMP) value, or if the\n              first argument is a DATE\n              and the unit value uses\n              HOURS, MINUTES, or\n              SECONDS, or if the first argument is of\n              type TIME and the\n              unit value uses\n              YEAR, MONTH, or\n              DAY.\n            \n              If the first argument is a dynamic parameter (for example,\n              of a prepared statement), its resolved type is\n              DATE if the second argument is an\n              interval that contains some combination of\n              YEAR, MONTH, or\n              DAY values only; otherwise, its type is\n              DATETIME.\n            \n              String otherwise (type\n              VARCHAR).\n\n", "\n          To ensure that the result is\n          DATETIME, you can use\n          CAST() to convert the first\n          argument to DATETIME.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);\n        -> '2018-05-02'\nmysql> SELECT DATE_SUB('2018-05-01',INTERVAL 1 YEAR);\n        -> '2017-05-01'\nmysql> SELECT DATE_ADD('2020-12-31 23:59:59',\n    ->                 INTERVAL 1 SECOND);\n        -> '2021-01-01 00:00:00'\nmysql> SELECT DATE_ADD('2018-12-31 23:59:59',\n    ->                 INTERVAL 1 DAY);\n        -> '2019-01-01 23:59:59'\nmysql> SELECT DATE_ADD('2100-12-31 23:59:59',\n    ->                 INTERVAL '1:1' MINUTE_SECOND);\n        -> '2101-01-01 00:01:00'\nmysql> SELECT DATE_SUB('2025-01-01 00:00:00',\n    ->                 INTERVAL '1 1:1:1' DAY_SECOND);\n        -> '2024-12-30 22:58:59'\nmysql> SELECT DATE_ADD('1900-01-01 00:00:00',\n    ->                 INTERVAL '-1 10' DAY_HOUR);\n        -> '1899-12-30 14:00:00'\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n        -> '1997-12-02'\nmysql> SELECT DATE_ADD('1992-12-31 23:59:59.000002',\n    ->            INTERVAL '1.999999' SECOND_MICROSECOND);\n        -> '1993-01-01 00:00:01.000001'", "\n          When adding a MONTH interval to a\n          DATE or DATETIME value,\n          and the resulting date includes a day that does not exist in\n          the given month, the day is adjusted to the last day of the\n          month, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1, \n     >        DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2;\n+------------+------------+\n| d1         | d2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);\n        -> '2018-05-02'\nmysql> SELECT DATE_SUB('2018-05-01',INTERVAL 1 YEAR);\n        -> '2017-05-01'\nmysql> SELECT DATE_ADD('2020-12-31 23:59:59',\n    ->                 INTERVAL 1 SECOND);\n        -> '2021-01-01 00:00:00'\nmysql> SELECT DATE_ADD('2018-12-31 23:59:59',\n    ->                 INTERVAL 1 DAY);\n        -> '2019-01-01 23:59:59'\nmysql> SELECT DATE_ADD('2100-12-31 23:59:59',\n    ->                 INTERVAL '1:1' MINUTE_SECOND);\n        -> '2101-01-01 00:01:00'\nmysql> SELECT DATE_SUB('2025-01-01 00:00:00',\n    ->                 INTERVAL '1 1:1:1' DAY_SECOND);\n        -> '2024-12-30 22:58:59'\nmysql> SELECT DATE_ADD('1900-01-01 00:00:00',\n    ->                 INTERVAL '-1 10' DAY_HOUR);\n        -> '1899-12-30 14:00:00'\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n        -> '1997-12-02'\nmysql> SELECT DATE_ADD('1992-12-31 23:59:59.000002',\n    ->            INTERVAL '1.999999' SECOND_MICROSECOND);\n        -> '1993-01-01 00:00:01.000001'", "mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1, \n     >        DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2;\n+------------+------------+\n| d1         | d2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-add"], "Feature Type": ["Function"], "index": 383, "vector_txt": "383:Feature: DATE_ADD(date,INTERVAL\n          expr\nunit)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DATE_FORMAT(date,format)"], "Description": ["Format date as specified", "\nDATE_FORMAT(date,format)\n", "\n          Formats the date value according to\n          the format string. If either\n          argument is NULL, the function returns\n          NULL.\n        ", "\n          The specifiers shown in the following table may be used in the\n          format string. The\n          % character is required before format\n          specifier characters. The specifiers apply to other functions\n          as well: STR_TO_DATE(),\n          TIME_FORMAT(),\n          UNIX_TIMESTAMP().\n", "\n\nSpecifier\nDescription\n\n%a\nAbbreviated weekday name\n                (Sun..Sat)\n\n%b\nAbbreviated month name (Jan..Dec)\n\n%c\nMonth, numeric (0..12)\n\n%D\nDay of the month with English suffix (0th,\n                1st, 2nd,\n                3rd, \u2026)\n\n%d\nDay of the month, numeric (00..31)\n\n%e\nDay of the month, numeric (0..31)\n\n%f\nMicroseconds (000000..999999)\n\n%H\nHour (00..23)\n\n%h\nHour (01..12)\n\n%I\nHour (01..12)\n\n%i\nMinutes, numeric (00..59)\n\n%j\nDay of year (001..366)\n\n%k\nHour (0..23)\n\n%l\nHour (1..12)\n\n%M\nMonth name (January..December)\n\n%m\nMonth, numeric (00..12)\n\n%p\nAM or PM\n\n%r\nTime, 12-hour (hh:mm:ss followed by\n                AM or PM)\n\n%S\nSeconds (00..59)\n\n%s\nSeconds (00..59)\n\n%T\nTime, 24-hour (hh:mm:ss)\n\n%U\nWeek (00..53), where Sunday is the\n                first day of the week;\n                WEEK() mode 0\n\n%u\nWeek (00..53), where Monday is the\n                first day of the week;\n                WEEK() mode 1\n\n%V\nWeek (01..53), where Sunday is the\n                first day of the week;\n                WEEK() mode 2; used with\n                %X\n\n%v\nWeek (01..53), where Monday is the\n                first day of the week;\n                WEEK() mode 3; used with\n                %x\n\n%W\nWeekday name (Sunday..Saturday)\n\n%w\nDay of the week\n                (0=Sunday..6=Saturday)\n\n%X\nYear for the week where Sunday is the first day of the week, numeric,\n                four digits; used with %V\n\n%x\nYear for the week, where Monday is the first day of the week, numeric,\n                four digits; used with %v\n\n%Y\nYear, numeric, four digits\n\n%y\nYear, numeric (two digits)\n\n%%\nA literal % character\n\n%x\nx, for any\n                \u201cx\u201d not listed\n                above\n\n", "\nSpecifier\nDescription\n", "\n          Ranges for the month and day specifiers begin with zero due to\n          the fact that MySQL permits the storing of incomplete dates\n          such as '2014-00-00'.\n        ", "\n          The language used for day and month names and abbreviations is\n          controlled by the value of the\n          lc_time_names system variable\n          (Section\u00a012.16, \u201cMySQL Server Locale Support\u201d).\n        ", "\n          For the %U, %u,\n          %V, and %v specifiers,\n          see the description of the\n          WEEK() function for information\n          about the mode values. The mode affects how week numbering\n          occurs.\n        ", "\nDATE_FORMAT() returns a string\n          with a character set and collation given by\n          character_set_connection and\n          collation_connection so that\n          it can return month and weekday names containing non-ASCII\n          characters.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n        -> 'Sunday October 2009'\nmysql> SELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n        -> '22:23:00'\nmysql> SELECT DATE_FORMAT('1900-10-04 22:23:00',\n    ->                 '%D %y %a %d %m %b %j');\n        -> '4th 00 Thu 04 10 Oct 277'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00',\n    ->                 '%H %k %I %r %T %S %w');\n        -> '22 22 10 10:23:00 PM 22:23:00 00 6'\nmysql> SELECT DATE_FORMAT('1999-01-01', '%X %V');\n        -> '1998 52'\nmysql> SELECT DATE_FORMAT('2006-06-00', '%d');\n        -> '00'"], "Examples": ["mysql> SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n        -> 'Sunday October 2009'\nmysql> SELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n        -> '22:23:00'\nmysql> SELECT DATE_FORMAT('1900-10-04 22:23:00',\n    ->                 '%D %y %a %d %m %b %j');\n        -> '4th 00 Thu 04 10 Oct 277'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00',\n    ->                 '%H %k %I %r %T %S %w');\n        -> '22 22 10 10:23:00 PM 22:23:00 00 6'\nmysql> SELECT DATE_FORMAT('1999-01-01', '%X %V');\n        -> '1998 52'\nmysql> SELECT DATE_FORMAT('2006-06-00', '%d');\n        -> '00'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-format"], "Feature Type": ["Function"], "index": 384, "vector_txt": "384:Feature: DATE_FORMAT(date,format)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DATE_SUB(date,INTERVAL\n          expr\nunit)"], "Description": ["Subtract a time value (interval) from a date", "\nDATE_SUB(date,INTERVAL\n          expr\nunit)\n", "\n          See the description for\n          DATE_ADD().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-sub"], "Feature Type": ["Function"], "index": 385, "vector_txt": "385:Feature: DATE_SUB(date,INTERVAL\n          expr\nunit)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DATEDIFF(expr1,expr2)"], "Description": ["Subtract two dates", "\nDATEDIFF(expr1,expr2)\n", "\nDATEDIFF() returns\n          expr1 \u2212\n          expr2 expressed as a value in days\n          from one date to the other. expr1\n          and expr2 are date or date-and-time\n          expressions. Only the date parts of the values are used in the\n          calculation.\n        ", "Press CTRL+C to copy mysql> SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n        -> 1\nmysql> SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n        -> -31", "\n          This function returns NULL if\n          expr1 or\n          expr2 is NULL.\n        "], "Examples": ["mysql> SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n        -> 1\nmysql> SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n        -> -31"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_datediff"], "Feature Type": ["Function"], "index": 386, "vector_txt": "386:Feature: DATEDIFF(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DAY(date)"], "Description": ["Synonym for DAYOFMONTH()", "\nDAY(date)\n", "\nDAY() is a synonym for\n          DAYOFMONTH().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_day"], "Feature Type": ["Function"], "index": 387, "vector_txt": "387:Feature: DAY(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["BIT_XOR(expr)\n            [over_clause]"], "Description": ["Return bitwise XOR", "\nBIT_XOR(expr)\n            [over_clause]\n", "\n            Returns the bitwise XOR of all\n            bits in expr.\n          ", "\n            The result type depends on whether the function argument\n            values are evaluated as binary strings or numbers:\n", "\n\n                Binary-string evaluation occurs when the argument values\n                have a binary string type, and the argument is not a\n                hexadecimal literal, bit literal, or\n                NULL literal. Numeric evaluation\n                occurs otherwise, with argument value conversion to\n                unsigned 64-bit integers as necessary.\n              \n                Binary-string evaluation produces a binary string of the\n                same length as the argument values. If argument values\n                have unequal lengths, an\n                ER_INVALID_BITWISE_OPERANDS_SIZE\n                error occurs. If the argument size exceeds 511 bytes, an\n                ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE\n                error occurs. Numeric evaluation produces an unsigned\n                64-bit integer.\n\n", "\n            If there are no matching rows,\n            BIT_XOR() returns a neutral\n            value (all bits set to 0) having the same length as the\n            argument values.\n          ", "\nNULL values do not affect the result\n            unless all values are NULL. In that case,\n            the result is a neutral value having the same length as the\n            argument values.\n          ", "\n            For more information discussion about argument evaluation\n            and result types, see the introductory discussion in\n            Section\u00a014.12, \u201cBit Functions and Operators\u201d.\n          ", "\n            If BIT_XOR() is invoked from\n            within the mysql client, binary string\n            results display using hexadecimal notation, depending on the\n            value of the --binary-as-hex.\n            For more information about that option, see\n            Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_bit-xor"], "Feature Type": ["Function"], "index": 388, "vector_txt": "388:Feature: BIT_XOR(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DAYNAME(date)"], "Description": ["Return the name of the weekday", "\nDAYNAME(date)\n", "\n          Returns the name of the weekday for\n          date. The language used for the\n          name is controlled by the value of the\n          lc_time_names system variable\n          (see Section\u00a012.16, \u201cMySQL Server Locale Support\u201d). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYNAME('2007-02-03');\n        -> 'Saturday'"], "Examples": ["mysql> SELECT DAYNAME('2007-02-03');\n        -> 'Saturday'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayname"], "Feature Type": ["Function"], "index": 389, "vector_txt": "389:Feature: DAYNAME(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DAYOFMONTH(date)"], "Description": ["Return the day of the month (0-31)", "\nDAYOFMONTH(date)\n", "\n          Returns the day of the month for\n          date, in the range\n          1 to 31, or\n          0 for dates such as\n          '0000-00-00' or\n          '2008-00-00' that have a zero day part.\n          Returns NULL if\n          date is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFMONTH('2007-02-03');\n        -> 3"], "Examples": ["mysql> SELECT DAYOFMONTH('2007-02-03');\n        -> 3"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofmonth"], "Feature Type": ["Function"], "index": 390, "vector_txt": "390:Feature: DAYOFMONTH(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DAYOFWEEK(date)"], "Description": ["Return the weekday index of the argument", "\nDAYOFWEEK(date)\n", "\n          Returns the weekday index for date\n          (1 = Sunday, 2 = Monday,\n          \u2026, 7 = Saturday). These index values\n          correspond to the ODBC standard. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFWEEK('2007-02-03');\n        -> 7"], "Examples": ["mysql> SELECT DAYOFWEEK('2007-02-03');\n        -> 7"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofweek"], "Feature Type": ["Function"], "index": 391, "vector_txt": "391:Feature: DAYOFWEEK(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DAYOFYEAR(date)"], "Description": ["Return the day of the year (1-366)", "\nDAYOFYEAR(date)\n", "\n          Returns the day of the year for\n          date, in the range\n          1 to 366. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFYEAR('2007-02-03');\n        -> 34"], "Examples": ["mysql> SELECT DAYOFYEAR('2007-02-03');\n        -> 34"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofyear"], "Feature Type": ["Function"], "index": 392, "vector_txt": "392:Feature: DAYOFYEAR(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["EXTRACT(unit\n          FROM date)"], "Description": ["Extract part of a date", "\nEXTRACT(unit\n          FROM date)\n", "\n          The EXTRACT() function uses the\n          same kinds of unit specifiers as\n          DATE_ADD() or\n          DATE_SUB(), but extracts parts\n          from the date rather than performing date arithmetic. For\n          information on the unit argument,\n          see Temporal Intervals. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT EXTRACT(YEAR FROM '2019-07-02');\n        -> 2019\nmysql> SELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03');\n        -> 201907\nmysql> SELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03');\n        -> 20102\nmysql> SELECT EXTRACT(MICROSECOND\n    ->                FROM '2003-01-02 10:30:00.000123');\n        -> 123"], "Examples": ["mysql> SELECT EXTRACT(YEAR FROM '2019-07-02');\n        -> 2019\nmysql> SELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03');\n        -> 201907\nmysql> SELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03');\n        -> 20102\nmysql> SELECT EXTRACT(MICROSECOND\n    ->                FROM '2003-01-02 10:30:00.000123');\n        -> 123"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_extract"], "Feature Type": ["Function"], "index": 393, "vector_txt": "393:Feature: EXTRACT(unit\n          FROM date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["FROM_DAYS(N)"], "Description": ["Convert a day number to a date", "\nFROM_DAYS(N)\n", "\n          Given a day number N, returns a\n          DATE value. Returns\n          NULL if N is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT FROM_DAYS(730669);\n        -> '2000-07-03'", "\n          Use FROM_DAYS() with caution on\n          old dates. It is not intended for use with values that precede\n          the advent of the Gregorian calendar (1582). See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d.\n        "], "Examples": ["mysql> SELECT FROM_DAYS(730669);\n        -> '2000-07-03'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_from-days"], "Feature Type": ["Function"], "index": 394, "vector_txt": "394:Feature: FROM_DAYS(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["FROM_UNIXTIME(unix_timestamp[,format])"], "Description": ["Format Unix timestamp as a date", "\nFROM_UNIXTIME(unix_timestamp[,format])\n", "\n          Returns a representation of\n          unix_timestamp as a datetime or\n          character string value. The value returned is expressed using\n          the session time zone. (Clients can set the session time zone\n          as described in Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.)\n          unix_timestamp is an internal\n          timestamp value representing seconds since\n          '1970-01-01 00:00:00' UTC, such as produced\n          by the UNIX_TIMESTAMP()\n          function.\n        ", "\n          If format is omitted, this function\n          returns a DATETIME value.\n        ", "\n          If unix_timestamp or\n          format is NULL,\n          this function returns NULL.\n        ", "\n          If unix_timestamp is an integer,\n          the fractional seconds precision of the\n          DATETIME is zero. When\n          unix_timestamp is a decimal value,\n          the fractional seconds precision of the\n          DATETIME is the same as the precision of\n          the decimal value, up to a maximum of 6. When\n          unix_timestamp is a floating point\n          number, the fractional seconds precision of the datetime is 6.\n        ", "\n          On 32-bit platforms, the maximum useful value for\n          unix_timestamp is\n          2147483647.999999, which returns '2038-01-19\n          03:14:07.999999' UTC. On 64-bit platforms, the\n          effective maximum is 32536771199.999999, which returns\n          '3001-01-18 23:59:59.999999' UTC.\n          Regardless of platform or version, a greater value for\n          unix_timestamp than the effective\n          maximum returns 0.\n        ", "\nformat is used to format the result\n          in the same way as the format string used for the\n          DATE_FORMAT() function. If\n          format is supplied, the value\n          returned is a VARCHAR.\n        ", "Press CTRL+C to copy mysql> SELECT FROM_UNIXTIME(1447430881);\n        -> '2015-11-13 10:08:01'\nmysql> SELECT FROM_UNIXTIME(1447430881) + 0;\n        -> 20151113100801\nmysql> SELECT FROM_UNIXTIME(1447430881,\n    ->                      '%Y %D %M %h:%i:%s %x');\n        -> '2015 13th November 10:08:01 2015'", "\n\nNote\n\n\n            If you use UNIX_TIMESTAMP()\n            and FROM_UNIXTIME() to\n            convert between values in a non-UTC time zone and Unix\n            timestamp values, the conversion is lossy because the\n            mapping is not one-to-one in both directions. For details,\n            see the description of the\n            UNIX_TIMESTAMP() function.\n\n"], "Examples": ["mysql> SELECT FROM_UNIXTIME(1447430881);\n        -> '2015-11-13 10:08:01'\nmysql> SELECT FROM_UNIXTIME(1447430881) + 0;\n        -> 20151113100801\nmysql> SELECT FROM_UNIXTIME(1447430881,\n    ->                      '%Y %D %M %h:%i:%s %x');\n        -> '2015 13th November 10:08:01 2015'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_from-unixtime"], "Feature Type": ["Function"], "index": 395, "vector_txt": "395:Feature: FROM_UNIXTIME(unix_timestamp[,format])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["GET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})"], "Description": ["Return a date format string", "\nGET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})\n", "\n          Returns a format string. This function is useful in\n          combination with the\n          DATE_FORMAT() and the\n          STR_TO_DATE() functions.\n        ", "\n          If format is\n          NULL, this function returns\n          NULL.\n        ", "\n          The possible values for the first and second arguments result\n          in several possible format strings (for the specifiers used,\n          see the table in the\n          DATE_FORMAT() function\n          description). ISO format refers to ISO 9075, not ISO 8601.\n", "\n\nFunction Call\nResult\n\nGET_FORMAT(DATE,'USA')\n'%m.%d.%Y'\n\nGET_FORMAT(DATE,'JIS')\n'%Y-%m-%d'\n\nGET_FORMAT(DATE,'ISO')\n'%Y-%m-%d'\n\nGET_FORMAT(DATE,'EUR')\n'%d.%m.%Y'\n\nGET_FORMAT(DATE,'INTERNAL')\n'%Y%m%d'\n\nGET_FORMAT(DATETIME,'USA')\n'%Y-%m-%d %H.%i.%s'\n\nGET_FORMAT(DATETIME,'JIS')\n'%Y-%m-%d %H:%i:%s'\n\nGET_FORMAT(DATETIME,'ISO')\n'%Y-%m-%d %H:%i:%s'\n\nGET_FORMAT(DATETIME,'EUR')\n'%Y-%m-%d %H.%i.%s'\n\nGET_FORMAT(DATETIME,'INTERNAL')\n'%Y%m%d%H%i%s'\n\nGET_FORMAT(TIME,'USA')\n'%h:%i:%s %p'\n\nGET_FORMAT(TIME,'JIS')\n'%H:%i:%s'\n\nGET_FORMAT(TIME,'ISO')\n'%H:%i:%s'\n\nGET_FORMAT(TIME,'EUR')\n'%H.%i.%s'\n\nGET_FORMAT(TIME,'INTERNAL')\n'%H%i%s'\n\n", "\nFunction Call\nResult\n", "\nTIMESTAMP can also be used as\n          the first argument to\n          GET_FORMAT(), in which case the\n          function returns the same values as for\n          DATETIME.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n        -> '03.10.2003'\nmysql> SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n        -> '2003-10-31'"], "Examples": ["mysql> SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n        -> '03.10.2003'\nmysql> SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n        -> '2003-10-31'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_get-format"], "Feature Type": ["Function"], "index": 396, "vector_txt": "396:Feature: GET_FORMAT({DATE|TIME|DATETIME},\n          {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["HOUR(time)"], "Description": ["Extract the hour", "\nHOUR(time)\n", "\n          Returns the hour for time. The\n          range of the return value is 0 to\n          23 for time-of-day values. However, the\n          range of TIME values actually\n          is much larger, so HOUR can return values\n          greater than 23. Returns\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT HOUR('10:05:03');\n        -> 10\nmysql> SELECT HOUR('272:59:59');\n        -> 272"], "Examples": ["mysql> SELECT HOUR('10:05:03');\n        -> 10\nmysql> SELECT HOUR('272:59:59');\n        -> 272"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_hour"], "Feature Type": ["Function"], "index": 397, "vector_txt": "397:Feature: HOUR(time)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["LOCALTIME"], "Description": ["Synonym for NOW()", "\nLOCALTIME,\n          LOCALTIME([fsp])\n", "\nLOCALTIME and\n          LOCALTIME() are synonyms for\n          NOW().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_localtime"], "Feature Type": ["Function"], "index": 398, "vector_txt": "398:Feature: LOCALTIME\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["CAN_ACCESS_COLUMN(ARGS)"], "Description": ["Internal use only", "\nCAN_ACCESS_COLUMN(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-column"], "Feature Type": ["Function"], "index": 399, "vector_txt": "399:Feature: CAN_ACCESS_COLUMN(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["LOCALTIMESTAMP"], "Description": ["Synonym for NOW()", "\nLOCALTIMESTAMP,\n          LOCALTIMESTAMP([fsp])\n", "\nLOCALTIMESTAMP and\n          LOCALTIMESTAMP() are synonyms\n          for NOW().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_localtimestamp"], "Feature Type": ["Function"], "index": 400, "vector_txt": "400:Feature: LOCALTIMESTAMP\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MAKEDATE(year,dayofyear)"], "Description": ["Create a date from the year and day of year", "\nMAKEDATE(year,dayofyear)\n", "\n          Returns a date, given year and day-of-year values.\n          dayofyear must be greater than 0 or\n          the result is NULL. The result is also\n          NULL if either argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n        -> '2011-01-31', '2011-02-01'\nmysql> SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n        -> '2011-12-31', '2014-12-31'\nmysql> SELECT MAKEDATE(2011,0);\n        -> NULL"], "Examples": ["mysql> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n        -> '2011-01-31', '2011-02-01'\nmysql> SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n        -> '2011-12-31', '2014-12-31'\nmysql> SELECT MAKEDATE(2011,0);\n        -> NULL"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_makedate"], "Feature Type": ["Function"], "index": 401, "vector_txt": "401:Feature: MAKEDATE(year,dayofyear)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MAKETIME(hour,minute,second)"], "Description": ["Create time from hour, minute, second", "\nMAKETIME(hour,minute,second)\n", "\n          Returns a time value calculated from the\n          hour,\n          minute, and\n          second arguments. Returns\n          NULL if any of its arguments are\n          NULL.\n        ", "\n          The second argument can have a\n          fractional part.\n        ", "Press CTRL+C to copy mysql> SELECT MAKETIME(12,15,30);\n        -> '12:15:30'"], "Examples": ["mysql> SELECT MAKETIME(12,15,30);\n        -> '12:15:30'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_maketime"], "Feature Type": ["Function"], "index": 402, "vector_txt": "402:Feature: MAKETIME(hour,minute,second)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MICROSECOND(expr)"], "Description": ["Return the microseconds from argument", "\nMICROSECOND(expr)\n", "\n          Returns the microseconds from the time or datetime expression\n          expr as a number in the range from\n          0 to 999999. Returns\n          NULL if expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MICROSECOND('12:00:00.123456');\n        -> 123456\nmysql> SELECT MICROSECOND('2019-12-31 23:59:59.000010');\n        -> 10"], "Examples": ["mysql> SELECT MICROSECOND('12:00:00.123456');\n        -> 123456\nmysql> SELECT MICROSECOND('2019-12-31 23:59:59.000010');\n        -> 10"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_microsecond"], "Feature Type": ["Function"], "index": 403, "vector_txt": "403:Feature: MICROSECOND(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MINUTE(time)"], "Description": ["Return the minute from the argument", "\nMINUTE(time)\n", "\n          Returns the minute for time, in the\n          range 0 to 59, or\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MINUTE('2008-02-03 10:05:03');\n        -> 5"], "Examples": ["mysql> SELECT MINUTE('2008-02-03 10:05:03');\n        -> 5"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_minute"], "Feature Type": ["Function"], "index": 404, "vector_txt": "404:Feature: MINUTE(time)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MONTH(date)"], "Description": ["Return the month from the date passed", "\nMONTH(date)\n", "\n          Returns the month for date, in the\n          range 1 to 12 for\n          January to December, or 0 for dates such as\n          '0000-00-00' or\n          '2008-00-00' that have a zero month part.\n          Returns NULL if\n          date is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MONTH('2008-02-03');\n        -> 2"], "Examples": ["mysql> SELECT MONTH('2008-02-03');\n        -> 2"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_month"], "Feature Type": ["Function"], "index": 405, "vector_txt": "405:Feature: MONTH(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["MONTHNAME(date)"], "Description": ["Return the name of the month", "\nMONTHNAME(date)\n", "\n          Returns the full name of the month for\n          date. The language used for the\n          name is controlled by the value of the\n          lc_time_names system variable\n          (Section\u00a012.16, \u201cMySQL Server Locale Support\u201d). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT MONTHNAME('2008-02-03');\n        -> 'February'"], "Examples": ["mysql> SELECT MONTHNAME('2008-02-03');\n        -> 'February'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_monthname"], "Feature Type": ["Function"], "index": 406, "vector_txt": "406:Feature: MONTHNAME(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["NOW([fsp])"], "Description": ["Return the current date and time", "\nNOW([fsp])\n", "\n          Returns the current date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context. The\n          value is expressed in the session time zone.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT NOW();\n        -> '2007-12-15 23:50:26'\nmysql> SELECT NOW() + 0;\n        -> 20071215235026.000000", "\nNOW() returns a constant time\n          that indicates the time at which the statement began to\n          execute. (Within a stored function or trigger,\n          NOW() returns the time at which\n          the function or triggering statement began to execute.) This\n          differs from the behavior for\n          SYSDATE(), which returns the\n          exact time at which it executes.\n        ", "Press CTRL+C to copy mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+", "\n          In addition, the SET TIMESTAMP statement\n          affects the value returned by\n          NOW() but not by\n          SYSDATE(). This means that\n          timestamp settings in the binary log have no effect on\n          invocations of SYSDATE().\n          Setting the timestamp to a nonzero value causes each\n          subsequent invocation of NOW()\n          to return that value. Setting the timestamp to zero cancels\n          this effect so that NOW() once\n          again returns the current date and time.\n        ", "\n          See the description for\n          SYSDATE() for additional\n          information about the differences between the two functions.\n        "], "Examples": ["mysql> SELECT NOW();\n        -> '2007-12-15 23:50:26'\nmysql> SELECT NOW() + 0;\n        -> 20071215235026.000000", "mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_now"], "Feature Type": ["Function"], "index": 407, "vector_txt": "407:Feature: NOW([fsp])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["PERIOD_ADD(P,N)"], "Description": ["Add a period to a year-month", "\nPERIOD_ADD(P,N)\n", "\n          Adds N months to period\n          P (in the format\n          YYMM or\n          YYYYMM). Returns a value in the\n          format YYYYMM.\n", "\n\nNote\n\n\n            The period argument P is\n            not a date value.\n\n", "\n          This function returns NULL if\n          P or N\n          is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT PERIOD_ADD(200801,2);\n        -> 200803"], "Examples": ["mysql> SELECT PERIOD_ADD(200801,2);\n        -> 200803"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_period-add"], "Feature Type": ["Function"], "index": 408, "vector_txt": "408:Feature: PERIOD_ADD(P,N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["PERIOD_DIFF(P1,P2)"], "Description": ["Return the number of months between periods", "\nPERIOD_DIFF(P1,P2)\n", "\n          Returns the number of months between periods\n          P1 and\n          P2. P1\n          and P2 should be in the format\n          YYMM or\n          YYYYMM. Note that the period\n          arguments P1 and\n          P2 are not\n          date values.\n        ", "\n          This function returns NULL if\n          P1 or P2\n          is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT PERIOD_DIFF(200802,200703);\n        -> 11"], "Examples": ["mysql> SELECT PERIOD_DIFF(200802,200703);\n        -> 11"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_period-diff"], "Feature Type": ["Function"], "index": 409, "vector_txt": "409:Feature: PERIOD_DIFF(P1,P2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["CAN_ACCESS_DATABASE(ARGS)"], "Description": ["Internal use only", "\nCAN_ACCESS_DATABASE(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-database"], "Feature Type": ["Function"], "index": 410, "vector_txt": "410:Feature: CAN_ACCESS_DATABASE(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["QUARTER(date)"], "Description": ["Return the quarter from a date argument", "\nQUARTER(date)\n", "\n          Returns the quarter of the year for\n          date, in the range\n          1 to 4, or\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT QUARTER('2008-04-01');\n        -> 2"], "Examples": ["mysql> SELECT QUARTER('2008-04-01');\n        -> 2"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_quarter"], "Feature Type": ["Function"], "index": 411, "vector_txt": "411:Feature: QUARTER(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["SEC_TO_TIME(seconds)"], "Description": ["Converts seconds to 'hh:mm:ss' format", "\nSEC_TO_TIME(seconds)\n", "\n          Returns the seconds argument,\n          converted to hours, minutes, and seconds, as a\n          TIME value. The range of the\n          result is constrained to that of the\n          TIME data type. A warning\n          occurs if the argument corresponds to a value outside that\n          range.\n        ", "\n          The function returns NULL if\n          seconds is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT SEC_TO_TIME(2378);\n        -> '00:39:38'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n        -> 3938"], "Examples": ["mysql> SELECT SEC_TO_TIME(2378);\n        -> '00:39:38'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n        -> 3938"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_sec-to-time"], "Feature Type": ["Function"], "index": 412, "vector_txt": "412:Feature: SEC_TO_TIME(seconds)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["SECOND(time)"], "Description": ["Return the second (0-59)", "\nSECOND(time)\n", "\n          Returns the second for time, in the\n          range 0 to 59, or\n          NULL if time is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT SECOND('10:05:03');\n        -> 3"], "Examples": ["mysql> SELECT SECOND('10:05:03');\n        -> 3"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_second"], "Feature Type": ["Function"], "index": 413, "vector_txt": "413:Feature: SECOND(time)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["STR_TO_DATE(str,format)"], "Description": ["Convert a string to a date", "\nSTR_TO_DATE(str,format)\n", "\n          This is the inverse of the\n          DATE_FORMAT() function. It\n          takes a string str and a format\n          string format.\n          STR_TO_DATE() returns a\n          DATETIME value if the format\n          string contains both date and time parts, or a\n          DATE or\n          TIME value if the string\n          contains only date or time parts. If\n          str or\n          format is NULL,\n          the function returns NULL. If the date,\n          time, or datetime value extracted from\n          str cannot be parsed according to\n          the rules followed by the server,\n          STR_TO_DATE() returns\n          NULL and produces a warning.\n        ", "\n          The server scans str attempting to\n          match format to it. The format\n          string can contain literal characters and format specifiers\n          beginning with %. Literal characters in\n          format must match literally in\n          str. Format specifiers in\n          format must match a date or time\n          part in str. For the specifiers\n          that can be used in format, see the\n          DATE_FORMAT() function\n          description.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');\n        -> '2013-05-01'\nmysql> SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');\n        -> '2013-05-01'", "\n          Scanning starts at the beginning of\n          str and fails if\n          format is found not to match. Extra\n          characters at the end of str are\n          ignored.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');\n        -> '09:30:17'\nmysql> SELECT STR_TO_DATE('a09:30:17','%h:%i:%s');\n        -> NULL\nmysql> SELECT STR_TO_DATE('09:30:17a','%h:%i:%s');\n        -> '09:30:17'", "\n          Unspecified date or time parts have a value of 0, so\n          incompletely specified values in\n          str produce a result with some or\n          all parts set to 0:\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('abc','abc');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('9','%m');\n        -> '0000-09-00'\nmysql> SELECT STR_TO_DATE('9','%s');\n        -> '00:00:09'", "\n          Range checking on the parts of date values is as described in\n          Section\u00a013.2.2, \u201cThe DATE, DATETIME, and TIMESTAMP Types\u201d. This means, for example, that\n          \u201czero\u201d dates or dates with part values of 0 are\n          permitted unless the SQL mode is set to disallow such values.\n        ", "Press CTRL+C to copy mysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');\n        -> '2004-04-31'", "\n          If the NO_ZERO_DATE SQL mode\n          is enabled, zero dates are disallowed. In that case,\n          STR_TO_DATE() returns\n          NULL and generates a warning:\n        ", "Press CTRL+C to copy mysql> SET sql_mode = '';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| 0000-00-00                            |\n+---------------------------------------+\nmysql> SET sql_mode = 'NO_ZERO_DATE';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| NULL                                  |\n+---------------------------------------+\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1411\nMessage: Incorrect datetime value: '00/00/0000' for function str_to_date", "\n          In some previous versions of MySQL, it was possible to pass an\n          invalid date string such as '2021-11-31' to\n          this function. In MySQL 8.4,\n          STR_TO_DATE() performs complete range\n          checking and raises an error if the date after conversion\n          would be invalid.\n", "\n\nNote\n\n\n            You cannot use format \"%X%V\" to convert a\n            year-week string to a date because the combination of a year\n            and week does not uniquely identify a year and month if the\n            week crosses a month boundary. To convert a year-week to a\n            date, you should also specify the weekday:\n          Press CTRL+C to copy mysql> SELECT STR_TO_DATE('200442 Monday', '%X%V %W');\n        -> '2004-10-18'\n", "\n          You should also be aware that, for dates and the date portions\n          of datetime values, STR_TO_DATE() checks\n          (only) the individual year, month, and day of month values for\n          validity. More precisely, this means that the year is checked\n          to be sure that it is in the range 0-9999 inclusive, the month\n          is checked to ensure that it is in the range 1-12 inclusive,\n          and the day of month is checked to make sure that it is in the\n          range 1-31 inclusive, but the server does not check the values\n          in combination. For example, SELECT\n          STR_TO_DATE('23-2-31', '%Y-%m-%d') returns\n          2023-02-31. Enabling or disabling the\n          ALLOW_INVALID_DATES server\n          SQL mode has no effect on this behavior. See\n          Section\u00a013.2.2, \u201cThe DATE, DATETIME, and TIMESTAMP Types\u201d, for more information.\n        "], "Examples": ["mysql> SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');\n        -> '2013-05-01'\nmysql> SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');\n        -> '2013-05-01'", "mysql> SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');\n        -> '09:30:17'\nmysql> SELECT STR_TO_DATE('a09:30:17','%h:%i:%s');\n        -> NULL\nmysql> SELECT STR_TO_DATE('09:30:17a','%h:%i:%s');\n        -> '09:30:17'", "mysql> SELECT STR_TO_DATE('abc','abc');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('9','%m');\n        -> '0000-09-00'\nmysql> SELECT STR_TO_DATE('9','%s');\n        -> '00:00:09'", "mysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n        -> '0000-00-00'\nmysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');\n        -> '2004-04-31'", "mysql> SET sql_mode = '';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| 0000-00-00                            |\n+---------------------------------------+\nmysql> SET sql_mode = 'NO_ZERO_DATE';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| NULL                                  |\n+---------------------------------------+\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1411\nMessage: Incorrect datetime value: '00/00/0000' for function str_to_date", "mysql> SELECT STR_TO_DATE('200442 Monday', '%X%V %W');\n        -> '2004-10-18'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_str-to-date"], "Feature Type": ["Function"], "index": 414, "vector_txt": "414:Feature: STR_TO_DATE(str,format)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["SUBDATE(date,INTERVAL\n          expr\nunit)"], "Description": ["Synonym for DATE_SUB() when invoked with three arguments", "\nSUBDATE(date,INTERVAL\n          expr\nunit),\n          SUBDATE(expr,days)\n", "\n          When invoked with the INTERVAL form of the\n          second argument, SUBDATE() is a\n          synonym for DATE_SUB(). For\n          information on the INTERVAL\nunit argument, see the discussion\n          for DATE_ADD().\n        ", "Press CTRL+C to copy mysql> SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'\nmysql> SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'", "\n          The second form enables the use of an integer value for\n          days. In such cases, it is\n          interpreted as the number of days to be subtracted from the\n          date or datetime expression expr.\n        ", "Press CTRL+C to copy mysql> SELECT SUBDATE('2008-01-02 12:00:00', 31);\n        -> '2007-12-02 12:00:00'", "\n          This function returns NULL if any of its\n          arguments are NULL.\n        "], "Examples": ["mysql> SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'\nmysql> SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n        -> '2007-12-02'", "mysql> SELECT SUBDATE('2008-01-02 12:00:00', 31);\n        -> '2007-12-02 12:00:00'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_subdate"], "Feature Type": ["Function"], "index": 415, "vector_txt": "415:Feature: SUBDATE(date,INTERVAL\n          expr\nunit)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["SUBTIME(expr1,expr2)"], "Description": ["Subtract times", "\nSUBTIME(expr1,expr2)\n", "\nSUBTIME() returns\n          expr1 \u2212\n          expr2 expressed as a value in the\n          same format as expr1.\n          expr1 is a time or datetime\n          expression, and expr2 is a time\n          expression.\n        ", "\n          Resolution of this function's return type is performed as\n          it is for the ADDTIME()\n          function; see the description of that function for more\n          information.\n        ", "Press CTRL+C to copy mysql> SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n        -> '2007-12-30 22:58:58.999997'\nmysql> SELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n        -> '-00:59:59.999999'", "\n          This function returns NULL if\n          expr1 or\n          expr2 is NULL.\n        "], "Examples": ["mysql> SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n        -> '2007-12-30 22:58:58.999997'\nmysql> SELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n        -> '-00:59:59.999999'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_subtime"], "Feature Type": ["Function"], "index": 416, "vector_txt": "416:Feature: SUBTIME(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["SYSDATE([fsp])"], "Description": ["Return the time at which the function executes", "\nSYSDATE([fsp])\n", "\n          Returns the current date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "\nSYSDATE() returns the time at\n          which it executes. This differs from the behavior for\n          NOW(), which returns a constant\n          time that indicates the time at which the statement began to\n          execute. (Within a stored function or trigger,\n          NOW() returns the time at which\n          the function or triggering statement began to execute.)\n        ", "Press CTRL+C to copy mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+", "\n          In addition, the SET TIMESTAMP statement\n          affects the value returned by\n          NOW() but not by\n          SYSDATE(). This means that\n          timestamp settings in the binary log have no effect on\n          invocations of SYSDATE().\n        ", "\n          Because SYSDATE() can return\n          different values even within the same statement, and is not\n          affected by SET TIMESTAMP, it is\n          nondeterministic and therefore unsafe for replication if\n          statement-based binary logging is used. If that is a problem,\n          you can use row-based logging.\n        ", "\n          Alternatively, you can use the\n          --sysdate-is-now option to\n          cause SYSDATE() to be an alias\n          for NOW(). This works if the\n          option is used on both the replication source server and the\n          replica.\n        ", "\n          The nondeterministic nature of\n          SYSDATE() also means that\n          indexes cannot be used for evaluating expressions that refer\n          to it.\n        "], "Examples": ["mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_sysdate"], "Feature Type": ["Function"], "index": 417, "vector_txt": "417:Feature: SYSDATE([fsp])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIME(expr)"], "Description": ["Extract the time portion of the expression passed", "\nTIME(expr)\n", "\n          Extracts the time part of the time or datetime expression\n          expr and returns it as a string.\n          Returns NULL if\n          expr is NULL.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        ", "Press CTRL+C to copy mysql> SELECT TIME('2003-12-31 01:02:03');\n        -> '01:02:03'\nmysql> SELECT TIME('2003-12-31 01:02:03.000123');\n        -> '01:02:03.000123'"], "Examples": ["mysql> SELECT TIME('2003-12-31 01:02:03');\n        -> '01:02:03'\nmysql> SELECT TIME('2003-12-31 01:02:03.000123');\n        -> '01:02:03.000123'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time"], "Feature Type": ["Function"], "index": 418, "vector_txt": "418:Feature: TIME(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIME_FORMAT(time,format)"], "Description": ["Format as time", "\nTIME_FORMAT(time,format)\n", "\n          This is used like the\n          DATE_FORMAT() function, but the\n          format string may contain format\n          specifiers only for hours, minutes, seconds, and microseconds.\n          Other specifiers produce a NULL or\n          0. TIME_FORMAT() returns\n          NULL if time or\n          format is NULL.\n        ", "\n          If the time value contains an hour\n          part that is greater than 23, the\n          %H and %k hour format\n          specifiers produce a value larger than the usual range of\n          0..23. The other hour format specifiers\n          produce the hour value modulo 12.\n        ", "Press CTRL+C to copy mysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n        -> '100 100 04 04 4'"], "Examples": ["mysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n        -> '100 100 04 04 4'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time-format"], "Feature Type": ["Function"], "index": 419, "vector_txt": "419:Feature: TIME_FORMAT(time,format)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIME_TO_SEC(time)"], "Description": ["Return the argument converted to seconds", "\nTIME_TO_SEC(time)\n", "\n          Returns the time argument,\n          converted to seconds. Returns NULL if\n          time is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIME_TO_SEC('22:23:00');\n        -> 80580\nmysql> SELECT TIME_TO_SEC('00:39:38');\n        -> 2378"], "Examples": ["mysql> SELECT TIME_TO_SEC('22:23:00');\n        -> 80580\nmysql> SELECT TIME_TO_SEC('00:39:38');\n        -> 2378"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time-to-sec"], "Feature Type": ["Function"], "index": 420, "vector_txt": "420:Feature: TIME_TO_SEC(time)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["CAN_ACCESS_TABLE(ARGS)"], "Description": ["Internal use only", "\nCAN_ACCESS_TABLE(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-table"], "Feature Type": ["Function"], "index": 421, "vector_txt": "421:Feature: CAN_ACCESS_TABLE(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIMEDIFF(expr1,expr2)"], "Description": ["Subtract time", "\nTIMEDIFF(expr1,expr2)\n", "\nTIMEDIFF() returns\n          expr1 \u2212\n          expr2 expressed as a time value.\n          expr1 and\n          expr2 are strings which are\n          converted to TIME or\n          DATETIME expressions; these must be of the\n          same type following conversion. Returns\n          NULL if expr1 or\n          expr2 is NULL.\n        ", "\n          The result returned by TIMEDIFF() is\n          limited to the range allowed for\n          TIME values. Alternatively, you\n          can use either of the functions\n          TIMESTAMPDIFF() and\n          UNIX_TIMESTAMP(), both of which\n          return integers.\n        ", "Press CTRL+C to copy mysql> SELECT TIMEDIFF('2000-01-01 00:00:00',\n    ->                 '2000-01-01 00:00:00.000001');\n        -> '-00:00:00.000001'\nmysql> SELECT TIMEDIFF('2008-12-31 23:59:59.000001',\n    ->                 '2008-12-30 01:01:01.000002');\n        -> '46:58:57.999999'"], "Examples": ["mysql> SELECT TIMEDIFF('2000-01-01 00:00:00',\n    ->                 '2000-01-01 00:00:00.000001');\n        -> '-00:00:00.000001'\nmysql> SELECT TIMEDIFF('2008-12-31 23:59:59.000001',\n    ->                 '2008-12-30 01:01:01.000002');\n        -> '46:58:57.999999'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timediff"], "Feature Type": ["Function"], "index": 422, "vector_txt": "422:Feature: TIMEDIFF(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIMESTAMP(expr)"], "Description": ["With a single argument, this function returns the date or datetime", "\nTIMESTAMP(expr),\n          TIMESTAMP(expr1,expr2)\n", "\n          With a single argument, this function returns the date or\n          datetime expression expr as a\n          datetime value. With two arguments, it adds the time\n          expression expr2 to the date or\n          datetime expression expr1 and\n          returns the result as a datetime value. Returns\n          NULL if expr,\n          expr1, or\n          expr2 is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMP('2003-12-31');\n        -> '2003-12-31 00:00:00'\nmysql> SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');\n        -> '2004-01-01 00:00:00'"], "Examples": ["mysql> SELECT TIMESTAMP('2003-12-31');\n        -> '2003-12-31 00:00:00'\nmysql> SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');\n        -> '2004-01-01 00:00:00'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestamp"], "Feature Type": ["Function"], "index": 423, "vector_txt": "423:Feature: TIMESTAMP(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIMESTAMPADD(unit,interval,datetime_expr)"], "Description": ["Add an interval to a datetime expression", "\nTIMESTAMPADD(unit,interval,datetime_expr)\n", "\n          Adds the integer expression\n          interval to the date or datetime\n          expression datetime_expr. The unit\n          for interval is given by the\n          unit argument, which should be one\n          of the following values: MICROSECOND\n          (microseconds), SECOND,\n          MINUTE, HOUR,\n          DAY, WEEK,\n          MONTH, QUARTER, or\n          YEAR.\n        ", "\n          The unit value may be specified\n          using one of keywords as shown, or with a prefix of\n          SQL_TSI_. For example,\n          DAY and SQL_TSI_DAY both\n          are legal.\n        ", "\n          This function returns NULL if\n          interval or\n          datetime_expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02');\n        -> '2003-01-02 00:01:00'\nmysql> SELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n        -> '2003-01-09'", "\n          When adding a MONTH interval to a\n          DATE or DATETIME value,\n          and the resulting date includes a day that does not exist in\n          the given month, the day is adjusted to the last day of the\n          month, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPADD(MONTH, 1, DATE '2024-03-30') AS t1, \n     >        TIMESTAMPADD(MONTH, 1, DATE '2024-03-31') AS t2;\n+------------+------------+\n| t1         | t2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02');\n        -> '2003-01-02 00:01:00'\nmysql> SELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n        -> '2003-01-09'", "mysql> SELECT TIMESTAMPADD(MONTH, 1, DATE '2024-03-30') AS t1, \n     >        TIMESTAMPADD(MONTH, 1, DATE '2024-03-31') AS t2;\n+------------+------------+\n| t1         | t2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestampadd"], "Feature Type": ["Function"], "index": 424, "vector_txt": "424:Feature: TIMESTAMPADD(unit,interval,datetime_expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)"], "Description": ["Return the difference of two datetime expressions, using the units", "\nTIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n", "\n          Returns datetime_expr2 \u2212\n          datetime_expr1, where\n          datetime_expr1 and\n          datetime_expr2 are date or datetime\n          expressions. One expression may be a date and the other a\n          datetime; a date value is treated as a datetime having the\n          time part '00:00:00' where necessary. The\n          unit for the result (an integer) is given by the\n          unit argument. The legal values for\n          unit are the same as those listed\n          in the description of the\n          TIMESTAMPADD() function.\n        ", "\n          This function returns NULL if\n          datetime_expr1 or\n          datetime_expr2 is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n        -> 3\nmysql> SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n        -> -1\nmysql> SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n        -> 128885", "\n\nNote\n\n\n            The order of the date or datetime arguments for this\n            function is the opposite of that used with the\n            TIMESTAMP() function when\n            invoked with 2 arguments.\n\n"], "Examples": ["mysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n        -> 3\nmysql> SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n        -> -1\nmysql> SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n        -> 128885"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestampdiff"], "Feature Type": ["Function"], "index": 425, "vector_txt": "425:Feature: TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TO_DAYS(date)"], "Description": ["Return the date argument converted to days", "\nTO_DAYS(date)\n", "\n          Given a date date, returns a day\n          number (the number of days since year 0). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS(950501);\n        -> 728779\nmysql> SELECT TO_DAYS('2007-10-07');\n        -> 733321", "\nTO_DAYS() is not intended for\n          use with values that precede the advent of the Gregorian\n          calendar (1582), because it does not take into account the\n          days that were lost when the calendar was changed. For dates\n          before 1582 (and possibly a later year in other locales),\n          results from this function are not reliable. See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d, for details.\n        ", "\n          Remember that MySQL converts two-digit year values in dates to\n          four-digit form using the rules in\n          Section\u00a013.2, \u201cDate and Time Data Types\u201d. For example,\n          '2008-10-07' and\n          '08-10-07' are seen as identical dates:\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS('2008-10-07'), TO_DAYS('08-10-07');\n        -> 733687, 733687", "\n          In MySQL, the zero date is defined as\n          '0000-00-00', even though this date is\n          itself considered invalid. This means that, for\n          '0000-00-00' and\n          '0000-01-01',\n          TO_DAYS() returns the values\n          shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TO_DAYS('0000-00-00');\n+-----------------------+\n| to_days('0000-00-00') |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| to_days('0000-01-01') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n1 row in set (0.00 sec)", "\n          This is true whether or not the\n          ALLOW_INVALID_DATES SQL\n          server mode is enabled.\n        "], "Examples": ["mysql> SELECT TO_DAYS(950501);\n        -> 728779\nmysql> SELECT TO_DAYS('2007-10-07');\n        -> 733321", "mysql> SELECT TO_DAYS('2008-10-07'), TO_DAYS('08-10-07');\n        -> 733687, 733687", "mysql> SELECT TO_DAYS('0000-00-00');\n+-----------------------+\n| to_days('0000-00-00') |\n+-----------------------+\n|                  NULL |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| to_days('0000-01-01') |\n+-----------------------+\n|                     1 |\n+-----------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_to-days"], "Feature Type": ["Function"], "index": 426, "vector_txt": "426:Feature: TO_DAYS(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["TO_SECONDS(expr)"], "Description": ["Return the date or datetime argument converted to seconds since", "\nTO_SECONDS(expr)\n", "\n          Given a date or datetime expr,\n          returns the number of seconds since the year 0. If\n          expr is not a valid date or\n          datetime value (including NULL), it returns\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT TO_SECONDS(950501);\n        -> 62966505600\nmysql> SELECT TO_SECONDS('2009-11-29');\n        -> 63426672000\nmysql> SELECT TO_SECONDS('2009-11-29 13:43:32');\n        -> 63426721412\nmysql> SELECT TO_SECONDS( NOW() );\n        -> 63426721458", "\n          Like TO_DAYS(),\n          TO_SECONDS() is not intended for use with\n          values that precede the advent of the Gregorian calendar\n          (1582), because it does not take into account the days that\n          were lost when the calendar was changed. For dates before 1582\n          (and possibly a later year in other locales), results from\n          this function are not reliable. See\n          Section\u00a013.2.7, \u201cWhat Calendar Is Used By MySQL?\u201d, for details.\n        ", "\n          Like TO_DAYS(),\n          TO_SECONDS(), converts two-digit year\n          values in dates to four-digit form using the rules in\n          Section\u00a013.2, \u201cDate and Time Data Types\u201d.\n        ", "\n          In MySQL, the zero date is defined as\n          '0000-00-00', even though this date is\n          itself considered invalid. This means that, for\n          '0000-00-00' and\n          '0000-01-01',\n          TO_SECONDS() returns the values\n          shown here:\n        ", "Press CTRL+C to copy mysql> SELECT TO_SECONDS('0000-00-00');\n+--------------------------+\n| TO_SECONDS('0000-00-00') |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_SECONDS('0000-01-01');\n+--------------------------+\n| TO_SECONDS('0000-01-01') |\n+--------------------------+\n|                    86400 |\n+--------------------------+\n1 row in set (0.00 sec)", "\n          This is true whether or not the\n          ALLOW_INVALID_DATES SQL\n          server mode is enabled.\n        "], "Examples": ["mysql> SELECT TO_SECONDS(950501);\n        -> 62966505600\nmysql> SELECT TO_SECONDS('2009-11-29');\n        -> 63426672000\nmysql> SELECT TO_SECONDS('2009-11-29 13:43:32');\n        -> 63426721412\nmysql> SELECT TO_SECONDS( NOW() );\n        -> 63426721458", "mysql> SELECT TO_SECONDS('0000-00-00');\n+--------------------------+\n| TO_SECONDS('0000-00-00') |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\n\nmysql> SELECT TO_SECONDS('0000-01-01');\n+--------------------------+\n| TO_SECONDS('0000-01-01') |\n+--------------------------+\n|                    86400 |\n+--------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_to-seconds"], "Feature Type": ["Function"], "index": 427, "vector_txt": "427:Feature: TO_SECONDS(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["UNIX_TIMESTAMP([date])"], "Description": ["Return a Unix timestamp", "\nUNIX_TIMESTAMP([date])\n", "\n          If UNIX_TIMESTAMP() is called\n          with no date argument, it returns a\n          Unix timestamp representing seconds since '1970-01-01\n          00:00:00' UTC.\n        ", "\n          If UNIX_TIMESTAMP() is called\n          with a date argument, it returns\n          the value of the argument as seconds since\n          '1970-01-01 00:00:00' UTC. The server\n          interprets date as a value in the\n          session time zone and converts it to an internal Unix\n          timestamp value in UTC. (Clients can set the session time zone\n          as described in Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.) The\n          date argument may be a\n          DATE,\n          DATETIME, or\n          TIMESTAMP string, or a number\n          in YYMMDD,\n          YYMMDDhhmmss,\n          YYYYMMDD, or\n          YYYYMMDDhhmmss format. If the\n          argument includes a time part, it may optionally include a\n          fractional seconds part.\n        ", "\n          The return value is an integer if no argument is given or the\n          argument does not include a fractional seconds part, or\n          DECIMAL if an argument is given\n          that includes a fractional seconds part.\n        ", "\n          When the date argument is a\n          TIMESTAMP column,\n          UNIX_TIMESTAMP() returns the\n          internal timestamp value directly, with no implicit\n          \u201cstring-to-Unix-timestamp\u201d conversion.\n        ", "\n          The valid range of argument values is the same as for the\n          TIMESTAMP data type:\n          '1970-01-01 00:00:01.000000' UTC to\n          '2038-01-19 03:14:07.999999' UTC for 32-bit\n          platforms; for MySQL running on 64-bit platforms, the valid\n          range of argument values for\n          UNIX_TIMESTAMP() is '1970-01-01\n          00:00:01.000000' UTC to '3001-01-19\n          03:14:07.999999' UTC (corresponding to\n          32536771199.999999 seconds).\n        ", "\n          Regardless of MySQL version or platform architecture, if you\n          pass an out-of-range date to\n          UNIX_TIMESTAMP(), it returns\n          0. If date is\n          NULL, it returns NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNIX_TIMESTAMP();\n        -> 1447431666\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');\n        -> 1447431619\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');\n        -> 1447431619.012", "\n          If you use UNIX_TIMESTAMP() and\n          FROM_UNIXTIME() to convert\n          between values in a non-UTC time zone and Unix timestamp\n          values, the conversion is lossy because the mapping is not\n          one-to-one in both directions. For example, due to conventions\n          for local time zone changes such as Daylight Saving Time\n          (DST), it is possible for\n          UNIX_TIMESTAMP() to map two\n          values that are distinct in a non-UTC time zone to the same\n          Unix timestamp value.\n          FROM_UNIXTIME() maps that value\n          back to only one of the original values. Here is an example,\n          using values that are distinct in the MET\n          time zone:\n        ", "Press CTRL+C to copy mysql> SET time_zone = 'MET';\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 03:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 03:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 02:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 02:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT FROM_UNIXTIME(1111885200);\n+---------------------------+\n| FROM_UNIXTIME(1111885200) |\n+---------------------------+\n| 2005-03-27 03:00:00       |\n+---------------------------+", "\n\nNote\n\n\n            To use named time zones such as 'MET' or\n            'Europe/Amsterdam', the time zone tables\n            must be properly set up. For instructions, see\n            Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.\n\n", "\n          If you want to subtract\n          UNIX_TIMESTAMP() columns, you\n          might want to cast them to signed integers. See\n          Section\u00a014.10, \u201cCast Functions and Operators\u201d.\n        "], "Examples": ["mysql> SELECT UNIX_TIMESTAMP();\n        -> 1447431666\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');\n        -> 1447431619\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');\n        -> 1447431619.012", "mysql> SET time_zone = 'MET';\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 03:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 03:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 02:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 02:00:00') |\n+---------------------------------------+\n|                            1111885200 |\n+---------------------------------------+\nmysql> SELECT FROM_UNIXTIME(1111885200);\n+---------------------------+\n| FROM_UNIXTIME(1111885200) |\n+---------------------------+\n| 2005-03-27 03:00:00       |\n+---------------------------+"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_unix-timestamp"], "Feature Type": ["Function"], "index": 428, "vector_txt": "428:Feature: UNIX_TIMESTAMP([date])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["UTC_DATE"], "Description": ["Return the current UTC date", "\nUTC_DATE,\n          UTC_DATE()\n", "\n          Returns the current UTC date as a value in\n          'YYYY-MM-DD' or\n          YYYYMMDD format, depending on\n          whether the function is used in string or numeric context.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n        -> '2003-08-14', 20030814"], "Examples": ["mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n        -> '2003-08-14', 20030814"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-date"], "Feature Type": ["Function"], "index": 429, "vector_txt": "429:Feature: UTC_DATE\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["UTC_TIME"], "Description": ["Return the current UTC time", "\nUTC_TIME,\n          UTC_TIME([fsp])\n", "\n          Returns the current UTC time as a value in\n          'hh:mm:ss' or\n          hhmmss format, depending on whether\n          the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n        -> '18:07:53', 180753.000000"], "Examples": ["mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n        -> '18:07:53', 180753.000000"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-time"], "Feature Type": ["Function"], "index": 430, "vector_txt": "430:Feature: UTC_TIME\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["UTC_TIMESTAMP"], "Description": ["Return the current UTC date and time", "\nUTC_TIMESTAMP,\n          UTC_TIMESTAMP([fsp])\n", "\n          Returns the current UTC date and time as a value in\n          'YYYY-MM-DD\n          hh:mm:ss' or\n          YYYYMMDDhhmmss format, depending on\n          whether the function is used in string or numeric context.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n        -> '2003-08-14 18:08:04', 20030814180804.000000"], "Examples": ["mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n        -> '2003-08-14 18:08:04', 20030814180804.000000"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-timestamp"], "Feature Type": ["Function"], "index": 431, "vector_txt": "431:Feature: UTC_TIMESTAMP\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["CAN_ACCESS_USER(ARGS)"], "Description": ["Internal use only", "\nCAN_ACCESS_USER(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-user"], "Feature Type": ["Function"], "index": 432, "vector_txt": "432:Feature: CAN_ACCESS_USER(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["WEEK(date[,mode])"], "Description": ["Return the week number", "\nWEEK(date[,mode])\n", "\n          This function returns the week number for\n          date. The two-argument form of\n          WEEK() enables you to specify\n          whether the week starts on Sunday or Monday and whether the\n          return value should be in the range from 0\n          to 53 or from 1 to\n          53. If the mode\n          argument is omitted, the value of the\n          default_week_format system\n          variable is used. See\n          Section\u00a07.1.8, \u201cServer System Variables\u201d. For a\n          NULL date value, the function returns\n          NULL.\n        ", "\n          The following table describes how the\n          mode argument works.\n", "\n\nMode\nFirst day of week\nRange\nWeek 1 is the first week \u2026\n\n0\nSunday\n0-53\nwith a Sunday in this year\n\n1\nMonday\n0-53\nwith 4 or more days this year\n\n2\nSunday\n1-53\nwith a Sunday in this year\n\n3\nMonday\n1-53\nwith 4 or more days this year\n\n4\nSunday\n0-53\nwith 4 or more days this year\n\n5\nMonday\n0-53\nwith a Monday in this year\n\n6\nSunday\n1-53\nwith 4 or more days this year\n\n7\nMonday\n1-53\nwith a Monday in this year\n\n", "\n          For mode values with a meaning of\n          \u201cwith 4 or more days this year,\u201d weeks are\n          numbered according to ISO 8601:1988:\n", "\n\n              If the week containing January 1 has 4 or more days in the\n              new year, it is week 1.\n            \n              Otherwise, it is the last week of the previous year, and\n              the next week is week 1.\n\n", "Press CTRL+C to copy mysql> SELECT WEEK('2008-02-20');\n        -> 7\nmysql> SELECT WEEK('2008-02-20',0);\n        -> 7\nmysql> SELECT WEEK('2008-02-20',1);\n        -> 8\nmysql> SELECT WEEK('2008-12-31',1);\n        -> 53", "\n          If a date falls in the last week of the previous year, MySQL\n          returns 0 if you do not use\n          2, 3,\n          6, or 7 as the optional\n          mode argument:\n        ", "Press CTRL+C to copy mysql> SELECT YEAR('2000-01-01'), WEEK('2000-01-01',0);\n        -> 2000, 0", "\n          One might argue that WEEK()\n          should return 52 because the given date\n          actually occurs in the 52nd week of 1999.\n          WEEK() returns\n          0 instead so that the return value is\n          \u201cthe week number in the given year.\u201d This makes\n          use of the WEEK() function\n          reliable when combined with other functions that extract a\n          date part from a date.\n        ", "\n          If you prefer a result evaluated with respect to the year that\n          contains the first day of the week for the given date, use\n          0, 2,\n          5, or 7 as the optional\n          mode argument.\n        ", "Press CTRL+C to copy mysql> SELECT WEEK('2000-01-01',2);\n        -> 52", "\n          Alternatively, use the\n          YEARWEEK() function:\n        ", "Press CTRL+C to copy mysql> SELECT YEARWEEK('2000-01-01');\n        -> 199952\nmysql> SELECT MID(YEARWEEK('2000-01-01'),5,2);\n        -> '52'"], "Examples": ["mysql> SELECT WEEK('2008-02-20');\n        -> 7\nmysql> SELECT WEEK('2008-02-20',0);\n        -> 7\nmysql> SELECT WEEK('2008-02-20',1);\n        -> 8\nmysql> SELECT WEEK('2008-12-31',1);\n        -> 53", "mysql> SELECT YEAR('2000-01-01'), WEEK('2000-01-01',0);\n        -> 2000, 0", "mysql> SELECT WEEK('2000-01-01',2);\n        -> 52", "mysql> SELECT YEARWEEK('2000-01-01');\n        -> 199952\nmysql> SELECT MID(YEARWEEK('2000-01-01'),5,2);\n        -> '52'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_week"], "Feature Type": ["Function"], "index": 433, "vector_txt": "433:Feature: WEEK(date[,mode])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["WEEKDAY(date)"], "Description": ["Return the weekday index", "\nWEEKDAY(date)\n", "\n          Returns the weekday index for date\n          (0 = Monday, 1 =\n          Tuesday, \u2026 6 = Sunday). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT WEEKDAY('2008-02-03 22:23:00');\n        -> 6\nmysql> SELECT WEEKDAY('2007-11-06');\n        -> 1"], "Examples": ["mysql> SELECT WEEKDAY('2008-02-03 22:23:00');\n        -> 6\nmysql> SELECT WEEKDAY('2007-11-06');\n        -> 1"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_weekday"], "Feature Type": ["Function"], "index": 434, "vector_txt": "434:Feature: WEEKDAY(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["WEEKOFYEAR(date)"], "Description": ["Return the calendar week of the date (1-53)", "\nWEEKOFYEAR(date)\n", "\n          Returns the calendar week of the date as a number in the range\n          from 1 to 53. Returns\n          NULL if date is\n          NULL.\n        ", "\nWEEKOFYEAR() is a compatibility\n          function that is equivalent to\n          WEEK(date,3).\n        ", "Press CTRL+C to copy mysql> SELECT WEEKOFYEAR('2008-02-20');\n        -> 8"], "Examples": ["mysql> SELECT WEEKOFYEAR('2008-02-20');\n        -> 8"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_weekofyear"], "Feature Type": ["Function"], "index": 435, "vector_txt": "435:Feature: WEEKOFYEAR(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["YEAR(date)"], "Description": ["Return the year", "\nYEAR(date)\n", "\n          Returns the year for date, in the\n          range 1000 to 9999, or\n          0 for the \u201czero\u201d date. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT YEAR('1987-01-01');\n        -> 1987"], "Examples": ["mysql> SELECT YEAR('1987-01-01');\n        -> 1987"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_year"], "Feature Type": ["Function"], "index": 436, "vector_txt": "436:Feature: YEAR(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["YEARWEEK(date)"], "Description": ["Return the year and week", "\nYEARWEEK(date),\n          YEARWEEK(date,mode)\n", "\n          Returns year and week for a date. The year in the result may\n          be different from the year in the date argument for the first\n          and the last week of the year. Returns NULL\n          if date is NULL.\n        ", "\n          The mode argument works exactly\n          like the mode argument to\n          WEEK(). For the single-argument\n          syntax, a mode value of 0 is used.\n          Unlike WEEK(), the value of\n          default_week_format does not\n          influence YEARWEEK().\n        ", "Press CTRL+C to copy mysql> SELECT YEARWEEK('1987-01-01');\n        -> 198652", "\n          The week number is different from what the\n          WEEK() function would return\n          (0) for optional arguments\n          0 or 1, as\n          WEEK() then returns the week in\n          the context of the given year.\n"], "Examples": ["mysql> SELECT YEARWEEK('1987-01-01');\n        -> 198652"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_yearweek"], "Feature Type": ["Function"], "index": 437, "vector_txt": "437:Feature: YEARWEEK(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["AES_DECRYPT(crypt_str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])"], "Description": ["Decrypt using AES", "\nAES_DECRYPT(crypt_str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n", "\n          This function decrypts data using the official AES (Advanced\n          Encryption Standard) algorithm. For more information, see the\n          description of AES_ENCRYPT().\n        ", "\n          Statements that use\n          AES_DECRYPT() are unsafe for\n          statement-based replication.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_aes-decrypt"], "Feature Type": ["Function"], "index": 438, "vector_txt": "438:Feature: AES_DECRYPT(crypt_str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["AES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])"], "Description": ["Encrypt using AES", "\nAES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n", "\nAES_ENCRYPT() and\n          AES_DECRYPT() implement\n          encryption and decryption of data using the official AES\n          (Advanced Encryption Standard) algorithm, previously known as\n          \u201cRijndael.\u201d The AES standard permits various key\n          lengths. By default these functions implement AES with a\n          128-bit key length. Key lengths of 196 or 256 bits can be\n          used, as described later. The key length is a trade off\n          between performance and security.\n        ", "\nAES_ENCRYPT() encrypts the\n          string str using the key string\n          key_str, and returns a binary\n          string containing the encrypted output.\n          AES_DECRYPT() decrypts the\n          encrypted string crypt_str using\n          the key string key_str, and returns\n          the original (binary) string in hexadecimal format. (To obtain\n          the string as plaintext, cast the result to\n          CHAR. Alternatively, start the\n          mysql client with\n          --skip-binary-as-hex\n          to cause all binary values to be displayed as text.) If either\n          function argument is NULL, the function\n          returns NULL. If\n          AES_DECRYPT() detects invalid\n          data or incorrect padding, it returns NULL.\n          However, it is possible for\n          AES_DECRYPT() to return a\n          non-NULL value (possibly garbage) if the\n          input data or the key is invalid.\n        ", "\n          These functions support the use of a key derivation function\n          (KDF) to create a cryptographically strong secret key from the\n          information passed in key_str. The\n          derived key is used to encrypt and decrypt the data, and it\n          remains in the MySQL Server instance and is not accessible to\n          users. Using a KDF is highly recommended, as it provides\n          better security than specifying your own premade key or\n          deriving it by a simpler method as you use the function. The\n          functions support HKDF (available from OpenSSL 1.1.0), for\n          which you can specify an optional salt and context-specific\n          information to include in the keying material, and PBKDF2\n          (available from OpenSSL 1.0.2), for which you can specify an\n          optional salt and set the number of iterations used to produce\n          the key.\n        ", "\nAES_ENCRYPT() and\n          AES_DECRYPT() permit control of\n          the block encryption mode. The\n          block_encryption_mode system\n          variable controls the mode for block-based encryption\n          algorithms. Its default value is\n          aes-128-ecb, which signifies encryption\n          using a key length of 128 bits and ECB mode. For a description\n          of the permitted values of this variable, see\n          Section\u00a07.1.8, \u201cServer System Variables\u201d. The optional\n          init_vector argument is used to\n          provide an initialization vector for block encryption modes\n          that require it.\n        ", "\n          Statements that use\n          AES_ENCRYPT() or\n          AES_DECRYPT() are unsafe for\n          statement-based replication.\n        ", "\n          If AES_ENCRYPT() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        ", "\n          The arguments for the\n          AES_ENCRYPT() and\n          AES_DECRYPT() functions are as\n          follows:\n", "\n\nstr\n\n                The string for\n                AES_ENCRYPT() to encrypt\n                using the key string key_str,\n                or the key derived from it by the specified KDF. The\n                string can be any length. Padding is automatically added\n                to str so it is a multiple of\n                a block as required by block-based algorithms such as\n                AES. This padding is automatically removed by the\n                AES_DECRYPT() function.\n              \ncrypt_str\n\n                The encrypted string for\n                AES_DECRYPT() to decrypt\n                using the key string key_str,\n                or the key derived from it by the specified KDF. The\n                string can be any length. The length of\n                crypt_str can be calculated\n                from the length of the original string using this\n                formula:\n              Press CTRL+C to copy 16 * (trunc(string_length / 16) + 1)\nkey_str\n\n                The encryption key, or the input keying material that is\n                used as the basis for deriving a key using a key\n                derivation function (KDF). For the same instance of\n                data, use the same value of\n                key_str for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n              \n                If you are using a KDF,\n                key_str can be any arbitrary\n                information such as a password or passphrase. In the\n                further arguments for the function, you specify the KDF\n                name, then add further options to increase the security\n                as appropriate for the KDF.\n              \n                When you use a KDF, the function creates a\n                cryptographically strong secret key from the information\n                passed in key_str and any\n                salt or additional information that you provide in the\n                other arguments. The derived key is used to encrypt and\n                decrypt the data, and it remains in the MySQL Server\n                instance and is not accessible to users. Using a KDF is\n                highly recommended, as it provides better security than\n                specifying your own premade key or deriving it by a\n                simpler method as you use the function.\n              \n                If you are not using a KDF, for a key length of 128\n                bits, the most secure way to pass a key to the\n                key_str argument is to create\n                a truly random 128-bit value and pass it as a binary\n                value. For example:\n              Press CTRL+C to copy INSERT INTO t\nVALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));\n                A passphrase can be used to generate an AES key by\n                hashing the passphrase. For example:\n              Press CTRL+C to copy INSERT INTO t\nVALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));\n                If you exceed the maximum key length of 128 bits, a\n                warning is returned. If you are not using a KDF, do not\n                pass a password or passphrase directly to\n                key_str, hash it first.\n                Previous versions of this documentation suggested the\n                former approach, but it is no longer recommended as the\n                examples shown here are more secure.\n              \ninit_vector\n\n                An initialization vector, for block encryption modes\n                that require it. The\n                block_encryption_mode\n                system variable controls the mode. For the same instance\n                of data, use the same value of\n                init_vector for encryption\n                with AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n\n\n\nNote\n\n\n                  If you are using a KDF, you must specify an\n                  initialization vector or a null string for this\n                  argument, in order to access the later arguments to\n                  define the KDF.\n\n\n\n                For modes that require an initialization vector, it must\n                be 16 bytes or longer (bytes in excess of 16 are\n                ignored). An error occurs if\n                init_vector is missing. For\n                modes that do not require an initialization vector, it\n                is ignored and a warning is generated if\n                init_vector is specified,\n                unless you are using a KDF.\n              \n                The default value for the\n                block_encryption_mode\n                system variable is aes-128-ecb, or\n                ECB mode, which does not require an initialization\n                vector. The alternative permitted block encryption modes\n                CBC, CFB1, CFB8, CFB128, and OFB all require an\n                initialization vector.\n              \n                A random string of bytes to use for the initialization\n                vector can be produced by calling\n                RANDOM_BYTES(16).\n              \nkdf_name\n\n                The name of the key derivation function (KDF) to create\n                a key from the input keying material passed in\n                key_str, and other arguments\n                as appropriate for the KDF. Optional.\n              \n                For the same instance of data, use the same value of\n                kdf_name for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT(). When you\n                specify kdf_name, you must\n                specify init_vector, using\n                either a valid initialization vector, or a null string\n                if the encryption mode does not require an\n                initialization vector.\n              \n                The following values are supported:\n\n\n\nhkdf\n\n                      HKDF, which is available from OpenSSL 1.1.0. HKDF\n                      extracts a pseudorandom key from the keying\n                      material then expands it into additional keys.\n                      With HKDF, you can specify an optional salt\n                      (salt) and\n                      context-specific information such as application\n                      details (info) to\n                      include in the keying material.\n                    \npbkdf2_hmac\n\n                      PBKDF2, which is available from OpenSSL 1.0.2.\n                      PBKDF2 applies a pseudorandom function to the\n                      keying material, and repeats this process a large\n                      number of times to produce the key. With PBKDF2,\n                      you can specify an optional salt\n                      (salt) to include in\n                      the keying material, and set the number of\n                      iterations used to produce the key\n                      (iterations).\n\n\n\n                In this example, HKDF is specified as the key derivation\n                function, and a salt and context information are\n                provided. The argument for the initialization vector is\n                included but is the empty string:\n              Press CTRL+C to copy SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');\n                In this example, PBKDF2 is specified as the key\n                derivation function, a salt is provided, and the number\n                of iterations is doubled from the recommended minimum:\n              Press CTRL+C to copy SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');\nsalt\n\n                A salt to be passed to the key derivation function\n                (KDF). Optional. Both HKDF and PBKDF2 can use salts, and\n                their use is recommended to help prevent attacks based\n                on dictionaries of common passwords or rainbow tables.\n              \n                A salt consists of random data, which for security must\n                be different for each encryption operation. A random\n                string of bytes to use for the salt can be produced by\n                calling RANDOM_BYTES().\n                This example produces a 64-bit salt:\n              Press CTRL+C to copy SET @salt = RANDOM_BYTES(8);\n                For the same instance of data, use the same value of\n                salt for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT(). The salt\n                can safely be stored along with the encrypted data.\n              \ninfo\n\n                Context-specific information for HKDF to include in the\n                keying material, such as information about the\n                application. Optional; available when you specify\n                hkdf as the KDF name. HKDF adds this\n                information to the keying material specified in\n                key_str and the salt\n                specified in salt to produce\n                the key.\n              \n                For the same instance of data, use the same value of\n                info for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n              \niterations\n\n                The iteration count for PBKDF2 to use when producing the\n                key. Optional; available when you specify\n                pbkdf2_hmac as the KDF name. A higher\n                count gives greater resistance to brute-force attacks\n                because it has a greater computational cost for the\n                attacker, but the same is necessarily true for the key\n                derivation process. The default if you do not specify\n                this argument is 1000, which is the minimum recommended\n                by the OpenSSL standard.\n              \n                For the same instance of data, use the same value of\n                iterations for encryption\n                with AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n\n", "Press CTRL+C to copy mysql> SET block_encryption_mode = 'aes-256-cbc';\nmysql> SET @key_str = SHA2('My secret passphrase',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nmysql> SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);\n+-------------------------------------------------------------+\n| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |\n+-------------------------------------------------------------+\n| text                                                        |\n+-------------------------------------------------------------+"], "Examples": ["INSERT INTO t\nVALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));", "INSERT INTO t\nVALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));", "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');", "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');", "SET @salt = RANDOM_BYTES(8);", "mysql> SET block_encryption_mode = 'aes-256-cbc';\nmysql> SET @key_str = SHA2('My secret passphrase',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nmysql> SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);\n+-------------------------------------------------------------+\n| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |\n+-------------------------------------------------------------+\n| text                                                        |\n+-------------------------------------------------------------+"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_aes-encrypt"], "Feature Type": ["Function"], "index": 439, "vector_txt": "439:Feature: AES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["COMPRESS(string_to_compress)"], "Description": ["Return result as a binary string", "\nCOMPRESS(string_to_compress)\n", "\n          Compresses a string and returns the result as a binary string.\n          This function requires MySQL to have been compiled with a\n          compression library such as zlib.\n          Otherwise, the return value is always NULL.\n          The return value is also NULL if\n          string_to_compress is\n          NULL. The compressed string can be\n          uncompressed with UNCOMPRESS().\n        ", "Press CTRL+C to copy mysql> SELECT LENGTH(COMPRESS(REPEAT('a',1000)));\n        -> 21\nmysql> SELECT LENGTH(COMPRESS(''));\n        -> 0\nmysql> SELECT LENGTH(COMPRESS('a'));\n        -> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT('a',16)));\n        -> 15", "\n          The compressed string contents are stored the following way:\n", "\n\n              Empty strings are stored as empty strings.\n            \n              Nonempty strings are stored as a 4-byte length of the\n              uncompressed string (low byte first), followed by the\n              compressed string. If the string ends with space, an extra\n              . character is added to avoid problems\n              with endspace trimming should the result be stored in a\n              CHAR or\n              VARCHAR column. (However,\n              use of nonbinary string data types such as\n              CHAR or\n              VARCHAR to store compressed\n              strings is not recommended anyway because character set\n              conversion may occur. Use a\n              VARBINARY or\n              BLOB binary string column\n              instead.)\n\n", "\n          If COMPRESS() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT LENGTH(COMPRESS(REPEAT('a',1000)));\n        -> 21\nmysql> SELECT LENGTH(COMPRESS(''));\n        -> 0\nmysql> SELECT LENGTH(COMPRESS('a'));\n        -> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT('a',16)));\n        -> 15"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_compress"], "Feature Type": ["Function"], "index": 440, "vector_txt": "440:Feature: COMPRESS(string_to_compress)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["MD5(str)"], "Description": ["Calculate MD5 checksum", "\nMD5(str)\n", "\n          Calculates an MD5 128-bit checksum for the string. The value\n          is returned as a string of 32 hexadecimal digits, or\n          NULL if the argument was\n          NULL. The return value can, for example, be\n          used as a hash key. See the notes at the beginning of this\n          section about storing hash values efficiently.\n        ", "\n          The return value is a string in the connection character set.\n        ", "\n          If FIPS mode is enabled,\n          MD5() returns\n          NULL. See Section\u00a08.8, \u201cFIPS Support\u201d.\n        ", "Press CTRL+C to copy mysql> SELECT MD5('testing');\n        -> 'ae2b1fca515949e5d54fb22b8ed95575'", "\n          This is the \u201cRSA Data Security, Inc. MD5 Message-Digest\n          Algorithm.\u201d\n", "\n          See the note regarding the MD5 algorithm at the beginning this\n          section.\n        "], "Examples": ["mysql> SELECT MD5('testing');\n        -> 'ae2b1fca515949e5d54fb22b8ed95575'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_md5"], "Feature Type": ["Function"], "index": 441, "vector_txt": "441:Feature: MD5(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["RANDOM_BYTES(len)"], "Description": ["Return a random byte vector", "\nRANDOM_BYTES(len)\n", "\n          This function returns a binary string of\n          len random bytes generated using\n          the random number generator of the SSL library. Permitted\n          values of len range from 1 to 1024.\n          For values outside that range, an error occurs. Returns\n          NULL if len is\n          NULL.\n        ", "\nRANDOM_BYTES() can be used to\n          provide the initialization vector for the\n          AES_DECRYPT() and\n          AES_ENCRYPT() functions. For\n          use in that context, len must be at\n          least 16. Larger values are permitted, but bytes in excess of\n          16 are ignored.\n        ", "\nRANDOM_BYTES() generates a\n          random value, which makes its result nondeterministic.\n          Consequently, statements that use this function are unsafe for\n          statement-based replication.\n        ", "\n          If RANDOM_BYTES() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_random-bytes"], "Feature Type": ["Function"], "index": 442, "vector_txt": "442:Feature: RANDOM_BYTES(len)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["CAN_ACCESS_VIEW(ARGS)"], "Description": ["Internal use only", "\nCAN_ACCESS_VIEW(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-view"], "Feature Type": ["Function"], "index": 443, "vector_txt": "443:Feature: CAN_ACCESS_VIEW(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["COUNT(expr)\n            [over_clause]"], "Description": ["Return a count of the number of rows returned", "\nCOUNT(expr)\n            [over_clause]\n", "\n            Returns a count of the number of non-NULL\n            values of expr in the rows\n            retrieved by a SELECT\n            statement. The result is a\n            BIGINT value.\n          ", "\n            If there are no matching rows,\n            COUNT() returns\n            0. COUNT(NULL) returns\n            0.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT student.student_name,COUNT(*)\n       FROM student,course\n       WHERE student.student_id=course.student_id\n       GROUP BY student_name;", "\nCOUNT(*) is somewhat\n            different in that it returns a count of the number of rows\n            retrieved, whether or not they contain\n            NULL values.\n          ", "\n            For transactional storage engines such as\n            InnoDB, storing an exact row count is\n            problematic. Multiple transactions may be occurring at the\n            same time, each of which may affect the count.\n          ", "\nInnoDB does not keep an internal count of\n            rows in a table because concurrent transactions might\n            \u201csee\u201d different numbers of rows at the same\n            time. Consequently, SELECT COUNT(*)\n            statements only count rows visible to the current\n            transaction.\n          ", "\nSELECT COUNT(*) FROM\n            tbl_name query\n            performance for InnoDB tables is\n            optimized for single-threaded workloads if there are no\n            extra clauses such as WHERE or\n            GROUP BY.\n          ", "\nInnoDB processes SELECT\n            COUNT(*) statements by traversing the smallest\n            available secondary index unless an index or optimizer hint\n            directs the optimizer to use a different index. If a\n            secondary index is not present, InnoDB\n            processes SELECT COUNT(*) statements by\n            scanning the clustered index.\n          ", "\n            Processing of SELECT COUNT(*) statements\n            takes some time if index records are not entirely in the\n            buffer pool. For a faster count, create a counter table and\n            let your application update it according to the inserts and\n            deletes it does. However, this method may not scale well in\n            situations where thousands of concurrent transactions are\n            initiating updates to the same counter table. If an\n            approximate row count is sufficient, use\n            SHOW TABLE STATUS.\n          ", "\nInnoDB handles SELECT\n            COUNT(*) and SELECT COUNT(1)\n            operations in the same way. There is no performance\n            difference.\n          ", "\n            For MyISAM tables,\n            COUNT(*) is optimized to\n            return very quickly if the\n            SELECT retrieves from one\n            table, no other columns are retrieved, and there is no\n            WHERE clause. For example:\n          ", "Press CTRL+C to copy mysql> SELECT COUNT(*) FROM student;", "\n            This optimization only applies to MyISAM\n            tables, because an exact row count is stored for this\n            storage engine and can be accessed very quickly.\n            COUNT(1) is only subject to the same\n            optimization if the first column is defined as NOT\n            NULL.\n          "], "Examples": ["mysql> SELECT student.student_name,COUNT(*)\n       FROM student,course\n       WHERE student.student_id=course.student_id\n       GROUP BY student_name;", "mysql> SELECT COUNT(*) FROM student;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_count"], "Feature Type": ["Function"], "index": 444, "vector_txt": "444:Feature: COUNT(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["SHA1(str)"], "Description": ["Calculate an SHA-1 160-bit checksum", "\nSHA1(str),\n          SHA(str)\n", "\n          Calculates an SHA-1 160-bit checksum for the string, as\n          described in RFC 3174 (Secure Hash Algorithm). The value is\n          returned as a string of 40 hexadecimal digits, or\n          NULL if the argument is\n          NULL. One of the possible uses for this\n          function is as a hash key. See the notes at the beginning of\n          this section about storing hash values efficiently.\n          SHA() is\n          synonymous with SHA1().\n        ", "\n          The return value is a string in the connection character set.\n        ", "Press CTRL+C to copy mysql> SELECT SHA1('abc');\n        -> 'a9993e364706816aba3e25717850c26c9cd0d89d'", "\nSHA1() can be considered a\n          cryptographically more secure equivalent of\n          MD5(). However, see the note\n          regarding the MD5 and SHA-1 algorithms at the beginning this\n          section.\n        "], "Examples": ["mysql> SELECT SHA1('abc');\n        -> 'a9993e364706816aba3e25717850c26c9cd0d89d'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_sha1"], "Feature Type": ["Function"], "index": 445, "vector_txt": "445:Feature: SHA1(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["SHA2(str,\n          hash_length)"], "Description": ["Calculate an SHA-2 checksum", "\nSHA2(str,\n          hash_length)\n", "\n          Calculates the SHA-2 family of hash functions (SHA-224,\n          SHA-256, SHA-384, and SHA-512). The first argument is the\n          plaintext string to be hashed. The second argument indicates\n          the desired bit length of the result, which must have a value\n          of 224, 256, 384, 512, or 0 (which is equivalent to 256). If\n          either argument is NULL or the hash length\n          is not one of the permitted values, the return value is\n          NULL. Otherwise, the function result is a\n          hash value containing the desired number of bits. See the\n          notes at the beginning of this section about storing hash\n          values efficiently.\n        ", "\n          The return value is a string in the connection character set.\n        ", "Press CTRL+C to copy mysql> SELECT SHA2('abc', 224);\n        -> '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7'", "\n          This function works only if MySQL has been configured with SSL\n          support. See Section\u00a08.3, \u201cUsing Encrypted Connections\u201d.\n        ", "\nSHA2() can be considered\n          cryptographically more secure than\n          MD5() or\n          SHA1().\n        "], "Examples": ["mysql> SELECT SHA2('abc', 224);\n        -> '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_sha2"], "Feature Type": ["Function"], "index": 446, "vector_txt": "446:Feature: SHA2(str,\n          hash_length)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["STATEMENT_DIGEST(statement)"], "Description": ["Compute statement digest hash value", "\nSTATEMENT_DIGEST(statement)\n", "\n          Given an SQL statement as a string, returns the statement\n          digest hash value as a string in the connection character set,\n          or NULL if the argument is\n          NULL. The related\n          STATEMENT_DIGEST_TEXT()\n          function returns the normalized statement digest. For\n          information about statement digesting, see\n          Section\u00a029.10, \u201cPerformance Schema Statement Digests and Sampling\u201d.\n        ", "\n          Both functions use the MySQL parser to parse the statement. If\n          parsing fails, an error occurs. The error message includes the\n          parse error only if the statement is provided as a literal\n          string.\n        ", "\n          The max_digest_length system\n          variable determines the maximum number of bytes available to\n          these functions for computing normalized statement digests.\n        ", "Press CTRL+C to copy mysql> SET @stmt = 'SELECT * FROM mytable WHERE cola = 10 AND colb = 20';\nmysql> SELECT STATEMENT_DIGEST(@stmt);\n+------------------------------------------------------------------+\n| STATEMENT_DIGEST(@stmt)                                          |\n+------------------------------------------------------------------+\n| 3bb95eeade896657c4526e74ff2a2862039d0a0fe8a9e7155b5fe492cbd78387 |\n+------------------------------------------------------------------+\nmysql> SELECT STATEMENT_DIGEST_TEXT(@stmt);\n+----------------------------------------------------------+\n| STATEMENT_DIGEST_TEXT(@stmt)                             |\n+----------------------------------------------------------+\n| SELECT * FROM `mytable` WHERE `cola` = ? AND `colb` = ?  |\n+----------------------------------------------------------+"], "Examples": ["mysql> SET @stmt = 'SELECT * FROM mytable WHERE cola = 10 AND colb = 20';\nmysql> SELECT STATEMENT_DIGEST(@stmt);\n+------------------------------------------------------------------+\n| STATEMENT_DIGEST(@stmt)                                          |\n+------------------------------------------------------------------+\n| 3bb95eeade896657c4526e74ff2a2862039d0a0fe8a9e7155b5fe492cbd78387 |\n+------------------------------------------------------------------+\nmysql> SELECT STATEMENT_DIGEST_TEXT(@stmt);\n+----------------------------------------------------------+\n| STATEMENT_DIGEST_TEXT(@stmt)                             |\n+----------------------------------------------------------+\n| SELECT * FROM `mytable` WHERE `cola` = ? AND `colb` = ?  |\n+----------------------------------------------------------+"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_statement-digest"], "Feature Type": ["Function"], "index": 447, "vector_txt": "447:Feature: STATEMENT_DIGEST(statement)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["STATEMENT_DIGEST_TEXT(statement)"], "Description": ["Compute normalized statement digest", "\nSTATEMENT_DIGEST_TEXT(statement)\n", "\n          Given an SQL statement as a string, returns the normalized\n          statement digest as a string in the connection character set,\n          or NULL if the argument is\n          NULL. For additional discussion and\n          examples, see the description of the related\n          STATEMENT_DIGEST() function.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_statement-digest-text"], "Feature Type": ["Function"], "index": 448, "vector_txt": "448:Feature: STATEMENT_DIGEST_TEXT(statement)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["UNCOMPRESS(string_to_uncompress)"], "Description": ["Uncompress a string compressed", "\nUNCOMPRESS(string_to_uncompress)\n", "\n          Uncompresses a string compressed by the\n          COMPRESS() function. If the\n          argument is not a compressed value, the result is\n          NULL; if\n          string_to_uncompress is\n          NULL, the result is also\n          NULL. This function requires MySQL to have\n          been compiled with a compression library such as\n          zlib. Otherwise, the return value is always\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNCOMPRESS(COMPRESS('any string'));\n        -> 'any string'\nmysql> SELECT UNCOMPRESS('any string');\n        -> NULL"], "Examples": ["mysql> SELECT UNCOMPRESS(COMPRESS('any string'));\n        -> 'any string'\nmysql> SELECT UNCOMPRESS('any string');\n        -> NULL"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_uncompress"], "Feature Type": ["Function"], "index": 449, "vector_txt": "449:Feature: UNCOMPRESS(string_to_uncompress)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["UNCOMPRESSED_LENGTH(compressed_string)"], "Description": ["Return the length of a string before compression", "\nUNCOMPRESSED_LENGTH(compressed_string)\n", "\n          Returns the length that the compressed string had before being\n          compressed. Returns NULL if\n          compressed_string is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));\n        -> 30"], "Examples": ["mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));\n        -> 30"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_uncompressed-length"], "Feature Type": ["Function"], "index": 450, "vector_txt": "450:Feature: UNCOMPRESSED_LENGTH(compressed_string)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["VALIDATE_PASSWORD_STRENGTH(str)"], "Description": ["Determine strength of password", "\nVALIDATE_PASSWORD_STRENGTH(str)\n", "\n          Given an argument representing a plaintext password, this\n          function returns an integer to indicate how strong the\n          password is, or NULL if the argument is\n          NULL. The return value ranges from 0 (weak)\n          to 100 (strong).\n        ", "\n          Password assessment by\n          VALIDATE_PASSWORD_STRENGTH() is\n          done by the validate_password component. If\n          that component is not installed, the function always returns\n          0. For information about installing\n          validate_password, see\n          Section\u00a08.4.3, \u201cThe Password Validation Component\u201d. To examine or configure\n          the parameters that affect password testing, check or set the\n          system variables implemented by\n          validate_password. See\n          Section\u00a08.4.3.2, \u201cPassword Validation Options and Variables\u201d.\n        ", "\n          The password is subjected to increasingly strict tests and the\n          return value reflects which tests were satisfied, as shown in\n          the following table. In addition, if the\n          validate_password.check_user_name\n          system variable is enabled and the password matches the user\n          name,\n          VALIDATE_PASSWORD_STRENGTH()\n          returns 0 regardless of how other\n          validate_password system variables are set.\n", "\n\nPassword Test\nReturn Value\n\nLength < 4\n0\n\nLength \u2265 4 and <\n                validate_password.length\n25\n\nSatisfies policy 1 (LOW)\n50\n\nSatisfies policy 2 (MEDIUM)\n75\n\nSatisfies policy 3 (STRONG)\n100\n\n"], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_validate-password-strength"], "Feature Type": ["Function"], "index": 451, "vector_txt": "451:Feature: VALIDATE_PASSWORD_STRENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.5 Flow Control Functions"], "Feature": ["IF(expr1,expr2,expr3)"], "Description": ["If/else construct", "\nIF(expr1,expr2,expr3)\n", "\n          If expr1 is TRUE\n          (expr1 <>\n          0 and expr1 IS\n          NOT NULL), IF()\n          returns expr2. Otherwise, it\n          returns expr3.\n", "\n\nNote\n\n\n            There is also an IF\nstatement, which differs from the\n            IF()\nfunction described here. See\n            Section\u00a015.6.5.2, \u201cIF Statement\u201d.\n\n", "\n          If only one of expr2 or\n          expr3 is explicitly\n          NULL, the result type of the\n          IF() function is the type of\n          the non-NULL expression.\n        ", "\n          The default return type of IF()\n          (which may matter when it is stored into a temporary table) is\n          calculated as follows:\n", "\n\n              If expr2 or\n              expr3 produce a string, the\n              result is a string.\n            \n              If expr2 and\n              expr3 are both strings, the\n              result is case-sensitive if either string is\n              case-sensitive.\n            \n              If expr2 or\n              expr3 produce a floating-point\n              value, the result is a floating-point value.\n            \n              If expr2 or\n              expr3 produce an integer, the\n              result is an integer.\n\n", "Press CTRL+C to copy mysql> SELECT IF(1>2,2,3);\n        -> 3\nmysql> SELECT IF(1<2,'yes','no');\n        -> 'yes'\nmysql> SELECT IF(STRCMP('test','test1'),'no','yes');\n        -> 'no'"], "Examples": ["mysql> SELECT IF(1>2,2,3);\n        -> 3\nmysql> SELECT IF(1<2,'yes','no');\n        -> 'yes'\nmysql> SELECT IF(STRCMP('test','test1'),'no','yes');\n        -> 'no'"], "Category": ["Built-In Functions", "Flow Control Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html#function_if"], "Feature Type": ["Function"], "index": 452, "vector_txt": "452:Feature: IF(expr1,expr2,expr3)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.5 Flow Control Functions"], "Feature": ["IFNULL(expr1,expr2)"], "Description": ["Null if/else construct", "\nIFNULL(expr1,expr2)\n", "\n          If expr1 is not\n          NULL,\n          IFNULL() returns\n          expr1; otherwise it returns\n          expr2.\n        ", "Press CTRL+C to copy mysql> SELECT IFNULL(1,0);\n        -> 1\nmysql> SELECT IFNULL(NULL,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,'yes');\n        -> 'yes'", "\n          The default return type of\n          IFNULL(expr1,expr2)\n          is the more \u201cgeneral\u201d of the two expressions, in\n          the order STRING, REAL,\n          or INTEGER. Consider the case of a table\n          based on expressions or where MySQL must internally store a\n          value returned by IFNULL() in a\n          temporary table:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE tmp SELECT IFNULL(1,'test') AS test;\nmysql> DESCRIBE tmp;\n+-------+--------------+------+-----+---------+-------+\n| Field | Type         | Null | Key | Default | Extra |\n+-------+--------------+------+-----+---------+-------+\n| test  | varbinary(4) | NO   |     |         |       |\n+-------+--------------+------+-----+---------+-------+", "\n          In this example, the type of the test\n          column is VARBINARY(4) (a\n          string type).\n        "], "Examples": ["mysql> SELECT IFNULL(1,0);\n        -> 1\nmysql> SELECT IFNULL(NULL,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,'yes');\n        -> 'yes'", "mysql> CREATE TABLE tmp SELECT IFNULL(1,'test') AS test;\nmysql> DESCRIBE tmp;\n+-------+--------------+------+-----+---------+-------+\n| Field | Type         | Null | Key | Default | Extra |\n+-------+--------------+------+-----+---------+-------+\n| test  | varbinary(4) | NO   |     |         |       |\n+-------+--------------+------+-----+---------+-------+"], "Category": ["Built-In Functions", "Flow Control Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html#function_ifnull"], "Feature Type": ["Function"], "index": 453, "vector_txt": "453:Feature: IFNULL(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.5 Flow Control Functions"], "Feature": ["NULLIF(expr1,expr2)"], "Description": ["Return NULL if expr1 = expr2", "\nNULLIF(expr1,expr2)\n", "\n          Returns NULL if\n          expr1 =\n          expr2 is true, otherwise\n          returns expr1. This is the same as\n          CASE WHEN\n          expr1 =\n          expr2 THEN NULL ELSE\n          expr1 END.\n        ", "\n          The return value has the same type as the first argument.\n        ", "Press CTRL+C to copy mysql> SELECT NULLIF(1,1);\n        -> NULL\nmysql> SELECT NULLIF(1,2);\n        -> 1", "\n\nNote\n\n\n            MySQL evaluates expr1 twice if\n            the arguments are not equal.\n\n"], "Examples": ["mysql> SELECT NULLIF(1,1);\n        -> NULL\nmysql> SELECT NULLIF(1,2);\n        -> 1"], "Category": ["Built-In Functions", "Flow Control Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html#function_nullif"], "Feature Type": ["Function"], "index": 454, "vector_txt": "454:Feature: NULLIF(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.10 Cast Functions and Operators"], "Feature": ["CAST(expr AS\n            type [ARRAY])"], "Description": ["Cast a value as a certain type", "\nCAST(expr AS\n            type [ARRAY])\n", "\nCAST(timestamp_value\n            AT TIME ZONE timezone_specifier\n            AS\n            DATETIME[(precision)])\n", "\ntimezone_specifier: [INTERVAL]\n            '+00:00' | 'UTC'\n          ", "\n            With\n            CAST(expr AS\n            type syntax, the\n            CAST() function takes an\n            expression of any type and produces a result value of the\n            specified type. This operation may also be expressed as\n            CONVERT(expr,\n            type), which is\n            equivalent. If expr is\n            NULL, CAST() returns\n            NULL.\n          ", "\n            These type values are permitted:\n", "\n\nBINARY[(N)]\n\n                Produces a string with the\n                VARBINARY data type,\n                except that when the expression\n                expr is empty (zero length),\n                the result type is BINARY(0). If the\n                optional length N is given,\n                BINARY(N)\n                causes the cast to use no more than\n                N bytes of the argument.\n                Values shorter than N bytes\n                are padded with 0x00 bytes to a\n                length of N. If the optional\n                length N is not given, MySQL\n                calculates the maximum length from the expression. If\n                the supplied or calculated length is greater than an\n                internal threshold, the result type is\n                BLOB. If the length is still too\n                long, the result type is LONGBLOB.\n              \n                For a description of how casting to\n                BINARY affects comparisons, see\n                Section\u00a013.3.3, \u201cThe BINARY and VARBINARY Types\u201d.\n              \nCHAR[(N)]\n                [charset_info]\n\n                Produces a string with the\n                VARCHAR data type, unless\n                the expression expr is empty\n                (zero length), in which case the result type is\n                CHAR(0). If the optional length\n                N is given,\n                CHAR(N)\n                causes the cast to use no more than\n                N characters of the argument.\n                No padding occurs for values shorter than\n                N characters. If the optional\n                length N is not given, MySQL\n                calculates the maximum length from the expression. If\n                the supplied or calculated length is greater than an\n                internal threshold, the result type is\n                TEXT. If the length is still too\n                long, the result type is LONGTEXT.\n              \n                With no charset_info clause,\n                CHAR produces a string with the\n                default character set. To specify the character set\n                explicitly, these\n                charset_info values are\n                permitted:\n\n\n\nCHARACTER SET\n                    charset_name:\n                    Produces a string with the given character set.\n                  \nASCII: Shorthand for\n                    CHARACTER SET latin1.\n                  \nUNICODE: Shorthand for\n                    CHARACTER SET ucs2.\n\n\n\n                In all cases, the string has the character set default\n                collation.\n              \nDATE\n\n                Produces a DATE value.\n              \nDATETIME[(M)]\n\n                Produces a DATETIME\n                value. If the optional M\n                value is given, it specifies the fractional seconds\n                precision.\n              \nDECIMAL[(M[,D])]\n\n                Produces a DECIMAL value.\n                If the optional M and\n                D values are given, they\n                specify the maximum number of digits (the precision) and\n                the number of digits following the decimal point (the\n                scale). If D is omitted, 0 is\n                assumed. If M is omitted, 10\n                is assumed.\n              \nDOUBLE\n\n                Produces a DOUBLE result.\n              \nFLOAT[(p)]\n\n                If the precision p is not\n                specified, produces a result of type\n                FLOAT. If\n                p is provided and 0 <=\n                < p <= 24, the result\n                is of type FLOAT. If 25 <=\n                p <= 53, the result is of\n                type DOUBLE. If\n                p < 0 or\n                p > 53, an error is\n                returned.\n              \nJSON\n\n                Produces a JSON value.\n                For details on the rules for conversion of values\n                between JSON and other\n                types, see Comparison and Ordering of JSON Values.\n              \nNCHAR[(N)]\n\n                Like CHAR, but produces a string with\n                the national character set. See\n                Section\u00a012.3.7, \u201cThe National Character Set\u201d.\n              \n                Unlike CHAR, NCHAR\n                does not permit trailing character set information to be\n                specified.\n              \nREAL\n\n                Produces a result of type\n                REAL. This is actually\n                FLOAT if the\n                REAL_AS_FLOAT SQL mode\n                is enabled; otherwise the result is of type\n                DOUBLE.\n              \nSIGNED [INTEGER]\n\n                Produces a signed BIGINT\n                value.\n              \nspatial_type\n\nCAST() and\n                CONVERT() support casting\n                geometry values from one spatial type to another, for\n                certain combinations of spatial types. For details, see\n                Cast Operations on Spatial Types.\n              \nTIME[(M)]\n\n                Produces a TIME value. If\n                the optional M value is\n                given, it specifies the fractional seconds precision.\n              \nUNSIGNED [INTEGER]\n\n                Produces an unsigned\n                BIGINT value.\n              \nYEAR\n\n                Produces a YEAR value.\n                These rules govern conversion to YEAR\n                as follows:\n\n\n\n                    For a four-digit number in the range 1901-2155\n                    inclusive, or for a string which can be interpreted\n                    as a four-digit number in this range, return the\n                    corresponding YEAR value.\n                  \n                    For a number consisting of one or two digits, or for\n                    a string which can be interpreted as such a number,\n                    return a YEAR value as follows:\n\n\n\n                        If the number is in the range 1-69 inclusive,\n                        add 2000 and return the sum.\n                      \n                        If the number is in the range 70-99 inclusive,\n                        add 1900 and return the sum.\n\n\n\n                    For a string which evaluates to 0, return 2000.\n                  \n                    For the number 0, return 0.\n                  \n                    For a DATE,\n                    DATETIME, or\n                    TIMESTAMP value,\n                    return the YEAR portion of the\n                    value. For a TIME\n                    value, return the current year.\n                  \n                    If you do not specify the type of a\n                    TIME argument, you may get a\n                    different result from what you expect, as shown\n                    here:\n                  Press CTRL+C to copy mysql> SELECT CAST(\"11:35:00\" AS YEAR), CAST(TIME \"11:35:00\" AS YEAR);\n+--------------------------+-------------------------------+\n| CAST(\"11:35:00\" AS YEAR) | CAST(TIME \"11:35:00\" AS YEAR) |\n+--------------------------+-------------------------------+\n|                     2011 |                          2021 |\n+--------------------------+-------------------------------+\n                    If the argument is of type\n                    DECIMAL,\n                    DOUBLE,\n                    DECIMAL, or\n                    REAL, round the value\n                    to the nearest integer, then attempt to cast the\n                    value to YEAR using the rules for\n                    integer values, as shown here:\n                  Press CTRL+C to copy mysql> SELECT CAST(1944.35 AS YEAR), CAST(1944.50 AS YEAR);\n+-----------------------+-----------------------+\n| CAST(1944.35 AS YEAR) | CAST(1944.50 AS YEAR) |\n+-----------------------+-----------------------+\n|                  1944 |                  1945 |\n+-----------------------+-----------------------+\n\nmysql> SELECT CAST(66.35 AS YEAR), CAST(66.50 AS YEAR);\n+---------------------+---------------------+\n| CAST(66.35 AS YEAR) | CAST(66.50 AS YEAR) |\n+---------------------+---------------------+\n|                2066 |                2067 |\n+---------------------+---------------------+\n                    An argument of type\n                    GEOMETRY cannot be\n                    converted to YEAR.\n                  \n                    For a value that cannot be successfully converted to\n                    YEAR, return\n                    NULL.\n\n\n\n                A string value containing non-numeric characters which\n                must be truncated prior to conversion raises a warning,\n                as shown here:\n              Press CTRL+C to copy mysql> SELECT CAST(\"1979aaa\" AS YEAR);\n+-------------------------+\n| CAST(\"1979aaa\" AS YEAR) |\n+-------------------------+\n|                    1979 |\n+-------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect YEAR value: '1979aaa' |\n+---------+------+-------------------------------------------+\n", "\nInnoDB allows the use of an\n            additional ARRAY keyword for creating a\n            multi-valued index on a JSON\n            array as part of CREATE\n            INDEX, CREATE\n            TABLE, and ALTER\n            TABLE statements. ARRAY is not\n            supported except when used to create a multi-valued index in\n            one of these statements, in which case it is required. The\n            column being indexed must be a column of type\n            JSON. With ARRAY, the\n            type following the\n            AS keyword may specify any of the types\n            supported by CAST(), with the exceptions\n            of BINARY, JSON, and\n            YEAR. For syntax information and\n            examples, as well as other relevant information, see\n            Multi-Valued Indexes.\n", "\n\nNote\n\n\nCONVERT(), unlike\n              CAST(), does\n              not support multi-valued index\n              creation or the ARRAY keyword.\n\n", "\nCAST() supports retrieval of a\n            TIMESTAMP value as being in\n            UTC, using the AT TIMEZONE operator. The\n            only supported time zone is UTC; this can be specified as\n            either of '+00:00' or\n            'UTC'. The only return type supported by\n            this syntax is DATETIME, with an optional\n            precision specifier in the range of 0 to 6, inclusive.\n          ", "\nTIMESTAMP values that use timezone\n            offsets are also supported.\n          ", "Press CTRL+C to copy mysql> SELECT @@system_time_zone;\n+--------------------+\n| @@system_time_zone |\n+--------------------+\n| EDT                |\n+--------------------+\n1 row in set (0.00 sec)\n\nmysql> CREATE TABLE tz (c TIMESTAMP);\nQuery OK, 0 rows affected (0.41 sec)\n\nmysql> INSERT INTO tz VALUES\n    ->     ROW(CURRENT_TIMESTAMP),\n    ->     ROW('2020-07-28 14:50:15+1:00');\nQuery OK, 1 row affected (0.08 sec)\n\nmysql> TABLE tz;\n+---------------------+\n| c                   |\n+---------------------+\n| 2020-07-28 09:22:41 |\n| 2020-07-28 09:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE '+00:00' AS DATETIME) AS u FROM tz;\n+---------------------+\n| u                   |\n+---------------------+\n| 2020-07-28 13:22:41 |\n| 2020-07-28 13:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE 'UTC' AS DATETIME(2)) AS u FROM tz;\n+------------------------+\n| u                      |\n+------------------------+\n| 2020-07-28 13:22:41.00 |\n| 2020-07-28 13:50:15.00 |\n+------------------------+\n2 rows in set (0.00 sec)", "\n            If you use 'UTC' as the time zone\n            specifier with this form of CAST(), and\n            the server raises an error such as Unknown or\n            incorrect time zone: 'UTC', you may need to\n            install the MySQL time zone tables (see\n            Populating the Time Zone Tables).\n          ", "\nAT TIME ZONE does not support the\n            ARRAY keyword, and is not supported by\n            the CONVERT() function.\n          "], "Examples": ["mysql> SELECT CAST(\"11:35:00\" AS YEAR), CAST(TIME \"11:35:00\" AS YEAR);\n+--------------------------+-------------------------------+\n| CAST(\"11:35:00\" AS YEAR) | CAST(TIME \"11:35:00\" AS YEAR) |\n+--------------------------+-------------------------------+\n|                     2011 |                          2021 |\n+--------------------------+-------------------------------+", "mysql> SELECT CAST(1944.35 AS YEAR), CAST(1944.50 AS YEAR);\n+-----------------------+-----------------------+\n| CAST(1944.35 AS YEAR) | CAST(1944.50 AS YEAR) |\n+-----------------------+-----------------------+\n|                  1944 |                  1945 |\n+-----------------------+-----------------------+\n\nmysql> SELECT CAST(66.35 AS YEAR), CAST(66.50 AS YEAR);\n+---------------------+---------------------+\n| CAST(66.35 AS YEAR) | CAST(66.50 AS YEAR) |\n+---------------------+---------------------+\n|                2066 |                2067 |\n+---------------------+---------------------+", "mysql> SELECT CAST(\"1979aaa\" AS YEAR);\n+-------------------------+\n| CAST(\"1979aaa\" AS YEAR) |\n+-------------------------+\n|                    1979 |\n+-------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect YEAR value: '1979aaa' |\n+---------+------+-------------------------------------------+", "mysql> SELECT @@system_time_zone;\n+--------------------+\n| @@system_time_zone |\n+--------------------+\n| EDT                |\n+--------------------+\n1 row in set (0.00 sec)\n\nmysql> CREATE TABLE tz (c TIMESTAMP);\nQuery OK, 0 rows affected (0.41 sec)\n\nmysql> INSERT INTO tz VALUES\n    ->     ROW(CURRENT_TIMESTAMP),\n    ->     ROW('2020-07-28 14:50:15+1:00');\nQuery OK, 1 row affected (0.08 sec)\n\nmysql> TABLE tz;\n+---------------------+\n| c                   |\n+---------------------+\n| 2020-07-28 09:22:41 |\n| 2020-07-28 09:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE '+00:00' AS DATETIME) AS u FROM tz;\n+---------------------+\n| u                   |\n+---------------------+\n| 2020-07-28 13:22:41 |\n| 2020-07-28 13:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE 'UTC' AS DATETIME(2)) AS u FROM tz;\n+------------------------+\n| u                      |\n+------------------------+\n| 2020-07-28 13:22:41.00 |\n| 2020-07-28 13:50:15.00 |\n+------------------------+\n2 rows in set (0.00 sec)"], "Category": ["Built-In Functions", "Cast Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html#function_cast"], "Feature Type": ["Function"], "index": 455, "vector_txt": "455:Feature: CAST(expr AS\n            type [ARRAY])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["BENCHMARK(count,expr)"], "Description": ["Repeatedly execute an expression", "\nBENCHMARK(count,expr)\n", "\n          The BENCHMARK() function\n          executes the expression expr\n          repeatedly count times. It may be\n          used to time how quickly MySQL processes the expression. The\n          result value is 0, or\n          NULL for inappropriate arguments such as a\n          NULL or negative repeat count.\n        ", "\n          The intended use is from within the mysql\n          client, which reports query execution times:\n        ", "Press CTRL+C to copy mysql> SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));\n+---------------------------------------------------+\n| BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye')) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+\n1 row in set (4.74 sec)", "\n          The time reported is elapsed time on the client end, not CPU\n          time on the server end. It is advisable to execute\n          BENCHMARK() several times, and\n          to interpret the result with regard to how heavily loaded the\n          server machine is.\n        ", "\nBENCHMARK() is intended for\n          measuring the runtime performance of scalar expressions, which\n          has some significant implications for the way that you use it\n          and interpret the results:\n", "\n\n              Only scalar expressions can be used. Although the\n              expression can be a subquery, it must return a single\n              column and at most a single row. For example,\n              BENCHMARK(10, (SELECT * FROM\n              t)) fails if the table t has\n              more than one column or more than one row.\n            \n              Executing a SELECT\n              expr statement\n              N times differs from executing\n              SELECT BENCHMARK(N,\n              expr) in terms of the\n              amount of overhead involved. The two have very different\n              execution profiles and you should not expect them to take\n              the same amount of time. The former involves the parser,\n              optimizer, table locking, and runtime evaluation\n              N times each. The latter\n              involves only runtime evaluation\n              N times, and all the other\n              components just once. Memory structures already allocated\n              are reused, and runtime optimizations such as local\n              caching of results already evaluated for aggregate\n              functions can alter the results. Use of\n              BENCHMARK() thus measures\n              performance of the runtime component by giving more weight\n              to that component and removing the \u201cnoise\u201d\n              introduced by the network, parser, optimizer, and so\n              forth.\n\n"], "Examples": ["mysql> SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));\n+---------------------------------------------------+\n| BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye')) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+\n1 row in set (4.74 sec)"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_benchmark"], "Feature Type": ["Function"], "index": 456, "vector_txt": "456:Feature: BENCHMARK(count,expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["CHARSET(str)"], "Description": ["Return the character set of the argument", "\nCHARSET(str)\n", "\n          Returns the character set of the string argument, or\n          NULL if the argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT CHARSET('abc');\n        -> 'utf8mb3'\nmysql> SELECT CHARSET(CONVERT('abc' USING latin1));\n        -> 'latin1'\nmysql> SELECT CHARSET(USER());\n        -> 'utf8mb3'"], "Examples": ["mysql> SELECT CHARSET('abc');\n        -> 'utf8mb3'\nmysql> SELECT CHARSET(CONVERT('abc' USING latin1));\n        -> 'latin1'\nmysql> SELECT CHARSET(USER());\n        -> 'utf8mb3'"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_charset"], "Feature Type": ["Function"], "index": 457, "vector_txt": "457:Feature: CHARSET(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["COERCIBILITY(str)"], "Description": ["Return the collation coercibility value of the string argument", "\nCOERCIBILITY(str)\n", "\n          Returns the collation coercibility value of the string\n          argument.\n        ", "Press CTRL+C to copy mysql> SELECT COERCIBILITY('abc' COLLATE utf8mb4_swedish_ci);\n        -> 0\nmysql> SELECT COERCIBILITY(USER());\n        -> 3\nmysql> SELECT COERCIBILITY('abc');\n        -> 4\nmysql> SELECT COERCIBILITY(1000);\n        -> 5", "\n          The return values have the meanings shown in the following\n          table. Lower values have higher precedence.\n", "\n\nCoercibility\nMeaning\nExample\n\n0\nExplicit collation\nValue with COLLATE clause\n\n1\nNo collation\nConcatenation of strings with different collations\n\n2\nImplicit collation\nColumn value, stored routine parameter or local variable\n\n3\nSystem constant\nUSER() return value\n\n4\nCoercible\nLiteral string\n\n5\nNumeric\nNumeric or temporal value\n\n6\nIgnorable\nNULL or an expression derived from\n                NULL\n\n", "\n          For more information, see\n          Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n        "], "Examples": ["mysql> SELECT COERCIBILITY('abc' COLLATE utf8mb4_swedish_ci);\n        -> 0\nmysql> SELECT COERCIBILITY(USER());\n        -> 3\nmysql> SELECT COERCIBILITY('abc');\n        -> 4\nmysql> SELECT COERCIBILITY(1000);\n        -> 5"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_coercibility"], "Feature Type": ["Function"], "index": 458, "vector_txt": "458:Feature: COERCIBILITY(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["COLLATION(str)"], "Description": ["Return the collation of the string argument", "\nCOLLATION(str)\n", "\n          Returns the collation of the string argument.\n        ", "Press CTRL+C to copy mysql> SELECT COLLATION('abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_utf8mb4'abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_latin1'abc');\n        -> 'latin1_swedish_ci'"], "Examples": ["mysql> SELECT COLLATION('abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_utf8mb4'abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_latin1'abc');\n        -> 'latin1_swedish_ci'"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_collation"], "Feature Type": ["Function"], "index": 459, "vector_txt": "459:Feature: COLLATION(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["CONNECTION_ID()"], "Description": ["Return the connection ID (thread ID) for the connection", "\nCONNECTION_ID()\n", "\n          Returns the connection ID (thread ID) for the connection.\n          Every connection has an ID that is unique among the set of\n          currently connected clients.\n        ", "\n          The value returned by\n          CONNECTION_ID() is the same\n          type of value as displayed in the ID column\n          of the Information Schema\n          PROCESSLIST table, the\n          Id column of SHOW\n          PROCESSLIST output, and the\n          PROCESSLIST_ID column of the Performance\n          Schema threads table.\n        ", "Press CTRL+C to copy mysql> SELECT CONNECTION_ID();\n        -> 23786", "\n\nWarning\n\n\n            Changing the session value of the\n            pseudo_thread_id system\n            variable changes the value returned by the\n            CONNECTION_ID() function.\n\n"], "Examples": ["mysql> SELECT CONNECTION_ID();\n        -> 23786"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_connection-id"], "Feature Type": ["Function"], "index": 460, "vector_txt": "460:Feature: CONNECTION_ID()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["CURRENT_ROLE()"], "Description": ["Return the current active roles", "\nCURRENT_ROLE()\n", "\n          Returns a utf8mb3 string containing the\n          current active roles for the current session, separated by\n          commas, or NONE if there are none. The\n          value reflects the setting of the\n          sql_quote_show_create system\n          variable.\n        ", "\n          Suppose that an account is granted roles as follows:\n        ", "Press CTRL+C to copy GRANT 'r1', 'r2' TO 'u1'@'localhost';\nSET DEFAULT ROLE ALL TO 'u1'@'localhost';", "\n          In sessions for u1, the initial\n          CURRENT_ROLE() value names the\n          default account roles. Using SET\n          ROLE changes that:\n        ", "Press CTRL+C to copy mysql> SELECT CURRENT_ROLE();\n+-------------------+\n| CURRENT_ROLE()    |\n+-------------------+\n| `r1`@`%`,`r2`@`%` |\n+-------------------+\nmysql> SET ROLE 'r1'; SELECT CURRENT_ROLE();\n+----------------+\n| CURRENT_ROLE() |\n+----------------+\n| `r1`@`%`       |\n+----------------+"], "Examples": ["GRANT 'r1', 'r2' TO 'u1'@'localhost';\nSET DEFAULT ROLE ALL TO 'u1'@'localhost';", "mysql> SELECT CURRENT_ROLE();\n+-------------------+\n| CURRENT_ROLE()    |\n+-------------------+\n| `r1`@`%`,`r2`@`%` |\n+-------------------+\nmysql> SET ROLE 'r1'; SELECT CURRENT_ROLE();\n+----------------+\n| CURRENT_ROLE() |\n+----------------+\n| `r1`@`%`       |\n+----------------+"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_current-role"], "Feature Type": ["Function"], "index": 461, "vector_txt": "461:Feature: CURRENT_ROLE()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["CURRENT_USER"], "Description": ["The authenticated user name and host name", "\nCURRENT_USER,\n          CURRENT_USER()\n", "\n          Returns the user name and host name combination for the MySQL\n          account that the server used to authenticate the current\n          client. This account determines your access privileges. The\n          return value is a string in the utf8mb3\n          character set.\n        ", "\n          The value of CURRENT_USER() can\n          differ from the value of\n          USER().\n        ", "Press CTRL+C to copy mysql> SELECT USER();\n        -> 'davida@localhost'\nmysql> SELECT * FROM mysql.user;\nERROR 1044: Access denied for user ''@'localhost' to\ndatabase 'mysql'\nmysql> SELECT CURRENT_USER();\n        -> '@localhost'", "\n          The example illustrates that although the client specified a\n          user name of davida (as indicated by the\n          value of the USER() function),\n          the server authenticated the client using an anonymous user\n          account (as seen by the empty user name part of the\n          CURRENT_USER() value). One way\n          this might occur is that there is no account listed in the\n          grant tables for davida.\n        ", "\n          Within a stored program or view,\n          CURRENT_USER() returns the\n          account for the user who defined the object (as given by its\n          DEFINER value) unless defined with the\n          SQL SECURITY INVOKER characteristic. In the\n          latter case, CURRENT_USER()\n          returns the object's invoker.\n        ", "\n          Triggers and events have no option to define the SQL\n          SECURITY characteristic, so for these objects,\n          CURRENT_USER() returns the\n          account for the user who defined the object. To return the\n          invoker, use USER() or\n          SESSION_USER().\n        ", "\n          The following statements support use of the\n          CURRENT_USER() function to take\n          the place of the name of (and, possibly, a host for) an\n          affected user or a definer; in such cases,\n          CURRENT_USER() is expanded\n          where and as needed:\n", "\n\nDROP USER\n\nRENAME USER\n\nGRANT\n\nREVOKE\n\nCREATE FUNCTION\n\nCREATE PROCEDURE\n\nCREATE TRIGGER\n\nCREATE EVENT\n\nCREATE VIEW\n\nALTER EVENT\n\nALTER VIEW\n\nSET PASSWORD\n\n", "\n          For information about the implications that this expansion of\n          CURRENT_USER() has for\n          replication, see\n          Section\u00a019.5.1.8, \u201cReplication of CURRENT_USER()\u201d.\n        ", "\n          This function can be used for the default value of a\n          VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (CURRENT_USER()));"], "Examples": ["mysql> SELECT USER();\n        -> 'davida@localhost'\nmysql> SELECT * FROM mysql.user;\nERROR 1044: Access denied for user ''@'localhost' to\ndatabase 'mysql'\nmysql> SELECT CURRENT_USER();\n        -> '@localhost'", "CREATE TABLE t (c VARCHAR(288) DEFAULT (CURRENT_USER()));"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_current-user"], "Feature Type": ["Function"], "index": 462, "vector_txt": "462:Feature: CURRENT_USER\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["DATABASE()"], "Description": ["Return the default (current) database name", "\nDATABASE()\n", "\n          Returns the default (current) database name as a string in the\n          utf8mb3 character set. If there is no\n          default database, DATABASE()\n          returns NULL. Within a stored routine, the\n          default database is the database that the routine is\n          associated with, which is not necessarily the same as the\n          database that is the default in the calling context.\n        ", "Press CTRL+C to copy mysql> SELECT DATABASE();\n        -> 'test'", "\n          If there is no default database,\n          DATABASE() returns\n          NULL.\n        "], "Examples": ["mysql> SELECT DATABASE();\n        -> 'test'"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_database"], "Feature Type": ["Function"], "index": 463, "vector_txt": "463:Feature: DATABASE()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["FOUND_ROWS()"], "Description": ["For a SELECT with a LIMIT clause, the number of rows that would be", "\nFOUND_ROWS()\n", "\n\nNote\n\n\n            The SQL_CALC_FOUND_ROWS query modifier\n            and accompanying FOUND_ROWS()\n            function are deprecated; expect them to be removed in a\n            future version of MySQL. Execute the query with\n            LIMIT, and then a second query with\n            COUNT(*) and without\n            LIMIT to determine whether there are\n            additional rows. For example, instead of these queries:\n          Press CTRL+C to copy SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT FOUND_ROWS();\n            Use these queries instead:\n          Press CTRL+C to copy SELECT * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT COUNT(*) FROM tbl_name WHERE id > 100;\nCOUNT(*) is subject to\n            certain optimizations.\n            SQL_CALC_FOUND_ROWS causes some\n            optimizations to be disabled.\n\n", "\n          A SELECT statement may include\n          a LIMIT clause to restrict the number of\n          rows the server returns to the client. In some cases, it is\n          desirable to know how many rows the statement would have\n          returned without the LIMIT, but without\n          running the statement again. To obtain this row count, include\n          an SQL_CALC_FOUND_ROWS option in the\n          SELECT statement, and then\n          invoke FOUND_ROWS() afterward:\n        ", "Press CTRL+C to copy mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n    -> WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();", "\n          The second SELECT returns a\n          number indicating how many rows the first\n          SELECT would have returned had\n          it been written without the LIMIT clause.\n        ", "\n          In the absence of the SQL_CALC_FOUND_ROWS\n          option in the most recent successful\n          SELECT statement,\n          FOUND_ROWS() returns the number\n          of rows in the result set returned by that statement. If the\n          statement includes a LIMIT clause,\n          FOUND_ROWS() returns the number\n          of rows up to the limit. For example,\n          FOUND_ROWS() returns 10 or 60,\n          respectively, if the statement includes LIMIT\n          10 or LIMIT 50, 10.\n        ", "\n          The row count available through\n          FOUND_ROWS() is transient and\n          not intended to be available past the statement following the\n          SELECT SQL_CALC_FOUND_ROWS statement. If\n          you need to refer to the value later, save it:\n        ", "Press CTRL+C to copy mysql> SELECT SQL_CALC_FOUND_ROWS * FROM ... ;\nmysql> SET @rows = FOUND_ROWS();", "\n          If you are using SELECT\n          SQL_CALC_FOUND_ROWS, MySQL must calculate how many\n          rows are in the full result set. However, this is faster than\n          running the query again without LIMIT,\n          because the result set need not be sent to the client.\n        ", "\nSQL_CALC_FOUND_ROWS and\n          FOUND_ROWS() can be useful in\n          situations when you want to restrict the number of rows that a\n          query returns, but also determine the number of rows in the\n          full result set without running the query again. An example is\n          a Web script that presents a paged display containing links to\n          the pages that show other sections of a search result. Using\n          FOUND_ROWS() enables you to\n          determine how many other pages are needed for the rest of the\n          result.\n        ", "\n          The use of SQL_CALC_FOUND_ROWS and\n          FOUND_ROWS() is more complex\n          for UNION statements than for\n          simple SELECT statements,\n          because LIMIT may occur at multiple places\n          in a UNION. It may be applied\n          to individual SELECT statements\n          in the UNION, or global to the\n          UNION result as a whole.\n        ", "\n          The intent of SQL_CALC_FOUND_ROWS for\n          UNION is that it should return\n          the row count that would be returned without a global\n          LIMIT. The conditions for use of\n          SQL_CALC_FOUND_ROWS with\n          UNION are:\n", "\n\n              The SQL_CALC_FOUND_ROWS keyword must\n              appear in the first SELECT\n              of the UNION.\n            \n              The value of FOUND_ROWS()\n              is exact only if\n              UNION ALL\n              is used. If UNION without\n              ALL is used, duplicate removal occurs\n              and the value of\n              FOUND_ROWS() is only\n              approximate.\n            \n              If no LIMIT is present in the\n              UNION,\n              SQL_CALC_FOUND_ROWS is ignored and\n              returns the number of rows in the temporary table that is\n              created to process the\n              UNION.\n\n", "\n          Beyond the cases described here, the behavior of\n          FOUND_ROWS() is undefined (for\n          example, its value following a\n          SELECT statement that fails\n          with an error).\n", "\n\nImportant\n\n\nFOUND_ROWS() is not\n            replicated reliably using statement-based replication. This\n            function is automatically replicated using row-based\n            replication.\n\n"], "Examples": ["SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT FOUND_ROWS();", "SELECT * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT COUNT(*) FROM tbl_name WHERE id > 100;", "mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n    -> WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();", "mysql> SELECT SQL_CALC_FOUND_ROWS * FROM ... ;\nmysql> SET @rows = FOUND_ROWS();"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_found-rows"], "Feature Type": ["Function"], "index": 464, "vector_txt": "464:Feature: FOUND_ROWS()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["ICU_VERSION()"], "Description": ["ICU library version", "\nICU_VERSION()\n", "\n          The version of the International Components for Unicode (ICU)\n          library used to support regular expression operations (see\n          Section\u00a014.8.2, \u201cRegular Expressions\u201d). This function is primarily intended\n          for use in test cases.\n        "], "Examples": [], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_icu-version"], "Feature Type": ["Function"], "index": 465, "vector_txt": "465:Feature: ICU_VERSION()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["CEIL(X)"], "Description": ["Return the smallest integer value not less than the argument", "\nCEIL(X)\n", "\nCEIL() is a synonym for\n            CEILING().\n          "], "Examples": [], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ceil"], "Feature Type": ["Function"], "index": 466, "vector_txt": "466:Feature: CEIL(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["LAST_INSERT_ID()"], "Description": ["Value of the AUTOINCREMENT column for the last INSERT", "\nLAST_INSERT_ID(),\n          LAST_INSERT_ID(expr)\n", "\n          With no argument,\n          LAST_INSERT_ID() returns a\n          BIGINT UNSIGNED (64-bit) value representing\n          the first automatically generated value successfully inserted\n          for an AUTO_INCREMENT column as a result of\n          the most recently executed\n          INSERT statement. The value of\n          LAST_INSERT_ID() remains\n          unchanged if no rows are successfully inserted.\n        ", "\n          With an argument,\n          LAST_INSERT_ID() returns an\n          unsigned integer, or NULL if the argument\n          is NULL.\n        ", "\n          For example, after inserting a row that generates an\n          AUTO_INCREMENT value, you can get the value\n          like this:\n        ", "Press CTRL+C to copy mysql> SELECT LAST_INSERT_ID();\n        -> 195", "\n          The currently executing statement does not affect the value of\n          LAST_INSERT_ID(). Suppose that\n          you generate an AUTO_INCREMENT value with\n          one statement, and then refer to\n          LAST_INSERT_ID() in a\n          multiple-row INSERT statement\n          that inserts rows into a table with its own\n          AUTO_INCREMENT column. The value of\n          LAST_INSERT_ID() remains stable\n          in the second statement; its value for the second and later\n          rows is not affected by the earlier row insertions. (You\n          should be aware that, if you mix references to\n          LAST_INSERT_ID() and\n          LAST_INSERT_ID(expr),\n          the effect is undefined.)\n        ", "\n          If the previous statement returned an error, the value of\n          LAST_INSERT_ID() is undefined.\n          For transactional tables, if the statement is rolled back due\n          to an error, the value of\n          LAST_INSERT_ID() is left\n          undefined. For manual\n          ROLLBACK,\n          the value of LAST_INSERT_ID()\n          is not restored to that before the transaction; it remains as\n          it was at the point of the\n          ROLLBACK.\n        ", "\n          Within the body of a stored routine (procedure or function) or\n          a trigger, the value of\n          LAST_INSERT_ID() changes the\n          same way as for statements executed outside the body of these\n          kinds of objects. The effect of a stored routine or trigger\n          upon the value of\n          LAST_INSERT_ID() that is seen\n          by following statements depends on the kind of routine:\n", "\n\n              If a stored procedure executes statements that change the\n              value of LAST_INSERT_ID(),\n              the changed value is seen by statements that follow the\n              procedure call.\n            \n              For stored functions and triggers that change the value,\n              the value is restored when the function or trigger ends,\n              so statements coming after it do not see a changed value.\n\n", "\n          The ID that was generated is maintained in the server on a\n          per-connection basis. This means that the\n          value returned by the function to a given client is the first\n          AUTO_INCREMENT value generated for most\n          recent statement affecting an\n          AUTO_INCREMENT column by that\n          client. This value cannot be affected by other\n          clients, even if they generate\n          AUTO_INCREMENT values of their own. This\n          behavior ensures that each client can retrieve its own ID\n          without concern for the activity of other clients, and without\n          the need for locks or transactions.\n        ", "\n          The value of LAST_INSERT_ID()\n          is not changed if you set the\n          AUTO_INCREMENT column of a row to a\n          non-\u201cmagic\u201d value (that is, a value that is not\n          NULL and not 0).\n", "\n\nImportant\n\n\n            If you insert multiple rows using a single\n            INSERT statement,\n            LAST_INSERT_ID() returns the\n            value generated for the first inserted\n            row only. The reason for this is to\n            make it possible to reproduce easily the same\n            INSERT statement against some\n            other server.\n\n", "\n          For example:\n        ", "Press CTRL+C to copy mysql> USE test;\n\nmysql> CREATE TABLE t (\n       id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\n       name VARCHAR(10) NOT NULL\n       );\n\nmysql> INSERT INTO t VALUES (NULL, 'Bob');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nmysql> INSERT INTO t VALUES\n       (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n|  2 | Mary |\n|  3 | Jane |\n|  4 | Lisa |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                2 |\n+------------------+", "\n          Although the second INSERT\n          statement inserted three new rows into t,\n          the ID generated for the first of these rows was\n          2, and it is this value that is returned by\n          LAST_INSERT_ID() for the\n          following SELECT statement.\n        ", "\n          If you use INSERT\n          IGNORE and the row is ignored, the\n          LAST_INSERT_ID() remains\n          unchanged from the current value (or 0 is returned if the\n          connection has not yet performed a successful\n          INSERT) and, for non-transactional tables,\n          the AUTO_INCREMENT counter is not\n          incremented. For InnoDB tables, the\n          AUTO_INCREMENT counter is incremented if\n          innodb_autoinc_lock_mode is\n          set to 1 or 2, as\n          demonstrated in the following example:\n        ", "Press CTRL+C to copy mysql> USE test;\n\nmysql> SELECT @@innodb_autoinc_lock_mode;\n+----------------------------+\n| @@innodb_autoinc_lock_mode |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nmysql> CREATE TABLE `t` (\n       `id` INT(11) NOT NULL AUTO_INCREMENT,\n       `val` INT(11) DEFAULT NULL,\n       PRIMARY KEY (`id`),\n       UNIQUE KEY `i1` (`val`)\n       ) ENGINE=InnoDB;\n\n# Insert two rows\n\nmysql> INSERT INTO t (val) VALUES (1),(2);\n\n# With auto_increment_offset=1, the inserted rows\n# result in an AUTO_INCREMENT value of 3\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# LAST_INSERT_ID() returns the first automatically generated\n# value that is successfully inserted for the AUTO_INCREMENT column\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\n# The attempted insertion of duplicate rows fail but errors are ignored\n\nmysql> INSERT IGNORE INTO t (val) VALUES (1),(2);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 2  Duplicates: 2  Warnings: 0\n\n# With innodb_autoinc_lock_mode=1, the AUTO_INCREMENT counter\n# is incremented for the ignored rows\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# The LAST_INSERT_ID is unchanged because the previous insert was unsuccessful\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+", "\n          For more information, see\n          Section\u00a017.6.1.6, \u201cAUTO_INCREMENT Handling in InnoDB\u201d.\n        ", "\n          If expr is given as an argument to\n          LAST_INSERT_ID(), the value of\n          the argument is returned by the function and is remembered as\n          the next value to be returned by\n          LAST_INSERT_ID(). This can be\n          used to simulate sequences:\n", "\n\n              Create a table to hold the sequence counter and initialize\n              it:\n            Press CTRL+C to copy mysql> CREATE TABLE sequence (id INT NOT NULL);\nmysql> INSERT INTO sequence VALUES (0);\n              Use the table to generate sequence numbers like this:\n            Press CTRL+C to copy mysql> UPDATE sequence SET id=LAST_INSERT_ID(id+1);\nmysql> SELECT LAST_INSERT_ID();\n              The UPDATE statement\n              increments the sequence counter and causes the next call\n              to LAST_INSERT_ID() to\n              return the updated value. The\n              SELECT statement retrieves\n              that value. The\n              mysql_insert_id() C API\n              function can also be used to get the value. See\n              mysql_insert_id().\n\n", "\n          You can generate sequences without calling\n          LAST_INSERT_ID(), but the\n          utility of using the function this way is that the ID value is\n          maintained in the server as the last automatically generated\n          value. It is multi-user safe because multiple clients can\n          issue the UPDATE statement and\n          get their own sequence value with the\n          SELECT statement (or\n          mysql_insert_id()), without\n          affecting or being affected by other clients that generate\n          their own sequence values.\n        ", "\n          Note that mysql_insert_id() is\n          only updated after INSERT and\n          UPDATE statements, so you\n          cannot use the C API function to retrieve the value for\n          LAST_INSERT_ID(expr)\n          after executing other SQL statements like\n          SELECT or\n          SET.\n        "], "Examples": ["mysql> SELECT LAST_INSERT_ID();\n        -> 195", "mysql> USE test;\n\nmysql> CREATE TABLE t (\n       id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\n       name VARCHAR(10) NOT NULL\n       );\n\nmysql> INSERT INTO t VALUES (NULL, 'Bob');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nmysql> INSERT INTO t VALUES\n       (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n|  2 | Mary |\n|  3 | Jane |\n|  4 | Lisa |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                2 |\n+------------------+", "mysql> USE test;\n\nmysql> SELECT @@innodb_autoinc_lock_mode;\n+----------------------------+\n| @@innodb_autoinc_lock_mode |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nmysql> CREATE TABLE `t` (\n       `id` INT(11) NOT NULL AUTO_INCREMENT,\n       `val` INT(11) DEFAULT NULL,\n       PRIMARY KEY (`id`),\n       UNIQUE KEY `i1` (`val`)\n       ) ENGINE=InnoDB;\n\n# Insert two rows\n\nmysql> INSERT INTO t (val) VALUES (1),(2);\n\n# With auto_increment_offset=1, the inserted rows\n# result in an AUTO_INCREMENT value of 3\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# LAST_INSERT_ID() returns the first automatically generated\n# value that is successfully inserted for the AUTO_INCREMENT column\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\n# The attempted insertion of duplicate rows fail but errors are ignored\n\nmysql> INSERT IGNORE INTO t (val) VALUES (1),(2);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 2  Duplicates: 2  Warnings: 0\n\n# With innodb_autoinc_lock_mode=1, the AUTO_INCREMENT counter\n# is incremented for the ignored rows\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# The LAST_INSERT_ID is unchanged because the previous insert was unsuccessful\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+", "mysql> CREATE TABLE sequence (id INT NOT NULL);\nmysql> INSERT INTO sequence VALUES (0);", "mysql> UPDATE sequence SET id=LAST_INSERT_ID(id+1);\nmysql> SELECT LAST_INSERT_ID();"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_last-insert-id"], "Feature Type": ["Function"], "index": 467, "vector_txt": "467:Feature: LAST_INSERT_ID()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["ROLES_GRAPHML()"], "Description": ["Return a GraphML document representing memory role subgraphs", "\nROLES_GRAPHML()\n", "\n          Returns a utf8mb3 string containing a\n          GraphML document representing memory role subgraphs. The\n          ROLE_ADMIN privilege (or the\n          deprecated SUPER privilege) is\n          required to see content in the\n          <graphml> element. Otherwise, the\n          result shows only an empty element:\n        ", "Press CTRL+C to copy mysql> SELECT ROLES_GRAPHML();\n+---------------------------------------------------+\n| ROLES_GRAPHML()                                   |\n+---------------------------------------------------+\n| <?xml version=\"1.0\" encoding=\"UTF-8\"?><graphml /> |\n+---------------------------------------------------+"], "Examples": ["mysql> SELECT ROLES_GRAPHML();\n+---------------------------------------------------+\n| ROLES_GRAPHML()                                   |\n+---------------------------------------------------+\n| <?xml version=\"1.0\" encoding=\"UTF-8\"?><graphml /> |\n+---------------------------------------------------+"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_roles-graphml"], "Feature Type": ["Function"], "index": 468, "vector_txt": "468:Feature: ROLES_GRAPHML()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["ROW_COUNT()"], "Description": ["The number of rows updated", "\nROW_COUNT()\n", "\nROW_COUNT() returns a value as follows:\n", "\n\n              DDL statements: 0. This applies to statements such as\n              CREATE TABLE or\n              DROP TABLE.\n            \n              DML statements other than\n              SELECT: The number of\n              affected rows. This applies to statements such as\n              UPDATE,\n              INSERT, or\n              DELETE (as before), but now\n              also to statements such as ALTER\n              TABLE and LOAD\n              DATA.\n            \nSELECT: -1 if the statement\n              returns a result set, or the number of rows\n              \u201caffected\u201d if it does not. For example, for\n              SELECT * FROM t1,\n              ROW_COUNT() returns -1. For\n              SELECT * FROM t1 INTO OUTFILE\n              'file_name',\n              ROW_COUNT() returns the\n              number of rows written to the file.\n            \nSIGNAL statements: 0.\n\n", "\n          For UPDATE statements, the\n          affected-rows value by default is the number of rows actually\n          changed. If you specify the\n          CLIENT_FOUND_ROWS flag to\n          mysql_real_connect() when\n          connecting to mysqld, the affected-rows\n          value is the number of rows \u201cfound\u201d; that is,\n          matched by the WHERE clause.\n        ", "\n          For REPLACE statements, the\n          affected-rows value is 2 if the new row replaced an old row,\n          because in this case, one row was inserted after the duplicate\n          was deleted.\n        ", "\n          For\n          INSERT\n          ... ON DUPLICATE KEY UPDATE statements, the\n          affected-rows value per row is 1 if the row is inserted as a\n          new row, 2 if an existing row is updated, and 0 if an existing\n          row is set to its current values. If you specify the\n          CLIENT_FOUND_ROWS flag, the affected-rows\n          value is 1 (not 0) if an existing row is set to its current\n          values.\n        ", "\n          The ROW_COUNT() value is\n          similar to the value from the\n          mysql_affected_rows() C API\n          function and the row count that the mysql\n          client displays following statement execution.\n        ", "Press CTRL+C to copy mysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t WHERE i IN(1,2);\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           2 |\n+-------------+\n1 row in set (0.00 sec)", "\n\nImportant\n\n\nROW_COUNT() is not replicated\n            reliably using statement-based replication. This function is\n            automatically replicated using row-based replication.\n\n"], "Examples": ["mysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t WHERE i IN(1,2);\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           2 |\n+-------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_row-count"], "Feature Type": ["Function"], "index": 469, "vector_txt": "469:Feature: ROW_COUNT()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["SCHEMA()"], "Description": ["Synonym for DATABASE()", "\nSCHEMA()\n", "\n          This function is a synonym for\n          DATABASE().\n        "], "Examples": [], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_schema"], "Feature Type": ["Function"], "index": 470, "vector_txt": "470:Feature: SCHEMA()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["SESSION_USER()"], "Description": ["Synonym for USER()", "\nSESSION_USER()\n", "\nSESSION_USER() is a synonym for\n          USER().\n        ", "\n          Like USER(), this function can\n          be used for the default value of a\n          VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (SESSION_USER()));"], "Examples": ["CREATE TABLE t (c VARCHAR(288) DEFAULT (SESSION_USER()));"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_session-user"], "Feature Type": ["Function"], "index": 471, "vector_txt": "471:Feature: SESSION_USER()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["SYSTEM_USER()"], "Description": ["Synonym for USER()", "\nSYSTEM_USER()\n", "\nSYSTEM_USER() is a synonym for\n          USER().\n", "\n\nNote\n\n\n            The SYSTEM_USER() function is\n            distinct from the SYSTEM_USER\n            privilege. The former returns the current MySQL account\n            name. The latter distinguishes the system user and regular\n            user account categories (see\n            Section\u00a08.2.11, \u201cAccount Categories\u201d).\n\n", "\n          Like USER(), this function can\n          be used for the default value of a\n          VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (SYSTEM_USER()));"], "Examples": ["CREATE TABLE t (c VARCHAR(288) DEFAULT (SYSTEM_USER()));"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_system-user"], "Feature Type": ["Function"], "index": 472, "vector_txt": "472:Feature: SYSTEM_USER()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["USER()"], "Description": ["The user name and host name provided by the client", "\nUSER()\n", "\n          Returns the current MySQL user name and host name as a string\n          in the utf8mb3 character set.\n        ", "Press CTRL+C to copy mysql> SELECT USER();\n        -> 'davida@localhost'", "\n          The value indicates the user name you specified when\n          connecting to the server, and the client host from which you\n          connected. The value can be different from that of\n          CURRENT_USER().\n        ", "\n          This function can be used for the default value of a\n          VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (USER()));"], "Examples": ["mysql> SELECT USER();\n        -> 'davida@localhost'", "CREATE TABLE t (c VARCHAR(288) DEFAULT (USER()));"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_user"], "Feature Type": ["Function"], "index": 473, "vector_txt": "473:Feature: USER()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["VERSION()"], "Description": ["Return a string that indicates the MySQL server version", "\nVERSION()\n", "\n          Returns a string that indicates the MySQL server version. The\n          string uses the utf8mb3 character set. The\n          value might have a suffix in addition to the version number.\n          See the description of the\n          version system variable in\n          Section\u00a07.1.8, \u201cServer System Variables\u201d.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        ", "Press CTRL+C to copy mysql> SELECT VERSION();\n        -> '8.4.0-standard'"], "Examples": ["mysql> SELECT VERSION();\n        -> '8.4.0-standard'"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_version"], "Feature Type": ["Function"], "index": 474, "vector_txt": "474:Feature: VERSION()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["CAN_ACCESS_COLUMN(ARGS)"], "Description": ["Internal use only", "\nCAN_ACCESS_COLUMN(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-column"], "Feature Type": ["Function"], "index": 475, "vector_txt": "475:Feature: CAN_ACCESS_COLUMN(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["CAN_ACCESS_DATABASE(ARGS)"], "Description": ["Internal use only", "\nCAN_ACCESS_DATABASE(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-database"], "Feature Type": ["Function"], "index": 476, "vector_txt": "476:Feature: CAN_ACCESS_DATABASE(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["CEILING(X)"], "Description": ["Return the smallest integer value not less than the argument", "\nCEILING(X)\n", "\n            Returns the smallest integer value not less than\n            X. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT CEILING(1.23);\n        -> 2\nmysql> SELECT CEILING(-1.23);\n        -> -1", "\n            For exact-value numeric arguments, the return value has an\n            exact-value numeric type. For string or floating-point\n            arguments, the return value has a floating-point type.\n          "], "Examples": ["mysql> SELECT CEILING(1.23);\n        -> 2\nmysql> SELECT CEILING(-1.23);\n        -> -1"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ceiling"], "Feature Type": ["Function"], "index": 477, "vector_txt": "477:Feature: CEILING(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["CAN_ACCESS_TABLE(ARGS)"], "Description": ["Internal use only", "\nCAN_ACCESS_TABLE(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-table"], "Feature Type": ["Function"], "index": 478, "vector_txt": "478:Feature: CAN_ACCESS_TABLE(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["CAN_ACCESS_USER(ARGS)"], "Description": ["Internal use only", "\nCAN_ACCESS_USER(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-user"], "Feature Type": ["Function"], "index": 479, "vector_txt": "479:Feature: CAN_ACCESS_USER(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["CAN_ACCESS_VIEW(ARGS)"], "Description": ["Internal use only", "\nCAN_ACCESS_VIEW(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-view"], "Feature Type": ["Function"], "index": 480, "vector_txt": "480:Feature: CAN_ACCESS_VIEW(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["GET_DD_COLUMN_PRIVILEGES(ARGS)"], "Description": ["Internal use only", "\nGET_DD_COLUMN_PRIVILEGES(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_get-dd-column-privileges"], "Feature Type": ["Function"], "index": 481, "vector_txt": "481:Feature: GET_DD_COLUMN_PRIVILEGES(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["GET_DD_CREATE_OPTIONS(ARGS)"], "Description": ["Internal use only", "\nGET_DD_CREATE_OPTIONS(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_get-dd-create-options"], "Feature Type": ["Function"], "index": 482, "vector_txt": "482:Feature: GET_DD_CREATE_OPTIONS(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["GET_DD_INDEX_SUB_PART_LENGTH(ARGS)"], "Description": ["Internal use only", "\nGET_DD_INDEX_SUB_PART_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_get-dd-index-sub-part-length"], "Feature Type": ["Function"], "index": 483, "vector_txt": "483:Feature: GET_DD_INDEX_SUB_PART_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_AUTO_INCREMENT(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_AUTO_INCREMENT(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-auto-increment"], "Feature Type": ["Function"], "index": 484, "vector_txt": "484:Feature: INTERNAL_AUTO_INCREMENT(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_AVG_ROW_LENGTH(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_AVG_ROW_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-avg-row-length"], "Feature Type": ["Function"], "index": 485, "vector_txt": "485:Feature: INTERNAL_AVG_ROW_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_CHECK_TIME(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_CHECK_TIME(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-check-time"], "Feature Type": ["Function"], "index": 486, "vector_txt": "486:Feature: INTERNAL_CHECK_TIME(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_CHECKSUM(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_CHECKSUM(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-checksum"], "Feature Type": ["Function"], "index": 487, "vector_txt": "487:Feature: INTERNAL_CHECKSUM(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["CHAR(N,...\n          [USING charset_name])"], "Description": ["Return the character for each integer passed", "\nCHAR(N,...\n          [USING charset_name])\n", "\nCHAR() interprets each argument\n          N as an integer and returns a\n          string consisting of the characters given by the code values\n          of those integers. NULL values are skipped.\n        ", "Press CTRL+C to copy mysql> SELECT CHAR(77,121,83,81,'76');\n+--------------------------------------------------+\n| CHAR(77,121,83,81,'76')                          |\n+--------------------------------------------------+\n| 0x4D7953514C                                     |\n+--------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3');\n+--------------------------------------------+\n| CHAR(77,77.3,'77.3')                       |\n+--------------------------------------------+\n| 0x4D4D4D                                   |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "\n          By default, CHAR() returns a\n          binary string. To produce a string in a given character set,\n          use the optional USING clause:\n        ", "Press CTRL+C to copy mysql> SELECT CHAR(77,121,83,81,'76' USING utf8mb4);\n+---------------------------------------+\n| CHAR(77,121,83,81,'76' USING utf8mb4) |\n+---------------------------------------+\n| MySQL                                 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3' USING utf8mb4);\n+------------------------------------+\n| CHAR(77,77.3,'77.3' USING utf8mb4) |\n+------------------------------------+\n| MMM                                |\n+------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect INTEGER value: '77.3' |\n+---------+------+-------------------------------------------+\n1 row in set (0.00 sec)", "\n          If USING is given and the result string is\n          illegal for the given character set, a warning is issued.\n          Also, if strict SQL mode is enabled, the result from\n          CHAR() becomes\n          NULL.\n        ", "\n          If CHAR() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        ", "\nCHAR() arguments larger than\n          255 are converted into multiple result bytes. For example,\n          CHAR(256) is equivalent to\n          CHAR(1,0), and\n          CHAR(256*256) is equivalent to\n          CHAR(1,0,0):\n        ", "Press CTRL+C to copy mysql> SELECT HEX(CHAR(1,0)), HEX(CHAR(256));\n+----------------+----------------+\n| HEX(CHAR(1,0)) | HEX(CHAR(256)) |\n+----------------+----------------+\n| 0100           | 0100           |\n+----------------+----------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT HEX(CHAR(1,0,0)), HEX(CHAR(256*256));\n+------------------+--------------------+\n| HEX(CHAR(1,0,0)) | HEX(CHAR(256*256)) |\n+------------------+--------------------+\n| 010000           | 010000             |\n+------------------+--------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT CHAR(77,121,83,81,'76');\n+--------------------------------------------------+\n| CHAR(77,121,83,81,'76')                          |\n+--------------------------------------------------+\n| 0x4D7953514C                                     |\n+--------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3');\n+--------------------------------------------+\n| CHAR(77,77.3,'77.3')                       |\n+--------------------------------------------+\n| 0x4D4D4D                                   |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT CHAR(77,121,83,81,'76' USING utf8mb4);\n+---------------------------------------+\n| CHAR(77,121,83,81,'76' USING utf8mb4) |\n+---------------------------------------+\n| MySQL                                 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3' USING utf8mb4);\n+------------------------------------+\n| CHAR(77,77.3,'77.3' USING utf8mb4) |\n+------------------------------------+\n| MMM                                |\n+------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect INTEGER value: '77.3' |\n+---------+------+-------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT HEX(CHAR(1,0)), HEX(CHAR(256));\n+----------------+----------------+\n| HEX(CHAR(1,0)) | HEX(CHAR(256)) |\n+----------------+----------------+\n| 0100           | 0100           |\n+----------------+----------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT HEX(CHAR(1,0,0)), HEX(CHAR(256*256));\n+------------------+--------------------+\n| HEX(CHAR(1,0,0)) | HEX(CHAR(256*256)) |\n+------------------+--------------------+\n| 010000           | 010000             |\n+------------------+--------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_char"], "Feature Type": ["Function"], "index": 488, "vector_txt": "488:Feature: CHAR(N,...\n          [USING charset_name])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_DATA_FREE(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_DATA_FREE(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-data-free"], "Feature Type": ["Function"], "index": 489, "vector_txt": "489:Feature: INTERNAL_DATA_FREE(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_DATA_LENGTH(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_DATA_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-data-length"], "Feature Type": ["Function"], "index": 490, "vector_txt": "490:Feature: INTERNAL_DATA_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_DD_CHAR_LENGTH(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_DD_CHAR_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-dd-char-length"], "Feature Type": ["Function"], "index": 491, "vector_txt": "491:Feature: INTERNAL_DD_CHAR_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_GET_COMMENT_OR_ERROR(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_GET_COMMENT_OR_ERROR(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-comment-or-error"], "Feature Type": ["Function"], "index": 492, "vector_txt": "492:Feature: INTERNAL_GET_COMMENT_OR_ERROR(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_GET_ENABLED_ROLE_JSON(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_GET_ENABLED_ROLE_JSON(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-enabled-role-json"], "Feature Type": ["Function"], "index": 493, "vector_txt": "493:Feature: INTERNAL_GET_ENABLED_ROLE_JSON(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_GET_HOSTNAME(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_GET_HOSTNAME(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-hostname"], "Feature Type": ["Function"], "index": 494, "vector_txt": "494:Feature: INTERNAL_GET_HOSTNAME(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_GET_USERNAME(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_GET_USERNAME(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-username"], "Feature Type": ["Function"], "index": 495, "vector_txt": "495:Feature: INTERNAL_GET_USERNAME(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_GET_VIEW_WARNING_OR_ERROR(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_GET_VIEW_WARNING_OR_ERROR(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-view-warning-or-error"], "Feature Type": ["Function"], "index": 496, "vector_txt": "496:Feature: INTERNAL_GET_VIEW_WARNING_OR_ERROR(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_INDEX_COLUMN_CARDINALITY(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_INDEX_COLUMN_CARDINALITY(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-index-column-cardinality"], "Feature Type": ["Function"], "index": 497, "vector_txt": "497:Feature: INTERNAL_INDEX_COLUMN_CARDINALITY(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_INDEX_LENGTH(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_INDEX_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-index-length"], "Feature Type": ["Function"], "index": 498, "vector_txt": "498:Feature: INTERNAL_INDEX_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["CHAR_LENGTH(str)"], "Description": ["Return number of characters in argument", "\nCHAR_LENGTH(str)\n", "\n          Returns the length of the string\n          str, measured in code points. A\n          multibyte character counts as a single code point. This means\n          that, for a string containing two 3-byte characters,\n          LENGTH() returns\n          6, whereas\n          CHAR_LENGTH() returns\n          2, as shown here:\n        ", "Press CTRL+C to copy mysql> SET @dolphin:='\u6d77\u8c5a';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SELECT LENGTH(@dolphin), CHAR_LENGTH(@dolphin);\n+------------------+-----------------------+\n| LENGTH(@dolphin) | CHAR_LENGTH(@dolphin) |\n+------------------+-----------------------+\n|                6 |                     2 |\n+------------------+-----------------------+\n1 row in set (0.00 sec)", "\nCHAR_LENGTH() returns\n          NULL if str is\n          NULL.\n        "], "Examples": ["mysql> SET @dolphin:='\u6d77\u8c5a';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SELECT LENGTH(@dolphin), CHAR_LENGTH(@dolphin);\n+------------------+-----------------------+\n| LENGTH(@dolphin) | CHAR_LENGTH(@dolphin) |\n+------------------+-----------------------+\n|                6 |                     2 |\n+------------------+-----------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_char-length"], "Feature Type": ["Function"], "index": 499, "vector_txt": "499:Feature: CHAR_LENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_IS_ENABLED_ROLE(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_IS_ENABLED_ROLE(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-is-enabled-role"], "Feature Type": ["Function"], "index": 500, "vector_txt": "500:Feature: INTERNAL_IS_ENABLED_ROLE(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_IS_MANDATORY_ROLE(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_IS_MANDATORY_ROLE(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-is-mandatory-role"], "Feature Type": ["Function"], "index": 501, "vector_txt": "501:Feature: INTERNAL_IS_MANDATORY_ROLE(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_KEYS_DISABLED(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_KEYS_DISABLED(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-keys-disabled"], "Feature Type": ["Function"], "index": 502, "vector_txt": "502:Feature: INTERNAL_KEYS_DISABLED(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_MAX_DATA_LENGTH(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_MAX_DATA_LENGTH(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-max-data-length"], "Feature Type": ["Function"], "index": 503, "vector_txt": "503:Feature: INTERNAL_MAX_DATA_LENGTH(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_TABLE_ROWS(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_TABLE_ROWS(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-table-rows"], "Feature Type": ["Function"], "index": 504, "vector_txt": "504:Feature: INTERNAL_TABLE_ROWS(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.22 Internal Functions"], "Feature": ["INTERNAL_UPDATE_TIME(ARGS)"], "Description": ["Internal use only", "\nINTERNAL_UPDATE_TIME(ARGS)\n"], "Examples": [], "Category": ["Built-In Functions", "Internal Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-update-time"], "Feature Type": ["Function"], "index": 505, "vector_txt": "505:Feature: INTERNAL_UPDATE_TIME(ARGS)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY([val[,\n          val] ...])"], "Description": ["Create JSON array", "\nJSON_ARRAY([val[,\n          val] ...])\n", "\n          Evaluates a (possibly empty) list of values and returns a JSON\n          array containing those values.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME());\n+---------------------------------------------+\n| JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME()) |\n+---------------------------------------------+\n| [1, \"abc\", null, true, \"11:30:24.000000\"]   |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME());\n+---------------------------------------------+\n| JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME()) |\n+---------------------------------------------+\n| [1, \"abc\", null, true, \"11:30:24.000000\"]   |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-array"], "Feature Type": ["Function"], "index": 506, "vector_txt": "506:Feature: JSON_ARRAY([val[,\n          val] ...])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY_APPEND(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Append data to JSON document", "\nJSON_ARRAY_APPEND(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Appends values to the end of the indicated arrays within a\n          JSON document and returns the result. Returns\n          NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          If a path selects a scalar or object value, that value is\n          autowrapped within an array and the new value is added to that\n          array. Pairs for which the path does not identify any value in\n          the JSON document are ignored.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1]', 1) |\n+----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\"]        |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[0]', 2) |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\"]      |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |\n+-------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\"]         |\n+-------------------------------------+\n\nmysql> SET @j = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');\n+------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.b', 'x')  |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');\n+--------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.c', 'y')    |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n\nmysql> SET @j = '{\"a\": 1}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$', 'z');\n+---------------------------------+\n| JSON_ARRAY_APPEND(@j, '$', 'z') |\n+---------------------------------+\n| [{\"a\": 1}, \"z\"]                 |\n+---------------------------------+"], "Examples": ["mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1]', 1) |\n+----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\"]        |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[0]', 2) |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\"]      |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |\n+-------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\"]         |\n+-------------------------------------+\n\nmysql> SET @j = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');\n+------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.b', 'x')  |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');\n+--------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.c', 'y')    |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n\nmysql> SET @j = '{\"a\": 1}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$', 'z');\n+---------------------------------+\n| JSON_ARRAY_APPEND(@j, '$', 'z') |\n+---------------------------------+\n| [{\"a\": 1}, \"z\"]                 |\n+---------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-array-append"], "Feature Type": ["Function"], "index": 507, "vector_txt": "507:Feature: JSON_ARRAY_APPEND(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert into JSON array", "\nJSON_ARRAY_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Updates a JSON document, inserting into an array within the\n          document and returning the modified document. Returns\n          NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard or does\n          not end with an array element identifier.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          Pairs for which the path does not identify any array in the\n          JSON document are ignored. If a path identifies an array\n          element, the corresponding value is inserted at that element\n          position, shifting any following values to the right. If a\n          path identifies an array position past the end of an array,\n          the value is inserted at the end of the array.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+", "\n          Earlier modifications affect the positions of the following\n          elements in the array, so subsequent paths in the same\n          JSON_ARRAY_INSERT() call should\n          take this into account. In the final example, the second path\n          inserts nothing because the path no longer matches anything\n          after the first insert.\n        "], "Examples": ["mysql> SET @j = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-array-insert"], "Feature Type": ["Function"], "index": 508, "vector_txt": "508:Feature: JSON_ARRAY_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_CONTAINS(target,\n          candidate[,\n          path])"], "Description": ["Whether JSON document contains specific object at path", "\nJSON_CONTAINS(target,\n          candidate[,\n          path])\n", "\n          Indicates by returning 1 or 0 whether a given\n          candidate JSON document is\n          contained within a target JSON\n          document, or\u2014if a path\n          argument was supplied\u2014whether the candidate is found at\n          a specific path within the target. Returns\n          NULL if any argument is\n          NULL, or if the path argument does not\n          identify a section of the target document. An error occurs if\n          target or\n          candidate is not a valid JSON\n          document, or if the path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          To check only whether any data exists at the path, use\n          JSON_CONTAINS_PATH() instead.\n        ", "\n          The following rules define containment:\n", "\n\n              A candidate scalar is contained in a target scalar if and\n              only if they are comparable and are equal. Two scalar\n              values are comparable if they have the same\n              JSON_TYPE() types, with the\n              exception that values of types INTEGER\n              and DECIMAL are also comparable to each\n              other.\n            \n              A candidate array is contained in a target array if and\n              only if every element in the candidate is contained in\n              some element of the target.\n            \n              A candidate nonarray is contained in a target array if and\n              only if the candidate is contained in some element of the\n              target.\n            \n              A candidate object is contained in a target object if and\n              only if for each key in the candidate there is a key with\n              the same name in the target and the value associated with\n              the candidate key is contained in the value associated\n              with the target key.\n\n", "\n          Otherwise, the candidate value is not contained in the target\n          document.\n        ", "\n          Queries using JSON_CONTAINS() on\n          InnoDB tables can be optimized\n          using multi-valued indexes; see\n          Multi-Valued Indexes, for more\n          information.\n        ", "Press CTRL+C to copy mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SET @j2 = '1';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.b');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.b') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nmysql> SET @j2 = '{\"d\": 4}';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.c');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.c') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+"], "Examples": ["mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SET @j2 = '1';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.b');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.b') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nmysql> SET @j2 = '{\"d\": 4}';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.c');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.c') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-contains"], "Feature Type": ["Function"], "index": 509, "vector_txt": "509:Feature: JSON_CONTAINS(target,\n          candidate[,\n          path])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["CHARACTER_LENGTH(str)"], "Description": ["Synonym for CHAR_LENGTH()", "\nCHARACTER_LENGTH(str)\n", "\nCHARACTER_LENGTH() is a synonym\n          for CHAR_LENGTH().\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_character-length"], "Feature Type": ["Function"], "index": 510, "vector_txt": "510:Feature: CHARACTER_LENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_CONTAINS_PATH(json_doc,\n          one_or_all,\n          path[,\n          path] ...)"], "Description": ["Whether JSON document contains any data at path", "\nJSON_CONTAINS_PATH(json_doc,\n          one_or_all,\n          path[,\n          path] ...)\n", "\n          Returns 0 or 1 to indicate whether a JSON document contains\n          data at a given path or paths. Returns NULL\n          if any argument is NULL. An error occurs if\n          the json_doc argument is not a\n          valid JSON document, any path\n          argument is not a valid path expression, or\n          one_or_all is not\n          'one' or 'all'.\n        ", "\n          To check for a specific value at a path, use\n          JSON_CONTAINS() instead.\n        ", "\n          The return value is 0 if no specified path exists within the\n          document. Otherwise, the return value depends on the\n          one_or_all argument:\n", "\n\n'one': 1 if at least one path exists\n              within the document, 0 otherwise.\n            \n'all': 1 if all paths exist within the\n              document, 0 otherwise.\n\n", "Press CTRL+C to copy mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+"], "Examples": ["mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-contains-path"], "Feature Type": ["Function"], "index": 511, "vector_txt": "511:Feature: JSON_CONTAINS_PATH(json_doc,\n          one_or_all,\n          path[,\n          path] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_DEPTH(json_doc)"], "Description": ["Maximum depth of JSON document", "\nJSON_DEPTH(json_doc)\n", "\n          Returns the maximum depth of a JSON document. Returns\n          NULL if the argument is\n          NULL. An error occurs if the argument is\n          not a valid JSON document.\n        ", "\n          An empty array, empty object, or scalar value has depth 1. A\n          nonempty array containing only elements of depth 1 or nonempty\n          object containing only member values of depth 1 has depth 2.\n          Otherwise, a JSON document has depth greater than 2.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\nmysql> SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');\n+------------------------+------------------------+\n| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |\n+------------------------+------------------------+\n|                      2 |                      2 |\n+------------------------+------------------------+\nmysql> SELECT JSON_DEPTH('[10, {\"a\": 20}]');\n+-------------------------------+\n| JSON_DEPTH('[10, {\"a\": 20}]') |\n+-------------------------------+\n|                             3 |\n+-------------------------------+"], "Examples": ["mysql> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\nmysql> SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');\n+------------------------+------------------------+\n| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |\n+------------------------+------------------------+\n|                      2 |                      2 |\n+------------------------+------------------------+\nmysql> SELECT JSON_DEPTH('[10, {\"a\": 20}]');\n+-------------------------------+\n| JSON_DEPTH('[10, {\"a\": 20}]') |\n+-------------------------------+\n|                             3 |\n+-------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-depth"], "Feature Type": ["Function"], "index": 512, "vector_txt": "512:Feature: JSON_DEPTH(json_doc)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_EXTRACT(json_doc,\n          path[,\n          path] ...)"], "Description": ["Return data from JSON document", "\nJSON_EXTRACT(json_doc,\n          path[,\n          path] ...)\n", "\n          Returns data from a JSON document, selected from the parts of\n          the document matched by the path\n          arguments. Returns NULL if any argument is\n          NULL or no paths locate a value in the\n          document. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression.\n        ", "\n          The return value consists of all values matched by the\n          path arguments. If it is possible\n          that those arguments could return multiple values, the matched\n          values are autowrapped as an array, in the order corresponding\n          to the paths that produced them. Otherwise, the return value\n          is the single matched value.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |\n+--------------------------------------------+\n| 20                                         |\n+--------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');\n+----------------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |\n+----------------------------------------------------+\n| [20, 10]                                           |\n+----------------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |\n+-----------------------------------------------+\n| [30, 40]                                      |\n+-----------------------------------------------+", "\n          MySQL supports the\n          ->\n          operator as shorthand for this function as used with 2\n          arguments where the left hand side is a\n          JSON column identifier (not an\n          expression) and the right hand side is the JSON path to be\n          matched within the column.\n        "], "Examples": ["mysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |\n+--------------------------------------------+\n| 20                                         |\n+--------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');\n+----------------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |\n+----------------------------------------------------+\n| [20, 10]                                           |\n+----------------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |\n+-----------------------------------------------+\n| [30, 40]                                      |\n+-----------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-extract"], "Feature Type": ["Function"], "index": 513, "vector_txt": "513:Feature: JSON_EXTRACT(json_doc,\n          path[,\n          path] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert data into JSON document", "\nJSON_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Inserts data into a JSON document and returns the result.\n          Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document is\n          ignored and does not overwrite the existing document value. A\n          path-value pair for a nonexisting path in the document adds\n          the value to the document if the path identifies one of these\n          types of values:\n", "\n\n              A member not present in an existing object. The member is\n              added to the object and associated with the new value.\n            \n              A position past the end of an existing array. The array is\n              extended with the new value. If the existing value is not\n              an array, it is autowrapped as an array, then extended\n              with the new value.\n\n", "\n          Otherwise, a path-value pair for a nonexisting path in the\n          document is ignored and has no effect.\n        ", "\n          For a comparison of\n          JSON_INSERT(),\n          JSON_REPLACE(), and\n          JSON_SET(), see the discussion\n          of JSON_SET().\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+", "\n          The third and final value listed in the result is a quoted\n          string and not an array like the second one (which is not\n          quoted in the output); no casting of values to the JSON type\n          is performed. To insert the array as an array, you must\n          perform such casts explicitly, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON));\n+------------------------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON)) |\n+------------------------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [true, false]}                        |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+", "mysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON));\n+------------------------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON)) |\n+------------------------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [true, false]}                        |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-insert"], "Feature Type": ["Function"], "index": 514, "vector_txt": "514:Feature: JSON_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_KEYS(json_doc[,\n          path])"], "Description": ["Array of keys from JSON document", "\nJSON_KEYS(json_doc[,\n          path])\n", "\n          Returns the keys from the top-level value of a JSON object as\n          a JSON array, or, if a path\n          argument is given, the top-level keys from the selected path.\n          Returns NULL if any argument is\n          NULL, the\n          json_doc argument is not an object,\n          or path, if given, does not locate\n          an object. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or the path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The result array is empty if the selected object is empty. If\n          the top-level value has nested subobjects, the return value\n          does not include keys from those subobjects.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\nmysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+"], "Examples": ["mysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\nmysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-keys"], "Feature Type": ["Function"], "index": 515, "vector_txt": "515:Feature: JSON_KEYS(json_doc[,\n          path])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_LENGTH(json_doc[,\n          path])"], "Description": ["Number of elements in JSON document", "\nJSON_LENGTH(json_doc[,\n          path])\n", "\n          Returns the length of a JSON document, or, if a\n          path argument is given, the length\n          of the value within the document identified by the path.\n          Returns NULL if any argument is\n          NULL or the path\n          argument does not identify a value in the document. An error\n          occurs if the json_doc argument is\n          not a valid JSON document or the\n          path argument is not a valid path\n          expression.\n        ", "\n          The length of a document is determined as follows:\n", "\n\n              The length of a scalar is 1.\n            \n              The length of an array is the number of array elements.\n            \n              The length of an object is the number of object members.\n            \n              The length does not count the length of nested arrays or\n              objects.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}]');\n+---------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}]') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}');\n+-----------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+-----------------------------------------+\n|                                       2 |\n+-----------------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+"], "Examples": ["mysql> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}]');\n+---------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}]') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}');\n+-----------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+-----------------------------------------+\n|                                       2 |\n+-----------------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-length"], "Feature Type": ["Function"], "index": 516, "vector_txt": "516:Feature: JSON_LENGTH(json_doc[,\n          path])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, preserving duplicate keys. Deprecated", "\nJSON_MERGE(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Deprecated synonym for\n          JSON_MERGE_PRESERVE().\n        "], "Examples": [], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge"], "Feature Type": ["Function"], "index": 517, "vector_txt": "517:Feature: JSON_MERGE(json_doc,\n          json_doc[,\n          json_doc] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE_PATCH(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, replacing values of duplicate keys", "\nJSON_MERGE_PATCH(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Performs an\n          RFC\n          7396 compliant merge of two or more JSON documents and\n          returns the merged result, without preserving members having\n          duplicate keys. Raises an error if at least one of the\n          documents passed as arguments to this function is not valid.\n", "\n\nNote\n\n\n            For an explanation and example of the differences between\n            this function and JSON_MERGE_PRESERVE(),\n            see\n            JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE().\n\n", "\nJSON_MERGE_PATCH() performs a merge as\n          follows:\n", "\n\n              If the first argument is not an object, the result of the\n              merge is the same as if an empty object had been merged\n              with the second argument.\n            \n              If the second argument is not an object, the result of the\n              merge is the second argument.\n            \n              If both arguments are objects, the result of the merge is\n              an object with the following members:\n\n\n\n                  All members of the first object which do not have a\n                  corresponding member with the same key in the second\n                  object.\n                \n                  All members of the second object which do not have a\n                  corresponding key in the first object, and whose value\n                  is not the JSON null literal.\n                \n                  All members with a key that exists in both the first\n                  and the second object, and whose value in the second\n                  object is not the JSON null\n                  literal. The values of these members are the results\n                  of recursively merging the value in the first object\n                  with the value in the second object.\n\n\n\n", "\n          For additional information, see\n          Normalization, Merging, and Autowrapping of JSON Values.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '[true, false]') |\n+---------------------------------------------+\n| [true, false]                               |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}') |\n+-------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}');\n+------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}') |\n+------------------------------------------+\n| {\"id\": 47}                               |\n+------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',\n     >     '{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }',\n     >     '{ \"a\": 5, \"d\":6 }');\n+-------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }','{ \"a\": 5, \"d\":6 }') |\n+-------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                              |\n+-------------------------------------------------------------------------------+", "\n          You can use this function to remove a member by specifying\n          null as the value of the same member in the\n          second argument, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}');\n+--------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}') |\n+--------------------------------------------------+\n| {\"a\": 1}                                         |\n+--------------------------------------------------+", "\n          This example shows that the function operates in a recursive\n          fashion; that is, values of members are not limited to\n          scalars, but rather can themselves be JSON documents:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}');\n+----------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}') |\n+----------------------------------------------------+\n| {\"a\": {\"x\": 1, \"y\": 2}}                            |\n+----------------------------------------------------+", "JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE().\u00a0\n            The behavior of JSON_MERGE_PATCH() is the\n            same as that of\n            JSON_MERGE_PRESERVE(), with\n            the following two exceptions:\n", "\n\nJSON_MERGE_PATCH() removes any member\n              in the first object with a matching key in the second\n              object, provided that the value associated with the key in\n              the second object is not JSON null.\n            \n              If the second object has a member with a key matching a\n              member in the first object,\n              JSON_MERGE_PATCH()\nreplaces the value in the first\n              object with the value in the second object, whereas\n              JSON_MERGE_PRESERVE()\nappends the second value to the first\n              value.\n\n", "\n          This example compares the results of merging the same 3 JSON\n          objects, each having a matching key \"a\",\n          with each of these two functions:\n        ", "Press CTRL+C to copy mysql> SET @x = '{ \"a\": 1, \"b\": 2 }',\n     >     @y = '{ \"a\": 3, \"c\": 4 }',\n     >     @z = '{ \"a\": 5, \"d\": 6 }';\n\nmysql> SELECT  JSON_MERGE_PATCH(@x, @y, @z)    AS Patch,\n    ->         JSON_MERGE_PRESERVE(@x, @y, @z) AS Preserve\\G\n*************************** 1. row ***************************\n   Patch: {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}\nPreserve: {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}"], "Examples": ["mysql> SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '[true, false]') |\n+---------------------------------------------+\n| [true, false]                               |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}') |\n+-------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}');\n+------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}') |\n+------------------------------------------+\n| {\"id\": 47}                               |\n+------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',\n     >     '{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }',\n     >     '{ \"a\": 5, \"d\":6 }');\n+-------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }','{ \"a\": 5, \"d\":6 }') |\n+-------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                              |\n+-------------------------------------------------------------------------------+", "mysql> SELECT JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}');\n+--------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}') |\n+--------------------------------------------------+\n| {\"a\": 1}                                         |\n+--------------------------------------------------+", "mysql> SELECT JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}');\n+----------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}') |\n+----------------------------------------------------+\n| {\"a\": {\"x\": 1, \"y\": 2}}                            |\n+----------------------------------------------------+", "mysql> SET @x = '{ \"a\": 1, \"b\": 2 }',\n     >     @y = '{ \"a\": 3, \"c\": 4 }',\n     >     @z = '{ \"a\": 5, \"d\": 6 }';\n\nmysql> SELECT  JSON_MERGE_PATCH(@x, @y, @z)    AS Patch,\n    ->         JSON_MERGE_PRESERVE(@x, @y, @z) AS Preserve\\G\n*************************** 1. row ***************************\n   Patch: {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}\nPreserve: {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge-patch"], "Feature Type": ["Function"], "index": 518, "vector_txt": "518:Feature: JSON_MERGE_PATCH(json_doc,\n          json_doc[,\n          json_doc] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE_PRESERVE(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, preserving duplicate keys", "\nJSON_MERGE_PRESERVE(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Merges two or more JSON documents and returns the merged\n          result. Returns NULL if any argument is\n          NULL. An error occurs if any argument is\n          not a valid JSON document.\n        ", "\n          Merging takes place according to the following rules. For\n          additional information, see\n          Normalization, Merging, and Autowrapping of JSON Values.\n", "\n\n              Adjacent arrays are merged to a single array.\n            \n              Adjacent objects are merged to a single object.\n            \n              A scalar value is autowrapped as an array and merged as an\n              array.\n            \n              An adjacent array and object are merged by autowrapping\n              the object as an array and merging the two arrays.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '[true, false]') |\n+------------------------------------------------+\n| [1, 2, true, false]                            |\n+------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}');\n+----------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}') |\n+----------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                            |\n+----------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}');\n+---------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}') |\n+---------------------------------------------+\n| [1, 2, {\"id\": 47}]                          |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }',\n     >    '{ \"a\": 3, \"c\": 4 }');\n+--------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\":4 }') |\n+--------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": 4}                                |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }',\n     >    '{ \"a\": 5, \"d\": 6 }');\n+----------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }','{ \"a\": 5, \"d\": 6 }') |\n+----------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                         |\n+----------------------------------------------------------------------------------+", "\n          This function is similar to but differs from\n          JSON_MERGE_PATCH() in\n          significant respects; see\n          JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE(),\n          for more information.\n        "], "Examples": ["mysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '[true, false]') |\n+------------------------------------------------+\n| [1, 2, true, false]                            |\n+------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}');\n+----------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}') |\n+----------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                            |\n+----------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}');\n+---------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}') |\n+---------------------------------------------+\n| [1, 2, {\"id\": 47}]                          |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }',\n     >    '{ \"a\": 3, \"c\": 4 }');\n+--------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\":4 }') |\n+--------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": 4}                                |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }',\n     >    '{ \"a\": 5, \"d\": 6 }');\n+----------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }','{ \"a\": 5, \"d\": 6 }') |\n+----------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                         |\n+----------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge-preserve"], "Feature Type": ["Function"], "index": 519, "vector_txt": "519:Feature: JSON_MERGE_PRESERVE(json_doc,\n          json_doc[,\n          json_doc] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_OBJECT([key,\n          val[,\n          key,\n          val] ...])"], "Description": ["Create JSON object", "\nJSON_OBJECT([key,\n          val[,\n          key,\n          val] ...])\n", "\n          Evaluates a (possibly empty) list of key-value pairs and\n          returns a JSON object containing those pairs. An error occurs\n          if any key name is NULL or the number of\n          arguments is odd.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECT('id', 87, 'name', 'carrot');\n+-----------------------------------------+\n| JSON_OBJECT('id', 87, 'name', 'carrot') |\n+-----------------------------------------+\n| {\"id\": 87, \"name\": \"carrot\"}            |\n+-----------------------------------------+"], "Examples": ["mysql> SELECT JSON_OBJECT('id', 87, 'name', 'carrot');\n+-----------------------------------------+\n| JSON_OBJECT('id', 87, 'name', 'carrot') |\n+-----------------------------------------+\n| {\"id\": 87, \"name\": \"carrot\"}            |\n+-----------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-object"], "Feature Type": ["Function"], "index": 520, "vector_txt": "520:Feature: JSON_OBJECT([key,\n          val[,\n          key,\n          val] ...])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["CHARSET(str)"], "Description": ["Return the character set of the argument", "\nCHARSET(str)\n", "\n          Returns the character set of the string argument, or\n          NULL if the argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT CHARSET('abc');\n        -> 'utf8mb3'\nmysql> SELECT CHARSET(CONVERT('abc' USING latin1));\n        -> 'latin1'\nmysql> SELECT CHARSET(USER());\n        -> 'utf8mb3'"], "Examples": ["mysql> SELECT CHARSET('abc');\n        -> 'utf8mb3'\nmysql> SELECT CHARSET(CONVERT('abc' USING latin1));\n        -> 'latin1'\nmysql> SELECT CHARSET(USER());\n        -> 'utf8mb3'"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_charset"], "Feature Type": ["Function"], "index": 521, "vector_txt": "521:Feature: CHARSET(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_OVERLAPS(json_doc1,\n          json_doc2)"], "Description": ["Compares two JSON documents, returns TRUE (1) if these have any", "\nJSON_OVERLAPS(json_doc1,\n          json_doc2)\n", "\n          Compares two JSON documents. Returns true (1) if the two\n          document have any key-value pairs or array elements in common.\n          If both arguments are scalars, the function performs a simple\n          equality test. If either argument is NULL,\n          the function returns NULL.\n        ", "\n          This function serves as counterpart to\n          JSON_CONTAINS(), which requires\n          all elements of the array searched for to be present in the\n          array searched in. Thus, JSON_CONTAINS()\n          performs an AND operation on search keys,\n          while JSON_OVERLAPS() performs an\n          OR operation.\n        ", "\n          Queries on JSON columns of InnoDB\n          tables using JSON_OVERLAPS() in the\n          WHERE clause can be optimized using\n          multi-valued indexes.\n          Multi-Valued Indexes, provides detailed\n          information and examples.\n        ", "\n          When comparing two arrays, JSON_OVERLAPS()\n          returns true if they share one or more array elements in\n          common, and false if they do not:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "\n          Partial matches are treated as no match, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)", "\n          When comparing objects, the result is true if they have at\n          least one key-value pair in common.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}') |\n+-----------------------------------------------------------------------+\n|                                                                     1 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}') |\n+-----------------------------------------------------------------------+\n|                                                                     0 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)", "\n          If two scalars are used as the arguments to the function,\n          JSON_OVERLAPS() performs a simple test for\n          equality:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('5', '5');\n+-------------------------+\n| JSON_OVERLAPS('5', '5') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('5', '6');\n+-------------------------+\n| JSON_OVERLAPS('5', '6') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)", "\n          When comparing a scalar with an array,\n          JSON_OVERLAPS() attempts to treat the\n          scalar as an array element. In this example, the second\n          argument 6 is interpreted as\n          [6], as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '6');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '6') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set (0.00 sec)", "\n          The function does not perform type conversions:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[4,5,\"6\",7]', '6');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,\"6\",7]', '6') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '\"6\"');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '\"6\"') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}') |\n+-----------------------------------------------------------------------+\n|                                                                     1 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}') |\n+-----------------------------------------------------------------------+\n|                                                                     0 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('5', '5');\n+-------------------------+\n| JSON_OVERLAPS('5', '5') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('5', '6');\n+-------------------------+\n| JSON_OVERLAPS('5', '6') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '6');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '6') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[4,5,\"6\",7]', '6');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,\"6\",7]', '6') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '\"6\"');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '\"6\"') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-overlaps"], "Feature Type": ["Function"], "index": 522, "vector_txt": "522:Feature: JSON_OVERLAPS(json_doc1,\n          json_doc2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_PRETTY(json_val)"], "Description": ["Print a JSON document in human-readable format", "\nJSON_PRETTY(json_val)\n", "\n          Provides pretty-printing of JSON values similar to that\n          implemented in PHP and by other languages and database\n          systems. The value supplied must be a JSON value or a valid\n          string representation of a JSON value. Extraneous whitespaces\n          and newlines present in this value have no effect on the\n          output. For a NULL value, the function\n          returns NULL. If the value is not a JSON\n          document, or if it cannot be parsed as one, the function fails\n          with an error.\n        ", "\n          Formatting of the output from this function adheres to the\n          following rules:\n", "\n\n              Each array element or object member appears on a separate\n              line, indented by one additional level as compared to its\n              parent.\n            \n              Each level of indentation adds two leading spaces.\n            \n              A comma separating individual array elements or object\n              members is printed before the newline that separates the\n              two elements or members.\n            \n              The key and the value of an object member are separated by\n              a colon followed by a space (': ').\n            \n              An empty object or array is printed on a single line. No\n              space is printed between the opening and closing brace.\n            \n              Special characters in string scalars and key names are\n              escaped employing the same rules used by the\n              JSON_QUOTE() function.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_PRETTY('123'); # scalar\n+--------------------+\n| JSON_PRETTY('123') |\n+--------------------+\n| 123                |\n+--------------------+\n\nmysql> SELECT JSON_PRETTY(\"[1,3,5]\"); # array\n+------------------------+\n| JSON_PRETTY(\"[1,3,5]\") |\n+------------------------+\n| [\n  1,\n  3,\n  5\n]      |\n+------------------------+\n\nmysql> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}'); # object\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"15\",\n  \"x\": \"25\"\n}   |\n+---------------------------------------------+\n\nmysql> SELECT JSON_PRETTY('[\"a\",1,{\"key1\":\n    '>    \"value1\"},\"5\",     \"77\" ,\n    '>       {\"key2\":[\"value3\",\"valueX\",\n    '> \"valueY\"]},\"j\", \"2\"   ]')\\G  # nested arrays and objects\n*************************** 1. row ***************************\nJSON_PRETTY('[\"a\",1,{\"key1\":\n             \"value1\"},\"5\",     \"77\" ,\n                {\"key2\":[\"value3\",\"valuex\",\n          \"valuey\"]},\"j\", \"2\"   ]'): [\n  \"a\",\n  1,\n  {\n    \"key1\": \"value1\"\n  },\n  \"5\",\n  \"77\",\n  {\n    \"key2\": [\n      \"value3\",\n      \"valuex\",\n      \"valuey\"\n    ]\n  },\n  \"j\",\n  \"2\"\n]"], "Examples": ["mysql> SELECT JSON_PRETTY('123'); # scalar\n+--------------------+\n| JSON_PRETTY('123') |\n+--------------------+\n| 123                |\n+--------------------+\n\nmysql> SELECT JSON_PRETTY(\"[1,3,5]\"); # array\n+------------------------+\n| JSON_PRETTY(\"[1,3,5]\") |\n+------------------------+\n| [\n  1,\n  3,\n  5\n]      |\n+------------------------+\n\nmysql> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}'); # object\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"15\",\n  \"x\": \"25\"\n}   |\n+---------------------------------------------+\n\nmysql> SELECT JSON_PRETTY('[\"a\",1,{\"key1\":\n    '>    \"value1\"},\"5\",     \"77\" ,\n    '>       {\"key2\":[\"value3\",\"valueX\",\n    '> \"valueY\"]},\"j\", \"2\"   ]')\\G  # nested arrays and objects\n*************************** 1. row ***************************\nJSON_PRETTY('[\"a\",1,{\"key1\":\n             \"value1\"},\"5\",     \"77\" ,\n                {\"key2\":[\"value3\",\"valuex\",\n          \"valuey\"]},\"j\", \"2\"   ]'): [\n  \"a\",\n  1,\n  {\n    \"key1\": \"value1\"\n  },\n  \"5\",\n  \"77\",\n  {\n    \"key2\": [\n      \"value3\",\n      \"valuex\",\n      \"valuey\"\n    ]\n  },\n  \"j\",\n  \"2\"\n]"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-pretty"], "Feature Type": ["Function"], "index": 523, "vector_txt": "523:Feature: JSON_PRETTY(json_val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_REMOVE(json_doc,\n          path[,\n          path] ...)"], "Description": ["Remove data from JSON document", "\nJSON_REMOVE(json_doc,\n          path[,\n          path] ...)\n", "\n          Removes data from a JSON document and returns the result.\n          Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or is $ or\n          contains a * or **\n          wildcard.\n        ", "\n          The path arguments are evaluated\n          left to right. The document produced by evaluating one path\n          becomes the new value against which the next path is\n          evaluated.\n        ", "\n          It is not an error if the element to be removed does not exist\n          in the document; in that case, the path does not affect the\n          document.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_REMOVE(@j, '$[1]');\n+-------------------------+\n| JSON_REMOVE(@j, '$[1]') |\n+-------------------------+\n| [\"a\", \"d\"]              |\n+-------------------------+"], "Examples": ["mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_REMOVE(@j, '$[1]');\n+-------------------------+\n| JSON_REMOVE(@j, '$[1]') |\n+-------------------------+\n| [\"a\", \"d\"]              |\n+-------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-remove"], "Feature Type": ["Function"], "index": 524, "vector_txt": "524:Feature: JSON_REMOVE(json_doc,\n          path[,\n          path] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_REPLACE(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Replace values in JSON document", "\nJSON_REPLACE(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Replaces existing values in a JSON document and returns the\n          result. Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document\n          overwrites the existing document value with the new value. A\n          path-value pair for a nonexisting path in the document is\n          ignored and has no effect.\n        ", "\n          The optimizer can perform a partial, in-place update of a\n          JSON column instead of removing the old\n          document and writing the new document in its entirety to the\n          column. This optimization can be performed for an update\n          statement that uses the\n          JSON_REPLACE() function and\n          meets the conditions outlined in\n          Partial Updates of JSON Values.\n        ", "\n          For a comparison of\n          JSON_INSERT(),\n          JSON_REPLACE(), and\n          JSON_SET(), see the discussion\n          of JSON_SET().\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-replace"], "Feature Type": ["Function"], "index": 525, "vector_txt": "525:Feature: JSON_REPLACE(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SCHEMA_VALIDATION_REPORT(schema,document)"], "Description": ["Validate JSON document against JSON schema; returns report in JSON", "\nJSON_SCHEMA_VALIDATION_REPORT(schema,document)\n", "\n          Validates a JSON document against a\n          JSON schema. Both\n          schema and\n          document are required. As with\n          JSON_VALID_SCHEMA(), the schema must be a valid JSON object,\n          and the document must be a valid JSON document. Provided that\n          these conditions are met, the function returns a report, as a\n          JSON document, on the outcome of the validation. If the JSON\n          document is considered valid according to the JSON Schema, the\n          function returns a JSON object with one property\n          valid having the value \"true\". If the JSON\n          document fails validation, the function returns a JSON object\n          which includes the properties listed here:\n", "\n\nvalid: Always \"false\" for a failed\n              schema validation\n            \nreason: A human-readable string\n              containing the reason for the failure\n            \nschema-location: A JSON pointer URI\n              fragment identifier indicating where in the JSON schema\n              the validation failed (see Note following this list)\n            \ndocument-location: A JSON pointer URI\n              fragment identifier indicating where in the JSON document\n              the validation failed (see Note following this list)\n            \nschema-failed-keyword: A string\n              containing the name of the keyword or property in the JSON\n              schema that was violated\n\n", "\n\nNote\n\n\n            JSON pointer URI fragment identifiers are defined in\n            RFC\n            6901 - JavaScript Object Notation (JSON) Pointer.\n            (These are not the same as the JSON\n            path notation used by\n            JSON_EXTRACT() and other\n            MySQL JSON functions.) In this notation,\n            # represents the entire document, and\n            #/myprop represents the portion of the\n            document included in the top-level property named\n            myprop. See the specification just cited\n            and the examples shown later in this section for more\n            information.\n\n", "\n          In this example, we set a user variable\n          @schema to the value of a JSON schema for\n          geographical coordinates, and another one\n          @document to the value of a JSON document\n          containing one such coordinate. We then verify that\n          @document validates according to\n          @schema by using them as the arguments to\n          JSON_SCHEMA_VALIDATION_REORT():\n        ", "Press CTRL+C to copy mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)", "\n          Now we set @document such that it specifies\n          an illegal value for one of its properties, like this:\n        ", "Press CTRL+C to copy mysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 310.445118\n    '> }';", "\n          Validation of @document now fails when\n          tested with\n          JSON_SCHEMA_VALIDATION_REPORT(). The output\n          from the function call contains detailed information about the\n          failure (with the function wrapped by\n          JSON_PRETTY() to provide better\n          formatting), as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#/longitude' failed requirement 'maximum' at JSON Schema location '#/properties/longitude'\",\n  \"schema-location\": \"#/properties/longitude\",\n  \"document-location\": \"#/longitude\",\n  \"schema-failed-keyword\": \"maximum\"\n}\n1 row in set (0.00 sec)", "\n          Since @schema contains the\n          required attribute, we can set\n          @document to a value that is otherwise\n          valid but does not contain the required properties, then test\n          it against @schema. The output of\n          JSON_SCHEMA_VALIDATION_REPORT() shows that\n          validation fails due to lack of a required element, like this:\n        ", "Press CTRL+C to copy mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#' failed requirement 'required' at JSON Schema location '#'\",\n  \"schema-location\": \"#\",\n  \"document-location\": \"#\",\n  \"schema-failed-keyword\": \"required\"\n}\n1 row in set (0.00 sec)", "\n          If we now set the value of @schema to the\n          same JSON schema but without the required\n          attribute, @document validates because it\n          is a valid JSON object, even though it contains no properties,\n          as shown here:\n        ", "Press CTRL+C to copy mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 310.445118\n    '> }';", "mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#' failed requirement 'required' at JSON Schema location '#'\",\n  \"schema-location\": \"#\",\n  \"document-location\": \"#\",\n  \"schema-failed-keyword\": \"required\"\n}\n1 row in set (0.00 sec)", "mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-validation-functions.html#function_json-schema-validation-report"], "Feature Type": ["Function"], "index": 526, "vector_txt": "526:Feature: JSON_SCHEMA_VALIDATION_REPORT(schema,document)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SEARCH(json_doc,\n          one_or_all,\n          search_str[,\n          escape_char[,\n          path] ...])"], "Description": ["Path to value within JSON document", "\nJSON_SEARCH(json_doc,\n          one_or_all,\n          search_str[,\n          escape_char[,\n          path] ...])\n", "\n          Returns the path to the given string within a JSON document.\n          Returns NULL if any of the\n          json_doc,\n          search_str, or\n          path arguments are\n          NULL; no path\n          exists within the document; or\n          search_str is not found. An error\n          occurs if the json_doc argument is\n          not a valid JSON document, any path\n          argument is not a valid path expression,\n          one_or_all is not\n          'one' or 'all', or\n          escape_char is not a constant\n          expression.\n        ", "\n          The one_or_all argument affects the\n          search as follows:\n", "\n\n'one': The search terminates after the\n              first match and returns one path string. It is undefined\n              which match is considered first.\n            \n'all': The search returns all matching\n              path strings such that no duplicate paths are included. If\n              there are multiple strings, they are autowrapped as an\n              array. The order of the array elements is undefined.\n\n", "\n          Within the search_str search string\n          argument, the % and _\n          characters work as for the LIKE\n          operator: % matches any number of\n          characters (including zero characters), and\n          _ matches exactly one character.\n        ", "\n          To specify a literal % or\n          _ character in the search string, precede\n          it by the escape character. The default is\n          \\ if the\n          escape_char argument is missing or\n          NULL. Otherwise,\n          escape_char must be a constant that\n          is empty or one character.\n        ", "\n          For more information about matching and escape character\n          behavior, see the description of\n          LIKE in\n          Section\u00a014.8.1, \u201cString Comparison Functions and Operators\u201d. For escape\n          character handling, a difference from the\n          LIKE behavior is that the escape\n          character for JSON_SEARCH()\n          must evaluate to a constant at compile time, not just at\n          execution time. For example, if\n          JSON_SEARCH() is used in a\n          prepared statement and the\n          escape_char argument is supplied\n          using a ? parameter, the parameter value\n          might be constant at execution time, but is not at compile\n          time.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"abc\", [{\"k\": \"10\"}, \"def\"], {\"x\":\"abc\"}, {\"y\":\"bcd\"}]';\n\nmysql> SELECT JSON_SEARCH(@j, 'one', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'one', 'abc') |\n+-------------------------------+\n| \"$[0]\"                        |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'ghi');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'ghi') |\n+-------------------------------+\n| NULL                          |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10');\n+------------------------------+\n| JSON_SEARCH(@j, 'all', '10') |\n+------------------------------+\n| \"$[1][0].k\"                  |\n+------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$');\n+-----------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$') |\n+-----------------------------------------+\n| \"$[1][0].k\"                             |\n+-----------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$**.k');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$**.k') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k');\n+-------------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k') |\n+-------------------------------------------------+\n| \"$[1][0].k\"                                     |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]');\n+-----------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]') |\n+-----------------------------------------------+\n| \"$[1][0].k\"                                   |\n+-----------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%a%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%a%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[3]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[3]') |\n+-------------------------------------------+\n| \"$[3].y\"                                  |\n+-------------------------------------------+", "\n          For more information about the JSON path syntax supported by\n          MySQL, including rules governing the wildcard operators\n          * and **, see\n          JSON Path Syntax.\n        "], "Examples": ["mysql> SET @j = '[\"abc\", [{\"k\": \"10\"}, \"def\"], {\"x\":\"abc\"}, {\"y\":\"bcd\"}]';\n\nmysql> SELECT JSON_SEARCH(@j, 'one', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'one', 'abc') |\n+-------------------------------+\n| \"$[0]\"                        |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'ghi');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'ghi') |\n+-------------------------------+\n| NULL                          |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10');\n+------------------------------+\n| JSON_SEARCH(@j, 'all', '10') |\n+------------------------------+\n| \"$[1][0].k\"                  |\n+------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$');\n+-----------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$') |\n+-----------------------------------------+\n| \"$[1][0].k\"                             |\n+-----------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$**.k');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$**.k') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k');\n+-------------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k') |\n+-------------------------------------------------+\n| \"$[1][0].k\"                                     |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]');\n+-----------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]') |\n+-----------------------------------------------+\n| \"$[1][0].k\"                                   |\n+-----------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%a%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%a%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[3]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[3]') |\n+-------------------------------------------+\n| \"$[3].y\"                                  |\n+-------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-search"], "Feature Type": ["Function"], "index": 527, "vector_txt": "527:Feature: JSON_SEARCH(json_doc,\n          one_or_all,\n          search_str[,\n          escape_char[,\n          path] ...])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SET(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert data into JSON document", "\nJSON_SET(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Inserts or updates data in a JSON document and returns the\n          result. Returns NULL if\n          json_doc or\n          path is NULL, or\n          if path, when given, does not\n          locate an object. Otherwise, an error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document\n          overwrites the existing document value with the new value. A\n          path-value pair for a nonexisting path in the document adds\n          the value to the document if the path identifies one of these\n          types of values:\n", "\n\n              A member not present in an existing object. The member is\n              added to the object and associated with the new value.\n            \n              A position past the end of an existing array. The array is\n              extended with the new value. If the existing value is not\n              an array, it is autowrapped as an array, then extended\n              with the new value.\n\n", "\n          Otherwise, a path-value pair for a nonexisting path in the\n          document is ignored and has no effect.\n        ", "\n          The optimizer can perform a partial, in-place update of a\n          JSON column instead of removing the old\n          document and writing the new document in its entirety to the\n          column. This optimization can be performed for an update\n          statement that uses the\n          JSON_SET() function and meets\n          the conditions outlined in\n          Partial Updates of JSON Values.\n        ", "\n          The JSON_SET(),\n          JSON_INSERT(), and\n          JSON_REPLACE() functions are\n          related:\n", "\n\nJSON_SET() replaces\n              existing values and adds nonexisting values.\n            \nJSON_INSERT() inserts\n              values without replacing existing values.\n            \nJSON_REPLACE() replaces\n              only existing values.\n\n", "\n          The following examples illustrate these differences, using one\n          path that does exist in the document ($.a)\n          and another that does not exist ($.c):\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_SET(@j, '$.a', 10, '$.c', '[true, false]');\n+-------------------------------------------------+\n| JSON_SET(@j, '$.a', 10, '$.c', '[true, false]') |\n+-------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}    |\n+-------------------------------------------------+\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_SET(@j, '$.a', 10, '$.c', '[true, false]');\n+-------------------------------------------------+\n| JSON_SET(@j, '$.a', 10, '$.c', '[true, false]') |\n+-------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}    |\n+-------------------------------------------------+\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-set"], "Feature Type": ["Function"], "index": 528, "vector_txt": "528:Feature: JSON_SET(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_STORAGE_SIZE(json_val)"], "Description": ["Space used for storage of binary representation of a JSON document", "\nJSON_STORAGE_SIZE(json_val)\n", "\n          This function returns the number of bytes used to store the\n          binary representation of a JSON document. When the argument is\n          a JSON column, this is the space used to\n          store the JSON document as it was inserted into the column,\n          prior to any partial updates that may have been performed on\n          it afterwards. json_val must be a\n          valid JSON document or a string which can be parsed as one. In\n          the case where it is string, the function returns the amount\n          of storage space in the JSON binary representation that is\n          created by parsing the string as JSON and converting it to\n          binary. It returns NULL if the argument is\n          NULL.\n        ", "\n          An error results when json_val is\n          not NULL, and is not\u2014or cannot be\n          successfully parsed as\u2014a JSON document.\n        ", "\n          To illustrate this function's behavior when used with a\n          JSON column as its argument, we create a\n          table named jtable containing a\n          JSON column jcol, insert\n          a JSON value into the table, then obtain the storage space\n          used by this column with\n          JSON_STORAGE_SIZE(), as shown here:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+-----------------------------------------------+------+------+\n| jcol                                          | Size | Free |\n+-----------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    0 |\n+-----------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          According to the output of\n          JSON_STORAGE_SIZE(), the JSON document\n          inserted into the column takes up 47 bytes. We also checked\n          the amount of space freed by any previous partial updates of\n          the column using\n          JSON_STORAGE_FREE(); since no\n          updates have yet been performed, this is 0, as expected.\n        ", "\n          Next we perform an UPDATE on\n          the table that should result in a partial update of the\n          document stored in jcol, and then test the\n          result as shown here:\n        ", "Press CTRL+C to copy mysql> UPDATE jtable SET jcol = \n    ->     JSON_SET(jcol, \"$.b\", \"a\");\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+--------------------------------------------+------+------+\n| jcol                                       | Size | Free |\n+--------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    3 |\n+--------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          The value returned by JSON_STORAGE_FREE()\n          in the previous query indicates that a partial update of the\n          JSON document was performed, and that this freed 3 bytes of\n          space used to store it. The result returned by\n          JSON_STORAGE_SIZE() is unchanged by the\n          partial update.\n        ", "\n          Partial updates are supported for updates using\n          JSON_SET(),\n          JSON_REPLACE(), or\n          JSON_REMOVE(). The direct\n          assignment of a value to a JSON column\n          cannot be partially updated; following such an update,\n          JSON_STORAGE_SIZE() always shows the\n          storage used for the newly-set value:\n        ", "Press CTRL+C to copy mysql> UPDATE jtable\nmysql>     SET jcol = '{\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+------------------------------------------------+------+------+\n| jcol                                           | Size | Free |\n+------------------------------------------------+------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |   56 |    0 |\n+------------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          A JSON user variable cannot be partially updated. This means\n          that this function always shows the space currently used to\n          store a JSON document in a user variable:\n        ", "Press CTRL+C to copy mysql> SET @j = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+------------------------------------+------+\n| @j                                 | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   45 |\n+------------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[1]', \"json\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+----------------------------------+------+\n| @j                               | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   43 |\n+----------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+---------------------------------------------+------+\n| @j                                          | Size |\n+---------------------------------------------+------+\n| [100, \"json\", [[10, 20, 30], 3, 5], 425.05] |   56 |\n+---------------------------------------------+------+\n1 row in set (0.00 sec)", "\n          For a JSON literal, this function always returns the current\n          storage space used:\n        ", "Press CTRL+C to copy mysql> SELECT\n    ->     JSON_STORAGE_SIZE('[100, \"sakila\", [1, 3, 5], 425.05]') AS A,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"}') AS B,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}') AS C,\n    ->     JSON_STORAGE_SIZE('[100, \"json\", [[10, 20, 30], 3, 5], 425.05]') AS D;\n+----+----+----+----+\n| A  | B  | C  | D  |\n+----+----+----+----+\n| 45 | 44 | 47 | 56 |\n+----+----+----+----+\n1 row in set (0.00 sec)"], "Examples": ["mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+-----------------------------------------------+------+------+\n| jcol                                          | Size | Free |\n+-----------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    0 |\n+-----------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> UPDATE jtable SET jcol = \n    ->     JSON_SET(jcol, \"$.b\", \"a\");\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+--------------------------------------------+------+------+\n| jcol                                       | Size | Free |\n+--------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    3 |\n+--------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> UPDATE jtable\nmysql>     SET jcol = '{\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+------------------------------------------------+------+------+\n| jcol                                           | Size | Free |\n+------------------------------------------------+------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |   56 |    0 |\n+------------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> SET @j = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+------------------------------------+------+\n| @j                                 | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   45 |\n+------------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[1]', \"json\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+----------------------------------+------+\n| @j                               | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   43 |\n+----------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+---------------------------------------------+------+\n| @j                                          | Size |\n+---------------------------------------------+------+\n| [100, \"json\", [[10, 20, 30], 3, 5], 425.05] |   56 |\n+---------------------------------------------+------+\n1 row in set (0.00 sec)", "mysql> SELECT\n    ->     JSON_STORAGE_SIZE('[100, \"sakila\", [1, 3, 5], 425.05]') AS A,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"}') AS B,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}') AS C,\n    ->     JSON_STORAGE_SIZE('[100, \"json\", [[10, 20, 30], 3, 5], 425.05]') AS D;\n+----+----+----+----+\n| A  | B  | C  | D  |\n+----+----+----+----+\n| 45 | 44 | 47 | 56 |\n+----+----+----+----+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-storage-size"], "Feature Type": ["Function"], "index": 529, "vector_txt": "529:Feature: JSON_STORAGE_SIZE(json_val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_TYPE(json_val)"], "Description": ["Type of JSON value", "\nJSON_TYPE(json_val)\n", "\n          Returns a utf8mb4 string indicating the\n          type of a JSON value. This can be an object, an array, or a\n          scalar type, as shown here:\n        ", "Press CTRL+C to copy mysql> SET @j = '{\"a\": [10, true]}';\nmysql> SELECT JSON_TYPE(@j);\n+---------------+\n| JSON_TYPE(@j) |\n+---------------+\n| OBJECT        |\n+---------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a'));\n+------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a')) |\n+------------------------------------+\n| ARRAY                              |\n+------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]')) |\n+---------------------------------------+\n| INTEGER                               |\n+---------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]')) |\n+---------------------------------------+\n| BOOLEAN                               |\n+---------------------------------------+", "\nJSON_TYPE() returns\n          NULL if the argument is\n          NULL:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+", "\n          An error occurs if the argument is not a valid JSON value:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required.", "\n          For a non-NULL, non-error result, the\n          following list describes the possible\n          JSON_TYPE() return values:\n", "\n\n              Purely JSON types:\n\n\n\nOBJECT: JSON objects\n                \nARRAY: JSON arrays\n                \nBOOLEAN: The JSON true and false\n                  literals\n                \nNULL: The JSON null literal\n\n\n\n              Numeric types:\n\n\n\nINTEGER: MySQL\n                  TINYINT,\n                  SMALLINT,\n                  MEDIUMINT and\n                  INT and\n                  BIGINT scalars\n                \nDOUBLE: MySQL\n                  DOUBLE\nFLOAT scalars\n                \nDECIMAL: MySQL\n                  DECIMAL and\n                  NUMERIC scalars\n\n\n\n              Temporal types:\n\n\n\nDATETIME: MySQL\n                  DATETIME and\n                  TIMESTAMP scalars\n                \nDATE: MySQL\n                  DATE scalars\n                \nTIME: MySQL\n                  TIME scalars\n\n\n\n              String types:\n\n\n\nSTRING: MySQL\n                  utf8mb3 character type scalars:\n                  CHAR,\n                  VARCHAR,\n                  TEXT,\n                  ENUM, and\n                  SET\n\n\n\n              Binary types:\n\n\n\nBLOB: MySQL binary type scalars\n                  including BINARY,\n                  VARBINARY,\n                  BLOB, and\n                  BIT\n\n\n\n              All other types:\n\n\n\nOPAQUE (raw bits)\n\n\n\n"], "Examples": ["mysql> SET @j = '{\"a\": [10, true]}';\nmysql> SELECT JSON_TYPE(@j);\n+---------------+\n| JSON_TYPE(@j) |\n+---------------+\n| OBJECT        |\n+---------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a'));\n+------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a')) |\n+------------------------------------+\n| ARRAY                              |\n+------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]')) |\n+---------------------------------------+\n| INTEGER                               |\n+---------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]')) |\n+---------------------------------------+\n| BOOLEAN                               |\n+---------------------------------------+", "mysql> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+", "mysql> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required."], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-type"], "Feature Type": ["Function"], "index": 530, "vector_txt": "530:Feature: JSON_TYPE(json_val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_UNQUOTE(json_val)"], "Description": ["Unquote JSON value", "\nJSON_UNQUOTE(json_val)\n", "\n          Unquotes JSON value and returns the result as a\n          utf8mb4 string. Returns\n          NULL if the argument is\n          NULL. An error occurs if the value starts\n          and ends with double quotes but is not a valid JSON string\n          literal.\n        ", "\n          Within a string, certain sequences have special meaning unless\n          the NO_BACKSLASH_ESCAPES SQL\n          mode is enabled. Each of these sequences begins with a\n          backslash (\\), known as the\n          escape character. MySQL recognizes the\n          escape sequences shown in\n          Table\u00a014.23, \u201cJSON_UNQUOTE() Special Character Escape Sequences\u201d. For\n          all other escape sequences, backslash is ignored. That is, the\n          escaped character is interpreted as if it was not escaped. For\n          example, \\x is just x.\n          These sequences are case-sensitive. For example,\n          \\b is interpreted as a backspace, but\n          \\B is interpreted as B.\n", "\nTable\u00a014.23\u00a0JSON_UNQUOTE() Special Character Escape Sequences\n\n\nEscape Sequence\nCharacter Represented by Sequence\n\n\\\"\nA double quote (\") character\n\n\\b\nA backspace character\n\n\\f\nA formfeed character\n\n\\n\nA newline (linefeed) character\n\n\\r\nA carriage return character\n\n\\t\nA tab character\n\n\\\\\nA backslash (\\) character\n\n\\uXXXX\nUTF-8 bytes for Unicode value XXXX\n\n\n", "\n          Two simple examples of the use of this function are shown\n          here:\n        ", "Press CTRL+C to copy mysql> SET @j = '\"abc\"';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-------+------------------+\n| @j    | JSON_UNQUOTE(@j) |\n+-------+------------------+\n| \"abc\" | abc              |\n+-------+------------------+\nmysql> SET @j = '[1, 2, 3]';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-----------+------------------+\n| @j        | JSON_UNQUOTE(@j) |\n+-----------+------------------+\n| [1, 2, 3] | [1, 2, 3]        |\n+-----------+------------------+", "\n          The following set of examples shows how\n          JSON_UNQUOTE handles escapes with\n          NO_BACKSLASH_ESCAPES\n          disabled and enabled:\n        ", "Press CTRL+C to copy mysql> SELECT @@sql_mode;\n+------------+\n| @@sql_mode |\n+------------+\n|            |\n+------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n|       2                           |\n+------------------------------+\n\nmysql> SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n| \\t\\u0032                     |\n+------------------------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\t\\u0032\"');\n+----------------------------+\n| JSON_UNQUOTE('\"\\t\\u0032\"') |\n+----------------------------+\n|       2                         |\n+----------------------------+"], "Examples": ["mysql> SET @j = '\"abc\"';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-------+------------------+\n| @j    | JSON_UNQUOTE(@j) |\n+-------+------------------+\n| \"abc\" | abc              |\n+-------+------------------+\nmysql> SET @j = '[1, 2, 3]';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-----------+------------------+\n| @j        | JSON_UNQUOTE(@j) |\n+-----------+------------------+\n| [1, 2, 3] | [1, 2, 3]        |\n+-----------+------------------+", "mysql> SELECT @@sql_mode;\n+------------+\n| @@sql_mode |\n+------------+\n|            |\n+------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n|       2                           |\n+------------------------------+\n\nmysql> SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n| \\t\\u0032                     |\n+------------------------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\t\\u0032\"');\n+----------------------------+\n| JSON_UNQUOTE('\"\\t\\u0032\"') |\n+----------------------------+\n|       2                         |\n+----------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-unquote"], "Feature Type": ["Function"], "index": 531, "vector_txt": "531:Feature: JSON_UNQUOTE(json_val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["COALESCE(value,...)"], "Description": ["Return the first non-NULL argument", "\nCOALESCE(value,...)\n", "\n            Returns the first non-NULL value in the\n            list, or NULL if there are no\n            non-NULL values.\n          ", "\n            The return type of COALESCE()\n            is the aggregated type of the argument types.\n          ", "Press CTRL+C to copy mysql> SELECT COALESCE(NULL,1);\n        -> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n        -> NULL"], "Examples": ["mysql> SELECT COALESCE(NULL,1);\n        -> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n        -> NULL"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_coalesce"], "Feature Type": ["Function"], "index": 532, "vector_txt": "532:Feature: COALESCE(value,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_VALID(val)"], "Description": ["Whether JSON value is valid", "\nJSON_VALID(val)\n", "\n          Returns 0 or 1 to indicate whether a value is valid JSON.\n          Returns NULL if the argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT JSON_VALID('hello'), JSON_VALID('\"hello\"');\n+---------------------+-----------------------+\n| JSON_VALID('hello') | JSON_VALID('\"hello\"') |\n+---------------------+-----------------------+\n|                   0 |                     1 |\n+---------------------+-----------------------+"], "Examples": ["mysql> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT JSON_VALID('hello'), JSON_VALID('\"hello\"');\n+---------------------+-----------------------+\n| JSON_VALID('hello') | JSON_VALID('\"hello\"') |\n+---------------------+-----------------------+\n|                   0 |                     1 |\n+---------------------+-----------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-valid"], "Feature Type": ["Function"], "index": 533, "vector_txt": "533:Feature: JSON_VALID(val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_VALUE(json_doc,\n          path)"], "Description": ["Extract value from JSON document at location pointed to by path", "\nJSON_VALUE(json_doc,\n          path)\n", "\n          Extracts a value from a JSON document at the path given in the\n          specified document, and returns the extracted value,\n          optionally converting it to a desired type. The complete\n          syntax is shown here:\n        ", "Press CTRL+C to copy JSON_VALUE(json_doc, path [RETURNING type] [on_empty] [on_error])\n\non_empty:\n    {NULL | ERROR | DEFAULT value} ON EMPTY\n\non_error:\n    {NULL | ERROR | DEFAULT value} ON ERROR", "\njson_doc is a valid JSON document.\n          If this is NULL, the function returns\n          NULL.\n        ", "\npath is a JSON path pointing to a\n          location in the document. This must be a string literal value.\n        ", "\ntype is one of the following data\n          types:\n", "\n\nFLOAT\n\nDOUBLE\n\nDECIMAL\n\nSIGNED\n\nUNSIGNED\n\nDATE\n\nTIME\n\nDATETIME\n\nYEAR\n\nYEAR values of one or two digits are\n              not supported.\n            \nCHAR\n\nJSON\n\n", "\n          The types just listed are the same as the (non-array) types\n          supported by the CAST()\n          function.\n        ", "\n          If not specified by a RETURNING clause, the\n          JSON_VALUE() function's return type is\n          VARCHAR(512). When no character\n          set is specified for the return type,\n          JSON_VALUE() uses\n          utf8mb4 with the binary collation, which is\n          case-sensitive; if utf8mb4 is specified as\n          the character set for the result, the server uses the default\n          collation for this character set, which is not case-sensitive.\n        ", "\n          When the data at the specified path consists of or resolves to\n          a JSON null literal, the function returns SQL\n          NULL.\n        ", "\non_empty, if specified, determines\n          how JSON_VALUE() behaves when no data is\n          found at the path given; this clause takes one of the\n          following values:\n", "\n\nNULL ON EMPTY: The function returns\n              NULL; this is the default ON\n              EMPTY behavior.\n            \nDEFAULT value ON\n              EMPTY: the provided\n              value is returned. The\n              value's type must match that of the return type.\n            \nERROR ON EMPTY: The function throws an\n              error.\n\n", "\n          If used, on_error takes one of the\n          following values with the corresponding outcome when an error\n          occurs, as listed here:\n", "\n\nNULL ON ERROR:\n              JSON_VALUE() returns\n              NULL; this is the default behavior if\n              no ON ERROR clause is used.\n            \nDEFAULT value ON\n              ERROR: This is the value returned; its value\n              must match that of the return type.\n            \nERROR ON ERROR: An error is thrown.\n\n", "\nON EMPTY, if used, must precede any\n          ON ERROR clause. Specifying them in the\n          wrong order results in a syntax error.\n        ", "Error handling.\u00a0\n            In general, errors are handled by\n            JSON_VALUE() as follows:\n", "\n\n              All JSON input (document and path) is checked for\n              validity. If any of it is not valid, an SQL error is\n              thrown without triggering the ON ERROR\n              clause.\n            \nON ERROR is triggered whenever any of\n              the following events occur:\n\n\n\n                  Attempting to extract an object or an array, such as\n                  that resulting from a path that resolves to multiple\n                  locations within the JSON document\n                \n                  Conversion errors, such as attempting to convert\n                  'asdf' to an\n                  UNSIGNED value\n                \n                  Truncation of values\n\n\n\n              A conversion error always triggers a warning even if\n              NULL ON ERROR or DEFAULT ...\n              ON ERROR is specified.\n            \n              The ON EMPTY clause is triggered when\n              the source JSON document (expr)\n              contains no data at the specified location\n              (path).\n\n", "Examples.\u00a0\n            Two simple examples are shown here:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Joe                                                          |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"49.95\"}', '$.price'\n    -> RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 49.95 |\n+-------+", "\n          The statement SELECT\n          JSON_VALUE(json_doc,\n          path RETURNING\n          type) is equivalent to\n          the following statement:\n        ", "Press CTRL+C to copy SELECT CAST(\n    JSON_UNQUOTE( JSON_EXTRACT(json_doc, path) )\n    AS type\n);", "\nJSON_VALUE() simplifies creating indexes on\n          JSON columns by making it unnecessary in many cases to create\n          a generated column and then an index on the generated column.\n          You can do this when creating a table t1\n          that has a JSON column by\n          creating an index on an expression that uses\n          JSON_VALUE() operating on that column (with\n          a path that matches a value in that column), as shown here:\n        ", "Press CTRL+C to copy CREATE TABLE t1(\n    j JSON,\n    INDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )\n);", "\n          The following EXPLAIN output\n          shows that a query against t1 employing the\n          index expression in the WHERE clause uses\n          the index thus created:\n        ", "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t1\n    ->     WHERE JSON_VALUE(j, '$.id' RETURNING UNSIGNED) = 123\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: t1\n   partitions: NULL\n         type: ref\npossible_keys: i1\n          key: i1\n      key_len: 9\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL", "\n          This achieves much the same effect as creating a table\n          t2 with an index on a generated column (see\n          Indexing a Generated Column to Provide a JSON Column Index), like this one:\n        ", "Press CTRL+C to copy CREATE TABLE t2 (\n    j JSON,\n    g INT GENERATED ALWAYS AS (j->\"$.id\"),\n    INDEX i1 (g)\n);", "\n          The EXPLAIN output for a query\n          against this table, referencing the generated column, shows\n          that the index is used in the same way as for the previous\n          query against table t1:\n        ", "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t2 WHERE g  = 123\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: t2\n   partitions: NULL\n         type: ref\npossible_keys: i1\n          key: i1\n      key_len: 5\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL", "\n          For information about using indexes on generated columns for\n          indirect indexing of JSON\n          columns, see Indexing a Generated Column to Provide a JSON Column Index.\n        "], "Examples": ["mysql> SELECT JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Joe                                                          |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"49.95\"}', '$.price'\n    -> RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 49.95 |\n+-------+", "SELECT CAST(\n    JSON_UNQUOTE( JSON_EXTRACT(json_doc, path) )\n    AS type\n);", "CREATE TABLE t1(\n    j JSON,\n    INDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )\n);", "CREATE TABLE t2 (\n    j JSON,\n    g INT GENERATED ALWAYS AS (j->\"$.id\"),\n    INDEX i1 (g)\n);"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-value"], "Feature Type": ["Function"], "index": 534, "vector_txt": "534:Feature: JSON_VALUE(json_doc,\n          path)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference", "14.4 Operators"], "Feature": ["value\n          MEMBER OF(json_array)"], "Description": ["Returns true (1) if first operand matches any element of JSON", "\nvalue\n          MEMBER OF(json_array)\n", "\n          Returns true (1) if value is an\n          element of json_array, otherwise\n          returns false (0). value must be a\n          scalar or a JSON document; if it is a scalar, the operator\n          attempts to treat it as an element of a JSON array. If\n          value or\n          json_array is\n          NULL, the function returns\n          NULL.\n        ", "\n          Queries using MEMBER OF() on JSON columns\n          of InnoDB tables in the\n          WHERE clause can be optimized using\n          multi-valued indexes. See\n          Multi-Valued Indexes, for detailed\n          information and examples.\n        ", "\n          Simple scalars are treated as array values, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+-------------------------------------------+\n| 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+-------------------------------------------+\n|                                         1 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+---------------------------------------------+\n| 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set (0.00 sec)", "\n          Partial matches of array element values do not match:\n        ", "Press CTRL+C to copy mysql> SELECT 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+------------------------------------------+\n| 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n1 row in set (0.00 sec)", "Press CTRL+C to copy mysql> SELECT 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+--------------------------------------------+\n| 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+--------------------------------------------+\n|                                          0 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "\n          Conversions to and from string types are not performed:\n        ", "Press CTRL+C to copy mysql> SELECT\n    -> 17 MEMBER OF('[23, \"abc\", \"17\", \"ab\", 10]'),\n    -> \"17\" MEMBER OF('[23, \"abc\", 17, \"ab\", 10]')\\G\n*************************** 1. row ***************************\n17 MEMBER OF('[23, \"abc\", \"17\", \"ab\", 10]'): 0\n\"17\" MEMBER OF('[23, \"abc\", 17, \"ab\", 10]'): 0\n1 row in set (0.00 sec)", "\n          To use this operator with a value which itself an array, it is\n          necessary to cast it explicitly as a JSON array. You can do\n          this with CAST(... AS JSON):\n        ", "Press CTRL+C to copy mysql> SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------------+\n| CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+\n1 row in set (0.00 sec)", "\n          It is also possible to perform the necessary cast using the\n          JSON_ARRAY() function, like\n          this:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------+\n| JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "\n          Any JSON objects used as values to be tested or which appear\n          in the target array must be coerced to the correct type using\n          CAST(... AS JSON) or\n          JSON_OBJECT(). In addition, a\n          target array containing JSON objects must itself be cast using\n          JSON_ARRAY. This is demonstrated in the\n          following sequence of statements:\n        ", "Press CTRL+C to copy mysql> SET @a = CAST('{\"a\":1}' AS JSON);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @b = JSON_OBJECT(\"b\", 2);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @c = JSON_ARRAY(17, @b, \"abc\", @a, 23);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a MEMBER OF(@c), @b MEMBER OF(@c);\n+------------------+------------------+\n| @a MEMBER OF(@c) | @b MEMBER OF(@c) |\n+------------------+------------------+\n|                1 |                1 |\n+------------------+------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+-------------------------------------------+\n| 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+-------------------------------------------+\n|                                         1 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+---------------------------------------------+\n| 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+------------------------------------------+\n| 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+--------------------------------------------+\n| 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+--------------------------------------------+\n|                                          0 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------------+\n| CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------+\n| JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SET @a = CAST('{\"a\":1}' AS JSON);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @b = JSON_OBJECT(\"b\", 2);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @c = JSON_ARRAY(17, @b, \"abc\", @a, 23);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a MEMBER OF(@c), @b MEMBER OF(@c);\n+------------------+------------------+\n| @a MEMBER OF(@c) | @b MEMBER OF(@c) |\n+------------------+------------------+\n|                1 |                1 |\n+------------------+------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#operator_member-of"], "Feature Type": ["Function"], "index": 535, "vector_txt": "535:Feature: value\n          MEMBER OF(json_array)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_add_managed()"], "Description": ["Add group member source server configuration information to a", "\nasynchronous_connection_failover_add_managed()\n", "\n            Add configuration information for a replication source\n            server that is part of a managed group (a Group Replication\n            group member) to the source list for a replication channel.\n            You only need to add one group member. The replica\n            automatically adds the rest from the current group\n            membership, then keeps the source list updated in line with\n            membership change.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_add_managed(channel, managed_type, managed_name, host, port, network_namespace, primary_weight, secondary_weight)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server is part\n                of the source list.\n              \nmanaged_type: The type of\n                managed service that the asynchronous connection\n                failover mechanism must provide for this server. The\n                only value currently accepted is\n                GroupReplication.\n              \nmanaged_name: The identifier\n                for the managed group that the server is a part of. For\n                the GroupReplication managed service,\n                the identifier is the value of the\n                group_replication_group_name\n                system variable.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n              \nprimary_weight: The priority\n                of this replication source server in the replication\n                channel's source list when it is acting as the primary\n                for the managed group. The weight is from 1 to 100, with\n                100 being the highest. For the primary, 80 is a suitable\n                weight. The asynchronous connection failover mechanism\n                activates if the currently connected source is not the\n                highest weighted in the group. Assuming that you set up\n                the managed group to give a higher weight to a primary\n                and a lower weight to a secondary, when the primary\n                changes, its weight increases, and the replica changes\n                over the connection to it.\n              \nsecondary_weight: The\n                priority of this replication source server in the\n                replication channel's source list when it is acting as a\n                secondary in the managed group. The weight is from 1 to\n                100, with 100 being the highest. For a secondary, 60 is\n                a suitable weight.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_add_managed('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60);\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60) |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully inserted.                                                                                        |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_add_managed('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60);\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60) |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully inserted.                                                                                        |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-managed"], "Feature Type": ["Function"], "index": 536, "vector_txt": "536:Feature: asynchronous_connection_failover_add_managed()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_add_source()"], "Description": ["Add source server configuration information server to a", "\nasynchronous_connection_failover_add_source()\n", "\n            Add configuration information for a replication source\n            server to the source list for a replication channel.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_add_source(channel, host, port, network_namespace, weight)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server is part\n                of the source list.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n              \nweight: The priority of this\n                replication source server in the replication channel's\n                source list. The priority is from 1 to 100, with 100\n                being the highest, and 50 being the default. When the\n                asynchronous connection failover mechanism activates,\n                the source with the highest priority setting among the\n                alternative sources listed in the source list for the\n                channel is chosen for the first connection attempt. If\n                this attempt does not work, the replica tries with all\n                the listed sources in descending order of priority, then\n                starts again from the highest priority source. If\n                multiple sources have the same priority, the replica\n                orders them randomly. The asynchronous connection\n                failover mechanism activates if the source currently\n                connected is not the highest weighted in the group.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80);\n+-------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80)              |\n+-------------------------------------------------------------------------------------------------+\n| Source configuration details successfully inserted.                                             |\n+-------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80);\n+-------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80)              |\n+-------------------------------------------------------------------------------------------------+\n| Source configuration details successfully inserted.                                             |\n+-------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-source"], "Feature Type": ["Function"], "index": 537, "vector_txt": "537:Feature: asynchronous_connection_failover_add_source()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.3 Asynchronous Replication Channel Failover Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_delete_managed()"], "Description": ["Remove a managed group from a replication channel source list", "\nasynchronous_connection_failover_delete_managed()\n", "\n            Remove an entire managed group from the source list for a\n            replication channel. When you use this function, all the\n            replication source servers defined in the managed group are\n            removed from the channel's source list.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_delete_managed(channel, managed_name)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server was\n                part of the source list.\n              \nmanaged_name: The identifier\n                for the managed group that the server is a part of. For\n                the GroupReplication managed service,\n                the identifier is the value of the\n                group_replication_group_name\n                system variable.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa');\n+-----------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa') |\n+-----------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully deleted.                                          |\n+-----------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa');\n+-----------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa') |\n+-----------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully deleted.                                          |\n+-----------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-managed"], "Feature Type": ["Function"], "index": 538, "vector_txt": "538:Feature: asynchronous_connection_failover_delete_managed()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18.3 Asynchronous Replication Channel Failover Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_delete_source()"], "Description": ["Remove a source server from a replication channel source list", "\nasynchronous_connection_failover_delete_source()\n", "\n            Remove configuration information for a replication source\n            server from the source list for a replication channel.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_delete_source(channel, host, port, network_namespace)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server was\n                part of the source list.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '');\n+------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '')              |\n+------------------------------------------------------------------------------------------------+\n| Source configuration details successfully deleted.                                             |\n+------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '');\n+------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '')              |\n+------------------------------------------------------------------------------------------------+\n| Source configuration details successfully deleted.                                             |\n+------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-source"], "Feature Type": ["Function"], "index": 539, "vector_txt": "539:Feature: asynchronous_connection_failover_delete_source()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_disable_member_action()"], "Description": ["Disable member action for event specified", "\ngroup_replication_disable_member_action()\n", "\n              Disable a member action so that the member does not take\n              it in the specified situation. If the server where you use\n              the function is part of a group, it must be the current\n              primary in a group in single-primary mode, and it must be\n              part of the majority. The changed setting is propagated to\n              other group members and joining members, so they will all\n              act in the same way when they are in the specified\n              situation, and you only need to use the function on the\n              primary.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_disable_member_action(name, event)", "\n              Arguments:\n", "\n\nname: The name of the\n                  member action to disable.\n                \nevent: The event that\n                  triggers the member action.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_disable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n            "], "Examples": ["SELECT group_replication_disable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-disable-member-action"], "Feature Type": ["Function"], "index": 540, "vector_txt": "540:Feature: group_replication_disable_member_action()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_enable_member_action()"], "Description": ["Enable member action for event specified", "\ngroup_replication_enable_member_action()\n", "\n              Enable a member action for the member to take in the\n              specified situation. If the server where you use the\n              function is part of a group, it must be the current\n              primary in a group in single-primary mode, and it must be\n              part of the majority. The changed setting is propagated to\n              other group members and joining members, so they will all\n              act in the same way when they are in the specified\n              situation, and you only need to use the function on the\n              primary.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_enable_member_action(name, event)", "\n              Arguments:\n", "\n\nname: The name of the\n                  member action to enable.\n                \nevent: The event that\n                  triggers the member action.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_enable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n            "], "Examples": ["SELECT group_replication_enable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-enable-member-action"], "Feature Type": ["Function"], "index": 541, "vector_txt": "541:Feature: group_replication_enable_member_action()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_get_communication_protocol()"], "Description": ["Get version of group replication communication protocol currently", "\ngroup_replication_get_communication_protocol()\n", "\n              Inspect the Group Replication communication protocol\n              version that is currently in use for a group.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_get_communication_protocol()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              The oldest MySQL Server version that can join this group\n              and use the group's communication protocol. Note that\n              the\n              group_replication_get_communication_protocol()\n              function returns the minimum MySQL version that the group\n              supports, which might differ from the version number that\n              was passed to\n              group_replication_set_communication_protocol(),\n              and from the MySQL Server version that is installed on the\n              member where you use the function.\n            ", "\n              If the protocol cannot be inspected because this server\n              instance does not belong to a replication group, an error\n              is returned as a string.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_get_communication_protocol();\n+------------------------------------------------+\n| group_replication_get_communication_protocol() |\n+------------------------------------------------+\n| 8.4.0                                          |\n+------------------------------------------------+", "\n              For more information, see\n              Section\u00a020.5.1.4, \u201cSetting a Group's Communication Protocol Version\u201d.\n            "], "Examples": ["SELECT group_replication_get_communication_protocol();\n+------------------------------------------------+\n| group_replication_get_communication_protocol() |\n+------------------------------------------------+\n| 8.4.0                                          |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-communication-protocol.html#function_group-replication-get-communication-protocol"], "Feature Type": ["Function"], "index": 542, "vector_txt": "542:Feature: group_replication_get_communication_protocol()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["COERCIBILITY(str)"], "Description": ["Return the collation coercibility value of the string argument", "\nCOERCIBILITY(str)\n", "\n          Returns the collation coercibility value of the string\n          argument.\n        ", "Press CTRL+C to copy mysql> SELECT COERCIBILITY('abc' COLLATE utf8mb4_swedish_ci);\n        -> 0\nmysql> SELECT COERCIBILITY(USER());\n        -> 3\nmysql> SELECT COERCIBILITY('abc');\n        -> 4\nmysql> SELECT COERCIBILITY(1000);\n        -> 5", "\n          The return values have the meanings shown in the following\n          table. Lower values have higher precedence.\n", "\n\nCoercibility\nMeaning\nExample\n\n0\nExplicit collation\nValue with COLLATE clause\n\n1\nNo collation\nConcatenation of strings with different collations\n\n2\nImplicit collation\nColumn value, stored routine parameter or local variable\n\n3\nSystem constant\nUSER() return value\n\n4\nCoercible\nLiteral string\n\n5\nNumeric\nNumeric or temporal value\n\n6\nIgnorable\nNULL or an expression derived from\n                NULL\n\n", "\n          For more information, see\n          Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n        "], "Examples": ["mysql> SELECT COERCIBILITY('abc' COLLATE utf8mb4_swedish_ci);\n        -> 0\nmysql> SELECT COERCIBILITY(USER());\n        -> 3\nmysql> SELECT COERCIBILITY('abc');\n        -> 4\nmysql> SELECT COERCIBILITY(1000);\n        -> 5"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_coercibility"], "Feature Type": ["Function"], "index": 543, "vector_txt": "543:Feature: COERCIBILITY(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_get_write_concurrency()"], "Description": ["Get maximum number of consensus instances currently set for group", "\ngroup_replication_get_write_concurrency()\n", "\n              Check the maximum number of consensus instances that a\n              group can execute in parallel.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy INT group_replication_get_write_concurrency()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              The maximum number of consensus instances currently set\n              for the group.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_get_write_concurrency()", "\n              For more information, see\n              Section\u00a020.5.1.3, \u201cUsing Group Replication Group Write Consensus\u201d.\n            "], "Examples": [], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-maximum-consensus.html#function_group-replication-get-write-concurrency"], "Feature Type": ["Function"], "index": 544, "vector_txt": "544:Feature: group_replication_get_write_concurrency()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_reset_member_actions()"], "Description": ["Reset all member actions to defaults and configuration version", "\ngroup_replication_reset_member_actions()\n", "\n              Reset the member actions configuration to the default\n              settings, and reset its version number to 1.\n            ", "\n              The\n              group_replication_reset_member_actions()\n              function can only be used on a server that is not\n              currently part of a group. The server must be writeable\n              (with the read_only\n              system variable set to OFF) and have\n              the Group Replication plugin installed. You can use this\n              function to remove the member actions configuration that a\n              server used when it was part of a group, if you intend to\n              use it as a standalone server with no member actions or\n              different member actions.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_reset_member_actions()", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_reset_member_actions();", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n"], "Examples": ["SELECT group_replication_reset_member_actions();"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-reset-member-actions"], "Feature Type": ["Function"], "index": 545, "vector_txt": "545:Feature: group_replication_reset_member_actions()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_set_as_primary()"], "Description": ["Make a specific group member the primary", "\ngroup_replication_set_as_primary()\n", "\n              Appoints a specific member of the group as the new\n              primary, overriding any election process.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_as_primary(member_uuid[, timeout])", "\n              Arguments:\n", "\n\nmember_uuid: A string\n                  containing the UUID of the member of the group that\n                  you want to become the new primary.\n                \ntimeout: An integer\n                  specifying a timeout in seconds for transactions that\n                  are running on the existing primary when you use the\n                  function. You can set a timeout from 0 seconds\n                  (immediately) up to 3600 seconds (60 minutes). When\n                  you set a timeout, new transactions cannot start on\n                  the primary from that point on. There is no default\n                  setting for the timeout, so if you do not set it,\n                  there is no upper limit to the wait time, and new\n                  transactions can start during that time.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_as_primary(\u201800371d66-3c45-11ea-804b-080027337932\u2019, 300);", "\n              This function waits for all ongoing transactions and DML\n              operations to finish before electing the new primary. In\n              MySQL 8.4, it also waits for the completion\n              of any ongoing DDL statements such as\n              ALTER TABLE. Operations\n              that are considered DDL statements for this purpose are\n              listed here:\n", "\n\nALTER DATABASE\n\nALTER FUNCTION\n\nALTER INSTANCE\n\nALTER PROCEDURE\n\nALTER SERVER\n\nALTER TABLE\n\nALTER TABLESPACE\n\nALTER USER\n\nALTER VIEW\n\nANALYZE TABLE\n\nCACHE INDEX\n\nCHECK TABLE\n\nCREATE DATABASE\n\nCREATE FUNCTION\n\nCREATE INDEX\n\nCREATE ROLE\n\nCREATE PROCEDURE\n\nCREATE SERVER\n\nCREATE SPATIAL REFERENCE\n                  SYSTEM\n\nCREATE TABLE\n\nCREATE TABLESPACE\n\nCREATE TRIGGER\n\nCREATE USER\n\nCREATE VIEW\n\nDROP DATABASE\n\nDROP FUNCTION\n\nDROP INDEX\n\nDROP PROCEDURE\n\nDROP ROLE\n\nDROP SERVER\n\nDROP SPATIAL REFERENCE\n                  SYSTEM\n\nDROP TABLE\n\nDROP TABLESPACE\n\nDROP TRIGGER\n\nDROP USER\n\nDROP VIEW\n\nGRANT\n\nLOAD INDEX\n\nOPTIMIZE TABLE\n\nRENAME TABLE\n\nREPAIR TABLE\n\nREVOKE\n\nTRUNCATE TABLE\n\n", "\n              This also includes any open cursors (see\n              Section\u00a015.6.6, \u201cCursors\u201d).\n            ", "\n              For more information, see\n              Section\u00a020.5.1.1, \u201cChanging the Primary\u201d.\n"], "Examples": ["SELECT group_replication_set_as_primary(\u201800371d66-3c45-11ea-804b-080027337932\u2019, 300);"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-new-primary.html#function_group-replication-set-as-primary"], "Feature Type": ["Function"], "index": 546, "vector_txt": "546:Feature: group_replication_set_as_primary()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_set_communication_protocol()"], "Description": ["Set version for group replication communication protocol to use", "\ngroup_replication_set_communication_protocol()\n", "\n              Downgrade the Group Replication communication protocol\n              version of a group so that members at earlier releases can\n              join, or upgrade the Group Replication communication\n              protocol version of a group after upgrading MySQL Server\n              on all members. The\n              GROUP_REPLICATION_ADMIN\n              privilege is required to use this function, and all\n              existing group members must be online when you issue the\n              statement, with no loss of majority.\n", "\n\nNote\n\n\n                For MySQL InnoDB cluster, the communication protocol\n                version is managed automatically whenever the cluster\n                topology is changed using AdminAPI operations. You do\n                not have to use these functions yourself for an InnoDB\n                cluster.\n\n", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_communication_protocol(version)", "\n              Arguments:\n", "\n\nversion: For a downgrade,\n                  specify the MySQL Server version of the prospective\n                  group member that has the oldest installed server\n                  version. In this case, the command makes the group\n                  fall back to a communication protocol compatible with\n                  that server version if possible. The minimum server\n                  version that you can specify is MySQL 5.7.14. For an\n                  upgrade, specify the new MySQL Server version to which\n                  the existing group members have been upgraded.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_communication_protocol(\"5.7.25\");", "\n              For more information, see\n              Section\u00a020.5.1.4, \u201cSetting a Group's Communication Protocol Version\u201d.\n"], "Examples": ["SELECT group_replication_set_communication_protocol(\"5.7.25\");"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-communication-protocol.html#function_group-replication-set-communication-protocol"], "Feature Type": ["Function"], "index": 547, "vector_txt": "547:Feature: group_replication_set_communication_protocol()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_set_write_concurrency()"], "Description": ["Set maximum number of consensus instances that can be executed in", "\ngroup_replication_set_write_concurrency()\n", "\n              Configures the maximum number of consensus instances that\n              a group can execute in parallel. The\n              GROUP_REPLICATION_ADMIN\n              privilege is required to use this function.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_write_concurrency(instances)", "\n              Arguments:\n", "\n\nmembers: Sets the maximum\n                  number of consensus instances that a group can execute\n                  in parallel. Default value is 10, valid values are\n                  integers in the range of 10 to 200.\n\n", "\n              Return value:\n            ", "\n              Any resulting error as a string.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_write_concurrency(instances);", "\n              For more information, see\n              Section\u00a020.5.1.3, \u201cUsing Group Replication Group Write Consensus\u201d.\n"], "Examples": ["SELECT group_replication_set_write_concurrency(instances);"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-maximum-consensus.html#function_group-replication-set-write-concurrency"], "Feature Type": ["Function"], "index": 548, "vector_txt": "548:Feature: group_replication_set_write_concurrency()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_switch_to_multi_primary_mode()"], "Description": ["Changes the mode of a group running in single-primary mode to", "\ngroup_replication_switch_to_multi_primary_mode()\n", "\n              Changes a group running in single-primary mode to\n              multi-primary mode. Must be issued on a member of a\n              replication group running in single-primary mode.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_switch_to_multi_primary_mode()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_switch_to_multi_primary_mode()", "\n              All members which belong to the group become primaries.\n            ", "\n              For more information, see\n              Section\u00a020.5.1.2, \u201cChanging the Group Mode\u201d\n"], "Examples": [], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-mode.html#function_group-replication-switch-to-multi-primary-mode"], "Feature Type": ["Function"], "index": 549, "vector_txt": "549:Feature: group_replication_switch_to_multi_primary_mode()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_switch_to_single_primary_mode()"], "Description": ["Changes the mode of a group running in multi-primary mode to", "\ngroup_replication_switch_to_single_primary_mode()\n", "\n              Changes a group running in multi-primary mode to\n              single-primary mode, without the need to stop Group\n              Replication. Must be issued on a member of a replication\n              group running in multi-primary mode. When you change to\n              single-primary mode, strict consistency checks are also\n              disabled on all group members, as required in\n              single-primary mode\n              (group_replication_enforce_update_everywhere_checks=OFF).\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_switch_to_single_primary_mode([str])", "\n              Arguments:\n", "\n\nstr: A string containing\n                  the UUID of a member of the group which should become\n                  the new single primary. Other members of the group\n                  become secondaries.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_switch_to_single_primary_mode(member_uuid);", "\n              For more information, see\n              Section\u00a020.5.1.2, \u201cChanging the Group Mode\u201d\n"], "Examples": ["SELECT group_replication_switch_to_single_primary_mode(member_uuid);"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-mode.html#function_group-replication-switch-to-single-primary-mode"], "Feature Type": ["Function"], "index": 550, "vector_txt": "550:Feature: group_replication_switch_to_single_primary_mode()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["asymmetric_decrypt(algorithm,\n          data_str,\n          priv_key_str)"], "Description": ["Decrypt ciphertext using private or public key", "\nasymmetric_decrypt(algorithm,\n          data_str,\n          priv_key_str)\n", "\n          Decrypts an encrypted string using the given algorithm and key\n          string, and returns the resulting plaintext as a binary\n          string. If decryption fails, the result is\n          NULL.\n        ", "\n          For the legacy version of this function in use before MySQL\n          8.0.29, see\n          MySQL Enterprise Encryption Legacy Function Descriptions.\n        ", "\n          By default, the\n          component_enterprise_encryption function\n          assumes that encrypted text uses the RSAES-OAEP padding\n          scheme. The function supports decryption for content encrypted\n          by the old openssl_udf shared library\n          functions if the system variable\n          enterprise_encryption.rsa_support_legacy_padding\n          is set to ON (the default is\n          OFF). When this is ON,\n          the function also supports the RSAES-PKCS1-v1_5 padding\n          scheme, as used by the old openssl_udf\n          shared library functions. When the variable is set to\n          OFF, content encrypted by the legacy\n          functions cannot be decrypted, and the function returns null\n          output for such content.\n        ", "\nalgorithm is the encryption\n          algorithm used to create the key. The supported algorithm\n          value is 'RSA'.\n        ", "\ndata_str is the encrypted string to\n          decrypt, which was encrypted with\n          asymmetric_encrypt().\n        ", "\npriv_key_str is a valid PEM encoded\n          RSA private key. For successful decryption, the key string\n          must correspond to the public key string used with\n          asymmetric_encrypt() to produce\n          the encrypted string. The\n          asymmetric_encrypt() component\n          function only supports encryption using a public key, so\n          decryption takes place with the corresponding private key.\n        ", "\n          For a usage example, see the description of\n          asymmetric_encrypt().\n        "], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/enterprise-encryption-functions.html#function_asymmetric-decrypt"], "Feature Type": ["Function"], "index": 551, "vector_txt": "551:Feature: asymmetric_decrypt(algorithm,\n          data_str,\n          priv_key_str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["asymmetric_encrypt(algorithm,\n          data_str,\n          pub_key_str)"], "Description": ["Encrypt cleartext using private or public key", "\nasymmetric_encrypt(algorithm,\n          data_str,\n          pub_key_str)\n", "\n          Encrypts a string using the given algorithm and key string,\n          and returns the resulting ciphertext as a binary string. If\n          encryption fails, the result is NULL.\n        ", "\n          For the legacy version of this function in use before MySQL\n          8.0.29, see\n          MySQL Enterprise Encryption Legacy Function Descriptions.\n        ", "\nalgorithm is the encryption\n          algorithm used to create the key. The supported algorithm\n          value is 'RSA'.\n        ", "\ndata_str is the string to encrypt.\n          The length of this string cannot be greater than the key\n          string length in bytes, minus 42 (to account for the padding).\n        ", "\npub_key_str is a valid PEM encoded\n          RSA public key. The\n          asymmetric_encrypt() component\n          function only supports encryption using a public key.\n        ", "\n          To recover the original unencrypted string, pass the encrypted\n          string to asymmetric_decrypt(),\n          along with the other part of the key pair used for encryption,\n          as in the following example:\n        ", "Press CTRL+C to copy -- Generate private/public key pair\nSET @priv = create_asymmetric_priv_key('RSA', 2048);\nSET @pub = create_asymmetric_pub_key('RSA', @priv);\n\n-- Encrypt using public key, decrypt using private key\nSET @ciphertext = asymmetric_encrypt('RSA', 'The quick brown fox', @pub);\nSET @plaintext = asymmetric_decrypt('RSA', @ciphertext, @priv);", "\n          Suppose that:\n        ", "Press CTRL+C to copy SET @s = a string to be encrypted\nSET @priv = a valid private RSA key string in PEM format\nSET @pub = the corresponding public RSA key string in PEM format", "\n          Then these identity relationships hold:\n        ", "Press CTRL+C to copy asymmetric_decrypt('RSA', asymmetric_encrypt('RSA', @s, @pub), @priv) = @s"], "Examples": ["-- Generate private/public key pair\nSET @priv = create_asymmetric_priv_key('RSA', 2048);\nSET @pub = create_asymmetric_pub_key('RSA', @priv);\n\n-- Encrypt using public key, decrypt using private key\nSET @ciphertext = asymmetric_encrypt('RSA', 'The quick brown fox', @pub);\nSET @plaintext = asymmetric_decrypt('RSA', @ciphertext, @priv);"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/enterprise-encryption-functions.html#function_asymmetric-encrypt"], "Feature Type": ["Function"], "index": 552, "vector_txt": "552:Feature: asymmetric_encrypt(algorithm,\n          data_str,\n          pub_key_str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["asymmetric_sign(algorithm,\n          text,\n          priv_key_str,\n          digest_type)"], "Description": ["Generate signature from digest", "\nasymmetric_sign(algorithm,\n          text,\n          priv_key_str,\n          digest_type)\n", "\n          Signs a digest string or data string using a private key, and\n          returns the signature as a binary string. If signing fails,\n          the result is NULL.\n        ", "\n          For the legacy version of this function in use before MySQL\n          8.0.29, see\n          MySQL Enterprise Encryption Legacy Function Descriptions.\n        ", "\nalgorithm is the encryption\n          algorithm used to create the key. The supported algorithm\n          value is 'RSA'.\n        ", "\ntext is a data string or digest\n          string. The function accepts digests but does not require\n          them, as it is also capable of handling data strings of an\n          arbitrary length. A digest string can be generated by calling\n          create_digest().\n        ", "\npriv_key_str is the private key\n          string to use for signing the digest string. It must be a\n          valid PEM encoded RSA private key.\n        ", "\ndigest_type is the algorithm to be\n          used to sign the data. The supported\n          digest_type values are\n          'SHA224', 'SHA256',\n          'SHA384', and 'SHA512'\n          when OpenSSL 1.0.1 is in use. If OpenSSL 1.1.1 is in use, the\n          additional digest_type values\n          'SHA3-224', 'SHA3-256',\n          'SHA3-384', and\n          'SHA3-512' are available.\n        ", "\n          For a usage example, see the description of\n          asymmetric_verify().\n        "], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/enterprise-encryption-functions.html#function_asymmetric-sign"], "Feature Type": ["Function"], "index": 553, "vector_txt": "553:Feature: asymmetric_sign(algorithm,\n          text,\n          priv_key_str,\n          digest_type)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["COLLATION(str)"], "Description": ["Return the collation of the string argument", "\nCOLLATION(str)\n", "\n          Returns the collation of the string argument.\n        ", "Press CTRL+C to copy mysql> SELECT COLLATION('abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_utf8mb4'abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_latin1'abc');\n        -> 'latin1_swedish_ci'"], "Examples": ["mysql> SELECT COLLATION('abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_utf8mb4'abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_latin1'abc');\n        -> 'latin1_swedish_ci'"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_collation"], "Feature Type": ["Function"], "index": 554, "vector_txt": "554:Feature: COLLATION(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["COUNT(DISTINCT\n            expr,[expr...])"], "Description": ["Return the count of a number of different values", "\nCOUNT(DISTINCT\n            expr,[expr...])\n", "\n            Returns a count of the number of rows with different\n            non-NULL expr\n            values.\n          ", "\n            If there are no matching rows,\n            COUNT(DISTINCT) returns\n            0.\n          ", "Press CTRL+C to copy mysql> SELECT COUNT(DISTINCT results) FROM student;", "\n            In MySQL, you can obtain the number of distinct expression\n            combinations that do not contain NULL by\n            giving a list of expressions. In standard SQL, you would\n            have to do a concatenation of all expressions inside\n            COUNT(DISTINCT ...).\n          "], "Examples": ["mysql> SELECT COUNT(DISTINCT results) FROM student;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_count-distinct"], "Feature Type": ["Function"], "index": 555, "vector_txt": "555:Feature: COUNT(DISTINCT\n            expr,[expr...])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["asymmetric_verify(algorithm,\n          text,\n          sig_str,\n          pub_key_str,\n          digest_type)"], "Description": ["Verify that signature matches digest", "\nasymmetric_verify(algorithm,\n          text,\n          sig_str,\n          pub_key_str,\n          digest_type)\n", "\n          Verifies whether the signature string matches the digest\n          string, and returns 1 or 0 to indicate whether verification\n          succeeded or failed. If verification fails, the result is\n          NULL.\n        ", "\n          By default, the\n          component_enterprise_encryption function\n          assumes that signatures use the RSASSA-PSS signature scheme.\n          The function supports verification for signatures produced by\n          the old openssl_udf shared library\n          functions if the system variable\n          enterprise_encryption.rsa_support_legacy_padding\n          is set to ON (the default is\n          OFF). When this is ON,\n          the function also supports the RSASSA-PKCS1-v1_5 signature\n          scheme, as used by the old openssl_udf\n          shared library functions; when it is OFF,\n          signatures produced by the legacy functions cannot be\n          verified, and the function returns null output for such\n          content.\n        ", "\nalgorithm is the encryption\n          algorithm used to create the key. The supported algorithm\n          value is 'RSA'.\n        ", "\ntext is a data string or digest\n          string. The component function accepts digests but does not\n          require them, as it is also capable of handling data strings\n          of an arbitrary length. A digest string can be generated by\n          calling create_digest().\n        ", "\nsig_str is the signature string to\n          be verified. A signature string can be generated by calling\n          asymmetric_sign().\n        ", "\npub_key_str is the public key\n          string of the signer. It corresponds to the private key passed\n          to asymmetric_sign() to\n          generate the signature string. It must be a valid PEM encoded\n          RSA public key.\n        ", "\ndigest_type is the algorithm that\n          was used to sign the data. The supported\n          digest_type values are\n          'SHA224', 'SHA256',\n          'SHA384', and 'SHA512'\n          when OpenSSL 1.0.1 is in use. If OpenSSL 1.1.1 is in use, the\n          additional digest_type values\n          'SHA3-224', 'SHA3-256',\n          'SHA3-384', and\n          'SHA3-512' are available.\n        ", "Press CTRL+C to copy -- Set the encryption algorithm and digest type\nSET @algo = 'RSA';\nSET @dig_type = 'SHA512';\n\n-- Create private/public key pair\nSET @priv = create_asymmetric_priv_key(@algo, 2048);\nSET @pub = create_asymmetric_pub_key(@algo, @priv);\n\n-- Generate digest from string\nSET @dig = create_digest(@dig_type, 'The quick brown fox');\n\n-- Generate signature for digest and verify signature against digest\nSET @sig = asymmetric_sign(@algo, @dig, @priv, @dig_type);\nSET @verf = asymmetric_verify(@algo, @dig, @sig, @pub, @dig_type);"], "Examples": ["-- Set the encryption algorithm and digest type\nSET @algo = 'RSA';\nSET @dig_type = 'SHA512';\n\n-- Create private/public key pair\nSET @priv = create_asymmetric_priv_key(@algo, 2048);\nSET @pub = create_asymmetric_pub_key(@algo, @priv);\n\n-- Generate digest from string\nSET @dig = create_digest(@dig_type, 'The quick brown fox');\n\n-- Generate signature for digest and verify signature against digest\nSET @sig = asymmetric_sign(@algo, @dig, @priv, @dig_type);\nSET @verf = asymmetric_verify(@algo, @dig, @sig, @pub, @dig_type);"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/enterprise-encryption-functions.html#function_asymmetric-verify"], "Feature Type": ["Function"], "index": 556, "vector_txt": "556:Feature: asymmetric_verify(algorithm,\n          text,\n          sig_str,\n          pub_key_str,\n          digest_type)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["audit_api_message_emit_udf(component,\n            producer,\n            message[,\n            key,\n            value] ...)"], "Description": ["Add message event to audit log", "\naudit_api_message_emit_udf(component,\n            producer,\n            message[,\n            key,\n            value] ...)\n", "\n            Adds a message event to the audit log. Message events\n            include component, producer, and message strings of the\n            caller's choosing, and optionally a set of key-value pairs.\n          ", "\n            An event posted by this function is sent to all enabled\n            plugins of audit type, each of which handles the event\n            according to its own rules. If no plugin of audit type is\n            enabled, posting the event has no effect.\n          ", "\n            Arguments:\n", "\n\ncomponent: A string that\n                specifies a component name.\n              \nproducer: A string that\n                specifies a producer name.\n              \nmessage: A string that\n                specifies the event message.\n              \nkey,\n                value: Events may include 0\n                or more key-value pairs that specify an arbitrary\n                application-provided data map. Each\n                key argument is a string that\n                specifies a name for its immediately following\n                value argument. Each\n                value argument specifies a\n                value for its immediately following\n                key argument. Each\n                value can be a string or\n                numeric value, or NULL.\n\n", "\n            Return value:\n          ", "\n            The string OK to indicate success. An\n            error occurs if the function fails.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy mysql> SELECT audit_api_message_emit_udf('component_text',\n                                         'producer_text',\n                                         'message_text',\n                                         'key1', 'value1',\n                                         'key2', 123,\n                                         'key3', NULL) AS 'Message';\n+---------+\n| Message |\n+---------+\n| OK      |\n+---------+", "\n            Additional information:\n          ", "\n            Each audit plugin that receives an event posted by\n            audit_api_message_emit_udf()\n            logs the event in plugin-specific format. For example, the\n            audit_log plugin (see\n            Section\u00a08.4.5, \u201cMySQL Enterprise Audit\u201d) logs message values as follows,\n            depending on the log format configured by the\n            audit_log_format system\n            variable:\n", "\n\n                JSON format\n                (audit_log_format=JSON):\n              Press CTRL+C to copy {\n  ...\n  \"class\": \"message\",\n  \"event\": \"user\",\n  ...\n  \"message_data\": {\n    \"component\": \"component_text\",\n    \"producer\": \"producer_text\",\n    \"message\": \"message_text\",\n    \"map\": {\n      \"key1\": \"value1\",\n      \"key2\": 123,\n      \"key3\": null\n    }\n  }\n}\n                New-style XML format\n                (audit_log_format=NEW):\n              Press CTRL+C to copy <AUDIT_RECORD>\n ...\n <NAME>Message</NAME>\n ...\n <COMMAND_CLASS>user</COMMAND_CLASS>\n <COMPONENT>component_text</COMPONENT>\n <PRODUCER>producer_text</PRODUCER>\n <MESSAGE>message_text</MESSAGE>\n <MAP>\n   <ELEMENT>\n     <KEY>key1</KEY>\n     <VALUE>value1</VALUE>\n   </ELEMENT>\n   <ELEMENT>\n     <KEY>key2</KEY>\n     <VALUE>123</VALUE>\n   </ELEMENT>\n   <ELEMENT>\n     <KEY>key3</KEY>\n     <VALUE/>\n   </ELEMENT>\n </MAP>\n</AUDIT_RECORD>\n                Old-style XML format\n                (audit_log_format=OLD):\n              Press CTRL+C to copy <AUDIT_RECORD\n  ...\n  NAME=\"Message\"\n  ...\n  COMMAND_CLASS=\"user\"\n  COMPONENT=\"component_text\"\n  PRODUCER=\"producer_text\"\n  MESSAGE=\"message_text\"/>\n\n\nNote\n\n\n                  Message events logged in old-style XML format do not\n                  include the key-value map due to representational\n                  constraints imposed by this format.\n\n\n\n", "\n            Messages posted by\n            audit_api_message_emit_udf()\n            have an event class of\n            MYSQL_AUDIT_MESSAGE_CLASS and a subclass\n            of MYSQL_AUDIT_MESSAGE_USER. (Internally\n            generated audit messages have the same class and a subclass\n            of MYSQL_AUDIT_MESSAGE_INTERNAL; this\n            subclass currently is unused.) To refer to such events in\n            audit_log filtering rules, use a\n            class element with a\n            name value of message.\n            For example:\n          ", "Press CTRL+C to copy {\n  \"filter\": {\n    \"class\": {\n      \"name\": \"message\"\n    }\n  }\n}", "\n            Should it be necessary to distinguish user-generated and\n            internally generated message events, test the\n            subclass value against\n            user or internal.\n          ", "\n            Filtering based on the contents of the key-value map is not\n            supported.\n          ", "\n            For information about writing filtering rules, see\n            Section\u00a08.4.5.7, \u201cAudit Log Filtering\u201d.\n"], "Examples": ["mysql> SELECT audit_api_message_emit_udf('component_text',\n                                         'producer_text',\n                                         'message_text',\n                                         'key1', 'value1',\n                                         'key2', 123,\n                                         'key3', NULL) AS 'Message';\n+---------+\n| Message |\n+---------+\n| OK      |\n+---------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/audit-api-message-emit.html#function_audit-api-message-emit-udf"], "Feature Type": ["Function"], "index": 557, "vector_txt": "557:Feature: audit_api_message_emit_udf(component,\n            producer,\n            message[,\n            key,\n            value] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["audit_log_encryption_password_get([keyring_id])"], "Description": ["Fetch audit log encryption password", "\naudit_log_encryption_password_get([keyring_id])\n", "\n              This function fetches an audit log encryption password\n              from the MySQL keyring, which must be enabled or an error\n              occurs. Any keyring component or plugin can be used; for\n              instructions, see Section\u00a08.4.4, \u201cThe MySQL Keyring\u201d.\n            ", "\n              With no argument, the function retrieves the current\n              encryption password as a binary string. An argument may be\n              given to specify which audit log encryption password to\n              retrieve. The argument must be the keyring ID of the\n              current password or an archived password.\n            ", "\n              For additional information about audit log encryption, see\n              Encrypting Audit Log Files.\n            ", "\n              Arguments:\n            ", "\nkeyring_id: This optional\n              argument indicates the keyring ID of the password to\n              retrieve. The maximum permitted length is 766 bytes. If\n              omitted, the function retrieves the current password.\n            ", "\n              Return value:\n            ", "\n              The password string for success (up to 766 bytes), or\n              NULL and an error for failure.\n            ", "\n              Example:\n            ", "\n              Retrieve the current password:\n            ", "Press CTRL+C to copy mysql> SELECT audit_log_encryption_password_get();\n+-------------------------------------+\n| audit_log_encryption_password_get() |\n+-------------------------------------+\n| secret                              |\n+-------------------------------------+", "\n              To retrieve a password by ID, you can determine which\n              audit log keyring IDs exist by querying the Performance\n              Schema keyring_keys table:\n            ", "Press CTRL+C to copy mysql> SELECT KEY_ID FROM performance_schema.keyring_keys\n       WHERE KEY_ID LIKE 'audit_log%'\n       ORDER BY KEY_ID;\n+-----------------------------+\n| KEY_ID                      |\n+-----------------------------+\n| audit_log-20190415T152248-1 |\n| audit_log-20190415T153507-1 |\n| audit_log-20190416T125122-1 |\n| audit_log-20190416T141608-1 |\n+-----------------------------+\nmysql> SELECT audit_log_encryption_password_get('audit_log-20190416T125122-1');\n+------------------------------------------------------------------+\n| audit_log_encryption_password_get('audit_log-20190416T125122-1') |\n+------------------------------------------------------------------+\n| segreto                                                          |\n+------------------------------------------------------------------+"], "Examples": ["mysql> SELECT audit_log_encryption_password_get();\n+-------------------------------------+\n| audit_log_encryption_password_get() |\n+-------------------------------------+\n| secret                              |\n+-------------------------------------+", "mysql> SELECT KEY_ID FROM performance_schema.keyring_keys\n       WHERE KEY_ID LIKE 'audit_log%'\n       ORDER BY KEY_ID;\n+-----------------------------+\n| KEY_ID                      |\n+-----------------------------+\n| audit_log-20190415T152248-1 |\n| audit_log-20190415T153507-1 |\n| audit_log-20190416T125122-1 |\n| audit_log-20190416T141608-1 |\n+-----------------------------+\nmysql> SELECT audit_log_encryption_password_get('audit_log-20190416T125122-1');\n+------------------------------------------------------------------+\n| audit_log_encryption_password_get('audit_log-20190416T125122-1') |\n+------------------------------------------------------------------+\n| segreto                                                          |\n+------------------------------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#function_audit-log-encryption-password-get"], "Feature Type": ["Function"], "index": 558, "vector_txt": "558:Feature: audit_log_encryption_password_get([keyring_id])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["audit_log_encryption_password_set(password)"], "Description": ["Set audit log encryption password", "\naudit_log_encryption_password_set(password)\n", "\n              Sets the current audit log encryption password to the\n              argument and stores the password in the MySQL keyring. The\n              password is stored as a utf8mb4 string.\n              Previously, the password was stored in binary form.\n            ", "\n              If encryption is enabled, this function performs a log\n              file rotation operation that renames the current log file,\n              and begins a new log file encrypted with the password. The\n              keyring must be enabled or an error occurs. Any keyring\n              component or plugin can be used; for instructions, see\n              Section\u00a08.4.4, \u201cThe MySQL Keyring\u201d.\n            ", "\n              For additional information about audit log encryption, see\n              Encrypting Audit Log Files.\n            ", "\n              Arguments:\n            ", "\npassword: The password string.\n              The maximum permitted length is 766 bytes.\n            ", "\n              Return value:\n            ", "\n              1 for success, 0 for failure.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT audit_log_encryption_password_set(password);\n+---------------------------------------------+\n| audit_log_encryption_password_set(password) |\n+---------------------------------------------+\n| 1                                           |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT audit_log_encryption_password_set(password);\n+---------------------------------------------+\n| audit_log_encryption_password_set(password) |\n+---------------------------------------------+\n| 1                                           |\n+---------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#function_audit-log-encryption-password-set"], "Feature Type": ["Function"], "index": 559, "vector_txt": "559:Feature: audit_log_encryption_password_set(password)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["audit_log_filter_flush()"], "Description": ["Flush audit log filter tables", "\naudit_log_filter_flush()\n", "\n              Calling any of the other filtering functions affects\n              operational audit log filtering immediately and updates\n              the audit log tables. If instead you modify the contents\n              of those tables directly using statements such as\n              INSERT,\n              UPDATE, and\n              DELETE, the changes do not\n              affect filtering immediately. To flush your changes and\n              make them operational, call\n              audit_log_filter_flush().\n", "\n\nWarning\n\n\naudit_log_filter_flush()\n                should be used only after modifying the audit tables\n                directly, to force reloading all filters. Otherwise,\n                this function should be avoided. It is, in effect, a\n                simplified version of unloading and reloading the\n                audit_log plugin with\n                UNINSTALL PLUGIN plus\n                INSTALL PLUGIN.\n              \naudit_log_filter_flush()\n                affects all current sessions and detaches them from\n                their previous filters. Current sessions are no longer\n                logged unless they disconnect and reconnect, or execute\n                a change-user operation.\n\n", "\n              If this function fails, an error message is returned and\n              the audit log is disabled until the next successful call\n              to\n              audit_log_filter_flush().\n            ", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A string that indicates whether the operation succeeded.\n              OK indicates success. ERROR:\n              message indicates\n              failure.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT audit_log_filter_flush();\n+--------------------------+\n| audit_log_filter_flush() |\n+--------------------------+\n| OK                       |\n+--------------------------+"], "Examples": ["mysql> SELECT audit_log_filter_flush();\n+--------------------------+\n| audit_log_filter_flush() |\n+--------------------------+\n| OK                       |\n+--------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#function_audit-log-filter-flush"], "Feature Type": ["Function"], "index": 560, "vector_txt": "560:Feature: audit_log_filter_flush()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["audit_log_filter_remove_filter(filter_name)"], "Description": ["Remove audit log filter", "\naudit_log_filter_remove_filter(filter_name)\n", "\n              Given a filter name, removes the filter from the current\n              set of filters. It is not an error for the filter not to\n              exist.\n            ", "\n              If a removed filter is assigned to any user accounts,\n              those users stop being filtered (they are removed from the\n              audit_log_user table). Termination of\n              filtering includes any current sessions for those users:\n              They are detached from the filter and no longer logged.\n            ", "\n              Arguments:\n", "\n\nfilter_name: A string that\n                  specifies the filter name.\n\n", "\n              Return value:\n            ", "\n              A string that indicates whether the operation succeeded.\n              OK indicates success. ERROR:\n              message indicates\n              failure.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT audit_log_filter_remove_filter('SomeFilter');\n+----------------------------------------------+\n| audit_log_filter_remove_filter('SomeFilter') |\n+----------------------------------------------+\n| OK                                           |\n+----------------------------------------------+"], "Examples": ["mysql> SELECT audit_log_filter_remove_filter('SomeFilter');\n+----------------------------------------------+\n| audit_log_filter_remove_filter('SomeFilter') |\n+----------------------------------------------+\n| OK                                           |\n+----------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#function_audit-log-filter-remove-filter"], "Feature Type": ["Function"], "index": 561, "vector_txt": "561:Feature: audit_log_filter_remove_filter(filter_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["audit_log_filter_remove_user(user_name)"], "Description": ["Unassign audit log filter from user", "\naudit_log_filter_remove_user(user_name)\n", "\n              Given a user account name, cause the user to be no longer\n              assigned to a filter. It is not an error if the user has\n              no filter assigned. Filtering of current sessions for the\n              user remains unaffected. New connections for the user are\n              filtered using the default account filter if there is one,\n              and are not logged otherwise.\n            ", "\n              If the name is %, the function removes\n              the default account filter that is used for any user\n              account that has no explicitly assigned filter.\n            ", "\n              Arguments:\n", "\n\nuser_name: The user account\n                  name as a string in\n                  user_name@host_name\n                  format, or % to represent the\n                  default account.\n\n", "\n              Return value:\n            ", "\n              A string that indicates whether the operation succeeded.\n              OK indicates success. ERROR:\n              message indicates\n              failure.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT audit_log_filter_remove_user('user1@localhost');\n+-------------------------------------------------+\n| audit_log_filter_remove_user('user1@localhost') |\n+-------------------------------------------------+\n| OK                                              |\n+-------------------------------------------------+"], "Examples": ["mysql> SELECT audit_log_filter_remove_user('user1@localhost');\n+-------------------------------------------------+\n| audit_log_filter_remove_user('user1@localhost') |\n+-------------------------------------------------+\n| OK                                              |\n+-------------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#function_audit-log-filter-remove-user"], "Feature Type": ["Function"], "index": 562, "vector_txt": "562:Feature: audit_log_filter_remove_user(user_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["audit_log_filter_set_filter(filter_name,\n              definition)"], "Description": ["Define audit log filter", "\naudit_log_filter_set_filter(filter_name,\n              definition)\n", "\n              Given a filter name and definition, adds the filter to the\n              current set of filters. If the filter already exists and\n              is used by any current sessions, those sessions are\n              detached from the filter and are no longer logged. This\n              occurs because the new filter definition has a new filter\n              ID that differs from its previous ID.\n            ", "\n              Arguments:\n", "\n\nfilter_name: A string that\n                  specifies the filter name.\n                \ndefinition: A\n                  JSON value that\n                  specifies the filter definition.\n\n", "\n              Return value:\n            ", "\n              A string that indicates whether the operation succeeded.\n              OK indicates success. ERROR:\n              message indicates\n              failure.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SET @f = '{ \"filter\": { \"log\": false } }';\nmysql> SELECT audit_log_filter_set_filter('SomeFilter', @f);\n+-----------------------------------------------+\n| audit_log_filter_set_filter('SomeFilter', @f) |\n+-----------------------------------------------+\n| OK                                            |\n+-----------------------------------------------+"], "Examples": ["mysql> SET @f = '{ \"filter\": { \"log\": false } }';\nmysql> SELECT audit_log_filter_set_filter('SomeFilter', @f);\n+-----------------------------------------------+\n| audit_log_filter_set_filter('SomeFilter', @f) |\n+-----------------------------------------------+\n| OK                                            |\n+-----------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#function_audit-log-filter-set-filter"], "Feature Type": ["Function"], "index": 563, "vector_txt": "563:Feature: audit_log_filter_set_filter(filter_name,\n              definition)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["audit_log_filter_set_user(user_name,\n              filter_name)"], "Description": ["Assign audit log filter to user", "\naudit_log_filter_set_user(user_name,\n              filter_name)\n", "\n              Given a user account name and a filter name, assigns the\n              filter to the user. A user can be assigned only one\n              filter, so if the user was already assigned a filter, the\n              assignment is replaced. Filtering of current sessions for\n              the user remains unaffected. New connections are filtered\n              using the new filter.\n            ", "\n              As a special case, the name %\n              represents the default account. The filter is used for\n              connections from any user account that has no explicitly\n              assigned filter.\n            ", "\n              Arguments:\n", "\n\nuser_name: The user account\n                  name as a string in\n                  user_name@host_name\n                  format, or % to represent the\n                  default account.\n                \nfilter_name: A string that\n                  specifies the filter name.\n\n", "\n              Return value:\n            ", "\n              A string that indicates whether the operation succeeded.\n              OK indicates success. ERROR:\n              message indicates\n              failure.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT audit_log_filter_set_user('user1@localhost', 'SomeFilter');\n+------------------------------------------------------------+\n| audit_log_filter_set_user('user1@localhost', 'SomeFilter') |\n+------------------------------------------------------------+\n| OK                                                         |\n+------------------------------------------------------------+"], "Examples": ["mysql> SELECT audit_log_filter_set_user('user1@localhost', 'SomeFilter');\n+------------------------------------------------------------+\n| audit_log_filter_set_user('user1@localhost', 'SomeFilter') |\n+------------------------------------------------------------+\n| OK                                                         |\n+------------------------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#function_audit-log-filter-set-user"], "Feature Type": ["Function"], "index": 564, "vector_txt": "564:Feature: audit_log_filter_set_user(user_name,\n              filter_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["audit_log_read([arg])"], "Description": ["Return audit log records", "\naudit_log_read([arg])\n", "\n              Reads the audit log and returns a\n              JSON string result. If the\n              audit log format is not\n              JSON, an error occurs.\n            ", "\n              With no argument or a JSON\n              hash argument,\n              audit_log_read() reads\n              events from the audit log and returns a\n              JSON string containing an\n              array of audit events. Items in the hash argument\n              influence how reading occurs, as described later. Each\n              element in the returned array is an event represented as a\n              JSON hash, with the\n              exception that the last element may be a\n              JSON\nnull value to indicate no following\n              events are available to read.\n            ", "\n              With an argument consisting of a\n              JSON\nnull value,\n              audit_log_read() closes the\n              current read sequence.\n            ", "\n              For additional details about the audit log-reading\n              process, see Section\u00a08.4.5.6, \u201cReading Audit Log Files\u201d.\n            ", "\n              Arguments:\n            ", "\n              To obtain a bookmark for the most recently written event,\n              call\n              audit_log_read_bookmark().\n            ", "\narg: The argument is optional.\n              If omitted, the function reads events from the current\n              position. If present, the argument can be a\n              JSON\nnull value to close the read sequence,\n              or a JSON hash. Within a\n              hash argument, items are optional and control aspects of\n              the read operation such as the position at which to begin\n              reading or how many events to read. The following items\n              are significant (other items are ignored):\n", "\n\nstart: The position within the\n                  audit log of the first event to read. The position is\n                  given as a timestamp and the read starts from the\n                  first event that occurs on or after the timestamp\n                  value. The start item has this\n                  format, where value is a\n                  literal timestamp value:\n                Press CTRL+C to copy \"start\": { \"timestamp\": \"value\" }\ntimestamp, id:\n                  The position within the audit log of the first event\n                  to read. The timestamp and\n                  id items together comprise a\n                  bookmark that uniquely identify a particular event. If\n                  an audit_log_read()\n                  argument includes either item, it must include both to\n                  completely specify a position or an error occurs.\n                \nmax_array_length: The maximum\n                  number of events to read from the log. If this item is\n                  omitted, the default is to read to the end of the log\n                  or until the read buffer is full, whichever comes\n                  first.\n\n", "\n              To specify a starting position to\n              audit_log_read(), pass a\n              hash argument that includes either a\n              start item or a bookmark consisting of\n              timestamp and id\n              items. If a hash argument includes both a\n              start item and a bookmark, an error\n              occurs.\n            ", "\n              If a hash argument specifies no starting position, reading\n              continues from the current position.\n            ", "\n              If a timestamp value includes no time part, a time part of\n              00:00:00 is assumed.\n            ", "\n              Return value:\n            ", "\n              If the call succeeds, the return value is a\n              JSON string containing an\n              array of audit events, or a\n              JSON\nnull value if that was passed as the\n              argument to close the read sequence. If the call fails,\n              the return value is NULL and an error\n              occurs.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT audit_log_read(audit_log_read_bookmark());\n+-----------------------------------------------------------------------+\n| audit_log_read(audit_log_read_bookmark())                             |\n+-----------------------------------------------------------------------+\n| [ {\"timestamp\":\"2020-05-18 22:41:24\",\"id\":0,\"class\":\"connection\", ... |\n+-----------------------------------------------------------------------+\nmysql> SELECT audit_log_read('null');\n+------------------------+\n| audit_log_read('null') |\n+------------------------+\n| null                   |\n+------------------------+", "\n              Notes:\n            ", "\n              Prior to MySQL 8.4, string return values\n              could be binary JSON\n              strings. For information about converting such values to\n              nonbinary strings, see\n              Section\u00a08.4.5.6, \u201cReading Audit Log Files\u201d.\n            "], "Examples": ["mysql> SELECT audit_log_read(audit_log_read_bookmark());\n+-----------------------------------------------------------------------+\n| audit_log_read(audit_log_read_bookmark())                             |\n+-----------------------------------------------------------------------+\n| [ {\"timestamp\":\"2020-05-18 22:41:24\",\"id\":0,\"class\":\"connection\", ... |\n+-----------------------------------------------------------------------+\nmysql> SELECT audit_log_read('null');\n+------------------------+\n| audit_log_read('null') |\n+------------------------+\n| null                   |\n+------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#function_audit-log-read"], "Feature Type": ["Function"], "index": 565, "vector_txt": "565:Feature: audit_log_read([arg])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["COMPRESS(string_to_compress)"], "Description": ["Return result as a binary string", "\nCOMPRESS(string_to_compress)\n", "\n          Compresses a string and returns the result as a binary string.\n          This function requires MySQL to have been compiled with a\n          compression library such as zlib.\n          Otherwise, the return value is always NULL.\n          The return value is also NULL if\n          string_to_compress is\n          NULL. The compressed string can be\n          uncompressed with UNCOMPRESS().\n        ", "Press CTRL+C to copy mysql> SELECT LENGTH(COMPRESS(REPEAT('a',1000)));\n        -> 21\nmysql> SELECT LENGTH(COMPRESS(''));\n        -> 0\nmysql> SELECT LENGTH(COMPRESS('a'));\n        -> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT('a',16)));\n        -> 15", "\n          The compressed string contents are stored the following way:\n", "\n\n              Empty strings are stored as empty strings.\n            \n              Nonempty strings are stored as a 4-byte length of the\n              uncompressed string (low byte first), followed by the\n              compressed string. If the string ends with space, an extra\n              . character is added to avoid problems\n              with endspace trimming should the result be stored in a\n              CHAR or\n              VARCHAR column. (However,\n              use of nonbinary string data types such as\n              CHAR or\n              VARCHAR to store compressed\n              strings is not recommended anyway because character set\n              conversion may occur. Use a\n              VARBINARY or\n              BLOB binary string column\n              instead.)\n\n", "\n          If COMPRESS() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT LENGTH(COMPRESS(REPEAT('a',1000)));\n        -> 21\nmysql> SELECT LENGTH(COMPRESS(''));\n        -> 0\nmysql> SELECT LENGTH(COMPRESS('a'));\n        -> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT('a',16)));\n        -> 15"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_compress"], "Feature Type": ["Function"], "index": 566, "vector_txt": "566:Feature: COMPRESS(string_to_compress)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["audit_log_read_bookmark()"], "Description": ["Bookmark for most recent audit log event", "\naudit_log_read_bookmark()\n", "\n              Returns a JSON string\n              representing a bookmark for the most recently written\n              audit log event. If the audit log format is not\n              JSON, an error occurs.\n            ", "\n              The bookmark is a JSON hash\n              with timestamp and\n              id items that uniquely identify the\n              position of an event within the audit log. It is suitable\n              for passing to\n              audit_log_read() to\n              indicate to that function the position at which to begin\n              reading.\n            ", "\n              For additional details about the audit log-reading\n              process, see Section\u00a08.4.5.6, \u201cReading Audit Log Files\u201d.\n            ", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A JSON string containing a\n              bookmark for success, or NULL and an\n              error for failure.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT audit_log_read_bookmark();\n+-------------------------------------------------+\n| audit_log_read_bookmark()                       |\n+-------------------------------------------------+\n| { \"timestamp\": \"2019-10-03 21:03:44\", \"id\": 0 } |\n+-------------------------------------------------+", "\n              Notes:\n            ", "\n              Prior to MySQL 8.4, string return values\n              could be binary JSON\n              strings. For information about converting such values to\n              nonbinary strings, see\n              Section\u00a08.4.5.6, \u201cReading Audit Log Files\u201d.\n            "], "Examples": ["mysql> SELECT audit_log_read_bookmark();\n+-------------------------------------------------+\n| audit_log_read_bookmark()                       |\n+-------------------------------------------------+\n| { \"timestamp\": \"2019-10-03 21:03:44\", \"id\": 0 } |\n+-------------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#function_audit-log-read-bookmark"], "Feature Type": ["Function"], "index": 567, "vector_txt": "567:Feature: audit_log_read_bookmark()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["audit_log_rotate()"], "Description": ["Rotate audit log file", "\naudit_log_rotate()\n", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              The renamed file name.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT audit_log_rotate();", "\n              Using audit_log_rotate() requires the\n              AUDIT_ADMIN privilege.\n"], "Examples": ["mysql> SELECT audit_log_rotate();"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#function_audit-log-rotate"], "Feature Type": ["Function"], "index": 568, "vector_txt": "568:Feature: audit_log_rotate()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["create_asymmetric_priv_key(algorithm,\n          key_length)"], "Description": ["Create private key", "\ncreate_asymmetric_priv_key(algorithm,\n          key_length)\n", "\n          Creates a private key using the given algorithm and key\n          length, and returns the key as a binary string in PEM format.\n          The key is in PKCS #8 format. If key generation fails, the\n          result is NULL.\n        ", "\n          For the legacy version of this function in use before MySQL\n          8.0.29, see\n          MySQL Enterprise Encryption Legacy Function Descriptions.\n        ", "\nalgorithm is the encryption\n          algorithm used to create the key. The supported algorithm\n          value is 'RSA'.\n        ", "\nkey_length is the key length in\n          bits. If you exceed the maximum allowed key length or specify\n          less than the minimum, key generation fails and the result is\n          null output. The minimum allowed key length in bits is 2048.\n          The maximum allowed key length is the value of the\n          enterprise_encryption.maximum_rsa_key_size\n          system variable, which defaults to 4096. It has a maximum\n          setting of 16384, which is the maximum key length allowed for\n          the RSA algorithm. See\n          Section\u00a08.6.2, \u201cConfiguring MySQL Enterprise Encryption\u201d.\n", "\n\nNote\n\n\n            Generating longer keys can consume significant CPU\n            resources. Limiting the key length using the\n            enterprise_encryption.maximum_rsa_key_size\n            system variable lets you provide adequate security for your\n            requirements while balancing this with resource usage.\n\n", "\n          This example creates a 2048-bit RSA private key, then derives\n          a public key from the private key:\n        ", "Press CTRL+C to copy SET @priv = create_asymmetric_priv_key('RSA', 2048);\nSET @pub = create_asymmetric_pub_key('RSA', @priv);"], "Examples": ["SET @priv = create_asymmetric_priv_key('RSA', 2048);\nSET @pub = create_asymmetric_pub_key('RSA', @priv);"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/enterprise-encryption-functions.html#function_create-asymmetric-priv-key"], "Feature Type": ["Function"], "index": 569, "vector_txt": "569:Feature: create_asymmetric_priv_key(algorithm,\n          key_length)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["create_asymmetric_pub_key(algorithm,\n          priv_key_str)"], "Description": ["Create public key", "\ncreate_asymmetric_pub_key(algorithm,\n          priv_key_str)\n", "\n          Derives a public key from the given private key using the\n          given algorithm, and returns the key as a binary string in PEM\n          format. The key is in PKCS #8 format. If key derivation fails,\n          the result is NULL.\n        ", "\n          For the legacy version of this function in use before MySQL\n          8.0.29, see\n          MySQL Enterprise Encryption Legacy Function Descriptions.\n        ", "\nalgorithm is the encryption\n          algorithm used to create the key. The supported algorithm\n          value is 'RSA'.\n        ", "\npriv_key_str is a valid PEM encoded\n          RSA private key.\n        ", "\n          For a usage example, see the description of\n          create_asymmetric_priv_key().\n        "], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/enterprise-encryption-functions.html#function_create-asymmetric-pub-key"], "Feature Type": ["Function"], "index": 570, "vector_txt": "570:Feature: create_asymmetric_pub_key(algorithm,\n          priv_key_str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["create_digest(digest_type,\n          str)"], "Description": ["Generate digest from string", "\ncreate_digest(digest_type,\n          str)\n", "\n          Creates a digest from the given string using the given digest\n          type, and returns the digest as a binary string. If digest\n          generation fails, the result is NULL.\n        ", "\n          For the legacy version of this function in use before MySQL\n          8.0.29, see\n          MySQL Enterprise Encryption Legacy Function Descriptions.\n        ", "\n          The resulting digest string is suitable for use with\n          asymmetric_sign() and\n          asymmetric_verify(). The\n          component versions of these functions accept digests but do\n          not require them, as they are capable of handling data of an\n          arbitrary length.\n        ", "\ndigest_type is the digest algorithm\n          to be used to generate the digest string. The supported\n          digest_type values are\n          'SHA224', 'SHA256',\n          'SHA384', and 'SHA512'\n          when OpenSSL 1.0.1 is in use. If OpenSSL 1.1.1 is in use, the\n          additional digest_type values\n          'SHA3-224', 'SHA3-256',\n          'SHA3-384', and\n          'SHA3-512' are available.\n        ", "\nstr is the non-null data string for\n          which the digest is to be generated.\n        ", "Press CTRL+C to copy SET @dig = create_digest('SHA512', 'The quick brown fox');"], "Examples": ["SET @dig = create_digest('SHA512', 'The quick brown fox');"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/enterprise-encryption-functions.html#function_create-digest"], "Feature Type": ["Function"], "index": 571, "vector_txt": "571:Feature: create_digest(digest_type,\n          str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["firewall_group_delist(group,\n              user)"], "Description": ["Remove account from firewall group profile", "\nfirewall_group_delist(group,\n              user)\n", "\n              This function removes an account from a group profile. It\n              requires the FIREWALL_ADMIN\n              privilege.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT firewall_group_delist('g', 'fwuser@localhost');"], "Examples": ["SELECT firewall_group_delist('g', 'fwuser@localhost');"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/firewall-reference.html#function_firewall-group-delist"], "Feature Type": ["Function"], "index": 572, "vector_txt": "572:Feature: firewall_group_delist(group,\n              user)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["firewall_group_enlist(group,\n              user)"], "Description": ["Add account to firewall group profile", "\nfirewall_group_enlist(group,\n              user)\n", "\n              This function adds an account to a group profile. It\n              requires the FIREWALL_ADMIN\n              privilege.\n            ", "\n              It is not necessary to register the account itself with\n              the firewall before adding the account to the group.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT firewall_group_enlist('g', 'fwuser@localhost');"], "Examples": ["SELECT firewall_group_enlist('g', 'fwuser@localhost');"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/firewall-reference.html#function_firewall-group-enlist"], "Feature Type": ["Function"], "index": 573, "vector_txt": "573:Feature: firewall_group_enlist(group,\n              user)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["flush_rewrite_rules()"], "Description": ["Load rewrite_rules table into Rewriter cache", "\nflush_rewrite_rules()\n", "\n              This stored procedure uses the\n              load_rewrite_rules()\n              function to load the contents of the\n              rewrite_rules table into the\n              Rewriter in-memory cache.\n            ", "\n              Calling flush_rewrite_rules() implies\n              COMMIT.\n            ", "\n              Invoke this procedure after you modify the rules table to\n              cause the plugin to update its cache from the new table\n              contents. If any errors occur, the plugin sets the\n              message column for the appropriate rule\n              rows in the table and sets the\n              Rewriter_reload_error\n              status variable to ON.\n            "], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/rewriter-query-rewrite-plugin-reference.html#function_flush-rewrite-rules"], "Feature Type": ["Function"], "index": 574, "vector_txt": "574:Feature: flush_rewrite_rules()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["gen_blacklist(str,\n              dictionary_name,\n              replacement_dictionary_name)"], "Description": ["Perform dictionary term replacement", "\ngen_blacklist(str,\n              dictionary_name,\n              replacement_dictionary_name)\n", "\n              Replaces a term present in one dictionary with a term from\n              a second dictionary and returns the replacement term. This\n              masks the original term by substitution. This function is\n              deprecated; use\n              gen_blocklist()\n              instead.\n            "], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-plugin-functions.html#function_gen-blacklist-plugin"], "Feature Type": ["Function"], "index": 575, "vector_txt": "575:Feature: gen_blacklist(str,\n              dictionary_name,\n              replacement_dictionary_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["gen_blocklist(str,\n              from_dictionary_name,\n              to_dictionary_name)"], "Description": ["Perform dictionary term replacement", "\ngen_blocklist(str,\n              from_dictionary_name,\n              to_dictionary_name)\n", "\n              Replaces a term present in one dictionary with a term from\n              a second dictionary and returns the replacement term. This\n              masks the original term by substitution.\n            ", "\n              Arguments:\n", "\n\nterm: A string that\n                  indicates the term to replace. This argument is\n                  converted to the utf8mb4 character\n                  set.\n                \nfrom_dictionary_name: A\n                  string that names the dictionary containing the term\n                  to replace. This argument is converted to the\n                  utf8mb4 character set.\n                \nto_dictionary_name: A\n                  string that names the dictionary from which to choose\n                  the replacement term. This argument is converted to\n                  the utf8mb4 character set.\n\n", "\n              Return value:\n            ", "\n              A string encoded in the utf8mb4\n              character set randomly chosen from\n              to_dictionary_name as a\n              replacement for term, or\n              term if it does not appear in\n              from_dictionary_name, or an\n              error if either dictionary name is not in the dictionary\n              registry.\n", "\n\nNote\n\n\n                If the term to replace appears in both dictionaries, it\n                is possible for the return value to be the same term.\n\n", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_blocklist('Berlin', 'DE_Cities', 'US_Cities');\n+---------------------------------------------------+\n| gen_blocklist('Berlin', 'DE_Cities', 'US_Cities') |\n+---------------------------------------------------+\n| Phoenix                                           |\n+---------------------------------------------------+"], "Examples": ["mysql> SELECT gen_blocklist('Berlin', 'DE_Cities', 'US_Cities');\n+---------------------------------------------------+\n| gen_blocklist('Berlin', 'DE_Cities', 'US_Cities') |\n+---------------------------------------------------+\n| Phoenix                                           |\n+---------------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_gen-blocklist"], "Feature Type": ["Function"], "index": 576, "vector_txt": "576:Feature: gen_blocklist(str,\n              from_dictionary_name,\n              to_dictionary_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["CONCAT(str1,str2,...)"], "Description": ["Return concatenated string", "\nCONCAT(str1,str2,...)\n", "\n          Returns the string that results from concatenating the\n          arguments. May have one or more arguments. If all arguments\n          are nonbinary strings, the result is a nonbinary string. If\n          the arguments include any binary strings, the result is a\n          binary string. A numeric argument is converted to its\n          equivalent nonbinary string form.\n        ", "\nCONCAT() returns\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT CONCAT('My', 'S', 'QL');\n        -> 'MySQL'\nmysql> SELECT CONCAT('My', NULL, 'QL');\n        -> NULL\nmysql> SELECT CONCAT(14.3);\n        -> '14.3'", "\n          For quoted strings, concatenation can be performed by placing\n          the strings next to each other:\n        ", "Press CTRL+C to copy mysql> SELECT 'My' 'S' 'QL';\n        -> 'MySQL'", "\n          If CONCAT() is invoked from\n          within the mysql client, binary string\n          results display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT CONCAT('My', 'S', 'QL');\n        -> 'MySQL'\nmysql> SELECT CONCAT('My', NULL, 'QL');\n        -> NULL\nmysql> SELECT CONCAT(14.3);\n        -> '14.3'", "mysql> SELECT 'My' 'S' 'QL';\n        -> 'MySQL'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_concat"], "Feature Type": ["Function"], "index": 577, "vector_txt": "577:Feature: CONCAT(str1,str2,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["gen_blocklist(str,\n              dictionary_name,\n              replacement_dictionary_name)"], "Description": ["Perform dictionary term replacement", "\ngen_blocklist(str,\n              dictionary_name,\n              replacement_dictionary_name)\n", "\n              Replaces a term present in one dictionary with a term from\n              a second dictionary and returns the replacement term. This\n              masks the original term by substitution. This function\n              serves as a replacement for the deprecated\n              gen_blacklist()\n              function.\n            ", "\n              Arguments:\n", "\n\nstr: A string that\n                  indicates the term to replace.\n                \ndictionary_name: A string\n                  that names the dictionary containing the term to\n                  replace.\n                \nreplacement_dictionary_name:\n                  A string that names the dictionary from which to\n                  choose the replacement term.\n\n", "\n              Return value:\n            ", "\n              A string randomly chosen from\n              replacement_dictionary_name as\n              a replacement for str, or\n              str if it does not appear in\n              dictionary_name, or\n              NULL if either dictionary name is not\n              in the dictionary registry.\n            ", "\n              If the term to replace appears in both dictionaries, it is\n              possible for the return value to be the same term.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_blocklist('Berlin', 'DE_Cities', 'US_Cities');\n+---------------------------------------------------+\n| gen_blocklist('Berlin', 'DE_Cities', 'US_Cities') |\n+---------------------------------------------------+\n| Phoenix                                           |\n+---------------------------------------------------+"], "Examples": ["mysql> SELECT gen_blocklist('Berlin', 'DE_Cities', 'US_Cities');\n+---------------------------------------------------+\n| gen_blocklist('Berlin', 'DE_Cities', 'US_Cities') |\n+---------------------------------------------------+\n| Phoenix                                           |\n+---------------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-plugin-functions.html#function_gen-blocklist-plugin"], "Feature Type": ["Function"], "index": 578, "vector_txt": "578:Feature: gen_blocklist(str,\n              dictionary_name,\n              replacement_dictionary_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference", "14.2 Loadable Function Reference"], "Feature": ["gen_dictionary(dictionary_name)"], "Description": ["Return random term from dictionary", "\ngen_dictionary(dictionary_name)\n", "\n              Returns a random term from a dictionary.\n            ", "\n              Arguments:\n", "\n\ndictionary_name: A string\n                  that names the dictionary from which to choose the\n                  term. This argument is converted to the\n                  utf8mb4 character set.\n\n", "\n              Return value:\n            ", "\n              A random term from the dictionary as a string encoded in\n              the utf8mb4 character set, or\n              NULL if the dictionary name is not in\n              the dictionary registry.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_dictionary('mydict');\n+--------------------------+\n| gen_dictionary('mydict') |\n+--------------------------+\n| My term                  |\n+--------------------------+\nmysql> SELECT gen_dictionary('no-such-dict');\nERROR 1123 (HY000): Can't initialize function 'gen_dictionary'; Cannot access \ndictionary, check if dictionary name is valid."], "Examples": ["mysql> SELECT gen_dictionary('mydict');\n+--------------------------+\n| gen_dictionary('mydict') |\n+--------------------------+\n| My term                  |\n+--------------------------+\nmysql> SELECT gen_dictionary('no-such-dict');\nERROR 1123 (HY000): Can't initialize function 'gen_dictionary'; Cannot access \ndictionary, check if dictionary name is valid."], "Category": ["Loadable Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_gen-dictionary"], "Feature Type": ["Function"], "index": 579, "vector_txt": "579:Feature: gen_dictionary(dictionary_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["gen_dictionary_drop(dictionary_name)"], "Description": ["Remove dictionary from registry", "\ngen_dictionary_drop(dictionary_name)\n", "\n              Removes a dictionary from the dictionary registry.\n            ", "\n              This function requires the\n              SUPER privilege.\n            ", "\n              Arguments:\n", "\n\ndictionary_name: A string\n                  that names the dictionary to remove from the\n                  dictionary registry.\n\n", "\n              Return value:\n            ", "\n              A string that indicates whether the drop operation\n              succeeded. Dictionary removed indicates\n              success. Dictionary removal error\n              indicates failure.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_dictionary_drop('mydict');\n+-------------------------------+\n| gen_dictionary_drop('mydict') |\n+-------------------------------+\n| Dictionary removed            |\n+-------------------------------+\nmysql> SELECT gen_dictionary_drop('no-such-dict');\n+-------------------------------------+\n| gen_dictionary_drop('no-such-dict') |\n+-------------------------------------+\n| Dictionary removal error            |\n+-------------------------------------+"], "Examples": ["mysql> SELECT gen_dictionary_drop('mydict');\n+-------------------------------+\n| gen_dictionary_drop('mydict') |\n+-------------------------------+\n| Dictionary removed            |\n+-------------------------------+\nmysql> SELECT gen_dictionary_drop('no-such-dict');\n+-------------------------------------+\n| gen_dictionary_drop('no-such-dict') |\n+-------------------------------------+\n| Dictionary removal error            |\n+-------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-plugin-functions.html#function_gen-dictionary-drop-plugin"], "Feature Type": ["Function"], "index": 580, "vector_txt": "580:Feature: gen_dictionary_drop(dictionary_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["gen_dictionary_load(dictionary_path,\n              dictionary_name)"], "Description": ["Load dictionary into registry", "\ngen_dictionary_load(dictionary_path,\n              dictionary_name)\n", "\n              Loads a file into the dictionary registry and assigns the\n              dictionary a name to be used with other functions that\n              require a dictionary name argument.\n            ", "\n              This function requires the\n              SUPER privilege.\n", "\n\nImportant\n\n\n                Dictionaries are not persistent. Any dictionary used by\n                applications must be loaded for each server startup.\n\n", "\n              Once loaded into the registry, a dictionary is used as is,\n              even if the underlying dictionary file changes. To reload\n              a dictionary, first drop it with\n              gen_dictionary_drop(),\n              then load it again with\n              gen_dictionary_load().\n            ", "\n              Arguments:\n", "\n\ndictionary_path: A string\n                  that specifies the path name of the dictionary file.\n                \ndictionary_name: A string\n                  that provides a name for the dictionary.\n\n", "\n              Return value:\n            ", "\n              A string that indicates whether the load operation\n              succeeded. Dictionary load success\n              indicates success. Dictionary load\n              error indicates failure. Dictionary load failure\n              can occur for several reasons, including:\n", "\n\n                  A dictionary with the given name is already loaded.\n                \n                  The dictionary file is not found.\n                \n                  The dictionary file contains no terms.\n                \n                  The secure_file_priv\n                  system variable is set and the dictionary file is not\n                  located in the directory named by the variable.\n\n", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_dictionary_load('/usr/local/mysql/mysql-files/mydict','mydict');\n+---------------------------------------------------------------------+\n| gen_dictionary_load('/usr/local/mysql/mysql-files/mydict','mydict') |\n+---------------------------------------------------------------------+\n| Dictionary load success                                             |\n+---------------------------------------------------------------------+\nmysql> SELECT gen_dictionary_load('/dev/null','null');\n+-----------------------------------------+\n| gen_dictionary_load('/dev/null','null') |\n+-----------------------------------------+\n| Dictionary load error                   |\n+-----------------------------------------+"], "Examples": ["mysql> SELECT gen_dictionary_load('/usr/local/mysql/mysql-files/mydict','mydict');\n+---------------------------------------------------------------------+\n| gen_dictionary_load('/usr/local/mysql/mysql-files/mydict','mydict') |\n+---------------------------------------------------------------------+\n| Dictionary load success                                             |\n+---------------------------------------------------------------------+\nmysql> SELECT gen_dictionary_load('/dev/null','null');\n+-----------------------------------------+\n| gen_dictionary_load('/dev/null','null') |\n+-----------------------------------------+\n| Dictionary load error                   |\n+-----------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-plugin-functions.html#function_gen-dictionary-load-plugin"], "Feature Type": ["Function"], "index": 581, "vector_txt": "581:Feature: gen_dictionary_load(dictionary_path,\n              dictionary_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference", "14.2 Loadable Function Reference"], "Feature": ["gen_range(lower,\n              upper)"], "Description": ["Generate random number within range", "\ngen_range(lower,\n              upper)\n", "\n              Generates a random number chosen from a specified range.\n            ", "\n              Arguments:\n", "\n\nlower: An integer that\n                  specifies the lower boundary of the range.\n                \nupper: An integer that\n                  specifies the upper boundary of the range, which must\n                  not be less than the lower boundary.\n\n", "\n              Return value:\n            ", "\n              A random integer (encoded in the\n              utf8mb4 character set) in the range\n              from lower to\n              upper, inclusive, or\n              NULL if the\n              upper argument is less than\n              lower.\n", "\n\nNote\n\n\n                For better quality of random values, use\n                RAND() instead of this\n                function.\n\n", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_range(100, 200), gen_range(-1000, -800);\n+---------------------+------------------------+\n| gen_range(100, 200) | gen_range(-1000, -800) |\n+---------------------+------------------------+\n|                 177 |                   -917 |\n+---------------------+------------------------+\nmysql> SELECT gen_range(1, 0);\n+-----------------+\n| gen_range(1, 0) |\n+-----------------+\n|            NULL |\n+-----------------+"], "Examples": ["mysql> SELECT gen_range(100, 200), gen_range(-1000, -800);\n+---------------------+------------------------+\n| gen_range(100, 200) | gen_range(-1000, -800) |\n+---------------------+------------------------+\n|                 177 |                   -917 |\n+---------------------+------------------------+\nmysql> SELECT gen_range(1, 0);\n+-----------------+\n| gen_range(1, 0) |\n+-----------------+\n|            NULL |\n+-----------------+"], "Category": ["Loadable Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_gen-range"], "Feature Type": ["Function"], "index": 582, "vector_txt": "582:Feature: gen_range(lower,\n              upper)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["gen_rnd_canada_sin()"], "Description": ["Generate random Canada Social Insurance Number", "\ngen_rnd_canada_sin()\n", "\n              Generates a random Canada Social Insurance Number (SIN) in\n              AAA-BBB-CCC\n              format. The generated number passes the Luhn check\n              algorithm, which ensures the consistency of this number.\n", "\n\nWarning\n\n\n                Values returned from\n                gen_rnd_canada_sin()\n                should be used only for test purposes, and are not\n                suitable for publication. There is no way to guarantee\n                that a given return value is not assigned to a\n                legitimate Canada SIN. Should it be necessary to publish\n                a gen_rnd_canada_sin()\n                result, consider masking it with\n                mask_canada_sin().\n\n", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A random Canada SIN as a string encoded in the\n              utf8mb4 character set.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_rnd_canada_sin();\n+----------------------+\n| gen_rnd_canada_sin() |\n+----------------------+\n| 046-454-286          |\n+----------------------+"], "Examples": ["mysql> SELECT gen_rnd_canada_sin();\n+----------------------+\n| gen_rnd_canada_sin() |\n+----------------------+\n| 046-454-286          |\n+----------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_gen-rnd-canada-sin"], "Feature Type": ["Function"], "index": 583, "vector_txt": "583:Feature: gen_rnd_canada_sin()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["gen_rnd_email(name_size,\n              surname_size,\n              domain)"], "Description": ["Generate random email address", "\ngen_rnd_email(name_size,\n              surname_size,\n              domain)\n", "\n              Generates a random email address in the form of\n              random_name.random_surname@domain.\n            ", "\n              Arguments:\n", "\n\nname_size: (Optional) An\n                  integer that specifies the number of characters in the\n                  name part of an address. The default is five if\n                  name_size is not given.\n                \nsurname_size: (Optional) An\n                  integer that specifies the number of characters in the\n                  surname part of an address. The default is seven if\n                  surname_size is not given.\n                \ndomain: (Optional) A string\n                  that specifies the domain part of the address. The\n                  default is example.com if\n                  domain is not given.\n\n", "\n              Return value:\n            ", "\n              A random email address as a string encoded in the\n              utf8mb4 character set.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_rnd_email(name_size = 4, surname_size = 5, domain = 'mynet.com');\n+----------------------------------------------------------------------+\n| gen_rnd_email(name_size = 4, surname_size = 5, domain = 'mynet.com') |\n+----------------------------------------------------------------------+\n| lsoy.qwupp@mynet.com                                                 |\n+----------------------------------------------------------------------+\nmysql> SELECT gen_rnd_email();\n+---------------------------+\n| gen_rnd_email()           |\n+---------------------------+\n| ijocv.mwvhhuf@example.com |\n+---------------------------+"], "Examples": ["mysql> SELECT gen_rnd_email(name_size = 4, surname_size = 5, domain = 'mynet.com');\n+----------------------------------------------------------------------+\n| gen_rnd_email(name_size = 4, surname_size = 5, domain = 'mynet.com') |\n+----------------------------------------------------------------------+\n| lsoy.qwupp@mynet.com                                                 |\n+----------------------------------------------------------------------+\nmysql> SELECT gen_rnd_email();\n+---------------------------+\n| gen_rnd_email()           |\n+---------------------------+\n| ijocv.mwvhhuf@example.com |\n+---------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_gen-rnd-email"], "Feature Type": ["Function"], "index": 584, "vector_txt": "584:Feature: gen_rnd_email(name_size,\n              surname_size,\n              domain)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["gen_rnd_email()"], "Description": ["Generate random email address", "\ngen_rnd_email()\n", "\n              Generates a random email address in the\n              example.com domain.\n            ", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A random email address as a string.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_rnd_email();\n+---------------------------+\n| gen_rnd_email()           |\n+---------------------------+\n| ijocv.mwvhhuf@example.com |\n+---------------------------+"], "Examples": ["mysql> SELECT gen_rnd_email();\n+---------------------------+\n| gen_rnd_email()           |\n+---------------------------+\n| ijocv.mwvhhuf@example.com |\n+---------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-plugin-functions.html#function_gen-rnd-email-plugin"], "Feature Type": ["Function"], "index": 585, "vector_txt": "585:Feature: gen_rnd_email()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["gen_rnd_iban([country,\n              size])"], "Description": ["Generate random International Bank Account Number", "\ngen_rnd_iban([country,\n              size])\n", "\n              Generates a random International Bank Account Number\n              (IBAN) in AAAA\nBBBB\nCCCC\nDDDD format. The\n              generated string starts with a two-character country code,\n              two check digits computed according to the IBAN\n              specification and random alphanumeric characters up to the\n              required size.\n", "\n\nWarning\n\n\n                Values returned from\n                gen_rnd_iban() should be\n                used only for test purposes, and are not suitable for\n                publication if used with a valid country code. There is\n                no way to guarantee that a given return value is not\n                assigned to a legitimate bank account. Should it be\n                necessary to publish a\n                gen_rnd_iban() result,\n                consider masking it with\n                mask_iban().\n\n", "\n              Arguments:\n            ", "\n", "\n\ncountry: (Optional)\n                    Two-character country code; default value is\n                    ZZ\n\nsize: (Optional) Number\n                    of meaningful characters; default 16, minimum 15,\n                    maximum 34\n\n", "\n", "\n              Return value:\n            ", "\n              A random IBAN as a string encoded in the\n              utf8mb4 character set.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_rnd_iban();\n+-----------------------------+\n| gen_rnd_iban()              |\n+-----------------------------+\n| ZZ79 3K2J WNH9 1V0DI        |\n+-----------------------------+"], "Examples": ["mysql> SELECT gen_rnd_iban();\n+-----------------------------+\n| gen_rnd_iban()              |\n+-----------------------------+\n| ZZ79 3K2J WNH9 1V0DI        |\n+-----------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_gen-rnd-iban"], "Feature Type": ["Function"], "index": 586, "vector_txt": "586:Feature: gen_rnd_iban([country,\n              size])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference", "14.2 Loadable Function Reference"], "Feature": ["gen_rnd_pan([size])"], "Description": ["Generate random payment card Primary Account Number", "\ngen_rnd_pan([size])\n", "\n              Generates a random payment card Primary Account Number.\n              The number passes the Luhn check (an algorithm that\n              performs a checksum verification against a check digit).\n", "\n\nWarning\n\n\n                Values returned from\n                gen_rnd_pan() should be\n                used only for test purposes, and are not suitable for\n                publication. There is no way to guarantee that a given\n                return value is not assigned to a legitimate payment\n                account. Should it be necessary to publish a\n                gen_rnd_pan() result,\n                consider masking it with\n                mask_pan() or\n                mask_pan_relaxed().\n\n", "\n              Arguments:\n", "\n\nsize: (Optional) An integer\n                  that specifies the size of the result. The default is\n                  16 if size is not given. If\n                  given, size must be an\n                  integer in the range from 12 to 19.\n\n", "\n              Return value:\n            ", "\n              A random payment number as a string, or an error if a\n              size argument outside the\n              permitted range is given.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_pan(gen_rnd_pan());\n+-------------------------+\n| mask_pan(gen_rnd_pan()) |\n+-------------------------+\n| XXXXXXXXXXXX5805        |\n+-------------------------+\nmysql> SELECT mask_pan(gen_rnd_pan(19));\n+---------------------------+\n| mask_pan(gen_rnd_pan(19)) |\n+---------------------------+\n| XXXXXXXXXXXXXXX5067       |\n+---------------------------+\nmysql> SELECT mask_pan_relaxed(gen_rnd_pan());\n+---------------------------------+\n| mask_pan_relaxed(gen_rnd_pan()) |\n+---------------------------------+\n| 398403XXXXXX9547                |\n+---------------------------------+\nmysql> SELECT mask_pan_relaxed(gen_rnd_pan(19));\n+-----------------------------------+\n| mask_pan_relaxed(gen_rnd_pan(19)) |\n+-----------------------------------+\n| 578416XXXXXXXXX6509               |\n+-----------------------------------+\nmysql> SELECT gen_rnd_pan(20);\nERROR 1123 (HY000): Can't initialize function 'gen_rnd_pan'; Minimal value of argument 0 is 14."], "Examples": ["mysql> SELECT mask_pan(gen_rnd_pan());\n+-------------------------+\n| mask_pan(gen_rnd_pan()) |\n+-------------------------+\n| XXXXXXXXXXXX5805        |\n+-------------------------+\nmysql> SELECT mask_pan(gen_rnd_pan(19));\n+---------------------------+\n| mask_pan(gen_rnd_pan(19)) |\n+---------------------------+\n| XXXXXXXXXXXXXXX5067       |\n+---------------------------+\nmysql> SELECT mask_pan_relaxed(gen_rnd_pan());\n+---------------------------------+\n| mask_pan_relaxed(gen_rnd_pan()) |\n+---------------------------------+\n| 398403XXXXXX9547                |\n+---------------------------------+\nmysql> SELECT mask_pan_relaxed(gen_rnd_pan(19));\n+-----------------------------------+\n| mask_pan_relaxed(gen_rnd_pan(19)) |\n+-----------------------------------+\n| 578416XXXXXXXXX6509               |\n+-----------------------------------+\nmysql> SELECT gen_rnd_pan(20);\nERROR 1123 (HY000): Can't initialize function 'gen_rnd_pan'; Minimal value of argument 0 is 14."], "Category": ["Loadable Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_gen-rnd-pan"], "Feature Type": ["Function"], "index": 587, "vector_txt": "587:Feature: gen_rnd_pan([size])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["CONCAT_WS(separator,str1,str2,...)"], "Description": ["Return concatenate with separator", "\nCONCAT_WS(separator,str1,str2,...)\n", "\nCONCAT_WS() stands for\n          Concatenate With Separator and is a special form of\n          CONCAT(). The first argument is\n          the separator for the rest of the arguments. The separator is\n          added between the strings to be concatenated. The separator\n          can be a string, as can the rest of the arguments. If the\n          separator is NULL, the result is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT CONCAT_WS(',', 'First name', 'Second name', 'Last Name');\n        -> 'First name,Second name,Last Name'\nmysql> SELECT CONCAT_WS(',', 'First name', NULL, 'Last Name');\n        -> 'First name,Last Name'", "\nCONCAT_WS() does not skip empty\n          strings. However, it does skip any NULL\n          values after the separator argument.\n        "], "Examples": ["mysql> SELECT CONCAT_WS(',', 'First name', 'Second name', 'Last Name');\n        -> 'First name,Second name,Last Name'\nmysql> SELECT CONCAT_WS(',', 'First name', NULL, 'Last Name');\n        -> 'First name,Last Name'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_concat-ws"], "Feature Type": ["Function"], "index": 588, "vector_txt": "588:Feature: CONCAT_WS(separator,str1,str2,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference", "14.2 Loadable Function Reference"], "Feature": ["gen_rnd_ssn()"], "Description": ["Generate random US Social Security Number", "\ngen_rnd_ssn()\n", "\n              Generates a random US Social Security Number in\n              AAA-BB-CCCC\n              format. The AAA part is greater\n              than 900, which are characteristics not used for\n              legitimate social security numbers.\n            ", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A random Social Security Number as a string encoded in the\n              utf8mb4 character set.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_rnd_ssn();\n+---------------+\n| gen_rnd_ssn() |\n+---------------+\n| 951-26-0058   |\n+---------------+"], "Examples": ["mysql> SELECT gen_rnd_ssn();\n+---------------+\n| gen_rnd_ssn() |\n+---------------+\n| 951-26-0058   |\n+---------------+"], "Category": ["Loadable Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_gen-rnd-ssn"], "Feature Type": ["Function"], "index": 589, "vector_txt": "589:Feature: gen_rnd_ssn()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["gen_rnd_uk_nin()"], "Description": ["Generate random United Kingdom National Insurance Number", "\ngen_rnd_uk_nin()\n", "\n              Generates a random United Kingdom National Insurance\n              Number (UK NIN) in nine-character format. NIN starts with\n              two character prefix randomly selected from the set of\n              valid prefixes, six random numbers, and one character\n              suffix randomly selected from the set of valid suffixes.\n", "\n\nWarning\n\n\n                Values returned from\n                gen_rnd_uk_nin() should\n                be used only for test purposes, and are not suitable for\n                publication. There is no way to guarantee that a given\n                return value is not assigned to a legitimate NIN. Should\n                it be necessary to publish a\n                gen_rnd_uk_nin() result,\n                consider masking it with\n                mask_uk_nin().\n\n", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A random UK NIN as a string encoded in the\n              utf8mb4 character set.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_rnd_uk_nin();\n+----------------------+\n| gen_rnd_uk_nin()     |\n+----------------------+\n| QQ123456C            |\n+----------------------+"], "Examples": ["mysql> SELECT gen_rnd_uk_nin();\n+----------------------+\n| gen_rnd_uk_nin()     |\n+----------------------+\n| QQ123456C            |\n+----------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_gen-rnd-uk-nin"], "Feature Type": ["Function"], "index": 590, "vector_txt": "590:Feature: gen_rnd_uk_nin()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference", "14.2 Loadable Function Reference"], "Feature": ["gen_rnd_us_phone()"], "Description": ["Generate random US phone number", "\ngen_rnd_us_phone()\n", "\n              Generates a random US phone number in\n              1-555-AAA-BBBB\n              format. The 555 area code is not used for legitimate phone\n              numbers.\n            ", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A random US phone number as a string encoded in the\n              utf8mb4 character set.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_rnd_us_phone();\n+--------------------+\n| gen_rnd_us_phone() |\n+--------------------+\n| 1-555-682-5423     |\n+--------------------+"], "Examples": ["mysql> SELECT gen_rnd_us_phone();\n+--------------------+\n| gen_rnd_us_phone() |\n+--------------------+\n| 1-555-682-5423     |\n+--------------------+"], "Category": ["Loadable Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_gen-rnd-us-phone"], "Feature Type": ["Function"], "index": 591, "vector_txt": "591:Feature: gen_rnd_us_phone()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["gen_rnd_uuid()"], "Description": ["Generate random Universally Unique Identifier", "\ngen_rnd_uuid()\n", "\n              Generates a random Universally Unique Identifier (UUID)\n              segmented with dashes.\n            ", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A random UUID as a string encoded in the\n              utf8mb4 character set.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT gen_rnd_uuid();\n+--------------------------------------+\n| gen_rnd_uuid()                       |\n+--------------------------------------+\n| 123e4567-e89b-12d3-a456-426614174000 |\n+--------------------------------------+"], "Examples": ["mysql> SELECT gen_rnd_uuid();\n+--------------------------------------+\n| gen_rnd_uuid()                       |\n+--------------------------------------+\n| 123e4567-e89b-12d3-a456-426614174000 |\n+--------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_gen-rnd-uuid"], "Feature Type": ["Function"], "index": 592, "vector_txt": "592:Feature: gen_rnd_uuid()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["keyring_aws_rotate_cmk()"], "Description": ["Rotate AWS customer master key", "\nkeyring_aws_rotate_cmk()\n", "\n            Associated keyring plugin: keyring_aws\n", "\nkeyring_aws_rotate_cmk()\n            rotates the AWS KMS key. Rotation changes only the key that\n            AWS KMS uses for subsequent data key-encryption operations.\n            AWS KMS maintains previous CMK versions, so keys generated\n            using previous CMKs remain decryptable after rotation.\n          ", "\n            Rotation changes the CMK value used inside AWS KMS but does\n            not change the ID used to refer to it, so there is no need\n            to change the\n            keyring_aws_cmk_id system\n            variable after calling\n            keyring_aws_rotate_cmk().\n          ", "\n            This function requires the\n            SUPER privilege.\n          ", "\n            Arguments:\n          ", "\n            None.\n          ", "\n            Return value:\n          ", "\n            Returns 1 for success, or NULL and an\n            error for failure.\n          "], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/keyring-functions-plugin-specific.html#function_keyring-aws-rotate-cmk"], "Feature Type": ["Function"], "index": 593, "vector_txt": "593:Feature: keyring_aws_rotate_cmk()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["keyring_aws_rotate_keys()"], "Description": ["Rotate keys in keyring_aws storage file", "\nkeyring_aws_rotate_keys()\n", "\n            Associated keyring plugin: keyring_aws\n", "\nkeyring_aws_rotate_keys()\n            rotates keys stored in the keyring_aws\n            storage file named by the\n            keyring_aws_data_file\n            system variable. Rotation sends each key stored in the file\n            to AWS KMS for re-encryption using the value of the\n            keyring_aws_cmk_id system\n            variable as the CMK value, and stores the new encrypted keys\n            in the file.\n          ", "\nkeyring_aws_rotate_keys() is\n            useful for key re-encryption under these circumstances:\n", "\n\n                After rotating the CMK; that is, after invoking the\n                keyring_aws_rotate_cmk()\n                function.\n              \n                After changing the\n                keyring_aws_cmk_id\n                system variable to a different key value.\n\n", "\n            This function requires the\n            SUPER privilege.\n          ", "\n            Arguments:\n          ", "\n            None.\n          ", "\n            Return value:\n          ", "\n            Returns 1 for success, or NULL and an\n            error for failure.\n          "], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/keyring-functions-plugin-specific.html#function_keyring-aws-rotate-keys"], "Feature Type": ["Function"], "index": 594, "vector_txt": "594:Feature: keyring_aws_rotate_keys()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["keyring_hashicorp_update_config()"], "Description": ["Cause runtime keyring_hashicorp reconfiguration", "\nkeyring_hashicorp_update_config()\n", "\n            Associated keyring plugin:\n            keyring_hashicorp\n", "\n            When invoked, the\n            keyring_hashicorp_update_config()\n            function causes keyring_hashicorp to\n            perform a runtime reconfiguration, as described in\n            keyring_hashicorp Configuration.\n          ", "\n            This function requires the\n            SYSTEM_VARIABLES_ADMIN\n            privilege because it modifies global system variables.\n          ", "\n            Arguments:\n          ", "\n            None.\n          ", "\n            Return value:\n          ", "\n            Returns the string 'Configuration update was\n            successful.' for success, or\n            'Configuration update failed.' for\n            failure.\n"], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/keyring-functions-plugin-specific.html#function_keyring-hashicorp-update-config"], "Feature Type": ["Function"], "index": 595, "vector_txt": "595:Feature: keyring_hashicorp_update_config()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["keyring_key_fetch(key_id)"], "Description": ["Fetch keyring key value", "\nkeyring_key_fetch(key_id)\n", "\n              Given a key ID, deobfuscates and returns the key value.\n            ", "\n              Arguments:\n", "\n\nkey_id: A string that\n                  specifies the key ID.\n\n", "\n              Return value:\n            ", "\n              Returns the key value as a string for success,\n              NULL if the key does not exist, or\n              NULL and an error for failure.\n", "\n\nNote\n\n\n                Key values retrieved using\n                keyring_key_fetch() are\n                subject to the general keyring function limits described\n                in Section\u00a08.4.4.10, \u201cSupported Keyring Key Types and Lengths\u201d. A key value\n                longer than that length can be stored using a keyring\n                service function (see\n                Section\u00a07.6.9.2, \u201cThe Keyring Service\u201d), but if retrieved\n                using keyring_key_fetch()\n                is truncated to the general keyring function limit.\n\n", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT keyring_key_generate('RSA_key', 'RSA', 16);\n+--------------------------------------------+\n| keyring_key_generate('RSA_key', 'RSA', 16) |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\nmysql> SELECT HEX(keyring_key_fetch('RSA_key'));\n+-----------------------------------+\n| HEX(keyring_key_fetch('RSA_key')) |\n+-----------------------------------+\n| 91C2253B696064D3556984B6630F891A  |\n+-----------------------------------+\nmysql> SELECT keyring_key_type_fetch('RSA_key');\n+-----------------------------------+\n| keyring_key_type_fetch('RSA_key') |\n+-----------------------------------+\n| RSA                               |\n+-----------------------------------+\nmysql> SELECT keyring_key_length_fetch('RSA_key');\n+-------------------------------------+\n| keyring_key_length_fetch('RSA_key') |\n+-------------------------------------+\n|                                  16 |\n+-------------------------------------+", "\n              The example uses HEX() to\n              display the key value because it may contain nonprintable\n              characters. The example also uses a short key for brevity,\n              but be aware that longer keys provide better security.\n            "], "Examples": ["mysql> SELECT keyring_key_generate('RSA_key', 'RSA', 16);\n+--------------------------------------------+\n| keyring_key_generate('RSA_key', 'RSA', 16) |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\nmysql> SELECT HEX(keyring_key_fetch('RSA_key'));\n+-----------------------------------+\n| HEX(keyring_key_fetch('RSA_key')) |\n+-----------------------------------+\n| 91C2253B696064D3556984B6630F891A  |\n+-----------------------------------+\nmysql> SELECT keyring_key_type_fetch('RSA_key');\n+-----------------------------------+\n| keyring_key_type_fetch('RSA_key') |\n+-----------------------------------+\n| RSA                               |\n+-----------------------------------+\nmysql> SELECT keyring_key_length_fetch('RSA_key');\n+-------------------------------------+\n| keyring_key_length_fetch('RSA_key') |\n+-------------------------------------+\n|                                  16 |\n+-------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/keyring-functions-general-purpose.html#function_keyring-key-fetch"], "Feature Type": ["Function"], "index": 596, "vector_txt": "596:Feature: keyring_key_fetch(key_id)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["keyring_key_generate(key_id,\n              key_type,\n              key_length)"], "Description": ["Generate random keyring key", "\nkeyring_key_generate(key_id,\n              key_type,\n              key_length)\n", "\n              Generates a new random key with a given ID, type, and\n              length, and stores it in the keyring. The type and length\n              values must be consistent with the values supported by the\n              underlying keyring plugin. See\n              Section\u00a08.4.4.10, \u201cSupported Keyring Key Types and Lengths\u201d.\n            ", "\n              Arguments:\n", "\n\nkey_id: A string that\n                  specifies the key ID.\n                \nkey_type: A string that\n                  specifies the key type.\n                \nkey_length: An integer that\n                  specifies the key length in bytes.\n\n", "\n              Return value:\n            ", "\n              Returns 1 for success, or NULL and an\n              error for failure.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT keyring_key_generate('RSA_key', 'RSA', 384);\n+---------------------------------------------+\n| keyring_key_generate('RSA_key', 'RSA', 384) |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT keyring_key_generate('RSA_key', 'RSA', 384);\n+---------------------------------------------+\n| keyring_key_generate('RSA_key', 'RSA', 384) |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/keyring-functions-general-purpose.html#function_keyring-key-generate"], "Feature Type": ["Function"], "index": 597, "vector_txt": "597:Feature: keyring_key_generate(key_id,\n              key_type,\n              key_length)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["keyring_key_length_fetch(key_id)"], "Description": ["Return keyring key length", "\nkeyring_key_length_fetch(key_id)\n", "\n              Given a key ID, returns the key length.\n            ", "\n              Arguments:\n", "\n\nkey_id: A string that\n                  specifies the key ID.\n\n", "\n              Return value:\n            ", "\n              Returns the key length in bytes as an integer for success,\n              NULL if the key does not exist, or\n              NULL and an error for failure.\n            ", "\n              Example:\n            ", "\n              See the description of\n              keyring_key_fetch().\n            "], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/keyring-functions-general-purpose.html#function_keyring-key-length-fetch"], "Feature Type": ["Function"], "index": 598, "vector_txt": "598:Feature: keyring_key_length_fetch(key_id)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["CONNECTION_ID()"], "Description": ["Return the connection ID (thread ID) for the connection", "\nCONNECTION_ID()\n", "\n          Returns the connection ID (thread ID) for the connection.\n          Every connection has an ID that is unique among the set of\n          currently connected clients.\n        ", "\n          The value returned by\n          CONNECTION_ID() is the same\n          type of value as displayed in the ID column\n          of the Information Schema\n          PROCESSLIST table, the\n          Id column of SHOW\n          PROCESSLIST output, and the\n          PROCESSLIST_ID column of the Performance\n          Schema threads table.\n        ", "Press CTRL+C to copy mysql> SELECT CONNECTION_ID();\n        -> 23786", "\n\nWarning\n\n\n            Changing the session value of the\n            pseudo_thread_id system\n            variable changes the value returned by the\n            CONNECTION_ID() function.\n\n"], "Examples": ["mysql> SELECT CONNECTION_ID();\n        -> 23786"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_connection-id"], "Feature Type": ["Function"], "index": 599, "vector_txt": "599:Feature: CONNECTION_ID()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["keyring_key_remove(key_id)"], "Description": ["Remove keyring key", "\nkeyring_key_remove(key_id)\n", "\n              Removes the key with a given ID from the keyring.\n            ", "\n              Arguments:\n", "\n\nkey_id: A string that\n                  specifies the key ID.\n\n", "\n              Return value:\n            ", "\n              Returns 1 for success, or NULL for\n              failure.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT keyring_key_remove('AES_key');\n+-------------------------------+\n| keyring_key_remove('AES_key') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+"], "Examples": ["mysql> SELECT keyring_key_remove('AES_key');\n+-------------------------------+\n| keyring_key_remove('AES_key') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/keyring-functions-general-purpose.html#function_keyring-key-remove"], "Feature Type": ["Function"], "index": 600, "vector_txt": "600:Feature: keyring_key_remove(key_id)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["keyring_key_store(key_id,\n              key_type,\n              key)"], "Description": ["Store key in keyring", "\nkeyring_key_store(key_id,\n              key_type,\n              key)\n", "\n              Obfuscates and stores a key in the keyring.\n            ", "\n              Arguments:\n", "\n\nkey_id: A string that\n                  specifies the key ID.\n                \nkey_type: A string that\n                  specifies the key type.\n                \nkey: A string that\n                  specifies the key value.\n\n", "\n              Return value:\n            ", "\n              Returns 1 for success, or NULL and an\n              error for failure.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT keyring_key_store('new key', 'DSA', 'My key value');\n+-----------------------------------------------------+\n| keyring_key_store('new key', 'DSA', 'My key value') |\n+-----------------------------------------------------+\n|                                                   1 |\n+-----------------------------------------------------+"], "Examples": ["mysql> SELECT keyring_key_store('new key', 'DSA', 'My key value');\n+-----------------------------------------------------+\n| keyring_key_store('new key', 'DSA', 'My key value') |\n+-----------------------------------------------------+\n|                                                   1 |\n+-----------------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/keyring-functions-general-purpose.html#function_keyring-key-store"], "Feature Type": ["Function"], "index": 601, "vector_txt": "601:Feature: keyring_key_store(key_id,\n              key_type,\n              key)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["keyring_key_type_fetch(key_id)"], "Description": ["Return keyring key type", "\nkeyring_key_type_fetch(key_id)\n", "\n              Given a key ID, returns the key type.\n            ", "\n              Arguments:\n", "\n\nkey_id: A string that\n                  specifies the key ID.\n\n", "\n              Return value:\n            ", "\n              Returns the key type as a string for success,\n              NULL if the key does not exist, or\n              NULL and an error for failure.\n            ", "\n              Example:\n            ", "\n              See the description of\n              keyring_key_fetch().\n"], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/keyring-functions-general-purpose.html#function_keyring-key-type-fetch"], "Feature Type": ["Function"], "index": 602, "vector_txt": "602:Feature: keyring_key_type_fetch(key_id)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["load_rewrite_rules()"], "Description": ["Rewriter plugin helper routine", "\nload_rewrite_rules()\n", "\n              This function is a helper routine used by the\n              flush_rewrite_rules()\n              stored procedure.\n"], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/rewriter-query-rewrite-plugin-reference.html#function_load-rewrite-rules"], "Feature Type": ["Function"], "index": 603, "vector_txt": "603:Feature: load_rewrite_rules()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["mask_canada_sin(str\n              [, mask_char])"], "Description": ["Mask Canada Social Insurance Number", "\nmask_canada_sin(str\n              [, mask_char])\n", "\n              Masks a Canada Social Insurance Number (SIN) and returns\n              the number with all meaningful digits replaced by\n              'X' characters. An optional masking\n              character can be specified.\n            ", "\n              Arguments:\n", "\n\nstr: The string to mask.\n                  The accepted formats are:\n\n\n\n                      Nine non-separated digits.\n                    \n                      Nine digits grouped in pattern:\n                      xxx-xxx-xxx\n                      ('-' is any separator\n                      character).\n\n\n\n                  This argument is converted to the\n                  utf8mb4 character set.\n                \nmask_char: (Optional) The\n                  single character to use for masking. The default is\n                  'X' if\n                  mask_char is not given.\n\n", "\n              Return value:\n            ", "\n              The masked Canada SIN as a string encoded in the\n              utf8mb4 character set, an error if the\n              argument is not the correct length, or\n              NULL if str\n              is in incorrect format or contains a multibyte character.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_canada_sin('046-454-286'), mask_canada_sin('abcdefijk');\n+--------------------------------+------------------------------+\n| mask_canada_sin('046-454-286') | mask_canada_sin('abcdefijk') |\n+--------------------------------+------------------------------+\n| XXX-XXX-XXX                    | XXXXXXXXX                    |\n+--------------------------------+------------------------------+\nmysql> SELECT mask_canada_sin('909');\nERROR 1123 (HY000): Can't initialize function 'mask_canada_sin'; Argument 0 is too short.\nmysql> SELECT mask_canada_sin('046-454-286-909');\nERROR 1123 (HY000): Can't initialize function 'mask_canada_sin'; Argument 0 is too long."], "Examples": ["mysql> SELECT mask_canada_sin('046-454-286'), mask_canada_sin('abcdefijk');\n+--------------------------------+------------------------------+\n| mask_canada_sin('046-454-286') | mask_canada_sin('abcdefijk') |\n+--------------------------------+------------------------------+\n| XXX-XXX-XXX                    | XXXXXXXXX                    |\n+--------------------------------+------------------------------+\nmysql> SELECT mask_canada_sin('909');\nERROR 1123 (HY000): Can't initialize function 'mask_canada_sin'; Argument 0 is too short.\nmysql> SELECT mask_canada_sin('046-454-286-909');\nERROR 1123 (HY000): Can't initialize function 'mask_canada_sin'; Argument 0 is too long."], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_mask-canada-sin"], "Feature Type": ["Function"], "index": 604, "vector_txt": "604:Feature: mask_canada_sin(str\n              [, mask_char])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["mask_iban(str\n              [, mask_char])"], "Description": ["Mask International Bank Account Number", "\nmask_iban(str\n              [, mask_char])\n", "\n              Masks an International Bank Account Number (IBAN) and\n              returns the number with all but the first two letters\n              (denoting the country) replaced by '*'\n              characters. An optional masking character can be\n              specified.\n            ", "\n              Arguments:\n", "\n\nstr: The string to mask.\n                  Each country can have a different national routing or\n                  account numbering system, with a minimum of 13 and a\n                  maximum of 34 alphanumeric ASCII characters. The\n                  accepted formats are:\n\n\n\n                      Non-separated characters.\n                    \n                      Character grouped by four, except the last group,\n                      and separated by space or any other separator\n                      character (for example:\n                      xxxx-xxxx-xxxx-xx).\n\n\n\n                  This argument is converted to the\n                  utf8mb4 character set.\n                \nmask_char: (Optional) The\n                  single character to use for masking. The default is\n                  '*' if\n                  mask_char is not given.\n\n", "\n              Return value:\n            ", "\n              The masked International Bank Account Number as a string\n              encoded in the utf8mb4 character set,\n              an error if the argument is not the correct length, or\n              NULL if str\n              is in incorrect format or contains a multibyte character.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_iban('IE12 BOFI 9000 0112 3456 78'), mask_iban('abcdefghijk');\n+------------------------------------------+--------------------------+\n| mask_iban('IE12 BOFI 9000 0112 3456 78') | mask_iban('abcdefghijk') |\n+------------------------------------------+--------------------------+\n| IE** **** **** **** **** **              | ab*********              |\n+------------------------------------------+--------------------------+\nmysql> SELECT mask_iban('909');\nERROR 1123 (HY000): Can't initialize function 'mask_iban'; Argument 0 is too short.\nmysql> SELECT mask_iban('IE12 BOFI 9000 0112 3456 78 IE12 BOFI 9000 0112 3456 78');\nERROR 1123 (HY000): Can't initialize function 'mask_iban'; Argument 0 is too long."], "Examples": ["mysql> SELECT mask_iban('IE12 BOFI 9000 0112 3456 78'), mask_iban('abcdefghijk');\n+------------------------------------------+--------------------------+\n| mask_iban('IE12 BOFI 9000 0112 3456 78') | mask_iban('abcdefghijk') |\n+------------------------------------------+--------------------------+\n| IE** **** **** **** **** **              | ab*********              |\n+------------------------------------------+--------------------------+\nmysql> SELECT mask_iban('909');\nERROR 1123 (HY000): Can't initialize function 'mask_iban'; Argument 0 is too short.\nmysql> SELECT mask_iban('IE12 BOFI 9000 0112 3456 78 IE12 BOFI 9000 0112 3456 78');\nERROR 1123 (HY000): Can't initialize function 'mask_iban'; Argument 0 is too long."], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_mask-iban"], "Feature Type": ["Function"], "index": 605, "vector_txt": "605:Feature: mask_iban(str\n              [, mask_char])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference", "14.2 Loadable Function Reference"], "Feature": ["mask_inner(str,\n              margin1,\n              margin2 [,\n              mask_char])"], "Description": ["Mask interior part of string", "\nmask_inner(str,\n              margin1,\n              margin2 [,\n              mask_char])\n", "\n              Masks the interior part of a string, leaving the ends\n              untouched, and returns the result. An optional masking\n              character can be specified.\n            ", "\nmask_inner supports all\n              character sets.\n            ", "\n              Arguments:\n", "\n\nstr: The string to mask.\n                  This argument is converted to the\n                  utf8mb4 character set.\n                \nmargin1: A nonnegative\n                  integer that specifies the number of characters on the\n                  left end of the string to remain unmasked. If the\n                  value is 0, no left end characters remain unmasked.\n                \nmargin2: A nonnegative\n                  integer that specifies the number of characters on the\n                  right end of the string to remain unmasked. If the\n                  value is 0, no right end characters remain unmasked.\n                \nmask_char: (Optional) The\n                  single character to use for masking. The default is\n                  'X' if\n                  mask_char is not given.\n\n", "\n              Return value:\n            ", "\n              The masked string encoded in the same character set used\n              for str, or an error if either\n              margin is negative.\n            ", "\n              If the sum of the margin values is larger than the\n              argument length, no masking occurs and the argument is\n              returned unchanged.\n", "\n\nNote\n\n\n                The function is optimized to work faster for single byte\n                strings (having equal byte length and character length).\n                For example, the utf8mb4 character\n                set uses only one byte for ASCII characters, so the\n                function processes strings containing only ASCII\n                characters as single-byte character strings.\n\n", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_inner('abcdef', 1, 2), mask_inner('abcdef',0, 5);\n+----------------------------+---------------------------+\n| mask_inner('abcdef', 1, 2) | mask_inner('abcdef',0, 5) |\n+----------------------------+---------------------------+\n| aXXXef                     | Xbcdef                    |\n+----------------------------+---------------------------+\nmysql> SELECT mask_inner('abcdef', 1, 2, '*'), mask_inner('abcdef',0, 5, '#');\n+---------------------------------+--------------------------------+\n| mask_inner('abcdef', 1, 2, '*') | mask_inner('abcdef',0, 5, '#') |\n+---------------------------------+--------------------------------+\n| a***ef                          | #bcdef                         |\n+---------------------------------+--------------------------------+"], "Examples": ["mysql> SELECT mask_inner('abcdef', 1, 2), mask_inner('abcdef',0, 5);\n+----------------------------+---------------------------+\n| mask_inner('abcdef', 1, 2) | mask_inner('abcdef',0, 5) |\n+----------------------------+---------------------------+\n| aXXXef                     | Xbcdef                    |\n+----------------------------+---------------------------+\nmysql> SELECT mask_inner('abcdef', 1, 2, '*'), mask_inner('abcdef',0, 5, '#');\n+---------------------------------+--------------------------------+\n| mask_inner('abcdef', 1, 2, '*') | mask_inner('abcdef',0, 5, '#') |\n+---------------------------------+--------------------------------+\n| a***ef                          | #bcdef                         |\n+---------------------------------+--------------------------------+"], "Category": ["Loadable Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_mask-inner"], "Feature Type": ["Function"], "index": 606, "vector_txt": "606:Feature: mask_inner(str,\n              margin1,\n              margin2 [,\n              mask_char])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference", "14.2 Loadable Function Reference"], "Feature": ["mask_outer(str,\n              margin1,\n              margin2 [,\n              mask_char])"], "Description": ["Mask left and right parts of string", "\nmask_outer(str,\n              margin1,\n              margin2 [,\n              mask_char])\n", "\n              Masks the left and right ends of a string, leaving the\n              interior unmasked, and returns the result. An optional\n              masking character can be specified.\n            ", "\nmask_outer supports all\n              character sets.\n            ", "\n              Arguments:\n", "\n\nstr: The string to mask.\n                  This argument is converted to the\n                  utf8mb4 character set.\n                \nmargin1: A nonnegative\n                  integer that specifies the number of characters on the\n                  left end of the string to mask. If the value is 0, no\n                  left end characters are masked.\n                \nmargin2: A nonnegative\n                  integer that specifies the number of characters on the\n                  right end of the string to mask. If the value is 0, no\n                  right end characters are masked.\n                \nmask_char: (Optional) The\n                  single character to use for masking. The default is\n                  'X' if\n                  mask_char is not given.\n\n", "\n              Return value:\n            ", "\n              The masked string encoded in the same character set used\n              for str, or an error if either\n              margin is negative.\n            ", "\n              If the sum of the margin values is larger than the\n              argument length, the entire argument is masked.\n", "\n\nNote\n\n\n                The function is optimized to work faster for single byte\n                strings (having equal byte length and character length).\n                For example, the utf8mb4 character\n                set uses only one byte for ASCII characters, so the\n                function processes strings containing only ASCII\n                characters as single-byte character strings.\n\n", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_outer('abcdef', 1, 2), mask_outer('abcdef',0, 5);\n+----------------------------+---------------------------+\n| mask_outer('abcdef', 1, 2) | mask_outer('abcdef',0, 5) |\n+----------------------------+---------------------------+\n| XbcdXX                     | aXXXXX                    |\n+----------------------------+---------------------------+\nmysql> SELECT mask_outer('abcdef', 1, 2, '*'), mask_outer('abcdef',0, 5, '#');\n+---------------------------------+--------------------------------+\n| mask_outer('abcdef', 1, 2, '*') | mask_outer('abcdef',0, 5, '#') |\n+---------------------------------+--------------------------------+\n| *bcd**                          | a#####                         |\n+---------------------------------+--------------------------------+"], "Examples": ["mysql> SELECT mask_outer('abcdef', 1, 2), mask_outer('abcdef',0, 5);\n+----------------------------+---------------------------+\n| mask_outer('abcdef', 1, 2) | mask_outer('abcdef',0, 5) |\n+----------------------------+---------------------------+\n| XbcdXX                     | aXXXXX                    |\n+----------------------------+---------------------------+\nmysql> SELECT mask_outer('abcdef', 1, 2, '*'), mask_outer('abcdef',0, 5, '#');\n+---------------------------------+--------------------------------+\n| mask_outer('abcdef', 1, 2, '*') | mask_outer('abcdef',0, 5, '#') |\n+---------------------------------+--------------------------------+\n| *bcd**                          | a#####                         |\n+---------------------------------+--------------------------------+"], "Category": ["Loadable Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_mask-outer"], "Feature Type": ["Function"], "index": 607, "vector_txt": "607:Feature: mask_outer(str,\n              margin1,\n              margin2 [,\n              mask_char])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["mask_pan(str\n              [, mask_char])"], "Description": ["Mask payment card Primary Account Number part of string", "\nmask_pan(str\n              [, mask_char])\n", "\n              Masks a payment card Primary Account Number (PAN) and\n              returns the number with all but the last four digits\n              replaced by 'X' characters. An optional\n              masking character can be specified.\n            ", "\n              Arguments:\n", "\n\nstr: The string to mask.\n                  The string must contain a minimum of 14 and a maximum\n                  of 19 alphanumeric characters. This argument is\n                  converted to the utf8mb4 character\n                  set.\n                \nmask_char: (Optional) The\n                  single character to use for masking. The default is\n                  'X' if\n                  mask_char is not given.\n\n", "\n              Return value:\n            ", "\n              The masked payment number as a string encoded in the\n              utf8mb4 character set, an error if the\n              argument is not the correct length, or\n              NULL if str\n              is in incorrect format or contains a multibyte character.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_pan(gen_rnd_pan());\n+-------------------------+\n| mask_pan(gen_rnd_pan()) |\n+-------------------------+\n| XXXXXXXXXXXX9102        |\n+-------------------------+\nmysql> SELECT mask_pan(gen_rnd_pan(19));\n+---------------------------+\n| mask_pan(gen_rnd_pan(19)) |\n+---------------------------+\n| XXXXXXXXXXXXXXX8268       |\n+---------------------------+\nmysql> SELECT mask_pan('a*Z');\nERROR 1123 (HY000): Can't initialize function 'mask_pan'; Argument 0 is too short."], "Examples": ["mysql> SELECT mask_pan(gen_rnd_pan());\n+-------------------------+\n| mask_pan(gen_rnd_pan()) |\n+-------------------------+\n| XXXXXXXXXXXX9102        |\n+-------------------------+\nmysql> SELECT mask_pan(gen_rnd_pan(19));\n+---------------------------+\n| mask_pan(gen_rnd_pan(19)) |\n+---------------------------+\n| XXXXXXXXXXXXXXX8268       |\n+---------------------------+\nmysql> SELECT mask_pan('a*Z');\nERROR 1123 (HY000): Can't initialize function 'mask_pan'; Argument 0 is too short."], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_mask-pan"], "Feature Type": ["Function"], "index": 608, "vector_txt": "608:Feature: mask_pan(str\n              [, mask_char])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["mask_pan(str)"], "Description": ["Mask payment card Primary Account Number part of string", "\nmask_pan(str)\n", "\n              Masks a payment card Primary Account Number and returns\n              the number with all but the last four digits replaced by\n              'X' characters.\n            ", "\n              Arguments:\n", "\n\nstr: The string to mask.\n                  The string must be a suitable length for the Primary\n                  Account Number, but is not otherwise checked.\n\n", "\n              Return value:\n            ", "\n              The masked payment number as a string. If the argument is\n              shorter than required, it is returned unchanged.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_pan(gen_rnd_pan());\n+-------------------------+\n| mask_pan(gen_rnd_pan()) |\n+-------------------------+\n| XXXXXXXXXXXX9102        |\n+-------------------------+\nmysql> SELECT mask_pan(gen_rnd_pan(19));\n+---------------------------+\n| mask_pan(gen_rnd_pan(19)) |\n+---------------------------+\n| XXXXXXXXXXXXXXX8268       |\n+---------------------------+\nmysql> SELECT mask_pan('a*Z');\n+-----------------+\n| mask_pan('a*Z') |\n+-----------------+\n| a*Z             |\n+-----------------+"], "Examples": ["mysql> SELECT mask_pan(gen_rnd_pan());\n+-------------------------+\n| mask_pan(gen_rnd_pan()) |\n+-------------------------+\n| XXXXXXXXXXXX9102        |\n+-------------------------+\nmysql> SELECT mask_pan(gen_rnd_pan(19));\n+---------------------------+\n| mask_pan(gen_rnd_pan(19)) |\n+---------------------------+\n| XXXXXXXXXXXXXXX8268       |\n+---------------------------+\nmysql> SELECT mask_pan('a*Z');\n+-----------------+\n| mask_pan('a*Z') |\n+-----------------+\n| a*Z             |\n+-----------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-plugin-functions.html#function_mask-pan-plugin"], "Feature Type": ["Function"], "index": 609, "vector_txt": "609:Feature: mask_pan(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["CONV(N,from_base,to_base)"], "Description": ["Convert numbers between different number bases", "\nCONV(N,from_base,to_base)\n", "\n            Converts numbers between different number bases. Returns a\n            string representation of the number\n            N, converted from base\n            from_base to base\n            to_base. Returns\n            NULL if any argument is\n            NULL. The argument\n            N is interpreted as an integer,\n            but may be specified as an integer or a string. The minimum\n            base is 2 and the maximum base is\n            36. If\n            from_base is a negative number,\n            N is regarded as a signed number.\n            Otherwise, N is treated as\n            unsigned. CONV() works with\n            64-bit precision.\n          ", "\nCONV() returns NULL if\n            any of its arguments are NULL.\n          ", "Press CTRL+C to copy mysql> SELECT CONV('a',16,2);\n        -> '1010'\nmysql> SELECT CONV('6E',18,8);\n        -> '172'\nmysql> SELECT CONV(-17,10,-18);\n        -> '-H'\nmysql> SELECT CONV(10+'10'+'10'+X'0a',10,10);\n        -> '40'"], "Examples": ["mysql> SELECT CONV('a',16,2);\n        -> '1010'\nmysql> SELECT CONV('6E',18,8);\n        -> '172'\nmysql> SELECT CONV(-17,10,-18);\n        -> '-H'\nmysql> SELECT CONV(10+'10'+'10'+X'0a',10,10);\n        -> '40'"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_conv"], "Feature Type": ["Function"], "index": 610, "vector_txt": "610:Feature: CONV(N,from_base,to_base)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference", "14.2 Loadable Function Reference"], "Feature": ["mask_pan_relaxed(str)"], "Description": ["Mask payment card Primary Account Number part of string", "\nmask_pan_relaxed(str)\n", "\n              Masks a payment card Primary Account Number and returns\n              the number with all but the first six and last four digits\n              replaced by 'X' characters. The first\n              six digits indicate the payment card issuer. An optional\n              masking character can be specified.\n            ", "\n              Arguments:\n", "\n\nstr: The string to mask.\n                  The string must be a suitable length for the Primary\n                  Account Number, but is not otherwise checked. This\n                  argument is converted to the\n                  utf8mb4 character set.\n                \nmask_char: (Optional) The\n                  single character to use for masking. The default is\n                  'X' if\n                  mask_char is not given.\n\n", "\n              Return value:\n            ", "\n              The masked payment number as a string encoded in the\n              utf8mb4 character set, an error if the\n              argument is not the correct length, or\n              NULL if str\n              is in incorrect format or contains a multibyte character.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_pan_relaxed(gen_rnd_pan());\n+---------------------------------+\n| mask_pan_relaxed(gen_rnd_pan()) |\n+---------------------------------+\n| 551279XXXXXX3108                |\n+---------------------------------+\nmysql> SELECT mask_pan_relaxed(gen_rnd_pan(19));\n+-----------------------------------+\n| mask_pan_relaxed(gen_rnd_pan(19)) |\n+-----------------------------------+\n| 462634XXXXXXXXX6739               |\n+-----------------------------------+\nmysql> SELECT mask_pan_relaxed('a*Z');\nERROR 1123 (HY000): Can't initialize function 'mask_pan_relaxed'; Argument 0 is too short."], "Examples": ["mysql> SELECT mask_pan_relaxed(gen_rnd_pan());\n+---------------------------------+\n| mask_pan_relaxed(gen_rnd_pan()) |\n+---------------------------------+\n| 551279XXXXXX3108                |\n+---------------------------------+\nmysql> SELECT mask_pan_relaxed(gen_rnd_pan(19));\n+-----------------------------------+\n| mask_pan_relaxed(gen_rnd_pan(19)) |\n+-----------------------------------+\n| 462634XXXXXXXXX6739               |\n+-----------------------------------+\nmysql> SELECT mask_pan_relaxed('a*Z');\nERROR 1123 (HY000): Can't initialize function 'mask_pan_relaxed'; Argument 0 is too short."], "Category": ["Loadable Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_mask-pan-relaxed"], "Feature Type": ["Function"], "index": 611, "vector_txt": "611:Feature: mask_pan_relaxed(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["mask_ssn(str\n              [, mask_char])"], "Description": ["Mask US Social Security Number", "\nmask_ssn(str\n              [, mask_char])\n", "\n              Masks a US Social Security Number (SSN) and returns the\n              number with all but the last four digits replaced by\n              '*' characters. An optional masking\n              character can be specified.\n            ", "\n              Arguments:\n", "\n\nstr: The string to mask.\n                  The accepted formats are:\n\n\n\n                      Nine non-separated digits.\n                    \n                      Nine digits grouped in pattern:\n                      xxx-xx-xxxx\n                      ('-' is any separator\n                      character).\n\n\n\n                  This argument is converted to the\n                  utf8mb4 character set.\n                \nmask_char: (Optional) The\n                  single character to use for masking. The default is\n                  '*' if\n                  mask_char is not given.\n\n", "\n              Return value:\n            ", "\n              The masked Social Security Number as a string encoded in\n              the utf8mb4 character set, an error if\n              the argument is not the correct length, or\n              NULL if str\n              is in incorrect format or contains a multibyte character.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_ssn('909-63-6922'), mask_ssn('cdefghijk');\n+-------------------------+-------------------------+\n| mask_ssn('909-63-6922') | mask_ssn('cdefghijk')   |\n+-------------------------+-------------------------+\n| ***-**-6922             | *******hijk             |\n+-------------------------+-------------------------+\nmysql> SELECT mask_ssn('909');\nERROR 1123 (HY000): Can't initialize function 'mask_ssn'; Argument 0 is too short.\nmysql> SELECT mask_ssn('123456789123456789');\nERROR 1123 (HY000): Can't initialize function 'mask_ssn'; Argument 0 is too long."], "Examples": ["mysql> SELECT mask_ssn('909-63-6922'), mask_ssn('cdefghijk');\n+-------------------------+-------------------------+\n| mask_ssn('909-63-6922') | mask_ssn('cdefghijk')   |\n+-------------------------+-------------------------+\n| ***-**-6922             | *******hijk             |\n+-------------------------+-------------------------+\nmysql> SELECT mask_ssn('909');\nERROR 1123 (HY000): Can't initialize function 'mask_ssn'; Argument 0 is too short.\nmysql> SELECT mask_ssn('123456789123456789');\nERROR 1123 (HY000): Can't initialize function 'mask_ssn'; Argument 0 is too long."], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_mask-ssn"], "Feature Type": ["Function"], "index": 612, "vector_txt": "612:Feature: mask_ssn(str\n              [, mask_char])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["mask_ssn(str)"], "Description": ["Mask US Social Security Number", "\nmask_ssn(str)\n", "\n              Masks a US Social Security number and returns the number\n              with all but the last four digits replaced by\n              'X' characters.\n            ", "\n              Arguments:\n", "\n\nstr: The string to mask.\n                  The string must be 11 characters long.\n\n", "\n              Return value:\n            ", "\n              The masked Social Security number as a string, or an error\n              if the argument is not the correct length.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_ssn('909-63-6922'), mask_ssn('abcdefghijk');\n+-------------------------+-------------------------+\n| mask_ssn('909-63-6922') | mask_ssn('abcdefghijk') |\n+-------------------------+-------------------------+\n| XXX-XX-6922             | XXX-XX-hijk             |\n+-------------------------+-------------------------+\nmysql> SELECT mask_ssn('909');\nERROR 1123 (HY000): Can't initialize function 'mask_ssn'; MASK_SSN: Error:\nString argument width too small\nmysql> SELECT mask_ssn('123456789123456789');\nERROR 1123 (HY000): Can't initialize function 'mask_ssn'; MASK_SSN: Error:\nString argument width too large"], "Examples": ["mysql> SELECT mask_ssn('909-63-6922'), mask_ssn('abcdefghijk');\n+-------------------------+-------------------------+\n| mask_ssn('909-63-6922') | mask_ssn('abcdefghijk') |\n+-------------------------+-------------------------+\n| XXX-XX-6922             | XXX-XX-hijk             |\n+-------------------------+-------------------------+\nmysql> SELECT mask_ssn('909');\nERROR 1123 (HY000): Can't initialize function 'mask_ssn'; MASK_SSN: Error:\nString argument width too small\nmysql> SELECT mask_ssn('123456789123456789');\nERROR 1123 (HY000): Can't initialize function 'mask_ssn'; MASK_SSN: Error:\nString argument width too large"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-plugin-functions.html#function_mask-ssn-plugin"], "Feature Type": ["Function"], "index": 613, "vector_txt": "613:Feature: mask_ssn(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["mask_uk_nin(str\n              [, mask_char])"], "Description": ["Mask United Kingdom National Insurance Number", "\nmask_uk_nin(str\n              [, mask_char])\n", "\n              Masks a United Kingdom National Insurance Number (UK NIN)\n              and returns the number with all but the first two digits\n              replaced by '*' characters. An optional\n              masking character can be specified.\n            ", "\n              Arguments:\n", "\n\nstr: The string to mask.\n                  The accepted formats are:\n\n\n\n                      Nine non-separated digits.\n                    \n                      Nine digits grouped in pattern:\n                      xxx-xx-xxxx\n                      ('-' is any separator\n                      character).\n                    \n                      Nine digits grouped in pattern:\n                      xx-xxxxxx-x\n                      ('-' is any separator\n                      character).\n\n\n\n                  This argument is converted to the\n                  utf8mb4 character set.\n                \nmask_char: (Optional) The\n                  single character to use for masking. The default is\n                  '*' if\n                  mask_char is not given.\n\n", "\n              Return value:\n            ", "\n              The masked UK NIN as a string encoded in the\n              utf8mb4 character set, an error if the\n              argument is not the correct length, or\n              NULL if str\n              is in incorrect format or contains a multibyte character.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_uk_nin('QQ 12 34 56 C'), mask_uk_nin('abcdefghi');\n+------------------------------+--------------------------+\n| mask_uk_nin('QQ 12 34 56 C') | mask_uk_nin('abcdefghi') |\n+------------------------------+--------------------------+\n| QQ ** ** ** *                | ab*******                |\n+------------------------------+--------------------------+\nmysql> SELECT mask_uk_nin('909');\nERROR 1123 (HY000): Can't initialize function 'mask_uk_nin'; Argument 0 is too short.\nmysql> SELECT mask_uk_nin('abcdefghijk');\nERROR 1123 (HY000): Can't initialize function 'mask_uk_nin'; Argument 0 is too long."], "Examples": ["mysql> SELECT mask_uk_nin('QQ 12 34 56 C'), mask_uk_nin('abcdefghi');\n+------------------------------+--------------------------+\n| mask_uk_nin('QQ 12 34 56 C') | mask_uk_nin('abcdefghi') |\n+------------------------------+--------------------------+\n| QQ ** ** ** *                | ab*******                |\n+------------------------------+--------------------------+\nmysql> SELECT mask_uk_nin('909');\nERROR 1123 (HY000): Can't initialize function 'mask_uk_nin'; Argument 0 is too short.\nmysql> SELECT mask_uk_nin('abcdefghijk');\nERROR 1123 (HY000): Can't initialize function 'mask_uk_nin'; Argument 0 is too long."], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_mask-uk-nin"], "Feature Type": ["Function"], "index": 614, "vector_txt": "614:Feature: mask_uk_nin(str\n              [, mask_char])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["mask_uuid(str\n              [, mask_char])"], "Description": ["Mask Universally Unique Identifier part of string", "\nmask_uuid(str\n              [, mask_char])\n", "\n              Masks a Universally Unique Identifier (UUID) and returns\n              the number with all meaningful characters replaced by\n              '*' characters. An optional masking\n              character can be specified.\n            ", "\n              Arguments:\n", "\n\nstr: The string to mask.\n                  The accepted format is\n                  xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n                  in which 'X' is any digit and\n                  '-' is any separator character This\n                  argument is converted to the\n                  utf8mb4 character set.\n                \nmask_char: (Optional) The\n                  single character to use for masking. The default is\n                  '*' if\n                  mask_char is not given.\n\n", "\n              Return value:\n            ", "\n              The masked UUID as a string encoded in the\n              utf8mb4 character set, an error if the\n              argument is not the correct length, or\n              NULL if str\n              is in incorrect format or contains a multibyte character.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT mask_uuid(gen_rnd_uuid());\n+--------------------------------------+\n| mask_uuid(gen_rnd_uuid())            |\n+--------------------------------------+\n| ********-****-****-****-************ |\n+--------------------------------------+\nmysql> SELECT mask_uuid('909');\nERROR 1123 (HY000): Can't initialize function 'mask_uuid'; Argument 0 is too short.\nmysql> SELECT mask_uuid('123e4567-e89b-12d3-a456-426614174000-123e4567-e89b-12d3');\nERROR 1123 (HY000): Can't initialize function 'mask_uuid'; Argument 0 is too long."], "Examples": ["mysql> SELECT mask_uuid(gen_rnd_uuid());\n+--------------------------------------+\n| mask_uuid(gen_rnd_uuid())            |\n+--------------------------------------+\n| ********-****-****-****-************ |\n+--------------------------------------+\nmysql> SELECT mask_uuid('909');\nERROR 1123 (HY000): Can't initialize function 'mask_uuid'; Argument 0 is too short.\nmysql> SELECT mask_uuid('123e4567-e89b-12d3-a456-426614174000-123e4567-e89b-12d3');\nERROR 1123 (HY000): Can't initialize function 'mask_uuid'; Argument 0 is too long."], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_mask-uuid"], "Feature Type": ["Function"], "index": 615, "vector_txt": "615:Feature: mask_uuid(str\n              [, mask_char])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["masking_dictionaries_flush()"], "Description": ["Cause masking_dictionaries cache to be reloaded from table", "\nmasking_dictionaries_flush()\n", "\n              Flush the data from the masking dictionaries table to the\n              memory cache. Requires the\n              MASKING_DICTIONARIES_ADMIN\n              privilege.\n            "], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_masking-dictionaries-flush"], "Feature Type": ["Function"], "index": 616, "vector_txt": "616:Feature: masking_dictionaries_flush()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["masking_dictionary_remove(dictionary_name)"], "Description": ["Remove dictionary from the database table", "\nmasking_dictionary_remove(dictionary_name)\n", "\n              Removes a dictionary and all of its terms from the\n              dictionary registry. This function requires the\n              MASKING_DICTIONARIES_ADMIN\n              privilege.\n            ", "\n              Arguments:\n", "\n\ndictionary_name: A string\n                  that names the dictionary to remove from the\n                  dictionary table. This argument is converted to the\n                  utf8mb4 character set.\n\n", "\n              Return value:\n            ", "\n              A string that indicates whether the remove operation\n              succeeded. 1 indicates success.\n              NULL indicates the dictionary name is\n              not found.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT masking_dictionary_remove('mydict');\n+-------------------------------------+\n| masking_dictionary_remove('mydict') |\n+-------------------------------------+\n|                                   1 |\n+-------------------------------------+\nmysql> SELECT masking_dictionary_remove('no-such-dict');\n+-------------------------------------------+\n| masking_dictionary_remove('no-such-dict') |\n+-------------------------------------------+\n|                                      NULL |\n+-------------------------------------------+"], "Examples": ["mysql> SELECT masking_dictionary_remove('mydict');\n+-------------------------------------+\n| masking_dictionary_remove('mydict') |\n+-------------------------------------+\n|                                   1 |\n+-------------------------------------+\nmysql> SELECT masking_dictionary_remove('no-such-dict');\n+-------------------------------------------+\n| masking_dictionary_remove('no-such-dict') |\n+-------------------------------------------+\n|                                      NULL |\n+-------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_masking-dictionary-remove"], "Feature Type": ["Function"], "index": 617, "vector_txt": "617:Feature: masking_dictionary_remove(dictionary_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["masking_dictionary_term_add(dictionary_name,\n              term_name)"], "Description": ["Add new term to the dictionary", "\nmasking_dictionary_term_add(dictionary_name,\n              term_name)\n", "\n              Adds one term to the named dictionary. This function\n              requires the\n              MASKING_DICTIONARIES_ADMIN\n              privilege.\n", "\n\nImportant\n\n\n                Dictionaries and their terms are persisted to a table in\n                the mysql schema. All of the terms in\n                a dictionary are accessible to any user account if that\n                user executes\n                gen_dictionary()\n                repeatedly. Avoid adding sensitive information to\n                dictionaries.\n\n", "\n              Each term is defined by a named dictionary.\n              masking_dictionary_term_add()\n              permits you to add one dictionary term at a time.\n            ", "\n              Arguments:\n", "\n\ndictionary_name: A string\n                  that provides a name for the dictionary. This argument\n                  is converted to the utf8mb4\n                  character set.\n                \nterm_name: A string that\n                  specifies the term name in the dictionary table. This\n                  argument is converted to the\n                  utf8mb4 character set.\n\n", "\n              Return value:\n            ", "\n              A string that indicates whether the add term operation\n              succeeded. 1 indicates success.\n              NULL indicates failure. Term add\n              failure can occur for several reasons, including:\n", "\n\n                  A term with the given name is already added.\n                \n                  The dictionary name is not found.\n\n", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT masking_dictionary_term_add('mydict','newterm');\n+-------------------------------------------------+\n| masking_dictionary_term_add('mydict','newterm') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT masking_dictionary_term_add('mydict','');\n+------------------------------------------+\n| masking_dictionary_term_add('mydict','') |\n+------------------------------------------+\n|                                     NULL |\n+------------------------------------------+"], "Examples": ["mysql> SELECT masking_dictionary_term_add('mydict','newterm');\n+-------------------------------------------------+\n| masking_dictionary_term_add('mydict','newterm') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT masking_dictionary_term_add('mydict','');\n+------------------------------------------+\n| masking_dictionary_term_add('mydict','') |\n+------------------------------------------+\n|                                     NULL |\n+------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_masking-dictionary-term-add"], "Feature Type": ["Function"], "index": 618, "vector_txt": "618:Feature: masking_dictionary_term_add(dictionary_name,\n              term_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["masking_dictionary_term_remove(dictionary_name,\n              term_name)"], "Description": ["Remove existing term from the dictionary", "\nmasking_dictionary_term_remove(dictionary_name,\n              term_name)\n", "\n              Removes one term from the named dictionary. This function\n              requires the\n              MASKING_DICTIONARIES_ADMIN\n              privilege.\n            ", "\n              Arguments:\n", "\n\ndictionary_name: A string\n                  that provides a name for the dictionary. This argument\n                  is converted to the utf8mb4\n                  character set.\n                \nterm_name: A string that\n                  specifies the term name in the dictionary table. This\n                  argument is converted to the\n                  utf8mb4 character set.\n\n", "\n              Return value:\n            ", "\n              A string that indicates whether the remove term operation\n              succeeded. 1 indicates success.\n              NULL indicates failure. Term remove\n              failure can occur for several reasons, including:\n", "\n\n                  A term with the given name is not found.\n                \n                  The dictionary name is not found.\n\n", "\n              Example:\n            ", "Press CTRL+C to copy mysql> SELECT masking_dictionary_term_add('mydict','newterm');\n+-------------------------------------------------+\n| masking_dictionary_term_add('mydict','newterm') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT masking_dictionary_term_remove('mydict','');\n+---------------------------------------------+\n| masking_dictionary_term_remove('mydict','') |\n+---------------------------------------------+\n|                                        NULL |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT masking_dictionary_term_add('mydict','newterm');\n+-------------------------------------------------+\n| masking_dictionary_term_add('mydict','newterm') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT masking_dictionary_term_remove('mydict','');\n+---------------------------------------------+\n| masking_dictionary_term_remove('mydict','') |\n+---------------------------------------------+\n|                                        NULL |\n+---------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/data-masking-component-functions.html#function_masking-dictionary-term-remove"], "Feature Type": ["Function"], "index": 619, "vector_txt": "619:Feature: masking_dictionary_term_remove(dictionary_name,\n              term_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["mysql_firewall_flush_status()"], "Description": ["Reset firewall status variables", "\nmysql_firewall_flush_status()\n", "\n              This function resets several firewall status variables to\n              0:\n", "\n\nFirewall_access_denied\n\nFirewall_access_granted\n\nFirewall_access_suspicious\n\n", "\n              This function requires the\n              FIREWALL_ADMIN privilege or\n              the deprecated SUPER\n              privilege.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT mysql_firewall_flush_status();"], "Examples": ["SELECT mysql_firewall_flush_status();"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/firewall-reference.html#function_mysql-firewall-flush-status"], "Feature Type": ["Function"], "index": 620, "vector_txt": "620:Feature: mysql_firewall_flush_status()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.10 Cast Functions and Operators"], "Feature": ["CONVERT(expr\n            USING transcoding_name)"], "Description": ["Cast a value as a certain type", "\nCONVERT(expr\n            USING transcoding_name)\n", "\nCONVERT(expr,type)\n", "\nCONVERT(expr\n            USING transcoding_name)\n            is standard SQL syntax. The non-USING\n            form of CONVERT() is ODBC\n            syntax. Regardless of the syntax used, the function returns\n            NULL if expr\n            is NULL.\n          ", "\nCONVERT(expr\n            USING transcoding_name)\n            converts data between different character sets. In MySQL,\n            transcoding names are the same as the corresponding\n            character set names. For example, this statement converts\n            the string 'abc' in the default character\n            set to the corresponding string in the\n            utf8mb4 character set:\n          ", "Press CTRL+C to copy SELECT CONVERT('abc' USING utf8mb4);", "\nCONVERT(expr,\n            type) syntax (without\n            USING) takes an expression and a\n            type value specifying a result\n            type, and produces a result value of the specified type.\n            This operation may also be expressed as\n            CAST(expr AS\n            type), which is\n            equivalent. For more information, see the description of\n            CAST().\n"], "Examples": ["SELECT CONVERT('abc' USING utf8mb4);"], "Category": ["Built-In Functions", "Cast Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html#function_convert"], "Feature Type": ["Function"], "index": 621, "vector_txt": "621:Feature: CONVERT(expr\n            USING transcoding_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["mysql_query_attribute_string(name)"], "Description": ["Fetch query attribute value", "\nmysql_query_attribute_string(name)\n", "\n            Applications can define attributes that apply to the next\n            query sent to the server. The\n            mysql_query_attribute_string()\n            function returns an attribute value as a string, given the\n            attribute name. This function enables a query to access and\n            incorporate values of the attributes that apply to it.\n          ", "\nmysql_query_attribute_string()\n            is installed by installing the\n            query_attributes component. See\n            Section\u00a011.6, \u201cQuery Attributes\u201d, which also discusses the\n            purpose and use of query attributes.\n          ", "\n            Arguments:\n", "\n\nname: The attribute name.\n\n", "\n            Return value:\n          ", "\n            Returns the attribute value as a string for success, or\n            NULL if the attribute does not exist.\n          ", "\n            Example:\n          ", "\n            The following example uses the mysql\n            client query_attributes command to define\n            query attributes that can be retrieved by\n            mysql_query_attribute_string().\n            The SELECT shows that retrieving a\n            nonexistent attribute (n3) returns\n            NULL.\n          ", "Press CTRL+C to copy mysql> query_attributes n1 v1 n2 v2;\nmysql> SELECT\n    ->   mysql_query_attribute_string('n1') AS 'attr 1',\n    ->   mysql_query_attribute_string('n2') AS 'attr 2',\n    ->   mysql_query_attribute_string('n3') AS 'attr 3';\n+--------+--------+--------+\n| attr 1 | attr 2 | attr 3 |\n+--------+--------+--------+\n| v1     | v2     | NULL   |\n+--------+--------+--------+"], "Examples": ["mysql> query_attributes n1 v1 n2 v2;\nmysql> SELECT\n    ->   mysql_query_attribute_string('n1') AS 'attr 1',\n    ->   mysql_query_attribute_string('n2') AS 'attr 2',\n    ->   mysql_query_attribute_string('n3') AS 'attr 3';\n+--------+--------+--------+\n| attr 1 | attr 2 | attr 3 |\n+--------+--------+--------+\n| v1     | v2     | NULL   |\n+--------+--------+--------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/query-attributes.html#function_mysql-query-attribute-string"], "Feature Type": ["Function"], "index": 622, "vector_txt": "622:Feature: mysql_query_attribute_string(name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["normalize_statement(stmt)"], "Description": ["Normalize SQL statement to digest form", "\nnormalize_statement(stmt)\n", "\n              This function normalizes an SQL statement into the digest\n              form used for allowlist rules. It requires the\n              FIREWALL_ADMIN privilege or\n              the deprecated SUPER\n              privilege.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT normalize_statement('SELECT * FROM t1 WHERE c1 > 2');", "\n\nNote\n\n\n                The same digest functionality is available outside\n                firewall context using the\n                STATEMENT_DIGEST_TEXT()\n                SQL function.\n\n"], "Examples": ["SELECT normalize_statement('SELECT * FROM t1 WHERE c1 > 2');"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/firewall-reference.html#function_normalize-statement"], "Feature Type": ["Function"], "index": 623, "vector_txt": "623:Feature: normalize_statement(stmt)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["read_firewall_group_allowlist(group,\n              rule)"], "Description": ["Update firewall group profile recorded-statement cache", "\nread_firewall_group_allowlist(group,\n              rule)\n", "\n              This aggregate function updates the recorded-statement\n              cache for the named group profile through a\n              SELECT statement on the\n              firewall-database.firewall_group_allowlist\n              table. It requires the\n              FIREWALL_ADMIN privilege.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT read_firewall_group_allowlist('my_fw_group', fgw.rule)\nFROM mysql.firewall_group_allowlist AS fgw\nWHERE NAME = 'my_fw_group';"], "Examples": ["SELECT read_firewall_group_allowlist('my_fw_group', fgw.rule)\nFROM mysql.firewall_group_allowlist AS fgw\nWHERE NAME = 'my_fw_group';"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/firewall-reference.html#function_read-firewall-group-allowlist"], "Feature Type": ["Function"], "index": 624, "vector_txt": "624:Feature: read_firewall_group_allowlist(group,\n              rule)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["read_firewall_groups(group,\n              mode,\n              user)"], "Description": ["Update firewall group profile cache", "\nread_firewall_groups(group,\n              mode,\n              user)\n", "\n              This aggregate function updates the firewall group profile\n              cache through a SELECT\n              statement on the\n              firewall-database.firewall_groups\n              table. It requires the\n              FIREWALL_ADMIN privilege.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT read_firewall_groups('g', 'RECORDING', 'fwuser@localhost')\nFROM mysql.firewall_groups;"], "Examples": ["SELECT read_firewall_groups('g', 'RECORDING', 'fwuser@localhost')\nFROM mysql.firewall_groups;"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/firewall-reference.html#function_read-firewall-groups"], "Feature Type": ["Function"], "index": 625, "vector_txt": "625:Feature: read_firewall_groups(group,\n              mode,\n              user)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["read_firewall_users(user,\n              mode)"], "Description": ["Update firewall account profile cache", "\nread_firewall_users(user,\n              mode)\n", "\n              This aggregate function updates the firewall account\n              profile cache through a SELECT\n              statement on the\n              firewall-database.firewall_users\n              table. It requires the\n              FIREWALL_ADMIN privilege or\n              the deprecated SUPER\n              privilege.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT read_firewall_users('fwuser@localhost', 'RECORDING')\nFROM mysql.firewall_users;", "\n              This function is deprecated, and subject to removal in a\n              future MySQL version. See\n              Migrating Account Profiles to Group Profiles.\n            "], "Examples": ["SELECT read_firewall_users('fwuser@localhost', 'RECORDING')\nFROM mysql.firewall_users;"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/firewall-reference.html#function_read-firewall-users"], "Feature Type": ["Function"], "index": 626, "vector_txt": "626:Feature: read_firewall_users(user,\n              mode)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["read_firewall_whitelist(user,\n              rule)"], "Description": ["Update firewall account profile recorded-statement cache", "\nread_firewall_whitelist(user,\n              rule)\n", "\n              This aggregate function updates the recorded-statement\n              cache for the named account profile through a\n              SELECT statement on the\n              firewall-database.firewall_whitelist\n              table. It requires the\n              FIREWALL_ADMIN privilege or\n              the deprecated SUPER\n              privilege.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT read_firewall_whitelist('fwuser@localhost', fw.rule)\nFROM mysql.firewall_whitelist AS fw\nWHERE USERHOST = 'fwuser@localhost';", "\n              This function is deprecated, and subject to removal in a\n              future MySQL version. See\n              Migrating Account Profiles to Group Profiles.\n            "], "Examples": ["SELECT read_firewall_whitelist('fwuser@localhost', fw.rule)\nFROM mysql.firewall_whitelist AS fw\nWHERE USERHOST = 'fwuser@localhost';"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/firewall-reference.html#function_read-firewall-whitelist"], "Feature Type": ["Function"], "index": 627, "vector_txt": "627:Feature: read_firewall_whitelist(user,\n              rule)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["service_get_read_locks(namespace,\n                lock_name[,\n                lock_name] ...,\n                timeout)"], "Description": ["Acquire locking service shared locks", "\nservice_get_read_locks(namespace,\n                lock_name[,\n                lock_name] ...,\n                timeout)\n", "\n                Acquires one or more read (shared) locks in the given\n                namespace using the given lock names, timing out with an\n                error if the locks are not acquired within the given\n                timeout value.\n              "], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-service.html#function_service-get-read-locks"], "Feature Type": ["Function"], "index": 628, "vector_txt": "628:Feature: service_get_read_locks(namespace,\n                lock_name[,\n                lock_name] ...,\n                timeout)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["service_get_write_locks(namespace,\n                lock_name[,\n                lock_name] ...,\n                timeout)"], "Description": ["Acquire locking service exclusive locks", "\nservice_get_write_locks(namespace,\n                lock_name[,\n                lock_name] ...,\n                timeout)\n", "\n                Acquires one or more write (exclusive) locks in the\n                given namespace using the given lock names, timing out\n                with an error if the locks are not acquired within the\n                given timeout value.\n              "], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-service.html#function_service-get-write-locks"], "Feature Type": ["Function"], "index": 629, "vector_txt": "629:Feature: service_get_write_locks(namespace,\n                lock_name[,\n                lock_name] ...,\n                timeout)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["service_release_locks(namespace)"], "Description": ["Release locking service locks", "\nservice_release_locks(namespace)\n", "\n                For the given namespace, releases all locks that were\n                acquired within the current session using\n                service_get_read_locks()\n                and\n                service_get_write_locks().\n              ", "\n                It is not an error for there to be no locks in the\n                namespace.\n"], "Examples": [], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-service.html#function_service-release-locks"], "Feature Type": ["Function"], "index": 630, "vector_txt": "630:Feature: service_release_locks(namespace)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["set_firewall_group_mode(group,\n              mode[,\n              user])"], "Description": ["Establish firewall group profile operational mode", "\nset_firewall_group_mode(group,\n              mode[,\n              user])\n", "\n              This function manages the group profile cache, establishes\n              the profile operational mode, and optionally specifies the\n              profile training account. It requires the\n              FIREWALL_ADMIN privilege.\n            ", "\n              If the optional user argument\n              is not given, any previous user\n              setting for the profile remains unchanged. To change the\n              setting, call the function with a third argument.\n            ", "\n              If the optional user argument\n              is given, it specifies the training account for the group\n              profile, to be used when the profile is in\n              RECORDING mode. The value is\n              NULL, or a non-NULL\n              account that has the format\n              user_name@host_name:\n", "\n\n                  If the value is NULL, the firewall\n                  records allowlist rules for statements received from\n                  any account that is a member of the group.\n                \n                  If the value is non-NULL, the\n                  firewall records allowlist rules only for statements\n                  received from the named account (which should be a\n                  member of the group).\n\n", "\n              Example:\n            ", "Press CTRL+C to copy SELECT set_firewall_group_mode('g', 'DETECTING');"], "Examples": ["SELECT set_firewall_group_mode('g', 'DETECTING');"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/firewall-reference.html#function_set-firewall-group-mode"], "Feature Type": ["Function"], "index": 631, "vector_txt": "631:Feature: set_firewall_group_mode(group,\n              mode[,\n              user])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CONVERT_TZ(dt,from_tz,to_tz)"], "Description": ["Convert from one time zone to another", "\nCONVERT_TZ(dt,from_tz,to_tz)\n", "\nCONVERT_TZ() converts a\n          datetime value dt from the time\n          zone given by from_tz to the time\n          zone given by to_tz and returns the\n          resulting value. Time zones are specified as described in\n          Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d. This function returns\n          NULL if any of the arguments are invalid,\n          or if any of them are NULL.\n        ", "\n          On 32-bit platforms, the supported range of values for this\n          function is the same as for the\n          TIMESTAMP type (see\n          Section\u00a013.2.1, \u201cDate and Time Data Type Syntax\u201d, for range\n          information). On 64-bit platforms, the maximum supported value\n          is '3001-01-18 23:59:59.999999' UTC.\n        ", "\n          Regardless of platform or MySQL version, if the value falls\n          out of the supported range when converted from\n          from_tz to UTC, no conversion\n          occurs.\n        ", "Press CTRL+C to copy mysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n        -> '2004-01-01 13:00:00'\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n        -> '2004-01-01 22:00:00'", "\n\nNote\n\n\n            To use named time zones such as 'MET' or\n            'Europe/Amsterdam', the time zone tables\n            must be properly set up. For instructions, see\n            Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.\n\n"], "Examples": ["mysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n        -> '2004-01-01 13:00:00'\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n        -> '2004-01-01 22:00:00'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_convert-tz"], "Feature Type": ["Function"], "index": 632, "vector_txt": "632:Feature: CONVERT_TZ(dt,from_tz,to_tz)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["set_firewall_mode(user,\n              mode)"], "Description": ["Establish firewall account profile operational mode", "\nset_firewall_mode(user,\n              mode)\n", "\n              This function manages the account profile cache and\n              establishes the profile operational mode. It requires the\n              FIREWALL_ADMIN privilege or\n              the deprecated SUPER\n              privilege.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT set_firewall_mode('fwuser@localhost', 'RECORDING');", "\n              This function is deprecated, and subject to removal in a\n              future MySQL version. See\n              Migrating Account Profiles to Group Profiles.\n"], "Examples": ["SELECT set_firewall_mode('fwuser@localhost', 'RECORDING');"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/firewall-reference.html#function_set-firewall-mode"], "Feature Type": ["Function"], "index": 633, "vector_txt": "633:Feature: set_firewall_mode(user,\n              mode)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["version_tokens_delete(name_list)"], "Description": ["Delete tokens from version tokens list", "\nversion_tokens_delete(name_list)\n", "\n              Deletes tokens from the server's list of version tokens\n              using the name_list argument\n              and returns a binary string that indicates the outcome of\n              the operation. name_list is a\n              semicolon-separated list of version token names to delete.\n            ", "Press CTRL+C to copy mysql> SELECT version_tokens_delete('tok1;tok3');\n+------------------------------------+\n| version_tokens_delete('tok1;tok3') |\n+------------------------------------+\n| 2 version tokens deleted.          |\n+------------------------------------+", "\n              An argument of NULL is treated as an\n              empty string, which has no effect on the token list.\n            ", "\nversion_tokens_delete()\n              deletes the tokens named in its argument, if they exist.\n              (It is not an error to delete nonexisting tokens.) To\n              clear the token list entirely without knowing which tokens\n              are in the list, pass NULL or a string\n              containing no tokens to\n              version_tokens_set():\n            ", "Press CTRL+C to copy mysql> SELECT version_tokens_set(NULL);\n+------------------------------+\n| version_tokens_set(NULL)     |\n+------------------------------+\n| Version tokens list cleared. |\n+------------------------------+\nmysql> SELECT version_tokens_set('');\n+------------------------------+\n| version_tokens_set('')       |\n+------------------------------+\n| Version tokens list cleared. |\n+------------------------------+"], "Examples": ["mysql> SELECT version_tokens_delete('tok1;tok3');\n+------------------------------------+\n| version_tokens_delete('tok1;tok3') |\n+------------------------------------+\n| 2 version tokens deleted.          |\n+------------------------------------+", "mysql> SELECT version_tokens_set(NULL);\n+------------------------------+\n| version_tokens_set(NULL)     |\n+------------------------------+\n| Version tokens list cleared. |\n+------------------------------+\nmysql> SELECT version_tokens_set('');\n+------------------------------+\n| version_tokens_set('')       |\n+------------------------------+\n| Version tokens list cleared. |\n+------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/version-tokens-reference.html#function_version-tokens-delete"], "Feature Type": ["Function"], "index": 634, "vector_txt": "634:Feature: version_tokens_delete(name_list)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["version_tokens_edit(token_list)"], "Description": ["Modify version tokens list", "\nversion_tokens_edit(token_list)\n", "\n              Modifies the server's list of version tokens using the\n              token_list argument and returns\n              a binary string that indicates the outcome of the\n              operation. token_list is a\n              semicolon-separated list of\n              name=value\n              pairs specifying the name of each token to be defined and\n              its value. If a token exists, its value is updated with\n              the given value. If a token does not exist, it is created\n              with the given value. If the argument is\n              NULL or a string containing no tokens,\n              the token list remains unchanged.\n            ", "Press CTRL+C to copy mysql> SELECT version_tokens_set('tok1=value1;tok2=value2');\n+-----------------------------------------------+\n| version_tokens_set('tok1=value1;tok2=value2') |\n+-----------------------------------------------+\n| 2 version tokens set.                         |\n+-----------------------------------------------+\nmysql> SELECT version_tokens_edit('tok2=new_value2;tok3=new_value3');\n+--------------------------------------------------------+\n| version_tokens_edit('tok2=new_value2;tok3=new_value3') |\n+--------------------------------------------------------+\n| 2 version tokens updated.                              |\n+--------------------------------------------------------+"], "Examples": ["mysql> SELECT version_tokens_set('tok1=value1;tok2=value2');\n+-----------------------------------------------+\n| version_tokens_set('tok1=value1;tok2=value2') |\n+-----------------------------------------------+\n| 2 version tokens set.                         |\n+-----------------------------------------------+\nmysql> SELECT version_tokens_edit('tok2=new_value2;tok3=new_value3');\n+--------------------------------------------------------+\n| version_tokens_edit('tok2=new_value2;tok3=new_value3') |\n+--------------------------------------------------------+\n| 2 version tokens updated.                              |\n+--------------------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/version-tokens-reference.html#function_version-tokens-edit"], "Feature Type": ["Function"], "index": 635, "vector_txt": "635:Feature: version_tokens_edit(token_list)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["version_tokens_lock_exclusive(token_name[,\n              token_name] ...,\n              timeout)"], "Description": ["Acquire exclusive locks on version tokens", "\nversion_tokens_lock_exclusive(token_name[,\n              token_name] ...,\n              timeout)\n", "\n              Acquires exclusive locks on one or more version tokens,\n              specified by name as strings, timing out with an error if\n              the locks are not acquired within the given timeout value.\n            ", "Press CTRL+C to copy mysql> SELECT version_tokens_lock_exclusive('lock1', 'lock2', 10);\n+-----------------------------------------------------+\n| version_tokens_lock_exclusive('lock1', 'lock2', 10) |\n+-----------------------------------------------------+\n|                                                   1 |\n+-----------------------------------------------------+"], "Examples": ["mysql> SELECT version_tokens_lock_exclusive('lock1', 'lock2', 10);\n+-----------------------------------------------------+\n| version_tokens_lock_exclusive('lock1', 'lock2', 10) |\n+-----------------------------------------------------+\n|                                                   1 |\n+-----------------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/version-tokens-reference.html#function_version-tokens-lock-exclusive"], "Feature Type": ["Function"], "index": 636, "vector_txt": "636:Feature: version_tokens_lock_exclusive(token_name[,\n              token_name] ...,\n              timeout)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["version_tokens_lock_shared(token_name[,\n              token_name] ...,\n              timeout)"], "Description": ["Acquire shared locks on version tokens", "\nversion_tokens_lock_shared(token_name[,\n              token_name] ...,\n              timeout)\n", "\n              Acquires shared locks on one or more version tokens,\n              specified by name as strings, timing out with an error if\n              the locks are not acquired within the given timeout value.\n            ", "Press CTRL+C to copy mysql> SELECT version_tokens_lock_shared('lock1', 'lock2', 10);\n+--------------------------------------------------+\n| version_tokens_lock_shared('lock1', 'lock2', 10) |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+"], "Examples": ["mysql> SELECT version_tokens_lock_shared('lock1', 'lock2', 10);\n+--------------------------------------------------+\n| version_tokens_lock_shared('lock1', 'lock2', 10) |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/version-tokens-reference.html#function_version-tokens-lock-shared"], "Feature Type": ["Function"], "index": 637, "vector_txt": "637:Feature: version_tokens_lock_shared(token_name[,\n              token_name] ...,\n              timeout)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["version_tokens_set(token_list)"], "Description": ["Set version tokens list", "\nversion_tokens_set(token_list)\n", "\n              Replaces the server's list of version tokens with the\n              tokens defined in the\n              token_list argument and returns\n              a binary string that indicates the outcome of the\n              operation. token_list is a\n              semicolon-separated list of\n              name=value\n              pairs specifying the name of each token to be defined and\n              its value. If the argument is NULL or a\n              string containing no tokens, the token list is cleared.\n            ", "Press CTRL+C to copy mysql> SELECT version_tokens_set('tok1=value1;tok2=value2');\n+-----------------------------------------------+\n| version_tokens_set('tok1=value1;tok2=value2') |\n+-----------------------------------------------+\n| 2 version tokens set.                         |\n+-----------------------------------------------+"], "Examples": ["mysql> SELECT version_tokens_set('tok1=value1;tok2=value2');\n+-----------------------------------------------+\n| version_tokens_set('tok1=value1;tok2=value2') |\n+-----------------------------------------------+\n| 2 version tokens set.                         |\n+-----------------------------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/version-tokens-reference.html#function_version-tokens-set"], "Feature Type": ["Function"], "index": 638, "vector_txt": "638:Feature: version_tokens_set(token_list)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["version_tokens_show()"], "Description": ["Return version tokens list", "\nversion_tokens_show()\n", "\n              Returns the server's list of version tokens as a binary\n              string containing a semicolon-separated list of\n              name=value\n              pairs.\n            ", "Press CTRL+C to copy mysql> SELECT version_tokens_show();\n+--------------------------+\n| version_tokens_show()    |\n+--------------------------+\n| tok2=value2;tok1=value1; |\n+--------------------------+"], "Examples": ["mysql> SELECT version_tokens_show();\n+--------------------------+\n| version_tokens_show()    |\n+--------------------------+\n| tok2=value2;tok1=value1; |\n+--------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/version-tokens-reference.html#function_version-tokens-show"], "Feature Type": ["Function"], "index": 639, "vector_txt": "639:Feature: version_tokens_show()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.2 Loadable Function Reference"], "Feature": ["version_tokens_unlock()"], "Description": ["Release version tokens locks", "\nversion_tokens_unlock()\n", "\n              Releases all locks that were acquired within the current\n              session using\n              version_tokens_lock_exclusive()\n              and\n              version_tokens_lock_shared().\n            ", "Press CTRL+C to copy mysql> SELECT version_tokens_unlock();\n+-------------------------+\n| version_tokens_unlock() |\n+-------------------------+\n|                       1 |\n+-------------------------+"], "Examples": ["mysql> SELECT version_tokens_unlock();\n+-------------------------+\n| version_tokens_unlock() |\n+-------------------------+\n|                       1 |\n+-------------------------+"], "Category": ["Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/version-tokens-reference.html#function_version-tokens-unlock"], "Feature Type": ["Function"], "index": 640, "vector_txt": "640:Feature: version_tokens_unlock()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.14 Locking Functions"], "Feature": ["GET_LOCK(str,timeout)"], "Description": ["Get a named lock", "\nGET_LOCK(str,timeout)\n", "\n          Tries to obtain a lock with a name given by the string\n          str, using a timeout of\n          timeout seconds. A negative\n          timeout value means infinite\n          timeout. The lock is exclusive. While held by one session,\n          other sessions cannot obtain a lock of the same name.\n        ", "\n          Returns 1 if the lock was obtained\n          successfully, 0 if the attempt timed out\n          (for example, because another client has previously locked the\n          name), or NULL if an error occurred (such\n          as running out of memory or the thread was killed with\n          mysqladmin kill).\n        ", "\n          A lock obtained with GET_LOCK()\n          is released explicitly by executing\n          RELEASE_LOCK() or implicitly\n          when your session terminates (either normally or abnormally).\n          Locks obtained with GET_LOCK()\n          are not released when transactions commit or roll back.\n        ", "\nGET_LOCK() is implemented using\n          the metadata locking (MDL) subsystem. Multiple simultaneous\n          locks can be acquired and\n          GET_LOCK() does not release any\n          existing locks. For example, suppose that you execute these\n          statements:\n        ", "Press CTRL+C to copy SELECT GET_LOCK('lock1',10);\nSELECT GET_LOCK('lock2',10);\nSELECT RELEASE_LOCK('lock2');\nSELECT RELEASE_LOCK('lock1');", "\n          The second GET_LOCK() acquires\n          a second lock and both\n          RELEASE_LOCK() calls return 1\n          (success).\n        ", "\n          It is even possible for a given session to acquire multiple\n          locks for the same name. Other sessions cannot acquire a lock\n          with that name until the acquiring session releases all its\n          locks for the name.\n        ", "\n          Uniquely named locks acquired with\n          GET_LOCK() appear in the\n          Performance Schema metadata_locks\n          table. The OBJECT_TYPE column says\n          USER LEVEL LOCK and the\n          OBJECT_NAME column indicates the lock name.\n          In the case that multiple locks are acquired for the\n          same name, only the first lock for the\n          name registers a row in the\n          metadata_locks table. Subsequent\n          locks for the name increment a counter in the lock but do not\n          acquire additional metadata locks. The\n          metadata_locks row for the lock\n          is deleted when the last lock instance on the name is\n          released.\n        ", "\n          The capability of acquiring multiple locks means there is the\n          possibility of deadlock among clients. When this happens, the\n          server chooses a caller and terminates its lock-acquisition\n          request with an\n          ER_USER_LOCK_DEADLOCK error.\n          This error does not cause transactions to roll back.\n        ", "\n          MySQL enforces a maximum length on lock names of 64\n          characters.\n        ", "\nGET_LOCK() can be used to\n          implement application locks or to simulate record locks. Names\n          are locked on a server-wide basis. If a name has been locked\n          within one session, GET_LOCK()\n          blocks any request by another session for a lock with the same\n          name. This enables clients that agree on a given lock name to\n          use the name to perform cooperative advisory locking. But be\n          aware that it also enables a client that is not among the set\n          of cooperating clients to lock a name, either inadvertently or\n          deliberately, and thus prevent any of the cooperating clients\n          from locking that name. One way to reduce the likelihood of\n          this is to use lock names that are database-specific or\n          application-specific. For example, use lock names of the form\n          db_name.str or\n          app_name.str.\n        ", "\n          If multiple clients are waiting for a lock, the order in which\n          they acquire it is undefined. Applications should not assume\n          that clients acquire the lock in the same order that they\n          issued the lock requests.\n        ", "\nGET_LOCK() is unsafe for\n          statement-based replication. A warning is logged if you use\n          this function when\n          binlog_format is set to\n          STATEMENT.\n        ", "\n          Since GET_LOCK() establishes a lock only on\n          a single mysqld, it is not suitable for use\n          with NDB Cluster, which has no way of enforcing an SQL lock\n          across multiple MySQL servers. See\n          Section\u00a025.2.7.10, \u201cLimitations Relating to Multiple NDB Cluster Nodes\u201d,\n          for more information.\n", "\n\nCaution\n\n\n            With the capability of acquiring multiple named locks, it is\n            possible for a single statement to acquire a large number of\n            locks. For example:\n          Press CTRL+C to copy INSERT INTO ... SELECT GET_LOCK(t1.col_name) FROM t1;\n            These types of statements may have certain adverse effects.\n            For example, if the statement fails part way through and\n            rolls back, locks acquired up to the point of failure still\n            exist. If the intent is for there to be a correspondence\n            between rows inserted and locks acquired, that intent is not\n            satisfied. Also, if it is important that locks are granted\n            in a certain order, be aware that result set order may\n            differ depending on which execution plan the optimizer\n            chooses. For these reasons, it may be best to limit\n            applications to a single lock-acquisition call per\n            statement.\n\n", "\n          A different locking interface is available as either a plugin\n          service or a set of loadable functions. This interface\n          provides lock namespaces and distinct read and write locks,\n          unlike the interface provided by\n          GET_LOCK() and related\n          functions. For details, see Section\u00a07.6.9.1, \u201cThe Locking Service\u201d.\n        "], "Examples": ["SELECT GET_LOCK('lock1',10);\nSELECT GET_LOCK('lock2',10);\nSELECT RELEASE_LOCK('lock2');\nSELECT RELEASE_LOCK('lock1');", "INSERT INTO ... SELECT GET_LOCK(t1.col_name) FROM t1;"], "Category": ["Built-In Functions", "Locking Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_get-lock"], "Feature Type": ["Function"], "index": 641, "vector_txt": "641:Feature: GET_LOCK(str,timeout)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.14 Locking Functions"], "Feature": ["IS_FREE_LOCK(str)"], "Description": ["Whether the named lock is free", "\nIS_FREE_LOCK(str)\n", "\n          Checks whether the lock named str\n          is free to use (that is, not locked). Returns\n          1 if the lock is free (no one is using the\n          lock), 0 if the lock is in use, and\n          NULL if an error occurs (such as an\n          incorrect argument).\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": [], "Category": ["Built-In Functions", "Locking Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_is-free-lock"], "Feature Type": ["Function"], "index": 642, "vector_txt": "642:Feature: IS_FREE_LOCK(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["COS(X)"], "Description": ["Return the cosine", "\nCOS(X)\n", "\n            Returns the cosine of X, where\n            X is given in radians. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT COS(PI());\n        -> -1"], "Examples": ["mysql> SELECT COS(PI());\n        -> -1"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_cos"], "Feature Type": ["Function"], "index": 643, "vector_txt": "643:Feature: COS(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.14 Locking Functions"], "Feature": ["IS_USED_LOCK(str)"], "Description": ["Whether the named lock is in use; return connection identifier if", "\nIS_USED_LOCK(str)\n", "\n          Checks whether the lock named str\n          is in use (that is, locked). If so, it returns the connection\n          identifier of the client session that holds the lock.\n          Otherwise, it returns NULL.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": [], "Category": ["Built-In Functions", "Locking Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_is-used-lock"], "Feature Type": ["Function"], "index": 644, "vector_txt": "644:Feature: IS_USED_LOCK(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.14 Locking Functions"], "Feature": ["RELEASE_ALL_LOCKS()"], "Description": ["Release all current named locks", "\nRELEASE_ALL_LOCKS()\n", "\n          Releases all named locks held by the current session and\n          returns the number of locks released (0 if there were none)\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": [], "Category": ["Built-In Functions", "Locking Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_release-all-locks"], "Feature Type": ["Function"], "index": 645, "vector_txt": "645:Feature: RELEASE_ALL_LOCKS()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.14 Locking Functions"], "Feature": ["RELEASE_LOCK(str)"], "Description": ["Release the named lock", "\nRELEASE_LOCK(str)\n", "\n          Releases the lock named by the string\n          str that was obtained with\n          GET_LOCK(). Returns\n          1 if the lock was released,\n          0 if the lock was not established by this\n          thread (in which case the lock is not released), and\n          NULL if the named lock did not exist. The\n          lock does not exist if it was never obtained by a call to\n          GET_LOCK() or if it has\n          previously been released.\n        ", "\n          The DO statement is convenient\n          to use with RELEASE_LOCK(). See\n          Section\u00a015.2.3, \u201cDO Statement\u201d.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n"], "Examples": [], "Category": ["Built-In Functions", "Locking Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_release-lock"], "Feature Type": ["Function"], "index": 646, "vector_txt": "646:Feature: RELEASE_LOCK(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ABS(X)"], "Description": ["Return the absolute value", "\nABS(X)\n", "\n            Returns the absolute value of X,\n            or NULL if X\n            is NULL.\n          ", "\n            The result type is derived from the argument type. An\n            implication of this is that\n            ABS(-9223372036854775808)\n            produces an error because the result cannot be stored in a\n            signed BIGINT value.\n          ", "Press CTRL+C to copy mysql> SELECT ABS(2);\n        -> 2\nmysql> SELECT ABS(-32);\n        -> 32", "\n            This function is safe to use with\n            BIGINT values.\n          "], "Examples": ["mysql> SELECT ABS(2);\n        -> 2\nmysql> SELECT ABS(-32);\n        -> 32"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_abs"], "Feature Type": ["Function"], "index": 647, "vector_txt": "647:Feature: ABS(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ACOS(X)"], "Description": ["Return the arc cosine", "\nACOS(X)\n", "\n            Returns the arc cosine of X, that\n            is, the value whose cosine is X.\n            Returns NULL if\n            X is not in the range\n            -1 to 1, or if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ACOS(1);\n        -> 0\nmysql> SELECT ACOS(1.0001);\n        -> NULL\nmysql> SELECT ACOS(0);\n        -> 1.5707963267949"], "Examples": ["mysql> SELECT ACOS(1);\n        -> 0\nmysql> SELECT ACOS(1.0001);\n        -> NULL\nmysql> SELECT ACOS(0);\n        -> 1.5707963267949"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_acos"], "Feature Type": ["Function"], "index": 648, "vector_txt": "648:Feature: ACOS(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ASIN(X)"], "Description": ["Return the arc sine", "\nASIN(X)\n", "\n            Returns the arc sine of X, that\n            is, the value whose sine is X.\n            Returns NULL if\n            X is not in the range\n            -1 to 1, or if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ASIN(0.2);\n        -> 0.20135792079033\nmysql> SELECT ASIN('foo');\n\n+-------------+\n| ASIN('foo') |\n+-------------+\n|           0 |\n+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-----------------------------------------+\n| Level   | Code | Message                                 |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'foo' |\n+---------+------+-----------------------------------------+"], "Examples": ["mysql> SELECT ASIN(0.2);\n        -> 0.20135792079033\nmysql> SELECT ASIN('foo');\n\n+-------------+\n| ASIN('foo') |\n+-------------+\n|           0 |\n+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-----------------------------------------+\n| Level   | Code | Message                                 |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'foo' |\n+---------+------+-----------------------------------------+"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_asin"], "Feature Type": ["Function"], "index": 649, "vector_txt": "649:Feature: ASIN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ATAN(X)"], "Description": ["Return the arc tangent", "\nATAN(X)\n", "\n            Returns the arc tangent of X,\n            that is, the value whose tangent is\n            X. Returns\n            NULL if\n            X is NULL\n", "Press CTRL+C to copy mysql> SELECT ATAN(2);\n        -> 1.1071487177941\nmysql> SELECT ATAN(-2);\n        -> -1.1071487177941"], "Examples": ["mysql> SELECT ATAN(2);\n        -> 1.1071487177941\nmysql> SELECT ATAN(-2);\n        -> -1.1071487177941"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_atan"], "Feature Type": ["Function"], "index": 650, "vector_txt": "650:Feature: ATAN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ATAN(Y,X)"], "Description": ["Return the arc tangent of the two arguments", "\nATAN(Y,X),\n            ATAN2(Y,X)\n", "\n            Returns the arc tangent of the two variables\n            X and\n            Y. It is similar to calculating\n            the arc tangent of Y /\n            X, except that the\n            signs of both arguments are used to determine the quadrant\n            of the result. Returns NULL if\n            X or Y\n            is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ATAN(-2,2);\n        -> -0.78539816339745\nmysql> SELECT ATAN2(PI(),0);\n        -> 1.5707963267949"], "Examples": ["mysql> SELECT ATAN(-2,2);\n        -> -0.78539816339745\nmysql> SELECT ATAN2(PI(),0);\n        -> 1.5707963267949"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_atan2"], "Feature Type": ["Function"], "index": 651, "vector_txt": "651:Feature: ATAN(Y,X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["CEIL(X)"], "Description": ["Return the smallest integer value not less than the argument", "\nCEIL(X)\n", "\nCEIL() is a synonym for\n            CEILING().\n          "], "Examples": [], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ceil"], "Feature Type": ["Function"], "index": 652, "vector_txt": "652:Feature: CEIL(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["CEILING(X)"], "Description": ["Return the smallest integer value not less than the argument", "\nCEILING(X)\n", "\n            Returns the smallest integer value not less than\n            X. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT CEILING(1.23);\n        -> 2\nmysql> SELECT CEILING(-1.23);\n        -> -1", "\n            For exact-value numeric arguments, the return value has an\n            exact-value numeric type. For string or floating-point\n            arguments, the return value has a floating-point type.\n          "], "Examples": ["mysql> SELECT CEILING(1.23);\n        -> 2\nmysql> SELECT CEILING(-1.23);\n        -> -1"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ceiling"], "Feature Type": ["Function"], "index": 653, "vector_txt": "653:Feature: CEILING(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["COT(X)"], "Description": ["Return the cotangent", "\nCOT(X)\n", "\n            Returns the cotangent of X.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT COT(12);\n        -> -1.5726734063977\nmysql> SELECT COT(0);\n        -> out-of-range error"], "Examples": ["mysql> SELECT COT(12);\n        -> -1.5726734063977\nmysql> SELECT COT(0);\n        -> out-of-range error"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_cot"], "Feature Type": ["Function"], "index": 654, "vector_txt": "654:Feature: COT(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["CONV(N,from_base,to_base)"], "Description": ["Convert numbers between different number bases", "\nCONV(N,from_base,to_base)\n", "\n            Converts numbers between different number bases. Returns a\n            string representation of the number\n            N, converted from base\n            from_base to base\n            to_base. Returns\n            NULL if any argument is\n            NULL. The argument\n            N is interpreted as an integer,\n            but may be specified as an integer or a string. The minimum\n            base is 2 and the maximum base is\n            36. If\n            from_base is a negative number,\n            N is regarded as a signed number.\n            Otherwise, N is treated as\n            unsigned. CONV() works with\n            64-bit precision.\n          ", "\nCONV() returns NULL if\n            any of its arguments are NULL.\n          ", "Press CTRL+C to copy mysql> SELECT CONV('a',16,2);\n        -> '1010'\nmysql> SELECT CONV('6E',18,8);\n        -> '172'\nmysql> SELECT CONV(-17,10,-18);\n        -> '-H'\nmysql> SELECT CONV(10+'10'+'10'+X'0a',10,10);\n        -> '40'"], "Examples": ["mysql> SELECT CONV('a',16,2);\n        -> '1010'\nmysql> SELECT CONV('6E',18,8);\n        -> '172'\nmysql> SELECT CONV(-17,10,-18);\n        -> '-H'\nmysql> SELECT CONV(10+'10'+'10'+X'0a',10,10);\n        -> '40'"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_conv"], "Feature Type": ["Function"], "index": 655, "vector_txt": "655:Feature: CONV(N,from_base,to_base)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["COS(X)"], "Description": ["Return the cosine", "\nCOS(X)\n", "\n            Returns the cosine of X, where\n            X is given in radians. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT COS(PI());\n        -> -1"], "Examples": ["mysql> SELECT COS(PI());\n        -> -1"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_cos"], "Feature Type": ["Function"], "index": 656, "vector_txt": "656:Feature: COS(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["COT(X)"], "Description": ["Return the cotangent", "\nCOT(X)\n", "\n            Returns the cotangent of X.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT COT(12);\n        -> -1.5726734063977\nmysql> SELECT COT(0);\n        -> out-of-range error"], "Examples": ["mysql> SELECT COT(12);\n        -> -1.5726734063977\nmysql> SELECT COT(0);\n        -> out-of-range error"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_cot"], "Feature Type": ["Function"], "index": 657, "vector_txt": "657:Feature: COT(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["CRC32(expr)"], "Description": ["Compute a cyclic redundancy check value", "\nCRC32(expr)\n", "\n            Computes a cyclic redundancy check value and returns a\n            32-bit unsigned value. The result is NULL\n            if the argument is NULL. The argument is\n            expected to be a string and (if possible) is treated as one\n            if it is not.\n          ", "Press CTRL+C to copy mysql> SELECT CRC32('MySQL');\n        -> 3259397556\nmysql> SELECT CRC32('mysql');\n        -> 2501908538"], "Examples": ["mysql> SELECT CRC32('MySQL');\n        -> 3259397556\nmysql> SELECT CRC32('mysql');\n        -> 2501908538"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_crc32"], "Feature Type": ["Function"], "index": 658, "vector_txt": "658:Feature: CRC32(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["DEGREES(X)"], "Description": ["Convert radians to degrees", "\nDEGREES(X)\n", "\n            Returns the argument X, converted\n            from radians to degrees. Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT DEGREES(PI());\n        -> 180\nmysql> SELECT DEGREES(PI() / 2);\n        -> 90"], "Examples": ["mysql> SELECT DEGREES(PI());\n        -> 180\nmysql> SELECT DEGREES(PI() / 2);\n        -> 90"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_degrees"], "Feature Type": ["Function"], "index": 659, "vector_txt": "659:Feature: DEGREES(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["EXP(X)"], "Description": ["Raise to the power of", "\nEXP(X)\n", "\n            Returns the value of e (the base of\n            natural logarithms) raised to the power of\n            X. The inverse of this function\n            is LOG() (using a single\n            argument only) or LN().\n          ", "\n            If X is NULL,\n            this function returns NULL.\n          ", "Press CTRL+C to copy mysql> SELECT EXP(2);\n        -> 7.3890560989307\nmysql> SELECT EXP(-2);\n        -> 0.13533528323661\nmysql> SELECT EXP(0);\n        -> 1"], "Examples": ["mysql> SELECT EXP(2);\n        -> 7.3890560989307\nmysql> SELECT EXP(-2);\n        -> 0.13533528323661\nmysql> SELECT EXP(0);\n        -> 1"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_exp"], "Feature Type": ["Function"], "index": 660, "vector_txt": "660:Feature: EXP(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["FLOOR(X)"], "Description": ["Return the largest integer value not greater than the argument", "\nFLOOR(X)\n", "\n            Returns the largest integer value not greater than\n            X. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT FLOOR(1.23), FLOOR(-1.23);\n        -> 1, -2", "\n            For exact-value numeric arguments, the return value has an\n            exact-value numeric type. For string or floating-point\n            arguments, the return value has a floating-point type.\n          "], "Examples": ["mysql> SELECT FLOOR(1.23), FLOOR(-1.23);\n        -> 1, -2"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_floor"], "Feature Type": ["Function"], "index": 661, "vector_txt": "661:Feature: FLOOR(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["LN(X)"], "Description": ["Return the natural logarithm of the argument", "\nLN(X)\n", "\n            Returns the natural logarithm of\n            X; that is, the\n            base-e logarithm of\n            X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT LN(2);\n        -> 0.69314718055995\nmysql> SELECT LN(-2);\n        -> NULL", "\n            This function is synonymous with\n            LOG(X).\n            The inverse of this function is the\n            EXP() function.\n          "], "Examples": ["mysql> SELECT LN(2);\n        -> 0.69314718055995\nmysql> SELECT LN(-2);\n        -> NULL"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ln"], "Feature Type": ["Function"], "index": 662, "vector_txt": "662:Feature: LN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["LOG(X)"], "Description": ["Return the natural logarithm of the first argument", "\nLOG(X),\n            LOG(B,X)\n", "\n            If called with one parameter, this function returns the\n            natural logarithm of X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X or B\n            is NULL.\n          ", "\n            The inverse of this function (when called with a single\n            argument) is the EXP()\n            function.\n          ", "Press CTRL+C to copy mysql> SELECT LOG(2);\n        -> 0.69314718055995\nmysql> SELECT LOG(-2);\n        -> NULL", "\n            If called with two parameters, this function returns the\n            logarithm of X to the base\n            B. If\n            X is less than or equal to 0, or\n            if B is less than or equal to 1,\n            then NULL is returned.\n          ", "Press CTRL+C to copy mysql> SELECT LOG(2,65536);\n        -> 16\nmysql> SELECT LOG(10,100);\n        -> 2\nmysql> SELECT LOG(1,100);\n        -> NULL", "\nLOG(B,X)\n            is equivalent to\n            LOG(X) /\n            LOG(B).\n          "], "Examples": ["mysql> SELECT LOG(2);\n        -> 0.69314718055995\nmysql> SELECT LOG(-2);\n        -> NULL", "mysql> SELECT LOG(2,65536);\n        -> 16\nmysql> SELECT LOG(10,100);\n        -> 2\nmysql> SELECT LOG(1,100);\n        -> NULL"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log"], "Feature Type": ["Function"], "index": 663, "vector_txt": "663:Feature: LOG(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["LOG10(X)"], "Description": ["Return the base-10 logarithm of the argument", "\nLOG10(X)\n", "\n            Returns the base-10 logarithm of\n            X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT LOG10(2);\n        -> 0.30102999566398\nmysql> SELECT LOG10(100);\n        -> 2\nmysql> SELECT LOG10(-100);\n        -> NULL", "\nLOG10(X)\n            is equivalent to\n            LOG(10,X).\n          "], "Examples": ["mysql> SELECT LOG10(2);\n        -> 0.30102999566398\nmysql> SELECT LOG10(100);\n        -> 2\nmysql> SELECT LOG10(-100);\n        -> NULL"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log10"], "Feature Type": ["Function"], "index": 664, "vector_txt": "664:Feature: LOG10(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["COUNT(expr)\n            [over_clause]"], "Description": ["Return a count of the number of rows returned", "\nCOUNT(expr)\n            [over_clause]\n", "\n            Returns a count of the number of non-NULL\n            values of expr in the rows\n            retrieved by a SELECT\n            statement. The result is a\n            BIGINT value.\n          ", "\n            If there are no matching rows,\n            COUNT() returns\n            0. COUNT(NULL) returns\n            0.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT student.student_name,COUNT(*)\n       FROM student,course\n       WHERE student.student_id=course.student_id\n       GROUP BY student_name;", "\nCOUNT(*) is somewhat\n            different in that it returns a count of the number of rows\n            retrieved, whether or not they contain\n            NULL values.\n          ", "\n            For transactional storage engines such as\n            InnoDB, storing an exact row count is\n            problematic. Multiple transactions may be occurring at the\n            same time, each of which may affect the count.\n          ", "\nInnoDB does not keep an internal count of\n            rows in a table because concurrent transactions might\n            \u201csee\u201d different numbers of rows at the same\n            time. Consequently, SELECT COUNT(*)\n            statements only count rows visible to the current\n            transaction.\n          ", "\nSELECT COUNT(*) FROM\n            tbl_name query\n            performance for InnoDB tables is\n            optimized for single-threaded workloads if there are no\n            extra clauses such as WHERE or\n            GROUP BY.\n          ", "\nInnoDB processes SELECT\n            COUNT(*) statements by traversing the smallest\n            available secondary index unless an index or optimizer hint\n            directs the optimizer to use a different index. If a\n            secondary index is not present, InnoDB\n            processes SELECT COUNT(*) statements by\n            scanning the clustered index.\n          ", "\n            Processing of SELECT COUNT(*) statements\n            takes some time if index records are not entirely in the\n            buffer pool. For a faster count, create a counter table and\n            let your application update it according to the inserts and\n            deletes it does. However, this method may not scale well in\n            situations where thousands of concurrent transactions are\n            initiating updates to the same counter table. If an\n            approximate row count is sufficient, use\n            SHOW TABLE STATUS.\n          ", "\nInnoDB handles SELECT\n            COUNT(*) and SELECT COUNT(1)\n            operations in the same way. There is no performance\n            difference.\n          ", "\n            For MyISAM tables,\n            COUNT(*) is optimized to\n            return very quickly if the\n            SELECT retrieves from one\n            table, no other columns are retrieved, and there is no\n            WHERE clause. For example:\n          ", "Press CTRL+C to copy mysql> SELECT COUNT(*) FROM student;", "\n            This optimization only applies to MyISAM\n            tables, because an exact row count is stored for this\n            storage engine and can be accessed very quickly.\n            COUNT(1) is only subject to the same\n            optimization if the first column is defined as NOT\n            NULL.\n          "], "Examples": ["mysql> SELECT student.student_name,COUNT(*)\n       FROM student,course\n       WHERE student.student_id=course.student_id\n       GROUP BY student_name;", "mysql> SELECT COUNT(*) FROM student;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_count"], "Feature Type": ["Function"], "index": 665, "vector_txt": "665:Feature: COUNT(expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["GROUP_CONCAT(expr)"], "Description": ["Return a concatenated string", "\nGROUP_CONCAT(expr)\n", "\n            This function returns a string result with the concatenated\n            non-NULL values from a group. It returns\n            NULL if there are no\n            non-NULL values. The full syntax is as\n            follows:\n          ", "Press CTRL+C to copy GROUP_CONCAT([DISTINCT] expr [,expr ...]\n             [ORDER BY {unsigned_integer | col_name | expr}\n                 [ASC | DESC] [,col_name ...]]\n             [SEPARATOR str_val])", "Press CTRL+C to copy mysql> SELECT student_name,\n         GROUP_CONCAT(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            Or:\n          ", "Press CTRL+C to copy mysql> SELECT student_name,\n         GROUP_CONCAT(DISTINCT test_score\n                      ORDER BY test_score DESC SEPARATOR ' ')\n       FROM student\n       GROUP BY student_name;", "\n            In MySQL, you can get the concatenated values of expression\n            combinations. To eliminate duplicate values, use the\n            DISTINCT clause. To sort values in the\n            result, use the ORDER BY clause. To sort\n            in reverse order, add the DESC\n            (descending) keyword to the name of the column you are\n            sorting by in the ORDER BY clause. The\n            default is ascending order; this may be specified explicitly\n            using the ASC keyword. The default\n            separator between values in a group is comma\n            (,). To specify a separator explicitly,\n            use SEPARATOR followed by the string\n            literal value that should be inserted between group values.\n            To eliminate the separator altogether, specify\n            SEPARATOR ''.\n          ", "\n            The result is truncated to the maximum length that is given\n            by the group_concat_max_len\n            system variable, which has a default value of 1024. The\n            value can be set higher, although the effective maximum\n            length of the return value is constrained by the value of\n            max_allowed_packet. The\n            syntax to change the value of\n            group_concat_max_len at\n            runtime is as follows, where val\n            is an unsigned integer:\n          ", "Press CTRL+C to copy SET [GLOBAL | SESSION] group_concat_max_len = val;", "\n            The return value is a nonbinary or binary string, depending\n            on whether the arguments are nonbinary or binary strings.\n            The result type is TEXT or\n            BLOB unless\n            group_concat_max_len is\n            less than or equal to 512, in which case the result type is\n            VARCHAR or\n            VARBINARY.\n          ", "\n            If GROUP_CONCAT() is invoked\n            from within the mysql client, binary\n            string results display using hexadecimal notation, depending\n            on the value of the\n            --binary-as-hex. For more\n            information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            See also CONCAT() and\n            CONCAT_WS():\n            Section\u00a014.8, \u201cString Functions and Operators\u201d.\n          "], "Examples": ["mysql> SELECT student_name,\n         GROUP_CONCAT(test_score)\n       FROM student\n       GROUP BY student_name;", "mysql> SELECT student_name,\n         GROUP_CONCAT(DISTINCT test_score\n                      ORDER BY test_score DESC SEPARATOR ' ')\n       FROM student\n       GROUP BY student_name;", "SET [GLOBAL | SESSION] group_concat_max_len = val;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_group-concat"], "Feature Type": ["Function"], "index": 666, "vector_txt": "666:Feature: GROUP_CONCAT(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["LOG2(X)"], "Description": ["Return the base-2 logarithm of the argument", "\nLOG2(X)\n", "\n            Returns the base-2 logarithm of\n            X. If\n            X is less than or equal to 0.0E0,\n            the function returns NULL and a warning\n            \u201cInvalid argument for logarithm\u201d is reported.\n            Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT LOG2(65536);\n        -> 16\nmysql> SELECT LOG2(-100);\n        -> NULL", "\nLOG2() is useful for finding\n            out how many bits a number requires for storage. This\n            function is equivalent to the expression\n            LOG(X) /\n            LOG(2).\n          "], "Examples": ["mysql> SELECT LOG2(65536);\n        -> 16\nmysql> SELECT LOG2(-100);\n        -> NULL"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log2"], "Feature Type": ["Function"], "index": 667, "vector_txt": "667:Feature: LOG2(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["MOD(N,M)"], "Description": ["Return the remainder", "\nMOD(N,M),\n            N\n            % M,\n            N\n            MOD M\n", "\n            Modulo operation. Returns the remainder of\n            N divided by\n            M. Returns\n            NULL if M or\n            N is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT MOD(234, 10);\n        -> 4\nmysql> SELECT 253 % 7;\n        -> 1\nmysql> SELECT MOD(29,9);\n        -> 2\nmysql> SELECT 29 MOD 9;\n        -> 2", "\n            This function is safe to use with\n            BIGINT values.\n          ", "\nMOD() also works on values\n            that have a fractional part and returns the exact remainder\n            after division:\n          ", "Press CTRL+C to copy mysql> SELECT MOD(34.5,3);\n        -> 1.5", "\nMOD(N,0)\n            returns NULL.\n          "], "Examples": ["mysql> SELECT MOD(234, 10);\n        -> 4\nmysql> SELECT 253 % 7;\n        -> 1\nmysql> SELECT MOD(29,9);\n        -> 2\nmysql> SELECT 29 MOD 9;\n        -> 2", "mysql> SELECT MOD(34.5,3);\n        -> 1.5"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_mod"], "Feature Type": ["Function"], "index": 668, "vector_txt": "668:Feature: MOD(N,M)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["PI()"], "Description": ["Return the value of pi", "\nPI()\n", "\n            Returns the value of \u03c0 (pi). The default number of\n            decimal places displayed is seven, but MySQL uses the full\n            double-precision value internally.\n          ", "\n            Because the return value of this function is a\n            double-precision value, its exact representation may vary\n            between platforms or implementations. This also applies to\n            any expressions making use of PI(). See\n            Section\u00a013.1.4, \u201cFloating-Point Types (Approximate Value) - FLOAT, DOUBLE\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT PI();\n        -> 3.141593\nmysql> SELECT PI()+0.000000000000000000;\n        -> 3.141592653589793000"], "Examples": ["mysql> SELECT PI();\n        -> 3.141593\nmysql> SELECT PI()+0.000000000000000000;\n        -> 3.141592653589793000"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_pi"], "Feature Type": ["Function"], "index": 669, "vector_txt": "669:Feature: PI()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["POW(X,Y)"], "Description": ["Return the argument raised to the specified power", "\nPOW(X,Y)\n", "\n            Returns the value of X raised to\n            the power of Y. Returns\n            NULL if X or\n            Y is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT POW(2,2);\n        -> 4\nmysql> SELECT POW(2,-2);\n        -> 0.25"], "Examples": ["mysql> SELECT POW(2,2);\n        -> 4\nmysql> SELECT POW(2,-2);\n        -> 0.25"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_pow"], "Feature Type": ["Function"], "index": 670, "vector_txt": "670:Feature: POW(X,Y)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["POWER(X,Y)"], "Description": ["Return the argument raised to the specified power", "\nPOWER(X,Y)\n", "\n            This is a synonym for POW().\n          "], "Examples": [], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_power"], "Feature Type": ["Function"], "index": 671, "vector_txt": "671:Feature: POWER(X,Y)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["RADIANS(X)"], "Description": ["Return argument converted to radians", "\nRADIANS(X)\n", "\n            Returns the argument X, converted\n            from degrees to radians. (Note that \u03c0 radians equals 180\n            degrees.) Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT RADIANS(90);\n        -> 1.5707963267949"], "Examples": ["mysql> SELECT RADIANS(90);\n        -> 1.5707963267949"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_radians"], "Feature Type": ["Function"], "index": 672, "vector_txt": "672:Feature: RADIANS(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["RAND([N])"], "Description": ["Return a random floating-point value", "\nRAND([N])\n", "\n            Returns a random floating-point value\n            v in the range\n            0 <= v <\n            1.0. To obtain a random integer\n            R in the range\n            i <=\n            R <\n            j, use the expression\n            FLOOR(i\n            + RAND() * (j\n            \u2212 i)).\n            For example, to obtain a random integer in the range the\n            range 7 <=\n            R < 12, use\n            the following statement:\n          ", "Press CTRL+C to copy SELECT FLOOR(7 + (RAND() * 5));", "\n            If an integer argument N is\n            specified, it is used as the seed value:\n", "\n\n                With a constant initializer argument, the seed is\n                initialized once when the statement is prepared, prior\n                to execution.\n              \n                With a nonconstant initializer argument (such as a\n                column name), the seed is initialized with the value for\n                each invocation of\n                RAND().\n\n", "\n            One implication of this behavior is that for equal argument\n            values,\n            RAND(N)\n            returns the same value each time, and thus produces a\n            repeatable sequence of column values. In the following\n            example, the sequence of values produced by\n            RAND(3) is the same both places it\n            occurs.\n          ", "Press CTRL+C to copy mysql> CREATE TABLE t (i INT);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.61914388706828 |\n|    2 | 0.93845168309142 |\n|    3 | 0.83482678498591 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.35877890638893 |\n|    2 | 0.28941420772058 |\n|    3 | 0.37073435016976 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.01 sec)", "\nRAND() in a\n            WHERE clause is evaluated for every row\n            (when selecting from one table) or combination of rows (when\n            selecting from a multiple-table join). Thus, for optimizer\n            purposes, RAND() is not a\n            constant value and cannot be used for index optimizations.\n            For more information, see\n            Section\u00a010.2.1.20, \u201cFunction Call Optimization\u201d.\n          ", "\n            Use of a column with RAND()\n            values in an ORDER BY or GROUP\n            BY clause may yield unexpected results because for\n            either clause a RAND()\n            expression can be evaluated multiple times for the same row,\n            each time returning a different result. If the goal is to\n            retrieve rows in random order, you can use a statement like\n            this:\n          ", "Press CTRL+C to copy SELECT * FROM tbl_name ORDER BY RAND();", "\n            To select a random sample from a set of rows, combine\n            ORDER BY RAND() with\n            LIMIT:\n          ", "Press CTRL+C to copy SELECT * FROM table1, table2 WHERE a=b AND c<d ORDER BY RAND() LIMIT 1000;", "\nRAND() is not meant to be a\n            perfect random generator. It is a fast way to generate\n            random numbers on demand that is portable between platforms\n            for the same MySQL version.\n          ", "\n            This function is unsafe for statement-based replication. A\n            warning is logged if you use this function when\n            binlog_format is set to\n            STATEMENT.\n          "], "Examples": ["SELECT FLOOR(7 + (RAND() * 5));", "mysql> CREATE TABLE t (i INT);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.61914388706828 |\n|    2 | 0.93845168309142 |\n|    3 | 0.83482678498591 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.35877890638893 |\n|    2 | 0.28941420772058 |\n|    3 | 0.37073435016976 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.01 sec)", "SELECT * FROM tbl_name ORDER BY RAND();", "SELECT * FROM table1, table2 WHERE a=b AND c<d ORDER BY RAND() LIMIT 1000;"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_rand"], "Feature Type": ["Function"], "index": 673, "vector_txt": "673:Feature: RAND([N])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["ROUND(X)"], "Description": ["Round the argument", "\nROUND(X),\n            ROUND(X,D)\n", "\n            Rounds the argument X to\n            D decimal places. The rounding\n            algorithm depends on the data type of\n            X. D\n            defaults to 0 if not specified. D\n            can be negative to cause D digits\n            left of the decimal point of the value\n            X to become zero. The maximum\n            absolute value for D is 30; any\n            digits in excess of 30 (or -30) are truncated. If\n            X or D\n            is NULL, the function returns\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT ROUND(-1.23);\n        -> -1\nmysql> SELECT ROUND(-1.58);\n        -> -2\nmysql> SELECT ROUND(1.58);\n        -> 2\nmysql> SELECT ROUND(1.298, 1);\n        -> 1.3\nmysql> SELECT ROUND(1.298, 0);\n        -> 1\nmysql> SELECT ROUND(23.298, -1);\n        -> 20\nmysql> SELECT ROUND(.12345678901234567890123456789012345, 35);\n        -> 0.123456789012345678901234567890", "\n            The return value has the same type as the first argument\n            (assuming that it is integer, double, or decimal). This\n            means that for an integer argument, the result is an integer\n            (no decimal places):\n          ", "Press CTRL+C to copy mysql> SELECT ROUND(150.000,2), ROUND(150,2);\n+------------------+--------------+\n| ROUND(150.000,2) | ROUND(150,2) |\n+------------------+--------------+\n|           150.00 |          150 |\n+------------------+--------------+", "\nROUND() uses the following\n            rules depending on the type of the first argument:\n", "\n\n                For exact-value numbers,\n                ROUND() uses the\n                \u201cround half away from zero\u201d or \u201cround\n                toward nearest\u201d rule: A value with a fractional\n                part of .5 or greater is rounded up to the next integer\n                if positive or down to the next integer if negative. (In\n                other words, it is rounded away from zero.) A value with\n                a fractional part less than .5 is rounded down to the\n                next integer if positive or up to the next integer if\n                negative.\n              \n                For approximate-value numbers, the result depends on the\n                C library. On many systems, this means that\n                ROUND() uses the\n                \u201cround to nearest even\u201d rule: A value with\n                a fractional part exactly halfway between two integers\n                is rounded to the nearest even integer.\n\n", "\n            The following example shows how rounding differs for exact\n            and approximate values:\n          ", "Press CTRL+C to copy mysql> SELECT ROUND(2.5), ROUND(25E-1);\n+------------+--------------+\n| ROUND(2.5) | ROUND(25E-1) |\n+------------+--------------+\n| 3          |            2 |\n+------------+--------------+", "\n            For more information, see Section\u00a014.24, \u201cPrecision Math\u201d.\n          ", "\n            The data type returned by ROUND() (and\n            TRUNCATE()) is determined\n            according to the rules listed here:\n", "\n\n                When the first argument is of any integer type, the\n                return type is always\n                BIGINT.\n              \n                When the first argument is of any floating-point type or\n                of any non-numeric type, the return type is always\n                DOUBLE.\n              \n                When the first argument is a\n                DECIMAL value, the return\n                type is also DECIMAL.\n              \n                The type attributes for the return value are also copied\n                from the first argument, except in the case of\n                DECIMAL, when the second argument is\n                a constant value.\n              \n                When the desired number of decimal places is less than\n                the scale of the argument, the scale and the precision\n                of the result are adjusted accordingly.\n              \n                In addition, for ROUND() (but not for\n                the TRUNCATE() function),\n                the precision is extended by one place to accommodate\n                rounding that increases the number of significant\n                digits. If the second argument is negative, the return\n                type is adjusted such that its scale is 0, with a\n                corresponding precision. For example,\n                ROUND(99.999, 2) returns\n                100.00\u2014the first argument is\n                DECIMAL(5, 3), and the return type is\n                DECIMAL(5, 2).\n              \n                If the second argument is negative, the return type has\n                scale 0 and a corresponding precision;\n                ROUND(99.999, -1) returns\n                100, which is DECIMAL(3,\n                0).\n\n"], "Examples": ["mysql> SELECT ROUND(-1.23);\n        -> -1\nmysql> SELECT ROUND(-1.58);\n        -> -2\nmysql> SELECT ROUND(1.58);\n        -> 2\nmysql> SELECT ROUND(1.298, 1);\n        -> 1.3\nmysql> SELECT ROUND(1.298, 0);\n        -> 1\nmysql> SELECT ROUND(23.298, -1);\n        -> 20\nmysql> SELECT ROUND(.12345678901234567890123456789012345, 35);\n        -> 0.123456789012345678901234567890", "mysql> SELECT ROUND(150.000,2), ROUND(150,2);\n+------------------+--------------+\n| ROUND(150.000,2) | ROUND(150,2) |\n+------------------+--------------+\n|           150.00 |          150 |\n+------------------+--------------+", "mysql> SELECT ROUND(2.5), ROUND(25E-1);\n+------------+--------------+\n| ROUND(2.5) | ROUND(25E-1) |\n+------------+--------------+\n| 3          |            2 |\n+------------+--------------+"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_round"], "Feature Type": ["Function"], "index": 674, "vector_txt": "674:Feature: ROUND(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["SIGN(X)"], "Description": ["Return the sign of the argument", "\nSIGN(X)\n", "\n            Returns the sign of the argument as -1,\n            0, or 1, depending on\n            whether X is negative, zero, or\n            positive. Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT SIGN(-32);\n        -> -1\nmysql> SELECT SIGN(0);\n        -> 0\nmysql> SELECT SIGN(234);\n        -> 1"], "Examples": ["mysql> SELECT SIGN(-32);\n        -> -1\nmysql> SELECT SIGN(0);\n        -> 0\nmysql> SELECT SIGN(234);\n        -> 1"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sign"], "Feature Type": ["Function"], "index": 675, "vector_txt": "675:Feature: SIGN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["SIN(X)"], "Description": ["Return the sine of the argument", "\nSIN(X)\n", "\n            Returns the sine of X, where\n            X is given in radians. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT SIN(PI());\n        -> 1.2246063538224e-16\nmysql> SELECT ROUND(SIN(PI()));\n        -> 0"], "Examples": ["mysql> SELECT SIN(PI());\n        -> 1.2246063538224e-16\nmysql> SELECT ROUND(SIN(PI()));\n        -> 0"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sin"], "Feature Type": ["Function"], "index": 676, "vector_txt": "676:Feature: SIN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["COUNT(DISTINCT\n            expr,[expr...])"], "Description": ["Return the count of a number of different values", "\nCOUNT(DISTINCT\n            expr,[expr...])\n", "\n            Returns a count of the number of rows with different\n            non-NULL expr\n            values.\n          ", "\n            If there are no matching rows,\n            COUNT(DISTINCT) returns\n            0.\n          ", "Press CTRL+C to copy mysql> SELECT COUNT(DISTINCT results) FROM student;", "\n            In MySQL, you can obtain the number of distinct expression\n            combinations that do not contain NULL by\n            giving a list of expressions. In standard SQL, you would\n            have to do a concatenation of all expressions inside\n            COUNT(DISTINCT ...).\n          "], "Examples": ["mysql> SELECT COUNT(DISTINCT results) FROM student;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_count-distinct"], "Feature Type": ["Function"], "index": 677, "vector_txt": "677:Feature: COUNT(DISTINCT\n            expr,[expr...])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["SQRT(X)"], "Description": ["Return the square root of the argument", "\nSQRT(X)\n", "\n            Returns the square root of a nonnegative number\n            X. If\n            X is NULL, the\n            function returns NULL.\n          ", "Press CTRL+C to copy mysql> SELECT SQRT(4);\n        -> 2\nmysql> SELECT SQRT(20);\n        -> 4.4721359549996\nmysql> SELECT SQRT(-16);\n        -> NULL"], "Examples": ["mysql> SELECT SQRT(4);\n        -> 2\nmysql> SELECT SQRT(20);\n        -> 4.4721359549996\nmysql> SELECT SQRT(-16);\n        -> NULL"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sqrt"], "Feature Type": ["Function"], "index": 678, "vector_txt": "678:Feature: SQRT(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["TAN(X)"], "Description": ["Return the tangent of the argument", "\nTAN(X)\n", "\n            Returns the tangent of X, where\n            X is given in radians. Returns\n            NULL if X is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT TAN(PI());\n        -> -1.2246063538224e-16\nmysql> SELECT TAN(PI()+1);\n        -> 1.5574077246549"], "Examples": ["mysql> SELECT TAN(PI());\n        -> -1.2246063538224e-16\nmysql> SELECT TAN(PI()+1);\n        -> 1.5574077246549"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_tan"], "Feature Type": ["Function"], "index": 679, "vector_txt": "679:Feature: TAN(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["TRUNCATE(X,D)"], "Description": ["Truncate to specified number of decimal places", "\nTRUNCATE(X,D)\n", "\n            Returns the number X, truncated\n            to D decimal places. If\n            D is 0, the\n            result has no decimal point or fractional part.\n            D can be negative to cause\n            D digits left of the decimal\n            point of the value X to become\n            zero. If X or\n            D is NULL, the\n            function returns NULL.\n          ", "Press CTRL+C to copy mysql> SELECT TRUNCATE(1.223,1);\n        -> 1.2\nmysql> SELECT TRUNCATE(1.999,1);\n        -> 1.9\nmysql> SELECT TRUNCATE(1.999,0);\n        -> 1\nmysql> SELECT TRUNCATE(-1.999,1);\n        -> -1.9\nmysql> SELECT TRUNCATE(122,-2);\n       -> 100\nmysql> SELECT TRUNCATE(10.28*100,0);\n       -> 1028", "\n            All numbers are rounded toward zero.\n          ", "\n            The data type returned by TRUNCATE()\n            follows the same rules that determine the return type of the\n            ROUND() function; for details, see the\n            description for ROUND().\n"], "Examples": ["mysql> SELECT TRUNCATE(1.223,1);\n        -> 1.2\nmysql> SELECT TRUNCATE(1.999,1);\n        -> 1.9\nmysql> SELECT TRUNCATE(1.999,0);\n        -> 1\nmysql> SELECT TRUNCATE(-1.999,1);\n        -> -1.9\nmysql> SELECT TRUNCATE(122,-2);\n       -> 100\nmysql> SELECT TRUNCATE(10.28*100,0);\n       -> 1028"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_truncate"], "Feature Type": ["Function"], "index": 680, "vector_txt": "680:Feature: TRUNCATE(X,D)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["ANY_VALUE(arg)"], "Description": ["Suppress ONLY_FULL_GROUP_BY value rejection", "\nANY_VALUE(arg)\n", "\n          This function is useful for GROUP BY\n          queries when the\n          ONLY_FULL_GROUP_BY SQL mode\n          is enabled, for cases when MySQL rejects a query that you know\n          is valid for reasons that MySQL cannot determine. The function\n          return value and type are the same as the return value and\n          type of its argument, but the function result is not checked\n          for the ONLY_FULL_GROUP_BY\n          SQL mode.\n        ", "\n          For example, if name is a nonindexed\n          column, the following query fails with\n          ONLY_FULL_GROUP_BY enabled:\n        ", "Press CTRL+C to copy mysql> SELECT name, address, MAX(age) FROM t GROUP BY name;\nERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP\nBY clause and contains nonaggregated column 'mydb.t.address' which\nis not functionally dependent on columns in GROUP BY clause; this\nis incompatible with sql_mode=only_full_group_by", "\n          The failure occurs because address is a\n          nonaggregated column that is neither named among\n          GROUP BY columns nor functionally dependent\n          on them. As a result, the address value for\n          rows within each name group is\n          nondeterministic. There are multiple ways to cause MySQL to\n          accept the query:\n", "\n\n              Alter the table to make name a primary\n              key or a unique NOT NULL column. This\n              enables MySQL to determine that address\n              is functionally dependent on name; that\n              is, address is uniquely determined by\n              name. (This technique is inapplicable\n              if NULL must be permitted as a valid\n              name value.)\n            \n              Use ANY_VALUE() to refer to\n              address:\n            Press CTRL+C to copy SELECT name, ANY_VALUE(address), MAX(age) FROM t GROUP BY name;\n              In this case, MySQL ignores the nondeterminism of\n              address values within each\n              name group and accepts the query. This\n              may be useful if you simply do not care which value of a\n              nonaggregated column is chosen for each group.\n              ANY_VALUE() is not an\n              aggregate function, unlike functions such as\n              SUM() or\n              COUNT(). It simply acts to\n              suppress the test for nondeterminism.\n            \n              Disable\n              ONLY_FULL_GROUP_BY. This\n              is equivalent to using\n              ANY_VALUE() with\n              ONLY_FULL_GROUP_BY\n              enabled, as described in the previous item.\n\n", "\nANY_VALUE() is also useful if\n          functional dependence exists between columns but MySQL cannot\n          determine it. The following query is valid because\n          age is functionally dependent on the\n          grouping column age-1, but MySQL cannot\n          tell that and rejects the query with\n          ONLY_FULL_GROUP_BY enabled:\n        ", "Press CTRL+C to copy SELECT age FROM t GROUP BY age-1;", "\n          To cause MySQL to accept the query, use\n          ANY_VALUE():\n        ", "Press CTRL+C to copy SELECT ANY_VALUE(age) FROM t GROUP BY age-1;", "\nANY_VALUE() can be used for\n          queries that refer to aggregate functions in the absence of a\n          GROUP BY clause:\n        ", "Press CTRL+C to copy mysql> SELECT name, MAX(age) FROM t;\nERROR 1140 (42000): In aggregated query without GROUP BY, expression\n#1 of SELECT list contains nonaggregated column 'mydb.t.name'; this\nis incompatible with sql_mode=only_full_group_by", "\n          Without GROUP BY, there is a single group\n          and it is nondeterministic which name value\n          to choose for the group.\n          ANY_VALUE() tells MySQL to\n          accept the query:\n        ", "Press CTRL+C to copy SELECT ANY_VALUE(name), MAX(age) FROM t;", "\n          It may be that, due to some property of a given data set, you\n          know that a selected nonaggregated column is effectively\n          functionally dependent on a GROUP BY\n          column. For example, an application may enforce uniqueness of\n          one column with respect to another. In this case, using\n          ANY_VALUE() for the effectively\n          functionally dependent column may make sense.\n        ", "\n          For additional discussion, see\n          Section\u00a014.19.3, \u201cMySQL Handling of GROUP BY\u201d.\n        "], "Examples": ["mysql> SELECT name, address, MAX(age) FROM t GROUP BY name;\nERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP\nBY clause and contains nonaggregated column 'mydb.t.address' which\nis not functionally dependent on columns in GROUP BY clause; this\nis incompatible with sql_mode=only_full_group_by", "SELECT name, ANY_VALUE(address), MAX(age) FROM t GROUP BY name;", "SELECT age FROM t GROUP BY age-1;", "SELECT ANY_VALUE(age) FROM t GROUP BY age-1;", "mysql> SELECT name, MAX(age) FROM t;\nERROR 1140 (42000): In aggregated query without GROUP BY, expression\n#1 of SELECT list contains nonaggregated column 'mydb.t.name'; this\nis incompatible with sql_mode=only_full_group_by", "SELECT ANY_VALUE(name), MAX(age) FROM t;"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_any-value"], "Feature Type": ["Function"], "index": 681, "vector_txt": "681:Feature: ANY_VALUE(arg)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["BIN_TO_UUID(binary_uuid)"], "Description": ["Convert binary UUID to string", "\nBIN_TO_UUID(binary_uuid),\n          BIN_TO_UUID(binary_uuid,\n          swap_flag)\n", "\nBIN_TO_UUID() is the inverse of\n          UUID_TO_BIN(). It converts a\n          binary UUID to a string UUID and returns the result. The\n          binary value should be a UUID as a\n          VARBINARY(16) value. The return\n          value is a string of five hexadecimal numbers separated by\n          dashes. (For details about this format, see the\n          UUID() function description.)\n          If the UUID argument is NULL, the return\n          value is NULL. If any argument is invalid,\n          an error occurs.\n        ", "\nBIN_TO_UUID() takes one or two\n          arguments:\n", "\n\n              The one-argument form takes a binary UUID value. The UUID\n              value is assumed not to have its time-low and time-high\n              parts swapped. The string result is in the same order as\n              the binary argument.\n            \n              The two-argument form takes a binary UUID value and a\n              swap-flag value:\n\n\n\n                  If swap_flag is 0, the\n                  two-argument form is equivalent to the one-argument\n                  form. The string result is in the same order as the\n                  binary argument.\n                \n                  If swap_flag is 1, the UUID\n                  value is assumed to have its time-low and time-high\n                  parts swapped. These parts are swapped back to their\n                  original position in the result value.\n\n\n\n", "\n          For usage examples and information about time-part swapping,\n          see the UUID_TO_BIN() function\n          description.\n        "], "Examples": [], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_bin-to-uuid"], "Feature Type": ["Function"], "index": 682, "vector_txt": "682:Feature: BIN_TO_UUID(binary_uuid)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["DEFAULT(col_name)"], "Description": ["Return the default value for a table column", "\nDEFAULT(col_name)\n", "\n          Returns the default value for a table column. An error results\n          if the column has no default value.\n        ", "\n          The use of\n          DEFAULT(col_name)\n          to specify the default value for a named column is permitted\n          only for columns that have a literal default value, not for\n          columns that have an expression default value.\n        ", "Press CTRL+C to copy mysql> UPDATE t SET i = DEFAULT(i)+1 WHERE id < 100;"], "Examples": ["mysql> UPDATE t SET i = DEFAULT(i)+1 WHERE id < 100;"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_default"], "Feature Type": ["Function"], "index": 683, "vector_txt": "683:Feature: DEFAULT(col_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["GROUPING(expr\n          [, expr] ...)"], "Description": ["Distinguish super-aggregate ROLLUP rows from regular rows", "\nGROUPING(expr\n          [, expr] ...)\n", "\n          For GROUP BY queries that include a\n          WITH ROLLUP modifier, the\n          ROLLUP operation produces super-aggregate\n          output rows where NULL represents the set\n          of all values. The GROUPING()\n          function enables you to distinguish NULL\n          values for super-aggregate rows from NULL\n          values in regular grouped rows.\n        ", "\nGROUPING() is permitted in the\n          select list, HAVING clause, and\n          ORDER BY clause.\n        ", "\n          Each argument to GROUPING()\n          must be an expression that exactly matches an expression in\n          the GROUP BY clause. The expression cannot\n          be a positional specifier. For each expression,\n          GROUPING() produces 1 if the\n          expression value in the current row is a\n          NULL representing a super-aggregate value.\n          Otherwise, GROUPING() produces\n          0, indicating that the expression value is a\n          NULL for a regular result row or is not\n          NULL.\n        ", "\n          Suppose that table t1 contains these rows,\n          where NULL indicates something like\n          \u201cother\u201d or \u201cunknown\u201d:\n        ", "Press CTRL+C to copy mysql> SELECT * FROM t1;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "\n          A summary of the table without WITH ROLLUP\n          looks like this:\n        ", "Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "\n          The result contains NULL values, but those\n          do not represent super-aggregate rows because the query does\n          not include WITH ROLLUP.\n        ", "\n          Adding WITH ROLLUP produces super-aggregate\n          summary rows containing additional NULL\n          values. However, without comparing this result to the previous\n          one, it is not easy to see which NULL\n          values occur in super-aggregate rows and which occur in\n          regular grouped rows:\n        ", "Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | NULL  |        5 |\n| ball | large |       20 |\n| ball | small |       10 |\n| ball | NULL  |       35 |\n| hoop | NULL  |        3 |\n| hoop | large |        5 |\n| hoop | small |       15 |\n| hoop | NULL  |       23 |\n| NULL | NULL  |       58 |\n+------+-------+----------+", "\n          To distinguish NULL values in\n          super-aggregate rows from those in regular grouped rows, use\n          GROUPING(), which returns 1\n          only for super-aggregate NULL values:\n        ", "Press CTRL+C to copy mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+\n| name | size  | quantity | grp_name | grp_size |\n+------+-------+----------+----------+----------+\n| ball | NULL  |        5 |        0 |        0 |\n| ball | large |       20 |        0 |        0 |\n| ball | small |       10 |        0 |        0 |\n| ball | NULL  |       35 |        0 |        1 |\n| hoop | NULL  |        3 |        0 |        0 |\n| hoop | large |        5 |        0 |        0 |\n| hoop | small |       15 |        0 |        0 |\n| hoop | NULL  |       23 |        0 |        1 |\n| NULL | NULL  |       58 |        1 |        1 |\n+------+-------+----------+----------+----------+", "\n          Common uses for GROUPING():\n", "\n\n              Substitute a label for super-aggregate\n              NULL values:\n            Press CTRL+C to copy mysql> SELECT\n         IF(GROUPING(name) = 1, 'All items', name) AS name,\n         IF(GROUPING(size) = 1, 'All sizes', size) AS size,\n         SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+-----------+-----------+----------+\n| name      | size      | quantity |\n+-----------+-----------+----------+\n| ball      | NULL      |        5 |\n| ball      | large     |       20 |\n| ball      | small     |       10 |\n| ball      | All sizes |       35 |\n| hoop      | NULL      |        3 |\n| hoop      | large     |        5 |\n| hoop      | small     |       15 |\n| hoop      | All sizes |       23 |\n| All items | All sizes |       58 |\n+-----------+-----------+----------+\n              Return only super-aggregate lines by filtering out the\n              regular grouped lines:\n            Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name) = 1 OR GROUPING(size) = 1;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+\n", "\nGROUPING() permits multiple\n          expression arguments. In this case, the\n          GROUPING() return value\n          represents a bitmask combined from the results for each\n          expression, where the lowest-order bit corresponds to the\n          result for the rightmost expression. For example, with three\n          expression arguments,\n          GROUPING(expr1,\n          expr2,\n          expr3) is evaluated like\n          this:\n        ", "Press CTRL+C to copy   result for GROUPING(expr3)\n+ result for GROUPING(expr2) << 1\n+ result for GROUPING(expr1) << 2", "\n          The following query shows how\n          GROUPING() results for single\n          arguments combine for a multiple-argument call to produce a\n          bitmask value:\n        ", "Press CTRL+C to copy mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size,\n       GROUPING(name, size) AS grp_all\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+---------+\n| name | size  | quantity | grp_name | grp_size | grp_all |\n+------+-------+----------+----------+----------+---------+\n| ball | NULL  |        5 |        0 |        0 |       0 |\n| ball | large |       20 |        0 |        0 |       0 |\n| ball | small |       10 |        0 |        0 |       0 |\n| ball | NULL  |       35 |        0 |        1 |       1 |\n| hoop | NULL  |        3 |        0 |        0 |       0 |\n| hoop | large |        5 |        0 |        0 |       0 |\n| hoop | small |       15 |        0 |        0 |       0 |\n| hoop | NULL  |       23 |        0 |        1 |       1 |\n| NULL | NULL  |       58 |        1 |        1 |       3 |\n+------+-------+----------+----------+----------+---------+", "\n          With multiple expression arguments, the\n          GROUPING() return value is\n          nonzero if any expression represents a super-aggregate value.\n          Multiple-argument GROUPING()\n          syntax thus provides a simpler way to write the earlier query\n          that returned only super-aggregate rows, by using a single\n          multiple-argument GROUPING()\n          call rather than multiple single-argument calls:\n        ", "Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name, size) <> 0;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+", "\n          Use of GROUPING() is subject to\n          these limitations:\n", "\n\n              Do not use subquery GROUP BY\n              expressions as GROUPING()\n              arguments because matching might fail. For example,\n              matching fails for this query:\n            Press CTRL+C to copy mysql> SELECT GROUPING((SELECT MAX(name) FROM t1))\n       FROM t1\n       GROUP BY (SELECT MAX(name) FROM t1) WITH ROLLUP;\nERROR 3580 (HY000): Argument #1 of GROUPING function is not in GROUP BY\nGROUP BY literal expressions should not\n              be used within a HAVING clause as\n              GROUPING() arguments. Due\n              to differences between when the optimizer evaluates\n              GROUP BY and HAVING,\n              matching may succeed but\n              GROUPING() evaluation does\n              not produce the expected result. Consider this query:\n            Press CTRL+C to copy SELECT a AS f1, 'w' AS f2\nFROM t\nGROUP BY f1, f2 WITH ROLLUP\nHAVING GROUPING(f2) = 1;\nGROUPING() is evaluated\n              earlier for the literal constant expression than for the\n              HAVING clause as a whole and returns 0.\n              To check whether a query such as this is affected, use\n              EXPLAIN and look for\n              Impossible having in the\n              Extra column.\n\n", "\n          For more information about WITH ROLLUP and\n          GROUPING(), see\n          Section\u00a014.19.2, \u201cGROUP BY Modifiers\u201d.\n        "], "Examples": ["mysql> SELECT * FROM t1;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | NULL  |        5 |\n| ball | large |       20 |\n| ball | small |       10 |\n| ball | NULL  |       35 |\n| hoop | NULL  |        3 |\n| hoop | large |        5 |\n| hoop | small |       15 |\n| hoop | NULL  |       23 |\n| NULL | NULL  |       58 |\n+------+-------+----------+", "mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+\n| name | size  | quantity | grp_name | grp_size |\n+------+-------+----------+----------+----------+\n| ball | NULL  |        5 |        0 |        0 |\n| ball | large |       20 |        0 |        0 |\n| ball | small |       10 |        0 |        0 |\n| ball | NULL  |       35 |        0 |        1 |\n| hoop | NULL  |        3 |        0 |        0 |\n| hoop | large |        5 |        0 |        0 |\n| hoop | small |       15 |        0 |        0 |\n| hoop | NULL  |       23 |        0 |        1 |\n| NULL | NULL  |       58 |        1 |        1 |\n+------+-------+----------+----------+----------+", "mysql> SELECT\n         IF(GROUPING(name) = 1, 'All items', name) AS name,\n         IF(GROUPING(size) = 1, 'All sizes', size) AS size,\n         SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+-----------+-----------+----------+\n| name      | size      | quantity |\n+-----------+-----------+----------+\n| ball      | NULL      |        5 |\n| ball      | large     |       20 |\n| ball      | small     |       10 |\n| ball      | All sizes |       35 |\n| hoop      | NULL      |        3 |\n| hoop      | large     |        5 |\n| hoop      | small     |       15 |\n| hoop      | All sizes |       23 |\n| All items | All sizes |       58 |\n+-----------+-----------+----------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name) = 1 OR GROUPING(size) = 1;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+", "mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size,\n       GROUPING(name, size) AS grp_all\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+---------+\n| name | size  | quantity | grp_name | grp_size | grp_all |\n+------+-------+----------+----------+----------+---------+\n| ball | NULL  |        5 |        0 |        0 |       0 |\n| ball | large |       20 |        0 |        0 |       0 |\n| ball | small |       10 |        0 |        0 |       0 |\n| ball | NULL  |       35 |        0 |        1 |       1 |\n| hoop | NULL  |        3 |        0 |        0 |       0 |\n| hoop | large |        5 |        0 |        0 |       0 |\n| hoop | small |       15 |        0 |        0 |       0 |\n| hoop | NULL  |       23 |        0 |        1 |       1 |\n| NULL | NULL  |       58 |        1 |        1 |       3 |\n+------+-------+----------+----------+----------+---------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name, size) <> 0;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+", "mysql> SELECT GROUPING((SELECT MAX(name) FROM t1))\n       FROM t1\n       GROUP BY (SELECT MAX(name) FROM t1) WITH ROLLUP;\nERROR 3580 (HY000): Argument #1 of GROUPING function is not in GROUP BY", "SELECT a AS f1, 'w' AS f2\nFROM t\nGROUP BY f1, f2 WITH ROLLUP\nHAVING GROUPING(f2) = 1;"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_grouping"], "Feature Type": ["Function"], "index": 684, "vector_txt": "684:Feature: GROUPING(expr\n          [, expr] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["INET_ATON(expr)"], "Description": ["Return the numeric value of an IP address", "\nINET_ATON(expr)\n", "\n          Given the dotted-quad representation of an IPv4 network\n          address as a string, returns an integer that represents the\n          numeric value of the address in network byte order (big\n          endian). INET_ATON() returns\n          NULL if it does not understand its\n          argument, or if expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT INET_ATON('10.0.5.9');\n        -> 167773449", "\n          For this example, the return value is calculated as\n          10\u00d72563 +\n          0\u00d72562 + 5\u00d7256 + 9.\n        ", "\nINET_ATON() may or may not\n          return a non-NULL result for short-form IP\n          addresses (such as '127.1' as a\n          representation of '127.0.0.1'). Because of\n          this, INET_ATON()a should not\n          be used for such addresses.\n", "\n\nNote\n\n\n            To store values generated by\n            INET_ATON(), use an\n            INT UNSIGNED column rather than\n            INT, which is signed. If you\n            use a signed column, values corresponding to IP addresses\n            for which the first octet is greater than 127 cannot be\n            stored correctly. See\n            Section\u00a013.1.7, \u201cOut-of-Range and Overflow Handling\u201d.\n\n"], "Examples": ["mysql> SELECT INET_ATON('10.0.5.9');\n        -> 167773449"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_inet-aton"], "Feature Type": ["Function"], "index": 685, "vector_txt": "685:Feature: INET_ATON(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["INET_NTOA(expr)"], "Description": ["Return the IP address from a numeric value", "\nINET_NTOA(expr)\n", "\n          Given a numeric IPv4 network address in network byte order,\n          returns the dotted-quad string representation of the address\n          as a string in the connection character set.\n          INET_NTOA() returns\n          NULL if it does not understand its\n          argument.\n        ", "Press CTRL+C to copy mysql> SELECT INET_NTOA(167773449);\n        -> '10.0.5.9'"], "Examples": ["mysql> SELECT INET_NTOA(167773449);\n        -> '10.0.5.9'"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_inet-ntoa"], "Feature Type": ["Function"], "index": 686, "vector_txt": "686:Feature: INET_NTOA(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["IS_UUID(string_uuid)"], "Description": ["Whether argument is a valid UUID", "\nIS_UUID(string_uuid)\n", "\n          Returns 1 if the argument is a valid string-format UUID, 0 if\n          the argument is not a valid UUID, and NULL\n          if the argument is NULL.\n        ", "\n\u201cValid\u201d means that the value is in a format that\n          can be parsed. That is, it has the correct length and contains\n          only the permitted characters (hexadecimal digits in any\n          lettercase and, optionally, dashes and curly braces). This\n          format is most common:\n        ", "Press CTRL+C to copy aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", "\n          These other formats are also permitted:\n        ", "Press CTRL+C to copy aaaaaaaabbbbccccddddeeeeeeeeeeee\n{aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee}", "\n          For the meanings of fields within the value, see the\n          UUID() function description.\n        ", "Press CTRL+C to copy mysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db');\n+-------------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB');\n+-------------------------------------------------+\n| IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780cbaba102695645b8c656024db');\n+---------------------------------------------+\n| IS_UUID('6ccd780cbaba102695645b8c656024db') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}');\n+---------------------------------------------------+\n| IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}') |\n+---------------------------------------------------+\n|                                                 1 |\n+---------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c6560');\n+---------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c6560') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID(RAND());\n+-----------------+\n| IS_UUID(RAND()) |\n+-----------------+\n|               0 |\n+-----------------+"], "Examples": ["mysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db');\n+-------------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB');\n+-------------------------------------------------+\n| IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780cbaba102695645b8c656024db');\n+---------------------------------------------+\n| IS_UUID('6ccd780cbaba102695645b8c656024db') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}');\n+---------------------------------------------------+\n| IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}') |\n+---------------------------------------------------+\n|                                                 1 |\n+---------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c6560');\n+---------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c6560') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID(RAND());\n+-----------------+\n| IS_UUID(RAND()) |\n+-----------------+\n|               0 |\n+-----------------+"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_is-uuid"], "Feature Type": ["Function"], "index": 687, "vector_txt": "687:Feature: IS_UUID(string_uuid)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["CRC32(expr)"], "Description": ["Compute a cyclic redundancy check value", "\nCRC32(expr)\n", "\n            Computes a cyclic redundancy check value and returns a\n            32-bit unsigned value. The result is NULL\n            if the argument is NULL. The argument is\n            expected to be a string and (if possible) is treated as one\n            if it is not.\n          ", "Press CTRL+C to copy mysql> SELECT CRC32('MySQL');\n        -> 3259397556\nmysql> SELECT CRC32('mysql');\n        -> 2501908538"], "Examples": ["mysql> SELECT CRC32('MySQL');\n        -> 3259397556\nmysql> SELECT CRC32('mysql');\n        -> 2501908538"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_crc32"], "Feature Type": ["Function"], "index": 688, "vector_txt": "688:Feature: CRC32(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["NAME_CONST(name,value)"], "Description": ["Cause the column to have the given name", "\nNAME_CONST(name,value)\n", "\n          Returns the given value. When used to produce a result set\n          column, NAME_CONST() causes the\n          column to have the given name. The arguments should be\n          constants.\n        ", "Press CTRL+C to copy mysql> SELECT NAME_CONST('myname', 14);\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+", "\n          This function is for internal use only. The server uses it\n          when writing statements from stored programs that contain\n          references to local program variables, as described in\n          Section\u00a027.7, \u201cStored Program Binary Logging\u201d. You might see this\n          function in the output from mysqlbinlog.\n        ", "\n          For your applications, you can obtain exactly the same result\n          as in the example just shown by using simple aliasing, like\n          this:\n        ", "Press CTRL+C to copy mysql> SELECT 14 AS myname;\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+\n1 row in set (0.00 sec)", "\n          See Section\u00a015.2.13, \u201cSELECT Statement\u201d, for more information about\n          column aliases.\n        "], "Examples": ["mysql> SELECT NAME_CONST('myname', 14);\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+", "mysql> SELECT 14 AS myname;\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_name-const"], "Feature Type": ["Function"], "index": 689, "vector_txt": "689:Feature: NAME_CONST(name,value)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["SLEEP(duration)"], "Description": ["Sleep for a number of seconds", "\nSLEEP(duration)\n", "\n          Sleeps (pauses) for the number of seconds given by the\n          duration argument, then returns 0.\n          The duration may have a fractional part. If the argument is\n          NULL or negative,\n          SLEEP() produces a warning, or\n          an error in strict SQL mode.\n        ", "\n          When sleep returns normally (without interruption), it returns\n          0:\n        ", "Press CTRL+C to copy mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           0 |\n+-------------+", "\n          When SLEEP() is the only thing\n          invoked by a query that is interrupted, it returns 1 and the\n          query itself returns no error. This is true whether the query\n          is killed or times out:\n", "\n\n              This statement is interrupted using\n              KILL QUERY\n              from another session:\n            Press CTRL+C to copy mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+\n              This statement is interrupted by timing out:\n            Press CTRL+C to copy mysql> SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+\n", "\n          When SLEEP() is only part of a\n          query that is interrupted, the query returns an error:\n", "\n\n              This statement is interrupted using\n              KILL QUERY\n              from another session:\n            Press CTRL+C to copy mysql> SELECT 1 FROM t1 WHERE SLEEP(1000);\nERROR 1317 (70100): Query execution was interrupted\n              This statement is interrupted by timing out:\n            Press CTRL+C to copy mysql> SELECT /*+ MAX_EXECUTION_TIME(1000) */ 1 FROM t1 WHERE SLEEP(1000);\nERROR 3024 (HY000): Query execution was interrupted, maximum statement\nexecution time exceeded\n", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": ["mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           0 |\n+-------------+", "mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+", "mysql> SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+", "mysql> SELECT 1 FROM t1 WHERE SLEEP(1000);\nERROR 1317 (70100): Query execution was interrupted", "mysql> SELECT /*+ MAX_EXECUTION_TIME(1000) */ 1 FROM t1 WHERE SLEEP(1000);\nERROR 3024 (HY000): Query execution was interrupted, maximum statement\nexecution time exceeded"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_sleep"], "Feature Type": ["Function"], "index": 690, "vector_txt": "690:Feature: SLEEP(duration)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["UUID()"], "Description": ["Return a Universal Unique Identifier (UUID)", "\nUUID()\n", "\n          Returns a Universal Unique Identifier (UUID) generated\n          according to RFC 4122, \u201cA Universally Unique IDentifier\n          (UUID) URN Namespace\u201d\n          (http://www.ietf.org/rfc/rfc4122.txt).\n        ", "\n          A UUID is designed as a number that is globally unique in\n          space and time. Two calls to\n          UUID() are expected to generate\n          two different values, even if these calls are performed on two\n          separate devices not connected to each other.\n", "\n\nWarning\n\n\n            Although UUID() values are\n            intended to be unique, they are not necessarily unguessable\n            or unpredictable. If unpredictability is required, UUID\n            values should be generated some other way.\n\n", "\nUUID() returns a value that\n          conforms to UUID version 1 as described in RFC 4122. The value\n          is a 128-bit number represented as a\n          utf8mb3 string of five hexadecimal numbers\n          in aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\n          format:\n", "\n\n              The first three numbers are generated from the low,\n              middle, and high parts of a timestamp. The high part also\n              includes the UUID version number.\n            \n              The fourth number preserves temporal uniqueness in case\n              the timestamp value loses monotonicity (for example, due\n              to daylight saving time).\n            \n              The fifth number is an IEEE 802 node number that provides\n              spatial uniqueness. A random number is substituted if the\n              latter is not available (for example, because the host\n              device has no Ethernet card, or it is unknown how to find\n              the hardware address of an interface on the host operating\n              system). In this case, spatial uniqueness cannot be\n              guaranteed. Nevertheless, a collision should have\n              very low probability.\n            \n              The MAC address of an interface is taken into account only\n              on FreeBSD, Linux, and Windows. On other operating\n              systems, MySQL uses a randomly generated 48-bit number.\n\n", "Press CTRL+C to copy mysql> SELECT UUID();\n        -> '6ccd780c-baba-1026-9564-5b8c656024db'", "\n          To convert between string and binary UUID values, use the\n          UUID_TO_BIN() and\n          BIN_TO_UUID() functions. To\n          check whether a string is a valid UUID value, use the\n          IS_UUID() function.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Examples": ["mysql> SELECT UUID();\n        -> '6ccd780c-baba-1026-9564-5b8c656024db'"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_uuid"], "Feature Type": ["Function"], "index": 691, "vector_txt": "691:Feature: UUID()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["UUID_SHORT()"], "Description": ["Return an integer-valued universal identifier", "\nUUID_SHORT()\n", "\n          Returns a \u201cshort\u201d universal identifier as a\n          64-bit unsigned integer. Values returned by\n          UUID_SHORT() differ from the\n          string-format 128-bit identifiers returned by the\n          UUID() function and have\n          different uniqueness properties. The value of\n          UUID_SHORT() is guaranteed to\n          be unique if the following conditions hold:\n", "\n\n              The server_id value of\n              the current server is between 0 and 255 and is unique\n              among your set of source and replica servers\n            \n              You do not set back the system time for your server host\n              between mysqld restarts\n            \n              You invoke UUID_SHORT() on\n              average fewer than 16 million times per second between\n              mysqld restarts\n\n", "\n          The UUID_SHORT() return value\n          is constructed this way:\n        ", "Press CTRL+C to copy   (server_id & 255) << 56\n+ (server_startup_time_in_seconds << 24)\n+ incremented_variable++;", "Press CTRL+C to copy mysql> SELECT UUID_SHORT();\n        -> 92395783831158784", "\n\nNote\n\n\nUUID_SHORT() does not work\n            with statement-based replication.\n\n"], "Examples": ["mysql> SELECT UUID_SHORT();\n        -> 92395783831158784"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_uuid-short"], "Feature Type": ["Function"], "index": 692, "vector_txt": "692:Feature: UUID_SHORT()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["UUID_TO_BIN(string_uuid)"], "Description": ["Convert string UUID to binary", "\nUUID_TO_BIN(string_uuid),\n          UUID_TO_BIN(string_uuid,\n          swap_flag)\n", "\n          Converts a string UUID to a binary UUID and returns the\n          result. (The IS_UUID() function\n          description lists the permitted string UUID formats.) The\n          return binary UUID is a\n          VARBINARY(16) value. If the\n          UUID argument is NULL, the return value is\n          NULL. If any argument is invalid, an error\n          occurs.\n        ", "\nUUID_TO_BIN() takes one or two\n          arguments:\n", "\n\n              The one-argument form takes a string UUID value. The\n              binary result is in the same order as the string argument.\n            \n              The two-argument form takes a string UUID value and a flag\n              value:\n\n\n\n                  If swap_flag is 0, the\n                  two-argument form is equivalent to the one-argument\n                  form. The binary result is in the same order as the\n                  string argument.\n                \n                  If swap_flag is 1, the\n                  format of the return value differs: The time-low and\n                  time-high parts (the first and third groups of\n                  hexadecimal digits, respectively) are swapped. This\n                  moves the more rapidly varying part to the right and\n                  can improve indexing efficiency if the result is\n                  stored in an indexed column.\n\n\n\n", "\n          Time-part swapping assumes the use of UUID version 1 values,\n          such as are generated by the\n          UUID() function. For UUID\n          values produced by other means that do not follow version 1\n          format, time-part swapping provides no benefit. For details\n          about version 1 format, see the\n          UUID() function description.\n        ", "\n          Suppose that you have the following string UUID value:\n        ", "Press CTRL+C to copy mysql> SET @uuid = '6ccd780c-baba-1026-9564-5b8c656024db';", "\n          To convert the string UUID to binary with or without time-part\n          swapping, use UUID_TO_BIN():\n        ", "Press CTRL+C to copy mysql> SELECT HEX(UUID_TO_BIN(@uuid));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid))          |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 0));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 0))       |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 1));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 1))       |\n+----------------------------------+\n| 1026BABA6CCD780C95645B8C656024DB |\n+----------------------------------+", "\n          To convert a binary UUID returned by\n          UUID_TO_BIN() to a string UUID,\n          use BIN_TO_UUID(). If you\n          produce a binary UUID by calling\n          UUID_TO_BIN() with a second\n          argument of 1 to swap time parts, you should also pass a\n          second argument of 1 to\n          BIN_TO_UUID() to unswap the\n          time parts when converting the binary UUID back to a string\n          UUID:\n        ", "Press CTRL+C to copy mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid))      |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+", "\n          If the use of time-part swapping is not the same for the\n          conversion in both directions, the original UUID is not\n          recovered properly:\n        ", "Press CTRL+C to copy mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1)  |\n+--------------------------------------+\n| baba1026-780c-6ccd-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0)  |\n+--------------------------------------+\n| 1026baba-6ccd-780c-9564-5b8c656024db |\n+--------------------------------------+", "\n          If UUID_TO_BIN() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SET @uuid = '6ccd780c-baba-1026-9564-5b8c656024db';", "mysql> SELECT HEX(UUID_TO_BIN(@uuid));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid))          |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 0));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 0))       |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 1));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 1))       |\n+----------------------------------+\n| 1026BABA6CCD780C95645B8C656024DB |\n+----------------------------------+", "mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid))      |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+", "mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1)  |\n+--------------------------------------+\n| baba1026-780c-6ccd-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0)  |\n+--------------------------------------+\n| 1026baba-6ccd-780c-9564-5b8c656024db |\n+--------------------------------------+"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_uuid-to-bin"], "Feature Type": ["Function"], "index": 693, "vector_txt": "693:Feature: UUID_TO_BIN(string_uuid)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["VALUES(col_name)"], "Description": ["Define the values to be used during an INSERT", "\nVALUES(col_name)\n", "\n          In an\n          INSERT\n          ... ON DUPLICATE KEY UPDATE statement, you can use\n          the\n          VALUES(col_name)\n          function in the UPDATE clause\n          to refer to column values from the\n          INSERT portion of the\n          statement. In other words,\n          VALUES(col_name)\n          in the UPDATE clause refers to\n          the value of col_name that would be\n          inserted, had no duplicate-key conflict occurred. This\n          function is especially useful in multiple-row inserts. The\n          VALUES() function is meaningful\n          only in the ON DUPLICATE KEY UPDATE clause\n          of INSERT statements and\n          returns NULL otherwise. See\n          Section\u00a015.2.7.2, \u201cINSERT ... ON DUPLICATE KEY UPDATE Statement\u201d.\n        ", "Press CTRL+C to copy mysql> INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\n    -> ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);", "\n\nImportant\n\n\n            This usage is deprecated, and subject to removal in a future\n            release of MySQL. Use a row alias, or row and column\n            aliases, instead. For more information and examples, see\n            Section\u00a015.2.7.2, \u201cINSERT ... ON DUPLICATE KEY UPDATE Statement\u201d.\n\n"], "Examples": ["mysql> INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\n    -> ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_values"], "Feature Type": ["Function"], "index": 694, "vector_txt": "694:Feature: VALUES(col_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.21 Performance Schema Functions"], "Feature": ["FORMAT_BYTES(count)"], "Description": ["Convert byte count to value with units", "\nFORMAT_BYTES(count)\n", "\n          Given a numeric byte count, converts it to human-readable\n          format and returns a string consisting of a value and a units\n          indicator. The string contains the number of bytes rounded to\n          2 decimal places and a minimum of 3 significant digits.\n          Numbers less than 1024 bytes are represented as whole numbers\n          and are not rounded. Returns NULL if\n          count is NULL.\n        ", "\n          The units indicator depends on the size of the byte-count\n          argument as shown in the following table.\n", "\n\nArgument Value\nResult Units\nResult Units Indicator\n\nUp to 1023\nbytes\nbytes\n\nUp to 10242 \u2212 1\nkibibytes\nKiB\n\nUp to 10243 \u2212 1\nmebibytes\nMiB\n\nUp to 10244 \u2212 1\ngibibytes\nGiB\n\nUp to 10245 \u2212 1\ntebibytes\nTiB\n\nUp to 10246 \u2212 1\npebibytes\nPiB\n\n10246 and up\nexbibytes\nEiB\n\n", "Press CTRL+C to copy mysql> SELECT FORMAT_BYTES(512), FORMAT_BYTES(18446644073709551615);\n+-------------------+------------------------------------+\n| FORMAT_BYTES(512) | FORMAT_BYTES(18446644073709551615) |\n+-------------------+------------------------------------+\n|  512 bytes        | 16.00 EiB                          |\n+-------------------+------------------------------------+", "\nFORMAT_BYTES() may be used\n          instead of the sys schema\n          format_bytes() function, keeping\n          in mind this difference:\n", "\n\nFORMAT_BYTES() uses the\n              EiB units indicator.\n              sys.format_bytes() does not.\n\n"], "Examples": ["mysql> SELECT FORMAT_BYTES(512), FORMAT_BYTES(18446644073709551615);\n+-------------------+------------------------------------+\n| FORMAT_BYTES(512) | FORMAT_BYTES(18446644073709551615) |\n+-------------------+------------------------------------+\n|  512 bytes        | 16.00 EiB                          |\n+-------------------+------------------------------------+"], "Category": ["Built-In Functions", "Performance Schema Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_format-bytes"], "Feature Type": ["Function"], "index": 695, "vector_txt": "695:Feature: FORMAT_BYTES(count)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.21 Performance Schema Functions"], "Feature": ["FORMAT_PICO_TIME(time_val)"], "Description": ["Convert time in picoseconds to value with units", "\nFORMAT_PICO_TIME(time_val)\n", "\n          Given a numeric Performance Schema latency or wait time in\n          picoseconds, converts it to human-readable format and returns\n          a string consisting of a value and a units indicator. The\n          string contains the decimal time rounded to 2 decimal places\n          and a minimum of 3 significant digits. Times under 1\n          nanosecond are represented as whole numbers and are not\n          rounded.\n        ", "\n          If time_val is\n          NULL, this function returns\n          NULL.\n        ", "\n          The units indicator depends on the size of the time-value\n          argument as shown in the following table.\n", "\n\nArgument Value\nResult Units\nResult Units Indicator\n\nUp to 103 \u2212 1\npicoseconds\nps\n\nUp to 106 \u2212 1\nnanoseconds\nns\n\nUp to 109 \u2212 1\nmicroseconds\nus\n\nUp to 1012 \u2212 1\nmilliseconds\nms\n\nUp to 60\u00d71012 \u2212 1\nseconds\ns\n\nUp to 3.6\u00d71015 \u2212 1\nminutes\nmin\n\nUp to 8.64\u00d71016 \u2212 1\nhours\nh\n\n8.64\u00d71016 and up\ndays\nd\n\n", "Press CTRL+C to copy mysql> SELECT FORMAT_PICO_TIME(3501), FORMAT_PICO_TIME(188732396662000);\n+------------------------+-----------------------------------+\n| FORMAT_PICO_TIME(3501) | FORMAT_PICO_TIME(188732396662000) |\n+------------------------+-----------------------------------+\n| 3.50 ns                | 3.15 min                          |\n+------------------------+-----------------------------------+", "\nFORMAT_PICO_TIME() may be used\n          instead of the sys schema\n          format_time() function, keeping\n          in mind these differences:\n", "\n\n              To indicate minutes,\n              sys.format_time() uses the\n              m units indicator, whereas\n              FORMAT_PICO_TIME() uses\n              min.\n            \nsys.format_time() uses the\n              w (weeks) units indicator.\n              FORMAT_PICO_TIME() does\n              not.\n\n"], "Examples": ["mysql> SELECT FORMAT_PICO_TIME(3501), FORMAT_PICO_TIME(188732396662000);\n+------------------------+-----------------------------------+\n| FORMAT_PICO_TIME(3501) | FORMAT_PICO_TIME(188732396662000) |\n+------------------------+-----------------------------------+\n| 3.50 ns                | 3.15 min                          |\n+------------------------+-----------------------------------+"], "Category": ["Built-In Functions", "Performance Schema Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_format-pico-time"], "Feature Type": ["Function"], "index": 696, "vector_txt": "696:Feature: FORMAT_PICO_TIME(time_val)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.21 Performance Schema Functions"], "Feature": ["PS_CURRENT_THREAD_ID()"], "Description": ["Performance Schema thread ID for current thread", "\nPS_CURRENT_THREAD_ID()\n", "\n          Returns a BIGINT UNSIGNED value\n          representing the Performance Schema thread ID assigned to the\n          current connection.\n        ", "\n          The thread ID return value is a value of the type given in the\n          THREAD_ID column of Performance Schema\n          tables.\n        ", "\n          Performance Schema configuration affects\n          PS_CURRENT_THREAD_ID() the same\n          way as for PS_THREAD_ID(). For\n          details, see the description of that function.\n        ", "Press CTRL+C to copy mysql> SELECT PS_CURRENT_THREAD_ID();\n+------------------------+\n| PS_CURRENT_THREAD_ID() |\n+------------------------+\n|                     52 |\n+------------------------+\nmysql> SELECT PS_THREAD_ID(CONNECTION_ID());\n+-------------------------------+\n| PS_THREAD_ID(CONNECTION_ID()) |\n+-------------------------------+\n|                            52 |\n+-------------------------------+", "\nPS_CURRENT_THREAD_ID() may be\n          used as a shortcut for invoking the sys\n          schema ps_thread_id() function\n          with an argument of NULL or\n          CONNECTION_ID().\n        "], "Examples": ["mysql> SELECT PS_CURRENT_THREAD_ID();\n+------------------------+\n| PS_CURRENT_THREAD_ID() |\n+------------------------+\n|                     52 |\n+------------------------+\nmysql> SELECT PS_THREAD_ID(CONNECTION_ID());\n+-------------------------------+\n| PS_THREAD_ID(CONNECTION_ID()) |\n+-------------------------------+\n|                            52 |\n+-------------------------------+"], "Category": ["Built-In Functions", "Performance Schema Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_ps-current-thread-id"], "Feature Type": ["Function"], "index": 697, "vector_txt": "697:Feature: PS_CURRENT_THREAD_ID()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.21 Performance Schema Functions"], "Feature": ["PS_THREAD_ID(connection_id)"], "Description": ["Performance Schema thread ID for given thread", "\nPS_THREAD_ID(connection_id)\n", "\n          Given a connection ID, returns a BIGINT\n          UNSIGNED value representing the Performance Schema\n          thread ID assigned to the connection ID, or\n          NULL if no thread ID exists for the\n          connection ID. The latter can occur for threads that are not\n          instrumented, or if connection_id\n          is NULL.\n        ", "\n          The connection ID argument is a value of the type given in the\n          PROCESSLIST_ID column of the Performance\n          Schema threads table or the\n          Id column of SHOW\n          PROCESSLIST output.\n        ", "\n          The thread ID return value is a value of the type given in the\n          THREAD_ID column of Performance Schema\n          tables.\n        ", "\n          Performance Schema configuration affects\n          PS_THREAD_ID() operation as\n          follows. (These remarks also apply to\n          PS_CURRENT_THREAD_ID().)\n", "\n\n              Disabling the thread_instrumentation\n              consumer disables statistics from being collected and\n              aggregated at the thread level, but has no effect on\n              PS_THREAD_ID().\n            \n              If\n              performance_schema_max_thread_instances\n              is not 0, the Performance Schema allocates memory for\n              thread statistics and assigns an internal ID to each\n              thread for which instance memory is available. If there\n              are threads for which instance memory is not available,\n              PS_THREAD_ID() returns\n              NULL; in this case,\n              Performance_schema_thread_instances_lost\n              is nonzero.\n            \n              If\n              performance_schema_max_thread_instances\n              is 0, the Performance Schema allocates no thread memory\n              and PS_THREAD_ID() returns\n              NULL.\n            \n              If the Performance Schema itself is disabled,\n              PS_THREAD_ID() produces an\n              error.\n\n", "Press CTRL+C to copy mysql> SELECT PS_THREAD_ID(6);\n+-----------------+\n| PS_THREAD_ID(6) |\n+-----------------+\n|              45 |\n+-----------------+", "\nPS_THREAD_ID() may be used\n          instead of the sys schema\n          ps_thread_id() function, keeping\n          in mind this difference:\n", "\n\n              With an argument of NULL,\n              sys.ps_thread_id() returns\n              the thread ID for the current connection, whereas\n              PS_THREAD_ID() returns\n              NULL. To obtain the current connection\n              thread ID, use\n              PS_CURRENT_THREAD_ID()\n              instead.\n\n"], "Examples": ["mysql> SELECT PS_THREAD_ID(6);\n+-----------------+\n| PS_THREAD_ID(6) |\n+-----------------+\n|              45 |\n+-----------------+"], "Category": ["Built-In Functions", "Performance Schema Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_ps-thread-id"], "Feature Type": ["Function"], "index": 698, "vector_txt": "698:Feature: PS_THREAD_ID(connection_id)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["CUME_DIST()"], "Description": ["Cumulative distribution value", "\nCUME_DIST()\nover_clause\n", "\n            Returns the cumulative distribution of a value within a\n            group of values; that is, the percentage of partition values\n            less than or equal to the value in the current row. This\n            represents the number of rows preceding or peer with the\n            current row in the window ordering of the window partition\n            divided by the total number of rows in the window partition.\n            Return values range from 0 to 1.\n          ", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers and\n            have value\n            N/N =\n            1, where N is the partition size.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            The following query shows, for the set of values in the\n            val column, the\n            CUME_DIST() value for each row, as well\n            as the percentage rank value returned by the similar\n            PERCENT_RANK() function. For reference,\n            the query also displays row numbers using\n            ROW_NUMBER():\n          ", "Press CTRL+C to copy mysql> SELECT\n         val,\n         ROW_NUMBER()   OVER w AS 'row_number',\n         CUME_DIST()    OVER w AS 'cume_dist',\n         PERCENT_RANK() OVER w AS 'percent_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------------------+--------------+\n| val  | row_number | cume_dist          | percent_rank |\n+------+------------+--------------------+--------------+\n|    1 |          1 | 0.2222222222222222 |            0 |\n|    1 |          2 | 0.2222222222222222 |            0 |\n|    2 |          3 | 0.3333333333333333 |         0.25 |\n|    3 |          4 | 0.6666666666666666 |        0.375 |\n|    3 |          5 | 0.6666666666666666 |        0.375 |\n|    3 |          6 | 0.6666666666666666 |        0.375 |\n|    4 |          7 | 0.8888888888888888 |         0.75 |\n|    4 |          8 | 0.8888888888888888 |         0.75 |\n|    5 |          9 |                  1 |            1 |\n+------+------------+--------------------+--------------+"], "Examples": ["mysql> SELECT\n         val,\n         ROW_NUMBER()   OVER w AS 'row_number',\n         CUME_DIST()    OVER w AS 'cume_dist',\n         PERCENT_RANK() OVER w AS 'percent_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------------------+--------------+\n| val  | row_number | cume_dist          | percent_rank |\n+------+------------+--------------------+--------------+\n|    1 |          1 | 0.2222222222222222 |            0 |\n|    1 |          2 | 0.2222222222222222 |            0 |\n|    2 |          3 | 0.3333333333333333 |         0.25 |\n|    3 |          4 | 0.6666666666666666 |        0.375 |\n|    3 |          5 | 0.6666666666666666 |        0.375 |\n|    3 |          6 | 0.6666666666666666 |        0.375 |\n|    4 |          7 | 0.8888888888888888 |         0.75 |\n|    4 |          8 | 0.8888888888888888 |         0.75 |\n|    5 |          9 |                  1 |            1 |\n+------+------------+--------------------+--------------+"], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_cume-dist"], "Feature Type": ["Function"], "index": 699, "vector_txt": "699:Feature: CUME_DIST()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_add_managed()"], "Description": ["Add group member source server configuration information to a", "\nasynchronous_connection_failover_add_managed()\n", "\n            Add configuration information for a replication source\n            server that is part of a managed group (a Group Replication\n            group member) to the source list for a replication channel.\n            You only need to add one group member. The replica\n            automatically adds the rest from the current group\n            membership, then keeps the source list updated in line with\n            membership change.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_add_managed(channel, managed_type, managed_name, host, port, network_namespace, primary_weight, secondary_weight)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server is part\n                of the source list.\n              \nmanaged_type: The type of\n                managed service that the asynchronous connection\n                failover mechanism must provide for this server. The\n                only value currently accepted is\n                GroupReplication.\n              \nmanaged_name: The identifier\n                for the managed group that the server is a part of. For\n                the GroupReplication managed service,\n                the identifier is the value of the\n                group_replication_group_name\n                system variable.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n              \nprimary_weight: The priority\n                of this replication source server in the replication\n                channel's source list when it is acting as the primary\n                for the managed group. The weight is from 1 to 100, with\n                100 being the highest. For the primary, 80 is a suitable\n                weight. The asynchronous connection failover mechanism\n                activates if the currently connected source is not the\n                highest weighted in the group. Assuming that you set up\n                the managed group to give a higher weight to a primary\n                and a lower weight to a secondary, when the primary\n                changes, its weight increases, and the replica changes\n                over the connection to it.\n              \nsecondary_weight: The\n                priority of this replication source server in the\n                replication channel's source list when it is acting as a\n                secondary in the managed group. The weight is from 1 to\n                100, with 100 being the highest. For a secondary, 60 is\n                a suitable weight.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_add_managed('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60);\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60) |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully inserted.                                                                                        |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_add_managed('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60);\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60) |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully inserted.                                                                                        |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-managed"], "Feature Type": ["Function"], "index": 700, "vector_txt": "700:Feature: asynchronous_connection_failover_add_managed()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_add_source()"], "Description": ["Add source server configuration information server to a", "\nasynchronous_connection_failover_add_source()\n", "\n            Add configuration information for a replication source\n            server to the source list for a replication channel.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_add_source(channel, host, port, network_namespace, weight)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server is part\n                of the source list.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n              \nweight: The priority of this\n                replication source server in the replication channel's\n                source list. The priority is from 1 to 100, with 100\n                being the highest, and 50 being the default. When the\n                asynchronous connection failover mechanism activates,\n                the source with the highest priority setting among the\n                alternative sources listed in the source list for the\n                channel is chosen for the first connection attempt. If\n                this attempt does not work, the replica tries with all\n                the listed sources in descending order of priority, then\n                starts again from the highest priority source. If\n                multiple sources have the same priority, the replica\n                orders them randomly. The asynchronous connection\n                failover mechanism activates if the source currently\n                connected is not the highest weighted in the group.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80);\n+-------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80)              |\n+-------------------------------------------------------------------------------------------------+\n| Source configuration details successfully inserted.                                             |\n+-------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80);\n+-------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80)              |\n+-------------------------------------------------------------------------------------------------+\n| Source configuration details successfully inserted.                                             |\n+-------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-source"], "Feature Type": ["Function"], "index": 701, "vector_txt": "701:Feature: asynchronous_connection_failover_add_source()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.3 Asynchronous Replication Channel Failover Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_delete_managed()"], "Description": ["Remove a managed group from a replication channel source list", "\nasynchronous_connection_failover_delete_managed()\n", "\n            Remove an entire managed group from the source list for a\n            replication channel. When you use this function, all the\n            replication source servers defined in the managed group are\n            removed from the channel's source list.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_delete_managed(channel, managed_name)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server was\n                part of the source list.\n              \nmanaged_name: The identifier\n                for the managed group that the server is a part of. For\n                the GroupReplication managed service,\n                the identifier is the value of the\n                group_replication_group_name\n                system variable.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa');\n+-----------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa') |\n+-----------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully deleted.                                          |\n+-----------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa');\n+-----------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa') |\n+-----------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully deleted.                                          |\n+-----------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-managed"], "Feature Type": ["Function"], "index": 702, "vector_txt": "702:Feature: asynchronous_connection_failover_delete_managed()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18.3 Asynchronous Replication Channel Failover Functions", "14.2 Loadable Function Reference"], "Feature": ["asynchronous_connection_failover_delete_source()"], "Description": ["Remove a source server from a replication channel source list", "\nasynchronous_connection_failover_delete_source()\n", "\n            Remove configuration information for a replication source\n            server from the source list for a replication channel.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_delete_source(channel, host, port, network_namespace)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server was\n                part of the source list.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '');\n+------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '')              |\n+------------------------------------------------------------------------------------------------+\n| Source configuration details successfully deleted.                                             |\n+------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Examples": ["SELECT asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '');\n+------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '')              |\n+------------------------------------------------------------------------------------------------+\n| Source configuration details successfully deleted.                                             |\n+------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-source"], "Feature Type": ["Function"], "index": 703, "vector_txt": "703:Feature: asynchronous_connection_failover_delete_source()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions"], "Feature": ["asynchronous_connection_failover_reset()"], "Description": ["Remove all settings relating to group replication asynchronous", "\nasynchronous_connection_failover_reset()\n", "\n            Remove all settings relating to the asynchronous connection\n            failover mechanism. The function clears the Performance\n            Schema tables\n            replication_asynchronous_connection_failover\n            and\n            replication_asynchronous_connection_failover_managed.\n          ", "\nasynchronous_connection_failover_reset()\n            can be used only on a server that is not currently part of a\n            group, and that does not have any replication channels\n            running. You can use this function to clean up a server that\n            is no longer being used in a managed group.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy STRING asynchronous_connection_failover_reset()", "\n            Arguments:\n          ", "\n            None.\n          ", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy mysql> SELECT asynchronous_connection_failover_reset();\n+-------------------------------------------------------------------------+\n| asynchronous_connection_failover_reset()                                |\n+-------------------------------------------------------------------------+\n| The UDF asynchronous_connection_failover_reset() executed successfully. |\n+-------------------------------------------------------------------------+\n1 row in set (0.00 sec)", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n"], "Examples": ["mysql> SELECT asynchronous_connection_failover_reset();\n+-------------------------------------------------------------------------+\n| asynchronous_connection_failover_reset()                                |\n+-------------------------------------------------------------------------+\n| The UDF asynchronous_connection_failover_reset() executed successfully. |\n+-------------------------------------------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Replication Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-reset"], "Feature Type": ["Function"], "index": 704, "vector_txt": "704:Feature: asynchronous_connection_failover_reset()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_disable_member_action()"], "Description": ["Disable member action for event specified", "\ngroup_replication_disable_member_action()\n", "\n              Disable a member action so that the member does not take\n              it in the specified situation. If the server where you use\n              the function is part of a group, it must be the current\n              primary in a group in single-primary mode, and it must be\n              part of the majority. The changed setting is propagated to\n              other group members and joining members, so they will all\n              act in the same way when they are in the specified\n              situation, and you only need to use the function on the\n              primary.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_disable_member_action(name, event)", "\n              Arguments:\n", "\n\nname: The name of the\n                  member action to disable.\n                \nevent: The event that\n                  triggers the member action.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_disable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n            "], "Examples": ["SELECT group_replication_disable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-disable-member-action"], "Feature Type": ["Function"], "index": 705, "vector_txt": "705:Feature: group_replication_disable_member_action()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_enable_member_action()"], "Description": ["Enable member action for event specified", "\ngroup_replication_enable_member_action()\n", "\n              Enable a member action for the member to take in the\n              specified situation. If the server where you use the\n              function is part of a group, it must be the current\n              primary in a group in single-primary mode, and it must be\n              part of the majority. The changed setting is propagated to\n              other group members and joining members, so they will all\n              act in the same way when they are in the specified\n              situation, and you only need to use the function on the\n              primary.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_enable_member_action(name, event)", "\n              Arguments:\n", "\n\nname: The name of the\n                  member action to enable.\n                \nevent: The event that\n                  triggers the member action.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_enable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n            "], "Examples": ["SELECT group_replication_enable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-enable-member-action"], "Feature Type": ["Function"], "index": 706, "vector_txt": "706:Feature: group_replication_enable_member_action()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_get_communication_protocol()"], "Description": ["Get version of group replication communication protocol currently", "\ngroup_replication_get_communication_protocol()\n", "\n              Inspect the Group Replication communication protocol\n              version that is currently in use for a group.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_get_communication_protocol()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              The oldest MySQL Server version that can join this group\n              and use the group's communication protocol. Note that\n              the\n              group_replication_get_communication_protocol()\n              function returns the minimum MySQL version that the group\n              supports, which might differ from the version number that\n              was passed to\n              group_replication_set_communication_protocol(),\n              and from the MySQL Server version that is installed on the\n              member where you use the function.\n            ", "\n              If the protocol cannot be inspected because this server\n              instance does not belong to a replication group, an error\n              is returned as a string.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_get_communication_protocol();\n+------------------------------------------------+\n| group_replication_get_communication_protocol() |\n+------------------------------------------------+\n| 8.4.0                                          |\n+------------------------------------------------+", "\n              For more information, see\n              Section\u00a020.5.1.4, \u201cSetting a Group's Communication Protocol Version\u201d.\n            "], "Examples": ["SELECT group_replication_get_communication_protocol();\n+------------------------------------------------+\n| group_replication_get_communication_protocol() |\n+------------------------------------------------+\n| 8.4.0                                          |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-communication-protocol.html#function_group-replication-get-communication-protocol"], "Feature Type": ["Function"], "index": 707, "vector_txt": "707:Feature: group_replication_get_communication_protocol()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_get_write_concurrency()"], "Description": ["Get maximum number of consensus instances currently set for group", "\ngroup_replication_get_write_concurrency()\n", "\n              Check the maximum number of consensus instances that a\n              group can execute in parallel.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy INT group_replication_get_write_concurrency()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              The maximum number of consensus instances currently set\n              for the group.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_get_write_concurrency()", "\n              For more information, see\n              Section\u00a020.5.1.3, \u201cUsing Group Replication Group Write Consensus\u201d.\n            "], "Examples": [], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-maximum-consensus.html#function_group-replication-get-write-concurrency"], "Feature Type": ["Function"], "index": 708, "vector_txt": "708:Feature: group_replication_get_write_concurrency()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_reset_member_actions()"], "Description": ["Reset all member actions to defaults and configuration version", "\ngroup_replication_reset_member_actions()\n", "\n              Reset the member actions configuration to the default\n              settings, and reset its version number to 1.\n            ", "\n              The\n              group_replication_reset_member_actions()\n              function can only be used on a server that is not\n              currently part of a group. The server must be writeable\n              (with the read_only\n              system variable set to OFF) and have\n              the Group Replication plugin installed. You can use this\n              function to remove the member actions configuration that a\n              server used when it was part of a group, if you intend to\n              use it as a standalone server with no member actions or\n              different member actions.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_reset_member_actions()", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_reset_member_actions();", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n"], "Examples": ["SELECT group_replication_reset_member_actions();"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-reset-member-actions"], "Feature Type": ["Function"], "index": 709, "vector_txt": "709:Feature: group_replication_reset_member_actions()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CURDATE()"], "Description": ["Return the current date", "\nCURDATE()\n", "\n          Returns the current date as a value in\n          'YYYY-MM-DD' or\n          YYYYMMDD format, depending on\n          whether the function is used in string or numeric context.\n        ", "Press CTRL+C to copy mysql> SELECT CURDATE();\n        -> '2008-06-13'\nmysql> SELECT CURDATE() + 0;\n        -> 20080613"], "Examples": ["mysql> SELECT CURDATE();\n        -> '2008-06-13'\nmysql> SELECT CURDATE() + 0;\n        -> 20080613"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_curdate"], "Feature Type": ["Function"], "index": 710, "vector_txt": "710:Feature: CURDATE()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_set_as_primary()"], "Description": ["Make a specific group member the primary", "\ngroup_replication_set_as_primary()\n", "\n              Appoints a specific member of the group as the new\n              primary, overriding any election process.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_as_primary(member_uuid[, timeout])", "\n              Arguments:\n", "\n\nmember_uuid: A string\n                  containing the UUID of the member of the group that\n                  you want to become the new primary.\n                \ntimeout: An integer\n                  specifying a timeout in seconds for transactions that\n                  are running on the existing primary when you use the\n                  function. You can set a timeout from 0 seconds\n                  (immediately) up to 3600 seconds (60 minutes). When\n                  you set a timeout, new transactions cannot start on\n                  the primary from that point on. There is no default\n                  setting for the timeout, so if you do not set it,\n                  there is no upper limit to the wait time, and new\n                  transactions can start during that time.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_as_primary(\u201800371d66-3c45-11ea-804b-080027337932\u2019, 300);", "\n              This function waits for all ongoing transactions and DML\n              operations to finish before electing the new primary. In\n              MySQL 8.4, it also waits for the completion\n              of any ongoing DDL statements such as\n              ALTER TABLE. Operations\n              that are considered DDL statements for this purpose are\n              listed here:\n", "\n\nALTER DATABASE\n\nALTER FUNCTION\n\nALTER INSTANCE\n\nALTER PROCEDURE\n\nALTER SERVER\n\nALTER TABLE\n\nALTER TABLESPACE\n\nALTER USER\n\nALTER VIEW\n\nANALYZE TABLE\n\nCACHE INDEX\n\nCHECK TABLE\n\nCREATE DATABASE\n\nCREATE FUNCTION\n\nCREATE INDEX\n\nCREATE ROLE\n\nCREATE PROCEDURE\n\nCREATE SERVER\n\nCREATE SPATIAL REFERENCE\n                  SYSTEM\n\nCREATE TABLE\n\nCREATE TABLESPACE\n\nCREATE TRIGGER\n\nCREATE USER\n\nCREATE VIEW\n\nDROP DATABASE\n\nDROP FUNCTION\n\nDROP INDEX\n\nDROP PROCEDURE\n\nDROP ROLE\n\nDROP SERVER\n\nDROP SPATIAL REFERENCE\n                  SYSTEM\n\nDROP TABLE\n\nDROP TABLESPACE\n\nDROP TRIGGER\n\nDROP USER\n\nDROP VIEW\n\nGRANT\n\nLOAD INDEX\n\nOPTIMIZE TABLE\n\nRENAME TABLE\n\nREPAIR TABLE\n\nREVOKE\n\nTRUNCATE TABLE\n\n", "\n              This also includes any open cursors (see\n              Section\u00a015.6.6, \u201cCursors\u201d).\n            ", "\n              For more information, see\n              Section\u00a020.5.1.1, \u201cChanging the Primary\u201d.\n"], "Examples": ["SELECT group_replication_set_as_primary(\u201800371d66-3c45-11ea-804b-080027337932\u2019, 300);"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-new-primary.html#function_group-replication-set-as-primary"], "Feature Type": ["Function"], "index": 711, "vector_txt": "711:Feature: group_replication_set_as_primary()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_set_communication_protocol()"], "Description": ["Set version for group replication communication protocol to use", "\ngroup_replication_set_communication_protocol()\n", "\n              Downgrade the Group Replication communication protocol\n              version of a group so that members at earlier releases can\n              join, or upgrade the Group Replication communication\n              protocol version of a group after upgrading MySQL Server\n              on all members. The\n              GROUP_REPLICATION_ADMIN\n              privilege is required to use this function, and all\n              existing group members must be online when you issue the\n              statement, with no loss of majority.\n", "\n\nNote\n\n\n                For MySQL InnoDB cluster, the communication protocol\n                version is managed automatically whenever the cluster\n                topology is changed using AdminAPI operations. You do\n                not have to use these functions yourself for an InnoDB\n                cluster.\n\n", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_communication_protocol(version)", "\n              Arguments:\n", "\n\nversion: For a downgrade,\n                  specify the MySQL Server version of the prospective\n                  group member that has the oldest installed server\n                  version. In this case, the command makes the group\n                  fall back to a communication protocol compatible with\n                  that server version if possible. The minimum server\n                  version that you can specify is MySQL 5.7.14. For an\n                  upgrade, specify the new MySQL Server version to which\n                  the existing group members have been upgraded.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_communication_protocol(\"5.7.25\");", "\n              For more information, see\n              Section\u00a020.5.1.4, \u201cSetting a Group's Communication Protocol Version\u201d.\n"], "Examples": ["SELECT group_replication_set_communication_protocol(\"5.7.25\");"], "Category": ["Built-In Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-communication-protocol.html#function_group-replication-set-communication-protocol"], "Feature Type": ["Function"], "index": 712, "vector_txt": "712:Feature: group_replication_set_communication_protocol()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_set_write_concurrency()"], "Description": ["Set maximum number of consensus instances that can be executed in", "\ngroup_replication_set_write_concurrency()\n", "\n              Configures the maximum number of consensus instances that\n              a group can execute in parallel. The\n              GROUP_REPLICATION_ADMIN\n              privilege is required to use this function.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_write_concurrency(instances)", "\n              Arguments:\n", "\n\nmembers: Sets the maximum\n                  number of consensus instances that a group can execute\n                  in parallel. Default value is 10, valid values are\n                  integers in the range of 10 to 200.\n\n", "\n              Return value:\n            ", "\n              Any resulting error as a string.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_write_concurrency(instances);", "\n              For more information, see\n              Section\u00a020.5.1.3, \u201cUsing Group Replication Group Write Consensus\u201d.\n"], "Examples": ["SELECT group_replication_set_write_concurrency(instances);"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-maximum-consensus.html#function_group-replication-set-write-concurrency"], "Feature Type": ["Function"], "index": 713, "vector_txt": "713:Feature: group_replication_set_write_concurrency()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_switch_to_multi_primary_mode()"], "Description": ["Changes the mode of a group running in single-primary mode to", "\ngroup_replication_switch_to_multi_primary_mode()\n", "\n              Changes a group running in single-primary mode to\n              multi-primary mode. Must be issued on a member of a\n              replication group running in single-primary mode.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_switch_to_multi_primary_mode()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_switch_to_multi_primary_mode()", "\n              All members which belong to the group become primaries.\n            ", "\n              For more information, see\n              Section\u00a020.5.1.2, \u201cChanging the Group Mode\u201d\n"], "Examples": [], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-mode.html#function_group-replication-switch-to-multi-primary-mode"], "Feature Type": ["Function"], "index": 714, "vector_txt": "714:Feature: group_replication_switch_to_multi_primary_mode()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/loadable-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.1 Group Replication Functions", "14.2 Loadable Function Reference"], "Feature": ["group_replication_switch_to_single_primary_mode()"], "Description": ["Changes the mode of a group running in multi-primary mode to", "\ngroup_replication_switch_to_single_primary_mode()\n", "\n              Changes a group running in multi-primary mode to\n              single-primary mode, without the need to stop Group\n              Replication. Must be issued on a member of a replication\n              group running in multi-primary mode. When you change to\n              single-primary mode, strict consistency checks are also\n              disabled on all group members, as required in\n              single-primary mode\n              (group_replication_enforce_update_everywhere_checks=OFF).\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_switch_to_single_primary_mode([str])", "\n              Arguments:\n", "\n\nstr: A string containing\n                  the UUID of a member of the group which should become\n                  the new single primary. Other members of the group\n                  become secondaries.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_switch_to_single_primary_mode(member_uuid);", "\n              For more information, see\n              Section\u00a020.5.1.2, \u201cChanging the Group Mode\u201d\n"], "Examples": ["SELECT group_replication_switch_to_single_primary_mode(member_uuid);"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions", "Loadable Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-mode.html#function_group-replication-switch-to-single-primary-mode"], "Feature Type": ["Function"], "index": 715, "vector_txt": "715:Feature: group_replication_switch_to_single_primary_mode()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-synchronization.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.4 Position-Based Synchronization Functions"], "Feature": ["MASTER_POS_WAIT(log_name,log_pos[,timeout][,channel])"], "Description": ["Block until the replica has read and applied all updates up to the", "\nMASTER_POS_WAIT(log_name,log_pos[,timeout][,channel])\n", "\n            Deprecated alias for\n            SOURCE_POS_WAIT().\n          "], "Examples": [], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-synchronization.html#function_master-pos-wait"], "Feature Type": ["Function"], "index": 716, "vector_txt": "716:Feature: MASTER_POS_WAIT(log_name,log_pos[,timeout][,channel])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-synchronization.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.4 Position-Based Synchronization Functions"], "Feature": ["SOURCE_POS_WAIT(log_name,log_pos[,timeout][,channel])"], "Description": ["Block until the replica has read and applied all updates up to the", "\nSOURCE_POS_WAIT(log_name,log_pos[,timeout][,channel])\n", "\n            This function is for control of source-replica\n            synchronization. It blocks until the replica has read and\n            applied all updates up to the specified position in the\n            source's binary log.\n          ", "\n            The return value is the number of log events the replica had\n            to wait for to advance to the specified position. The\n            function returns NULL if the replication\n            SQL thread is not started, the replica's source information\n            is not initialized, the arguments are incorrect, or an error\n            occurs. It returns -1 if the timeout has\n            been exceeded. If the replication SQL thread stops while\n            SOURCE_POS_WAIT() is waiting,\n            the function returns NULL. If the replica\n            is past the specified position, the function returns\n            immediately.\n          ", "\n            If the binary log file position has been marked as invalid,\n            the function waits until a valid file position is known. The\n            binary log file position can be marked as invalid when the\n            CHANGE REPLICATION SOURCE TO\n            option GTID_ONLY is set for the\n            replication channel, and the server is restarted or\n            replication is stopped. The file position becomes valid\n            after a transaction is successfully applied past the given\n            file position. If the applier does not reach the stated\n            position, the function waits until the timeout. Use a\n            SHOW REPLICA STATUS statement\n            to check if the binary log file position has been marked as\n            invalid.\n          ", "\n            On a multithreaded replica, the function waits until expiry\n            of the limit set by the\n            replica_checkpoint_group or\n            replica_checkpoint_period\n            system variable, when the checkpoint operation is called to\n            update the status of the replica. Depending on the setting\n            for the system variables, the function might therefore\n            return some time after the specified position was reached.\n          ", "\n            If binary log transaction compression is in use and the\n            transaction payload at the specified position is compressed\n            (as a Transaction_payload_event), the\n            function waits until the whole transaction has been read and\n            applied, and the positions have updated.\n          ", "\n            If a timeout value is specified,\n            SOURCE_POS_WAIT() stops\n            waiting when timeout seconds have\n            elapsed. timeout must be greater\n            than or equal to 0. (When the server is running in strict\n            SQL mode, a negative timeout\n            value is immediately rejected with\n            ER_WRONG_ARGUMENTS;\n            otherwise the function returns NULL, and\n            raises a warning.)\n          ", "\n            The optional channel value\n            enables you to name which replication channel the function\n            applies to. See Section\u00a019.2.2, \u201cReplication Channels\u201d for\n            more information.\n          ", "\n            This function is unsafe for statement-based replication. A\n            warning is logged if you use this function when\n            binlog_format is set to\n            STATEMENT.\n"], "Examples": [], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replication-functions-synchronization.html#function_source-pos-wait"], "Feature Type": ["Function"], "index": 717, "vector_txt": "717:Feature: SOURCE_POS_WAIT(log_name,log_pos[,timeout][,channel])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/replication-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/gtid-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.18 Replication Functions", "14.18.2 Functions Used with Global Transaction Identifiers (GTIDs)"], "Feature": ["WAIT_FOR_EXECUTED_GTID_SET(gtid_set[,\n            timeout])"], "Description": ["Wait until the given GTIDs have executed on the replica.", "\nWAIT_FOR_EXECUTED_GTID_SET(gtid_set[,\n            timeout])\n", "\n            Wait until the server has applied all of the transactions\n            whose global transaction identifiers are contained in\n            gtid_set; that is, until the\n            condition\n            GTID_SUBSET(gtid_subset,\n            @@GLOBAL.gtid_executed) holds. See\n            Section\u00a019.1.3.1, \u201cGTID Format and Storage\u201d for a\n            definition of GTID sets.\n          ", "\n            If a timeout is specified, and\n            timeout seconds elapse before all\n            of the transactions in the GTID set have been applied, the\n            function stops waiting. timeout\n            is optional, and the default timeout is 0 seconds, in which\n            case the function always waits until all of the transactions\n            in the GTID set have been applied.\n            timeout must be greater than or\n            equal to 0; when running in strict SQL mode, a negative\n            timeout value is immediately\n            rejected with an error\n            (ER_WRONG_ARGUMENTS);\n            otherwise the function returns NULL, and\n            raises a warning.\n          ", "\nWAIT_FOR_EXECUTED_GTID_SET() monitors all\n            the GTIDs that are applied on the server, including\n            transactions that arrive from all replication channels and\n            user clients. It does not take into account whether\n            replication channels have been started or stopped.\n          ", "\n            For more information, see\n            Section\u00a019.1.3, \u201cReplication with Global Transaction Identifiers\u201d.\n          ", "\n            GTID sets used with this function are represented as strings\n            and so must be quoted as shown in the following example:\n          ", "Press CTRL+C to copy mysql> SELECT WAIT_FOR_EXECUTED_GTID_SET('3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5');\n        -> 0", "\n            For a syntax description for GTID sets, see\n            Section\u00a019.1.3.1, \u201cGTID Format and Storage\u201d.\n          ", "\n            For WAIT_FOR_EXECUTED_GTID_SET(), the\n            return value is the state of the query, where 0 represents\n            success, and 1 represents timeout. Any other failures\n            generate an error.\n          ", "\ngtid_mode cannot be changed\n            to OFF while any client is using this function to wait for\n            GTIDs to be applied.\n"], "Examples": ["mysql> SELECT WAIT_FOR_EXECUTED_GTID_SET('3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5');\n        -> 0"], "Category": ["Built-In Functions", "Replication Functions", "Replication Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gtid-functions.html#function_wait-for-executed-gtid-set"], "Feature Type": ["Function"], "index": 718, "vector_txt": "718:Feature: WAIT_FOR_EXECUTED_GTID_SET(gtid_set[,\n            timeout])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["GeomCollection(g\n          [, g] ...)"], "Description": ["Construct geometry collection from geometries", "\nGeomCollection(g\n          [, g] ...)\n", "\n          Constructs a GeomCollection value from the\n          geometry arguments.\n        ", "\nGeomCollection() returns all\n          the proper geometries contained in the arguments even if a\n          nonsupported geometry is present.\n        ", "\nGeomCollection() with no\n          arguments is permitted as a way to create an empty geometry.\n          Also, functions such as\n          ST_GeomFromText() that accept\n          WKT geometry collection arguments understand both OpenGIS\n          'GEOMETRYCOLLECTION EMPTY' standard syntax\n          and MySQL 'GEOMETRYCOLLECTION()'\n          nonstandard syntax.\n        ", "\nGeomCollection() and\n          GeometryCollection() are\n          synonymous, with\n          GeomCollection() the preferred\n          function.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_geomcollection"], "Feature Type": ["Function"], "index": 719, "vector_txt": "719:Feature: GeomCollection(g\n          [, g] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["GeometryCollection(g\n          [, g] ...)"], "Description": ["Construct geometry collection from geometries", "\nGeometryCollection(g\n          [, g] ...)\n", "\n          Constructs a GeomCollection value from the\n          geometry arguments.\n        ", "\nGeometryCollection() returns\n          all the proper geometries contained in the arguments even if a\n          nonsupported geometry is present.\n        ", "\nGeometryCollection() with no\n          arguments is permitted as a way to create an empty geometry.\n          Also, functions such as\n          ST_GeomFromText() that accept\n          WKT geometry collection arguments understand both OpenGIS\n          'GEOMETRYCOLLECTION EMPTY' standard syntax\n          and MySQL 'GEOMETRYCOLLECTION()'\n          nonstandard syntax.\n        ", "\nGeomCollection() and\n          GeometryCollection() are\n          synonymous, with\n          GeomCollection() the preferred\n          function.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_geometrycollection"], "Feature Type": ["Function"], "index": 720, "vector_txt": "720:Feature: GeometryCollection(g\n          [, g] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CURRENT_DATE"], "Description": ["Synonyms for CURDATE()", "\nCURRENT_DATE,\n          CURRENT_DATE()\n", "\nCURRENT_DATE and\n          CURRENT_DATE() are synonyms for\n          CURDATE().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-date"], "Feature Type": ["Function"], "index": 721, "vector_txt": "721:Feature: CURRENT_DATE\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["LineString(pt\n          [, pt] ...)"], "Description": ["Construct LineString from Point values", "\nLineString(pt\n          [, pt] ...)\n", "\n          Constructs a LineString value from a number\n          of Point or WKB Point\n          arguments. If the number of arguments is less than two, the\n          return value is NULL.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_linestring"], "Feature Type": ["Function"], "index": 722, "vector_txt": "722:Feature: LineString(pt\n          [, pt] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRContains(g1,\n            g2)"], "Description": ["Whether MBR of one geometry contains MBR of another", "\nMBRContains(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 contains the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRWithin().\n          ", "\nMBRContains() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);\n+----------------------+--------------------+\n| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |\n+----------------------+--------------------+\n|                    1 |                  1 |\n+----------------------+--------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);\n+----------------------+--------------------+\n| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |\n+----------------------+--------------------+\n|                    1 |                  1 |\n+----------------------+--------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrcontains"], "Feature Type": ["Function"], "index": 723, "vector_txt": "723:Feature: MBRContains(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRCoveredBy(g1,\n            g2)"], "Description": ["Whether one MBR is covered by another", "\nMBRCoveredBy(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 is covered by the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRCovers().\n          ", "\nMBRCoveredBy() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRCovers(@g1,@g2), MBRCoveredby(@g1,@g2);\n+--------------------+-----------------------+\n| MBRCovers(@g1,@g2) | MBRCoveredby(@g1,@g2) |\n+--------------------+-----------------------+\n|                  1 |                     0 |\n+--------------------+-----------------------+\nmysql> SELECT MBRCovers(@g2,@g1), MBRCoveredby(@g2,@g1);\n+--------------------+-----------------------+\n| MBRCovers(@g2,@g1) | MBRCoveredby(@g2,@g1) |\n+--------------------+-----------------------+\n|                  0 |                     1 |\n+--------------------+-----------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRCovers(@g1,@g2), MBRCoveredby(@g1,@g2);\n+--------------------+-----------------------+\n| MBRCovers(@g1,@g2) | MBRCoveredby(@g1,@g2) |\n+--------------------+-----------------------+\n|                  1 |                     0 |\n+--------------------+-----------------------+\nmysql> SELECT MBRCovers(@g2,@g1), MBRCoveredby(@g2,@g1);\n+--------------------+-----------------------+\n| MBRCovers(@g2,@g1) | MBRCoveredby(@g2,@g1) |\n+--------------------+-----------------------+\n|                  0 |                     1 |\n+--------------------+-----------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrcoveredby"], "Feature Type": ["Function"], "index": 724, "vector_txt": "724:Feature: MBRCoveredBy(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRCovers(g1,\n            g2)"], "Description": ["Whether one MBR covers another", "\nMBRCovers(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 covers the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRCoveredBy(). See the\n            description of MBRCoveredBy()\n            for examples.\n          ", "\nMBRCovers() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrcovers"], "Feature Type": ["Function"], "index": 725, "vector_txt": "725:Feature: MBRCovers(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRDisjoint(g1,\n            g2)"], "Description": ["Whether MBRs of two geometries are disjoint", "\nMBRDisjoint(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangles of the two geometries\n            g1 and\n            g2 are disjoint (do not\n            intersect).\n          ", "\nMBRDisjoint() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrdisjoint"], "Feature Type": ["Function"], "index": 726, "vector_txt": "726:Feature: MBRDisjoint(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBREquals(g1,\n            g2)"], "Description": ["Whether MBRs of two geometries are equal", "\nMBREquals(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangles of the two geometries\n            g1 and\n            g2 are the same.\n          ", "\nMBREquals() handles its\n            arguments as described in the introduction to this section,\n            except that it does not return NULL for\n            empty geometry arguments.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrequals"], "Feature Type": ["Function"], "index": 727, "vector_txt": "727:Feature: MBREquals(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRIntersects(g1,\n            g2)"], "Description": ["Whether MBRs of two geometries intersect", "\nMBRIntersects(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangles of the two geometries\n            g1 and\n            g2 intersect.\n          ", "\nMBRIntersects() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrintersects"], "Feature Type": ["Function"], "index": 728, "vector_txt": "728:Feature: MBRIntersects(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBROverlaps(g1,\n            g2)"], "Description": ["Whether MBRs of two geometries overlap", "\nMBROverlaps(g1,\n            g2)\n", "\n            Two geometries spatially overlap if\n            they intersect and their intersection results in a geometry\n            of the same dimension but not equal to either of the given\n            geometries.\n          ", "\n            This function returns 1 or 0 to indicate whether the minimum\n            bounding rectangles of the two geometries\n            g1 and\n            g2 overlap.\n          ", "\nMBROverlaps() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbroverlaps"], "Feature Type": ["Function"], "index": 729, "vector_txt": "729:Feature: MBROverlaps(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRTouches(g1,\n            g2)"], "Description": ["Whether MBRs of two geometries touch", "\nMBRTouches(g1,\n            g2)\n", "\n            Two geometries spatially touch if their\n            interiors do not intersect, but the boundary of one of the\n            geometries intersects either the boundary or the interior of\n            the other.\n          ", "\n            This function returns 1 or 0 to indicate whether the minimum\n            bounding rectangles of the two geometries\n            g1 and\n            g2 touch.\n          ", "\nMBRTouches() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrtouches"], "Feature Type": ["Function"], "index": 730, "vector_txt": "730:Feature: MBRTouches(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MBRWithin(g1,\n            g2)"], "Description": ["Whether MBR of one geometry is within MBR of another", "\nMBRWithin(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 is within the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRContains().\n          ", "\nMBRWithin() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');\nmysql> SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');\nmysql> SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrwithin"], "Feature Type": ["Function"], "index": 731, "vector_txt": "731:Feature: MBRWithin(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["CURRENT_ROLE()"], "Description": ["Return the current active roles", "\nCURRENT_ROLE()\n", "\n          Returns a utf8mb3 string containing the\n          current active roles for the current session, separated by\n          commas, or NONE if there are none. The\n          value reflects the setting of the\n          sql_quote_show_create system\n          variable.\n        ", "\n          Suppose that an account is granted roles as follows:\n        ", "Press CTRL+C to copy GRANT 'r1', 'r2' TO 'u1'@'localhost';\nSET DEFAULT ROLE ALL TO 'u1'@'localhost';", "\n          In sessions for u1, the initial\n          CURRENT_ROLE() value names the\n          default account roles. Using SET\n          ROLE changes that:\n        ", "Press CTRL+C to copy mysql> SELECT CURRENT_ROLE();\n+-------------------+\n| CURRENT_ROLE()    |\n+-------------------+\n| `r1`@`%`,`r2`@`%` |\n+-------------------+\nmysql> SET ROLE 'r1'; SELECT CURRENT_ROLE();\n+----------------+\n| CURRENT_ROLE() |\n+----------------+\n| `r1`@`%`       |\n+----------------+"], "Examples": ["GRANT 'r1', 'r2' TO 'u1'@'localhost';\nSET DEFAULT ROLE ALL TO 'u1'@'localhost';", "mysql> SELECT CURRENT_ROLE();\n+-------------------+\n| CURRENT_ROLE()    |\n+-------------------+\n| `r1`@`%`,`r2`@`%` |\n+-------------------+\nmysql> SET ROLE 'r1'; SELECT CURRENT_ROLE();\n+----------------+\n| CURRENT_ROLE() |\n+----------------+\n| `r1`@`%`       |\n+----------------+"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_current-role"], "Feature Type": ["Function"], "index": 732, "vector_txt": "732:Feature: CURRENT_ROLE()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MultiLineString(ls\n          [, ls] ...)"], "Description": ["Contruct MultiLineString from LineString values", "\nMultiLineString(ls\n          [, ls] ...)\n", "\n          Constructs a MultiLineString value using\n          LineString or WKB\n          LineString arguments.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_multilinestring"], "Feature Type": ["Function"], "index": 733, "vector_txt": "733:Feature: MultiLineString(ls\n          [, ls] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MultiPoint(pt\n          [, pt2] ...)"], "Description": ["Construct MultiPoint from Point values", "\nMultiPoint(pt\n          [, pt2] ...)\n", "\n          Constructs a MultiPoint value using\n          Point or WKB Point\n          arguments.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_multipoint"], "Feature Type": ["Function"], "index": 734, "vector_txt": "734:Feature: MultiPoint(pt\n          [, pt2] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["MultiPolygon(poly\n          [, poly] ...)"], "Description": ["Construct MultiPolygon from Polygon values", "\nMultiPolygon(poly\n          [, poly] ...)\n", "\n          Constructs a MultiPolygon value from a set\n          of Polygon or WKB\n          Polygon arguments.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_multipolygon"], "Feature Type": ["Function"], "index": 735, "vector_txt": "735:Feature: MultiPolygon(poly\n          [, poly] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["Point(x,\n          y)"], "Description": ["Construct Point from coordinates", "\nPoint(x,\n          y)\n", "\n          Constructs a Point using its coordinates.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_point"], "Feature Type": ["Function"], "index": 736, "vector_txt": "736:Feature: Point(x,\n          y)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["Polygon(ls [,\n          ls] ...)"], "Description": ["Construct Polygon from LineString arguments", "\nPolygon(ls [,\n          ls] ...)\n", "\n          Constructs a Polygon value from a number of\n          LineString or WKB\n          LineString arguments. If any argument does\n          not represent a LinearRing (that is, not a\n          closed and simple LineString), the return\n          value is NULL.\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_polygon"], "Feature Type": ["Function"], "index": 737, "vector_txt": "737:Feature: Polygon(ls [,\n          ls] ...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Area({poly|mpoly})"], "Description": ["Return Polygon or MultiPolygon area", "\nST_Area({poly|mpoly})\n", "\n            Returns a double-precision number indicating the area of the\n            Polygon or\n            MultiPolygon argument, as measured in its\n            spatial reference system.\n          ", "\nST_Area() handles its\n            arguments as described in the introduction to this section,\n            with these exceptions:\n", "\n\n                If the geometry is geometrically invalid, either the\n                result is an undefined area (that is, it can be any\n                number), or an error occurs.\n              \n                If the geometry is valid but is not a\n                Polygon or\n                MultiPolygon object, an\n                ER_UNEXPECTED_GEOMETRY_TYPE\n                error occurs.\n              \n                If the geometry is a valid Polygon in\n                a Cartesian SRS, the result is the Cartesian area of the\n                polygon.\n              \n                If the geometry is a valid\n                MultiPolygon in a Cartesian SRS, the\n                result is the sum of the Cartesian area of the polygons.\n              \n                If the geometry is a valid Polygon in\n                a geographic SRS, the result is the geodetic area of the\n                polygon in that SRS, in square meters.\n              \n                If the geometry is a valid\n                MultiPolygon in a geographic SRS, the\n                result is the sum of geodetic area of the polygons in\n                that SRS, in square meters.\n              \n                If an area computation results in\n                +inf, an\n                ER_DATA_OUT_OF_RANGE\n                error occurs.\n              \n                If the geometry has a geographic SRS with a longitude or\n                latitude that is out of range, an error occurs:\n\n\n\n                    If a longitude value is not in the range\n                    (\u2212180, 180], an\n                    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                    error occurs.\n                  \n                    If a latitude value is not in the range [\u221290,\n                    90], an\n                    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                    error occurs.\n\n\n\n                Ranges shown are in degrees. The exact range limits\n                deviate slightly due to floating-point arithmetic.\n\n", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';\nmysql> SELECT ST_Area(ST_GeomFromText(@poly));\n+---------------------------------+\n| ST_Area(ST_GeomFromText(@poly)) |\n+---------------------------------+\n|                               4 |\n+---------------------------------+\n\nmysql> SET @mpoly =\n       'MultiPolygon(((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1)))';\nmysql> SELECT ST_Area(ST_GeomFromText(@mpoly));\n+----------------------------------+\n| ST_Area(ST_GeomFromText(@mpoly)) |\n+----------------------------------+\n|                                8 |\n+----------------------------------+"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';\nmysql> SELECT ST_Area(ST_GeomFromText(@poly));\n+---------------------------------+\n| ST_Area(ST_GeomFromText(@poly)) |\n+---------------------------------+\n|                               4 |\n+---------------------------------+\n\nmysql> SET @mpoly =\n       'MultiPolygon(((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1)))';\nmysql> SELECT ST_Area(ST_GeomFromText(@mpoly));\n+----------------------------------+\n| ST_Area(ST_GeomFromText(@mpoly)) |\n+----------------------------------+\n|                                8 |\n+----------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-area"], "Feature Type": ["Function"], "index": 738, "vector_txt": "738:Feature: ST_Area({poly|mpoly})\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_AsBinary(g\n          [, options])"], "Description": ["Convert from internal geometry format to WKB", "\nST_AsBinary(g\n          [, options]),\n          ST_AsWKB(g\n          [, options])\n", "\n          Converts a value in internal geometry format to its WKB\n          representation and returns the binary result.\n        ", "\n          The function return value has geographic coordinates\n          (latitude, longitude) in the order specified by the spatial\n          reference system that applies to the geometry argument. An\n          optional options argument may be\n          given to override the default axis order.\n        ", "\nST_AsBinary() and\n          ST_AsWKB()\n          handle their arguments as described in the introduction to\n          this section.\n        ", "Press CTRL+C to copy mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)', 4326);\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g)));\n+-----------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g))) |\n+-----------------------------------------+\n| LINESTRING(5 0,10 5,15 10)              |\n+-----------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat'))) |\n+----------------------------------------------------------------+\n| LINESTRING(0 5,5 10,10 15)                                     |\n+----------------------------------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long'))) |\n+----------------------------------------------------------------+\n| LINESTRING(5 0,10 5,15 10)                                     |\n+----------------------------------------------------------------+"], "Examples": ["mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)', 4326);\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g)));\n+-----------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g))) |\n+-----------------------------------------+\n| LINESTRING(5 0,10 5,15 10)              |\n+-----------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat'))) |\n+----------------------------------------------------------------+\n| LINESTRING(0 5,5 10,10 15)                                     |\n+----------------------------------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long'))) |\n+----------------------------------------------------------------+\n| LINESTRING(5 0,10 5,15 10)                                     |\n+----------------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-format-conversion-functions.html#function_st-asbinary"], "Feature Type": ["Function"], "index": 739, "vector_txt": "739:Feature: ST_AsBinary(g\n          [, options])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_AsGeoJSON(g\n          [, max_dec_digits [,\n          options]])"], "Description": ["Generate GeoJSON object from geometry", "\nST_AsGeoJSON(g\n          [, max_dec_digits [,\n          options]])\n", "\n          Generates a GeoJSON object from the geometry\n          g. The object string has the\n          connection character set and collation.\n        ", "\n          If any argument is NULL, the return value\n          is NULL. If any non-NULL\n          argument is invalid, an error occurs.\n        ", "\nmax_dec_digits, if specified,\n          limits the number of decimal digits for coordinates and causes\n          rounding of output. If not specified, this argument defaults\n          to its maximum value of 232 \u2212\n          1. The minimum is 0.\n        ", "\noptions, if specified, is a\n          bitmask. The following table shows the permitted flag values.\n          If the geometry argument has an SRID of 0, no CRS object is\n          produced even for those flag values that request one.\n", "\n\nFlag Value\nMeaning\n\n0\nNo options. This is the default if options is\n                not specified.\n\n1\nAdd a bounding box to the output.\n\n2\nAdd a short-format CRS URN to the output. The default format is a short\n                format\n                (EPSG:srid).\n\n4\nAdd a long-format CRS URN\n                (urn:ogc:def:crs:EPSG::srid).\n                This flag overrides flag 2. For example, option values\n                of 5 and 7 mean the same (add a bounding box and a\n                long-format CRS URN).\n\n", "Press CTRL+C to copy mysql> SELECT ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2);\n+-------------------------------------------------------------+\n| ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2) |\n+-------------------------------------------------------------+\n| {\"type\": \"Point\", \"coordinates\": [11.11, 12.22]}            |\n+-------------------------------------------------------------+"], "Examples": ["mysql> SELECT ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2);\n+-------------------------------------------------------------+\n| ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2) |\n+-------------------------------------------------------------+\n| {\"type\": \"Point\", \"coordinates\": [11.11, 12.22]}            |\n+-------------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geojson-functions.html#function_st-asgeojson"], "Feature Type": ["Function"], "index": 740, "vector_txt": "740:Feature: ST_AsGeoJSON(g\n          [, max_dec_digits [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_AsText(g [,\n          options])"], "Description": ["Convert from internal geometry format to WKT", "\nST_AsText(g [,\n          options]),\n          ST_AsWKT(g\n          [, options])\n", "\n          Converts a value in internal geometry format to its WKT\n          representation and returns the string result.\n        ", "\n          The function return value has geographic coordinates\n          (latitude, longitude) in the order specified by the spatial\n          reference system that applies to the geometry argument. An\n          optional options argument may be\n          given to override the default axis order.\n        ", "\nST_AsText() and\n          ST_AsWKT()\n          handle their arguments as described in the introduction to\n          this section.\n        ", "Press CTRL+C to copy mysql> SET @g = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,2 2,3 3)        |\n+--------------------------------+", "\n          Output for MultiPoint values includes\n          parentheses around each point. For example:\n        ", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_GeomFromText(@mp));\n+---------------------------------+\n| ST_AsText(ST_GeomFromText(@mp)) |\n+---------------------------------+\n| MULTIPOINT((1 1),(2 2),(3 3))   |\n+---------------------------------+"], "Examples": ["mysql> SET @g = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,2 2,3 3)        |\n+--------------------------------+", "mysql> SELECT ST_AsText(ST_GeomFromText(@mp));\n+---------------------------------+\n| ST_AsText(ST_GeomFromText(@mp)) |\n+---------------------------------+\n| MULTIPOINT((1 1),(2 2),(3 3))   |\n+---------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-format-conversion-functions.html#function_st-astext"], "Feature Type": ["Function"], "index": 741, "vector_txt": "741:Feature: ST_AsText(g [,\n          options])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Buffer(g,\n          d [,\n          strategy1 [,\n          strategy2 [,\n          strategy3]]])"], "Description": ["Return geometry of points within given distance from geometry", "\nST_Buffer(g,\n          d [,\n          strategy1 [,\n          strategy2 [,\n          strategy3]]])\n", "\n          Returns a geometry that represents all points whose distance\n          from the geometry value g is less\n          than or equal to a distance of d.\n          The result is in the same SRS as the geometry argument.\n        ", "\n          If the geometry argument is empty,\n          ST_Buffer() returns an empty\n          geometry.\n        ", "\n          If the distance is 0,\n          ST_Buffer() returns the\n          geometry argument unchanged:\n        ", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 0));\n+------------------------------+\n| ST_AsText(ST_Buffer(@pt, 0)) |\n+------------------------------+\n| POINT(0 0)                   |\n+------------------------------+", "\n          If the geometry argument is in a Cartesian SRS:\n", "\n\nST_Buffer() supports\n              negative distances for Polygon and\n              MultiPolygon values, and for geometry\n              collections containing Polygon or\n              MultiPolygon values.\n            \n              If the result is reduced so much that it disappears, the\n              result is an empty geometry.\n            \n              An ER_WRONG_ARGUMENTS\n              error occurs for\n              ST_Buffer() with a negative\n              distance for Point,\n              MultiPoint,\n              LineString, and\n              MultiLineString values, and for\n              geometry collections not containing any\n              Polygon or\n              MultiPolygon values.\n\n", "\nPoint geometries in a geographic SRS are\n          permitted, subject to the following conditions:\n", "\n\n              If the distance is not negative and no strategies are\n              specified, the function returns the geographic buffer of\n              the Point in its SRS. The distance\n              argument must be in the SRS distance unit (currently\n              always meters).\n            \n              If the distance is negative or any strategy (except\n              NULL) is specified, an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n\n", "\n          For non-Point geometries, an\n          ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n          error occurs.\n        ", "\nST_Buffer() permits up to three\n          optional strategy arguments following the distance argument.\n          Strategies influence buffer computation. These arguments are\n          byte string values produced by the\n          ST_Buffer_Strategy() function,\n          to be used for point, join, and end strategies:\n", "\n\n              Point strategies apply to Point and\n              MultiPoint geometries. If no point\n              strategy is specified, the default is\n              ST_Buffer_Strategy('point_circle',\n              32).\n            \n              Join strategies apply to LineString,\n              MultiLineString,\n              Polygon, and\n              MultiPolygon geometries. If no join\n              strategy is specified, the default is\n              ST_Buffer_Strategy('join_round',\n              32).\n            \n              End strategies apply to LineString and\n              MultiLineString geometries. If no end\n              strategy is specified, the default is\n              ST_Buffer_Strategy('end_round',\n              32).\n\n", "\n          Up to one strategy of each type may be specified, and they may\n          be given in any order.\n        ", "\n          If the buffer strategies are invalid, an\n          ER_WRONG_ARGUMENTS error\n          occurs. Strategies are invalid under any of these\n          circumstances:\n", "\n\n              Multiple strategies of a given type (point, join, or end)\n              are specified.\n            \n              A value that is not a strategy (such as an arbitrary\n              binary string or a number) is passed as a strategy.\n            \n              A Point strategy is passed and the\n              geometry contains no Point or\n              MultiPoint values.\n            \n              An end or join strategy is passed and the geometry\n              contains no LineString,\n              Polygon,\n              MultiLinestring or\n              MultiPolygon values.\n\n", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt_strategy = ST_Buffer_Strategy('point_square');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 2, @pt_strategy));\n+--------------------------------------------+\n| ST_AsText(ST_Buffer(@pt, 2, @pt_strategy)) |\n+--------------------------------------------+\n| POLYGON((-2 -2,2 -2,2 2,-2 2,-2 -2))       |\n+--------------------------------------------+", "Press CTRL+C to copy mysql> SET @ls = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @end_strategy = ST_Buffer_Strategy('end_flat');\nmysql> SET @join_strategy = ST_Buffer_Strategy('join_round', 10);\nmysql> SELECT ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))\n+---------------------------------------------------------------+\n| ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))   |\n+---------------------------------------------------------------+\n| POLYGON((5 5,5 10,0 10,-3.5355339059327373 8.535533905932738, |\n| -5 5,-5 0,0 0,5 0,5 5))                                       |\n+---------------------------------------------------------------+"], "Examples": ["mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 0));\n+------------------------------+\n| ST_AsText(ST_Buffer(@pt, 0)) |\n+------------------------------+\n| POINT(0 0)                   |\n+------------------------------+", "mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt_strategy = ST_Buffer_Strategy('point_square');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 2, @pt_strategy));\n+--------------------------------------------+\n| ST_AsText(ST_Buffer(@pt, 2, @pt_strategy)) |\n+--------------------------------------------+\n| POLYGON((-2 -2,2 -2,2 2,-2 2,-2 -2))       |\n+--------------------------------------------+", "mysql> SET @ls = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @end_strategy = ST_Buffer_Strategy('end_flat');\nmysql> SET @join_strategy = ST_Buffer_Strategy('join_round', 10);\nmysql> SELECT ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))\n+---------------------------------------------------------------+\n| ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))   |\n+---------------------------------------------------------------+\n| POLYGON((5 5,5 10,0 10,-3.5355339059327373 8.535533905932738, |\n| -5 5,-5 0,0 0,5 0,5 5))                                       |\n+---------------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-buffer"], "Feature Type": ["Function"], "index": 742, "vector_txt": "742:Feature: ST_Buffer(g,\n          d [,\n          strategy1 [,\n          strategy2 [,\n          strategy3]]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CURRENT_TIME"], "Description": ["Synonyms for CURTIME()", "\nCURRENT_TIME,\n          CURRENT_TIME([fsp])\n", "\nCURRENT_TIME and\n          CURRENT_TIME() are synonyms for\n          CURTIME().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-time"], "Feature Type": ["Function"], "index": 743, "vector_txt": "743:Feature: CURRENT_TIME\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Buffer_Strategy(strategy\n          [, points_per_circle])"], "Description": ["Produce strategy option for ST_Buffer()", "\nST_Buffer_Strategy(strategy\n          [, points_per_circle])\n", "\n          This function returns a strategy byte string for use with\n          ST_Buffer() to influence buffer\n          computation.\n        ", "\n          Information about strategies is available at\n          Boost.org.\n        ", "\n          The first argument must be a string indicating a strategy\n          option:\n", "\n\n              For point strategies, permitted values are\n              'point_circle' and\n              'point_square'.\n            \n              For join strategies, permitted values are\n              'join_round' and\n              'join_miter'.\n            \n              For end strategies, permitted values are\n              'end_round' and\n              'end_flat'.\n\n", "\n          If the first argument is 'point_circle',\n          'join_round',\n          'join_miter', or\n          'end_round', the\n          points_per_circle argument must be\n          given as a positive numeric value. The maximum\n          points_per_circle value is the\n          value of the\n          max_points_in_geometry system\n          variable.\n        ", "\n          For examples, see the description of\n          ST_Buffer().\n        ", "\nST_Buffer_Strategy() handles\n          its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If any argument is invalid, an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n            \n              If the first argument is 'point_square'\n              or 'end_flat', the\n              points_per_circle argument must\n              not be given or an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-buffer-strategy"], "Feature Type": ["Function"], "index": 744, "vector_txt": "744:Feature: ST_Buffer_Strategy(strategy\n          [, points_per_circle])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Centroid({poly|mpoly})"], "Description": ["Return centroid as a point", "\nST_Centroid({poly|mpoly})\n", "\n            Returns the mathematical centroid for the\n            Polygon or\n            MultiPolygon argument as a\n            Point. The result is not guaranteed to be\n            on the MultiPolygon.\n          ", "\n            This function processes geometry collections by computing\n            the centroid point for components of highest dimension in\n            the collection. Such components are extracted and made into\n            a single MultiPolygon,\n            MultiLineString, or\n            MultiPoint for centroid computation.\n          ", "\nST_Centroid() handles its\n            arguments as described in the introduction to this section,\n            with these exceptions:\n", "\n\n                The return value is NULL for the\n                additional condition that the argument is an empty\n                geometry collection.\n              \n                If the geometry has an SRID value for a geographic\n                spatial reference system (SRS), an\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs.\n\n", "Press CTRL+C to copy mysql> SET @poly =\n       ST_GeomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7,5 5))');\nmysql> SELECT ST_GeometryType(@poly),ST_AsText(ST_Centroid(@poly));\n+------------------------+--------------------------------------------+\n| ST_GeometryType(@poly) | ST_AsText(ST_Centroid(@poly))              |\n+------------------------+--------------------------------------------+\n| POLYGON                | POINT(4.958333333333333 4.958333333333333) |\n+------------------------+--------------------------------------------+"], "Examples": ["mysql> SET @poly =\n       ST_GeomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7,5 5))');\nmysql> SELECT ST_GeometryType(@poly),ST_AsText(ST_Centroid(@poly));\n+------------------------+--------------------------------------------+\n| ST_GeometryType(@poly) | ST_AsText(ST_Centroid(@poly))              |\n+------------------------+--------------------------------------------+\n| POLYGON                | POINT(4.958333333333333 4.958333333333333) |\n+------------------------+--------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-centroid"], "Feature Type": ["Function"], "index": 745, "vector_txt": "745:Feature: ST_Centroid({poly|mpoly})\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Collect([DISTINCT]\n          g)\n          [over_clause]"], "Description": ["Aggregate spatial values into collection", "\nST_Collect([DISTINCT]\n          g)\n          [over_clause]\n", "\n          Aggregates geometry values and returns a single geometry\n          collection value. With the DISTINCT option,\n          returns the aggregation of the distinct geometry arguments.\n        ", "\n          As with other aggregate functions, GROUP BY\n          may be used to group arguments into subsets.\n          ST_Collect() returns an\n          aggregate value for each subset.\n        ", "\n          This function executes as a window function if\n          over_clause is present.\n          over_clause is as described in\n          Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d. In contrast to most\n          aggregate functions that support windowing,\n          ST_Collect() permits use of\n          over_clause together with\n          DISTINCT.\n        ", "\nST_Collect() handles its\n          arguments as follows:\n", "\n\nNULL arguments are ignored.\n            \n              If all arguments are NULL or the\n              aggregate result is empty, the return value is\n              NULL.\n            \n              If any geometry argument is not a syntactically\n              well-formed geometry, an\n              ER_GIS_INVALID_DATA error\n              occurs.\n            \n              If any geometry argument is a syntactically well-formed\n              geometry in an undefined spatial reference system (SRS),\n              an ER_SRS_NOT_FOUND error\n              occurs.\n            \n              If there are multiple geometry arguments and those\n              arguments are in the same SRS, the return value is in that\n              SRS. If those arguments are not in the same SRS, an\n              ER_GIS_DIFFERENT_SRIDS_AGGREGATION\n              error occurs.\n            \n              The result is the narrowest\n              MultiXxx or\n              GeometryCollection value possible, with\n              the result type determined from the\n              non-NULL geometry arguments as follows:\n\n\n\n                  If all arguments are Point values,\n                  the result is a MultiPoint value.\n                \n                  If all arguments are LineString\n                  values, the result is a\n                  MultiLineString value.\n                \n                  If all arguments are Polygon\n                  values, the result is a\n                  MultiPolygon value.\n                \n                  Otherwise, the arguments are a mix of geometry types\n                  and the result is a\n                  GeometryCollection value.\n\n\n\n", "\n          This example data set shows hypothetical products by year and\n          location of manufacture:\n        ", "Press CTRL+C to copy CREATE TABLE product (\n  year INTEGER,\n  product VARCHAR(256),\n  location Geometry\n);\n\nINSERT INTO product\n(year,  product,     location) VALUES\n(2000, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2000, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"Abacus\"    , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"TV\"        , ST_GeomFromText('point(38  60)',4326)),\n(2001, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2001, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326));", "\n          Some sample queries using\n          ST_Collect() on the data set:\n        ", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_Collect(location)) AS result\n       FROM product;\n+------------------------------------------------------------------+\n| result                                                           |\n+------------------------------------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60),(60 -24),(28 -77)) |\n+------------------------------------------------------------------+\n\nmysql> SELECT ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product;\n+---------------------------------------+\n| result                                |\n+---------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(38 60)) |\n+---------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(location)) AS result\n       FROM product GROUP BY year;\n+------+------------------------------------------------+\n| year | result                                         |\n+------+------------------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))                  |\n+------+------------------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product GROUP BY year;\n+------+---------------------------------------+\n| year | result                                |\n+------+---------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))         |\n+------+---------------------------------------+\n\n# selects nothing\nmysql> SELECT ST_Collect(location) AS result\n       FROM product WHERE year = 1999;\n+--------+\n| result |\n+--------+\n| NULL   |\n+--------+\n\nmysql> SELECT ST_AsText(ST_Collect(location)\n         OVER (ORDER BY year, product ROWS BETWEEN 1 PRECEDING AND CURRENT ROW))\n         AS result\n       FROM product;\n+-------------------------------+\n| result                        |\n+-------------------------------+\n| MULTIPOINT((28 -77))          |\n| MULTIPOINT((28 -77),(60 -24)) |\n| MULTIPOINT((60 -24),(28 -77)) |\n| MULTIPOINT((28 -77),(38 60))  |\n| MULTIPOINT((38 60),(60 -24))  |\n| MULTIPOINT((60 -24),(28 -77)) |\n+-------------------------------+"], "Examples": ["CREATE TABLE product (\n  year INTEGER,\n  product VARCHAR(256),\n  location Geometry\n);\n\nINSERT INTO product\n(year,  product,     location) VALUES\n(2000, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2000, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"Abacus\"    , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"TV\"        , ST_GeomFromText('point(38  60)',4326)),\n(2001, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2001, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326));", "mysql> SELECT ST_AsText(ST_Collect(location)) AS result\n       FROM product;\n+------------------------------------------------------------------+\n| result                                                           |\n+------------------------------------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60),(60 -24),(28 -77)) |\n+------------------------------------------------------------------+\n\nmysql> SELECT ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product;\n+---------------------------------------+\n| result                                |\n+---------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(38 60)) |\n+---------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(location)) AS result\n       FROM product GROUP BY year;\n+------+------------------------------------------------+\n| year | result                                         |\n+------+------------------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))                  |\n+------+------------------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product GROUP BY year;\n+------+---------------------------------------+\n| year | result                                |\n+------+---------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))         |\n+------+---------------------------------------+\n\n# selects nothing\nmysql> SELECT ST_Collect(location) AS result\n       FROM product WHERE year = 1999;\n+--------+\n| result |\n+--------+\n| NULL   |\n+--------+\n\nmysql> SELECT ST_AsText(ST_Collect(location)\n         OVER (ORDER BY year, product ROWS BETWEEN 1 PRECEDING AND CURRENT ROW))\n         AS result\n       FROM product;\n+-------------------------------+\n| result                        |\n+-------------------------------+\n| MULTIPOINT((28 -77))          |\n| MULTIPOINT((28 -77),(60 -24)) |\n| MULTIPOINT((60 -24),(28 -77)) |\n| MULTIPOINT((28 -77),(38 60))  |\n| MULTIPOINT((38 60),(60 -24))  |\n| MULTIPOINT((60 -24),(28 -77)) |\n+-------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-aggregate-functions.html#function_st-collect"], "Feature Type": ["Function"], "index": 746, "vector_txt": "746:Feature: ST_Collect([DISTINCT]\n          g)\n          [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Contains(g1,\n            g2)"], "Description": ["Whether one geometry contains another", "\nST_Contains(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 completely contains\n            g2. This tests the opposite\n            relationship as ST_Within().\n          ", "\nST_Contains() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-contains"], "Feature Type": ["Function"], "index": 747, "vector_txt": "747:Feature: ST_Contains(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_ConvexHull(g)"], "Description": ["Return convex hull of geometry", "\nST_ConvexHull(g)\n", "\n          Returns a geometry that represents the convex hull of the\n          geometry value g.\n        ", "\n          This function computes a geometry's convex hull by first\n          checking whether its vertex points are colinear. The function\n          returns a linear hull if so, a polygon hull otherwise. This\n          function processes geometry collections by extracting all\n          vertex points of all components of the collection, creating a\n          MultiPoint value from them, and computing\n          its convex hull.\n        ", "\nST_ConvexHull() handles its\n          arguments as described in the introduction to this section,\n          with this exception:\n", "\n\n              The return value is NULL for the\n              additional condition that the argument is an empty\n              geometry collection.\n\n", "Press CTRL+C to copy mysql> SET @g = 'MULTIPOINT(5 0,25 0,15 10,15 25)';\nmysql> SELECT ST_AsText(ST_ConvexHull(ST_GeomFromText(@g)));\n+-----------------------------------------------+\n| ST_AsText(ST_ConvexHull(ST_GeomFromText(@g))) |\n+-----------------------------------------------+\n| POLYGON((5 0,25 0,15 25,5 0))                 |\n+-----------------------------------------------+"], "Examples": ["mysql> SET @g = 'MULTIPOINT(5 0,25 0,15 10,15 25)';\nmysql> SELECT ST_AsText(ST_ConvexHull(ST_GeomFromText(@g)));\n+-----------------------------------------------+\n| ST_AsText(ST_ConvexHull(ST_GeomFromText(@g))) |\n+-----------------------------------------------+\n| POLYGON((5 0,25 0,15 25,5 0))                 |\n+-----------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-convexhull"], "Feature Type": ["Function"], "index": 748, "vector_txt": "748:Feature: ST_ConvexHull(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Crosses(g1,\n            g2)"], "Description": ["Whether one geometry crosses another", "\nST_Crosses(g1,\n            g2)\n", "\n            Two geometries spatially cross if their\n            spatial relation has the following properties:\n", "\n\n                Unless g1 and\n                g2 are both of dimension 1:\n                g1 crosses\n                g2 if the interior of\n                g2 has points in common with\n                the interior of g1, but\n                g2 does not cover the entire\n                interior of g1.\n              \n                If both g1 and\n                g2 are of dimension 1: If the\n                lines cross each other in a finite number of points\n                (that is, no common line segments, only single points in\n                common).\n\n", "\n            This function returns 1 or 0 to indicate whether\n            g1 spatially crosses\n            g2.\n          ", "\nST_Crosses() handles its\n            arguments as described in the introduction to this section\n            except that the return value is NULL for\n            these additional conditions:\n", "\n\ng1 is of dimension 2\n                (Polygon or\n                MultiPolygon).\n              \ng2 is of dimension 1\n                (Point or\n                MultiPoint).\n\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-crosses"], "Feature Type": ["Function"], "index": 749, "vector_txt": "749:Feature: ST_Crosses(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Difference(g1,\n          g2)"], "Description": ["Return point set difference of two geometries", "\nST_Difference(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set difference of\n          the geometry values g1 and\n          g2. The result is in the same SRS\n          as the geometry arguments.\n        ", "\nST_Difference() permits\n          arguments in either a Cartesian or a geographic SRS, and\n          handles its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(1 1)                         |\n+------------------------------------+"], "Examples": ["mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(1 1)                         |\n+------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-difference"], "Feature Type": ["Function"], "index": 750, "vector_txt": "750:Feature: ST_Difference(g1,\n          g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Dimension(g)"], "Description": ["Dimension of geometry", "\nST_Dimension(g)\n", "\n            Returns the inherent dimension of the geometry value\n            g. The dimension can be \u22121,\n            0, 1, or 2. The meaning of these values is given in\n            Section\u00a013.4.2.2, \u201cGeometry Class\u201d.\n          ", "\nST_Dimension() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------------+\n| ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------------+\n|                                                    1 |\n+------------------------------------------------------+"], "Examples": ["mysql> SELECT ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------------+\n| ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------------+\n|                                                    1 |\n+------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-dimension"], "Feature Type": ["Function"], "index": 751, "vector_txt": "751:Feature: ST_Dimension(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Disjoint(g1,\n            g2)"], "Description": ["Whether one geometry is disjoint from another", "\nST_Disjoint(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 is spatially disjoint from\n            (does not intersect) g2.\n          ", "\nST_Disjoint() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-disjoint"], "Feature Type": ["Function"], "index": 752, "vector_txt": "752:Feature: ST_Disjoint(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Distance(g1,\n            g2 [,\n            unit])"], "Description": ["The distance of one geometry from another", "\nST_Distance(g1,\n            g2 [,\n            unit])\n", "\n            Returns the distance between g1\n            and g2, measured in the length\n            unit of the spatial reference system (SRS) of the geometry\n            arguments, or in the unit of the optional\n            unit argument if that is\n            specified.\n          ", "\n            This function processes geometry collections by returning\n            the shortest distance among all combinations of the\n            components of the two geometry arguments.\n          ", "\nST_Distance() handles its\n            geometry arguments as described in the introduction to this\n            section, with these exceptions:\n", "\n\nST_Distance() detects\n                arguments in a geographic (ellipsoidal) spatial\n                reference system and returns the geodetic distance on\n                the ellipsoid.\n                ST_Distance() supports\n                distance calculations for geographic SRS arguments of\n                all geometry types.\n              \n                If any argument is geometrically invalid, either the\n                result is an undefined distance (that is, it can be any\n                number), or an error occurs.\n              \n                If an intermediate or final result produces\n                NaN or a negative number, an\n                ER_GIS_INVALID_DATA\n                error occurs.\n\n", "\nST_Distance() permits\n            specifying the linear unit for the returned distance value\n            with an optional unit argument\n            which ST_Distance() handles\n            as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('POINT(1 1)');\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)');\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|    1.4142135623730951 |\n+-----------------------+\n\nmysql> SET @g1 = ST_GeomFromText('POINT(1 1)', 4326);\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)', 4326);\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|     156874.3859490455 |\n+-----------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'metre');\n+--------------------------------+\n| ST_Distance(@g1, @g2, 'metre') |\n+--------------------------------+\n|              156874.3859490455 |\n+--------------------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'foot');\n+-------------------------------+\n| ST_Distance(@g1, @g2, 'foot') |\n+-------------------------------+\n|             514679.7439273146 |\n+-------------------------------+", "\n            For the special case of distance calculations on a sphere,\n            see the ST_Distance_Sphere()\n            function.\n          "], "Examples": ["mysql> SET @g1 = ST_GeomFromText('POINT(1 1)');\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)');\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|    1.4142135623730951 |\n+-----------------------+\n\nmysql> SET @g1 = ST_GeomFromText('POINT(1 1)', 4326);\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)', 4326);\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|     156874.3859490455 |\n+-----------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'metre');\n+--------------------------------+\n| ST_Distance(@g1, @g2, 'metre') |\n+--------------------------------+\n|              156874.3859490455 |\n+--------------------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'foot');\n+-------------------------------+\n| ST_Distance(@g1, @g2, 'foot') |\n+-------------------------------+\n|             514679.7439273146 |\n+-------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-distance"], "Feature Type": ["Function"], "index": 753, "vector_txt": "753:Feature: ST_Distance(g1,\n            g2 [,\n            unit])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CURRENT_TIMESTAMP"], "Description": ["Synonyms for NOW()", "\nCURRENT_TIMESTAMP,\n          CURRENT_TIMESTAMP([fsp])\n", "\nCURRENT_TIMESTAMP and\n          CURRENT_TIMESTAMP() are\n          synonyms for NOW().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-timestamp"], "Feature Type": ["Function"], "index": 754, "vector_txt": "754:Feature: CURRENT_TIMESTAMP\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Distance_Sphere(g1,\n          g2 [,\n          radius])"], "Description": ["Minimum distance on earth between two geometries", "\nST_Distance_Sphere(g1,\n          g2 [,\n          radius])\n", "\n          Returns the minimum spherical distance between\n          Point or MultiPoint\n          arguments on a sphere, in meters. (For general-purpose\n          distance calculations, see the\n          ST_Distance() function.) The\n          optional radius argument should be\n          given in meters.\n        ", "\n          If both geometry parameters are valid Cartesian\n          Point or MultiPoint\n          values in SRID 0, the return value is shortest distance\n          between the two geometries on a sphere with the provided\n          radius. If omitted, the default radius is 6,370,986 meters,\n          Point X and Y coordinates are interpreted as longitude and\n          latitude, respectively, in degrees.\n        ", "\n          If both geometry parameters are valid Point\n          or MultiPoint values in a geographic\n          spatial reference system (SRS), the return value is the\n          shortest distance between the two geometries on a sphere with\n          the provided radius. If omitted, the default radius is equal\n          to the mean radius, defined as (2a+b)/3, where a is the\n          semi-major axis and b is the semi-minor axis of the SRS.\n        ", "\nST_Distance_Sphere() handles\n          its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              Supported geometry argument combinations are\n              Point and Point, or\n              Point and MultiPoint\n              (in any argument order). If at least one of the geometries\n              is neither Point nor\n              MultiPoint, and its SRID is 0, an\n              ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n              error occurs. If at least one of the geometries is neither\n              Point nor\n              MultiPoint, and its SRID refers to a\n              geographic SRS, an\n              ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n              error occurs. If any geometry refers to a projected SRS,\n              an\n              ER_NOT_IMPLEMENTED_FOR_PROJECTED_SRS\n              error occurs.\n            \n              If any argument has a longitude or latitude that is out of\n              range, an error occurs:\n\n\n\n                  If a longitude value is not in the range (\u2212180,\n                  180], an\n                  ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                  error occurs.\n                \n                  If a latitude value is not in the range [\u221290,\n                  90], an\n                  ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                  error occurs.\n\n\n\n              Ranges shown are in degrees. If an SRS uses another unit,\n              the range uses the corresponding values in its unit. The\n              exact range limits deviate slightly due to floating-point\n              arithmetic.\n            \n              If the radius argument is\n              present but not positive, an\n              ER_NONPOSITIVE_RADIUS\n              error occurs.\n            \n              If the distance exceeds the range of a double-precision\n              number, an\n              ER_STD_OVERFLOW_ERROR\n              error occurs.\n\n", "Press CTRL+C to copy mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(180 0)');\nmysql> SELECT ST_Distance_Sphere(@pt1, @pt2);\n+--------------------------------+\n| ST_Distance_Sphere(@pt1, @pt2) |\n+--------------------------------+\n|             20015042.813723423 |\n+--------------------------------+"], "Examples": ["mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(180 0)');\nmysql> SELECT ST_Distance_Sphere(@pt1, @pt2);\n+--------------------------------+\n| ST_Distance_Sphere(@pt1, @pt2) |\n+--------------------------------+\n|             20015042.813723423 |\n+--------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-distance-sphere"], "Feature Type": ["Function"], "index": 755, "vector_txt": "755:Feature: ST_Distance_Sphere(g1,\n          g2 [,\n          radius])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_EndPoint(ls)"], "Description": ["End Point of LineString", "\nST_EndPoint(ls)\n", "\n            Returns the Point that is the endpoint of\n            the LineString value\n            ls.\n          ", "\nST_EndPoint() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_EndPoint(ST_GeomFromText(@ls)));\n+----------------------------------------------+\n| ST_AsText(ST_EndPoint(ST_GeomFromText(@ls))) |\n+----------------------------------------------+\n| POINT(3 3)                                   |\n+----------------------------------------------+"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_EndPoint(ST_GeomFromText(@ls)));\n+----------------------------------------------+\n| ST_AsText(ST_EndPoint(ST_GeomFromText(@ls))) |\n+----------------------------------------------+\n| POINT(3 3)                                   |\n+----------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-endpoint"], "Feature Type": ["Function"], "index": 756, "vector_txt": "756:Feature: ST_EndPoint(ls)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Envelope(g)"], "Description": ["Return MBR of geometry", "\nST_Envelope(g)\n", "\n            Returns the minimum bounding rectangle (MBR) for the\n            geometry value g. The result is\n            returned as a Polygon value that is\n            defined by the corner points of the bounding box:\n          ", "Press CTRL+C to copy POLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)'))) |\n+----------------------------------------------------------------+\n| POLYGON((1 1,2 1,2 2,1 2,1 1))                                 |\n+----------------------------------------------------------------+", "\n            If the argument is a point or a vertical or horizontal line\n            segment, ST_Envelope()\n            returns the point or the line segment as its MBR rather than\n            returning an invalid polygon:\n          ", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)'))) |\n+----------------------------------------------------------------+\n| LINESTRING(1 1,1 2)                                            |\n+----------------------------------------------------------------+", "\nST_Envelope() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                If the geometry has an SRID value for a geographic\n                spatial reference system (SRS), an\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs.\n\n"], "Examples": ["mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)'))) |\n+----------------------------------------------------------------+\n| POLYGON((1 1,2 1,2 2,1 2,1 1))                                 |\n+----------------------------------------------------------------+", "mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)'))) |\n+----------------------------------------------------------------+\n| LINESTRING(1 1,1 2)                                            |\n+----------------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-envelope"], "Feature Type": ["Function"], "index": 757, "vector_txt": "757:Feature: ST_Envelope(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Equals(g1,\n            g2)"], "Description": ["Whether one geometry is equal to another", "\nST_Equals(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 is spatially equal to\n            g2.\n          ", "\nST_Equals() handles its\n            arguments as described in the introduction to this section,\n            except that it does not return NULL for\n            empty geometry arguments.\n          ", "Press CTRL+C to copy mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);\n+---------------------+---------------------+\n| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |\n+---------------------+---------------------+\n|                   1 |                   0 |\n+---------------------+---------------------+"], "Examples": ["mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);\n+---------------------+---------------------+\n| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |\n+---------------------+---------------------+\n|                   1 |                   0 |\n+---------------------+---------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-equals"], "Feature Type": ["Function"], "index": 758, "vector_txt": "758:Feature: ST_Equals(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_ExteriorRing(poly)"], "Description": ["Return exterior ring of Polygon", "\nST_ExteriorRing(poly)\n", "\n            Returns the exterior ring of the Polygon\n            value poly as a\n            LineString.\n          ", "\nST_ExteriorRing() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly)));\n+----------------------------------------------------+\n| ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly))) |\n+----------------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)                    |\n+----------------------------------------------------+"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly)));\n+----------------------------------------------------+\n| ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly))) |\n+----------------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)                    |\n+----------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-exteriorring"], "Feature Type": ["Function"], "index": 759, "vector_txt": "759:Feature: ST_ExteriorRing(poly)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_FrechetDistance(g1,\n            g2 [,\n            unit])"], "Description": ["The discrete Fr\u00e9chet distance of one geometry from another", "\nST_FrechetDistance(g1,\n            g2 [,\n            unit])\n", "\n            Returns the discrete Fr\u00e9chet distance between two\n            geometries, reflecting how similar the geometries are. The\n            result is a double-precision number measured in the length\n            unit of the spatial reference system (SRS) of the geometry\n            arguments, or in the length unit of the\n            unit argument if that argument is\n            given.\n          ", "\n            This function implements the discrete Fr\u00e9chet distance,\n            which means it is restricted to distances between the points\n            of the geometries. For example, given two\n            LineString arguments, only the points\n            explicitly mentioned in the geometries are considered.\n            Points on the line segments between these points are not\n            considered.\n          ", "\nST_FrechetDistance() handles\n            its geometry arguments as described in the introduction to\n            this section, with these exceptions:\n", "\n\n                The geometries may have a Cartesian or geographic SRS,\n                but only LineString values are\n                supported. If the arguments are in the same Cartesian or\n                geographic SRS, but either is not a\n                LineString, an\n                ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n                or\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs, depending on the SRS type.\n\n", "\nST_FrechetDistance() handles\n            its optional unit argument as\n            described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|             2.8284271247461903 |\n+--------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|              313421.1999416798 |\n+--------------------------------+\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2, 'foot');\n+----------------------------------------+\n| ST_FrechetDistance(@ls1, @ls2, 'foot') |\n+----------------------------------------+\n|                     1028284.7767115477 |\n+----------------------------------------+"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|             2.8284271247461903 |\n+--------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|              313421.1999416798 |\n+--------------------------------+\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2, 'foot');\n+----------------------------------------+\n| ST_FrechetDistance(@ls1, @ls2, 'foot') |\n+----------------------------------------+\n|                     1028284.7767115477 |\n+----------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-frechetdistance"], "Feature Type": ["Function"], "index": 760, "vector_txt": "760:Feature: ST_FrechetDistance(g1,\n            g2 [,\n            unit])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeoHash(longitude,\n          latitude,\n          max_length)"], "Description": ["Produce a geohash value", "\nST_GeoHash(longitude,\n          latitude,\n          max_length),\n          ST_GeoHash(point,\n          max_length)\n", "\n          Returns a geohash string in the connection character set and\n          collation.\n        ", "\n          For the first syntax, the longitude\n          must be a number in the range [\u2212180, 180], and the\n          latitude must be a number in the\n          range [\u221290, 90]. For the second syntax, a\n          POINT value is required, where the X and Y\n          coordinates are in the valid ranges for longitude and\n          latitude, respectively.\n        ", "\n          The resulting string is no longer than\n          max_length characters, which has an\n          upper limit of 100. The string might be shorter than\n          max_length characters because the\n          algorithm that creates the geohash value continues until it\n          has created a string that is either an exact representation of\n          the location or max_length\n          characters, whichever comes first.\n        ", "\nST_GeoHash() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SELECT ST_GeoHash(180,0,10), ST_GeoHash(-180,-90,15);\n+----------------------+-------------------------+\n| ST_GeoHash(180,0,10) | ST_GeoHash(-180,-90,15) |\n+----------------------+-------------------------+\n| xbpbpbpbpb           | 000000000000000         |\n+----------------------+-------------------------+"], "Examples": ["mysql> SELECT ST_GeoHash(180,0,10), ST_GeoHash(-180,-90,15);\n+----------------------+-------------------------+\n| ST_GeoHash(180,0,10) | ST_GeoHash(-180,-90,15) |\n+----------------------+-------------------------+\n| xbpbpbpbpb           | 000000000000000         |\n+----------------------+-------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-geohash"], "Feature Type": ["Function"], "index": 761, "vector_txt": "761:Feature: ST_GeoHash(longitude,\n          latitude,\n          max_length)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeomCollFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Return geometry collection from WKT", "\nST_GeomCollFromText(wkt\n          [, srid [,\n          options]]),\n          ST_GeometryCollectionFromText(wkt\n          [, srid [,\n          options]]),\n          ST_GeomCollFromTxt(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a GeometryCollection value using\n          its WKT representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g = \"MULTILINESTRING((10 10, 11 11), (9 9, 10 10))\";\nmysql> SELECT ST_AsText(ST_GeomCollFromText(@g));\n+--------------------------------------------+\n| ST_AsText(ST_GeomCollFromText(@g))         |\n+--------------------------------------------+\n| MULTILINESTRING((10 10,11 11),(9 9,10 10)) |\n+--------------------------------------------+"], "Examples": ["mysql> SET @g = \"MULTILINESTRING((10 10, 11 11), (9 9, 10 10))\";\nmysql> SELECT ST_AsText(ST_GeomCollFromText(@g));\n+--------------------------------------------+\n| ST_AsText(ST_GeomCollFromText(@g))         |\n+--------------------------------------------+\n| MULTILINESTRING((10 10,11 11),(9 9,10 10)) |\n+--------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-geomcollfromtext"], "Feature Type": ["Function"], "index": 762, "vector_txt": "762:Feature: ST_GeomCollFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeomCollFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Return geometry collection from WKB", "\nST_GeomCollFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_GeometryCollectionFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a GeometryCollection value using\n          its WKB representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-geomcollfromwkb"], "Feature Type": ["Function"], "index": 763, "vector_txt": "763:Feature: ST_GeomCollFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeometryN(gc,\n            N)"], "Description": ["Return N-th geometry from geometry collection", "\nST_GeometryN(gc,\n            N)\n", "\n            Returns the N-th geometry in the\n            GeometryCollection value\n            gc. Geometries are numbered\n            beginning with 1.\n          ", "\nST_GeometryN() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1));\n+-------------------------------------------------+\n| ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1)) |\n+-------------------------------------------------+\n| POINT(1 1)                                      |\n+-------------------------------------------------+"], "Examples": ["mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1));\n+-------------------------------------------------+\n| ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1)) |\n+-------------------------------------------------+\n| POINT(1 1)                                      |\n+-------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-geometrycollection-property-functions.html#function_st-geometryn"], "Feature Type": ["Function"], "index": 764, "vector_txt": "764:Feature: ST_GeometryN(gc,\n            N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["CURRENT_USER"], "Description": ["The authenticated user name and host name", "\nCURRENT_USER,\n          CURRENT_USER()\n", "\n          Returns the user name and host name combination for the MySQL\n          account that the server used to authenticate the current\n          client. This account determines your access privileges. The\n          return value is a string in the utf8mb3\n          character set.\n        ", "\n          The value of CURRENT_USER() can\n          differ from the value of\n          USER().\n        ", "Press CTRL+C to copy mysql> SELECT USER();\n        -> 'davida@localhost'\nmysql> SELECT * FROM mysql.user;\nERROR 1044: Access denied for user ''@'localhost' to\ndatabase 'mysql'\nmysql> SELECT CURRENT_USER();\n        -> '@localhost'", "\n          The example illustrates that although the client specified a\n          user name of davida (as indicated by the\n          value of the USER() function),\n          the server authenticated the client using an anonymous user\n          account (as seen by the empty user name part of the\n          CURRENT_USER() value). One way\n          this might occur is that there is no account listed in the\n          grant tables for davida.\n        ", "\n          Within a stored program or view,\n          CURRENT_USER() returns the\n          account for the user who defined the object (as given by its\n          DEFINER value) unless defined with the\n          SQL SECURITY INVOKER characteristic. In the\n          latter case, CURRENT_USER()\n          returns the object's invoker.\n        ", "\n          Triggers and events have no option to define the SQL\n          SECURITY characteristic, so for these objects,\n          CURRENT_USER() returns the\n          account for the user who defined the object. To return the\n          invoker, use USER() or\n          SESSION_USER().\n        ", "\n          The following statements support use of the\n          CURRENT_USER() function to take\n          the place of the name of (and, possibly, a host for) an\n          affected user or a definer; in such cases,\n          CURRENT_USER() is expanded\n          where and as needed:\n", "\n\nDROP USER\n\nRENAME USER\n\nGRANT\n\nREVOKE\n\nCREATE FUNCTION\n\nCREATE PROCEDURE\n\nCREATE TRIGGER\n\nCREATE EVENT\n\nCREATE VIEW\n\nALTER EVENT\n\nALTER VIEW\n\nSET PASSWORD\n\n", "\n          For information about the implications that this expansion of\n          CURRENT_USER() has for\n          replication, see\n          Section\u00a019.5.1.8, \u201cReplication of CURRENT_USER()\u201d.\n        ", "\n          This function can be used for the default value of a\n          VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (CURRENT_USER()));"], "Examples": ["mysql> SELECT USER();\n        -> 'davida@localhost'\nmysql> SELECT * FROM mysql.user;\nERROR 1044: Access denied for user ''@'localhost' to\ndatabase 'mysql'\nmysql> SELECT CURRENT_USER();\n        -> '@localhost'", "CREATE TABLE t (c VARCHAR(288) DEFAULT (CURRENT_USER()));"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_current-user"], "Feature Type": ["Function"], "index": 765, "vector_txt": "765:Feature: CURRENT_USER\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeometryType(g)"], "Description": ["Return name of geometry type", "\nST_GeometryType(g)\n", "\n            Returns a binary string indicating the name of the geometry\n            type of which the geometry instance\n            g is a member. The name\n            corresponds to one of the instantiable\n            Geometry subclasses.\n          ", "\nST_GeometryType() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_GeometryType(ST_GeomFromText('POINT(1 1)'));\n+------------------------------------------------+\n| ST_GeometryType(ST_GeomFromText('POINT(1 1)')) |\n+------------------------------------------------+\n| POINT                                          |\n+------------------------------------------------+"], "Examples": ["mysql> SELECT ST_GeometryType(ST_GeomFromText('POINT(1 1)'));\n+------------------------------------------------+\n| ST_GeometryType(ST_GeomFromText('POINT(1 1)')) |\n+------------------------------------------------+\n| POINT                                          |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-geometrytype"], "Feature Type": ["Function"], "index": 766, "vector_txt": "766:Feature: ST_GeometryType(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeomFromGeoJSON(str\n          [, options [,\n          srid]])"], "Description": ["Generate geometry from GeoJSON object", "\nST_GeomFromGeoJSON(str\n          [, options [,\n          srid]])\n", "\n          Parses a string str representing a\n          GeoJSON object and returns a geometry.\n        ", "\n          If any argument is NULL, the return value\n          is NULL. If any non-NULL\n          argument is invalid, an error occurs.\n        ", "\noptions, if given, describes how to\n          handle GeoJSON documents that contain geometries with\n          coordinate dimensions higher than 2. The following table shows\n          the permitted options values.\n", "\n\nOption Value\nMeaning\n\n1\nReject the document and produce an error. This is the default if\n                options is not specified.\n\n2, 3, 4\nAccept the document and strip off the coordinates for higher coordinate\n                dimensions.\n\n", "\noptions values of 2, 3, and 4\n          currently produce the same effect. If geometries with\n          coordinate dimensions higher than 2 are supported in the\n          future, you can expect these values to produce different\n          effects.\n        ", "\n          The srid argument, if given, must\n          be a 32-bit unsigned integer. If not given, the geometry\n          return value has an SRID of 4326.\n        ", "\n          If srid refers to an undefined\n          spatial reference system (SRS), an\n          ER_SRS_NOT_FOUND error occurs.\n        ", "\n          For geographic SRS geometry arguments, if any argument has a\n          longitude or latitude that is out of range, an error occurs:\n", "\n\n              If a longitude value is not in the range (\u2212180,\n              180], an\n              ER_LONGITUDE_OUT_OF_RANGE\n              error occurs.\n            \n              If a latitude value is not in the range [\u221290, 90],\n              an\n              ER_LATITUDE_OUT_OF_RANGE\n              error occurs.\n\n", "\n          Ranges shown are in degrees. If an SRS uses another unit, the\n          range uses the corresponding values in its unit. The exact\n          range limits deviate slightly due to floating-point\n          arithmetic.\n        ", "\n          GeoJSON geometry, feature, and feature collection objects may\n          have a crs property. The parsing function\n          parses named CRS URNs in the\n          urn:ogc:def:crs:EPSG::srid\n          and EPSG:srid\n          namespaces, but not CRSs given as link objects. Also,\n          urn:ogc:def:crs:OGC:1.3:CRS84 is recognized\n          as SRID 4326. If an object has a CRS that is not understood,\n          an error occurs, with the exception that if the optional\n          srid argument is given, any CRS is\n          ignored even if it is invalid.\n        ", "\n          If a crs member that specifies an SRID\n          different from the top-level object SRID is found at a lower\n          level of the GeoJSON document, an\n          ER_INVALID_GEOJSON_CRS_NOT_TOP_LEVEL\n          error occurs.\n        ", "\n          As specified in the GeoJSON specification, parsing is\n          case-sensitive for the type member of the\n          GeoJSON input (Point,\n          LineString, and so forth). The\n          specification is silent regarding case sensitivity for other\n          parsing, which in MySQL is not case-sensitive.\n        ", "\n          This example shows the parsing result for a simple GeoJSON\n          object. Observe that the order of coordinates depends on the\n          SRID used.\n        ", "Press CTRL+C to copy mysql> SET @json = '{ \"type\": \"Point\", \"coordinates\": [102.0, 0.0]}';\nmysql> SELECT ST_AsText(ST_GeomFromGeoJSON(@json));\n+--------------------------------------+\n| ST_AsText(ST_GeomFromGeoJSON(@json)) |\n+--------------------------------------+\n| POINT(0 102)                         |\n+--------------------------------------+\nmysql> SELECT ST_SRID(ST_GeomFromGeoJSON(@json));\n+------------------------------------+\n| ST_SRID(ST_GeomFromGeoJSON(@json)) |\n+------------------------------------+\n|                               4326 |\n+------------------------------------+\nmysql> SELECT ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0));\n+-------------------------------------------------+\n| ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0)) |\n+-------------------------------------------------+\n| POINT(102 0)                                    |\n+-------------------------------------------------+"], "Examples": ["mysql> SET @json = '{ \"type\": \"Point\", \"coordinates\": [102.0, 0.0]}';\nmysql> SELECT ST_AsText(ST_GeomFromGeoJSON(@json));\n+--------------------------------------+\n| ST_AsText(ST_GeomFromGeoJSON(@json)) |\n+--------------------------------------+\n| POINT(0 102)                         |\n+--------------------------------------+\nmysql> SELECT ST_SRID(ST_GeomFromGeoJSON(@json));\n+------------------------------------+\n| ST_SRID(ST_GeomFromGeoJSON(@json)) |\n+------------------------------------+\n|                               4326 |\n+------------------------------------+\nmysql> SELECT ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0));\n+-------------------------------------------------+\n| ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0)) |\n+-------------------------------------------------+\n| POINT(102 0)                                    |\n+-------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geojson-functions.html#function_st-geomfromgeojson"], "Feature Type": ["Function"], "index": 767, "vector_txt": "767:Feature: ST_GeomFromGeoJSON(str\n          [, options [,\n          srid]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeomFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Return geometry from WKT", "\nST_GeomFromText(wkt\n          [, srid [,\n          options]]),\n          ST_GeometryFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a geometry value of any type using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-geomfromtext"], "Feature Type": ["Function"], "index": 768, "vector_txt": "768:Feature: ST_GeomFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_GeomFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Return geometry from WKB", "\nST_GeomFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_GeometryFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a geometry value of any type using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-geomfromwkb"], "Feature Type": ["Function"], "index": 769, "vector_txt": "769:Feature: ST_GeomFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_HausdorffDistance(g1,\n            g2 [,\n            unit])"], "Description": ["The discrete Hausdorff distance of one geometry from another", "\nST_HausdorffDistance(g1,\n            g2 [,\n            unit])\n", "\n            Returns the discrete Hausdorff distance between two\n            geometries, reflecting how similar the geometries are. The\n            result is a double-precision number measured in the length\n            unit of the spatial reference system (SRS) of the geometry\n            arguments, or in the length unit of the\n            unit argument if that argument is\n            given.\n          ", "\n            This function implements the discrete Hausdorff distance,\n            which means it is restricted to distances between the points\n            of the geometries. For example, given two\n            LineString arguments, only the points\n            explicitly mentioned in the geometries are considered.\n            Points on the line segments between these points are not\n            considered.\n          ", "\nST_HausdorffDistance()\n            handles its geometry arguments as described in the\n            introduction to this section, with these exceptions:\n", "\n\n                If the geometry arguments are in the same Cartesian or\n                geographic SRS, but are not in a supported combination,\n                an\n                ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n                or\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs, depending on the SRS type. These\n                combinations are supported:\n\n\n\nLineString and\n                    LineString\n\nPoint and\n                    MultiPoint\n\nLineString and\n                    MultiLineString\n\nMultiPoint and\n                    MultiPoint\n\nMultiLineString and\n                    MultiLineString\n\n\n\n", "\nST_HausdorffDistance()\n            handles its optional unit\n            argument as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|                                1 |\n+----------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|               111319.49079326246 |\n+----------------------------------+\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2, 'foot');\n+------------------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2, 'foot') |\n+------------------------------------------+\n|                        365221.4264870815 |\n+------------------------------------------+"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|                                1 |\n+----------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|               111319.49079326246 |\n+----------------------------------+\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2, 'foot');\n+------------------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2, 'foot') |\n+------------------------------------------+\n|                        365221.4264870815 |\n+------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-hausdorffdistance"], "Feature Type": ["Function"], "index": 770, "vector_txt": "770:Feature: ST_HausdorffDistance(g1,\n            g2 [,\n            unit])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_InteriorRingN(poly,\n            N)"], "Description": ["Return N-th interior ring of Polygon", "\nST_InteriorRingN(poly,\n            N)\n", "\n            Returns the N-th interior ring\n            for the Polygon value\n            poly as a\n            LineString. Rings are numbered beginning\n            with 1.\n          ", "\nST_InteriorRingN() handles\n            its arguments as described in the introduction to this\n            section.\n          ", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1));\n+-------------------------------------------------------+\n| ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1)) |\n+-------------------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)                       |\n+-------------------------------------------------------+"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1));\n+-------------------------------------------------------+\n| ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1)) |\n+-------------------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)                       |\n+-------------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-interiorringn"], "Feature Type": ["Function"], "index": 771, "vector_txt": "771:Feature: ST_InteriorRingN(poly,\n            N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Intersection(g1,\n          g2)"], "Description": ["Return point set intersection of two geometries", "\nST_Intersection(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set intersection\n          of the geometry values g1 and\n          g2. The result is in the same SRS\n          as the geometry arguments.\n        ", "\nST_Intersection() permits\n          arguments in either a Cartesian or a geographic SRS, and\n          handles its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Intersection(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Intersection(@g1, @g2)) |\n+--------------------------------------+\n| POINT(2 2)                           |\n+--------------------------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Intersection(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Intersection(@g1, @g2)) |\n+--------------------------------------+\n| POINT(2 2)                           |\n+--------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-intersection"], "Feature Type": ["Function"], "index": 772, "vector_txt": "772:Feature: ST_Intersection(g1,\n          g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Intersects(g1,\n            g2)"], "Description": ["Whether one geometry intersects another", "\nST_Intersects(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 spatially intersects\n            g2.\n          ", "\nST_Intersects() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-intersects"], "Feature Type": ["Function"], "index": 773, "vector_txt": "773:Feature: ST_Intersects(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_IsClosed(ls)"], "Description": ["Whether a geometry is closed and simple", "\nST_IsClosed(ls)\n", "\n            For a LineString value\n            ls,\n            ST_IsClosed() returns 1 if\n            ls is closed (that is, its\n            ST_StartPoint() and\n            ST_EndPoint() values are the\n            same).\n          ", "\n            For a MultiLineString value\n            ls,\n            ST_IsClosed() returns 1 if\n            ls is closed (that is, the\n            ST_StartPoint() and\n            ST_EndPoint() values are the\n            same for each LineString in\n            ls).\n          ", "\nST_IsClosed() returns 0 if\n            ls is not closed, and\n            NULL if ls is\n            NULL.\n          ", "\nST_IsClosed() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                If the geometry has an SRID value for a geographic\n                spatial reference system (SRS), an\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = 'LineString(1 1,2 2,3 3,2 2)';\nmysql> SET @ls2 = 'LineString(1 1,2 2,3 3,1 1)';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls1));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls1)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls2));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls2)) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n\nmysql> SET @ls3 = 'MultiLineString((1 1,2 2,3 3),(4 4,5 5))';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls3));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls3)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+"], "Examples": ["mysql> SET @ls1 = 'LineString(1 1,2 2,3 3,2 2)';\nmysql> SET @ls2 = 'LineString(1 1,2 2,3 3,1 1)';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls1));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls1)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls2));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls2)) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n\nmysql> SET @ls3 = 'MultiLineString((1 1,2 2,3 3),(4 4,5 5))';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls3));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls3)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-isclosed"], "Feature Type": ["Function"], "index": 774, "vector_txt": "774:Feature: ST_IsClosed(ls)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_IsEmpty(g)"], "Description": ["Whether a geometry is empty", "\nST_IsEmpty(g)\n", "\n            This function is a placeholder that returns 1 for an empty\n            geometry collection value or 0 otherwise.\n          ", "\n            The only valid empty geometry is represented in the form of\n            an empty geometry collection value. MySQL does not support\n            GIS EMPTY values such as POINT\n            EMPTY.\n          ", "\nST_IsEmpty() handles its\n            arguments as described in the introduction to this section.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-isempty"], "Feature Type": ["Function"], "index": 775, "vector_txt": "775:Feature: ST_IsEmpty(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["CURTIME([fsp])"], "Description": ["Return the current time", "\nCURTIME([fsp])\n", "\n          Returns the current time as a value in\n          'hh:mm:ss' or\n          hhmmss format, depending on whether\n          the function is used in string or numeric context. The value\n          is expressed in the session time zone.\n        ", "\n          If the fsp argument is given to\n          specify a fractional seconds precision from 0 to 6, the return\n          value includes a fractional seconds part of that many digits.\n        ", "Press CTRL+C to copy mysql> SELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 19:25:37  |\n+-----------+\n\nmysql> SELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n|        192537 |\n+---------------+\n\nmysql> SELECT CURTIME(3);\n+--------------+\n| CURTIME(3)   |\n+--------------+\n| 19:25:37.840 |\n+--------------+"], "Examples": ["mysql> SELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 19:25:37  |\n+-----------+\n\nmysql> SELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n|        192537 |\n+---------------+\n\nmysql> SELECT CURTIME(3);\n+--------------+\n| CURTIME(3)   |\n+--------------+\n| 19:25:37.840 |\n+--------------+"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_curtime"], "Feature Type": ["Function"], "index": 776, "vector_txt": "776:Feature: CURTIME([fsp])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["JSON_ARRAYAGG(col_or_expr)\n            [over_clause]"], "Description": ["Return result set as a single JSON array", "\nJSON_ARRAYAGG(col_or_expr)\n            [over_clause]\n", "\n            Aggregates a result set as a single\n            JSON array whose elements\n            consist of the rows. The order of elements in this array is\n            undefined. The function acts on a column or an expression\n            that evaluates to a single value. Returns\n            NULL if the result contains no rows, or\n            in the event of an error. If\n            col_or_expr is\n            NULL, the function returns an array of\n            JSON [null] elements.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_ARRAYAGG(attribute) AS attributes\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------+\n| o_id | attributes          |\n+------+---------------------+\n|    2 | [\"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\"]  |\n+------+---------------------+\n2 rows in set (0.00 sec)"], "Examples": ["mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_ARRAYAGG(attribute) AS attributes\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------+\n| o_id | attributes          |\n+------+---------------------+\n|    2 | [\"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\"]  |\n+------+---------------------+\n2 rows in set (0.00 sec)"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_json-arrayagg"], "Feature Type": ["Function"], "index": 777, "vector_txt": "777:Feature: JSON_ARRAYAGG(col_or_expr)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_IsSimple(g)"], "Description": ["Whether a geometry is simple", "\nST_IsSimple(g)\n", "\n            Returns 1 if the geometry value g\n            is simple according to the ISO SQL/MM Part 3:\n            Spatial standard.\n            ST_IsSimple() returns 0 if\n            the argument is not simple.\n          ", "\n            The descriptions of the instantiable geometric classes given\n            under Section\u00a013.4.2, \u201cThe OpenGIS Geometry Model\u201d include the\n            specific conditions that cause class instances to be\n            classified as not simple.\n          ", "\nST_IsSimple() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                If the geometry has a geographic SRS with a longitude or\n                latitude that is out of range, an error occurs:\n\n\n\n                    If a longitude value is not in the range\n                    (\u2212180, 180], an\n                    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                    error occurs.\n                  \n                    If a latitude value is not in the range [\u221290,\n                    90], an\n                    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                    error occurs.\n\n\n\n                Ranges shown are in degrees. The exact range limits\n                deviate slightly due to floating-point arithmetic.\n\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-issimple"], "Feature Type": ["Function"], "index": 778, "vector_txt": "778:Feature: ST_IsSimple(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_IsValid(g)"], "Description": ["Whether a geometry is valid", "\nST_IsValid(g)\n", "\n          Returns 1 if the argument is geometrically valid, 0 if the\n          argument is not geometrically valid. Geometry validity is\n          defined by the OGC specification.\n        ", "\n          The only valid empty geometry is represented in the form of an\n          empty geometry collection value.\n          ST_IsValid() returns 1 in this\n          case. MySQL does not support GIS EMPTY\n          values such as POINT EMPTY.\n        ", "\nST_IsValid() handles its\n          arguments as described in the introduction to this section,\n          with this exception:\n", "\n\n              If the geometry has a geographic SRS with a longitude or\n              latitude that is out of range, an error occurs:\n\n\n\n                  If a longitude value is not in the range (\u2212180,\n                  180], an\n                  ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                  error occurs.\n                \n                  If a latitude value is not in the range [\u221290,\n                  90], an\n                  ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                  error occurs.\n\n\n\n              Ranges shown are in degrees. If an SRS uses another unit,\n              the range uses the corresponding values in its unit. The\n              exact range limits deviate slightly due to floating-point\n              arithmetic.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,-0.00 0,0.0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_IsValid(@ls1);\n+------------------+\n| ST_IsValid(@ls1) |\n+------------------+\n|                0 |\n+------------------+\nmysql> SELECT ST_IsValid(@ls2);\n+------------------+\n| ST_IsValid(@ls2) |\n+------------------+\n|                1 |\n+------------------+"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,-0.00 0,0.0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_IsValid(@ls1);\n+------------------+\n| ST_IsValid(@ls1) |\n+------------------+\n|                0 |\n+------------------+\nmysql> SELECT ST_IsValid(@ls2);\n+------------------+\n| ST_IsValid(@ls2) |\n+------------------+\n|                1 |\n+------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-isvalid"], "Feature Type": ["Function"], "index": 779, "vector_txt": "779:Feature: ST_IsValid(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LatFromGeoHash(geohash_str)"], "Description": ["Return latitude from geohash value", "\nST_LatFromGeoHash(geohash_str)\n", "\n          Returns the latitude from a geohash string value, as a\n          double-precision number in the range [\u221290, 90].\n        ", "\n          The ST_LatFromGeoHash()\n          decoding function reads no more than 433 characters from the\n          geohash_str argument. That\n          represents the upper limit on information in the internal\n          representation of coordinate values. Characters past the 433rd\n          are ignored, even if they are otherwise illegal and produce an\n          error.\n        ", "\nST_LatFromGeoHash() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SELECT ST_LatFromGeoHash(ST_GeoHash(45,-20,10));\n+------------------------------------------+\n| ST_LatFromGeoHash(ST_GeoHash(45,-20,10)) |\n+------------------------------------------+\n|                                      -20 |\n+------------------------------------------+"], "Examples": ["mysql> SELECT ST_LatFromGeoHash(ST_GeoHash(45,-20,10));\n+------------------------------------------+\n| ST_LatFromGeoHash(ST_GeoHash(45,-20,10)) |\n+------------------------------------------+\n|                                      -20 |\n+------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-latfromgeohash"], "Feature Type": ["Function"], "index": 780, "vector_txt": "780:Feature: ST_LatFromGeoHash(geohash_str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Latitude(p\n            [, new_latitude_val])"], "Description": ["Return latitude of Point", "\nST_Latitude(p\n            [, new_latitude_val])\n", "\n            With a single argument representing a valid\n            Point object p\n            that has a geographic spatial reference system (SRS),\n            ST_Latitude() returns the\n            latitude value of p as a\n            double-precision number.\n          ", "\n            With the optional second argument representing a valid\n            latitude value, ST_Latitude()\n            returns a Point object like the first\n            argument with its latitude equal to the second argument.\n          ", "\nST_Latitude() handles its\n            arguments as described in the introduction to this section,\n            with the addition that if the Point\n            object is valid but does not have a geographic SRS, an\n            ER_SRS_NOT_GEOGRAPHIC error\n            occurs.\n          ", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Latitude(@pt);\n+------------------+\n| ST_Latitude(@pt) |\n+------------------+\n|               45 |\n+------------------+\nmysql> SELECT ST_AsText(ST_Latitude(@pt, 10));\n+---------------------------------+\n| ST_AsText(ST_Latitude(@pt, 10)) |\n+---------------------------------+\n| POINT(10 90)                    |\n+---------------------------------+"], "Examples": ["mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Latitude(@pt);\n+------------------+\n| ST_Latitude(@pt) |\n+------------------+\n|               45 |\n+------------------+\nmysql> SELECT ST_AsText(ST_Latitude(@pt, 10));\n+---------------------------------+\n| ST_AsText(ST_Latitude(@pt, 10)) |\n+---------------------------------+\n| POINT(10 90)                    |\n+---------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-latitude"], "Feature Type": ["Function"], "index": 781, "vector_txt": "781:Feature: ST_Latitude(p\n            [, new_latitude_val])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Length(ls\n            [, unit])"], "Description": ["Return length of LineString", "\nST_Length(ls\n            [, unit])\n", "\n            Returns a double-precision number indicating the length of\n            the LineString or\n            MultiLineString value\n            ls in its associated spatial\n            reference system. The length of a\n            MultiLineString value is equal to the sum\n            of the lengths of its elements.\n          ", "\nST_Length() computes a result\n            as follows:\n", "\n\n                If the geometry is a valid LineString\n                in a Cartesian SRS, the return value is the Cartesian\n                length of the geometry.\n              \n                If the geometry is a valid\n                MultiLineString in a Cartesian SRS,\n                the return value is the sum of the Cartesian lengths of\n                its elements.\n              \n                If the geometry is a valid LineString\n                in a geographic SRS, the return value is the geodetic\n                length of the geometry in that SRS, in meters.\n              \n                If the geometry is a valid\n                MultiLineString in a geographic SRS,\n                the return value is the sum of the geodetic lengths of\n                its elements in that SRS, in meters.\n\n", "\nST_Length() handles its\n            arguments as described in the introduction to this section,\n            with these exceptions:\n", "\n\n                If the geometry is not a LineString\n                or MultiLineString, the return value\n                is NULL.\n              \n                If the geometry is geometrically invalid, either the\n                result is an undefined length (that is, it can be any\n                number), or an error occurs.\n              \n                If the length computation result is\n                +inf, an\n                ER_DATA_OUT_OF_RANGE\n                error occurs.\n              \n                If the geometry has a geographic SRS with a longitude or\n                latitude that is out of range, an error occurs:\n\n\n\n                    If a longitude value is not in the range\n                    (\u2212180, 180], an\n                    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                    error occurs.\n                  \n                    If a latitude value is not in the range [\u221290,\n                    90], an\n                    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                    error occurs.\n\n\n\n                Ranges shown are in degrees. The exact range limits\n                deviate slightly due to floating-point arithmetic.\n\n", "\nST_Length() permits an\n            optional unit argument that\n            specifies the linear unit for the returned length value.\n            These rules apply:\n", "\n\n                If a unit is specified but not supported by MySQL, an\n                ER_UNIT_NOT_FOUND error\n                occurs.\n              \n                If a supported linear unit is specified and the SRID is\n                0, an\n                ER_GEOMETRY_IN_UNKNOWN_LENGTH_UNIT\n                error occurs.\n              \n                If a supported linear unit is specified and the SRID is\n                not 0, the result is in that unit.\n              \n                If a unit is not specified, the result is in the unit of\n                the SRS of the geometries, whether Cartesian or\n                geographic. Currently, all MySQL SRSs are expressed in\n                meters.\n\n", "\n            A unit is supported if it is found in the\n            INFORMATION_SCHEMA\nST_UNITS_OF_MEASURE table. See\n            Section\u00a028.3.37, \u201cThe INFORMATION_SCHEMA ST_UNITS_OF_MEASURE Table\u201d.\n          ", "Press CTRL+C to copy mysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)');\nmysql> SELECT ST_Length(@ls);\n+--------------------+\n| ST_Length(@ls)     |\n+--------------------+\n| 2.8284271247461903 |\n+--------------------+\n\nmysql> SET @mls = ST_GeomFromText('MultiLineString((1 1,2 2,3 3),(4 4,5 5))');\nmysql> SELECT ST_Length(@mls);\n+-------------------+\n| ST_Length(@mls)   |\n+-------------------+\n| 4.242640687119286 |\n+-------------------+\n\nmysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)', 4326);\nmysql> SELECT ST_Length(@ls);\n+-------------------+\n| ST_Length(@ls)    |\n+-------------------+\n| 313701.9623204328 |\n+-------------------+\nmysql> SELECT ST_Length(@ls, 'metre');\n+-------------------------+\n| ST_Length(@ls, 'metre') |\n+-------------------------+\n|       313701.9623204328 |\n+-------------------------+\nmysql> SELECT ST_Length(@ls, 'foot');\n+------------------------+\n| ST_Length(@ls, 'foot') |\n+------------------------+\n|     1029205.9131247795 |\n+------------------------+"], "Examples": ["mysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)');\nmysql> SELECT ST_Length(@ls);\n+--------------------+\n| ST_Length(@ls)     |\n+--------------------+\n| 2.8284271247461903 |\n+--------------------+\n\nmysql> SET @mls = ST_GeomFromText('MultiLineString((1 1,2 2,3 3),(4 4,5 5))');\nmysql> SELECT ST_Length(@mls);\n+-------------------+\n| ST_Length(@mls)   |\n+-------------------+\n| 4.242640687119286 |\n+-------------------+\n\nmysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)', 4326);\nmysql> SELECT ST_Length(@ls);\n+-------------------+\n| ST_Length(@ls)    |\n+-------------------+\n| 313701.9623204328 |\n+-------------------+\nmysql> SELECT ST_Length(@ls, 'metre');\n+-------------------------+\n| ST_Length(@ls, 'metre') |\n+-------------------------+\n|       313701.9623204328 |\n+-------------------------+\nmysql> SELECT ST_Length(@ls, 'foot');\n+------------------------+\n| ST_Length(@ls, 'foot') |\n+------------------------+\n|     1029205.9131247795 |\n+------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-length"], "Feature Type": ["Function"], "index": 782, "vector_txt": "782:Feature: ST_Length(ls\n            [, unit])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LineFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct LineString from WKT", "\nST_LineFromText(wkt\n          [, srid [,\n          options]]),\n          ST_LineStringFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a LineString value using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-linefromtext"], "Feature Type": ["Function"], "index": 783, "vector_txt": "783:Feature: ST_LineFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LineFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct LineString from WKB", "\nST_LineFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_LineStringFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a LineString value using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-linefromwkb"], "Feature Type": ["Function"], "index": 784, "vector_txt": "784:Feature: ST_LineFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LineInterpolatePoint(ls,\n          fractional_distance)"], "Description": ["The point a given percentage along a LineString", "\nST_LineInterpolatePoint(ls,\n          fractional_distance)\n", "\n          This function takes a LineString geometry\n          and a fractional distance in the range [0.0, 1.0] and returns\n          the Point along the\n          LineString at the given fraction of the\n          distance from its start point to its endpoint. It can be used\n          to answer questions such as which Point\n          lies halfway along the road described by the geometry\n          argument.\n        ", "\n          The function is implemented for LineString\n          geometries in all spatial reference systems, both Cartesian\n          and geographic.\n        ", "\n          If the fractional_distance argument\n          is 1.0, the result may not be exactly the last point of the\n          LineString argument but a point close to it\n          due to numerical inaccuracies in approximate-value\n          computations.\n        ", "\n          A related function,\n          ST_LineInterpolatePoints(),\n          takes similar arguments but returns a\n          MultiPoint consisting of\n          Point values along the\n          LineString at each fraction of the distance\n          from its start point to its endpoint. For examples of both\n          functions, see the\n          ST_LineInterpolatePoints()\n          description.\n        ", "\nST_LineInterpolatePoint()\n          handles its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If the geometry argument is not a\n              LineString, an\n              ER_UNEXPECTED_GEOMETRY_TYPE\n              error occurs.\n            \n              If the fractional distance argument is outside the range\n              [0.0, 1.0], an\n              ER_DATA_OUT_OF_RANGE error\n              occurs.\n\n", "\nST_LineInterpolatePoint() is a\n          MySQL extension to OpenGIS.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-lineinterpolatepoint"], "Feature Type": ["Function"], "index": 785, "vector_txt": "785:Feature: ST_LineInterpolatePoint(ls,\n          fractional_distance)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LineInterpolatePoints(ls,\n          fractional_distance)"], "Description": ["The points a given percentage along a LineString", "\nST_LineInterpolatePoints(ls,\n          fractional_distance)\n", "\n          This function takes a LineString geometry\n          and a fractional distance in the range (0.0, 1.0] and returns\n          the MultiPoint consisting of the\n          LineString start point, plus\n          Point values along the\n          LineString at each fraction of the distance\n          from its start point to its endpoint. It can be used to answer\n          questions such as which Point values lie\n          every 10% of the way along the road described by the geometry\n          argument.\n        ", "\n          The function is implemented for LineString\n          geometries in all spatial reference systems, both Cartesian\n          and geographic.\n        ", "\n          If the fractional_distance argument\n          divides 1.0 with zero remainder the result may not contain the\n          last point of the LineString argument but a\n          point close to it due to numerical inaccuracies in\n          approximate-value computations.\n        ", "\n          A related function,\n          ST_LineInterpolatePoint(),\n          takes similar arguments but returns the\n          Point along the\n          LineString at the given fraction of the\n          distance from its start point to its endpoint.\n        ", "\nST_LineInterpolatePoints()\n          handles its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If the geometry argument is not a\n              LineString, an\n              ER_UNEXPECTED_GEOMETRY_TYPE\n              error occurs.\n            \n              If the fractional distance argument is outside the range\n              [0.0, 1.0], an\n              ER_DATA_OUT_OF_RANGE error\n              occurs.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .5));\n+----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .5)) |\n+----------------------------------------------+\n| POINT(0 5)                                   |\n+----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .75));\n+-----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .75)) |\n+-----------------------------------------------+\n| POINT(2.5 5)                                  |\n+-----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, 1));\n+---------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, 1)) |\n+---------------------------------------------+\n| POINT(5 5)                                  |\n+---------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoints(@ls1, .25));\n+------------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoints(@ls1, .25)) |\n+------------------------------------------------+\n| MULTIPOINT((0 2.5),(0 5),(2.5 5),(5 5))        |\n+------------------------------------------------+", "\nST_LineInterpolatePoints() is a\n          MySQL extension to OpenGIS.\n        "], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .5));\n+----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .5)) |\n+----------------------------------------------+\n| POINT(0 5)                                   |\n+----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .75));\n+-----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .75)) |\n+-----------------------------------------------+\n| POINT(2.5 5)                                  |\n+-----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, 1));\n+---------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, 1)) |\n+---------------------------------------------+\n| POINT(5 5)                                  |\n+---------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoints(@ls1, .25));\n+------------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoints(@ls1, .25)) |\n+------------------------------------------------+\n| MULTIPOINT((0 2.5),(0 5),(2.5 5),(5 5))        |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-lineinterpolatepoints"], "Feature Type": ["Function"], "index": 786, "vector_txt": "786:Feature: ST_LineInterpolatePoints(ls,\n          fractional_distance)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_LongFromGeoHash(geohash_str)"], "Description": ["Return longitude from geohash value", "\nST_LongFromGeoHash(geohash_str)\n", "\n          Returns the longitude from a geohash string value, as a\n          double-precision number in the range [\u2212180, 180].\n        ", "\n          The remarks in the description of\n          ST_LatFromGeoHash() regarding\n          the maximum number of characters processed from the\n          geohash_str argument also apply to\n          ST_LongFromGeoHash().\n        ", "\nST_LongFromGeoHash() handles\n          its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT ST_LongFromGeoHash(ST_GeoHash(45,-20,10));\n+-------------------------------------------+\n| ST_LongFromGeoHash(ST_GeoHash(45,-20,10)) |\n+-------------------------------------------+\n|                                        45 |\n+-------------------------------------------+"], "Examples": ["mysql> SELECT ST_LongFromGeoHash(ST_GeoHash(45,-20,10));\n+-------------------------------------------+\n| ST_LongFromGeoHash(ST_GeoHash(45,-20,10)) |\n+-------------------------------------------+\n|                                        45 |\n+-------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-longfromgeohash"], "Feature Type": ["Function"], "index": 787, "vector_txt": "787:Feature: ST_LongFromGeoHash(geohash_str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.15 Information Functions"], "Feature": ["DATABASE()"], "Description": ["Return the default (current) database name", "\nDATABASE()\n", "\n          Returns the default (current) database name as a string in the\n          utf8mb3 character set. If there is no\n          default database, DATABASE()\n          returns NULL. Within a stored routine, the\n          default database is the database that the routine is\n          associated with, which is not necessarily the same as the\n          database that is the default in the calling context.\n        ", "Press CTRL+C to copy mysql> SELECT DATABASE();\n        -> 'test'", "\n          If there is no default database,\n          DATABASE() returns\n          NULL.\n        "], "Examples": ["mysql> SELECT DATABASE();\n        -> 'test'"], "Category": ["Built-In Functions", "Information Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_database"], "Feature Type": ["Function"], "index": 788, "vector_txt": "788:Feature: DATABASE()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Longitude(p\n            [, new_longitude_val])"], "Description": ["Return longitude of Point", "\nST_Longitude(p\n            [, new_longitude_val])\n", "\n            With a single argument representing a valid\n            Point object p\n            that has a geographic spatial reference system (SRS),\n            ST_Longitude() returns the\n            longitude value of p as a\n            double-precision number.\n          ", "\n            With the optional second argument representing a valid\n            longitude value,\n            ST_Longitude() returns a\n            Point object like the first argument with\n            its longitude equal to the second argument.\n          ", "\nST_Longitude() handles its\n            arguments as described in the introduction to this section,\n            with the addition that if the Point\n            object is valid but does not have a geographic SRS, an\n            ER_SRS_NOT_GEOGRAPHIC error\n            occurs.\n          ", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Longitude(@pt);\n+-------------------+\n| ST_Longitude(@pt) |\n+-------------------+\n|                90 |\n+-------------------+\nmysql> SELECT ST_AsText(ST_Longitude(@pt, 10));\n+----------------------------------+\n| ST_AsText(ST_Longitude(@pt, 10)) |\n+----------------------------------+\n| POINT(45 10)                     |\n+----------------------------------+"], "Examples": ["mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Longitude(@pt);\n+-------------------+\n| ST_Longitude(@pt) |\n+-------------------+\n|                90 |\n+-------------------+\nmysql> SELECT ST_AsText(ST_Longitude(@pt, 10));\n+----------------------------------+\n| ST_AsText(ST_Longitude(@pt, 10)) |\n+----------------------------------+\n| POINT(45 10)                     |\n+----------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-longitude"], "Feature Type": ["Function"], "index": 789, "vector_txt": "789:Feature: ST_Longitude(p\n            [, new_longitude_val])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MakeEnvelope(pt1,\n          pt2)"], "Description": ["Rectangle around two points", "\nST_MakeEnvelope(pt1,\n          pt2)\n", "\n          Returns the rectangle that forms the envelope around two\n          points, as a Point,\n          LineString, or Polygon.\n        ", "\n          Calculations are done using the Cartesian coordinate system\n          rather than on a sphere, spheroid, or on earth.\n        ", "\n          Given two points pt1 and\n          pt2,\n          ST_MakeEnvelope() creates the\n          result geometry on an abstract plane like this:\n", "\n\n              If pt1 and\n              pt2 are equal, the result is\n              the point pt1.\n            \n              Otherwise, if (pt1,\n              pt2) is a vertical or\n              horizontal line segment, the result is the line segment\n              (pt1,\n              pt2).\n            \n              Otherwise, the result is a polygon using\n              pt1 and\n              pt2 as diagonal points.\n\n", "\n          The result geometry has an SRID of 0.\n        ", "\nST_MakeEnvelope() handles its\n          arguments as described in the introduction to this section,\n          with these exceptions:\n", "\n\n              If the arguments are not Point values,\n              an ER_WRONG_ARGUMENTS\n              error occurs.\n            \n              An ER_GIS_INVALID_DATA\n              error occurs for the additional condition that any\n              coordinate value of the two points is infinite or\n              NaN.\n            \n              If any geometry has an SRID value for a geographic spatial\n              reference system (SRS), an\n              ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n              error occurs.\n\n", "Press CTRL+C to copy mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(1 1)');\nmysql> SELECT ST_AsText(ST_MakeEnvelope(@pt1, @pt2));\n+----------------------------------------+\n| ST_AsText(ST_MakeEnvelope(@pt1, @pt2)) |\n+----------------------------------------+\n| POLYGON((0 0,1 0,1 1,0 1,0 0))         |\n+----------------------------------------+"], "Examples": ["mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(1 1)');\nmysql> SELECT ST_AsText(ST_MakeEnvelope(@pt1, @pt2));\n+----------------------------------------+\n| ST_AsText(ST_MakeEnvelope(@pt1, @pt2)) |\n+----------------------------------------+\n| POLYGON((0 0,1 0,1 1,0 1,0 0))         |\n+----------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-makeenvelope"], "Feature Type": ["Function"], "index": 790, "vector_txt": "790:Feature: ST_MakeEnvelope(pt1,\n          pt2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MLineFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct MultiLineString from WKT", "\nST_MLineFromText(wkt\n          [, srid [,\n          options]]),\n          ST_MultiLineStringFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiLineString value using\n          its WKT representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mlinefromtext"], "Feature Type": ["Function"], "index": 791, "vector_txt": "791:Feature: ST_MLineFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MLineFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct MultiLineString from WKB", "\nST_MLineFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_MultiLineStringFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiLineString value using\n          its WKB representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mlinefromwkb"], "Feature Type": ["Function"], "index": 792, "vector_txt": "792:Feature: ST_MLineFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MPointFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct MultiPoint from WKT", "\nST_MPointFromText(wkt\n          [, srid [,\n          options]]),\n          ST_MultiPointFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPoint value using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mpointfromtext"], "Feature Type": ["Function"], "index": 793, "vector_txt": "793:Feature: ST_MPointFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MPointFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct MultiPoint from WKB", "\nST_MPointFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_MultiPointFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPoint value using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mpointfromwkb"], "Feature Type": ["Function"], "index": 794, "vector_txt": "794:Feature: ST_MPointFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MPolyFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct MultiPolygon from WKT", "\nST_MPolyFromText(wkt\n          [, srid [,\n          options]]),\n          ST_MultiPolygonFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPolygon value using its\n          WKT representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mpolyfromtext"], "Feature Type": ["Function"], "index": 795, "vector_txt": "795:Feature: ST_MPolyFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_MPolyFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct MultiPolygon from WKB", "\nST_MPolyFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_MultiPolygonFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPolygon value using its\n          WKB representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mpolyfromwkb"], "Feature Type": ["Function"], "index": 796, "vector_txt": "796:Feature: ST_MPolyFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_NumGeometries(gc)"], "Description": ["Return number of geometries in geometry collection", "\nST_NumGeometries(gc)\n", "\n            Returns the number of geometries in the\n            GeometryCollection value\n            gc.\n          ", "\nST_NumGeometries() handles\n            its arguments as described in the introduction to this\n            section.\n          ", "Press CTRL+C to copy mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_NumGeometries(ST_GeomFromText(@gc));\n+----------------------------------------+\n| ST_NumGeometries(ST_GeomFromText(@gc)) |\n+----------------------------------------+\n|                                      2 |\n+----------------------------------------+"], "Examples": ["mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_NumGeometries(ST_GeomFromText(@gc));\n+----------------------------------------+\n| ST_NumGeometries(ST_GeomFromText(@gc)) |\n+----------------------------------------+\n|                                      2 |\n+----------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-geometrycollection-property-functions.html#function_st-numgeometries"], "Feature Type": ["Function"], "index": 797, "vector_txt": "797:Feature: ST_NumGeometries(gc)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_NumInteriorRing(poly)"], "Description": ["Return number of interior rings in Polygon", "\nST_NumInteriorRing(poly),\n            ST_NumInteriorRings(poly)\n", "\n            Returns the number of interior rings in the\n            Polygon value\n            poly.\n          ", "\nST_NumInteriorRing()\n            and ST_NuminteriorRings()\n            handle their arguments as described in the introduction to\n            this section.\n          ", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));\n+---------------------------------------------+\n| ST_NumInteriorRings(ST_GeomFromText(@poly)) |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));\n+---------------------------------------------+\n| ST_NumInteriorRings(ST_GeomFromText(@poly)) |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-numinteriorrings"], "Feature Type": ["Function"], "index": 798, "vector_txt": "798:Feature: ST_NumInteriorRing(poly)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DATE(expr)"], "Description": ["Extract the date part of a date or datetime expression", "\nDATE(expr)\n", "\n          Extracts the date part of the date or datetime expression\n          expr. Returns\n          NULL if expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DATE('2003-12-31 01:02:03');\n        -> '2003-12-31'"], "Examples": ["mysql> SELECT DATE('2003-12-31 01:02:03');\n        -> '2003-12-31'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date"], "Feature Type": ["Function"], "index": 799, "vector_txt": "799:Feature: DATE(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_NumPoints(ls)"], "Description": ["Return number of points in LineString", "\nST_NumPoints(ls)\n", "\n            Returns the number of Point objects in\n            the LineString value\n            ls.\n          ", "\nST_NumPoints() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_NumPoints(ST_GeomFromText(@ls));\n+------------------------------------+\n| ST_NumPoints(ST_GeomFromText(@ls)) |\n+------------------------------------+\n|                                  3 |\n+------------------------------------+"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_NumPoints(ST_GeomFromText(@ls));\n+------------------------------------+\n| ST_NumPoints(ST_GeomFromText(@ls)) |\n+------------------------------------+\n|                                  3 |\n+------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-numpoints"], "Feature Type": ["Function"], "index": 800, "vector_txt": "800:Feature: ST_NumPoints(ls)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Overlaps(g1,\n            g2)"], "Description": ["Whether one geometry overlaps another", "\nST_Overlaps(g1,\n            g2)\n", "\n            Two geometries spatially overlap if\n            they intersect and their intersection results in a geometry\n            of the same dimension but not equal to either of the given\n            geometries.\n          ", "\n            This function returns 1 or 0 to indicate whether\n            g1 spatially overlaps\n            g2.\n          ", "\nST_Overlaps() handles its\n            arguments as described in the introduction to this section\n            except that the return value is NULL for\n            the additional condition that the dimensions of the two\n            geometries are not equal.\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-overlaps"], "Feature Type": ["Function"], "index": 801, "vector_txt": "801:Feature: ST_Overlaps(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PointAtDistance(ls,\n          distance)"], "Description": ["The point a given distance along a LineString", "\nST_PointAtDistance(ls,\n          distance)\n", "\n          This function takes a LineString geometry\n          and a distance in the range [0.0,\n          ST_Length(ls)]\n          measured in the unit of the spatial reference system (SRS) of\n          the LineString, and returns the\n          Point along the\n          LineString at that distance from its start\n          point. It can be used to answer questions such as which\n          Point value is 400 meters from the start of\n          the road described by the geometry argument.\n        ", "\n          The function is implemented for LineString\n          geometries in all spatial reference systems, both Cartesian\n          and geographic.\n        ", "\nST_PointAtDistance() handles\n          its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If the geometry argument is not a\n              LineString, an\n              ER_UNEXPECTED_GEOMETRY_TYPE\n              error occurs.\n            \n              If the fractional distance argument is outside the range\n              [0.0,\n              ST_Length(ls)],\n              an ER_DATA_OUT_OF_RANGE\n              error occurs.\n\n", "\nST_PointAtDistance() is a MySQL\n          extension to OpenGIS.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-pointatdistance"], "Feature Type": ["Function"], "index": 802, "vector_txt": "802:Feature: ST_PointAtDistance(ls,\n          distance)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PointFromGeoHash(geohash_str,\n          srid)"], "Description": ["Convert geohash value to POINT value", "\nST_PointFromGeoHash(geohash_str,\n          srid)\n", "\n          Returns a POINT value containing the\n          decoded geohash value, given a geohash string value.\n        ", "\n          The X and Y coordinates of the point are the longitude in the\n          range [\u2212180, 180] and the latitude in the range\n          [\u221290, 90], respectively.\n        ", "\n          The srid argument is an 32-bit\n          unsigned integer.\n        ", "\n          The remarks in the description of\n          ST_LatFromGeoHash() regarding\n          the maximum number of characters processed from the\n          geohash_str argument also apply to\n          ST_PointFromGeoHash().\n        ", "\nST_PointFromGeoHash() handles\n          its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SET @gh = ST_GeoHash(45,-20,10);\nmysql> SELECT ST_AsText(ST_PointFromGeoHash(@gh,0));\n+---------------------------------------+\n| ST_AsText(ST_PointFromGeoHash(@gh,0)) |\n+---------------------------------------+\n| POINT(45 -20)                         |\n+---------------------------------------+"], "Examples": ["mysql> SET @gh = ST_GeoHash(45,-20,10);\nmysql> SELECT ST_AsText(ST_PointFromGeoHash(@gh,0));\n+---------------------------------------+\n| ST_AsText(ST_PointFromGeoHash(@gh,0)) |\n+---------------------------------------+\n| POINT(45 -20)                         |\n+---------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-pointfromgeohash"], "Feature Type": ["Function"], "index": 803, "vector_txt": "803:Feature: ST_PointFromGeoHash(geohash_str,\n          srid)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PointFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct Point from WKT", "\nST_PointFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a Point value using its WKT\n          representation and SRID.\n        ", "\nST_PointFromText() handles its\n          arguments as described in the introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-pointfromtext"], "Feature Type": ["Function"], "index": 804, "vector_txt": "804:Feature: ST_PointFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PointFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct Point from WKB", "\nST_PointFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a Point value using its WKB\n          representation and SRID.\n        ", "\nST_PointFromWKB() handles its\n          arguments as described in the introduction to this section.\n        "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-pointfromwkb"], "Feature Type": ["Function"], "index": 805, "vector_txt": "805:Feature: ST_PointFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PointN(ls,\n            N)"], "Description": ["Return N-th point from LineString", "\nST_PointN(ls,\n            N)\n", "\n            Returns the N-th\n            Point in the\n            Linestring value\n            ls. Points are numbered beginning\n            with 1.\n          ", "\nST_PointN() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_PointN(ST_GeomFromText(@ls),2));\n+----------------------------------------------+\n| ST_AsText(ST_PointN(ST_GeomFromText(@ls),2)) |\n+----------------------------------------------+\n| POINT(2 2)                                   |\n+----------------------------------------------+"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_PointN(ST_GeomFromText(@ls),2));\n+----------------------------------------------+\n| ST_AsText(ST_PointN(ST_GeomFromText(@ls),2)) |\n+----------------------------------------------+\n| POINT(2 2)                                   |\n+----------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-pointn"], "Feature Type": ["Function"], "index": 806, "vector_txt": "806:Feature: ST_PointN(ls,\n            N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PolyFromText(wkt\n          [, srid [,\n          options]])"], "Description": ["Construct Polygon from WKT", "\nST_PolyFromText(wkt\n          [, srid [,\n          options]]),\n          ST_PolygonFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a Polygon value using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-polyfromtext"], "Feature Type": ["Function"], "index": 807, "vector_txt": "807:Feature: ST_PolyFromText(wkt\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_PolyFromWKB(wkb\n          [, srid [,\n          options]])"], "Description": ["Construct Polygon from WKB", "\nST_PolyFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_PolygonFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a Polygon value using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-polyfromwkb"], "Feature Type": ["Function"], "index": 808, "vector_txt": "808:Feature: ST_PolyFromWKB(wkb\n          [, srid [,\n          options]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Simplify(g,\n          max_distance)"], "Description": ["Return simplified geometry", "\nST_Simplify(g,\n          max_distance)\n", "\n          Simplifies a geometry using the Douglas-Peucker algorithm and\n          returns a simplified value of the same type.\n        ", "\n          The geometry may be any geometry type, although the\n          Douglas-Peucker algorithm may not actually process every type.\n          A geometry collection is processed by giving its components\n          one by one to the simplification algorithm, and the returned\n          geometries are put into a geometry collection as result.\n        ", "\n          The max_distance argument is the\n          distance (in units of the input coordinates) of a vertex to\n          other segments to be removed. Vertices within this distance of\n          the simplified linestring are removed.\n        ", "\n          According to Boost.Geometry, geometries might become invalid\n          as a result of the simplification process, and the process\n          might create self-intersections. To check the validity of the\n          result, pass it to\n          ST_IsValid().\n        ", "\nST_Simplify() handles its\n          arguments as described in the introduction to this section,\n          with this exception:\n", "\n\n              If the max_distance argument is\n              not positive, or is NaN, an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n\n", "Press CTRL+C to copy mysql> SET @g = ST_GeomFromText('LINESTRING(0 0,0 1,1 1,1 2,2 2,2 3,3 3)');\nmysql> SELECT ST_AsText(ST_Simplify(@g, 0.5));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 0.5)) |\n+---------------------------------+\n| LINESTRING(0 0,0 1,1 1,2 3,3 3) |\n+---------------------------------+\nmysql> SELECT ST_AsText(ST_Simplify(@g, 1.0));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 1.0)) |\n+---------------------------------+\n| LINESTRING(0 0,3 3)             |\n+---------------------------------+"], "Examples": ["mysql> SET @g = ST_GeomFromText('LINESTRING(0 0,0 1,1 1,1 2,2 2,2 3,3 3)');\nmysql> SELECT ST_AsText(ST_Simplify(@g, 0.5));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 0.5)) |\n+---------------------------------+\n| LINESTRING(0 0,0 1,1 1,2 3,3 3) |\n+---------------------------------+\nmysql> SELECT ST_AsText(ST_Simplify(@g, 1.0));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 1.0)) |\n+---------------------------------+\n| LINESTRING(0 0,3 3)             |\n+---------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-simplify"], "Feature Type": ["Function"], "index": 809, "vector_txt": "809:Feature: ST_Simplify(g,\n          max_distance)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DATE_ADD(date,INTERVAL\n          expr\nunit)"], "Description": ["Add time values (intervals) to a date value", "\nDATE_ADD(date,INTERVAL\n          expr\nunit),\n          DATE_SUB(date,INTERVAL\n          expr\nunit)\n", "\n          These functions perform date arithmetic. The\n          date argument specifies the\n          starting date or datetime value.\n          expr is an expression specifying\n          the interval value to be added or subtracted from the starting\n          date. expr is evaluated as a\n          string; it may start with a - for negative\n          intervals. unit is a keyword\n          indicating the units in which the expression should be\n          interpreted.\n        ", "\n          For more information about temporal interval syntax, including\n          a full list of unit specifiers, the\n          expected form of the expr argument\n          for each unit value, and rules for\n          operand interpretation in temporal arithmetic, see\n          Temporal Intervals.\n        ", "\n          The return value depends on the arguments:\n", "\n\n              If date is\n              NULL, the function returns\n              NULL.\n            \nDATE if the\n              date argument is a\n              DATE value and your\n              calculations involve only YEAR,\n              MONTH, and DAY parts\n              (that is, no time parts).\n            \nTIME if the\n              date argument is a\n              TIME value and the calculations involve\n              only HOURS, MINUTES,\n              and SECONDS parts (that is, no date\n              parts).\n            \nDATETIME if the first\n              argument is a DATETIME (or\n              TIMESTAMP) value, or if the\n              first argument is a DATE\n              and the unit value uses\n              HOURS, MINUTES, or\n              SECONDS, or if the first argument is of\n              type TIME and the\n              unit value uses\n              YEAR, MONTH, or\n              DAY.\n            \n              If the first argument is a dynamic parameter (for example,\n              of a prepared statement), its resolved type is\n              DATE if the second argument is an\n              interval that contains some combination of\n              YEAR, MONTH, or\n              DAY values only; otherwise, its type is\n              DATETIME.\n            \n              String otherwise (type\n              VARCHAR).\n\n", "\n          To ensure that the result is\n          DATETIME, you can use\n          CAST() to convert the first\n          argument to DATETIME.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);\n        -> '2018-05-02'\nmysql> SELECT DATE_SUB('2018-05-01',INTERVAL 1 YEAR);\n        -> '2017-05-01'\nmysql> SELECT DATE_ADD('2020-12-31 23:59:59',\n    ->                 INTERVAL 1 SECOND);\n        -> '2021-01-01 00:00:00'\nmysql> SELECT DATE_ADD('2018-12-31 23:59:59',\n    ->                 INTERVAL 1 DAY);\n        -> '2019-01-01 23:59:59'\nmysql> SELECT DATE_ADD('2100-12-31 23:59:59',\n    ->                 INTERVAL '1:1' MINUTE_SECOND);\n        -> '2101-01-01 00:01:00'\nmysql> SELECT DATE_SUB('2025-01-01 00:00:00',\n    ->                 INTERVAL '1 1:1:1' DAY_SECOND);\n        -> '2024-12-30 22:58:59'\nmysql> SELECT DATE_ADD('1900-01-01 00:00:00',\n    ->                 INTERVAL '-1 10' DAY_HOUR);\n        -> '1899-12-30 14:00:00'\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n        -> '1997-12-02'\nmysql> SELECT DATE_ADD('1992-12-31 23:59:59.000002',\n    ->            INTERVAL '1.999999' SECOND_MICROSECOND);\n        -> '1993-01-01 00:00:01.000001'", "\n          When adding a MONTH interval to a\n          DATE or DATETIME value,\n          and the resulting date includes a day that does not exist in\n          the given month, the day is adjusted to the last day of the\n          month, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1, \n     >        DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2;\n+------------+------------+\n| d1         | d2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);\n        -> '2018-05-02'\nmysql> SELECT DATE_SUB('2018-05-01',INTERVAL 1 YEAR);\n        -> '2017-05-01'\nmysql> SELECT DATE_ADD('2020-12-31 23:59:59',\n    ->                 INTERVAL 1 SECOND);\n        -> '2021-01-01 00:00:00'\nmysql> SELECT DATE_ADD('2018-12-31 23:59:59',\n    ->                 INTERVAL 1 DAY);\n        -> '2019-01-01 23:59:59'\nmysql> SELECT DATE_ADD('2100-12-31 23:59:59',\n    ->                 INTERVAL '1:1' MINUTE_SECOND);\n        -> '2101-01-01 00:01:00'\nmysql> SELECT DATE_SUB('2025-01-01 00:00:00',\n    ->                 INTERVAL '1 1:1:1' DAY_SECOND);\n        -> '2024-12-30 22:58:59'\nmysql> SELECT DATE_ADD('1900-01-01 00:00:00',\n    ->                 INTERVAL '-1 10' DAY_HOUR);\n        -> '1899-12-30 14:00:00'\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n        -> '1997-12-02'\nmysql> SELECT DATE_ADD('1992-12-31 23:59:59.000002',\n    ->            INTERVAL '1.999999' SECOND_MICROSECOND);\n        -> '1993-01-01 00:00:01.000001'", "mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1, \n     >        DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2;\n+------------+------------+\n| d1         | d2         |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-add"], "Feature Type": ["Function"], "index": 810, "vector_txt": "810:Feature: DATE_ADD(date,INTERVAL\n          expr\nunit)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_SRID(g [,\n            srid])"], "Description": ["Return spatial reference system ID for geometry", "\nST_SRID(g [,\n            srid])\n", "\n            With a single argument representing a valid geometry object\n            g,\n            ST_SRID() returns an integer\n            indicating the ID of the spatial reference system (SRS)\n            associated with g.\n          ", "\n            With the optional second argument representing a valid SRID\n            value, ST_SRID() returns an\n            object with the same type as its first argument with an SRID\n            value equal to the second argument. This only sets the SRID\n            value of the object; it does not perform any transformation\n            of coordinate values.\n          ", "\nST_SRID() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                For the single-argument syntax,\n                ST_SRID() returns the\n                geometry SRID even if it refers to an undefined SRS. An\n                ER_SRS_NOT_FOUND error\n                does not occur.\n\n", "\nST_SRID(g,\n            target_srid) and\n            ST_Transform(g,\n            target_srid) differ as\n            follows:\n", "\n\nST_SRID() changes the\n                geometry SRID value without transforming its\n                coordinates.\n              \nST_Transform() transforms\n                the geometry coordinates in addition to changing its\n                SRID value.\n\n", "Press CTRL+C to copy mysql> SET @g = ST_GeomFromText('LineString(1 1,2 2)', 0);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|           0 |\n+-------------+\nmysql> SET @g = ST_SRID(@g, 4326);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|        4326 |\n+-------------+", "\n            It is possible to create a geometry in a particular SRID by\n            passing to ST_SRID() the\n            result of one of the MySQL-specific functions for creating\n            spatial values, along with an SRID value. For example:\n          ", "Press CTRL+C to copy SET @g1 = ST_SRID(Point(1, 1), 4326);", "\n            However, that method creates the geometry in SRID 0, then\n            casts it to SRID 4326 (WGS 84). A preferable alternative is\n            to create the geometry with the correct spatial reference\n            system to begin with. For example:\n          ", "Press CTRL+C to copy SET @g1 = ST_PointFromText('POINT(1 1)', 4326);\nSET @g1 = ST_GeomFromText('POINT(1 1)', 4326);", "\n            The two-argument form of\n            ST_SRID() is useful for tasks\n            such as correcting or changing the SRS of geometries that\n            have an incorrect SRID.\n"], "Examples": ["mysql> SET @g = ST_GeomFromText('LineString(1 1,2 2)', 0);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|           0 |\n+-------------+\nmysql> SET @g = ST_SRID(@g, 4326);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|        4326 |\n+-------------+", "SET @g1 = ST_SRID(Point(1, 1), 4326);", "SET @g1 = ST_PointFromText('POINT(1 1)', 4326);\nSET @g1 = ST_GeomFromText('POINT(1 1)', 4326);"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-srid"], "Feature Type": ["Function"], "index": 811, "vector_txt": "811:Feature: ST_SRID(g [,\n            srid])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_StartPoint(ls)"], "Description": ["Start Point of LineString", "\nST_StartPoint(ls)\n", "\n            Returns the Point that is the start point\n            of the LineString value\n            ls.\n          ", "\nST_StartPoint() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_StartPoint(ST_GeomFromText(@ls)));\n+------------------------------------------------+\n| ST_AsText(ST_StartPoint(ST_GeomFromText(@ls))) |\n+------------------------------------------------+\n| POINT(1 1)                                     |\n+------------------------------------------------+"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_StartPoint(ST_GeomFromText(@ls)));\n+------------------------------------------------+\n| ST_AsText(ST_StartPoint(ST_GeomFromText(@ls))) |\n+------------------------------------------------+\n| POINT(1 1)                                     |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-startpoint"], "Feature Type": ["Function"], "index": 812, "vector_txt": "812:Feature: ST_StartPoint(ls)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_SwapXY(g)"], "Description": ["Return argument with X/Y coordinates swapped", "\nST_SwapXY(g)\n", "\n          Accepts an argument in internal geometry format, swaps the X\n          and Y values of each coordinate pair within the geometry, and\n          returns the result.\n        ", "\nST_SwapXY() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)');\nmysql> SELECT ST_AsText(@g);\n+----------------------------+\n| ST_AsText(@g)              |\n+----------------------------+\n| LINESTRING(0 5,5 10,10 15) |\n+----------------------------+\nmysql> SELECT ST_AsText(ST_SwapXY(@g));\n+----------------------------+\n| ST_AsText(ST_SwapXY(@g))   |\n+----------------------------+\n| LINESTRING(5 0,10 5,15 10) |\n+----------------------------+"], "Examples": ["mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)');\nmysql> SELECT ST_AsText(@g);\n+----------------------------+\n| ST_AsText(@g)              |\n+----------------------------+\n| LINESTRING(0 5,5 10,10 15) |\n+----------------------------+\nmysql> SELECT ST_AsText(ST_SwapXY(@g));\n+----------------------------+\n| ST_AsText(ST_SwapXY(@g))   |\n+----------------------------+\n| LINESTRING(5 0,10 5,15 10) |\n+----------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-format-conversion-functions.html#function_st-swapxy"], "Feature Type": ["Function"], "index": 813, "vector_txt": "813:Feature: ST_SwapXY(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_SymDifference(g1,\n          g2)"], "Description": ["Return point set symmetric difference of two geometries", "\nST_SymDifference(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set symmetric\n          difference of the geometry values\n          g1 and\n          g2, which is defined as:\n        ", "Press CTRL+C to copy g1 symdifference g2 := (g1 union g2) difference (g1 intersection g2)", "\n          Or, in function call notation:\n        ", "Press CTRL+C to copy ST_SymDifference(g1, g2) = ST_Difference(ST_Union(g1, g2), ST_Intersection(g1, g2))", "\n          The result is in the same SRS as the geometry arguments.\n        ", "\nST_SymDifference() permits\n          arguments in either a Cartesian or a geographic SRS, and\n          handles its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('MULTIPOINT(5 0,15 10,15 25)');\nmysql> SET @g2 = ST_GeomFromText('MULTIPOINT(1 1,15 10,15 25)');\nmysql> SELECT ST_AsText(ST_SymDifference(@g1, @g2));\n+---------------------------------------+\n| ST_AsText(ST_SymDifference(@g1, @g2)) |\n+---------------------------------------+\n| MULTIPOINT((1 1),(5 0))               |\n+---------------------------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('MULTIPOINT(5 0,15 10,15 25)');\nmysql> SET @g2 = ST_GeomFromText('MULTIPOINT(1 1,15 10,15 25)');\nmysql> SELECT ST_AsText(ST_SymDifference(@g1, @g2));\n+---------------------------------------+\n| ST_AsText(ST_SymDifference(@g1, @g2)) |\n+---------------------------------------+\n| MULTIPOINT((1 1),(5 0))               |\n+---------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-symdifference"], "Feature Type": ["Function"], "index": 814, "vector_txt": "814:Feature: ST_SymDifference(g1,\n          g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Touches(g1,\n            g2)"], "Description": ["Whether one geometry touches another", "\nST_Touches(g1,\n            g2)\n", "\n            Two geometries spatially touch if their\n            interiors do not intersect, but the boundary of one of the\n            geometries intersects either the boundary or the interior of\n            the other.\n          ", "\n            This function returns 1 or 0 to indicate whether\n            g1 spatially touches\n            g2.\n          ", "\nST_Touches() handles its\n            arguments as described in the introduction to this section\n            except that the return value is NULL for\n            the additional condition that both geometries are of\n            dimension 0 (Point or\n            MultiPoint).\n          "], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-touches"], "Feature Type": ["Function"], "index": 815, "vector_txt": "815:Feature: ST_Touches(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Transform(g,\n          target_srid)"], "Description": ["Transform coordinates of geometry", "\nST_Transform(g,\n          target_srid)\n", "\n          Transforms a geometry from one spatial reference system (SRS)\n          to another. The return value is a geometry of the same type as\n          the input geometry with all coordinates transformed to the\n          target SRID, target_srid. MySQL\n          supports all SRSs defined by EPSG except for those listed\n          here:\n", "\n\n              EPSG 1042 Krovak Modified\n            \n              EPSG 1043 Krovak Modified (North Orientated)\n            \n              EPSG 9816 Tunisia Mining Grid\n            \n              EPSG 9826 Lambert Conic Conformal (West Orientated)\n\n", "\nST_Transform() handles its\n          arguments as described in the introduction to this section,\n          with these exceptions:\n", "\n\n              Geometry arguments that have an SRID value for a\n              geographic SRS do not produce an error.\n            \n              If the geometry or target SRID argument has an SRID value\n              that refers to an undefined spatial reference system\n              (SRS), an ER_SRS_NOT_FOUND\n              error occurs.\n            \n              If the geometry is in an SRS that\n              ST_Transform() cannot\n              transform from, an\n              ER_TRANSFORM_SOURCE_SRS_NOT_SUPPORTED\n              error occurs.\n            \n              If the target SRID is in an SRS that\n              ST_Transform() cannot\n              transform to, an\n              ER_TRANSFORM_TARGET_SRS_NOT_SUPPORTED\n              error occurs.\n            \n              If the geometry is in an SRS that is not WGS 84 and has no\n              TOWGS84 clause, an\n              ER_TRANSFORM_SOURCE_SRS_MISSING_TOWGS84\n              error occurs.\n            \n              If the target SRID is in an SRS that is not WGS 84 and has\n              no TOWGS84 clause, an\n              ER_TRANSFORM_TARGET_SRS_MISSING_TOWGS84\n              error occurs.\n\n", "\nST_SRID(g,\n          target_srid) and\n          ST_Transform(g,\n          target_srid) differ as\n          follows:\n", "\n\nST_SRID() changes the\n              geometry SRID value without transforming its coordinates.\n            \nST_Transform() transforms\n              the geometry coordinates in addition to changing its SRID\n              value.\n\n", "Press CTRL+C to copy mysql> SET @p = ST_GeomFromText('POINT(52.381389 13.064444)', 4326);\nmysql> SELECT ST_AsText(@p);\n+----------------------------+\n| ST_AsText(@p)              |\n+----------------------------+\n| POINT(52.381389 13.064444) |\n+----------------------------+\nmysql> SET @p = ST_Transform(@p, 4230);\nmysql> SELECT ST_AsText(@p);\n+---------------------------------------------+\n| ST_AsText(@p)                               |\n+---------------------------------------------+\n| POINT(52.38208611407426 13.065520672345304) |\n+---------------------------------------------+"], "Examples": ["mysql> SET @p = ST_GeomFromText('POINT(52.381389 13.064444)', 4326);\nmysql> SELECT ST_AsText(@p);\n+----------------------------+\n| ST_AsText(@p)              |\n+----------------------------+\n| POINT(52.381389 13.064444) |\n+----------------------------+\nmysql> SET @p = ST_Transform(@p, 4230);\nmysql> SELECT ST_AsText(@p);\n+---------------------------------------------+\n| ST_AsText(@p)                               |\n+---------------------------------------------+\n| POINT(52.38208611407426 13.065520672345304) |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-transform"], "Feature Type": ["Function"], "index": 816, "vector_txt": "816:Feature: ST_Transform(g,\n          target_srid)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Union(g1,\n          g2)"], "Description": ["Return point set union of two geometries", "\nST_Union(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set union of the\n          geometry values g1 and\n          g2. The result is in the same SRS\n          as the geometry arguments.\n        ", "\nST_Union() permits arguments in\n          either a Cartesian or a geographic SRS, and handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Union(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Union(@g1, @g2))        |\n+--------------------------------------+\n| MULTILINESTRING((1 1,3 3),(1 3,3 1)) |\n+--------------------------------------+"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Union(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Union(@g1, @g2))        |\n+--------------------------------------+\n| MULTILINESTRING((1 1,3 3),(1 3,3 1)) |\n+--------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-union"], "Feature Type": ["Function"], "index": 817, "vector_txt": "817:Feature: ST_Union(g1,\n          g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Validate(g)"], "Description": ["Return validated geometry", "\nST_Validate(g)\n", "\n          Validates a geometry according to the OGC specification. A\n          geometry can be syntactically well-formed (WKB value plus\n          SRID) but geometrically invalid. For example, this polygon is\n          geometrically invalid: POLYGON((0 0, 0 0, 0 0, 0 0, 0\n          0))\n", "\nST_Validate() returns the\n          geometry if it is syntactically well-formed and is\n          geometrically valid, NULL if the argument\n          is not syntactically well-formed or is not geometrically valid\n          or is NULL.\n        ", "\nST_Validate() can be used to\n          filter out invalid geometry data, although at a cost. For\n          applications that require more precise results not tainted by\n          invalid data, this penalty may be worthwhile.\n        ", "\n          If the geometry argument is valid, it is returned as is,\n          except that if an input Polygon or\n          MultiPolygon has clockwise rings, those\n          rings are reversed before checking for validity. If the\n          geometry is valid, the value with the reversed rings is\n          returned.\n        ", "\n          The only valid empty geometry is represented in the form of an\n          empty geometry collection value.\n          ST_Validate() returns it\n          directly without further checks in this case.\n        ", "\nST_Validate() handles its\n          arguments as described in the introduction to this section,\n          with the exceptions listed here:\n", "\n\n              If the geometry has a geographic SRS with a longitude or\n              latitude that is out of range, an error occurs:\n\n\n\n                  If a longitude value is not in the range (\u2212180,\n                  180], an\n                  ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                  error occurs.\n                \n                  If a latitude value is not in the range [\u221290,\n                  90], an\n                  ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                  error occurs.\n\n\n\n              Ranges shown are in degrees. The exact range limits\n              deviate slightly due to floating-point arithmetic.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_AsText(ST_Validate(@ls1));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls1)) |\n+------------------------------+\n| NULL                         |\n+------------------------------+\nmysql> SELECT ST_AsText(ST_Validate(@ls2));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls2)) |\n+------------------------------+\n| LINESTRING(0 0,1 1)          |\n+------------------------------+"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_AsText(ST_Validate(@ls1));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls1)) |\n+------------------------------+\n| NULL                         |\n+------------------------------+\nmysql> SELECT ST_AsText(ST_Validate(@ls2));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls2)) |\n+------------------------------+\n| LINESTRING(0 0,1 1)          |\n+------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-validate"], "Feature Type": ["Function"], "index": 818, "vector_txt": "818:Feature: ST_Validate(g)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Within(g1,\n            g2)"], "Description": ["Whether one geometry is within another", "\nST_Within(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 is spatially within\n            g2. This tests the opposite\n            relationship as\n            ST_Contains().\n          ", "\nST_Within() handles its\n            arguments as described in the introduction to this section.\n"], "Examples": [], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-within"], "Feature Type": ["Function"], "index": 819, "vector_txt": "819:Feature: ST_Within(g1,\n            g2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_X(p [,\n            new_x_val])"], "Description": ["Return X coordinate of Point", "\nST_X(p [,\n            new_x_val])\n", "\n            With a single argument representing a valid\n            Point object\n            p,\n            ST_X() returns the\n            X-coordinate value of p as a\n            double-precision number. The X coordinate is considered to\n            refer to the axis that appears first in the\n            Point spatial reference system (SRS)\n            definition.\n          ", "\n            With the optional second argument,\n            ST_X() returns a\n            Point object like the first argument with\n            its X coordinate equal to the second argument. If the\n            Point object has a geographic SRS, the\n            second argument must be in the proper range for longitude or\n            latitude values.\n          ", "\nST_X() handles its arguments\n            as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_X(Point(56.7, 53.34));\n+--------------------------+\n| ST_X(Point(56.7, 53.34)) |\n+--------------------------+\n|                     56.7 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_X(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_X(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(10.5 53.34)                         |\n+-------------------------------------------+"], "Examples": ["mysql> SELECT ST_X(Point(56.7, 53.34));\n+--------------------------+\n| ST_X(Point(56.7, 53.34)) |\n+--------------------------+\n|                     56.7 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_X(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_X(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(10.5 53.34)                         |\n+-------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-x"], "Feature Type": ["Function"], "index": 820, "vector_txt": "820:Feature: ST_X(p [,\n            new_x_val])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DATE_FORMAT(date,format)"], "Description": ["Format date as specified", "\nDATE_FORMAT(date,format)\n", "\n          Formats the date value according to\n          the format string. If either\n          argument is NULL, the function returns\n          NULL.\n        ", "\n          The specifiers shown in the following table may be used in the\n          format string. The\n          % character is required before format\n          specifier characters. The specifiers apply to other functions\n          as well: STR_TO_DATE(),\n          TIME_FORMAT(),\n          UNIX_TIMESTAMP().\n", "\n\nSpecifier\nDescription\n\n%a\nAbbreviated weekday name\n                (Sun..Sat)\n\n%b\nAbbreviated month name (Jan..Dec)\n\n%c\nMonth, numeric (0..12)\n\n%D\nDay of the month with English suffix (0th,\n                1st, 2nd,\n                3rd, \u2026)\n\n%d\nDay of the month, numeric (00..31)\n\n%e\nDay of the month, numeric (0..31)\n\n%f\nMicroseconds (000000..999999)\n\n%H\nHour (00..23)\n\n%h\nHour (01..12)\n\n%I\nHour (01..12)\n\n%i\nMinutes, numeric (00..59)\n\n%j\nDay of year (001..366)\n\n%k\nHour (0..23)\n\n%l\nHour (1..12)\n\n%M\nMonth name (January..December)\n\n%m\nMonth, numeric (00..12)\n\n%p\nAM or PM\n\n%r\nTime, 12-hour (hh:mm:ss followed by\n                AM or PM)\n\n%S\nSeconds (00..59)\n\n%s\nSeconds (00..59)\n\n%T\nTime, 24-hour (hh:mm:ss)\n\n%U\nWeek (00..53), where Sunday is the\n                first day of the week;\n                WEEK() mode 0\n\n%u\nWeek (00..53), where Monday is the\n                first day of the week;\n                WEEK() mode 1\n\n%V\nWeek (01..53), where Sunday is the\n                first day of the week;\n                WEEK() mode 2; used with\n                %X\n\n%v\nWeek (01..53), where Monday is the\n                first day of the week;\n                WEEK() mode 3; used with\n                %x\n\n%W\nWeekday name (Sunday..Saturday)\n\n%w\nDay of the week\n                (0=Sunday..6=Saturday)\n\n%X\nYear for the week where Sunday is the first day of the week, numeric,\n                four digits; used with %V\n\n%x\nYear for the week, where Monday is the first day of the week, numeric,\n                four digits; used with %v\n\n%Y\nYear, numeric, four digits\n\n%y\nYear, numeric (two digits)\n\n%%\nA literal % character\n\n%x\nx, for any\n                \u201cx\u201d not listed\n                above\n\n", "\nSpecifier\nDescription\n", "\n          Ranges for the month and day specifiers begin with zero due to\n          the fact that MySQL permits the storing of incomplete dates\n          such as '2014-00-00'.\n        ", "\n          The language used for day and month names and abbreviations is\n          controlled by the value of the\n          lc_time_names system variable\n          (Section\u00a012.16, \u201cMySQL Server Locale Support\u201d).\n        ", "\n          For the %U, %u,\n          %V, and %v specifiers,\n          see the description of the\n          WEEK() function for information\n          about the mode values. The mode affects how week numbering\n          occurs.\n        ", "\nDATE_FORMAT() returns a string\n          with a character set and collation given by\n          character_set_connection and\n          collation_connection so that\n          it can return month and weekday names containing non-ASCII\n          characters.\n        ", "Press CTRL+C to copy mysql> SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n        -> 'Sunday October 2009'\nmysql> SELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n        -> '22:23:00'\nmysql> SELECT DATE_FORMAT('1900-10-04 22:23:00',\n    ->                 '%D %y %a %d %m %b %j');\n        -> '4th 00 Thu 04 10 Oct 277'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00',\n    ->                 '%H %k %I %r %T %S %w');\n        -> '22 22 10 10:23:00 PM 22:23:00 00 6'\nmysql> SELECT DATE_FORMAT('1999-01-01', '%X %V');\n        -> '1998 52'\nmysql> SELECT DATE_FORMAT('2006-06-00', '%d');\n        -> '00'"], "Examples": ["mysql> SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n        -> 'Sunday October 2009'\nmysql> SELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n        -> '22:23:00'\nmysql> SELECT DATE_FORMAT('1900-10-04 22:23:00',\n    ->                 '%D %y %a %d %m %b %j');\n        -> '4th 00 Thu 04 10 Oct 277'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00',\n    ->                 '%H %k %I %r %T %S %w');\n        -> '22 22 10 10:23:00 PM 22:23:00 00 6'\nmysql> SELECT DATE_FORMAT('1999-01-01', '%X %V');\n        -> '1998 52'\nmysql> SELECT DATE_FORMAT('2006-06-00', '%d');\n        -> '00'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-format"], "Feature Type": ["Function"], "index": 821, "vector_txt": "821:Feature: DATE_FORMAT(date,format)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/spatial-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.16.1 Spatial Function Reference"], "Feature": ["ST_Y(p [,\n            new_y_val])"], "Description": ["Return Y coordinate of Point", "\nST_Y(p [,\n            new_y_val])\n", "\n            With a single argument representing a valid\n            Point object\n            p,\n            ST_Y() returns the\n            Y-coordinate value of p as a\n            double-precision number.The Y coordinate is considered to\n            refer to the axis that appears second in the\n            Point spatial reference system (SRS)\n            definition.\n          ", "\n            With the optional second argument,\n            ST_Y() returns a\n            Point object like the first argument with\n            its Y coordinate equal to the second argument. If the\n            Point object has a geographic SRS, the\n            second argument must be in the proper range for longitude or\n            latitude values.\n          ", "\nST_Y() handles its arguments\n            as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_Y(Point(56.7, 53.34));\n+--------------------------+\n| ST_Y(Point(56.7, 53.34)) |\n+--------------------------+\n|                    53.34 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_Y(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_Y(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(56.7 10.5)                          |\n+-------------------------------------------+"], "Examples": ["mysql> SELECT ST_Y(Point(56.7, 53.34));\n+--------------------------+\n| ST_Y(Point(56.7, 53.34)) |\n+--------------------------+\n|                    53.34 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_Y(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_Y(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(56.7 10.5)                          |\n+-------------------------------------------+"], "Category": ["Built-In Functions", "Spatial Analysis Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-y"], "Feature Type": ["Function"], "index": 822, "vector_txt": "822:Feature: ST_Y(p [,\n            new_y_val])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["ASCII(str)"], "Description": ["Return numeric value of left-most character", "\nASCII(str)\n", "\n          Returns the numeric value of the leftmost character of the\n          string str. Returns\n          0 if str is the\n          empty string. Returns NULL if\n          str is NULL.\n          ASCII() works for 8-bit\n          characters.\n        ", "Press CTRL+C to copy mysql> SELECT ASCII('2');\n        -> 50\nmysql> SELECT ASCII(2);\n        -> 50\nmysql> SELECT ASCII('dx');\n        -> 100", "\n          See also the ORD() function.\n        "], "Examples": ["mysql> SELECT ASCII('2');\n        -> 50\nmysql> SELECT ASCII(2);\n        -> 50\nmysql> SELECT ASCII('dx');\n        -> 100"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ascii"], "Feature Type": ["Function"], "index": 823, "vector_txt": "823:Feature: ASCII(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["BIN(N)"], "Description": ["Return a string containing binary representation of a number", "\nBIN(N)\n", "\n          Returns a string representation of the binary value of\n          N, where\n          N is a longlong\n          (BIGINT) number. This is\n          equivalent to\n          CONV(N,10,2).\n          Returns NULL if\n          N is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT BIN(12);\n        -> '1100'"], "Examples": ["mysql> SELECT BIN(12);\n        -> '1100'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_bin"], "Feature Type": ["Function"], "index": 824, "vector_txt": "824:Feature: BIN(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["BIT_LENGTH(str)"], "Description": ["Return length of argument in bits", "\nBIT_LENGTH(str)\n", "\n          Returns the length of the string\n          str in bits. Returns\n          NULL if str is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT BIT_LENGTH('text');\n        -> 32"], "Examples": ["mysql> SELECT BIT_LENGTH('text');\n        -> 32"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_bit-length"], "Feature Type": ["Function"], "index": 825, "vector_txt": "825:Feature: BIT_LENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["CHAR(N,...\n          [USING charset_name])"], "Description": ["Return the character for each integer passed", "\nCHAR(N,...\n          [USING charset_name])\n", "\nCHAR() interprets each argument\n          N as an integer and returns a\n          string consisting of the characters given by the code values\n          of those integers. NULL values are skipped.\n        ", "Press CTRL+C to copy mysql> SELECT CHAR(77,121,83,81,'76');\n+--------------------------------------------------+\n| CHAR(77,121,83,81,'76')                          |\n+--------------------------------------------------+\n| 0x4D7953514C                                     |\n+--------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3');\n+--------------------------------------------+\n| CHAR(77,77.3,'77.3')                       |\n+--------------------------------------------+\n| 0x4D4D4D                                   |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "\n          By default, CHAR() returns a\n          binary string. To produce a string in a given character set,\n          use the optional USING clause:\n        ", "Press CTRL+C to copy mysql> SELECT CHAR(77,121,83,81,'76' USING utf8mb4);\n+---------------------------------------+\n| CHAR(77,121,83,81,'76' USING utf8mb4) |\n+---------------------------------------+\n| MySQL                                 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3' USING utf8mb4);\n+------------------------------------+\n| CHAR(77,77.3,'77.3' USING utf8mb4) |\n+------------------------------------+\n| MMM                                |\n+------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect INTEGER value: '77.3' |\n+---------+------+-------------------------------------------+\n1 row in set (0.00 sec)", "\n          If USING is given and the result string is\n          illegal for the given character set, a warning is issued.\n          Also, if strict SQL mode is enabled, the result from\n          CHAR() becomes\n          NULL.\n        ", "\n          If CHAR() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        ", "\nCHAR() arguments larger than\n          255 are converted into multiple result bytes. For example,\n          CHAR(256) is equivalent to\n          CHAR(1,0), and\n          CHAR(256*256) is equivalent to\n          CHAR(1,0,0):\n        ", "Press CTRL+C to copy mysql> SELECT HEX(CHAR(1,0)), HEX(CHAR(256));\n+----------------+----------------+\n| HEX(CHAR(1,0)) | HEX(CHAR(256)) |\n+----------------+----------------+\n| 0100           | 0100           |\n+----------------+----------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT HEX(CHAR(1,0,0)), HEX(CHAR(256*256));\n+------------------+--------------------+\n| HEX(CHAR(1,0,0)) | HEX(CHAR(256*256)) |\n+------------------+--------------------+\n| 010000           | 010000             |\n+------------------+--------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT CHAR(77,121,83,81,'76');\n+--------------------------------------------------+\n| CHAR(77,121,83,81,'76')                          |\n+--------------------------------------------------+\n| 0x4D7953514C                                     |\n+--------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3');\n+--------------------------------------------+\n| CHAR(77,77.3,'77.3')                       |\n+--------------------------------------------+\n| 0x4D4D4D                                   |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT CHAR(77,121,83,81,'76' USING utf8mb4);\n+---------------------------------------+\n| CHAR(77,121,83,81,'76' USING utf8mb4) |\n+---------------------------------------+\n| MySQL                                 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3' USING utf8mb4);\n+------------------------------------+\n| CHAR(77,77.3,'77.3' USING utf8mb4) |\n+------------------------------------+\n| MMM                                |\n+------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect INTEGER value: '77.3' |\n+---------+------+-------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT HEX(CHAR(1,0)), HEX(CHAR(256));\n+----------------+----------------+\n| HEX(CHAR(1,0)) | HEX(CHAR(256)) |\n+----------------+----------------+\n| 0100           | 0100           |\n+----------------+----------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT HEX(CHAR(1,0,0)), HEX(CHAR(256*256));\n+------------------+--------------------+\n| HEX(CHAR(1,0,0)) | HEX(CHAR(256*256)) |\n+------------------+--------------------+\n| 010000           | 010000             |\n+------------------+--------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_char"], "Feature Type": ["Function"], "index": 826, "vector_txt": "826:Feature: CHAR(N,...\n          [USING charset_name])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["CHAR_LENGTH(str)"], "Description": ["Return number of characters in argument", "\nCHAR_LENGTH(str)\n", "\n          Returns the length of the string\n          str, measured in code points. A\n          multibyte character counts as a single code point. This means\n          that, for a string containing two 3-byte characters,\n          LENGTH() returns\n          6, whereas\n          CHAR_LENGTH() returns\n          2, as shown here:\n        ", "Press CTRL+C to copy mysql> SET @dolphin:='\u6d77\u8c5a';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SELECT LENGTH(@dolphin), CHAR_LENGTH(@dolphin);\n+------------------+-----------------------+\n| LENGTH(@dolphin) | CHAR_LENGTH(@dolphin) |\n+------------------+-----------------------+\n|                6 |                     2 |\n+------------------+-----------------------+\n1 row in set (0.00 sec)", "\nCHAR_LENGTH() returns\n          NULL if str is\n          NULL.\n        "], "Examples": ["mysql> SET @dolphin:='\u6d77\u8c5a';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SELECT LENGTH(@dolphin), CHAR_LENGTH(@dolphin);\n+------------------+-----------------------+\n| LENGTH(@dolphin) | CHAR_LENGTH(@dolphin) |\n+------------------+-----------------------+\n|                6 |                     2 |\n+------------------+-----------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_char-length"], "Feature Type": ["Function"], "index": 827, "vector_txt": "827:Feature: CHAR_LENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["CHARACTER_LENGTH(str)"], "Description": ["Synonym for CHAR_LENGTH()", "\nCHARACTER_LENGTH(str)\n", "\nCHARACTER_LENGTH() is a synonym\n          for CHAR_LENGTH().\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_character-length"], "Feature Type": ["Function"], "index": 828, "vector_txt": "828:Feature: CHARACTER_LENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["CONCAT(str1,str2,...)"], "Description": ["Return concatenated string", "\nCONCAT(str1,str2,...)\n", "\n          Returns the string that results from concatenating the\n          arguments. May have one or more arguments. If all arguments\n          are nonbinary strings, the result is a nonbinary string. If\n          the arguments include any binary strings, the result is a\n          binary string. A numeric argument is converted to its\n          equivalent nonbinary string form.\n        ", "\nCONCAT() returns\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT CONCAT('My', 'S', 'QL');\n        -> 'MySQL'\nmysql> SELECT CONCAT('My', NULL, 'QL');\n        -> NULL\nmysql> SELECT CONCAT(14.3);\n        -> '14.3'", "\n          For quoted strings, concatenation can be performed by placing\n          the strings next to each other:\n        ", "Press CTRL+C to copy mysql> SELECT 'My' 'S' 'QL';\n        -> 'MySQL'", "\n          If CONCAT() is invoked from\n          within the mysql client, binary string\n          results display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT CONCAT('My', 'S', 'QL');\n        -> 'MySQL'\nmysql> SELECT CONCAT('My', NULL, 'QL');\n        -> NULL\nmysql> SELECT CONCAT(14.3);\n        -> '14.3'", "mysql> SELECT 'My' 'S' 'QL';\n        -> 'MySQL'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_concat"], "Feature Type": ["Function"], "index": 829, "vector_txt": "829:Feature: CONCAT(str1,str2,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["CONCAT_WS(separator,str1,str2,...)"], "Description": ["Return concatenate with separator", "\nCONCAT_WS(separator,str1,str2,...)\n", "\nCONCAT_WS() stands for\n          Concatenate With Separator and is a special form of\n          CONCAT(). The first argument is\n          the separator for the rest of the arguments. The separator is\n          added between the strings to be concatenated. The separator\n          can be a string, as can the rest of the arguments. If the\n          separator is NULL, the result is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT CONCAT_WS(',', 'First name', 'Second name', 'Last Name');\n        -> 'First name,Second name,Last Name'\nmysql> SELECT CONCAT_WS(',', 'First name', NULL, 'Last Name');\n        -> 'First name,Last Name'", "\nCONCAT_WS() does not skip empty\n          strings. However, it does skip any NULL\n          values after the separator argument.\n        "], "Examples": ["mysql> SELECT CONCAT_WS(',', 'First name', 'Second name', 'Last Name');\n        -> 'First name,Second name,Last Name'\nmysql> SELECT CONCAT_WS(',', 'First name', NULL, 'Last Name');\n        -> 'First name,Last Name'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_concat-ws"], "Feature Type": ["Function"], "index": 830, "vector_txt": "830:Feature: CONCAT_WS(separator,str1,str2,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["ELT(N,str1,str2,str3,...)"], "Description": ["Return string at index number", "\nELT(N,str1,str2,str3,...)\n", "\nELT() returns the\n          Nth element of the list of strings:\n          str1 if\n          N = 1,\n          str2 if\n          N = 2, and so\n          on. Returns NULL if\n          N is less than\n          1, greater than the number of arguments, or\n          NULL. ELT()\n          is the complement of FIELD().\n        ", "Press CTRL+C to copy mysql> SELECT ELT(1, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Aa'\nmysql> SELECT ELT(4, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Dd'"], "Examples": ["mysql> SELECT ELT(1, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Aa'\nmysql> SELECT ELT(4, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Dd'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_elt"], "Feature Type": ["Function"], "index": 831, "vector_txt": "831:Feature: ELT(N,str1,str2,str3,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DATE_SUB(date,INTERVAL\n          expr\nunit)"], "Description": ["Subtract a time value (interval) from a date", "\nDATE_SUB(date,INTERVAL\n          expr\nunit)\n", "\n          See the description for\n          DATE_ADD().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-sub"], "Feature Type": ["Function"], "index": 832, "vector_txt": "832:Feature: DATE_SUB(date,INTERVAL\n          expr\nunit)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["EXPORT_SET(bits,on,off[,separator[,number_of_bits]])"], "Description": ["Return a string such that for every bit set in the value bits, you", "\nEXPORT_SET(bits,on,off[,separator[,number_of_bits]])\n", "\n          Returns a string such that for every bit set in the value\n          bits, you get an\n          on string and for every bit not set\n          in the value, you get an off\n          string. Bits in bits are examined\n          from right to left (from low-order to high-order bits).\n          Strings are added to the result from left to right, separated\n          by the separator string (the\n          default being the comma character ,). The\n          number of bits examined is given by\n          number_of_bits, which has a default\n          of 64 if not specified.\n          number_of_bits is silently clipped\n          to 64 if larger than 64. It is treated as an unsigned integer,\n          so a value of \u22121 is effectively the same as 64.\n        ", "Press CTRL+C to copy mysql> SELECT EXPORT_SET(5,'Y','N',',',4);\n        -> 'Y,N,Y,N'\nmysql> SELECT EXPORT_SET(6,'1','0',',',10);\n        -> '0,1,1,0,0,0,0,0,0,0'"], "Examples": ["mysql> SELECT EXPORT_SET(5,'Y','N',',',4);\n        -> 'Y,N,Y,N'\nmysql> SELECT EXPORT_SET(6,'1','0',',',10);\n        -> '0,1,1,0,0,0,0,0,0,0'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_export-set"], "Feature Type": ["Function"], "index": 833, "vector_txt": "833:Feature: EXPORT_SET(bits,on,off[,separator[,number_of_bits]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["FIELD(str,str1,str2,str3,...)"], "Description": ["Index (position) of first argument in subsequent arguments", "\nFIELD(str,str1,str2,str3,...)\n", "\n          Returns the index (position) of str\n          in the str1,\n          str2,\n          str3, ... list.\n          Returns 0 if str\n          is not found.\n        ", "\n          If all arguments to FIELD() are\n          strings, all arguments are compared as strings. If all\n          arguments are numbers, they are compared as numbers.\n          Otherwise, the arguments are compared as double.\n        ", "\n          If str is NULL,\n          the return value is 0 because\n          NULL fails equality comparison with any\n          value. FIELD() is the\n          complement of ELT().\n        ", "Press CTRL+C to copy mysql> SELECT FIELD('Bb', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 2\nmysql> SELECT FIELD('Gg', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 0"], "Examples": ["mysql> SELECT FIELD('Bb', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 2\nmysql> SELECT FIELD('Gg', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 0"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_field"], "Feature Type": ["Function"], "index": 834, "vector_txt": "834:Feature: FIELD(str,str1,str2,str3,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["FIND_IN_SET(str,strlist)"], "Description": ["Index (position) of first argument within second argument", "\nFIND_IN_SET(str,strlist)\n", "\n          Returns a value in the range of 1 to\n          N if the string\n          str is in the string list\n          strlist consisting of\n          N substrings. A string list is a\n          string composed of substrings separated by\n          , characters. If the first argument is a\n          constant string and the second is a column of type\n          SET, the\n          FIND_IN_SET() function is\n          optimized to use bit arithmetic. Returns 0\n          if str is not in\n          strlist or if\n          strlist is the empty string.\n          Returns NULL if either argument is\n          NULL. This function does not work properly\n          if the first argument contains a comma (,)\n          character.\n        ", "Press CTRL+C to copy mysql> SELECT FIND_IN_SET('b','a,b,c,d');\n        -> 2"], "Examples": ["mysql> SELECT FIND_IN_SET('b','a,b,c,d');\n        -> 2"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_find-in-set"], "Feature Type": ["Function"], "index": 835, "vector_txt": "835:Feature: FIND_IN_SET(str,strlist)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["FORMAT(X,D[,locale])"], "Description": ["Return a number formatted to specified number of decimal places", "\nFORMAT(X,D[,locale])\n", "\n          Formats the number X to a format\n          like '#,###,###.##', rounded to\n          D decimal places, and returns the\n          result as a string. If D is\n          0, the result has no decimal point or\n          fractional part. If X or\n          D is NULL, the\n          function returns NULL.\n        ", "\n          The optional third parameter enables a locale to be specified\n          to be used for the result number's decimal point, thousands\n          separator, and grouping between separators. Permissible locale\n          values are the same as the legal values for the\n          lc_time_names system variable\n          (see Section\u00a012.16, \u201cMySQL Server Locale Support\u201d). If the locale is\n          NULL or not specified, the default locale\n          is 'en_US'.\n        ", "Press CTRL+C to copy mysql> SELECT FORMAT(12332.123456, 4);\n        -> '12,332.1235'\nmysql> SELECT FORMAT(12332.1,4);\n        -> '12,332.1000'\nmysql> SELECT FORMAT(12332.2,0);\n        -> '12,332'\nmysql> SELECT FORMAT(12332.2,2,'de_DE');\n        -> '12.332,20'"], "Examples": ["mysql> SELECT FORMAT(12332.123456, 4);\n        -> '12,332.1235'\nmysql> SELECT FORMAT(12332.1,4);\n        -> '12,332.1000'\nmysql> SELECT FORMAT(12332.2,0);\n        -> '12,332'\nmysql> SELECT FORMAT(12332.2,2,'de_DE');\n        -> '12.332,20'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_format"], "Feature Type": ["Function"], "index": 836, "vector_txt": "836:Feature: FORMAT(X,D[,locale])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["HEX(str)"], "Description": ["Hexadecimal representation of decimal or string value", "\nHEX(str),\n          HEX(N)\n", "\n          For a string argument str,\n          HEX() returns a hexadecimal\n          string representation of str where\n          each byte of each character in str\n          is converted to two hexadecimal digits. (Multibyte characters\n          therefore become more than two digits.) The inverse of this\n          operation is performed by the\n          UNHEX() function.\n        ", "\n          For a numeric argument N,\n          HEX() returns a hexadecimal\n          string representation of the value of\n          N treated as a longlong\n          (BIGINT) number. This is\n          equivalent to\n          CONV(N,10,16).\n          The inverse of this operation is performed by\n          CONV(HEX(N),16,10).\n        ", "\n          For a NULL argument, this function returns\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT X'616263', HEX('abc'), UNHEX(HEX('abc'));\n        -> 'abc', 616263, 'abc'\nmysql> SELECT HEX(255), CONV(HEX(255),16,10);\n        -> 'FF', 255"], "Examples": ["mysql> SELECT X'616263', HEX('abc'), UNHEX(HEX('abc'));\n        -> 'abc', 616263, 'abc'\nmysql> SELECT HEX(255), CONV(HEX(255),16,10);\n        -> 'FF', 255"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_hex"], "Feature Type": ["Function"], "index": 837, "vector_txt": "837:Feature: HEX(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["INSERT(str,pos,len,newstr)"], "Description": ["Insert substring at specified position up to specified number of", "\nINSERT(str,pos,len,newstr)\n", "\n          Returns the string str, with the\n          substring beginning at position pos\n          and len characters long replaced by\n          the string newstr. Returns the\n          original string if pos is not\n          within the length of the string. Replaces the rest of the\n          string from position pos if\n          len is not within the length of the\n          rest of the string. Returns NULL if any\n          argument is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT INSERT('Quadratic', 3, 4, 'What');\n        -> 'QuWhattic'\nmysql> SELECT INSERT('Quadratic', -1, 4, 'What');\n        -> 'Quadratic'\nmysql> SELECT INSERT('Quadratic', 3, 100, 'What');\n        -> 'QuWhat'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT INSERT('Quadratic', 3, 4, 'What');\n        -> 'QuWhattic'\nmysql> SELECT INSERT('Quadratic', -1, 4, 'What');\n        -> 'Quadratic'\nmysql> SELECT INSERT('Quadratic', 3, 100, 'What');\n        -> 'QuWhat'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_insert"], "Feature Type": ["Function"], "index": 838, "vector_txt": "838:Feature: INSERT(str,pos,len,newstr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["INSTR(str,substr)"], "Description": ["Return the index of the first occurrence of substring", "\nINSTR(str,substr)\n", "\n          Returns the position of the first occurrence of substring\n          substr in string\n          str. This is the same as the\n          two-argument form of LOCATE(),\n          except that the order of the arguments is reversed.\n        ", "Press CTRL+C to copy mysql> SELECT INSTR('foobarbar', 'bar');\n        -> 4\nmysql> SELECT INSTR('xbar', 'foobar');\n        -> 0", "\n          This function is multibyte safe, and is case-sensitive only if\n          at least one argument is a binary string. If either argument\n          is NULL, this functions returns\n          NULL.\n        "], "Examples": ["mysql> SELECT INSTR('foobarbar', 'bar');\n        -> 4\nmysql> SELECT INSTR('xbar', 'foobar');\n        -> 0"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_instr"], "Feature Type": ["Function"], "index": 839, "vector_txt": "839:Feature: INSTR(str,substr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LCASE(str)"], "Description": ["Synonym for LOWER()", "\nLCASE(str)\n", "\nLCASE() is a synonym for\n          LOWER().\n        ", "\nLCASE() used in a view is rewritten as\n          LOWER() when storing the view's\n          definition. (Bug #12844279)\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_lcase"], "Feature Type": ["Function"], "index": 840, "vector_txt": "840:Feature: LCASE(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LEFT(str,len)"], "Description": ["Return the leftmost number of characters as specified", "\nLEFT(str,len)\n", "\n          Returns the leftmost len characters\n          from the string str, or\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LEFT('foobarbar', 5);\n        -> 'fooba'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT LEFT('foobarbar', 5);\n        -> 'fooba'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_left"], "Feature Type": ["Function"], "index": 841, "vector_txt": "841:Feature: LEFT(str,len)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LENGTH(str)"], "Description": ["Return the length of a string in bytes", "\nLENGTH(str)\n", "\n          Returns the length of the string\n          str, measured in bytes. A multibyte\n          character counts as multiple bytes. This means that for a\n          string containing five 2-byte characters,\n          LENGTH() returns\n          10, whereas\n          CHAR_LENGTH() returns\n          5. Returns NULL if\n          str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LENGTH('text');\n        -> 4", "\n\nNote\n\n\n            The Length() OpenGIS spatial function is\n            named ST_Length() in MySQL.\n\n"], "Examples": ["mysql> SELECT LENGTH('text');\n        -> 4"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_length"], "Feature Type": ["Function"], "index": 842, "vector_txt": "842:Feature: LENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DATEDIFF(expr1,expr2)"], "Description": ["Subtract two dates", "\nDATEDIFF(expr1,expr2)\n", "\nDATEDIFF() returns\n          expr1 \u2212\n          expr2 expressed as a value in days\n          from one date to the other. expr1\n          and expr2 are date or date-and-time\n          expressions. Only the date parts of the values are used in the\n          calculation.\n        ", "Press CTRL+C to copy mysql> SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n        -> 1\nmysql> SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n        -> -31", "\n          This function returns NULL if\n          expr1 or\n          expr2 is NULL.\n        "], "Examples": ["mysql> SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n        -> 1\nmysql> SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n        -> -31"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_datediff"], "Feature Type": ["Function"], "index": 843, "vector_txt": "843:Feature: DATEDIFF(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LOAD_FILE(file_name)"], "Description": ["Load the named file", "\nLOAD_FILE(file_name)\n", "\n          Reads the file and returns the file contents as a string. To\n          use this function, the file must be located on the server\n          host, you must specify the full path name to the file, and you\n          must have the FILE privilege.\n          The file must be readable by the server and its size less than\n          max_allowed_packet bytes. If\n          the secure_file_priv system\n          variable is set to a nonempty directory name, the file to be\n          loaded must be located in that directory.\n        ", "\n          If the file does not exist or cannot be read because one of\n          the preceding conditions is not satisfied, the function\n          returns NULL.\n        ", "\n          The character_set_filesystem\n          system variable controls interpretation of file names that are\n          given as literal strings.\n        ", "Press CTRL+C to copy mysql> UPDATE t\n            SET blob_col=LOAD_FILE('/tmp/picture')\n            WHERE id=1;"], "Examples": ["mysql> UPDATE t\n            SET blob_col=LOAD_FILE('/tmp/picture')\n            WHERE id=1;"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_load-file"], "Feature Type": ["Function"], "index": 844, "vector_txt": "844:Feature: LOAD_FILE(file_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LOCATE(substr,str)"], "Description": ["Return the position of the first occurrence of substring", "\nLOCATE(substr,str),\n          LOCATE(substr,str,pos)\n", "\n          The first syntax returns the position of the first occurrence\n          of substring substr in string\n          str. The second syntax returns the\n          position of the first occurrence of substring\n          substr in string\n          str, starting at position\n          pos. Returns 0\n          if substr is not in\n          str. Returns\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LOCATE('bar', 'foobarbar');\n        -> 4\nmysql> SELECT LOCATE('xbar', 'foobar');\n        -> 0\nmysql> SELECT LOCATE('bar', 'foobarbar', 5);\n        -> 7", "\n          This function is multibyte safe, and is case-sensitive only if\n          at least one argument is a binary string.\n        "], "Examples": ["mysql> SELECT LOCATE('bar', 'foobarbar');\n        -> 4\nmysql> SELECT LOCATE('xbar', 'foobar');\n        -> 0\nmysql> SELECT LOCATE('bar', 'foobarbar', 5);\n        -> 7"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_locate"], "Feature Type": ["Function"], "index": 845, "vector_txt": "845:Feature: LOCATE(substr,str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LOWER(str)"], "Description": ["Return the argument in lowercase", "\nLOWER(str)\n", "\n          Returns the string str with all\n          characters changed to lowercase according to the current\n          character set mapping, or NULL if\n          str is NULL. The\n          default character set is utf8mb4.\n        ", "Press CTRL+C to copy mysql> SELECT LOWER('QUADRATICALLY');\n        -> 'quadratically'", "\nLOWER() (and\n          UPPER()) are ineffective when\n          applied to binary strings\n          (BINARY,\n          VARBINARY,\n          BLOB). To perform lettercase\n          conversion of a binary string, first convert it to a nonbinary\n          string using a character set appropriate for the data stored\n          in the string:\n        ", "Press CTRL+C to copy mysql> SET @str = BINARY 'New York';\nmysql> SELECT LOWER(@str), LOWER(CONVERT(@str USING utf8mb4));\n+-------------+------------------------------------+\n| LOWER(@str) | LOWER(CONVERT(@str USING utf8mb4)) |\n+-------------+------------------------------------+\n| New York    | new york                           |\n+-------------+------------------------------------+", "\n          For collations of Unicode character sets,\n          LOWER() and\n          UPPER() work according to the\n          Unicode Collation Algorithm (UCA) version in the collation\n          name, if there is one, and UCA 4.0.0 if no version is\n          specified. For example, utf8mb4_0900_ai_ci\n          and utf8mb3_unicode_520_ci work according\n          to UCA 9.0.0 and 5.2.0, respectively, whereas\n          utf8mb3_unicode_ci works according to UCA\n          4.0.0. See Section\u00a012.10.1, \u201cUnicode Character Sets\u201d.\n        ", "\n          This function is multibyte safe.\n        ", "\nLCASE() used within views is rewritten as\n          LOWER().\n        "], "Examples": ["mysql> SELECT LOWER('QUADRATICALLY');\n        -> 'quadratically'", "mysql> SET @str = BINARY 'New York';\nmysql> SELECT LOWER(@str), LOWER(CONVERT(@str USING utf8mb4));\n+-------------+------------------------------------+\n| LOWER(@str) | LOWER(CONVERT(@str USING utf8mb4)) |\n+-------------+------------------------------------+\n| New York    | new york                           |\n+-------------+------------------------------------+"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_lower"], "Feature Type": ["Function"], "index": 846, "vector_txt": "846:Feature: LOWER(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LPAD(str,len,padstr)"], "Description": ["Return the string argument, left-padded with the specified string", "\nLPAD(str,len,padstr)\n", "\n          Returns the string str, left-padded\n          with the string padstr to a length\n          of len characters. If\n          str is longer than\n          len, the return value is shortened\n          to len characters.\n        ", "Press CTRL+C to copy mysql> SELECT LPAD('hi',4,'??');\n        -> '??hi'\nmysql> SELECT LPAD('hi',1,'??');\n        -> 'h'", "\n          Returns NULL if any of its arguments are\n          NULL.\n        "], "Examples": ["mysql> SELECT LPAD('hi',4,'??');\n        -> '??hi'\nmysql> SELECT LPAD('hi',1,'??');\n        -> 'h'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_lpad"], "Feature Type": ["Function"], "index": 847, "vector_txt": "847:Feature: LPAD(str,len,padstr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["LTRIM(str)"], "Description": ["Remove leading spaces", "\nLTRIM(str)\n", "\n          Returns the string str with leading\n          space characters removed. Returns NULL if\n          str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LTRIM('  barbar');\n        -> 'barbar'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT LTRIM('  barbar');\n        -> 'barbar'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ltrim"], "Feature Type": ["Function"], "index": 848, "vector_txt": "848:Feature: LTRIM(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["MAKE_SET(bits,str1,str2,...)"], "Description": ["Return a set of comma-separated strings that have the", "\nMAKE_SET(bits,str1,str2,...)\n", "\n          Returns a set value (a string containing substrings separated\n          by , characters) consisting of the strings\n          that have the corresponding bit in\n          bits set.\n          str1 corresponds to bit 0,\n          str2 to bit 1, and so on.\n          NULL values in\n          str1,\n          str2, ... are\n          not appended to the result.\n        ", "Press CTRL+C to copy mysql> SELECT MAKE_SET(1,'a','b','c');\n        -> 'a'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice','world');\n        -> 'hello,world'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');\n        -> 'hello'\nmysql> SELECT MAKE_SET(0,'a','b','c');\n        -> ''"], "Examples": ["mysql> SELECT MAKE_SET(1,'a','b','c');\n        -> 'a'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice','world');\n        -> 'hello,world'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');\n        -> 'hello'\nmysql> SELECT MAKE_SET(0,'a','b','c');\n        -> ''"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_make-set"], "Feature Type": ["Function"], "index": 849, "vector_txt": "849:Feature: MAKE_SET(bits,str1,str2,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["MID(str,pos,len)"], "Description": ["Return a substring starting from the specified position", "\nMID(str,pos,len)\n", "\nMID(str,pos,len)\n          is a synonym for\n          SUBSTRING(str,pos,len).\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_mid"], "Feature Type": ["Function"], "index": 850, "vector_txt": "850:Feature: MID(str,pos,len)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["OCT(N)"], "Description": ["Return a string containing octal representation of a number", "\nOCT(N)\n", "\n          Returns a string representation of the octal value of\n          N, where\n          N is a longlong\n          (BIGINT) number. This is\n          equivalent to\n          CONV(N,10,8).\n          Returns NULL if\n          N is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT OCT(12);\n        -> '14'"], "Examples": ["mysql> SELECT OCT(12);\n        -> '14'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_oct"], "Feature Type": ["Function"], "index": 851, "vector_txt": "851:Feature: OCT(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["OCTET_LENGTH(str)"], "Description": ["Synonym for LENGTH()", "\nOCTET_LENGTH(str)\n", "\nOCTET_LENGTH() is a synonym for\n          LENGTH().\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_octet-length"], "Feature Type": ["Function"], "index": 852, "vector_txt": "852:Feature: OCTET_LENGTH(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["ORD(str)"], "Description": ["Return character code for leftmost character of the argument", "\nORD(str)\n", "\n          If the leftmost character of the string\n          str is a multibyte character,\n          returns the code for that character, calculated from the\n          numeric values of its constituent bytes using this formula:\n        ", "Press CTRL+C to copy   (1st byte code)\n+ (2nd byte code * 256)\n+ (3rd byte code * 256^2) ...", "\n          If the leftmost character is not a multibyte character,\n          ORD() returns the same value as\n          the ASCII() function. The\n          function returns NULL if\n          str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT ORD('2');\n        -> 50"], "Examples": ["mysql> SELECT ORD('2');\n        -> 50"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ord"], "Feature Type": ["Function"], "index": 853, "vector_txt": "853:Feature: ORD(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DAY(date)"], "Description": ["Synonym for DAYOFMONTH()", "\nDAY(date)\n", "\nDAY() is a synonym for\n          DAYOFMONTH().\n        "], "Examples": [], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_day"], "Feature Type": ["Function"], "index": 854, "vector_txt": "854:Feature: DAY(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["POSITION(substr\n          IN str)"], "Description": ["Synonym for LOCATE()", "\nPOSITION(substr\n          IN str)\n", "\nPOSITION(substr\n          IN str) is a synonym for\n          LOCATE(substr,str).\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_position"], "Feature Type": ["Function"], "index": 855, "vector_txt": "855:Feature: POSITION(substr\n          IN str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["QUOTE(str)"], "Description": ["Escape the argument for use in an SQL statement", "\nQUOTE(str)\n", "\n          Quotes a string to produce a result that can be used as a\n          properly escaped data value in an SQL statement. The string is\n          returned enclosed by single quotation marks and with each\n          instance of backslash (\\), single quote\n          ('), ASCII NUL, and\n          Control+Z preceded by a backslash. If the argument is\n          NULL, the return value is the word\n          \u201cNULL\u201d without enclosing single quotation marks.\n        ", "Press CTRL+C to copy mysql> SELECT QUOTE('Don\\'t!');\n        -> 'Don\\'t!'\nmysql> SELECT QUOTE(NULL);\n        -> NULL", "\n          For comparison, see the quoting rules for literal strings and\n          within the C API in Section\u00a011.1.1, \u201cString Literals\u201d, and\n          mysql_real_escape_string_quote().\n        "], "Examples": ["mysql> SELECT QUOTE('Don\\'t!');\n        -> 'Don\\'t!'\nmysql> SELECT QUOTE(NULL);\n        -> NULL"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_quote"], "Feature Type": ["Function"], "index": 856, "vector_txt": "856:Feature: QUOTE(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/regexp.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators", "14.8.2 Regular Expressions"], "Feature": ["REGEXP_LIKE(expr,\n              pat[,\n              match_type])"], "Description": ["Whether string matches regular expression", "\nREGEXP_LIKE(expr,\n              pat[,\n              match_type])\n", "\n              Returns 1 if the string expr\n              matches the regular expression specified by the pattern\n              pat, 0 otherwise. If\n              expr or\n              pat is NULL,\n              the return value is NULL.\n            ", "\n              The pattern can be an extended regular expression, the\n              syntax for which is discussed in\n              Regular Expression Syntax. The pattern need not be a\n              literal string. For example, it can be specified as a\n              string expression or table column.\n            ", "\n              The optional match_type\n              argument is a string that may contain any or all the\n              following characters specifying how to perform matching:\n", "\n\nc: Case-sensitive matching.\n                \ni: Case-insensitive matching.\n                \nm: Multiple-line mode. Recognize\n                  line terminators within the string. The default\n                  behavior is to match line terminators only at the\n                  start and end of the string expression.\n                \nn: The .\n                  character matches line terminators. The default is for\n                  . matching to stop at the end of a\n                  line.\n                \nu: Unix-only line endings. Only the\n                  newline character is recognized as a line ending by\n                  the ., ^, and\n                  $ match operators.\n\n", "\n              If characters specifying contradictory options are\n              specified within match_type,\n              the rightmost one takes precedence.\n            ", "\n              By default, regular expression operations use the\n              character set and collation of the\n              expr and\n              pat arguments when deciding the\n              type of a character and performing the comparison. If the\n              arguments have different character sets or collations,\n              coercibility rules apply as described in\n              Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n              Arguments may be specified with explicit collation\n              indicators to change comparison behavior.\n            ", "mysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE');\n+---------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE') |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\nmysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs);\n+------------------------------------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs) |\n+------------------------------------------------------------------+\n|                                                                0 |\n+------------------------------------------------------------------+", "\nmatch_type may be specified\n              with the c or i\n              characters to override the default case sensitivity.\n              Exception: If either argument is a binary string, the\n              arguments are handled in case-sensitive fashion as binary\n              strings, even if match_type\n              contains the i character.\n", "\n\nNote\n\n\n                MySQL uses C escape syntax in strings (for example,\n                \\n to represent the newline\n                character). If you want your\n                expr or\n                pat argument to contain a\n                literal \\, you must double it.\n                (Unless the\n                NO_BACKSLASH_ESCAPES\n                SQL mode is enabled, in which case no escape character\n                is used.)\n\n", "mysql> SELECT REGEXP_LIKE('Michael!', '.*');\n+-------------------------------+\n| REGEXP_LIKE('Michael!', '.*') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line');\n+----------------------------------------------+\n| REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line') |\n+----------------------------------------------+\n|                                            0 |\n+----------------------------------------------+\nmysql> SELECT REGEXP_LIKE('a', '^[a-d]');\n+----------------------------+\n| REGEXP_LIKE('a', '^[a-d]') |\n+----------------------------+\n|                          1 |\n+----------------------------+", "mysql> SELECT REGEXP_LIKE('abc', 'ABC');\n+---------------------------+\n| REGEXP_LIKE('abc', 'ABC') |\n+---------------------------+\n|                         1 |\n+---------------------------+\nmysql> SELECT REGEXP_LIKE('abc', 'ABC', 'c');\n+--------------------------------+\n| REGEXP_LIKE('abc', 'ABC', 'c') |\n+--------------------------------+\n|                              0 |\n+--------------------------------+"], "Examples": ["mysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE');\n+---------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE') |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\nmysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs);\n+------------------------------------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs) |\n+------------------------------------------------------------------+\n|                                                                0 |\n+------------------------------------------------------------------+", "mysql> SELECT REGEXP_LIKE('Michael!', '.*');\n+-------------------------------+\n| REGEXP_LIKE('Michael!', '.*') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line');\n+----------------------------------------------+\n| REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line') |\n+----------------------------------------------+\n|                                            0 |\n+----------------------------------------------+\nmysql> SELECT REGEXP_LIKE('a', '^[a-d]');\n+----------------------------+\n| REGEXP_LIKE('a', '^[a-d]') |\n+----------------------------+\n|                          1 |\n+----------------------------+", "mysql> SELECT REGEXP_LIKE('abc', 'ABC');\n+---------------------------+\n| REGEXP_LIKE('abc', 'ABC') |\n+---------------------------+\n|                         1 |\n+---------------------------+\nmysql> SELECT REGEXP_LIKE('abc', 'ABC', 'c');\n+--------------------------------+\n| REGEXP_LIKE('abc', 'ABC', 'c') |\n+--------------------------------+\n|                              0 |\n+--------------------------------+"], "Category": ["Built-In Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/regexp.html#function_regexp-like"], "Feature Type": ["Function"], "index": 857, "vector_txt": "857:Feature: REGEXP_LIKE(expr,\n              pat[,\n              match_type])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/regexp.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators", "14.8.2 Regular Expressions"], "Feature": ["REGEXP_REPLACE(expr,\n              pat,\n              repl[,\n              pos[,\n              occurrence[,\n              match_type]]])"], "Description": ["Replace substrings matching regular expression", "\nREGEXP_REPLACE(expr,\n              pat,\n              repl[,\n              pos[,\n              occurrence[,\n              match_type]]])\n", "\n              Replaces occurrences in the string\n              expr that match the regular\n              expression specified by the pattern\n              pat with the replacement string\n              repl, and returns the resulting\n              string. If expr,\n              pat, or\n              repl is\n              NULL, the return value is\n              NULL.\n            ", "\nREGEXP_REPLACE() takes\n              these optional arguments:\n", "\n\npos: The position in\n                  expr at which to start the\n                  search. If omitted, the default is 1.\n                \noccurrence: Which\n                  occurrence of a match to replace. If omitted, the\n                  default is 0 (which means \u201creplace all\n                  occurrences\u201d).\n                \nmatch_type: A string that\n                  specifies how to perform matching. The meaning is as\n                  described for\n                  REGEXP_LIKE().\n\n", "\n              The result returned by this function uses the character\n              set and collation of the expression searched for matches.\n            ", "\n              For additional information about how matching occurs, see\n              the description for\n              REGEXP_LIKE().\n            ", "Press CTRL+C to copy mysql> SELECT REGEXP_REPLACE('a b c', 'b', 'X');\n+-----------------------------------+\n| REGEXP_REPLACE('a b c', 'b', 'X') |\n+-----------------------------------+\n| a X c                             |\n+-----------------------------------+\nmysql> SELECT REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3);\n+----------------------------------------------------+\n| REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3) |\n+----------------------------------------------------+\n| abc def X                                          |\n+----------------------------------------------------+"], "Examples": ["mysql> SELECT REGEXP_REPLACE('a b c', 'b', 'X');\n+-----------------------------------+\n| REGEXP_REPLACE('a b c', 'b', 'X') |\n+-----------------------------------+\n| a X c                             |\n+-----------------------------------+\nmysql> SELECT REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3);\n+----------------------------------------------------+\n| REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3) |\n+----------------------------------------------------+\n| abc def X                                          |\n+----------------------------------------------------+"], "Category": ["Built-In Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/regexp.html#function_regexp-replace"], "Feature Type": ["Function"], "index": 858, "vector_txt": "858:Feature: REGEXP_REPLACE(expr,\n              pat,\n              repl[,\n              pos[,\n              occurrence[,\n              match_type]]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/regexp.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators", "14.8.2 Regular Expressions"], "Feature": ["REGEXP_SUBSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              match_type]]])"], "Description": ["Return substring matching regular expression", "\nREGEXP_SUBSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              match_type]]])\n", "\n              Returns the substring of the string\n              expr that matches the regular\n              expression specified by the pattern\n              pat, NULL if\n              there is no match. If expr or\n              pat is NULL,\n              the return value is NULL.\n            ", "\nREGEXP_SUBSTR() takes these\n              optional arguments:\n", "\n\npos: The position in\n                  expr at which to start the\n                  search. If omitted, the default is 1.\n                \noccurrence: Which\n                  occurrence of a match to search for. If omitted, the\n                  default is 1.\n                \nmatch_type: A string that\n                  specifies how to perform matching. The meaning is as\n                  described for\n                  REGEXP_LIKE().\n\n", "\n              The result returned by this function uses the character\n              set and collation of the expression searched for matches.\n            ", "\n              For additional information about how matching occurs, see\n              the description for\n              REGEXP_LIKE().\n            ", "Press CTRL+C to copy mysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+');\n+----------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+') |\n+----------------------------------------+\n| abc                                    |\n+----------------------------------------+\nmysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3);\n+----------------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3) |\n+----------------------------------------------+\n| ghi                                          |\n+----------------------------------------------+"], "Examples": ["mysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+');\n+----------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+') |\n+----------------------------------------+\n| abc                                    |\n+----------------------------------------+\nmysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3);\n+----------------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3) |\n+----------------------------------------------+\n| ghi                                          |\n+----------------------------------------------+"], "Category": ["Built-In Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/regexp.html#function_regexp-substr"], "Feature Type": ["Function"], "index": 859, "vector_txt": "859:Feature: REGEXP_SUBSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              match_type]]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["REPEAT(str,count)"], "Description": ["Repeat a string the specified number of times", "\nREPEAT(str,count)\n", "\n          Returns a string consisting of the string\n          str repeated\n          count times. If\n          count is less than 1, returns an\n          empty string. Returns NULL if\n          str or\n          count is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT REPEAT('MySQL', 3);\n        -> 'MySQLMySQLMySQL'"], "Examples": ["mysql> SELECT REPEAT('MySQL', 3);\n        -> 'MySQLMySQLMySQL'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_repeat"], "Feature Type": ["Function"], "index": 860, "vector_txt": "860:Feature: REPEAT(str,count)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["REPLACE(str,from_str,to_str)"], "Description": ["Replace occurrences of a specified string", "\nREPLACE(str,from_str,to_str)\n", "\n          Returns the string str with all\n          occurrences of the string from_str\n          replaced by the string to_str.\n          REPLACE() performs a\n          case-sensitive match when searching for\n          from_str.\n        ", "Press CTRL+C to copy mysql> SELECT REPLACE('www.mysql.com', 'w', 'Ww');\n        -> 'WwWwWw.mysql.com'", "\n          This function is multibyte safe. It returns\n          NULL if any of its arguments are\n          NULL.\n        "], "Examples": ["mysql> SELECT REPLACE('www.mysql.com', 'w', 'Ww');\n        -> 'WwWwWw.mysql.com'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_replace"], "Feature Type": ["Function"], "index": 861, "vector_txt": "861:Feature: REPLACE(str,from_str,to_str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["REVERSE(str)"], "Description": ["Reverse the characters in a string", "\nREVERSE(str)\n", "\n          Returns the string str with the\n          order of the characters reversed, or NULL\n          if str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT REVERSE('abc');\n        -> 'cba'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT REVERSE('abc');\n        -> 'cba'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_reverse"], "Feature Type": ["Function"], "index": 862, "vector_txt": "862:Feature: REVERSE(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["RIGHT(str,len)"], "Description": ["Return the specified rightmost number of characters", "\nRIGHT(str,len)\n", "\n          Returns the rightmost len\n          characters from the string str, or\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT RIGHT('foobarbar', 4);\n        -> 'rbar'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT RIGHT('foobarbar', 4);\n        -> 'rbar'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_right"], "Feature Type": ["Function"], "index": 863, "vector_txt": "863:Feature: RIGHT(str,len)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["RPAD(str,len,padstr)"], "Description": ["Append string the specified number of times", "\nRPAD(str,len,padstr)\n", "\n          Returns the string str,\n          right-padded with the string padstr\n          to a length of len characters. If\n          str is longer than\n          len, the return value is shortened\n          to len characters. If\n          str,\n          padstr, or\n          len is NULL, the\n          function returns NULL.\n        ", "Press CTRL+C to copy mysql> SELECT RPAD('hi',5,'?');\n        -> 'hi???'\nmysql> SELECT RPAD('hi',1,'?');\n        -> 'h'", "\n          This function is multibyte safe.\n        "], "Examples": ["mysql> SELECT RPAD('hi',5,'?');\n        -> 'hi???'\nmysql> SELECT RPAD('hi',1,'?');\n        -> 'h'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_rpad"], "Feature Type": ["Function"], "index": 864, "vector_txt": "864:Feature: RPAD(str,len,padstr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DAYNAME(date)"], "Description": ["Return the name of the weekday", "\nDAYNAME(date)\n", "\n          Returns the name of the weekday for\n          date. The language used for the\n          name is controlled by the value of the\n          lc_time_names system variable\n          (see Section\u00a012.16, \u201cMySQL Server Locale Support\u201d). Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYNAME('2007-02-03');\n        -> 'Saturday'"], "Examples": ["mysql> SELECT DAYNAME('2007-02-03');\n        -> 'Saturday'"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayname"], "Feature Type": ["Function"], "index": 865, "vector_txt": "865:Feature: DAYNAME(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["RTRIM(str)"], "Description": ["Remove trailing spaces", "\nRTRIM(str)\n", "\n          Returns the string str with\n          trailing space characters removed.\n        ", "Press CTRL+C to copy mysql> SELECT RTRIM('barbar   ');\n        -> 'barbar'", "\n          This function is multibyte safe, and returns\n          NULL if str is\n          NULL.\n        "], "Examples": ["mysql> SELECT RTRIM('barbar   ');\n        -> 'barbar'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_rtrim"], "Feature Type": ["Function"], "index": 866, "vector_txt": "866:Feature: RTRIM(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["SOUNDEX(str)"], "Description": ["Return a soundex string", "\nSOUNDEX(str)\n", "\n          Returns a soundex string from str,\n          or NULL if str\n          is NULL. Two strings that sound almost the\n          same should have identical soundex strings. A standard soundex\n          string is four characters long, but the\n          SOUNDEX() function returns an\n          arbitrarily long string. You can use\n          SUBSTRING() on the result to\n          get a standard soundex string. All nonalphabetic characters in\n          str are ignored. All international\n          alphabetic characters outside the A-Z range are treated as\n          vowels.\n", "\n\nImportant\n\n\n            When using SOUNDEX(), you\n            should be aware of the following limitations:\n\n", "\n\n              This function, as currently implemented, is intended to\n              work well with strings that are in the English language\n              only. Strings in other languages may not produce reliable\n              results.\n            \n              This function is not guaranteed to provide consistent\n              results with strings that use multibyte character sets,\n              including utf-8. See Bug #22638 for\n              more information.\n\n", "Press CTRL+C to copy mysql> SELECT SOUNDEX('Hello');\n        -> 'H400'\nmysql> SELECT SOUNDEX('Quadratically');\n        -> 'Q36324'", "\n\nNote\n\n\n            This function implements the original Soundex algorithm, not\n            the more popular enhanced version (also described by D.\n            Knuth). The difference is that original version discards\n            vowels first and duplicates second, whereas the enhanced\n            version discards duplicates first and vowels second.\n\n"], "Examples": ["mysql> SELECT SOUNDEX('Hello');\n        -> 'H400'\nmysql> SELECT SOUNDEX('Quadratically');\n        -> 'Q36324'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_soundex"], "Feature Type": ["Function"], "index": 867, "vector_txt": "867:Feature: SOUNDEX(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["SPACE(N)"], "Description": ["Return a string of the specified number of spaces", "\nSPACE(N)\n", "\n          Returns a string consisting of N\n          space characters, or NULL if\n          N is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT SPACE(6);\n        -> '      '"], "Examples": ["mysql> SELECT SPACE(6);\n        -> '      '"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_space"], "Feature Type": ["Function"], "index": 868, "vector_txt": "868:Feature: SPACE(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators", "14.8 String Functions and Operators", "14.8.1 String Comparison Functions and Operators"], "Feature": ["STRCMP(expr1,expr2)"], "Description": ["Compare two strings", "\nSTRCMP(expr1,expr2)\n", "\nSTRCMP() returns\n            0 if the strings are the same,\n            -1 if the first argument is smaller than\n            the second according to the current sort order, and\n            NULL if either argument is\n            NULL. It returns 1\n            otherwise.\n          ", "Press CTRL+C to copy mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "\nSTRCMP() performs the\n            comparison using the collation of the arguments.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "\n            If the collations are incompatible, one of the arguments\n            must be converted to be compatible with the other. See\n            Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "Comparison Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html#function_strcmp"], "Feature Type": ["Function"], "index": 869, "vector_txt": "869:Feature: STRCMP(expr1,expr2)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["SUBSTR(str,pos)"], "Description": ["Return the substring as specified", "\nSUBSTR(str,pos),\n          SUBSTR(str\n          FROM pos),\n          SUBSTR(str,pos,len),\n          SUBSTR(str\n          FROM pos FOR\n          len)\n", "\nSUBSTR() is a synonym for\n          SUBSTRING().\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_substr"], "Feature Type": ["Function"], "index": 870, "vector_txt": "870:Feature: SUBSTR(str,pos)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["SUBSTRING(str,pos)"], "Description": ["Return the substring as specified", "\nSUBSTRING(str,pos),\n          SUBSTRING(str\n          FROM pos),\n          SUBSTRING(str,pos,len),\n          SUBSTRING(str\n          FROM pos FOR\n          len)\n", "\n          The forms without a len argument\n          return a substring from string str\n          starting at position pos. The forms\n          with a len argument return a\n          substring len characters long from\n          string str, starting at position\n          pos. The forms that use\n          FROM are standard SQL syntax. It is also\n          possible to use a negative value for\n          pos. In this case, the beginning of\n          the substring is pos characters\n          from the end of the string, rather than the beginning. A\n          negative value may be used for pos\n          in any of the forms of this function. A value of 0 for\n          pos returns an empty string.\n        ", "\n          For all forms of SUBSTRING(),\n          the position of the first character in the string from which\n          the substring is to be extracted is reckoned as\n          1.\n        ", "Press CTRL+C to copy mysql> SELECT SUBSTRING('Quadratically',5);\n        -> 'ratically'\nmysql> SELECT SUBSTRING('foobarbar' FROM 4);\n        -> 'barbar'\nmysql> SELECT SUBSTRING('Quadratically',5,6);\n        -> 'ratica'\nmysql> SELECT SUBSTRING('Sakila', -3);\n        -> 'ila'\nmysql> SELECT SUBSTRING('Sakila', -5, 3);\n        -> 'aki'\nmysql> SELECT SUBSTRING('Sakila' FROM -4 FOR 2);\n        -> 'ki'", "\n          This function is multibyte safe. It returns\n          NULL if any of its arguments are\n          NULL.\n        ", "\n          If len is less than 1, the result\n          is the empty string.\n        "], "Examples": ["mysql> SELECT SUBSTRING('Quadratically',5);\n        -> 'ratically'\nmysql> SELECT SUBSTRING('foobarbar' FROM 4);\n        -> 'barbar'\nmysql> SELECT SUBSTRING('Quadratically',5,6);\n        -> 'ratica'\nmysql> SELECT SUBSTRING('Sakila', -3);\n        -> 'ila'\nmysql> SELECT SUBSTRING('Sakila', -5, 3);\n        -> 'aki'\nmysql> SELECT SUBSTRING('Sakila' FROM -4 FOR 2);\n        -> 'ki'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_substring"], "Feature Type": ["Function"], "index": 871, "vector_txt": "871:Feature: SUBSTRING(str,pos)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["SUBSTRING_INDEX(str,delim,count)"], "Description": ["Return a substring from a string before the specified number of", "\nSUBSTRING_INDEX(str,delim,count)\n", "\n          Returns the substring from string\n          str before\n          count occurrences of the delimiter\n          delim. If\n          count is positive, everything to\n          the left of the final delimiter (counting from the left) is\n          returned. If count is negative,\n          everything to the right of the final delimiter (counting from\n          the right) is returned.\n          SUBSTRING_INDEX() performs a\n          case-sensitive match when searching for\n          delim.\n        ", "Press CTRL+C to copy mysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);\n        -> 'www.mysql'\nmysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);\n        -> 'mysql.com'", "\n          This function is multibyte safe.\n        ", "\nSUBSTRING_INDEX() returns\n          NULL if any of its arguments are\n          NULL.\n        "], "Examples": ["mysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);\n        -> 'www.mysql'\nmysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);\n        -> 'mysql.com'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_substring-index"], "Feature Type": ["Function"], "index": 872, "vector_txt": "872:Feature: SUBSTRING_INDEX(str,delim,count)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["TRIM([{BOTH | LEADING | TRAILING}\n          [remstr] FROM]\n          str)"], "Description": ["Remove leading and trailing spaces", "\nTRIM([{BOTH | LEADING | TRAILING}\n          [remstr] FROM]\n          str),\n          TRIM([remstr\n          FROM] str)\n", "\n          Returns the string str with all\n          remstr prefixes or suffixes\n          removed. If none of the specifiers BOTH,\n          LEADING, or TRAILING is\n          given, BOTH is assumed.\n          remstr is optional and, if not\n          specified, spaces are removed.\n        ", "Press CTRL+C to copy mysql> SELECT TRIM('  bar   ');\n        -> 'bar'\nmysql> SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');\n        -> 'barxxx'\nmysql> SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');\n        -> 'bar'\nmysql> SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');\n        -> 'barx'", "\n          This function is multibyte safe. It returns\n          NULL if any of its arguments are\n          NULL.\n        "], "Examples": ["mysql> SELECT TRIM('  bar   ');\n        -> 'bar'\nmysql> SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');\n        -> 'barxxx'\nmysql> SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');\n        -> 'bar'\nmysql> SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');\n        -> 'barx'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_trim"], "Feature Type": ["Function"], "index": 873, "vector_txt": "873:Feature: TRIM([{BOTH | LEADING | TRAILING}\n          [remstr] FROM]\n          str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["UCASE(str)"], "Description": ["Synonym for UPPER()", "\nUCASE(str)\n", "\nUCASE() is a synonym for\n          UPPER().\n        ", "\nUCASE() used within views is rewritten as\n          UPPER().\n        "], "Examples": [], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ucase"], "Feature Type": ["Function"], "index": 874, "vector_txt": "874:Feature: UCASE(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["UNHEX(str)"], "Description": ["Return a string containing hex representation of a number", "\nUNHEX(str)\n", "\n          For a string argument str,\n          UNHEX(str)\n          interprets each pair of characters in the argument as a\n          hexadecimal number and converts it to the byte represented by\n          the number. The return value is a binary string.\n        ", "Press CTRL+C to copy mysql> SELECT UNHEX('4D7953514C');\n        -> 'MySQL'\nmysql> SELECT X'4D7953514C';\n        -> 'MySQL'\nmysql> SELECT UNHEX(HEX('string'));\n        -> 'string'\nmysql> SELECT HEX(UNHEX('1267'));\n        -> '1267'", "\n          The characters in the argument string must be legal\n          hexadecimal digits: '0' ..\n          '9', 'A' ..\n          'F', 'a' ..\n          'f'. If the argument contains any\n          nonhexadecimal digits, or is itself NULL,\n          the result is NULL:\n        ", "Press CTRL+C to copy mysql> SELECT UNHEX('GG');\n+-------------+\n| UNHEX('GG') |\n+-------------+\n| NULL        |\n+-------------+\n\nmysql> SELECT UNHEX(NULL);\n+-------------+\n| UNHEX(NULL) |\n+-------------+\n| NULL        |\n+-------------+", "\n          A NULL result can also occur if the\n          argument to UNHEX() is a\n          BINARY column, because values\n          are padded with 0x00 bytes when stored but\n          those bytes are not stripped on retrieval. For example,\n          '41' is stored into a\n          CHAR(3) column as\n          '41\u00a0' and retrieved as\n          '41' (with the trailing pad space\n          stripped), so UNHEX() for the\n          column value returns X'41'. By contrast,\n          '41' is stored into a\n          BINARY(3) column as\n          '41\\0' and retrieved as\n          '41\\0' (with the trailing pad\n          0x00 byte not stripped).\n          '\\0' is not a legal hexadecimal digit, so\n          UNHEX() for the column value\n          returns NULL.\n        ", "\n          For a numeric argument N, the\n          inverse of\n          HEX(N)\n          is not performed by UNHEX().\n          Use\n          CONV(HEX(N),16,10)\n          instead. See the description of\n          HEX().\n        ", "\n          If UNHEX() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT UNHEX('4D7953514C');\n        -> 'MySQL'\nmysql> SELECT X'4D7953514C';\n        -> 'MySQL'\nmysql> SELECT UNHEX(HEX('string'));\n        -> 'string'\nmysql> SELECT HEX(UNHEX('1267'));\n        -> '1267'", "mysql> SELECT UNHEX('GG');\n+-------------+\n| UNHEX('GG') |\n+-------------+\n| NULL        |\n+-------------+\n\nmysql> SELECT UNHEX(NULL);\n+-------------+\n| UNHEX(NULL) |\n+-------------+\n| NULL        |\n+-------------+"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_unhex"], "Feature Type": ["Function"], "index": 875, "vector_txt": "875:Feature: UNHEX(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DAYOFMONTH(date)"], "Description": ["Return the day of the month (0-31)", "\nDAYOFMONTH(date)\n", "\n          Returns the day of the month for\n          date, in the range\n          1 to 31, or\n          0 for dates such as\n          '0000-00-00' or\n          '2008-00-00' that have a zero day part.\n          Returns NULL if\n          date is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFMONTH('2007-02-03');\n        -> 3"], "Examples": ["mysql> SELECT DAYOFMONTH('2007-02-03');\n        -> 3"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofmonth"], "Feature Type": ["Function"], "index": 876, "vector_txt": "876:Feature: DAYOFMONTH(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["UPPER(str)"], "Description": ["Convert to uppercase", "\nUPPER(str)\n", "\n          Returns the string str with all\n          characters changed to uppercase according to the current\n          character set mapping, or NULL if\n          str is NULL. The\n          default character set is utf8mb4.\n        ", "Press CTRL+C to copy mysql> SELECT UPPER('Hej');\n        -> 'HEJ'", "\n          See the description of LOWER()\n          for information that also applies to\n          UPPER(). This included\n          information about how to perform lettercase conversion of\n          binary strings (BINARY,\n          VARBINARY,\n          BLOB) for which these functions\n          are ineffective, and information about case folding for\n          Unicode character sets.\n        ", "\n          This function is multibyte safe.\n        ", "\nUCASE() used within views is rewritten as\n          UPPER().\n        "], "Examples": ["mysql> SELECT UPPER('Hej');\n        -> 'HEJ'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_upper"], "Feature Type": ["Function"], "index": 877, "vector_txt": "877:Feature: UPPER(str)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["WEIGHT_STRING(str\n          [AS {CHAR|BINARY}(N)]\n          [flags])"], "Description": ["Return the weight string for a string", "\nWEIGHT_STRING(str\n          [AS {CHAR|BINARY}(N)]\n          [flags])\n", "\n          This function returns the weight string for the input string.\n          The return value is a binary string that represents the\n          comparison and sorting value of the string, or\n          NULL if the argument is\n          NULL. It has these properties:\n", "\n\n              If\n              WEIGHT_STRING(str1)\n              =\n              WEIGHT_STRING(str2),\n              then str1 =\n              str2\n              (str1 and\n              str2 are considered equal)\n            \n              If\n              WEIGHT_STRING(str1)\n              <\n              WEIGHT_STRING(str2),\n              then str1 <\n              str2\n              (str1 sorts before\n              str2)\n\n", "\nWEIGHT_STRING() is a debugging\n          function intended for internal use. Its behavior can change\n          without notice between MySQL versions. It can be used for\n          testing and debugging of collations, especially if you are\n          adding a new collation. See\n          Section\u00a012.14, \u201cAdding a Collation to a Character Set\u201d.\n        ", "\n          This list briefly summarizes the arguments. More details are\n          given in the discussion following the list.\n", "\n\nstr: The input string\n              expression.\n            \nAS clause: Optional; cast the input\n              string to a given type and length.\n            \nflags: Optional; unused.\n\n", "\n          The input string, str, is a string\n          expression. If the input is a nonbinary (character) string\n          such as a CHAR,\n          VARCHAR, or\n          TEXT value, the return value\n          contains the collation weights for the string. If the input is\n          a binary (byte) string such as a\n          BINARY,\n          VARBINARY, or\n          BLOB value, the return value is\n          the same as the input (the weight for each byte in a binary\n          string is the byte value). If the input is\n          NULL,\n          WEIGHT_STRING() returns\n          NULL.\n        ", "\n          Examples:\n        ", "Press CTRL+C to copy mysql> SET @s = _utf8mb4 'AB' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 1C471C60               |\n+------+---------+------------------------+", "Press CTRL+C to copy mysql> SET @s = _utf8mb4 'ab' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 1C471C60               |\n+------+---------+------------------------+", "Press CTRL+C to copy mysql> SET @s = CAST('AB' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+", "Press CTRL+C to copy mysql> SET @s = CAST('ab' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 6162                   |\n+------+---------+------------------------+", "\n          The preceding examples use\n          HEX() to display the\n          WEIGHT_STRING() result. Because\n          the result is a binary value,\n          HEX() can be especially useful\n          when the result contains nonprinting values, to display it in\n          printable form:\n        ", "Press CTRL+C to copy mysql> SET @s = CONVERT(X'C39F' USING utf8mb4) COLLATE utf8mb4_czech_ci;\nmysql> SELECT HEX(WEIGHT_STRING(@s));\n+------------------------+\n| HEX(WEIGHT_STRING(@s)) |\n+------------------------+\n| 0FEA0FEA               |\n+------------------------+", "\n          For non-NULL return values, the data type\n          of the value is VARBINARY if\n          its length is within the maximum length for\n          VARBINARY, otherwise the data\n          type is BLOB.\n        ", "\n          The AS clause may be given to cast the\n          input string to a nonbinary or binary string and to force it\n          to a given length:\n", "\n\nAS CHAR(N)\n              casts the string to a nonbinary string and pads it on the\n              right with spaces to a length of\n              N characters.\n              N must be at least 1. If\n              N is less than the length of\n              the input string, the string is truncated to\n              N characters. No warning occurs\n              for truncation.\n            \nAS BINARY(N)\n              is similar but casts the string to a binary string,\n              N is measured in bytes (not\n              characters), and padding uses 0x00\n              bytes (not spaces).\n\n", "Press CTRL+C to copy mysql> SET NAMES 'latin1';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 41422020                            |\n+-------------------------------------+\nmysql> SET NAMES 'utf8mb4';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 1C471C60                            |\n+-------------------------------------+", "Press CTRL+C to copy mysql> SELECT HEX(WEIGHT_STRING('ab' AS BINARY(4)));\n+---------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS BINARY(4))) |\n+---------------------------------------+\n| 61620000                              |\n+---------------------------------------+", "\n          The flags clause currently is\n          unused.\n        ", "\n          If WEIGHT_STRING() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n"], "Examples": ["mysql> SET @s = _utf8mb4 'AB' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 1C471C60               |\n+------+---------+------------------------+", "mysql> SET @s = _utf8mb4 'ab' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 1C471C60               |\n+------+---------+------------------------+", "mysql> SET @s = CAST('AB' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+", "mysql> SET @s = CAST('ab' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 6162                   |\n+------+---------+------------------------+", "mysql> SET @s = CONVERT(X'C39F' USING utf8mb4) COLLATE utf8mb4_czech_ci;\nmysql> SELECT HEX(WEIGHT_STRING(@s));\n+------------------------+\n| HEX(WEIGHT_STRING(@s)) |\n+------------------------+\n| 0FEA0FEA               |\n+------------------------+", "mysql> SET NAMES 'latin1';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 41422020                            |\n+-------------------------------------+\nmysql> SET NAMES 'utf8mb4';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 1C471C60                            |\n+-------------------------------------+", "mysql> SELECT HEX(WEIGHT_STRING('ab' AS BINARY(4)));\n+---------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS BINARY(4))) |\n+---------------------------------------+\n| 61620000                              |\n+---------------------------------------+"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_weight-string"], "Feature Type": ["Function"], "index": 878, "vector_txt": "878:Feature: WEIGHT_STRING(str\n          [AS {CHAR|BINARY}(N)]\n          [flags])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/regexp.html"], "Title": ["14.8 String Functions and Operators", "14.8.2 Regular Expressions"], "Feature": ["REGEXP_INSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              return_option[,\n              match_type]]]])"], "Description": ["Starting index of substring matching regular expression", "\nREGEXP_INSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              return_option[,\n              match_type]]]])\n", "\n              Returns the starting index of the substring of the string\n              expr that matches the regular\n              expression specified by the pattern\n              pat, 0 if there is no match. If\n              expr or\n              pat is NULL,\n              the return value is NULL. Character\n              indexes begin at 1.\n            ", "\nREGEXP_INSTR() takes these\n              optional arguments:\n", "\n\npos: The position in\n                  expr at which to start the\n                  search. If omitted, the default is 1.\n                \noccurrence: Which\n                  occurrence of a match to search for. If omitted, the\n                  default is 1.\n                \nreturn_option: Which type\n                  of position to return. If this value is 0,\n                  REGEXP_INSTR() returns\n                  the position of the matched substring's first\n                  character. If this value is 1,\n                  REGEXP_INSTR() returns\n                  the position following the matched substring. If\n                  omitted, the default is 0.\n                \nmatch_type: A string that\n                  specifies how to perform matching. The meaning is as\n                  described for\n                  REGEXP_LIKE().\n\n", "\n              For additional information about how matching occurs, see\n              the description for\n              REGEXP_LIKE().\n            ", "Press CTRL+C to copy mysql> SELECT REGEXP_INSTR('dog cat dog', 'dog');\n+------------------------------------+\n| REGEXP_INSTR('dog cat dog', 'dog') |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\nmysql> SELECT REGEXP_INSTR('dog cat dog', 'dog', 2);\n+---------------------------------------+\n| REGEXP_INSTR('dog cat dog', 'dog', 2) |\n+---------------------------------------+\n|                                     9 |\n+---------------------------------------+\nmysql> SELECT REGEXP_INSTR('aa aaa aaaa', 'a{2}');\n+-------------------------------------+\n| REGEXP_INSTR('aa aaa aaaa', 'a{2}') |\n+-------------------------------------+\n|                                   1 |\n+-------------------------------------+\nmysql> SELECT REGEXP_INSTR('aa aaa aaaa', 'a{4}');\n+-------------------------------------+\n| REGEXP_INSTR('aa aaa aaaa', 'a{4}') |\n+-------------------------------------+\n|                                   8 |\n+-------------------------------------+"], "Examples": ["mysql> SELECT REGEXP_INSTR('dog cat dog', 'dog');\n+------------------------------------+\n| REGEXP_INSTR('dog cat dog', 'dog') |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\nmysql> SELECT REGEXP_INSTR('dog cat dog', 'dog', 2);\n+---------------------------------------+\n| REGEXP_INSTR('dog cat dog', 'dog', 2) |\n+---------------------------------------+\n|                                     9 |\n+---------------------------------------+\nmysql> SELECT REGEXP_INSTR('aa aaa aaaa', 'a{2}');\n+-------------------------------------+\n| REGEXP_INSTR('aa aaa aaaa', 'a{2}') |\n+-------------------------------------+\n|                                   1 |\n+-------------------------------------+\nmysql> SELECT REGEXP_INSTR('aa aaa aaaa', 'a{4}');\n+-------------------------------------+\n| REGEXP_INSTR('aa aaa aaaa', 'a{4}') |\n+-------------------------------------+\n|                                   8 |\n+-------------------------------------+"], "Category": ["String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/regexp.html#function_regexp-instr"], "Feature Type": ["Function"], "index": 879, "vector_txt": "879:Feature: REGEXP_INSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              return_option[,\n              match_type]]]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["CUME_DIST()"], "Description": ["Cumulative distribution value", "\nCUME_DIST()\nover_clause\n", "\n            Returns the cumulative distribution of a value within a\n            group of values; that is, the percentage of partition values\n            less than or equal to the value in the current row. This\n            represents the number of rows preceding or peer with the\n            current row in the window ordering of the window partition\n            divided by the total number of rows in the window partition.\n            Return values range from 0 to 1.\n          ", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers and\n            have value\n            N/N =\n            1, where N is the partition size.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            The following query shows, for the set of values in the\n            val column, the\n            CUME_DIST() value for each row, as well\n            as the percentage rank value returned by the similar\n            PERCENT_RANK() function. For reference,\n            the query also displays row numbers using\n            ROW_NUMBER():\n          ", "Press CTRL+C to copy mysql> SELECT\n         val,\n         ROW_NUMBER()   OVER w AS 'row_number',\n         CUME_DIST()    OVER w AS 'cume_dist',\n         PERCENT_RANK() OVER w AS 'percent_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------------------+--------------+\n| val  | row_number | cume_dist          | percent_rank |\n+------+------------+--------------------+--------------+\n|    1 |          1 | 0.2222222222222222 |            0 |\n|    1 |          2 | 0.2222222222222222 |            0 |\n|    2 |          3 | 0.3333333333333333 |         0.25 |\n|    3 |          4 | 0.6666666666666666 |        0.375 |\n|    3 |          5 | 0.6666666666666666 |        0.375 |\n|    3 |          6 | 0.6666666666666666 |        0.375 |\n|    4 |          7 | 0.8888888888888888 |         0.75 |\n|    4 |          8 | 0.8888888888888888 |         0.75 |\n|    5 |          9 |                  1 |            1 |\n+------+------------+--------------------+--------------+"], "Examples": ["mysql> SELECT\n         val,\n         ROW_NUMBER()   OVER w AS 'row_number',\n         CUME_DIST()    OVER w AS 'cume_dist',\n         PERCENT_RANK() OVER w AS 'percent_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------------------+--------------+\n| val  | row_number | cume_dist          | percent_rank |\n+------+------------+--------------------+--------------+\n|    1 |          1 | 0.2222222222222222 |            0 |\n|    1 |          2 | 0.2222222222222222 |            0 |\n|    2 |          3 | 0.3333333333333333 |         0.25 |\n|    3 |          4 | 0.6666666666666666 |        0.375 |\n|    3 |          5 | 0.6666666666666666 |        0.375 |\n|    3 |          6 | 0.6666666666666666 |        0.375 |\n|    4 |          7 | 0.8888888888888888 |         0.75 |\n|    4 |          8 | 0.8888888888888888 |         0.75 |\n|    5 |          9 |                  1 |            1 |\n+------+------------+--------------------+--------------+"], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_cume-dist"], "Feature Type": ["Function"], "index": 880, "vector_txt": "880:Feature: CUME_DIST()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["DENSE_RANK()"], "Description": ["Rank of current row within its partition, without gaps", "\nDENSE_RANK()\nover_clause\n", "\n            Returns the rank of the current row within its partition,\n            without gaps. Peers are considered ties and receive the same\n            rank. This function assigns consecutive ranks to peer\n            groups; the result is that groups of size greater than one\n            do not produce noncontiguous rank numbers. For an example,\n            see the RANK() function\n            description.\n          ", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_dense-rank"], "Feature Type": ["Function"], "index": 881, "vector_txt": "881:Feature: DENSE_RANK()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["FIRST_VALUE(expr)"], "Description": ["Value of argument from first row of window frame", "\nFIRST_VALUE(expr)\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the first row of the window frame.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            The following query demonstrates\n            FIRST_VALUE(),\n            LAST_VALUE(), and two\n            instances of NTH_VALUE():\n          ", "Press CTRL+C to copy mysql> SELECT\n         time, subject, val,\n         FIRST_VALUE(val)  OVER w AS 'first',\n         LAST_VALUE(val)   OVER w AS 'last',\n         NTH_VALUE(val, 2) OVER w AS 'second',\n         NTH_VALUE(val, 4) OVER w AS 'fourth'\n       FROM observations\n       WINDOW w AS (PARTITION BY subject ORDER BY time\n                    ROWS UNBOUNDED PRECEDING);\n+----------+---------+------+-------+------+--------+--------+\n| time     | subject | val  | first | last | second | fourth |\n+----------+---------+------+-------+------+--------+--------+\n| 07:00:00 | st113   |   10 |    10 |   10 |   NULL |   NULL |\n| 07:15:00 | st113   |    9 |    10 |    9 |      9 |   NULL |\n| 07:30:00 | st113   |   25 |    10 |   25 |      9 |   NULL |\n| 07:45:00 | st113   |   20 |    10 |   20 |      9 |     20 |\n| 07:00:00 | xh458   |    0 |     0 |    0 |   NULL |   NULL |\n| 07:15:00 | xh458   |   10 |     0 |   10 |     10 |   NULL |\n| 07:30:00 | xh458   |    5 |     0 |    5 |     10 |   NULL |\n| 07:45:00 | xh458   |   30 |     0 |   30 |     10 |     30 |\n| 08:00:00 | xh458   |   25 |     0 |   25 |     10 |     30 |\n+----------+---------+------+-------+------+--------+--------+", "\n            Each function uses the rows in the current frame, which, per\n            the window definition shown, extends from the first\n            partition row to the current row. For the\n            NTH_VALUE() calls, the\n            current frame does not always include the requested row; in\n            such cases, the return value is NULL.\n          "], "Examples": ["mysql> SELECT\n         time, subject, val,\n         FIRST_VALUE(val)  OVER w AS 'first',\n         LAST_VALUE(val)   OVER w AS 'last',\n         NTH_VALUE(val, 2) OVER w AS 'second',\n         NTH_VALUE(val, 4) OVER w AS 'fourth'\n       FROM observations\n       WINDOW w AS (PARTITION BY subject ORDER BY time\n                    ROWS UNBOUNDED PRECEDING);\n+----------+---------+------+-------+------+--------+--------+\n| time     | subject | val  | first | last | second | fourth |\n+----------+---------+------+-------+------+--------+--------+\n| 07:00:00 | st113   |   10 |    10 |   10 |   NULL |   NULL |\n| 07:15:00 | st113   |    9 |    10 |    9 |      9 |   NULL |\n| 07:30:00 | st113   |   25 |    10 |   25 |      9 |   NULL |\n| 07:45:00 | st113   |   20 |    10 |   20 |      9 |     20 |\n| 07:00:00 | xh458   |    0 |     0 |    0 |   NULL |   NULL |\n| 07:15:00 | xh458   |   10 |     0 |   10 |     10 |   NULL |\n| 07:30:00 | xh458   |    5 |     0 |    5 |     10 |   NULL |\n| 07:45:00 | xh458   |   30 |     0 |   30 |     10 |     30 |\n| 08:00:00 | xh458   |   25 |     0 |   25 |     10 |     30 |\n+----------+---------+------+-------+------+--------+--------+"], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_first-value"], "Feature Type": ["Function"], "index": 882, "vector_txt": "882:Feature: FIRST_VALUE(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["LAG(expr [,\n            N[,\n            default]])"], "Description": ["Value of argument from row lagging current row within partition", "\nLAG(expr [,\n            N[,\n            default]])\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the row that lags (precedes) the current row by\n            N rows within its partition. If\n            there is no such row, the return value is\n            default. For example, if\n            N is 3, the return value is\n            default for the first three rows.\n            If N or\n            default are missing, the defaults\n            are 1 and NULL, respectively.\n          ", "\nN must be a literal nonnegative\n            integer. If N is 0,\n            expr is evaluated for the current\n            row.\n          ", "\nN cannot be\n            NULL, and must be an integer in the range\n            0 to\n            263,\n            inclusive, in any of the following forms:\n", "\n\n                an unsigned integer constant literal\n              \n                a positional parameter marker (?)\n              \n                a user-defined variable\n              \n                a local variable in a stored routine\n\n", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\nLAG() (and the similar\n            LEAD() function) are often\n            used to compute differences between rows. The following\n            query shows a set of time-ordered observations and, for each\n            one, the LAG() and\n            LEAD() values from the\n            adjoining rows, as well as the differences between the\n            current and adjoining rows:\n          ", "Press CTRL+C to copy mysql> SELECT\n         t, val,\n         LAG(val)        OVER w AS 'lag',\n         LEAD(val)       OVER w AS 'lead',\n         val - LAG(val)  OVER w AS 'lag diff',\n         val - LEAD(val) OVER w AS 'lead diff'\n       FROM series\n       WINDOW w AS (ORDER BY t);\n+----------+------+------+------+----------+-----------+\n| t        | val  | lag  | lead | lag diff | lead diff |\n+----------+------+------+------+----------+-----------+\n| 12:00:00 |  100 | NULL |  125 |     NULL |       -25 |\n| 13:00:00 |  125 |  100 |  132 |       25 |        -7 |\n| 14:00:00 |  132 |  125 |  145 |        7 |       -13 |\n| 15:00:00 |  145 |  132 |  140 |       13 |         5 |\n| 16:00:00 |  140 |  145 |  150 |       -5 |       -10 |\n| 17:00:00 |  150 |  140 |  200 |       10 |       -50 |\n| 18:00:00 |  200 |  150 | NULL |       50 |      NULL |\n+----------+------+------+------+----------+-----------+", "\n            In the example, the LAG() and\n            LEAD() calls use the default\n            N and\n            default values of 1 and\n            NULL, respectively.\n          ", "\n            The first row shows what happens when there is no previous\n            row for LAG(): The function\n            returns the default value (in\n            this case, NULL). The last row shows the\n            same thing when there is no next row for\n            LEAD().\n          ", "\nLAG() and\n            LEAD() also serve to compute\n            sums rather than differences. Consider this data set, which\n            contains the first few numbers of the Fibonacci series:\n          ", "Press CTRL+C to copy mysql> SELECT n FROM fib ORDER BY n;\n+------+\n| n    |\n+------+\n|    1 |\n|    1 |\n|    2 |\n|    3 |\n|    5 |\n|    8 |\n+------+", "\n            The following query shows the\n            LAG() and\n            LEAD() values for the rows\n            adjacent to the current row. It also uses those functions to\n            add to the current row value the values from the preceding\n            and following rows. The effect is to generate the next\n            number in the Fibonacci series, and the next number after\n            that:\n          ", "Press CTRL+C to copy mysql> SELECT\n         n,\n         LAG(n, 1, 0)      OVER w AS 'lag',\n         LEAD(n, 1, 0)     OVER w AS 'lead',\n         n + LAG(n, 1, 0)  OVER w AS 'next_n',\n         n + LEAD(n, 1, 0) OVER w AS 'next_next_n'\n       FROM fib\n       WINDOW w AS (ORDER BY n);\n+------+------+------+--------+-------------+\n| n    | lag  | lead | next_n | next_next_n |\n+------+------+------+--------+-------------+\n|    1 |    0 |    1 |      1 |           2 |\n|    1 |    1 |    2 |      2 |           3 |\n|    2 |    1 |    3 |      3 |           5 |\n|    3 |    2 |    5 |      5 |           8 |\n|    5 |    3 |    8 |      8 |          13 |\n|    8 |    5 |    0 |     13 |           8 |\n+------+------+------+--------+-------------+", "\n            One way to generate the initial set of Fibonacci numbers is\n            to use a recursive common table expression. For an example,\n            see\n            Fibonacci Series Generation.\n          ", "\n            You cannot use a negative value for the rows argument of\n            this function.\n          "], "Examples": ["mysql> SELECT\n         t, val,\n         LAG(val)        OVER w AS 'lag',\n         LEAD(val)       OVER w AS 'lead',\n         val - LAG(val)  OVER w AS 'lag diff',\n         val - LEAD(val) OVER w AS 'lead diff'\n       FROM series\n       WINDOW w AS (ORDER BY t);\n+----------+------+------+------+----------+-----------+\n| t        | val  | lag  | lead | lag diff | lead diff |\n+----------+------+------+------+----------+-----------+\n| 12:00:00 |  100 | NULL |  125 |     NULL |       -25 |\n| 13:00:00 |  125 |  100 |  132 |       25 |        -7 |\n| 14:00:00 |  132 |  125 |  145 |        7 |       -13 |\n| 15:00:00 |  145 |  132 |  140 |       13 |         5 |\n| 16:00:00 |  140 |  145 |  150 |       -5 |       -10 |\n| 17:00:00 |  150 |  140 |  200 |       10 |       -50 |\n| 18:00:00 |  200 |  150 | NULL |       50 |      NULL |\n+----------+------+------+------+----------+-----------+", "mysql> SELECT n FROM fib ORDER BY n;\n+------+\n| n    |\n+------+\n|    1 |\n|    1 |\n|    2 |\n|    3 |\n|    5 |\n|    8 |\n+------+", "mysql> SELECT\n         n,\n         LAG(n, 1, 0)      OVER w AS 'lag',\n         LEAD(n, 1, 0)     OVER w AS 'lead',\n         n + LAG(n, 1, 0)  OVER w AS 'next_n',\n         n + LEAD(n, 1, 0) OVER w AS 'next_next_n'\n       FROM fib\n       WINDOW w AS (ORDER BY n);\n+------+------+------+--------+-------------+\n| n    | lag  | lead | next_n | next_next_n |\n+------+------+------+--------+-------------+\n|    1 |    0 |    1 |      1 |           2 |\n|    1 |    1 |    2 |      2 |           3 |\n|    2 |    1 |    3 |      3 |           5 |\n|    3 |    2 |    5 |      5 |           8 |\n|    5 |    3 |    8 |      8 |          13 |\n|    8 |    5 |    0 |     13 |           8 |\n+------+------+------+--------+-------------+"], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_lag"], "Feature Type": ["Function"], "index": 883, "vector_txt": "883:Feature: LAG(expr [,\n            N[,\n            default]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["LAST_VALUE(expr)"], "Description": ["Value of argument from last row of window frame", "\nLAST_VALUE(expr)\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the last row of the window frame.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            For an example, see the\n            FIRST_VALUE() function\n            description.\n          "], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_last-value"], "Feature Type": ["Function"], "index": 884, "vector_txt": "884:Feature: LAST_VALUE(expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["LEAD(expr [,\n            N[,\n            default]])"], "Description": ["Value of argument from row leading current row within partition", "\nLEAD(expr [,\n            N[,\n            default]])\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the row that leads (follows) the current row by\n            N rows within its partition. If\n            there is no such row, the return value is\n            default. For example, if\n            N is 3, the return value is\n            default for the last three rows.\n            If N or\n            default are missing, the defaults\n            are 1 and NULL, respectively.\n          ", "\nN must be a literal nonnegative\n            integer. If N is 0,\n            expr is evaluated for the current\n            row.\n          ", "\nN cannot be\n            NULL, and must be an integer in the range\n            0 to\n            263,\n            inclusive, in any of the following forms:\n", "\n\n                an unsigned integer constant literal\n              \n                a positional parameter marker (?)\n              \n                a user-defined variable\n              \n                a local variable in a stored routine\n\n", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            For an example, see the LAG()\n            function description.\n          ", "\n            Use of a negative value for the rows argument of this\n            function is not permitted.\n          "], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_lead"], "Feature Type": ["Function"], "index": 885, "vector_txt": "885:Feature: LEAD(expr [,\n            N[,\n            default]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["NTH_VALUE(expr,\n            N)"], "Description": ["Value of argument from N-th row of window frame", "\nNTH_VALUE(expr,\n            N)\n            [from_first_last]\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the N-th row of the window frame.\n            If there is no such row, the return value is\n            NULL.\n          ", "\nN must be a literal positive\n            integer.\n          ", "\nfrom_first_last is part of the\n            SQL standard, but the MySQL implementation permits only\n            FROM FIRST (which is also the default).\n            This means that calculations begin at the first row of the\n            window. FROM LAST is parsed, but produces\n            an error. To obtain the same effect as FROM\n            LAST (begin calculations at the last row of the\n            window), use ORDER BY to sort in reverse\n            order.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            For an example, see the\n            FIRST_VALUE() function\n            description.\n          ", "\n            You cannot use NULL for the row argument\n            of this function.\n          "], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_nth-value"], "Feature Type": ["Function"], "index": 886, "vector_txt": "886:Feature: NTH_VALUE(expr,\n            N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DAYOFWEEK(date)"], "Description": ["Return the weekday index of the argument", "\nDAYOFWEEK(date)\n", "\n          Returns the weekday index for date\n          (1 = Sunday, 2 = Monday,\n          \u2026, 7 = Saturday). These index values\n          correspond to the ODBC standard. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFWEEK('2007-02-03');\n        -> 7"], "Examples": ["mysql> SELECT DAYOFWEEK('2007-02-03');\n        -> 7"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofweek"], "Feature Type": ["Function"], "index": 887, "vector_txt": "887:Feature: DAYOFWEEK(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["JSON_OBJECTAGG(key,\n            value)\n            [over_clause]"], "Description": ["Return result set as a single JSON object", "\nJSON_OBJECTAGG(key,\n            value)\n            [over_clause]\n", "\n            Takes two column names or expressions as arguments, the\n            first of these being used as a key and the second as a\n            value, and returns a JSON object containing key-value pairs.\n            Returns NULL if the result contains no\n            rows, or in the event of an error. An error occurs if any\n            key name is NULL or the number of\n            arguments is not equal to 2.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_OBJECTAGG(attribute, value)\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------------------------+\n| o_id | JSON_OBJECTAGG(attribute, value)      |\n+------+---------------------------------------+\n|    2 | {\"color\": \"red\", \"fabric\": \"silk\"}    |\n|    3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set (0.00 sec)", "Duplicate key handling.\u00a0\n              When the result of this function is normalized, values\n              having duplicate keys are discarded. In keeping with the\n              MySQL JSON data type\n              specification that does not permit duplicate keys, only\n              the last value encountered is used with that key in the\n              returned object (\u201clast duplicate key wins\u201d).\n              This means that the result of using this function on\n              columns from a SELECT can depend on the\n              order in which the rows are returned, which is not\n              guaranteed.\n            ", "\n            When used as a window function, if there are duplicate keys\n            within a frame, only the last value for the key is present\n            in the result. The value for the key from the last row in\n            the frame is deterministic if the ORDER\n            BY specification guarantees that the values have a\n            specific order. If not, the resulting value of the key is\n            nondeterministic.\n          ", "\n            Consider the following:\n          ", "Press CTRL+C to copy mysql> CREATE TABLE t(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected (0.33 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected (0.10 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    4 |\n| key  |    5 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5}           |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t;\nQuery OK, 3 rows affected (0.08 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 5), ('key', 4);\nQuery OK, 3 rows affected (0.06 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    5 |\n| key  |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 4}           |\n+----------------------+\n1 row in set (0.00 sec)", "\n            The key chosen from the last query is nondeterministic. If\n            the query does not use GROUP BY (which\n            usually imposes its own ordering regardless) and you prefer\n            a particular key ordering, you can invoke\n            JSON_OBJECTAGG() as a window function by\n            including an OVER clause with an\n            ORDER BY specification to impose a\n            particular order on frame rows. The following examples show\n            what happens with and without ORDER BY\n            for a few different frame specifications.\n          ", "\n            Without ORDER BY, the frame is the entire\n            partition:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER () AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n+-------------+", "\n            With ORDER BY, where the frame is the\n            default of RANGE BETWEEN UNBOUNDED PRECEDING AND\n            CURRENT ROW (in both ascending and descending\n            order):\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n| {\"key\": 4}  |\n| {\"key\": 5}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 4}  |\n| {\"key\": 3}  |\n+-------------+", "\n            With ORDER BY and an explicit frame of\n            the entire partition:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n        AS json_object\n       FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n+-------------+", "\n            To return a particular key value (such as the smallest or\n            largest), include a LIMIT clause in the\n            appropriate query. For example:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n+-------------+", "\n            See Normalization, Merging, and Autowrapping of JSON Values, for additional\n            information and examples.\n          "], "Examples": ["mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_OBJECTAGG(attribute, value)\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------------------------+\n| o_id | JSON_OBJECTAGG(attribute, value)      |\n+------+---------------------------------------+\n|    2 | {\"color\": \"red\", \"fabric\": \"silk\"}    |\n|    3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set (0.00 sec)", "mysql> CREATE TABLE t(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected (0.33 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected (0.10 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    4 |\n| key  |    5 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5}           |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t;\nQuery OK, 3 rows affected (0.08 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 5), ('key', 4);\nQuery OK, 3 rows affected (0.06 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    5 |\n| key  |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 4}           |\n+----------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER () AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n+-------------+", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n| {\"key\": 4}  |\n| {\"key\": 5}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 4}  |\n| {\"key\": 3}  |\n+-------------+", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n        AS json_object\n       FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n+-------------+", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n+-------------+"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_json-objectagg"], "Feature Type": ["Function"], "index": 888, "vector_txt": "888:Feature: JSON_OBJECTAGG(key,\n            value)\n            [over_clause]\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["NTILE(N)"], "Description": ["Bucket number of current row within its partition.", "\nNTILE(N)\nover_clause\n", "\n            Divides a partition into N groups\n            (buckets), assigns each row in the partition its bucket\n            number, and returns the bucket number of the current row\n            within its partition. For example, if\n            N is 4,\n            NTILE() divides rows into four buckets.\n            If N is 100,\n            NTILE() divides rows into 100 buckets.\n          ", "\nN must be a literal positive\n            integer. Bucket number return values range from 1 to\n            N.\n          ", "\nN cannot be\n            NULL, and must be an integer in the range\n            0 to\n            263,\n            inclusive, in any of the following forms:\n", "\n\n                an unsigned integer constant literal\n              \n                a positional parameter marker (?)\n              \n                a user-defined variable\n              \n                a local variable in a stored routine\n\n", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            The following query shows, for the set of values in the\n            val column, the percentile values\n            resulting from dividing the rows into two or four groups.\n            For reference, the query also displays row numbers using\n            ROW_NUMBER():\n          ", "Press CTRL+C to copy mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         NTILE(2)     OVER w AS 'ntile2',\n         NTILE(4)     OVER w AS 'ntile4'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------+--------+\n| val  | row_number | ntile2 | ntile4 |\n+------+------------+--------+--------+\n|    1 |          1 |      1 |      1 |\n|    1 |          2 |      1 |      1 |\n|    2 |          3 |      1 |      1 |\n|    3 |          4 |      1 |      2 |\n|    3 |          5 |      1 |      2 |\n|    3 |          6 |      2 |      3 |\n|    4 |          7 |      2 |      3 |\n|    4 |          8 |      2 |      4 |\n|    5 |          9 |      2 |      4 |\n+------+------------+--------+--------+", "\n            The construct NTILE(NULL) is not\n            permitted.\n          "], "Examples": ["mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         NTILE(2)     OVER w AS 'ntile2',\n         NTILE(4)     OVER w AS 'ntile4'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------+--------+\n| val  | row_number | ntile2 | ntile4 |\n+------+------------+--------+--------+\n|    1 |          1 |      1 |      1 |\n|    1 |          2 |      1 |      1 |\n|    2 |          3 |      1 |      1 |\n|    3 |          4 |      1 |      2 |\n|    3 |          5 |      1 |      2 |\n|    3 |          6 |      2 |      3 |\n|    4 |          7 |      2 |      3 |\n|    4 |          8 |      2 |      4 |\n|    5 |          9 |      2 |      4 |\n+------+------------+--------+--------+"], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_ntile"], "Feature Type": ["Function"], "index": 889, "vector_txt": "889:Feature: NTILE(N)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["PERCENT_RANK()"], "Description": ["Percentage rank value", "\nPERCENT_RANK()\nover_clause\n", "\n            Returns the percentage of partition values less than the\n            value in the current row, excluding the highest value.\n            Return values range from 0 to 1 and represent the row\n            relative rank, calculated as the result of this formula,\n            where rank is the row rank and\n            rows is the number of partition\n            rows:\n          ", "Press CTRL+C to copy (rank - 1) / (rows - 1)", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            For an example, see the\n            CUME_DIST() function\n            description.\n          "], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_percent-rank"], "Feature Type": ["Function"], "index": 890, "vector_txt": "890:Feature: PERCENT_RANK()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["RANK()"], "Description": ["Rank of current row within its partition, with gaps", "\nRANK()\nover_clause\n", "\n            Returns the rank of the current row within its partition,\n            with gaps. Peers are considered ties and receive the same\n            rank. This function does not assign consecutive ranks to\n            peer groups if groups of size greater than one exist; the\n            result is noncontiguous rank numbers.\n          ", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            The following query shows the difference between\n            RANK(), which produces ranks\n            with gaps, and DENSE_RANK(),\n            which produces ranks without gaps. The query shows rank\n            values for each member of a set of values in the\n            val column, which contains some\n            duplicates. RANK() assigns\n            peers (the duplicates) the same rank value, and the next\n            greater value has a rank higher by the number of peers minus\n            one. DENSE_RANK() also\n            assigns peers the same rank value, but the next higher value\n            has a rank one greater. For reference, the query also\n            displays row numbers using\n            ROW_NUMBER():\n          ", "Press CTRL+C to copy mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         RANK()       OVER w AS 'rank',\n         DENSE_RANK() OVER w AS 'dense_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+------+------------+\n| val  | row_number | rank | dense_rank |\n+------+------------+------+------------+\n|    1 |          1 |    1 |          1 |\n|    1 |          2 |    1 |          1 |\n|    2 |          3 |    3 |          2 |\n|    3 |          4 |    4 |          3 |\n|    3 |          5 |    4 |          3 |\n|    3 |          6 |    4 |          3 |\n|    4 |          7 |    7 |          4 |\n|    4 |          8 |    7 |          4 |\n|    5 |          9 |    9 |          5 |\n+------+------------+------+------------+"], "Examples": ["mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         RANK()       OVER w AS 'rank',\n         DENSE_RANK() OVER w AS 'dense_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+------+------------+\n| val  | row_number | rank | dense_rank |\n+------+------------+------+------------+\n|    1 |          1 |    1 |          1 |\n|    1 |          2 |    1 |          1 |\n|    2 |          3 |    3 |          2 |\n|    3 |          4 |    4 |          3 |\n|    3 |          5 |    4 |          3 |\n|    3 |          6 |    4 |          3 |\n|    4 |          7 |    7 |          4 |\n|    4 |          8 |    7 |          4 |\n|    5 |          9 |    9 |          5 |\n+------+------------+------+------------+"], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_rank"], "Feature Type": ["Function"], "index": 891, "vector_txt": "891:Feature: RANK()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["ROW_NUMBER()"], "Description": ["Number of current row within its partition", "\nROW_NUMBER()\nover_clause\n", "\n            Returns the number of the current row within its partition.\n            Rows numbers range from 1 to the number of partition rows.\n          ", "\nORDER BY affects the order in which rows\n            are numbered. Without ORDER BY, row\n            numbering is nondeterministic.\n          ", "\nROW_NUMBER() assigns peers\n            different row numbers. To assign peers the same value, use\n            RANK() or\n            DENSE_RANK(). For an example,\n            see the RANK() function\n            description.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n"], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_row-number"], "Feature Type": ["Function"], "index": 892, "vector_txt": "892:Feature: ROW_NUMBER()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.11 XML Functions"], "Feature": ["ExtractValue(xml_frag,\n          xpath_expr)"], "Description": ["Extract a value from an XML string using XPath notation", "\nExtractValue(xml_frag,\n          xpath_expr)\n", "\nExtractValue() takes two string\n          arguments, a fragment of XML markup\n          xml_frag and an XPath expression\n          xpath_expr (also known as a\n          locator); it returns the\n          text (CDATA) of the first text node which\n          is a child of the element or elements matched by the XPath\n          expression.\n        ", "\n          Using this function is the equivalent of performing a match\n          using the xpath_expr after\n          appending /text(). In other words,\n          ExtractValue('<a><b>Sakila</b></a>',\n          '/a/b') and\n          ExtractValue('<a><b>Sakila</b></a>',\n          '/a/b/text()') produce the same result. If\n          xml_frag or\n          xpath_expr is\n          NULL, the function returns\n          NULL.\n        ", "\n          If multiple matches are found, the content of the first child\n          text node of each matching element is returned (in the order\n          matched) as a single, space-delimited string.\n        ", "\n          If no matching text node is found for the expression\n          (including the implicit /text())\u2014for\n          whatever reason, as long as\n          xpath_expr is valid, and\n          xml_frag consists of elements which\n          are properly nested and closed\u2014an empty string is\n          returned. No distinction is made between a match on an empty\n          element and no match at all. This is by design.\n        ", "\n          If you need to determine whether no matching element was found\n          in xml_frag or such an element was\n          found but contained no child text nodes, you should test the\n          result of an expression that uses the XPath\n          count() function. For example, both of\n          these statements return an empty string, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT ExtractValue('<a><b/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)", "\n          However, you can determine whether there was actually a\n          matching element using the following:\n        ", "Press CTRL+C to copy mysql> SELECT ExtractValue('<a><b/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 1                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 0                                   |\n+-------------------------------------+\n1 row in set (0.01 sec)", "\n\nImportant\n\n\nExtractValue() returns only\n            CDATA, and does not return any tags that\n            might be contained within a matching tag, nor any of their\n            content (see the result returned as val1\n            in the following example).\n\n", "Press CTRL+C to copy mysql> SELECT\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a') AS val1,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a/b') AS val2,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '//b') AS val3,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/b') AS val4,\n    ->   ExtractValue('<a>ccc<b>ddd</b><b>eee</b></a>', '//b') AS val5;\n\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5    |\n+------+------+------+------+---------+\n| ccc  | ddd  | ddd  |      | ddd eee |\n+------+------+------+------+---------+", "\n          This function uses the current SQL collation for making\n          comparisons with contains(), performing the\n          same collation aggregation as other string functions (such as\n          CONCAT()), in taking into\n          account the collation coercibility of their arguments; see\n          Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d, for an\n          explanation of the rules governing this behavior.\n        ", "\n          (Previously, binary\u2014that is,\n          case-sensitive\u2014comparison was always used.)\n        ", "\nNULL is returned if\n          xml_frag contains elements which\n          are not properly nested or closed, and a warning is generated,\n          as shown in this example:\n        ", "Press CTRL+C to copy mysql> SELECT ExtractValue('<a>c</a><b', '//a');\n+-----------------------------------+\n| ExtractValue('<a>c</a><b', '//a') |\n+-----------------------------------+\n| NULL                              |\n+-----------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1525\nMessage: Incorrect XML value: 'parse error at line 1 pos 11:\n         END-OF-INPUT unexpected ('>' wanted)'\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a>c</a><b/>', '//a');\n+-------------------------------------+\n| ExtractValue('<a>c</a><b/>', '//a') |\n+-------------------------------------+\n| c                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT ExtractValue('<a><b/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT ExtractValue('<a><b/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 1                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 0                                   |\n+-------------------------------------+\n1 row in set (0.01 sec)", "mysql> SELECT\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a') AS val1,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a/b') AS val2,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '//b') AS val3,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/b') AS val4,\n    ->   ExtractValue('<a>ccc<b>ddd</b><b>eee</b></a>', '//b') AS val5;\n\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5    |\n+------+------+------+------+---------+\n| ccc  | ddd  | ddd  |      | ddd eee |\n+------+------+------+------+---------+", "mysql> SELECT ExtractValue('<a>c</a><b', '//a');\n+-----------------------------------+\n| ExtractValue('<a>c</a><b', '//a') |\n+-----------------------------------+\n| NULL                              |\n+-----------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1525\nMessage: Incorrect XML value: 'parse error at line 1 pos 11:\n         END-OF-INPUT unexpected ('>' wanted)'\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a>c</a><b/>', '//a');\n+-------------------------------------+\n| ExtractValue('<a>c</a><b/>', '//a') |\n+-------------------------------------+\n| c                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "XML Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html#function_extractvalue"], "Feature Type": ["Function"], "index": 893, "vector_txt": "893:Feature: ExtractValue(xml_frag,\n          xpath_expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.11 XML Functions"], "Feature": ["UpdateXML(xml_target,\n          xpath_expr,\n          new_xml)"], "Description": ["Return replaced XML fragment", "\nUpdateXML(xml_target,\n          xpath_expr,\n          new_xml)\n", "\n          This function replaces a single portion of a given fragment of\n          XML markup xml_target with a new\n          XML fragment new_xml, and then\n          returns the changed XML. The portion of\n          xml_target that is replaced matches\n          an XPath expression xpath_expr\n          supplied by the user.\n        ", "\n          If no expression matching\n          xpath_expr is found, or if multiple\n          matches are found, the function returns the original\n          xml_target XML fragment. All three\n          arguments should be strings. If any of the arguments to\n          UpdateXML() are NULL,\n          the function returns NULL.\n        ", "Press CTRL+C to copy mysql> SELECT\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '/a', '<e>fff</e>') AS val1,\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '/b', '<e>fff</e>') AS val2,\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '//b', '<e>fff</e>') AS val3,\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val4,\n    ->   UpdateXML('<a><d></d><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val5\n    -> \\G\n\n*************************** 1. row ***************************\nval1: <e>fff</e>\nval2: <a><b>ccc</b><d></d></a>\nval3: <a><e>fff</e><d></d></a>\nval4: <a><b>ccc</b><e>fff</e></a>\nval5: <a><d></d><b>ccc</b><d></d></a>"], "Examples": [], "Category": ["Built-In Functions", "XML Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html#function_updatexml"], "Feature Type": ["Function"], "index": 894, "vector_txt": "894:Feature: UpdateXML(xml_target,\n          xpath_expr,\n          new_xml)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["DAYOFYEAR(date)"], "Description": ["Return the day of the year (1-366)", "\nDAYOFYEAR(date)\n", "\n          Returns the day of the year for\n          date, in the range\n          1 to 366. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT DAYOFYEAR('2007-02-03');\n        -> 34"], "Examples": ["mysql> SELECT DAYOFYEAR('2007-02-03');\n        -> 34"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofyear"], "Feature Type": ["Function"], "index": 895, "vector_txt": "895:Feature: DAYOFYEAR(date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.23 Miscellaneous Functions"], "Feature": ["DEFAULT(col_name)"], "Description": ["Return the default value for a table column", "\nDEFAULT(col_name)\n", "\n          Returns the default value for a table column. An error results\n          if the column has no default value.\n        ", "\n          The use of\n          DEFAULT(col_name)\n          to specify the default value for a named column is permitted\n          only for columns that have a literal default value, not for\n          columns that have an expression default value.\n        ", "Press CTRL+C to copy mysql> UPDATE t SET i = DEFAULT(i)+1 WHERE id < 100;"], "Examples": ["mysql> UPDATE t SET i = DEFAULT(i)+1 WHERE id < 100;"], "Category": ["Built-In Functions", "Miscellaneous Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_default"], "Feature Type": ["Function"], "index": 896, "vector_txt": "896:Feature: DEFAULT(col_name)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["DEGREES(X)"], "Description": ["Convert radians to degrees", "\nDEGREES(X)\n", "\n            Returns the argument X, converted\n            from radians to degrees. Returns NULL if\n            X is NULL.\n          ", "Press CTRL+C to copy mysql> SELECT DEGREES(PI());\n        -> 180\nmysql> SELECT DEGREES(PI() / 2);\n        -> 90"], "Examples": ["mysql> SELECT DEGREES(PI());\n        -> 180\nmysql> SELECT DEGREES(PI() / 2);\n        -> 90"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_degrees"], "Feature Type": ["Function"], "index": 897, "vector_txt": "897:Feature: DEGREES(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.20.1 Window Function Descriptions"], "Feature": ["DENSE_RANK()"], "Description": ["Rank of current row within its partition, without gaps", "\nDENSE_RANK()\nover_clause\n", "\n            Returns the rank of the current row within its partition,\n            without gaps. Peers are considered ties and receive the same\n            rank. This function assigns consecutive ranks to peer\n            groups; the result is that groups of size greater than one\n            do not produce noncontiguous rank numbers. For an example,\n            see the RANK() function\n            description.\n          ", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Examples": [], "Category": ["Built-In Functions", "Window Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_dense-rank"], "Feature Type": ["Function"], "index": 898, "vector_txt": "898:Feature: DENSE_RANK()\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["ELT(N,str1,str2,str3,...)"], "Description": ["Return string at index number", "\nELT(N,str1,str2,str3,...)\n", "\nELT() returns the\n          Nth element of the list of strings:\n          str1 if\n          N = 1,\n          str2 if\n          N = 2, and so\n          on. Returns NULL if\n          N is less than\n          1, greater than the number of arguments, or\n          NULL. ELT()\n          is the complement of FIELD().\n        ", "Press CTRL+C to copy mysql> SELECT ELT(1, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Aa'\nmysql> SELECT ELT(4, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Dd'"], "Examples": ["mysql> SELECT ELT(1, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Aa'\nmysql> SELECT ELT(4, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Dd'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_elt"], "Feature Type": ["Function"], "index": 899, "vector_txt": "899:Feature: ELT(N,str1,str2,str3,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/numeric-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.6 Numeric Functions and Operators", "14.6.2 Mathematical Functions"], "Feature": ["EXP(X)"], "Description": ["Raise to the power of", "\nEXP(X)\n", "\n            Returns the value of e (the base of\n            natural logarithms) raised to the power of\n            X. The inverse of this function\n            is LOG() (using a single\n            argument only) or LN().\n          ", "\n            If X is NULL,\n            this function returns NULL.\n          ", "Press CTRL+C to copy mysql> SELECT EXP(2);\n        -> 7.3890560989307\nmysql> SELECT EXP(-2);\n        -> 0.13533528323661\nmysql> SELECT EXP(0);\n        -> 1"], "Examples": ["mysql> SELECT EXP(2);\n        -> 7.3890560989307\nmysql> SELECT EXP(-2);\n        -> 0.13533528323661\nmysql> SELECT EXP(0);\n        -> 1"], "Category": ["Built-In Functions", "Mathematical Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_exp"], "Feature Type": ["Function"], "index": 900, "vector_txt": "900:Feature: EXP(X)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["EXPORT_SET(bits,on,off[,separator[,number_of_bits]])"], "Description": ["Return a string such that for every bit set in the value bits, you", "\nEXPORT_SET(bits,on,off[,separator[,number_of_bits]])\n", "\n          Returns a string such that for every bit set in the value\n          bits, you get an\n          on string and for every bit not set\n          in the value, you get an off\n          string. Bits in bits are examined\n          from right to left (from low-order to high-order bits).\n          Strings are added to the result from left to right, separated\n          by the separator string (the\n          default being the comma character ,). The\n          number of bits examined is given by\n          number_of_bits, which has a default\n          of 64 if not specified.\n          number_of_bits is silently clipped\n          to 64 if larger than 64. It is treated as an unsigned integer,\n          so a value of \u22121 is effectively the same as 64.\n        ", "Press CTRL+C to copy mysql> SELECT EXPORT_SET(5,'Y','N',',',4);\n        -> 'Y,N,Y,N'\nmysql> SELECT EXPORT_SET(6,'1','0',',',10);\n        -> '0,1,1,0,0,0,0,0,0,0'"], "Examples": ["mysql> SELECT EXPORT_SET(5,'Y','N',',',4);\n        -> 'Y,N,Y,N'\nmysql> SELECT EXPORT_SET(6,'1','0',',',10);\n        -> '0,1,1,0,0,0,0,0,0,0'"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_export-set"], "Feature Type": ["Function"], "index": 901, "vector_txt": "901:Feature: EXPORT_SET(bits,on,off[,separator[,number_of_bits]])\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.7 Date and Time Functions"], "Feature": ["EXTRACT(unit\n          FROM date)"], "Description": ["Extract part of a date", "\nEXTRACT(unit\n          FROM date)\n", "\n          The EXTRACT() function uses the\n          same kinds of unit specifiers as\n          DATE_ADD() or\n          DATE_SUB(), but extracts parts\n          from the date rather than performing date arithmetic. For\n          information on the unit argument,\n          see Temporal Intervals. Returns\n          NULL if date is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT EXTRACT(YEAR FROM '2019-07-02');\n        -> 2019\nmysql> SELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03');\n        -> 201907\nmysql> SELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03');\n        -> 20102\nmysql> SELECT EXTRACT(MICROSECOND\n    ->                FROM '2003-01-02 10:30:00.000123');\n        -> 123"], "Examples": ["mysql> SELECT EXTRACT(YEAR FROM '2019-07-02');\n        -> 2019\nmysql> SELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03');\n        -> 201907\nmysql> SELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03');\n        -> 20102\nmysql> SELECT EXTRACT(MICROSECOND\n    ->                FROM '2003-01-02 10:30:00.000123');\n        -> 123"], "Category": ["Built-In Functions", "Date and Time Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_extract"], "Feature Type": ["Function"], "index": 902, "vector_txt": "902:Feature: EXTRACT(unit\n          FROM date)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.11 XML Functions"], "Feature": ["ExtractValue(xml_frag,\n          xpath_expr)"], "Description": ["Extract a value from an XML string using XPath notation", "\nExtractValue(xml_frag,\n          xpath_expr)\n", "\nExtractValue() takes two string\n          arguments, a fragment of XML markup\n          xml_frag and an XPath expression\n          xpath_expr (also known as a\n          locator); it returns the\n          text (CDATA) of the first text node which\n          is a child of the element or elements matched by the XPath\n          expression.\n        ", "\n          Using this function is the equivalent of performing a match\n          using the xpath_expr after\n          appending /text(). In other words,\n          ExtractValue('<a><b>Sakila</b></a>',\n          '/a/b') and\n          ExtractValue('<a><b>Sakila</b></a>',\n          '/a/b/text()') produce the same result. If\n          xml_frag or\n          xpath_expr is\n          NULL, the function returns\n          NULL.\n        ", "\n          If multiple matches are found, the content of the first child\n          text node of each matching element is returned (in the order\n          matched) as a single, space-delimited string.\n        ", "\n          If no matching text node is found for the expression\n          (including the implicit /text())\u2014for\n          whatever reason, as long as\n          xpath_expr is valid, and\n          xml_frag consists of elements which\n          are properly nested and closed\u2014an empty string is\n          returned. No distinction is made between a match on an empty\n          element and no match at all. This is by design.\n        ", "\n          If you need to determine whether no matching element was found\n          in xml_frag or such an element was\n          found but contained no child text nodes, you should test the\n          result of an expression that uses the XPath\n          count() function. For example, both of\n          these statements return an empty string, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT ExtractValue('<a><b/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)", "\n          However, you can determine whether there was actually a\n          matching element using the following:\n        ", "Press CTRL+C to copy mysql> SELECT ExtractValue('<a><b/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 1                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 0                                   |\n+-------------------------------------+\n1 row in set (0.01 sec)", "\n\nImportant\n\n\nExtractValue() returns only\n            CDATA, and does not return any tags that\n            might be contained within a matching tag, nor any of their\n            content (see the result returned as val1\n            in the following example).\n\n", "Press CTRL+C to copy mysql> SELECT\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a') AS val1,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a/b') AS val2,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '//b') AS val3,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/b') AS val4,\n    ->   ExtractValue('<a>ccc<b>ddd</b><b>eee</b></a>', '//b') AS val5;\n\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5    |\n+------+------+------+------+---------+\n| ccc  | ddd  | ddd  |      | ddd eee |\n+------+------+------+------+---------+", "\n          This function uses the current SQL collation for making\n          comparisons with contains(), performing the\n          same collation aggregation as other string functions (such as\n          CONCAT()), in taking into\n          account the collation coercibility of their arguments; see\n          Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d, for an\n          explanation of the rules governing this behavior.\n        ", "\n          (Previously, binary\u2014that is,\n          case-sensitive\u2014comparison was always used.)\n        ", "\nNULL is returned if\n          xml_frag contains elements which\n          are not properly nested or closed, and a warning is generated,\n          as shown in this example:\n        ", "Press CTRL+C to copy mysql> SELECT ExtractValue('<a>c</a><b', '//a');\n+-----------------------------------+\n| ExtractValue('<a>c</a><b', '//a') |\n+-----------------------------------+\n| NULL                              |\n+-----------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1525\nMessage: Incorrect XML value: 'parse error at line 1 pos 11:\n         END-OF-INPUT unexpected ('>' wanted)'\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a>c</a><b/>', '//a');\n+-------------------------------------+\n| ExtractValue('<a>c</a><b/>', '//a') |\n+-------------------------------------+\n| c                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT ExtractValue('<a><b/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT ExtractValue('<a><b/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 1                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 0                                   |\n+-------------------------------------+\n1 row in set (0.01 sec)", "mysql> SELECT\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a') AS val1,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a/b') AS val2,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '//b') AS val3,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/b') AS val4,\n    ->   ExtractValue('<a>ccc<b>ddd</b><b>eee</b></a>', '//b') AS val5;\n\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5    |\n+------+------+------+------+---------+\n| ccc  | ddd  | ddd  |      | ddd eee |\n+------+------+------+------+---------+", "mysql> SELECT ExtractValue('<a>c</a><b', '//a');\n+-----------------------------------+\n| ExtractValue('<a>c</a><b', '//a') |\n+-----------------------------------+\n| NULL                              |\n+-----------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1525\nMessage: Incorrect XML value: 'parse error at line 1 pos 11:\n         END-OF-INPUT unexpected ('>' wanted)'\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a>c</a><b/>', '//a');\n+-------------------------------------+\n| ExtractValue('<a>c</a><b/>', '//a') |\n+-------------------------------------+\n| c                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "XML Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html#function_extractvalue"], "Feature Type": ["Function"], "index": 903, "vector_txt": "903:Feature: ExtractValue(xml_frag,\n          xpath_expr)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.8 String Functions and Operators"], "Feature": ["FIELD(str,str1,str2,str3,...)"], "Description": ["Index (position) of first argument in subsequent arguments", "\nFIELD(str,str1,str2,str3,...)\n", "\n          Returns the index (position) of str\n          in the str1,\n          str2,\n          str3, ... list.\n          Returns 0 if str\n          is not found.\n        ", "\n          If all arguments to FIELD() are\n          strings, all arguments are compared as strings. If all\n          arguments are numbers, they are compared as numbers.\n          Otherwise, the arguments are compared as double.\n        ", "\n          If str is NULL,\n          the return value is 0 because\n          NULL fails equality comparison with any\n          value. FIELD() is the\n          complement of ELT().\n        ", "Press CTRL+C to copy mysql> SELECT FIELD('Bb', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 2\nmysql> SELECT FIELD('Gg', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 0"], "Examples": ["mysql> SELECT FIELD('Bb', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 2\nmysql> SELECT FIELD('Gg', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 0"], "Category": ["Built-In Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_field"], "Feature Type": ["Function"], "index": 904, "vector_txt": "904:Feature: FIELD(str,str1,str2,str3,...)\n"}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.19.1 Aggregate Function Descriptions"], "Feature": ["MAX([DISTINCT]\n            expr)\n            [over_clause]"], "Description": ["Return the maximum value", "\nMAX([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the maximum value of\n            expr.\n            MAX() may take a string\n            argument; in such cases, it returns the maximum string\n            value. See Section\u00a010.3.1, \u201cHow MySQL Uses Indexes\u201d. The\n            DISTINCT keyword can be used to find the\n            maximum of the distinct values of\n            expr, however, this produces the\n            same result as omitting DISTINCT.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            MAX() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            For MAX(), MySQL currently\n            compares ENUM and\n            SET columns by their string\n            value rather than by the string's relative position in the\n            set. This differs from how ORDER BY\n            compares them.\n          "], "Examples": ["mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Built-In Functions", "Aggregate Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_max"], "Feature Type": ["Function"], "index": 905, "vector_txt": "905:Feature: MAX([DISTINCT]\n            expr)\n            [over_clause]\n"}
