{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/load-index.html"
    ],
    "Title": [
        "15.7.8.5 LOAD INDEX INTO CACHE Statement"
    ],
    "Feature": [
        "LOAD INDEX INTO CACHE\n  tbl_index_list [, tbl_index_list] ...\n\ntbl_index_list:\n  tbl_name\n    [PARTITION (partition_list)]\n    [{INDEX|KEY} (index_name[, index_name] ...)]\n    [IGNORE LEAVES]\n\npartition_list: {\n    partition_name[, partition_name] ...\n  | ALL\n}"
    ],
    "Description": [
        "\n        The LOAD INDEX INTO\n        CACHE statement preloads a table index into the key\n        cache to which it has been assigned by an explicit\n        CACHE INDEX statement, or into\n        the default key cache otherwise.\n      ",
        "\nLOAD INDEX INTO\n        CACHE applies only to MyISAM\n        tables, including partitioned MyISAM tables.\n        In addition, indexes on partitioned tables can be preloaded for\n        one, several, or all partitions.\n      ",
        "\n        The IGNORE LEAVES modifier causes only blocks\n        for the nonleaf nodes of the index to be preloaded.\n      ",
        "\nIGNORE LEAVES is also supported for\n        partitioned MyISAM tables.\n      ",
        "\n        The following statement preloads nodes (index blocks) of indexes\n        for the tables t1 and t2:\n      ",
        "Press CTRL+C to copy mysql> LOAD INDEX INTO CACHE t1, t2 IGNORE LEAVES;\n+---------+--------------+----------+----------+\n| Table   | Op           | Msg_type | Msg_text |\n+---------+--------------+----------+----------+\n| test.t1 | preload_keys | status   | OK       |\n| test.t2 | preload_keys | status   | OK       |\n+---------+--------------+----------+----------+",
        "\n        This statement preloads all index blocks from\n        t1. It preloads only blocks for the nonleaf\n        nodes from t2.\n      ",
        "\n        The syntax of LOAD\n        INDEX INTO CACHE enables you to specify that only\n        particular indexes from a table should be preloaded. However,\n        the implementation preloads all the table's indexes into the\n        cache, so there is no reason to specify anything other than the\n        table name.\n      ",
        "\n        It is possible to preload indexes on specific partitions of\n        partitioned MyISAM tables. For example, of\n        the following 2 statements, the first preloads indexes for\n        partition p0 of a partitioned table\n        pt, while the second preloads the indexes for\n        partitions p1 and p3 of\n        the same table:\n      ",
        "Press CTRL+C to copy LOAD INDEX INTO CACHE pt PARTITION (p0);\nLOAD INDEX INTO CACHE pt PARTITION (p1, p3);",
        "\n        To preload the indexes for all partitions in table\n        pt, you can use either of the following two\n        statements:\n      ",
        "Press CTRL+C to copy LOAD INDEX INTO CACHE pt PARTITION (ALL);\n\nLOAD INDEX INTO CACHE pt;",
        "\n        The two statements just shown are equivalent, and issuing either\n        one has exactly the same effect. In other words, if you wish to\n        preload indexes for all partitions of a partitioned table, the\n        PARTITION (ALL) clause is optional.\n      ",
        "\n        When preloading indexes for multiple partitions, the partitions\n        need not be contiguous, and you need not list their names in any\n        particular order.\n      ",
        "\nLOAD INDEX INTO\n        CACHE ... IGNORE LEAVES fails unless all indexes in a\n        table have the same block size. To determine index block sizes\n        for a table, use myisamchk -dv and check the\n        Blocksize column.\n"
    ],
    "Examples": [
        "mysql> LOAD INDEX INTO CACHE t1, t2 IGNORE LEAVES;\n+---------+--------------+----------+----------+\n| Table   | Op           | Msg_type | Msg_text |\n+---------+--------------+----------+----------+\n| test.t1 | preload_keys | status   | OK       |\n| test.t2 | preload_keys | status   | OK       |\n+---------+--------------+----------+----------+",
        "LOAD INDEX INTO CACHE pt PARTITION (p0);\nLOAD INDEX INTO CACHE pt PARTITION (p1, p3);",
        "LOAD INDEX INTO CACHE pt PARTITION (ALL);\n\nLOAD INDEX INTO CACHE pt;"
    ],
    "Category": [
        "Database Administration Statements"
    ]
}