{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/set-operations.html"
    ],
    "Title": [
        "15.2.14 Set Operations with UNION, INTERSECT, and EXCEPT"
    ],
    "Feature": [
        "query_block [set_op query_block] [set_op query_block] ...\n\nquery_block:\n    SELECT | TABLE | VALUES\n\nset_op:\n    UNION | INTERSECT | EXCEPT",
        "query_expression:\n  [with_clause] /* WITH clause */ \n  query_expression_body\n  [order_by_clause] [limit_clause] [into_clause]\n\nquery_expression_body:\n    query_term\n |  query_expression_body UNION [ALL | DISTINCT] query_term\n |  query_expression_body EXCEPT [ALL | DISTINCT] query_term\n\nquery_term:\n    query_primary\n |  query_term INTERSECT [ALL | DISTINCT] query_primary\n\nquery_primary:\n    query_block\n |  '(' query_expression_body [order_by_clause] [limit_clause] [into_clause] ')'\n\nquery_block:   /* also known as a simple table */\n    query_specification                     /* SELECT statement */\n |  table_value_constructor                 /* VALUES statement */\n |  explicit_table                          /* TABLE statement  */"
    ],
    "Description": [
        "\nResult Set Column Names and Data TypesSet Operations with TABLE and VALUES StatementsSet Operations using DISTINCT and ALLSet Operations with ORDER BY and LIMITLimitations of Set Operations\n",
        "\n      SQL set operations combine the results of multiple query blocks\n      into a single result. A query block,\n      sometimes also known as a simple table, is\n      any SQL statement that returns a result set, such as\n      SELECT. MySQL 8.4 also\n      supports TABLE and\n      VALUES statements. See the\n      individual descriptions of these statements elsewhere in this\n      chapter for additional information.\n    ",
        "\n      The SQL standard defines the following three set operations:\n",
        "\n\nUNION: Combine all results from\n          two query blocks into a single result, omitting any\n          duplicates.\n        \nINTERSECT: Combine only those\n          rows which the results of two query blocks have in common,\n          omitting any duplicates.\n        \nEXCEPT: For two query blocks\n          A and B,\n          return all results from A which are\n          not also present in B, omitting any\n          duplicates.\n        \n          (Some database systems, such as Oracle, use\n          MINUS for the name of this operator. This\n          is not supported in MySQL.)\n\n",
        "\n      MySQL supports UNION,\n      INTERSECT, and EXCEPT.\n    ",
        "\n      Each of these set operators supports an ALL\n      modifier. When the ALL keyword follows a set\n      operator, this causes duplicates to be included in the result. See\n      the following sections covering the individual operators for more\n      information and examples.\n    ",
        "\n      All three set operators also support a DISTINCT\n      keyword, which suppresses duplicates in the result. Since this is\n      the default behavior for set operators, it is usually not\n      necessary to specify DISTINCT explicitly.\n    ",
        "\n      In general, query blocks and set operations can be combined in any\n      number and order. A greatly simplified representation is shown\n      here:\n    ",
        "\n      This can be represented more accurately, and in greater detail,\n      like this:\n    ",
        "\n      You should be aware that INTERSECT is evaluated\n      before UNION or EXCEPT. This\n      means that, for example, TABLE x UNION TABLE y INTERSECT\n      TABLE z is always evaluated as TABLE x UNION\n      (TABLE y INTERSECT TABLE z). See\n      Section\u00a015.2.8, \u201cINTERSECT Clause\u201d, for more information.\n    ",
        "\n      In addition, you should keep in mind that, while the\n      UNION and INTERSECT set\n      operators are commutative (ordering is not significant),\n      EXCEPT is not (order of operands affects the\n      outcome). In other words, all of the following statements are\n      true:\n",
        "\n\nTABLE x UNION TABLE y and TABLE y\n          UNION TABLE x produce the same result, although the\n          ordering of the rows may differ. You can force them to be the\n          same using ORDER BY; see\n          Set Operations with ORDER BY and LIMIT.\n        \nTABLE x INTERSECT TABLE y and\n          TABLE y INTERSECT TABLE x return the same\n          result.\n        \nTABLE x EXCEPT TABLE y and TABLE y\n          EXCEPT TABLE x do not yield the\n          same result. See Section\u00a015.2.4, \u201cEXCEPT Clause\u201d, for an example.\n\n",
        "\n      More information and examples can be found in the sections that\n      follow.\n",
        "\n\n\n\nResult Set Column Names and Data Types\n\n\n\n\n        The column names for the result of a set operation are taken\n        from the column names of the first query block. Example:\n      Press CTRL+C to copy mysql> CREATE TABLE t1 (x INT, y INT);\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql> INSERT INTO t1 VALUES ROW(4,-2), ROW(5,9);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> CREATE TABLE t2 (a INT, b INT);\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql> INSERT INTO t2 VALUES ROW(1,2), ROW(3,4);\nQuery OK, 2 rows affected (0.01 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> TABLE t1 UNION TABLE t2;\n+------+------+\n| x    | y    |\n+------+------+\n|    4 |   -2 |\n|    5 |    9 |\n|    1 |    2 |\n|    3 |    4 |\n+------+------+\n4 rows in set (0.00 sec)\n\nmysql> TABLE t2 UNION TABLE t1;\n+------+------+\n| a    | b    |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n|    4 |   -2 |\n|    5 |    9 |\n+------+------+\n4 rows in set (0.00 sec)\n        This is true for UNION,\n        EXCEPT, and INTERSECT\n        queries.\n      \n        Selected columns listed in corresponding positions of each query\n        block should have the same data type. For example, the first\n        column selected by the first statement should have the same type\n        as the first column selected by the other statements. If the\n        data types of corresponding result columns do not match, the\n        types and lengths of the columns in the result take into account\n        the values retrieved by all of the query blocks. For example,\n        the column length in the result set is not constrained to the\n        length of the value from the first statement, as shown here:\n      Press CTRL+C to copy mysql> SELECT REPEAT('a',1) UNION SELECT REPEAT('b',20);\n+----------------------+\n| REPEAT('a',1)        |\n+----------------------+\n| a                    |\n| bbbbbbbbbbbbbbbbbbbb |\n+----------------------+\n",
        "\n\n\n\nSet Operations with TABLE and VALUES Statements\n\n\n\n\n        You can also use a TABLE\n        statement or VALUES statement\n        wherever you can employ the equivalent\n        SELECT statement. Assume that\n        tables t1 and t2 are\n        created and populated as shown here:\n      Press CTRL+C to copy CREATE TABLE t1 (x INT, y INT);\nINSERT INTO t1 VALUES ROW(4,-2),ROW(5,9);\n\nCREATE TABLE t2 (a INT, b INT);\nINSERT INTO t2 VALUES ROW(1,2),ROW(3,4);\n        The preceding being the case, and disregarding the column names\n        in the output of the queries beginning with\n        VALUES, all of the following\n        UNION queries yield the same result:\n      Press CTRL+C to copy SELECT * FROM t1 UNION SELECT * FROM t2;\nTABLE t1 UNION SELECT * FROM t2;\nVALUES ROW(4,-2), ROW(5,9) UNION SELECT * FROM t2;\nSELECT * FROM t1 UNION TABLE t2;\nTABLE t1 UNION TABLE t2;\nVALUES ROW(4,-2), ROW(5,9) UNION TABLE t2;\nSELECT * FROM t1 UNION VALUES ROW(4,-2),ROW(5,9);\nTABLE t1 UNION VALUES ROW(4,-2),ROW(5,9);\nVALUES ROW(4,-2), ROW(5,9) UNION VALUES ROW(4,-2),ROW(5,9);\n        To force the column names to be the same, wrap the query block\n        on the left-hand side in a SELECT statement,\n        and use aliases, like this:\n      Press CTRL+C to copy mysql> SELECT * FROM (TABLE t2) AS t(x,y) UNION TABLE t1;\n+------+------+\n| x    | y    |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n|    4 |   -2 |\n|    5 |    9 |\n+------+------+\n4 rows in set (0.00 sec)\n",
        "\n\n\n\nSet Operations using DISTINCT and ALL\n\n\n\n\n        By default, duplicate rows are removed from results of set\n        operations. The optional DISTINCT keyword has\n        the same effect but makes it explicit. With the optional\n        ALL keyword, duplicate-row removal does not\n        occur and the result includes all matching rows from all queries\n        in the union.\n      \n        You can mix ALL and\n        DISTINCT in the same query. Mixed types are\n        treated such that a set operation using\n        DISTINCT overrides any such operation using\n        ALL to its left. A\n        DISTINCT set can be produced explicitly by\n        using DISTINCT with\n        UNION,\n        INTERSECT, or\n        EXCEPT, or implicitly by using\n        the set operations with no following DISTINCT\n        or ALL keyword.\n      \n        Set operations work the same way when one or more\n        TABLE statements,\n        VALUES statements, or both, are\n        used to generate the set.\n\n",
        "\n\n\n\nSet Operations with ORDER BY and LIMIT\n\n\n\n\n        To apply an ORDER BY or\n        LIMIT clause to an individual query block\n        used as part of a union, intersection, or other set operation,\n        parenthesize the query block, placing the clause inside the\n        parentheses, like this:\n      Press CTRL+C to copy (SELECT a FROM t1 WHERE a=10 AND b=1 ORDER BY a LIMIT 10)\nUNION\n(SELECT a FROM t2 WHERE a=11 AND b=2 ORDER BY a LIMIT 10);\n\n(TABLE t1 ORDER BY x LIMIT 10) \nINTERSECT \n(TABLE t2 ORDER BY a LIMIT 10);\n        Use of ORDER BY for individual query blocks\n        or statements implies nothing about the order in which the rows\n        appear in the final result because the rows produced by a set\n        operation are by default unordered. Therefore, ORDER\n        BY in this context typically is used in conjunction\n        with LIMIT, to determine the subset of the\n        selected rows to retrieve, even though it does not necessarily\n        affect the order of those rows in the final result. If\n        ORDER BY appears without\n        LIMIT within a query block, it is optimized\n        away because it has no effect in any case.\n      \n        To use an ORDER BY or\n        LIMIT clause to sort or limit the entire\n        result of a set operation, place the ORDER BY\n        or LIMIT after the last statement:\n      Press CTRL+C to copy SELECT a FROM t1\nEXCEPT\nSELECT a FROM t2 WHERE a=11 AND b=2\nORDER BY a LIMIT 10;\n\nTABLE t1\nUNION \nTABLE t2\nORDER BY a LIMIT 10;\n        If one or more individual statements make use of ORDER\n        BY, LIMIT, or both, and, in\n        addition, you wish to apply an ORDER BY, LIMIT, or both to the\n        entire result, then each such individual statement must be\n        enclosed in parentheses.\n      Press CTRL+C to copy (SELECT a FROM t1 WHERE a=10 AND b=1)\nEXCEPT\n(SELECT a FROM t2 WHERE a=11 AND b=2)\nORDER BY a LIMIT 10;\n\n(TABLE t1 ORDER BY a LIMIT 10) \nUNION \nTABLE t2 \nORDER BY a LIMIT 10;\n        A statement with no ORDER BY or\n        LIMIT clause does need to be parenthesized;\n        replacing TABLE t2 with (TABLE\n        t2) in the second statement of the two just shown does\n        not alter the result of the UNION.\n      \n        You can also use ORDER BY and\n        LIMIT with\n        VALUES statements in set\n        operations, as shown in this example using the\n        mysql client:\n      Press CTRL+C to copy mysql> VALUES ROW(4,-2), ROW(5,9), ROW(-1,3) \n    -> UNION \n    -> VALUES ROW(1,2), ROW(3,4), ROW(-1,3) \n    -> ORDER BY column_0 DESC LIMIT 3;\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        5 |        9 |\n|        4 |       -2 |\n|        3 |        4 |\n+----------+----------+\n3 rows in set (0.00 sec)\n        (You should keep in mind that neither TABLE\n        statements nor VALUES statements accept a\n        WHERE clause.)\n      \n        This kind of ORDER BY cannot use column\n        references that include a table name (that is, names in\n        tbl_name.col_name\n        format). Instead, provide a column alias in the first query\n        block, and refer to the alias in the ORDER BY\n        clause. (You can also refer to the column in the ORDER\n        BY clause using its column position, but such use of\n        column positions is deprecated, and thus subject to eventual\n        removal in a future MySQL release.)\n      \n        If a column to be sorted is aliased, the ORDER\n        BY clause must refer to the\n        alias, not the column name. The first of the following\n        statements is permitted, but the second fails with an\n        Unknown column 'a' in 'order clause' error:\n      Press CTRL+C to copy (SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY b;\n(SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY a;\n        To cause rows in a UNION result\n        to consist of the sets of rows retrieved by each query block one\n        after the other, select an additional column in each query block\n        to use as a sort column and add an ORDER BY\n        clause that sorts on that column following the last query block:\n      Press CTRL+C to copy (SELECT 1 AS sort_col, col1a, col1b, ... FROM t1)\nUNION\n(SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col;\n        To maintain sort order within individual results, add a\n        secondary column to the ORDER BY clause:\n      Press CTRL+C to copy (SELECT 1 AS sort_col, col1a, col1b, ... FROM t1)\nUNION\n(SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col, col1a;\n        Use of an additional column also enables you to determine which\n        query block each row comes from. Extra columns can provide other\n        identifying information as well, such as a string that indicates\n        a table name.\n\n",
        "\n\n\n\nLimitations of Set Operations\n\n\n\n\n        Set operations in MySQL are subject to some limitations, which\n        are described in the next few paragraphs.\n      \n        Set operations including SELECT\n        statements have the following limitations:\n\n\n\nHIGH_PRIORITY in the first\n            SELECT has no effect.\n            HIGH_PRIORITY in any subsequent\n            SELECT produces a syntax error.\n          \n            Only the last SELECT statement can use an\n            INTO clause. However, the entire\n            UNION result is written to the\n            INTO output destination.\n\n\n\n        These two UNION variants containing\n        INTO are deprecated; you should expect\n        support for them to be removed in a future version of MySQL:\n\n\n\n            In the trailing query block of a query expression, use of\n            INTO before FROM\n            produces a warning. Example:\n          Press CTRL+C to copy ... UNION SELECT * INTO OUTFILE 'file_name' FROM table_name;\n            In a parenthesized trailing block of a query expression, use\n            of INTO (regardless of its position\n            relative to FROM) produces a warning.\n            Example:\n          Press CTRL+C to copy ... UNION (SELECT * INTO OUTFILE 'file_name' FROM table_name);\n            Those variants are deprecated because they are confusing, as\n            if they collect information from the named table rather than\n            the entire query expression (the UNION).\n\n\n\n        Set operations with an aggregate function in an ORDER\n        BY clause are rejected with\n        ER_AGGREGATE_ORDER_FOR_UNION.\n        Although the error name might suggest that this is exclusive to\n        UNION queries, the preceding is also true for\n        EXCEPT and INTERSECT\n        queries, as shown here:\n      Press CTRL+C to copy mysql> TABLE t1 INTERSECT TABLE t2 ORDER BY MAX(x);\nERROR 3028 (HY000): Expression #1 of ORDER BY contains aggregate function and applies to a UNION, EXCEPT or INTERSECT\n        A locking clause (such as FOR UPDATE or\n        LOCK IN SHARE MODE) applies to the query\n        block it follows. This means that, in a\n        SELECT statement used with set operations, a\n        locking clause can be used only if the query block and locking\n        clause are enclosed in parentheses.\n\n"
    ],
    "Examples": [
        "mysql> CREATE TABLE t1 (x INT, y INT);\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql> INSERT INTO t1 VALUES ROW(4,-2), ROW(5,9);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> CREATE TABLE t2 (a INT, b INT);\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql> INSERT INTO t2 VALUES ROW(1,2), ROW(3,4);\nQuery OK, 2 rows affected (0.01 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> TABLE t1 UNION TABLE t2;\n+------+------+\n| x    | y    |\n+------+------+\n|    4 |   -2 |\n|    5 |    9 |\n|    1 |    2 |\n|    3 |    4 |\n+------+------+\n4 rows in set (0.00 sec)\n\nmysql> TABLE t2 UNION TABLE t1;\n+------+------+\n| a    | b    |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n|    4 |   -2 |\n|    5 |    9 |\n+------+------+\n4 rows in set (0.00 sec)",
        "mysql> SELECT REPEAT('a',1) UNION SELECT REPEAT('b',20);\n+----------------------+\n| REPEAT('a',1)        |\n+----------------------+\n| a                    |\n| bbbbbbbbbbbbbbbbbbbb |\n+----------------------+",
        "CREATE TABLE t1 (x INT, y INT);\nINSERT INTO t1 VALUES ROW(4,-2),ROW(5,9);\n\nCREATE TABLE t2 (a INT, b INT);\nINSERT INTO t2 VALUES ROW(1,2),ROW(3,4);",
        "SELECT * FROM t1 UNION SELECT * FROM t2;\nTABLE t1 UNION SELECT * FROM t2;\nVALUES ROW(4,-2), ROW(5,9) UNION SELECT * FROM t2;\nSELECT * FROM t1 UNION TABLE t2;\nTABLE t1 UNION TABLE t2;\nVALUES ROW(4,-2), ROW(5,9) UNION TABLE t2;\nSELECT * FROM t1 UNION VALUES ROW(4,-2),ROW(5,9);\nTABLE t1 UNION VALUES ROW(4,-2),ROW(5,9);\nVALUES ROW(4,-2), ROW(5,9) UNION VALUES ROW(4,-2),ROW(5,9);",
        "mysql> SELECT * FROM (TABLE t2) AS t(x,y) UNION TABLE t1;\n+------+------+\n| x    | y    |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n|    4 |   -2 |\n|    5 |    9 |\n+------+------+\n4 rows in set (0.00 sec)",
        "(SELECT a FROM t1 WHERE a=10 AND b=1 ORDER BY a LIMIT 10)\nUNION\n(SELECT a FROM t2 WHERE a=11 AND b=2 ORDER BY a LIMIT 10);\n\n(TABLE t1 ORDER BY x LIMIT 10) \nINTERSECT \n(TABLE t2 ORDER BY a LIMIT 10);",
        "SELECT a FROM t1\nEXCEPT\nSELECT a FROM t2 WHERE a=11 AND b=2\nORDER BY a LIMIT 10;\n\nTABLE t1\nUNION \nTABLE t2\nORDER BY a LIMIT 10;",
        "(SELECT a FROM t1 WHERE a=10 AND b=1)\nEXCEPT\n(SELECT a FROM t2 WHERE a=11 AND b=2)\nORDER BY a LIMIT 10;\n\n(TABLE t1 ORDER BY a LIMIT 10) \nUNION \nTABLE t2 \nORDER BY a LIMIT 10;",
        "mysql> VALUES ROW(4,-2), ROW(5,9), ROW(-1,3) \n    -> UNION \n    -> VALUES ROW(1,2), ROW(3,4), ROW(-1,3) \n    -> ORDER BY column_0 DESC LIMIT 3;\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        5 |        9 |\n|        4 |       -2 |\n|        3 |        4 |\n+----------+----------+\n3 rows in set (0.00 sec)",
        "(SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY b;\n(SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY a;",
        "(SELECT 1 AS sort_col, col1a, col1b, ... FROM t1)\nUNION\n(SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col;",
        "(SELECT 1 AS sort_col, col1a, col1b, ... FROM t1)\nUNION\n(SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col, col1a;",
        "... UNION SELECT * INTO OUTFILE 'file_name' FROM table_name;",
        "... UNION (SELECT * INTO OUTFILE 'file_name' FROM table_name);",
        "mysql> TABLE t1 INTERSECT TABLE t2 ORDER BY MAX(x);\nERROR 3028 (HY000): Expression #1 of ORDER BY contains aggregate function and applies to a UNION, EXCEPT or INTERSECT"
    ],
    "Category": [
        "Data Manipulation Statements"
    ]
}