{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/show-create-view.html"
    ],
    "Title": [
        "15.7.7.14 SHOW CREATE VIEW Statement"
    ],
    "Feature": [
        "SHOW CREATE VIEW view_name",
        "mysql> SHOW CREATE VIEW v\\G\n*************************** 1. row ***************************\n                View: v\n         Create View: CREATE ALGORITHM=UNDEFINED\n                      DEFINER=`bob`@`localhost`\n                      SQL SECURITY DEFINER VIEW\n                      `v` AS select 1 AS `a`,2 AS `b`\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci"
    ],
    "Description": [
        "\n        This statement shows the CREATE\n        VIEW statement that creates the named view.\n      ",
        "\ncharacter_set_client is the session value of\n        the character_set_client system\n        variable when the view was created.\n        collation_connection is the session value of\n        the collation_connection system\n        variable when the view was created.\n      ",
        "\n        Use of SHOW CREATE VIEW requires\n        the SHOW VIEW privilege, and the\n        SELECT privilege for the view in\n        question.\n      ",
        "\n        View information is also available from the\n        INFORMATION_SCHEMA\nVIEWS table. See\n        Section\u00a028.3.47, \u201cThe INFORMATION_SCHEMA VIEWS Table\u201d.\n      ",
        "\n        MySQL lets you use different\n        sql_mode settings to tell the\n        server the type of SQL syntax to support. For example, you might\n        use the ANSI SQL mode to\n        ensure MySQL correctly interprets the standard SQL concatenation\n        operator, the double bar (||), in your\n        queries. If you then create a view that concatenates items, you\n        might worry that changing the\n        sql_mode setting to a value\n        different from ANSI could\n        cause the view to become invalid. But this is not the case. No\n        matter how you write out a view definition, MySQL always stores\n        it the same way, in a canonical form. Here is an example that\n        shows how the server changes a double bar concatenation operator\n        to a CONCAT() function:\n      ",
        "Press CTRL+C to copy mysql> SET sql_mode = 'ANSI';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CREATE VIEW test.v AS SELECT 'a' || 'b' as col1;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SHOW CREATE VIEW test.v\\G\n*************************** 1. row ***************************\n                View: v\n         Create View: CREATE VIEW \"v\" AS select concat('a','b') AS \"col1\"\n...\n1 row in set (0.00 sec)",
        "\n        The advantage of storing a view definition in canonical form is\n        that changes made later to the value of\n        sql_mode do not affect the\n        results from the view. However an additional consequence is that\n        comments prior to SELECT are\n        stripped from the definition by the server.\n"
    ],
    "Examples": [
        "mysql> SET sql_mode = 'ANSI';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CREATE VIEW test.v AS SELECT 'a' || 'b' as col1;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SHOW CREATE VIEW test.v\\G\n*************************** 1. row ***************************\n                View: v\n         Create View: CREATE VIEW \"v\" AS select concat('a','b') AS \"col1\"\n...\n1 row in set (0.00 sec)"
    ],
    "Category": [
        "Database Administration Statements"
    ]
}