{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/if.html"
    ],
    "Title": [
        "15.6.5.2 IF Statement"
    ],
    "Feature": [
        "IF search_condition THEN statement_list\n    [ELSEIF search_condition THEN statement_list] ...\n    [ELSE statement_list]\nEND IF"
    ],
    "Description": [
        "\n        The IF statement for stored\n        programs implements a basic conditional construct.\n",
        "\n\nNote\n\n\n          There is also an IF()\nfunction, which differs from the\n          IF\nstatement described here. See\n          Section\u00a014.5, \u201cFlow Control Functions\u201d. The\n          IF statement can have\n          THEN, ELSE, and\n          ELSEIF clauses, and it is terminated with\n          END IF.\n\n",
        "\n        If a given search_condition evaluates\n        to true, the corresponding THEN or\n        ELSEIF clause\n        statement_list executes. If no\n        search_condition matches, the\n        ELSE clause\n        statement_list executes.\n      ",
        "\n        Each statement_list consists of one\n        or more SQL statements; an empty\n        statement_list is not permitted.\n      ",
        "\n        An IF ... END IF block, like all other\n        flow-control blocks used within stored programs, must be\n        terminated with a semicolon, as shown in this example:\n      ",
        "Press CTRL+C to copy DELIMITER //\n\nCREATE FUNCTION SimpleCompare(n INT, m INT)\n  RETURNS VARCHAR(20)\n\n  BEGIN\n    DECLARE s VARCHAR(20);\n\n    IF n > m THEN SET s = '>';\n    ELSEIF n = m THEN SET s = '=';\n    ELSE SET s = '<';\n    END IF;\n\n    SET s = CONCAT(n, ' ', s, ' ', m);\n\n    RETURN s;\n  END //\n\nDELIMITER ;",
        "\n        As with other flow-control constructs, IF ... END\n        IF blocks may be nested within other flow-control\n        constructs, including other IF\n        statements. Each IF must be\n        terminated by its own END IF followed by a\n        semicolon. You can use indentation to make nested flow-control\n        blocks more easily readable by humans (although this is not\n        required by MySQL), as shown here:\n      ",
        "Press CTRL+C to copy DELIMITER //\n\nCREATE FUNCTION VerboseCompare (n INT, m INT)\n  RETURNS VARCHAR(50)\n\n  BEGIN\n    DECLARE s VARCHAR(50);\n\n    IF n = m THEN SET s = 'equals';\n    ELSE\n      IF n > m THEN SET s = 'greater';\n      ELSE SET s = 'less';\n      END IF;\n\n      SET s = CONCAT('is ', s, ' than');\n    END IF;\n\n    SET s = CONCAT(n, ' ', s, ' ', m, '.');\n\n    RETURN s;\n  END //\n\nDELIMITER ;",
        "\n        In this example, the inner IF is\n        evaluated only if n is not equal to\n        m.\n"
    ],
    "Examples": [
        "DELIMITER //\n\nCREATE FUNCTION SimpleCompare(n INT, m INT)\n  RETURNS VARCHAR(20)\n\n  BEGIN\n    DECLARE s VARCHAR(20);\n\n    IF n > m THEN SET s = '>';\n    ELSEIF n = m THEN SET s = '=';\n    ELSE SET s = '<';\n    END IF;\n\n    SET s = CONCAT(n, ' ', s, ' ', m);\n\n    RETURN s;\n  END //\n\nDELIMITER ;",
        "DELIMITER //\n\nCREATE FUNCTION VerboseCompare (n INT, m INT)\n  RETURNS VARCHAR(50)\n\n  BEGIN\n    DECLARE s VARCHAR(50);\n\n    IF n = m THEN SET s = 'equals';\n    ELSE\n      IF n > m THEN SET s = 'greater';\n      ELSE SET s = 'less';\n      END IF;\n\n      SET s = CONCAT('is ', s, ' than');\n    END IF;\n\n    SET s = CONCAT(n, ' ', s, ' ', m, '.');\n\n    RETURN s;\n  END //\n\nDELIMITER ;"
    ],
    "Category": [
        "Compound Statement Syntax"
    ]
}