{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/repair-table.html"
    ],
    "Title": [
        "15.7.3.5 REPAIR TABLE Statement"
    ],
    "Feature": [
        "REPAIR [NO_WRITE_TO_BINLOG | LOCAL]\n    TABLE tbl_name [, tbl_name] ...\n    [QUICK] [EXTENDED] [USE_FRM]"
    ],
    "Description": [
        "\nREPAIR TABLE repairs a possibly\n        corrupted table, for certain storage engines only.\n      ",
        "\n        This statement requires SELECT\n        and INSERT privileges for the\n        table.\n      ",
        "\n        Although normally you should never have to run\n        REPAIR TABLE, if disaster\n        strikes, this statement is very likely to get back all your data\n        from a MyISAM table. If your tables become\n        corrupted often, try to find the reason for it, to eliminate the\n        need to use REPAIR TABLE. See\n        Section\u00a0B.3.3.3, \u201cWhat to Do If MySQL Keeps Crashing\u201d, and\n        Section\u00a018.2.4, \u201cMyISAM Table Problems\u201d.\n      ",
        "\nREPAIR TABLE checks the table to\n        see whether an upgrade is required. If so, it performs the\n        upgrade, following the same rules as\n        CHECK TABLE ... FOR\n        UPGRADE. See Section\u00a015.7.3.2, \u201cCHECK TABLE Statement\u201d, for more\n        information.\n",
        "\n\nImportant\n\n\n\n              Make a backup of a table before performing a table repair\n              operation; under some circumstances the operation might\n              cause data loss. Possible causes include but are not\n              limited to file system errors. See\n              Chapter\u00a09, Backup and Recovery.\n            \n              If the server exits during a REPAIR\n              TABLE operation, it is essential after\n              restarting it that you immediately execute another\n              REPAIR TABLE statement for\n              the table before performing any other operations on it. In\n              the worst case, you might have a new clean index file\n              without information about the data file, and then the next\n              operation you perform could overwrite the data file. This\n              is an unlikely but possible scenario that underscores the\n              value of making a backup first.\n            \n              In the event that a table on the source becomes corrupted\n              and you run REPAIR TABLE on\n              it, any resulting changes to the original table are\n              not propagated to replicas.\n\n\n",
        "\nREPAIR TABLE Storage Engine and Partitioning SupportREPAIR TABLE OptionsREPAIR TABLE OutputTable Repair Considerations\n",
        "\n\n\n\nREPAIR TABLE Storage Engine and Partitioning Support\n\n\n\n\nREPAIR TABLE works for\n          MyISAM,\n          ARCHIVE, and\n          CSV tables. For\n          MyISAM tables, it has the same\n          effect as myisamchk --recover\n          tbl_name by default. This\n          statement does not work with views.\n        \nREPAIR TABLE is supported for\n          partitioned tables. However, the USE_FRM\n          option cannot be used with this statement on a partitioned\n          table.\n        \n          You can use ALTER TABLE ... REPAIR\n          PARTITION to repair one or more partitions; for more\n          information, see Section\u00a015.1.9, \u201cALTER TABLE Statement\u201d, and\n          Section\u00a026.3.4, \u201cMaintenance of Partitions\u201d.\n\n",
        "\n\n\n\nREPAIR TABLE Options\n\n\n\n\n\n\nNO_WRITE_TO_BINLOG or\n              LOCAL\n\n              By default, the server writes REPAIR\n              TABLE statements to the binary log so that they\n              replicate to replicas. To suppress logging, specify the\n              optional NO_WRITE_TO_BINLOG keyword or\n              its alias LOCAL.\n            \nQUICK\n\n              If you use the QUICK option,\n              REPAIR TABLE tries to\n              repair only the index file, and not the data file. This\n              type of repair is like that done by myisamchk\n              --recover --quick.\n            \nEXTENDED\n\n              If you use the EXTENDED option, MySQL\n              creates the index row by row instead of creating one index\n              at a time with sorting. This type of repair is like that\n              done by myisamchk --safe-recover.\n            \nUSE_FRM\n\n              The USE_FRM option is available for use\n              if the .MYI index file is missing or\n              if its header is corrupted. This option tells MySQL not to\n              trust the information in the .MYI\n              file header and to re-create it using information from the\n              data dictionary. This kind of repair cannot be done with\n              myisamchk.\n\n\n\nCaution\n\n\n                Use the USE_FRM option\n                only if you cannot use regular\n                REPAIR modes. Telling the server to\n                ignore the .MYI file makes\n                important table metadata stored in the\n                .MYI unavailable to the repair\n                process, which can have deleterious consequences:\n\n\n\n                    The current AUTO_INCREMENT value\n                    is lost.\n                  \n                    The link to deleted records in the table is lost,\n                    which means that free space for deleted records\n                    remains unoccupied thereafter.\n                  \n                    The .MYI header indicates\n                    whether the table is compressed. If the server\n                    ignores this information, it cannot tell that a\n                    table is compressed and repair can cause change or\n                    loss of table contents. This means that\n                    USE_FRM should not be used with\n                    compressed tables. That should not be necessary,\n                    anyway: Compressed tables are read only, so they\n                    should not become corrupt.\n\n\n\n                If you use USE_FRM for a table that\n                was created by a different version of the MySQL server\n                than the one you are currently running,\n                REPAIR TABLE does not\n                attempt to repair the table. In this case, the result\n                set returned by REPAIR\n                TABLE contains a line with a\n                Msg_type value of\n                error and a\n                Msg_text value of Failed\n                repairing incompatible .FRM file.\n              \n                If USE_FRM is used,\n                REPAIR TABLE does not\n                check the table to see whether an upgrade is required.\n\n\n\n\n",
        "\n\n\n\nREPAIR TABLE Output\n\n\n\n\nREPAIR TABLE returns a result\n          set with the columns shown in the following table.\n\n\n\nColumn\nValue\n\nTable\nThe table name\n\nOp\nAlways repair\n\nMsg_type\nstatus, error,\n                info, note, or\n                warning\n\nMsg_text\nAn informational message\n\n\n\n          The REPAIR TABLE statement\n          might produce many rows of information for each repaired\n          table. The last row has a Msg_type value of\n          status and Msg_test\n          normally should be OK. For a\n          MyISAM table, if you do not get\n          OK, you should try repairing it with\n          myisamchk --safe-recover.\n          (REPAIR TABLE does not\n          implement all the options of myisamchk.\n          With myisamchk --safe-recover, you can also\n          use options that REPAIR TABLE\n          does not support, such as\n          --max-record-length.)\n        \nREPAIR TABLE table catches and\n          throws any errors that occur while copying table statistics\n          from the old corrupted file to the newly created file. For\n          example. if the user ID of the owner of the\n          .MYD or .MYI file is\n          different from the user ID of the mysqld\n          process, REPAIR TABLE generates\n          a \"cannot change ownership of the file\" error unless\n          mysqld is started by the\n          root user.\n\n",
        "\n\n\n\nTable Repair Considerations\n\n\n\n\n          You may be able to increase REPAIR\n          TABLE performance by setting certain system\n          variables. See Section\u00a010.6.3, \u201cOptimizing REPAIR TABLE Statements\u201d.\n        \nREPAIR TABLE upgrades a table\n          if it contains old temporal columns in pre-5.6.4 format;\n          namely, the TIME,\n          DATETIME, and\n          TIMESTAMP columns that lacked\n          support for fractional seconds precision.\n\n"
    ],
    "Examples": [],
    "Category": [
        "Database Administration Statements"
    ]
}