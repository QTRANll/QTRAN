{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/load-xml.html"
    ],
    "Title": [
        "15.2.10 LOAD XML Statement"
    ],
    "Feature": [
        "LOAD XML\n    [LOW_PRIORITY | CONCURRENT] [LOCAL]\n    INFILE 'file_name'\n    [REPLACE | IGNORE]\n    INTO TABLE [db_name.]tbl_name\n    [CHARACTER SET charset_name]\n    [ROWS IDENTIFIED BY '<tagname>']\n    [IGNORE number {LINES | ROWS}]\n    [(field_name_or_user_var\n        [, field_name_or_user_var] ...)]\n    [SET col_name={expr | DEFAULT}\n        [, col_name={expr | DEFAULT}] ...]"
    ],
    "Description": [
        "\n      The LOAD XML statement reads data\n      from an XML file into a table. The\n      file_name must be given as a literal\n      string. The tagname in the optional\n      ROWS IDENTIFIED BY clause must also be given as\n      a literal string, and must be surrounded by angle brackets\n      (< and >).\n    ",
        "\nLOAD XML acts as the complement of\n      running the mysql client in XML output mode\n      (that is, starting the client with the\n      --xml option). To write data from a\n      table to an XML file, you can invoke the mysql\n      client with the --xml and\n      -e options from\n      the system shell, as shown here:\n    ",
        "\n      To read the file back into a table, use LOAD\n      XML. By default, the <row>\n      element is considered to be the equivalent of a database table\n      row; this can be changed using the ROWS IDENTIFIED\n      BY clause.\n    ",
        "\n      This statement supports three different XML formats:\n",
        "\n\n          Column names as attributes and column values as attribute\n          values:\n        Press CTRL+C to copy <row column1=\"value1\" column2=\"value2\" .../>\n          Column names as tags and column values as the content of these\n          tags:\n        Press CTRL+C to copy <row>\n  <column1>value1</column1>\n  <column2>value2</column2>\n</row>\n          Column names are the name attributes of\n          <field> tags, and values are the\n          contents of these tags:\n        Press CTRL+C to copy <row>\n  <field name='column1'>value1</field>\n  <field name='column2'>value2</field>\n</row>\n          This is the format used by other MySQL tools, such as\n          mysqldump.\n\n",
        "\n      All three formats can be used in the same XML file; the import\n      routine automatically detects the format for each row and\n      interprets it correctly. Tags are matched based on the tag or\n      attribute name and the column name.\n    ",
        "\n      The following clauses work essentially the same way for\n      LOAD XML as they do for\n      LOAD DATA:\n",
        "\n\nLOW_PRIORITY or\n          CONCURRENT\n\nLOCAL\n\nREPLACE or IGNORE\n\nCHARACTER SET\n\nSET\n\n",
        "\n      See Section\u00a015.2.9, \u201cLOAD DATA Statement\u201d, for more information about these\n      clauses.\n    ",
        "\n(field_name_or_user_var,\n      ...) is a list of one or more comma-separated XML fields\n      or user variables. The name of a user variable used for this\n      purpose must match the name of a field from the XML file, prefixed\n      with @. You can use field names to select only\n      desired fields. User variables can be employed to store the\n      corresponding field values for subsequent re-use.\n    ",
        "\n      The IGNORE number\n      LINES or IGNORE\n      number ROWS clause causes the\n      first number rows in the XML file to be\n      skipped. It is analogous to the LOAD\n      DATA statement's IGNORE ... LINES\n      clause.\n    ",
        "\n      Suppose that we have a table named person,\n      created as shown here:\n    ",
        "Press CTRL+C to copy USE test;\n\nCREATE TABLE person (\n    person_id INT NOT NULL PRIMARY KEY,\n    fname VARCHAR(40) NULL,\n    lname VARCHAR(40) NULL,\n    created TIMESTAMP\n);",
        "\n      Suppose further that this table is initially empty.\n    ",
        "\n      Now suppose that we have a simple XML file\n      person.xml, whose contents are as shown here:\n    ",
        "\n      Each of the permissible XML formats discussed previously is\n      represented in this example file.\n    ",
        "\n      To import the data in person.xml into the\n      person table, you can use this statement:\n    ",
        "Press CTRL+C to copy mysql> LOAD XML LOCAL INFILE 'person.xml'\n    ->   INTO TABLE person\n    ->   ROWS IDENTIFIED BY '<person>';\n\nQuery OK, 8 rows affected (0.00 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0",
        "\n      Here, we assume that person.xml is located in\n      the MySQL data directory. If the file cannot be found, the\n      following error results:\n    ",
        "\n      The ROWS IDENTIFIED BY '<person>' clause\n      means that each <person> element in the\n      XML file is considered equivalent to a row in the table into which\n      the data is to be imported. In this case, this is the\n      person table in the test\n      database.\n    ",
        "\n      As can be seen by the response from the server, 8 rows were\n      imported into the test.person table. This can\n      be verified by a simple SELECT\n      statement:\n    ",
        "Press CTRL+C to copy mysql> SELECT * FROM person;\n+-----------+--------+------------+---------------------+\n| person_id | fname  | lname      | created             |\n+-----------+--------+------------+---------------------+\n|         1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|         2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|         3 | Likame | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|         4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|         5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|         6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|         7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|         8 | Sreraf | Encmelt    | 2007-07-13 16:18:47 |\n+-----------+--------+------------+---------------------+\n8 rows in set (0.00 sec)",
        "\n      This shows, as stated earlier in this section, that any or all of\n      the 3 permitted XML formats may appear in a single file and be\n      read using LOAD XML.\n    ",
        "\n      The inverse of the import operation just shown\u2014that is,\n      dumping MySQL table data into an XML file\u2014can be\n      accomplished using the mysql client from the\n      system shell, as shown here:\n    ",
        "\n\nNote\n\n\n        The --xml option causes the\n        mysql client to use XML formatting for its\n        output; the -e\n        option causes the client to execute the SQL statement\n        immediately following the option. See Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n\n",
        "\n      You can verify that the dump is valid by creating a copy of the\n      person table and importing the dump file into\n      the new table, like this:\n    ",
        "Press CTRL+C to copy mysql> USE test;\nmysql> CREATE TABLE person2 LIKE person;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> LOAD XML LOCAL INFILE 'person-dump.xml'\n    ->   INTO TABLE person2;\nQuery OK, 8 rows affected (0.01 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM person2;\n+-----------+--------+------------+---------------------+\n| person_id | fname  | lname      | created             |\n+-----------+--------+------------+---------------------+\n|         1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|         2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|         3 | Likema | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|         4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|         5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|         6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|         7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|         8 | Sreraf | Encmelt    | 2007-07-13 16:18:47 |\n+-----------+--------+------------+---------------------+\n8 rows in set (0.00 sec)",
        "\n      There is no requirement that every field in the XML file be\n      matched with a column in the corresponding table. Fields which\n      have no corresponding columns are skipped. You can see this by\n      first emptying the person2 table and dropping\n      the created column, then using the same\n      LOAD XML statement we just employed\n      previously, like this:\n    ",
        "Press CTRL+C to copy mysql> TRUNCATE person2;\nQuery OK, 8 rows affected (0.26 sec)\n\nmysql> ALTER TABLE person2 DROP COLUMN created;\nQuery OK, 0 rows affected (0.52 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE person2\\G\n*************************** 1. row ***************************\n       Table: person2\nCreate Table: CREATE TABLE `person2` (\n  `person_id` int NOT NULL,\n  `fname` varchar(40) DEFAULT NULL,\n  `lname` varchar(40) DEFAULT NULL,\n  PRIMARY KEY (`person_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)\n\nmysql> LOAD XML LOCAL INFILE 'person-dump.xml'\n    ->   INTO TABLE person2;\nQuery OK, 8 rows affected (0.01 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM person2;\n+-----------+--------+------------+\n| person_id | fname  | lname      |\n+-----------+--------+------------+\n|         1 | Kapek  | Sainnouine |\n|         2 | Sajon  | Rondela    |\n|         3 | Likema | \u00d6rrtmons   |\n|         4 | Slar   | Manlanth   |\n|         5 | Stoma  | Nilu       |\n|         6 | Nirtam | Skl\u00f6d      |\n|         7 | Sungam | Dulb\u00e5d     |\n|         8 | Sreraf | Encmelt    |\n+-----------+--------+------------+\n8 rows in set (0.00 sec)",
        "\n      The order in which the fields are given within each row of the XML\n      file does not affect the operation of LOAD\n      XML; the field order can vary from row to row, and is\n      not required to be in the same order as the corresponding columns\n      in the table.\n    ",
        "\n      As mentioned previously, you can use a\n      (field_name_or_user_var,\n      ...) list of one or more XML fields (to select desired\n      fields only) or user variables (to store the corresponding field\n      values for later use). User variables can be especially useful\n      when you want to insert data from an XML file into table columns\n      whose names do not match those of the XML fields. To see how this\n      works, we first create a table named individual\n      whose structure matches that of the person\n      table, but whose columns are named differently:\n    ",
        "Press CTRL+C to copy mysql> CREATE TABLE individual (\n    ->     individual_id INT NOT NULL PRIMARY KEY,\n    ->     name1 VARCHAR(40) NULL,\n    ->     name2 VARCHAR(40) NULL,\n    ->     made TIMESTAMP\n    -> );\nQuery OK, 0 rows affected (0.42 sec)",
        "\n      In this case, you cannot simply load the XML file directly into\n      the table, because the field and column names do not match:\n    ",
        "Press CTRL+C to copy mysql> LOAD XML INFILE '../bin/person-dump.xml' INTO TABLE test.individual;\nERROR 1263 (22004): Column set to default value; NULL supplied to NOT NULL column 'individual_id' at row 1",
        "\n      This happens because the MySQL server looks for field names\n      matching the column names of the target table. You can work around\n      this problem by selecting the field values into user variables,\n      then setting the target table's columns equal to the values\n      of those variables using SET. You can perform\n      both of these operations in a single statement, as shown here:\n    ",
        "Press CTRL+C to copy mysql> LOAD XML INFILE '../bin/person-dump.xml'\n    ->     INTO TABLE test.individual (@person_id, @fname, @lname, @created)\n    ->     SET individual_id=@person_id, name1=@fname, name2=@lname, made=@created;\nQuery OK, 8 rows affected (0.05 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM individual;\n+---------------+--------+------------+---------------------+\n| individual_id | name1  | name2      | made                |\n+---------------+--------+------------+---------------------+\n|             1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|             2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|             3 | Likema | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|             4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|             5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|             6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|             7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|             8 | Srraf  | Encmelt    | 2007-07-13 16:18:47 |\n+---------------+--------+------------+---------------------+\n8 rows in set (0.00 sec)",
        "\n      The names of the user variables must match\n      those of the corresponding fields from the XML file, with the\n      addition of the required @ prefix to indicate\n      that they are variables. The user variables need not be listed or\n      assigned in the same order as the corresponding fields.\n    ",
        "\n      Using a ROWS IDENTIFIED BY\n      '<tagname>' clause, it\n      is possible to import data from the same XML file into database\n      tables with different definitions. For this example, suppose that\n      you have a file named address.xml which\n      contains the following XML:\n    ",
        "\n      You can again use the test.person table as\n      defined previously in this section, after clearing all the\n      existing records from the table and then showing its structure as\n      shown here:\n    ",
        "Press CTRL+C to copy mysql< TRUNCATE person;\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql< SHOW CREATE TABLE person\\G\n*************************** 1. row ***************************\n       Table: person\nCreate Table: CREATE TABLE `person` (\n  `person_id` int(11) NOT NULL,\n  `fname` varchar(40) DEFAULT NULL,\n  `lname` varchar(40) DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`person_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)",
        "\n      Now create an address table in the\n      test database using the following\n      CREATE TABLE statement:\n    ",
        "Press CTRL+C to copy CREATE TABLE address (\n    address_id INT NOT NULL PRIMARY KEY,\n    person_id INT NULL,\n    street VARCHAR(40) NULL,\n    zip INT NULL,\n    city VARCHAR(40) NULL,\n    created TIMESTAMP\n);",
        "\n      To import the data from the XML file into the\n      person table, execute the following\n      LOAD XML statement, which specifies\n      that rows are to be specified by the\n      <person> element, as shown here;\n    ",
        "Press CTRL+C to copy mysql> LOAD XML LOCAL INFILE 'address.xml'\n    ->   INTO TABLE person\n    ->   ROWS IDENTIFIED BY '<person>';\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Deleted: 0  Skipped: 0  Warnings: 0",
        "\n      You can verify that the records were imported using a\n      SELECT statement:\n    ",
        "Press CTRL+C to copy mysql> SELECT * FROM person;\n+-----------+--------+-------+---------------------+\n| person_id | fname  | lname | created             |\n+-----------+--------+-------+---------------------+\n|         1 | Robert | Jones | 2007-07-24 17:37:06 |\n|         2 | Mary   | Smith | 2007-07-24 17:37:06 |\n+-----------+--------+-------+---------------------+\n2 rows in set (0.00 sec)",
        "\n      Since the <address> elements in the XML\n      file have no corresponding columns in the\n      person table, they are skipped.\n    ",
        "\n      To import the data from the <address>\n      elements into the address table, use the\n      LOAD XML statement shown here:\n    ",
        "Press CTRL+C to copy mysql> LOAD XML LOCAL INFILE 'address.xml'\n    ->   INTO TABLE address\n    ->   ROWS IDENTIFIED BY '<address>';\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Deleted: 0  Skipped: 0  Warnings: 0",
        "\n      You can see that the data was imported using a\n      SELECT statement such as this one:\n    ",
        "Press CTRL+C to copy mysql> SELECT * FROM address;\n+------------+-----------+-----------------+-------+--------------+---------------------+\n| address_id | person_id | street          | zip   | city         | created             |\n+------------+-----------+-----------------+-------+--------------+---------------------+\n|          1 |         1 | Mill Creek Road | 45365 | Sidney       | 2007-07-24 17:37:37 |\n|          2 |         1 | Main Street     | 28681 | Taylorsville | 2007-07-24 17:37:37 |\n|          3 |         2 | River Road      | 80239 | Denver       | 2007-07-24 17:37:37 |\n+------------+-----------+-----------------+-------+--------------+---------------------+\n3 rows in set (0.00 sec)",
        "\n      The data from the <address> element that\n      is enclosed in XML comments is not imported. However, since there\n      is a person_id column in the\n      address table, the value of the\n      person_id attribute from the parent\n      <person> element for each\n      <address> is\n      imported into the address table.\n    ",
        "Security Considerations.\u00a0\n        As with the LOAD DATA statement,\n        the transfer of the XML file from the client host to the server\n        host is initiated by the MySQL server. In theory, a patched\n        server could be built that would tell the client program to\n        transfer a file of the server's choosing rather than the file\n        named by the client in the LOAD\n        XML statement. Such a server could access any file on\n        the client host to which the client user has read access.\n      ",
        "\n      In a Web environment, clients usually connect to MySQL from a Web\n      server. A user that can run any command against the MySQL server\n      can use LOAD XML\n      LOCAL to read any files to which the Web server process\n      has read access. In this environment, the client with respect to\n      the MySQL server is actually the Web server, not the remote\n      program being run by the user who connects to the Web server.\n    ",
        "\n      You can disable loading of XML files from clients by starting the\n      server with --local-infile=0 or\n      --local-infile=OFF. This option\n      can also be used when starting the mysql client\n      to disable LOAD XML for the\n      duration of the client session.\n    ",
        "\n      To prevent a client from loading XML files from the server, do not\n      grant the FILE privilege to the\n      corresponding MySQL user account, or revoke this privilege if the\n      client user account already has it.\n",
        "\n\nImportant\n\n\n        Revoking the FILE privilege (or\n        not granting it in the first place) keeps the user only from\n        executing the LOAD XML statement\n        (as well as the LOAD_FILE()\n        function; it does not prevent the user from\n        executing LOAD XML\n        LOCAL. To disallow this statement, you must start the\n        server or the client with --local-infile=OFF.\n      \n        In other words, the FILE\n        privilege affects only whether the client can read files on the\n        server; it has no bearing on whether the client can read files\n        on the local file system.\n\n"
    ],
    "Examples": [
        "USE test;\n\nCREATE TABLE person (\n    person_id INT NOT NULL PRIMARY KEY,\n    fname VARCHAR(40) NULL,\n    lname VARCHAR(40) NULL,\n    created TIMESTAMP\n);",
        "mysql> LOAD XML LOCAL INFILE 'person.xml'\n    ->   INTO TABLE person\n    ->   ROWS IDENTIFIED BY '<person>';\n\nQuery OK, 8 rows affected (0.00 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0",
        "mysql> SELECT * FROM person;\n+-----------+--------+------------+---------------------+\n| person_id | fname  | lname      | created             |\n+-----------+--------+------------+---------------------+\n|         1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|         2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|         3 | Likame | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|         4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|         5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|         6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|         7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|         8 | Sreraf | Encmelt    | 2007-07-13 16:18:47 |\n+-----------+--------+------------+---------------------+\n8 rows in set (0.00 sec)",
        "mysql> USE test;\nmysql> CREATE TABLE person2 LIKE person;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> LOAD XML LOCAL INFILE 'person-dump.xml'\n    ->   INTO TABLE person2;\nQuery OK, 8 rows affected (0.01 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM person2;\n+-----------+--------+------------+---------------------+\n| person_id | fname  | lname      | created             |\n+-----------+--------+------------+---------------------+\n|         1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|         2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|         3 | Likema | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|         4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|         5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|         6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|         7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|         8 | Sreraf | Encmelt    | 2007-07-13 16:18:47 |\n+-----------+--------+------------+---------------------+\n8 rows in set (0.00 sec)",
        "mysql> TRUNCATE person2;\nQuery OK, 8 rows affected (0.26 sec)\n\nmysql> ALTER TABLE person2 DROP COLUMN created;\nQuery OK, 0 rows affected (0.52 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE person2\\G\n*************************** 1. row ***************************\n       Table: person2\nCreate Table: CREATE TABLE `person2` (\n  `person_id` int NOT NULL,\n  `fname` varchar(40) DEFAULT NULL,\n  `lname` varchar(40) DEFAULT NULL,\n  PRIMARY KEY (`person_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)\n\nmysql> LOAD XML LOCAL INFILE 'person-dump.xml'\n    ->   INTO TABLE person2;\nQuery OK, 8 rows affected (0.01 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM person2;\n+-----------+--------+------------+\n| person_id | fname  | lname      |\n+-----------+--------+------------+\n|         1 | Kapek  | Sainnouine |\n|         2 | Sajon  | Rondela    |\n|         3 | Likema | \u00d6rrtmons   |\n|         4 | Slar   | Manlanth   |\n|         5 | Stoma  | Nilu       |\n|         6 | Nirtam | Skl\u00f6d      |\n|         7 | Sungam | Dulb\u00e5d     |\n|         8 | Sreraf | Encmelt    |\n+-----------+--------+------------+\n8 rows in set (0.00 sec)",
        "mysql> CREATE TABLE individual (\n    ->     individual_id INT NOT NULL PRIMARY KEY,\n    ->     name1 VARCHAR(40) NULL,\n    ->     name2 VARCHAR(40) NULL,\n    ->     made TIMESTAMP\n    -> );\nQuery OK, 0 rows affected (0.42 sec)",
        "mysql> LOAD XML INFILE '../bin/person-dump.xml' INTO TABLE test.individual;\nERROR 1263 (22004): Column set to default value; NULL supplied to NOT NULL column 'individual_id' at row 1",
        "mysql> LOAD XML INFILE '../bin/person-dump.xml'\n    ->     INTO TABLE test.individual (@person_id, @fname, @lname, @created)\n    ->     SET individual_id=@person_id, name1=@fname, name2=@lname, made=@created;\nQuery OK, 8 rows affected (0.05 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM individual;\n+---------------+--------+------------+---------------------+\n| individual_id | name1  | name2      | made                |\n+---------------+--------+------------+---------------------+\n|             1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|             2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|             3 | Likema | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|             4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|             5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|             6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|             7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|             8 | Srraf  | Encmelt    | 2007-07-13 16:18:47 |\n+---------------+--------+------------+---------------------+\n8 rows in set (0.00 sec)",
        "mysql< TRUNCATE person;\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql< SHOW CREATE TABLE person\\G\n*************************** 1. row ***************************\n       Table: person\nCreate Table: CREATE TABLE `person` (\n  `person_id` int(11) NOT NULL,\n  `fname` varchar(40) DEFAULT NULL,\n  `lname` varchar(40) DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`person_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)",
        "CREATE TABLE address (\n    address_id INT NOT NULL PRIMARY KEY,\n    person_id INT NULL,\n    street VARCHAR(40) NULL,\n    zip INT NULL,\n    city VARCHAR(40) NULL,\n    created TIMESTAMP\n);",
        "mysql> LOAD XML LOCAL INFILE 'address.xml'\n    ->   INTO TABLE person\n    ->   ROWS IDENTIFIED BY '<person>';\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Deleted: 0  Skipped: 0  Warnings: 0",
        "mysql> SELECT * FROM person;\n+-----------+--------+-------+---------------------+\n| person_id | fname  | lname | created             |\n+-----------+--------+-------+---------------------+\n|         1 | Robert | Jones | 2007-07-24 17:37:06 |\n|         2 | Mary   | Smith | 2007-07-24 17:37:06 |\n+-----------+--------+-------+---------------------+\n2 rows in set (0.00 sec)",
        "mysql> LOAD XML LOCAL INFILE 'address.xml'\n    ->   INTO TABLE address\n    ->   ROWS IDENTIFIED BY '<address>';\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Deleted: 0  Skipped: 0  Warnings: 0",
        "mysql> SELECT * FROM address;\n+------------+-----------+-----------------+-------+--------------+---------------------+\n| address_id | person_id | street          | zip   | city         | created             |\n+------------+-----------+-----------------+-------+--------------+---------------------+\n|          1 |         1 | Mill Creek Road | 45365 | Sidney       | 2007-07-24 17:37:37 |\n|          2 |         1 | Main Street     | 28681 | Taylorsville | 2007-07-24 17:37:37 |\n|          3 |         2 | River Road      | 80239 | Denver       | 2007-07-24 17:37:37 |\n+------------+-----------+-----------------+-------+--------------+---------------------+\n3 rows in set (0.00 sec)"
    ],
    "Category": [
        "Data Manipulation Statements"
    ]
}