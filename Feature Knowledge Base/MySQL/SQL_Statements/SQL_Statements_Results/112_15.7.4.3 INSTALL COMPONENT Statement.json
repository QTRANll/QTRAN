{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/install-component.html"
    ],
    "Title": [
        "15.7.4.3 INSTALL COMPONENT Statement"
    ],
    "Feature": [
        "INSTALL COMPONENT component_name  [, component_name ...\n     [SET variable = expr [, variable = expr] ...] \n  \n  variable: {\n    {GLOBAL | @@GLOBAL.} [component_prefix.]system_var_name\n  | {PERSIST | @@PERSIST.} [component_prefix.]system_var_name\n}"
    ],
    "Description": [
        "\n        This statement installs one or more components, which become\n        active immediately. A component provides services that are\n        available to the server and other components; see\n        Section\u00a07.5, \u201cMySQL Components\u201d. INSTALL\n        COMPONENT requires the\n        INSERT privilege for the\n        mysql.component system table because it adds\n        a row to that table to register the component.\n      ",
        "\n        Example:\n      ",
        "Press CTRL+C to copy INSTALL COMPONENT 'file://component1', 'file://component2';",
        "\n        A component is named using a URN that begins with\n        file:// and indicates the base name of the\n        library file that implements the component, located in the\n        directory named by the\n        plugin_dir system variable.\n        Component names do not include any platform-dependent file name\n        suffix such as .so or\n        .dll. (These naming details are subject to\n        change because component name interpretation is itself performed\n        by a service and the component infrastructure makes it possible\n        to replace the default service implementation with alternative\n        implementations.)\n      ",
        "\nINSTALL COMPONENT permits setting\n        the values of component system variables when you install one or\n        more components. The SET clause enables you\n        to specify variable values precisely when they are needed,\n        without the inconvenience or limitations associated with other\n        forms of assignment. Specifically, you can also set component\n        variables with these alternatives:\n",
        "\n\n            At server startup using options on the command line or in an\n            option file, but doing so involves a server restart. The\n            values do not take effect until you install the component.\n            You can specify an invalid variable name for a component on\n            the command line without triggering an error.\n          \n            Dynamically while the server is running by means of the\n            SET statement, which enables\n            you to modify operation of the server without having to stop\n            and restart it. Setting a read-only variable is not\n            permitted.\n\n",
        "\n        The optional SET clause applies a value, or\n        values, only to the component specified in the\n        INSTALL COMPONENT statement,\n        rather than to all subsequent installations of that component.\n        SET GLOBAL|PERSIST works for all types of\n        variables, including read-only variables, without having to\n        restart the server. A component system variable that you set\n        using INSTALL COMPONENT takes\n        precedence over any conflicting value coming from the command\n        line or an option file.\n      ",
        "\n        Example:\n      ",
        "Press CTRL+C to copy INSTALL COMPONENT 'file://component1', 'file://component2' \n    SET GLOBAL component1.var1 = 12 + 3, PERSIST component2.var2 = 'strings';",
        "\n        Omitting PERSIST or GLOBAL\n        is equivalent to specifying GLOBAL.\n      ",
        "\n        Specifying PERSIST for any variable in\n        SET silently executes SET\n        PERSIST_ONLY immediately after\n        INSTALL COMPONENT loads the\n        components, but before updating the\n        mysql.component table. If SET\n        PERSIST_ONLY fails, then the server unloads all of the\n        previously loaded new components without persisting anything to\n        mysql.component.\n      ",
        "\n        The SET clause accepts only valid variable\n        names of the component being installed and emits an error\n        message for all invalid names. Subqueries, stored functions, and\n        aggregate functions are not permitted as part of the value\n        expression. If you install a single component, it is not\n        necessary to prefix the variable name with the component name.\n",
        "\n\nNote\n\n\n          While specifying a variable value using the\n          SET clause is similar to that of the\n          command line\u2014it is available immediately at variable\n          registration\u2014there is a distinct difference in how the\n          SET clause handles invalid\n          numerical values for boolean variables. For\n          example, if you set a boolean variable to 11\n          (component1.boolvar = 11), you see the\n          following behavior:\n\n\n\nSET clause yields true\n            \n              Command line yields false (11 is neither ON nor 1)\n\n\n",
        "\n        If any error occurs, the statement fails and has no effect. For\n        example, this happens if a component name is erroneous, a named\n        component does not exist or is already installed, or component\n        initialization fails.\n      ",
        "\n        A loader service handles component loading, which includes\n        adding installed components to the\n        mysql.component system table that serves as a\n        registry. For subsequent server restarts, any components listed\n        in mysql.component are loaded by the loader\n        service during the startup sequence. This occurs even if the\n        server is started with the\n        --skip-grant-tables option.\n      ",
        "\n        If a component depends on services not present in the registry\n        and you attempt to install the component without also installing\n        the component or components that provide the services on which\n        it depends, an error occurs:\n      ",
        "\n        To avoid this problem, either install all components in the same\n        statement, or install the dependent component after installing\n        any components on which it depends.\n",
        "\n\nNote\n\n\n          For keyring components, do not use\n          INSTALL COMPONENT. Instead,\n          configure keyring component loading using a manifest file. See\n          Section\u00a08.4.4.2, \u201cKeyring Component Installation\u201d.\n\n"
    ],
    "Examples": [
        "INSTALL COMPONENT 'file://component1', 'file://component2';",
        "INSTALL COMPONENT 'file://component1', 'file://component2' \n    SET GLOBAL component1.var1 = 12 + 3, PERSIST component2.var2 = 'strings';"
    ],
    "Category": [
        "Database Administration Statements"
    ]
}