{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/grant.html"
    ],
    "Title": [
        "15.7.1.6 GRANT Statement"
    ],
    "Feature": [
        "GRANT\n    priv_type [(column_list)]\n      [, priv_type [(column_list)]] ...\n    ON [object_type] priv_level\n    TO user_or_role [, user_or_role] ...\n    [WITH GRANT OPTION]\n    [AS user\n        [WITH ROLE\n            DEFAULT\n          | NONE\n          | ALL\n          | ALL EXCEPT role [, role ] ...\n          | role [, role ] ...\n        ]\n    ]\n}\n\nGRANT PROXY ON user_or_role\n    TO user_or_role [, user_or_role] ...\n    [WITH GRANT OPTION]\n\nGRANT role [, role] ...\n    TO user_or_role [, user_or_role] ...\n    [WITH ADMIN OPTION]\n\nobject_type: {\n    TABLE\n  | FUNCTION\n  | PROCEDURE\n}\n\npriv_level: {\n    *\n  | *.*\n  | db_name.*\n  | db_name.tbl_name\n  | tbl_name\n  | db_name.routine_name\n}\n\nuser_or_role: {\n    user (see Section 8.2.4, \u201cSpecifying Account Names\u201d)\n  | role (see Section 8.2.5, \u201cSpecifying Role Names\u201d)\n}"
    ],
    "Description": [
        "\n        The GRANT statement assigns\n        privileges and roles to MySQL user accounts and roles. There are\n        several aspects to the GRANT\n        statement, described under the following topics:\n",
        "\nGRANT General OverviewObject Quoting GuidelinesAccount NamesPrivileges Supported by MySQLGlobal PrivilegesDatabase PrivilegesTable PrivilegesColumn PrivilegesStored Routine PrivilegesProxy User PrivilegesGranting RolesThe AS Clause and Privilege RestrictionsOther Account CharacteristicsMySQL and Standard SQL Versions of GRANT\n",
        "\n\n\n\nGRANT General Overview\n\n\n\n\n          The GRANT statement enables\n          system administrators to grant privileges and roles, which can\n          be granted to user accounts and roles. These syntax\n          restrictions apply:\n\n\n\nGRANT cannot mix granting\n              both privileges and roles in the same statement. A given\n              GRANT statement must grant\n              either privileges or roles.\n            \n              The ON clause distinguishes whether the\n              statement grants privileges or roles:\n\n\n\n                  With ON, the statement grants\n                  privileges.\n                \n                  Without ON, the statement grants\n                  roles.\n                \n                  It is permitted to assign both privileges and roles to\n                  an account, but you must use separate\n                  GRANT statements, each\n                  with syntax appropriate to what is to be granted.\n\n\n\n\n\n          For more information about roles, see Section\u00a08.2.10, \u201cUsing Roles\u201d.\n        \n          To grant a privilege with\n          GRANT, you must have the\n          GRANT OPTION privilege, and you\n          must have the privileges that you are granting.\n          (Alternatively, if you have the\n          UPDATE privilege for the grant\n          tables in the mysql system schema, you can\n          grant any account any privilege.) When the\n          read_only system variable is\n          enabled, GRANT additionally\n          requires the CONNECTION_ADMIN\n          privilege (or the deprecated\n          SUPER privilege).\n        \nGRANT either succeeds for all\n          named users and roles or rolls back and has no effect if any\n          error occurs. The statement is written to the binary log only\n          if it succeeds for all named users and roles.\n        \n          The REVOKE statement is related\n          to GRANT and enables\n          administrators to remove account privileges. See\n          Section\u00a015.7.1.8, \u201cREVOKE Statement\u201d.\n        \n          Each account name uses the format described in\n          Section\u00a08.2.4, \u201cSpecifying Account Names\u201d. Each role name uses the\n          format described in Section\u00a08.2.5, \u201cSpecifying Role Names\u201d. For example:\n        Press CTRL+C to copy GRANT ALL ON db1.* TO 'jeffrey'@'localhost';\nGRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';\nGRANT SELECT ON world.* TO 'role3';\n          The host name part of the account or role name, if omitted,\n          defaults to '%'.\n        \n          Normally, a database administrator first uses\n          CREATE USER to create an\n          account and define its nonprivilege characteristics such as\n          its password, whether it uses secure connections, and limits\n          on access to server resources, then uses\n          GRANT to define its privileges.\n          ALTER USER may be used to\n          change the nonprivilege characteristics of existing accounts.\n          For example:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL ON db1.* TO 'jeffrey'@'localhost';\nGRANT SELECT ON db2.invoice TO 'jeffrey'@'localhost';\nALTER USER 'jeffrey'@'localhost' WITH MAX_QUERIES_PER_HOUR 90;\n          From the mysql program,\n          GRANT responds with\n          Query OK, 0 rows affected when executed\n          successfully. To determine what privileges result from the\n          operation, use SHOW GRANTS. See\n          Section\u00a015.7.7.22, \u201cSHOW GRANTS Statement\u201d.\n\n\n\nImportant\n\n\n            Under some circumstances,\n            GRANT may be recorded in\n            server logs or on the client side in a history file such as\n            ~/.mysql_history, which means that\n            cleartext passwords may be read by anyone having read access\n            to that information. For information about the conditions\n            under which this occurs for the server logs and how to\n            control it, see Section\u00a08.1.2.3, \u201cPasswords and Logging\u201d. For\n            similar information about client-side logging, see\n            Section\u00a06.5.1.3, \u201cmysql Client Logging\u201d.\n\n\n\nGRANT supports host names up to\n          255 characters long. User names can be up to 32 characters.\n          Database, table, column, and routine names can be up to 64\n          characters.\n\n\n\nWarning\n\n\nDo not attempt to change the permissible length\n            for user names by altering the mysql.user\n            system table. Doing so results in unpredictable behavior\n            which may even make it impossible for users to log in to the\n            MySQL server. Never alter the structure of tables\n            in the mysql system schema in any manner\n            except by means of the procedure described in\n            Chapter\u00a03, Upgrading MySQL.\n\n\n",
        "\n\n\n\nObject Quoting Guidelines\n\n\n\n\n          Several objects within GRANT\n          statements are subject to quoting, although quoting is\n          optional in many cases: Account, role, database, table,\n          column, and routine names. For example, if a\n          user_name or\n          host_name value in an account name\n          is legal as an unquoted identifier, you need not quote it.\n          However, quotation marks are necessary to specify a\n          user_name string containing special\n          characters (such as -), or a\n          host_name string containing special\n          characters or wildcard characters such as %\n          (for example, 'test-user'@'%.com'). Quote\n          the user name and host name separately.\n        \n          To specify quoted values:\n\n\n\n              Quote database, table, column, and routine names as\n              identifiers.\n            \n              Quote user names and host names as identifiers or as\n              strings.\n            \n              Quote passwords as strings.\n\n\n\n          For string-quoting and identifier-quoting guidelines, see\n          Section\u00a011.1.1, \u201cString Literals\u201d, and\n          Section\u00a011.2, \u201cSchema Object Names\u201d.\n\n\n\nImportant\n\n\n            The use of the wildcard characters % and\n            _ as described in the next few paragraphs\n            is deprecated, and thus subject to removal in a future\n            version of MySQL.\n\n\n\n          The _ and % wildcards\n          are permitted when specifying database names in\n          GRANT statements that grant\n          privileges at the database level (GRANT ... ON\n          db_name.*). This means,\n          for example, that to use a _ character as\n          part of a database name, specify it using the\n          \\ escape character as \\_\n          in the GRANT statement, to\n          prevent the user from being able to access additional\n          databases matching the wildcard pattern (for example,\n          GRANT ... ON `foo\\_bar`.* TO ...).\n        \n          Issuing multiple GRANT statements\n          containing wildcards may not have the expected effect on DML\n          statements; when resolving grants involving wildcards, MySQL\n          takes only the first matching grant into consideration. In\n          other words, if a user has two database-level grants using\n          wildcards that match the same database, the grant which was\n          created first is applied. Consider the database\n          db and table t created\n          using the statements shown here:\n        Press CTRL+C to copy mysql> CREATE DATABASE db;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> CREATE TABLE db.t (c INT);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> INSERT INTO db.t VALUES ROW(1);\nQuery OK, 1 row affected (0.00 sec)\n          Next (assuming that the current account is the MySQL\n          root account or another account having the\n          necessary privileges), we create a user u\n          then issue two GRANT statements containing\n          wildcards, like this:\n        Press CTRL+C to copy mysql> CREATE USER u;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> GRANT SELECT ON `d_`.* TO u;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> GRANT INSERT ON `d%`.* TO u;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> EXITPress CTRL+C to copy Bye\n          If we end the session and then log in again with the\n          mysql client, this time as\n          u, we see that this account has only the\n          privilege provided by the first matching grant, but not the\n          second:\n        Press CTRL+C to copy $> mysql -uu -hlocalhostPress CTRL+C to copy Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 10\nServer version: 8.4.0-tr Source distribution\n\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input\nstatement.\n\nmysql> TABLE db.t;\n+------+\n| c    |\n+------+\n|    1 |\n+------+\n1 row in set (0.00 sec)\n\nmysql> INSERT INTO db.t VALUES ROW(2);\nERROR 1142 (42000): INSERT command denied to user 'u'@'localhost' for table 't'\n          In privilege assignments, MySQL interprets occurrences of\n          unescaped _ and % SQL\n          wildcard characters in database names as literal characters\n          under these circumstances:\n\n\n\n              When a database name is not used to grant privileges at\n              the database level, but as a qualifier for granting\n              privileges to some other object such as a table or routine\n              (for example, GRANT ... ON\n              db_name.tbl_name).\n            \n              Enabling partial_revokes\n              causes MySQL to interpret unescaped _\n              and % wildcard characters in database\n              names as literal characters, just as if they had been\n              escaped as \\_ and\n              \\%. Because this changes how MySQL\n              interprets privileges, it may be advisable to avoid\n              unescaped wildcard characters in privilege assignments for\n              installations where\n              partial_revokes may be\n              enabled. For more information, see\n              Section\u00a08.2.12, \u201cPrivilege Restriction Using Partial Revokes\u201d.\n\n\n",
        "\n\n\n\nAccount Names\n\n\n\n\n          A user value in a\n          GRANT statement indicates a\n          MySQL account to which the statement applies. To accommodate\n          granting rights to users from arbitrary hosts, MySQL supports\n          specifying the user value in the\n          form\n          'user_name'@'host_name'.\n        \n          You can specify wildcards in the host name. For example,\n          'user_name'@'%.example.com'\n          applies to user_name for any host\n          in the example.com domain, and\n          'user_name'@'198.51.100.%'\n          applies to user_name for any host\n          in the 198.51.100 class C subnet.\n        \n          The simple form\n          'user_name' is a\n          synonym for\n          'user_name'@'%'.\n\n\n\nNote\n\n\n            MySQL automatically assigns all privileges granted to\n            'username'@'%'\n            to the\n            'username'@'localhost'\n            account as well. This behavior is deprecated, and is subject\n            to removal in a future version of MySQL.\n\n\n\nMySQL does not support wildcards in user\n          names. To refer to an anonymous user, specify an\n          account with an empty user name with the\n          GRANT statement:\n        Press CTRL+C to copy GRANT ALL ON test.* TO ''@'localhost' ...;\n          In this case, any user who connects from the local host with\n          the correct password for the anonymous user is permitted\n          access, with the privileges associated with the anonymous-user\n          account.\n        \n          For additional information about user name and host name\n          values in account names, see Section\u00a08.2.4, \u201cSpecifying Account Names\u201d.\n\n\n\nWarning\n\n\n            If you permit local anonymous users to connect to the MySQL\n            server, you should also grant privileges to all local users\n            as\n            'user_name'@'localhost'.\n            Otherwise, the anonymous user account for\n            localhost in the\n            mysql.user system table is used when\n            named users try to log in to the MySQL server from the local\n            machine. For details, see\n            Section\u00a08.2.6, \u201cAccess Control, Stage 1: Connection Verification\u201d.\n          \n            To determine whether this issue applies to you, execute the\n            following query, which lists any anonymous users:\n          Press CTRL+C to copy SELECT Host, User FROM mysql.user WHERE User='';\n            To avoid the problem just described, delete the local\n            anonymous user account using this statement:\n          Press CTRL+C to copy DROP USER ''@'localhost';\n\n",
        "\n\n\n\nPrivileges Supported by MySQL\n\n\n\n\n          The following tables summarize the permissible static and\n          dynamic priv_type privilege types\n          that can be specified for the\n          GRANT and\n          REVOKE statements, and the\n          levels at which each privilege can be granted. For additional\n          information about each privilege, see\n          Section\u00a08.2.2, \u201cPrivileges Provided by MySQL\u201d. For information about\n          the differences between static and dynamic privileges, see\n          Static Versus Dynamic Privileges.\n\n\nTable\u00a015.11\u00a0Permissible Static Privileges for GRANT and REVOKE\n\n\nPrivilege\nMeaning and Grantable Levels\n\nALL [PRIVILEGES]\nGrant all privileges at specified access level except\n                GRANT OPTION and\n                PROXY.\n\nALTER\nEnable use of ALTER TABLE. Levels:\n                Global, database, table.\n\nALTER ROUTINE\nEnable stored routines to be altered or dropped. Levels: Global,\n                database, routine.\n\nCREATE\nEnable database and table creation. Levels: Global, database, table.\n\nCREATE ROLE\nEnable role creation. Level: Global.\n\nCREATE ROUTINE\nEnable stored routine creation. Levels: Global, database.\n\nCREATE TABLESPACE\nEnable tablespaces and log file groups to be created, altered, or\n                dropped. Level: Global.\n\nCREATE TEMPORARY TABLES\nEnable use of CREATE\n                TEMPORARY TABLE. Levels: Global, database.\n\nCREATE USER\nEnable use of CREATE USER,\n                DROP USER,\n                RENAME USER, and\n                REVOKE ALL\n                PRIVILEGES. Level: Global.\n\nCREATE VIEW\nEnable views to be created or altered. Levels: Global, database, table.\n\nDELETE\nEnable use of DELETE. Level: Global,\n                database, table.\n\nDROP\nEnable databases, tables, and views to be dropped. Levels: Global,\n                database, table.\n\nDROP ROLE\nEnable roles to be dropped. Level: Global.\n\nEVENT\nEnable use of events for the Event Scheduler. Levels: Global, database.\n\nEXECUTE\nEnable the user to execute stored routines. Levels: Global, database,\n                routine.\n\nFILE\nEnable the user to cause the server to read or write files. Level:\n                Global.\n\nFLUSH_PRIVILEGES\nEnable the user to issue FLUSH\n                PRIVILEGES statements. Level: Global.\n\nGRANT OPTION\nEnable privileges to be granted to or removed from other accounts.\n                Levels: Global, database, table, routine, proxy.\n\nINDEX\nEnable indexes to be created or dropped. Levels: Global, database,\n                table.\n\nINSERT\nEnable use of INSERT. Levels: Global,\n                database, table, column.\n\nLOCK TABLES\nEnable use of LOCK TABLES on tables for\n                which you have the SELECT\n                privilege. Levels: Global, database.\n\nOPTIMIZE_LOCAL_TABLE\nEnable use of OPTIMIZE\n                LOCAL TABLE or OPTIMIZE\n                NO_WRITE_TO_BINLOG TABLE. Levels: Global,\n                database, table.\n\nPROCESS\nEnable the user to see all processes with SHOW\n                PROCESSLIST. Level: Global.\n\nPROXY\nEnable user proxying. Level: From user to user.\n\nREFERENCES\nEnable foreign key creation. Levels: Global, database, table, column.\n\nRELOAD\nEnable use of FLUSH operations. Level:\n                Global.\n\nREPLICATION CLIENT\nEnable the user to ask where source or replica servers are. Level:\n                Global.\n\nREPLICATION SLAVE\nEnable replicas to read binary log events from the source. Level:\n                Global.\n\nSELECT\nEnable use of SELECT. Levels: Global,\n                database, table, column.\n\nSHOW DATABASES\nEnable SHOW DATABASES to show all\n                databases. Level: Global.\n\nSHOW VIEW\nEnable use of SHOW CREATE VIEW. Levels:\n                Global, database, table.\n\nSHUTDOWN\nEnable use of mysqladmin shutdown. Level: Global.\n\nSUPER\nEnable use of other administrative operations such as\n                CHANGE REPLICATION SOURCE\n                TO, KILL,\n                PURGE BINARY LOGS,\n                SET\n                GLOBAL, and mysqladmin\n                debug command. Level: Global.\n\nTRIGGER\nEnable trigger operations. Levels: Global, database, table.\n\nUPDATE\nEnable use of UPDATE. Levels: Global,\n                database, table, column.\n\nUSAGE\nSynonym for \u201cno privileges\u201d\n\n\nPrivilege\nMeaning and Grantable Levels\n\n\n\n\nTable\u00a015.12\u00a0Permissible Dynamic Privileges for GRANT and REVOKE\n\n\nPrivilege\nMeaning and Grantable Levels\n\nAPPLICATION_PASSWORD_ADMIN\nEnable dual password administration. Level: Global.\n\nAUDIT_ABORT_EXEMPT\nAllow queries blocked by audit log filter. Level: Global.\n\nAUDIT_ADMIN\nEnable audit log configuration. Level: Global.\n\nAUTHENTICATION_POLICY_ADMIN\nEnable authentication policy administration. Level: Global.\n\nBACKUP_ADMIN\nEnable backup administration. Level: Global.\n\nBINLOG_ADMIN\nEnable binary log control. Level: Global.\n\nBINLOG_ENCRYPTION_ADMIN\nEnable activation and deactivation of binary log encryption. Level:\n                Global.\n\nCLONE_ADMIN\nEnable clone administration. Level: Global.\n\nCONNECTION_ADMIN\nEnable connection limit/restriction control. Level: Global.\n\nENCRYPTION_KEY_ADMIN\nEnable InnoDB key rotation. Level: Global.\n\nFIREWALL_ADMIN\nEnable firewall rule administration, any user. Level: Global.\n\nFIREWALL_EXEMPT\nExempt user from firewall restrictions. Level: Global.\n\nFIREWALL_USER\nEnable firewall rule administration, self. Level: Global.\n\nFLUSH_OPTIMIZER_COSTS\nEnable optimizer cost reloading. Level: Global.\n\nFLUSH_STATUS\nEnable status indicator flushing. Level: Global.\n\nFLUSH_TABLES\nEnable table flushing. Level: Global.\n\nFLUSH_USER_RESOURCES\nEnable user-resource flushing. Level: Global.\n\nGROUP_REPLICATION_ADMIN\nEnable Group Replication control. Level: Global.\n\nINNODB_REDO_LOG_ARCHIVE\nEnable redo log archiving administration. Level: Global.\n\nINNODB_REDO_LOG_ENABLE\nEnable or disable redo logging. Level: Global.\n\nNDB_STORED_USER\nEnable sharing of user or role between SQL nodes (NDB Cluster). Level:\n                Global.\n\nPASSWORDLESS_USER_ADMIN\nEnable passwordless user account administration. Level: Global.\n\nPERSIST_RO_VARIABLES_ADMIN\nEnable persisting read-only system variables. Level: Global.\n\nREPLICATION_APPLIER\nAct as the PRIVILEGE_CHECKS_USER for a replication\n                channel. Level: Global.\n\nREPLICATION_SLAVE_ADMIN\nEnable regular replication control. Level: Global.\n\nRESOURCE_GROUP_ADMIN\nEnable resource group administration. Level: Global.\n\nRESOURCE_GROUP_USER\nEnable resource group administration. Level: Global.\n\nROLE_ADMIN\nEnable roles to be granted or revoked, use of WITH ADMIN\n                OPTION. Level: Global.\n\nSESSION_VARIABLES_ADMIN\nEnable setting restricted session system variables. Level: Global.\n\nSHOW_ROUTINE\nEnable access to stored routine definitions. Level: Global.\n\nSKIP_QUERY_REWRITE\nDo not rewrite queries executed by this user. Level: Global.\n\nSYSTEM_USER\nDesignate account as system account. Level: Global.\n\nSYSTEM_VARIABLES_ADMIN\nEnable modifying or persisting global system variables. Level: Global.\n\nTABLE_ENCRYPTION_ADMIN\nEnable overriding default encryption settings. Level: Global.\n\nTELEMETRY_LOG_ADMIN\nEnable telemetry log configuration for HeatWave on AWS. Level: Global.\n\nTP_CONNECTION_ADMIN\nEnable thread pool connection administration. Level: Global.\n\nVERSION_TOKEN_ADMIN\nEnable use of Version Tokens functions. Level: Global.\n\nXA_RECOVER_ADMIN\nEnable XA\n                RECOVER execution. Level: Global.\n\n\nPrivilege\nMeaning and Grantable Levels\n\n\n\n          A trigger is associated with a table. To create or drop a\n          trigger, you must have the\n          TRIGGER privilege for the\n          table, not the trigger.\n        \n          In GRANT statements, the\n          ALL\n          [PRIVILEGES] or PROXY\n          privilege must be named by itself and cannot be specified\n          along with other privileges.\n          ALL\n          [PRIVILEGES] stands for all privileges available for\n          the level at which privileges are to be granted except for the\n          GRANT OPTION and\n          PROXY privileges.\n        \n          MySQL account information is stored in the tables of the\n          mysql system schema. For additional\n          details, consult Section\u00a08.2, \u201cAccess Control and Account Management\u201d, which\n          discusses the mysql system schema and the\n          access control system extensively.\n        \n          If the grant tables hold privilege rows that contain\n          mixed-case database or table names and the\n          lower_case_table_names system\n          variable is set to a nonzero value,\n          REVOKE cannot be used to revoke\n          these privileges. It is necessary in such cases to manipulate\n          the grant tables directly.\n          (GRANT does not create such\n          rows when\n          lower_case_table_names is\n          set, but such rows might have been created prior to setting\n          that variable. The\n          lower_case_table_names\n          setting can only be configured at server startup.)\n        \n          Privileges can be granted at several levels, depending on the\n          syntax used for the ON clause. For\n          REVOKE, the same\n          ON syntax specifies which privileges to\n          remove.\n        \n          For the global, database, table, and routine levels,\n          GRANT ALL\n          assigns only the privileges that exist at the level you are\n          granting. For example, GRANT ALL ON\n          db_name.* is a\n          database-level statement, so it does not grant any global-only\n          privileges such as FILE.\n          Granting ALL does not assign\n          the GRANT OPTION or\n          PROXY privilege.\n        \n          The object_type clause, if present,\n          should be specified as TABLE,\n          FUNCTION, or PROCEDURE\n          when the following object is a table, a stored function, or a\n          stored procedure.\n        \n          The privileges that a user holds for a database, table,\n          column, or routine are formed additively as the logical\n          OR of the account privileges at\n          each of the privilege levels, including the global level. It\n          is not possible to deny a privilege granted at a higher level\n          by absence of that privilege at a lower level. For example,\n          this statement grants the\n          SELECT and\n          INSERT privileges globally:\n        Press CTRL+C to copy GRANT SELECT, INSERT ON *.* TO u1;\n          The globally granted privileges apply to all databases,\n          tables, and columns, even though not granted at any of those\n          lower levels.\n        \n          It is possible to deny explicitly a privilege granted at the\n          global level by revoking it for particular databases, if the\n          partial_revokes system\n          variable is enabled:\n        Press CTRL+C to copy GRANT SELECT, INSERT, UPDATE ON *.* TO u1;\nREVOKE INSERT, UPDATE ON db1.* FROM u1;\n          The result of the preceding statements is that\n          SELECT applies globally to all\n          tables, whereas INSERT and\n          UPDATE apply globally except to\n          tables in db1. Account access to\n          db1 is read only.\n        \n          Details of the privilege-checking procedure are presented in\n          Section\u00a08.2.7, \u201cAccess Control, Stage 2: Request Verification\u201d.\n        \n          If you are using table, column, or routine privileges for even\n          one user, the server examines table, column, and routine\n          privileges for all users and this slows down MySQL a bit.\n          Similarly, if you limit the number of queries, updates, or\n          connections for any users, the server must monitor these\n          values.\n        \n          MySQL enables you to grant privileges on databases or tables\n          that do not exist. For tables, the privileges to be granted\n          must include the CREATE\n          privilege. This behavior is by design,\n          and is intended to enable the database administrator to\n          prepare user accounts and privileges for databases or tables\n          that are to be created at a later time.\n\n\n\nImportant\n\n\nMySQL does not automatically revoke any privileges\n            when you drop a database or table. However, if\n            you drop a routine, any routine-level privileges granted for\n            that routine are revoked.\n\n\n",
        "\n\n\n\nGlobal Privileges\n\n\n\n\n          Global privileges are administrative or apply to all databases\n          on a given server. To assign global privileges, use\n          ON *.* syntax:\n        Press CTRL+C to copy GRANT ALL ON *.* TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON *.* TO 'someuser'@'somehost';\n          The CREATE TABLESPACE,\n          CREATE USER,\n          FILE,\n          PROCESS,\n          RELOAD,\n          REPLICATION CLIENT,\n          REPLICATION SLAVE,\n          SHOW DATABASES,\n          SHUTDOWN, and\n          SUPER static privileges are\n          administrative and can only be granted globally.\n        \n          Dynamic privileges are all global and can only be granted\n          globally.\n        \n          Other privileges can be granted globally or at more specific\n          levels.\n        \n          The effect of GRANT OPTION\n          granted at the global level differs for static and dynamic\n          privileges:\n\n\n\nGRANT OPTION granted for\n              any static global privilege applies to all static global\n              privileges.\n            \nGRANT OPTION granted for\n              any dynamic privilege applies only to that dynamic\n              privilege.\n\n\n\nGRANT ALL at the global level grants all\n          static global privileges and all currently registered dynamic\n          privileges. A dynamic privilege registered subsequent to\n          execution of the GRANT statement is not\n          granted retroactively to any account.\n        \n          MySQL stores global privileges in the\n          mysql.user system table.\n\n",
        "\n\n\n\nDatabase Privileges\n\n\n\n\n          Database privileges apply to all objects in a given database.\n          To assign database-level privileges, use ON\n          db_name.* syntax:\n        Press CTRL+C to copy GRANT ALL ON mydb.* TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON mydb.* TO 'someuser'@'somehost';\n          If you use ON * syntax (rather than\n          ON *.*), privileges are assigned at the\n          database level for the default database. An error occurs if\n          there is no default database.\n        \n          The CREATE,\n          DROP,\n          EVENT,\n          GRANT OPTION,\n          LOCK TABLES, and\n          REFERENCES privileges can be\n          specified at the database level. Table or routine privileges\n          also can be specified at the database level, in which case\n          they apply to all tables or routines in the database.\n        \n          MySQL stores database privileges in the\n          mysql.db system table.\n\n",
        "\n\n\n\nTable Privileges\n\n\n\n\n          Table privileges apply to all columns in a given table. To\n          assign table-level privileges, use ON\n          db_name.tbl_name syntax:\n        Press CTRL+C to copy GRANT ALL ON mydb.mytbl TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON mydb.mytbl TO 'someuser'@'somehost';\n          If you specify tbl_name rather than\n          db_name.tbl_name, the statement\n          applies to tbl_name in the default\n          database. An error occurs if there is no default database.\n        \n          The permissible priv_type values at\n          the table level are ALTER,\n          CREATE VIEW,\n          CREATE,\n          DELETE,\n          DROP,\n          GRANT OPTION,\n          INDEX,\n          INSERT,\n          REFERENCES,\n          SELECT,\n          SHOW VIEW,\n          TRIGGER, and\n          UPDATE.\n        \n          Table-level privileges apply to base tables and views. They do\n          not apply to tables created with CREATE\n          TEMPORARY TABLE, even if the table names match. For\n          information about TEMPORARY table\n          privileges, see Section\u00a015.1.20.2, \u201cCREATE TEMPORARY TABLE Statement\u201d.\n        \n          MySQL stores table privileges in the\n          mysql.tables_priv system table.\n\n",
        "\n\n\n\nColumn Privileges\n\n\n\n\n          Column privileges apply to single columns in a given table.\n          Each privilege to be granted at the column level must be\n          followed by the column or columns, enclosed within\n          parentheses.\n        Press CTRL+C to copy GRANT SELECT (col1), INSERT (col1, col2) ON mydb.mytbl TO 'someuser'@'somehost';\n          The permissible priv_type values\n          for a column (that is, when you use a\n          column_list clause) are\n          INSERT,\n          REFERENCES,\n          SELECT, and\n          UPDATE.\n        \n          MySQL stores column privileges in the\n          mysql.columns_priv system table.\n\n",
        "\n\n\n\nStored Routine Privileges\n\n\n\n\n          The ALTER ROUTINE,\n          CREATE ROUTINE,\n          EXECUTE, and\n          GRANT OPTION privileges apply\n          to stored routines (procedures and functions). They can be\n          granted at the global and database levels. Except for\n          CREATE ROUTINE, these\n          privileges can be granted at the routine level for individual\n          routines.\n        Press CTRL+C to copy GRANT CREATE ROUTINE ON mydb.* TO 'someuser'@'somehost';\nGRANT EXECUTE ON PROCEDURE mydb.myproc TO 'someuser'@'somehost';\n          The permissible priv_type values at\n          the routine level are ALTER\n          ROUTINE, EXECUTE, and\n          GRANT OPTION.\n          CREATE ROUTINE is not a\n          routine-level privilege because you must have the privilege at\n          the global or database level to create a routine in the first\n          place.\n        \n          MySQL stores routine-level privileges in the\n          mysql.procs_priv system table.\n\n",
        "\n\n\n\nProxy User Privileges\n\n\n\n\n          The PROXY privilege enables one\n          user to be a proxy for another. The proxy user impersonates or\n          takes the identity of the proxied user; that is, it assumes\n          the privileges of the proxied user.\n        Press CTRL+C to copy GRANT PROXY ON 'localuser'@'localhost' TO 'externaluser'@'somehost';\n          When PROXY is granted, it must\n          be the only privilege named in the\n          GRANT statement, and the only\n          permitted WITH option is WITH\n          GRANT OPTION.\n        \n          Proxying requires that the proxy user authenticate through a\n          plugin that returns the name of the proxied user to the server\n          when the proxy user connects, and that the proxy user have the\n          PROXY privilege for the proxied user. For\n          details and examples, see Section\u00a08.2.19, \u201cProxy Users\u201d.\n        \n          MySQL stores proxy privileges in the\n          mysql.proxies_priv system table.\n\n",
        "\n\n\n\nGranting Roles\n\n\n\n\nGRANT syntax without an\n          ON clause grants roles rather than\n          individual privileges. A role is a named collection of\n          privileges; see Section\u00a08.2.10, \u201cUsing Roles\u201d. For example:\n        Press CTRL+C to copy GRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';\n          Each role to be granted must exist, as well as each user\n          account or role to which it is to be granted. Roles cannot be\n          granted to anonymous users.\n        \n          Granting a role does not automatically cause the role to be\n          active. For information about role activation and\n          inactivation, see Activating Roles.\n        \n          These privileges are required to grant roles:\n\n\n\n              If you have the ROLE_ADMIN\n              privilege (or the deprecated\n              SUPER privilege), you can\n              grant or revoke any role to users or roles.\n            \n              If you were granted a role with a\n              GRANT statement that\n              includes the WITH ADMIN OPTION clause,\n              you become able to grant that role to other users or\n              roles, or revoke it from other users or roles, as long as\n              the role is active at such time as you subsequently grant\n              or revoke it. This includes the ability to use\n              WITH ADMIN OPTION itself.\n            \n              To grant a role that has the\n              SYSTEM_USER privilege, you\n              must have the SYSTEM_USER\n              privilege.\n\n\n\n          It is possible to create circular references with\n          GRANT. For example:\n        Press CTRL+C to copy CREATE USER 'u1', 'u2';\nCREATE ROLE 'r1', 'r2';\n\nGRANT 'u1' TO 'u1';   -- simple loop: u1 => u1\nGRANT 'r1' TO 'r1';   -- simple loop: r1 => r1\n\nGRANT 'r2' TO 'u2';\nGRANT 'u2' TO 'r2';   -- mixed user/role loop: u2 => r2 => u2\n          Circular grant references are permitted but add no new\n          privileges or roles to the grantee because a user or role\n          already has its privileges and roles.\n\n",
        "\n\n\n\nThe AS Clause and Privilege Restrictions\n\n\n\n\nGRANT can specify additional\n          information about the privilege context to use for statement\n          execution by using an AS\n          user [WITH ROLE] clause.\n          This syntax is visible at the SQL level, although its primary\n          purpose is to enable uniform replication across all nodes of\n          grantor privilege restrictions imposed by partial revokes, by\n          causing those restrictions to appear in the binary log. For\n          information about partial revokes, see\n          Section\u00a08.2.12, \u201cPrivilege Restriction Using Partial Revokes\u201d.\n        \n          When the AS user\n          clause is specified, statement execution takes into account\n          any privilege restrictions associated with the named user,\n          including all roles specified by WITH ROLE,\n          if present. The result is that the privileges actually granted\n          by the statement may be reduced relative to those specified.\n        \n          These conditions apply to the AS\n          user clause:\n\n\n\nAS has an effect only when the named\n              user has privilege restrictions\n              (which implies that the\n              partial_revokes system\n              variable is enabled).\n            \n              If WITH ROLE is given, all roles named\n              must be granted to the named\n              user.\n            \n              The named user should be a\n              MySQL account specified as\n              'user_name'@'host_name',\n              CURRENT_USER, or\n              CURRENT_USER(). The current\n              user may be named together with WITH\n              ROLE for the case that the executing user wants\n              GRANT to execute with a set\n              of roles applied that may differ from the roles active\n              within the current session.\n            \nAS cannot be used to gain privileges\n              not possessed by the user who executes the\n              GRANT statement. The\n              executing user must have at least the privileges to be\n              granted, but the AS clause can only\n              restrict the privileges granted, not escalate them.\n            \n              With respect to the privileges to be granted,\n              AS cannot specify a user/role\n              combination that has more privileges (fewer restrictions)\n              than the user who executes the\n              GRANT statement. The\n              AS user/role combination is permitted\n              to have more privileges than the executing user, but only\n              if the statement does not grant those additional\n              privileges.\n            \nAS is supported only for granting\n              global privileges (ON *.*).\n            \nAS is not supported for\n              PROXY grants.\n\n\n\n          The following example illustrates the effect of the\n          AS clause. Create a user\n          u1 that has some global privileges, as well\n          as restrictions on those privileges:\n        Press CTRL+C to copy CREATE USER u1;\nGRANT SELECT, INSERT, UPDATE, DELETE ON *.* TO u1;\nREVOKE INSERT, UPDATE ON schema1.* FROM u1;\nREVOKE SELECT ON schema2.* FROM u1;\n          Also create a role r1 that lifts some of\n          the privilege restrictions and grant the role to\n          u1:\n        Press CTRL+C to copy CREATE ROLE r1;\nGRANT INSERT ON schema1.* TO r1;\nGRANT SELECT ON schema2.* TO r1;\nGRANT r1 TO u1;\n          Now, using an account that has no privilege restrictions of\n          its own, grant to multiple users the same set of global\n          privileges, but each with different restrictions imposed by\n          the AS clause, and check which privileges\n          are actually granted.\n\n\n\n              The GRANT statement here\n              has no AS clause, so the privileges\n              granted are exactly those specified:\n            Press CTRL+C to copy mysql> CREATE USER u2;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u2;\nmysql> SHOW GRANTS FOR u2;\n+-------------------------------------------------+\n| Grants for u2@%                                 |\n+-------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u2`@`%` |\n+-------------------------------------------------+\n              The GRANT statement here\n              has an AS clause, so the privileges\n              granted are those specified but with the restrictions from\n              u1 applied:\n            Press CTRL+C to copy mysql> CREATE USER u3;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u3 AS u1;\nmysql> SHOW GRANTS FOR u3;\n+----------------------------------------------------+\n| Grants for u3@%                                    |\n+----------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u3`@`%`    |\n| REVOKE INSERT, UPDATE ON `schema1`.* FROM `u3`@`%` |\n| REVOKE SELECT ON `schema2`.* FROM `u3`@`%`         |\n+----------------------------------------------------+\n              As mentioned previously, the AS clause\n              can only add privilege restrictions; it cannot escalate\n              privileges. Thus, although u1 has the\n              DELETE privilege, that is\n              not included in the privileges granted because the\n              statement does not specify granting\n              DELETE.\n            \n              The AS clause for the\n              GRANT statement here makes\n              the role r1 active for\n              u1. That role lifts some of the\n              restrictions on u1. Consequently, the\n              privileges granted have some restrictions, but not so many\n              as for the previous GRANT\n              statement:\n            Press CTRL+C to copy mysql> CREATE USER u4;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u4 AS u1 WITH ROLE r1;\nmysql> SHOW GRANTS FOR u4;\n+-------------------------------------------------+\n| Grants for u4@%                                 |\n+-------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u4`@`%` |\n| REVOKE UPDATE ON `schema1`.* FROM `u4`@`%`      |\n+-------------------------------------------------+\n\n\n          If a GRANT statement includes\n          an AS user\n          clause, privilege restrictions on the user who executes the\n          statement are ignored (rather than applied as they would be in\n          the absence of an AS clause).\n\n",
        "\n\n\n\nOther Account Characteristics\n\n\n\n\n          The optional WITH clause is used to enable\n          a user to grant privileges to other users. The WITH\n          GRANT OPTION clause gives the user the ability to\n          give to other users any privileges the user has at the\n          specified privilege level.\n        \n          To grant the GRANT OPTION\n          privilege to an account without otherwise changing its\n          privileges, do this:\n        Press CTRL+C to copy GRANT USAGE ON *.* TO 'someuser'@'somehost' WITH GRANT OPTION;\n          Be careful to whom you give the GRANT\n          OPTION privilege because two users with different\n          privileges may be able to combine privileges!\n        \n          You cannot grant another user a privilege which you yourself\n          do not have; the GRANT OPTION\n          privilege enables you to assign only those privileges which\n          you yourself possess.\n        \n          Be aware that when you grant a user the\n          GRANT OPTION privilege at a\n          particular privilege level, any privileges the user possesses\n          (or may be given in the future) at that level can also be\n          granted by that user to other users. Suppose that you grant a\n          user the INSERT privilege on a\n          database. If you then grant the\n          SELECT privilege on the\n          database and specify WITH GRANT OPTION,\n          that user can give to other users not only the\n          SELECT privilege, but also\n          INSERT. If you then grant the\n          UPDATE privilege to the user on\n          the database, the user can grant\n          INSERT,\n          SELECT, and\n          UPDATE.\n        \n          For a nonadministrative user, you should not grant the\n          ALTER privilege globally or for\n          the mysql system schema. If you do that,\n          the user can try to subvert the privilege system by renaming\n          tables!\n        \n          For additional information about security risks associated\n          with particular privileges, see\n          Section\u00a08.2.2, \u201cPrivileges Provided by MySQL\u201d.\n\n",
        "\n\n\n\nMySQL and Standard SQL Versions of GRANT\n\n\n\n\n          The biggest differences between the MySQL and standard SQL\n          versions of GRANT are:\n\n\n\n              MySQL associates privileges with the combination of a host\n              name and user name and not with only a user name.\n            \n              Standard SQL does not have global or database-level\n              privileges, nor does it support all the privilege types\n              that MySQL supports.\n            \n              MySQL does not support the standard SQL\n              UNDER privilege.\n            \n              Standard SQL privileges are structured in a hierarchical\n              manner. If you remove a user, all privileges the user has\n              been granted are revoked. This is also true in MySQL if\n              you use DROP USER. See\n              Section\u00a015.7.1.5, \u201cDROP USER Statement\u201d.\n            \n              In standard SQL, when you drop a table, all privileges for\n              the table are revoked. In standard SQL, when you revoke a\n              privilege, all privileges that were granted based on that\n              privilege are also revoked. In MySQL, privileges can be\n              dropped with DROP USER or\n              REVOKE statements.\n            \n              In MySQL, it is possible to have the\n              INSERT privilege for only\n              some of the columns in a table. In this case, you can\n              still execute INSERT\n              statements on the table, provided that you insert values\n              only for those columns for which you have the\n              INSERT privilege. The\n              omitted columns are set to their implicit default values\n              if strict SQL mode is not enabled. In strict mode, the\n              statement is rejected if any of the omitted columns have\n              no default value. (Standard SQL requires you to have the\n              INSERT privilege on all\n              columns.) For information about strict SQL mode and\n              implicit default values, see Section\u00a07.1.11, \u201cServer SQL Modes\u201d,\n              and Section\u00a013.6, \u201cData Type Default Values\u201d.\n\n\n"
    ],
    "Examples": [
        "GRANT ALL ON db1.* TO 'jeffrey'@'localhost';\nGRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';\nGRANT SELECT ON world.* TO 'role3';",
        "CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL ON db1.* TO 'jeffrey'@'localhost';\nGRANT SELECT ON db2.invoice TO 'jeffrey'@'localhost';\nALTER USER 'jeffrey'@'localhost' WITH MAX_QUERIES_PER_HOUR 90;",
        "mysql> CREATE DATABASE db;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> CREATE TABLE db.t (c INT);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> INSERT INTO db.t VALUES ROW(1);\nQuery OK, 1 row affected (0.00 sec)",
        "mysql> CREATE USER u;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> GRANT SELECT ON `d_`.* TO u;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> GRANT INSERT ON `d%`.* TO u;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> EXIT",
        "Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 10\nServer version: 8.4.0-tr Source distribution\n\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input\nstatement.\n\nmysql> TABLE db.t;\n+------+\n| c    |\n+------+\n|    1 |\n+------+\n1 row in set (0.00 sec)\n\nmysql> INSERT INTO db.t VALUES ROW(2);\nERROR 1142 (42000): INSERT command denied to user 'u'@'localhost' for table 't'",
        "GRANT ALL ON test.* TO ''@'localhost' ...;",
        "SELECT Host, User FROM mysql.user WHERE User='';",
        "DROP USER ''@'localhost';",
        "GRANT SELECT, INSERT ON *.* TO u1;",
        "GRANT SELECT, INSERT, UPDATE ON *.* TO u1;\nREVOKE INSERT, UPDATE ON db1.* FROM u1;",
        "GRANT ALL ON *.* TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON *.* TO 'someuser'@'somehost';",
        "GRANT ALL ON mydb.* TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON mydb.* TO 'someuser'@'somehost';",
        "GRANT ALL ON mydb.mytbl TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON mydb.mytbl TO 'someuser'@'somehost';",
        "GRANT SELECT (col1), INSERT (col1, col2) ON mydb.mytbl TO 'someuser'@'somehost';",
        "GRANT CREATE ROUTINE ON mydb.* TO 'someuser'@'somehost';\nGRANT EXECUTE ON PROCEDURE mydb.myproc TO 'someuser'@'somehost';",
        "GRANT PROXY ON 'localuser'@'localhost' TO 'externaluser'@'somehost';",
        "GRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';",
        "CREATE USER 'u1', 'u2';\nCREATE ROLE 'r1', 'r2';\n\nGRANT 'u1' TO 'u1';   -- simple loop: u1 => u1\nGRANT 'r1' TO 'r1';   -- simple loop: r1 => r1\n\nGRANT 'r2' TO 'u2';\nGRANT 'u2' TO 'r2';   -- mixed user/role loop: u2 => r2 => u2",
        "CREATE USER u1;\nGRANT SELECT, INSERT, UPDATE, DELETE ON *.* TO u1;\nREVOKE INSERT, UPDATE ON schema1.* FROM u1;\nREVOKE SELECT ON schema2.* FROM u1;",
        "CREATE ROLE r1;\nGRANT INSERT ON schema1.* TO r1;\nGRANT SELECT ON schema2.* TO r1;\nGRANT r1 TO u1;",
        "mysql> CREATE USER u2;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u2;\nmysql> SHOW GRANTS FOR u2;\n+-------------------------------------------------+\n| Grants for u2@%                                 |\n+-------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u2`@`%` |\n+-------------------------------------------------+",
        "mysql> CREATE USER u3;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u3 AS u1;\nmysql> SHOW GRANTS FOR u3;\n+----------------------------------------------------+\n| Grants for u3@%                                    |\n+----------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u3`@`%`    |\n| REVOKE INSERT, UPDATE ON `schema1`.* FROM `u3`@`%` |\n| REVOKE SELECT ON `schema2`.* FROM `u3`@`%`         |\n+----------------------------------------------------+",
        "mysql> CREATE USER u4;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u4 AS u1 WITH ROLE r1;\nmysql> SHOW GRANTS FOR u4;\n+-------------------------------------------------+\n| Grants for u4@%                                 |\n+-------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u4`@`%` |\n| REVOKE UPDATE ON `schema1`.* FROM `u4`@`%`      |\n+-------------------------------------------------+",
        "GRANT USAGE ON *.* TO 'someuser'@'somehost' WITH GRANT OPTION;"
    ],
    "Category": [
        "Database Administration Statements"
    ]
}