{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/create-user.html"
    ],
    "Title": [
        "15.7.1.3 CREATE USER Statement"
    ],
    "Feature": [
        "CREATE USER [IF NOT EXISTS]\n    user [auth_option] [, user [auth_option]] ...\n    DEFAULT ROLE role [, role ] ...\n    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]\n    [WITH resource_option [resource_option] ...]\n    [password_option | lock_option] ...\n    [COMMENT 'comment_string' | ATTRIBUTE 'json_object']\n\nuser:\n    (see Section 8.2.4, \u201cSpecifying Account Names\u201d)\n\nauth_option: {\n    IDENTIFIED BY 'auth_string' [AND 2fa_auth_option]\n  | IDENTIFIED BY RANDOM PASSWORD [AND 2fa_auth_option]\n  | IDENTIFIED WITH auth_plugin [AND 2fa_auth_option]\n  | IDENTIFIED WITH auth_plugin BY 'auth_string' [AND 2fa_auth_option]\n  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD [AND 2fa_auth_option]\n  | IDENTIFIED WITH auth_plugin AS 'auth_string' [AND 2fa_auth_option]\n  | IDENTIFIED WITH auth_plugin [initial_auth_option]\n}\n\n2fa_auth_option: {\n    IDENTIFIED BY 'auth_string' [AND 3fa_auth_option]\n  | IDENTIFIED BY RANDOM PASSWORD [AND 3fa_auth_option]\n  | IDENTIFIED WITH auth_plugin [AND 3fa_auth_option]\n  | IDENTIFIED WITH auth_plugin BY 'auth_string' [AND 3fa_auth_option]\n  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD [AND 3fa_auth_option]\n  | IDENTIFIED WITH auth_plugin AS 'auth_string' [AND 3fa_auth_option]\n}\n\n3fa_auth_option: {\n    IDENTIFIED BY 'auth_string'\n  | IDENTIFIED BY RANDOM PASSWORD\n  | IDENTIFIED WITH auth_plugin\n  | IDENTIFIED WITH auth_plugin BY 'auth_string'\n  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD\n  | IDENTIFIED WITH auth_plugin AS 'auth_string'\n}\n\ninitial_auth_option: {\n    INITIAL AUTHENTICATION IDENTIFIED BY {RANDOM PASSWORD | 'auth_string'}\n  | INITIAL AUTHENTICATION IDENTIFIED WITH auth_plugin AS 'auth_string'\n}\n\ntls_option: {\n   SSL\n | X509\n | CIPHER 'cipher'\n | ISSUER 'issuer'\n | SUBJECT 'subject'\n}\n\nresource_option: {\n    MAX_QUERIES_PER_HOUR count\n  | MAX_UPDATES_PER_HOUR count\n  | MAX_CONNECTIONS_PER_HOUR count\n  | MAX_USER_CONNECTIONS count\n}\n\npassword_option: {\n    PASSWORD EXPIRE [DEFAULT | NEVER | INTERVAL N DAY]\n  | PASSWORD HISTORY {DEFAULT | N}\n  | PASSWORD REUSE INTERVAL {DEFAULT | N DAY}\n  | PASSWORD REQUIRE CURRENT [DEFAULT | OPTIONAL]\n  | FAILED_LOGIN_ATTEMPTS N\n  | PASSWORD_LOCK_TIME {N | UNBOUNDED}\n}\n\nlock_option: {\n    ACCOUNT LOCK\n  | ACCOUNT UNLOCK\n}",
        "mysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->    WHERE USER = 'jim' AND HOST = 'localhost'\\G\n*************************** 1. row ***************************\n     USER: jim\n     HOST: localhost\nATTRIBUTE: {\"fname\": \"James\", \"lname\": \"Scott\", \"phone\": \"123-456-7890\"}\n1 row in set (0.00 sec)"
    ],
    "Description": [
        "\n        The CREATE USER statement creates\n        new MySQL accounts. It enables authentication, role, SSL/TLS,\n        resource-limit, password-management, comment, and attribute\n        properties to be established for new accounts. It also controls\n        whether accounts are initially locked or unlocked.\n      ",
        "\n        To use CREATE USER, you must have\n        the global CREATE USER privilege,\n        or the INSERT privilege for the\n        mysql system schema. When the\n        read_only system variable is\n        enabled, CREATE USER additionally\n        requires the CONNECTION_ADMIN\n        privilege (or the deprecated\n        SUPER privilege).\n      ",
        "\n        These additional privilege considerations also apply:\n",
        "\n\n            The authentication_policy\n            system variable places certain constraints on how the\n            authentication-related clauses of\n            CREATE USER statements may be\n            used; for details, see the description of that variable.\n            These constraints do not apply if you have the\n            AUTHENTICATION_POLICY_ADMIN\n            privilege.\n          \n            To create an account that uses passwordless authentication,\n            you must have the\n            PASSWORDLESS_USER_ADMIN\n            privilege.\n\n",
        "\nCREATE USER fails with an error\n        if any account to be created is named as the\n        DEFINER attribute for any stored object.\n        (That is, the statement fails if creating an account would cause\n        the account to adopt a currently orphaned stored object.) To\n        perform the operation anyway, you must have the\n        SET_ANY_DEFINER or\n        ALLOW_NONEXISTENT_DEFINER\n        privilege; in this case, the statement succeeds with a warning\n        rather than failing with an error. To perform the user-creation\n        operation without either of these, drop the orphan objects,\n        create the account and grant its privileges, and then re-create\n        the dropped objects. For additional information, including how\n        to identify which objects name a given account as the\n        DEFINER attribute, see\n        Orphan Stored Objects.\n      ",
        "\nCREATE USER either succeeds for\n        all named users or rolls back and has no effect if any error\n        occurs. By default, an error occurs if you try to create a user\n        that already exists. If the IF NOT EXISTS\n        clause is given, the statement produces a warning for each named\n        user that already exists, rather than an error.\n",
        "\n\nImportant\n\n\n          Under some circumstances, CREATE\n          USER may be recorded in server logs or on the client\n          side in a history file such as\n          ~/.mysql_history, which means that\n          cleartext passwords may be read by anyone having read access\n          to that information. For information about the conditions\n          under which this occurs for the server logs and how to control\n          it, see Section\u00a08.1.2.3, \u201cPasswords and Logging\u201d. For similar\n          information about client-side logging, see\n          Section\u00a06.5.1.3, \u201cmysql Client Logging\u201d.\n\n",
        "\n        There are several aspects to the CREATE\n        USER statement, described under the following topics:\n",
        "\nCREATE USER OverviewCREATE USER Authentication OptionsCREATE USER Multifactor Authentication OptionsCREATE USER Role OptionsCREATE USER SSL/TLS OptionsCREATE USER Resource-Limit OptionsCREATE USER Password-Management OptionsCREATE USER Comment and Attribute OptionsCREATE USER Account-Locking OptionsCREATE USER Binary Logging\n",
        "\n\n\n\nCREATE USER Overview\n\n\n\n\n          For each account, CREATE USER\n          creates a new row in the mysql.user system\n          table. The account row reflects the properties specified in\n          the statement. Unspecified properties are set to their default\n          values:\n\n\n\n              Authentication: The default authentication plugin\n              (determined as described in\n              The Default Authentication Plugin),\n              and empty credentials\n            \n              Default role: NONE\n\n              SSL/TLS: NONE\n\n              Resource limits: Unlimited\n            \n              Password management: PASSWORD EXPIRE DEFAULT\n              PASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT\n              PASSWORD REQUIRE CURRENT DEFAULT; failed-login\n              tracking and temporary account locking are disabled\n            \n              Account locking: ACCOUNT UNLOCK\n\n\n\n          An account when first created has no privileges and the\n          default role NONE. To assign privileges or\n          roles to this account, use one or more\n          GRANT statements.\n        \n          Each account name uses the format described in\n          Section\u00a08.2.4, \u201cSpecifying Account Names\u201d. For example:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'password';\n          The host name part of the account name, if omitted, defaults\n          to '%'. You should be aware that, while\n          MySQL 8.4 treats grants made to such a user as\n          though they had been granted to\n          'user'@'localhost',\n          this behavior is deprecated, and thus subject to removal in a\n          future version of MySQL.\n        \n          Each user value naming an account\n          may be followed by an optional\n          auth_option value that indicates\n          how the account authenticates. These values enable account\n          authentication plugins and credentials (for example, a\n          password) to be specified. Each\n          auth_option value applies\n          only to the account named immediately\n          preceding it.\n        \n          Following the user specifications,\n          the statement may include options for SSL/TLS, resource-limit,\n          password-management, and locking properties. All such options\n          are global to the statement and apply to\n          all accounts named in the statement.\n        \n          Example: Create an account that uses the default\n          authentication plugin and the given password. Mark the\n          password expired so that the user must choose a new one at the\n          first connection to the server:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password' PASSWORD EXPIRE;\n          Example: Create an account that uses the\n          caching_sha2_password authentication plugin\n          and the given password. Require that a new password be chosen\n          every 180 days, and enable failed-login tracking, such that\n          three consecutive incorrect passwords cause temporary account\n          locking for two days:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH caching_sha2_password BY 'new_password'\n  PASSWORD EXPIRE INTERVAL 180 DAY\n  FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 2;\n          Example: Create multiple accounts, specifying some per-account\n          properties and some global properties:\n        Press CTRL+C to copy CREATE USER\n  'jeffrey'@'localhost' IDENTIFIED WITH mysql_native_password\n                                   BY 'new_password1',\n  'jeanne'@'localhost' IDENTIFIED WITH caching_sha2_password\n                                  BY 'new_password2'\n  REQUIRE X509 WITH MAX_QUERIES_PER_HOUR 60\n  PASSWORD HISTORY 5\n  ACCOUNT LOCK;\n          Each auth_option value\n          (IDENTIFIED WITH ... BY in this case)\n          applies only to the account named immediately preceding it, so\n          each account uses the immediately following authentication\n          plugin and password.\n        \n          The remaining properties apply globally to all accounts named\n          in the statement, so for both accounts:\n\n\n\n              Connections must be made using a valid X.509 certificate.\n            \n              Up to 60 queries per hour are permitted.\n            \n              Password changes cannot reuse any of the five most recent\n              passwords.\n            \n              The account is locked initially, so effectively it is a\n              placeholder and cannot be used until an administrator\n              unlocks it.\n\n\n",
        "\n\n\n\nCREATE USER Authentication Options\n\n\n\n\n          An account name may be followed by an\n          auth_option authentication option\n          that specifies the account authentication plugin, credentials,\n          or both.\n\n\n\nNote\n\n\n            MySQL 8.4 supports multifactor authentication\n            (MFA), such that accounts can have up to three\n            authentication methods. That is, accounts can use two-factor\n            authentication (2FA) or three-factor authentication (3FA).\n            The syntax and semantics of\n            auth_option remain unchanged, but\n            auth_option may be followed by\n            specifications for additional authentication methods. This\n            section describes auth_option.\n            For details about the optional MFA-related following\n            clauses, see\n            CREATE USER Multifactor Authentication Options.\n\n\n\n\nNote\n\n\n            Clauses for random password generation apply only to\n            accounts that use an authentication plugin that stores\n            credentials internally to MySQL. For accounts that use a\n            plugin that performs authentication against a credentials\n            system that is external to MySQL, password management must\n            be handled externally against that system as well. For more\n            information about internal credentials storage, see\n            Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n\n\n\nauth_plugin names an\n              authentication plugin. The plugin name can be a quoted\n              string literal or an unquoted name. Plugin names are\n              stored in the plugin column of the\n              mysql.user system table.\n            \n              For auth_option syntax that\n              does not specify an authentication plugin, the server\n              assigns the default plugin, determined as described in\n              The Default Authentication Plugin.\n              For descriptions of each plugin, see\n              Section\u00a08.4.1, \u201cAuthentication Plugins\u201d.\n            \n              Credentials that are stored internally are stored in the\n              mysql.user system table. An\n              'auth_string'\n              value or RANDOM PASSWORD specifies\n              account credentials, either as a cleartext (unencrypted)\n              string or hashed in the format expected by the\n              authentication plugin associated with the account,\n              respectively:\n\n\n\n                  For syntax that uses BY\n                  'auth_string',\n                  the string is cleartext and is passed to the\n                  authentication plugin for possible hashing. The result\n                  returned by the plugin is stored in the\n                  mysql.user table. A plugin may use\n                  the value as specified, in which case no hashing\n                  occurs.\n                \n                  For syntax that uses BY RANDOM\n                  PASSWORD, MySQL generates a random password\n                  and as cleartext and passes it to the authentication\n                  plugin for possible hashing. The result returned by\n                  the plugin is stored in the\n                  mysql.user table. A plugin may use\n                  the value as specified, in which case no hashing\n                  occurs.\n                \n                  Randomly generated passwords have the characteristics\n                  described in\n                  Random Password Generation.\n                \n                  For syntax that uses AS\n                  'auth_string',\n                  the string is assumed to be already in the format the\n                  authentication plugin requires, and is stored as is in\n                  the mysql.user table. If a plugin\n                  requires a hashed value, the value must be already\n                  hashed in a format appropriate for the plugin;\n                  otherwise, the value cannot be used by the plugin and\n                  correct authentication of client connections does not\n                  occur.\n                \n                  A hashed string can be either a string literal or a\n                  hexadecimal value. The latter corresponds to the type\n                  of value displayed by SHOW CREATE\n                  USER for password hashes containing\n                  unprintable characters when the\n                  print_identified_with_as_hex\n                  system variable is enabled.\n\n\n\nImportant\n\n\n                    Although we show\n                    'auth_string'\n                    with quotation marks, a hexadecimal value used for\n                    this purpose must not be\n                    quoted.\n\n\n\n                  If an authentication plugin performs no hashing of the\n                  authentication string, the BY\n                  'auth_string' and\n                  AS\n                  'auth_string'\n                  clauses have the same effect: The authentication\n                  string is stored as is in the\n                  mysql.user system table.\n\n\n\n\n\nCREATE USER permits these\n          auth_option syntaxes:\n\n\n\nIDENTIFIED BY\n              'auth_string'\n\n              Sets the account authentication plugin to the default\n              plugin, passes the cleartext\n              'auth_string'\n              value to the plugin for possible hashing, and stores the\n              result in the account row in the\n              mysql.user system table.\n            \nIDENTIFIED BY RANDOM PASSWORD\n\n              Sets the account authentication plugin to the default\n              plugin, generates a random password, passes the cleartext\n              password value to the plugin for possible hashing, and\n              stores the result in the account row in the\n              mysql.user system table. The statement\n              also returns the cleartext password in a result set to\n              make it available to the user or application executing the\n              statement. For details about the result set and\n              characteristics of randomly generated passwords, see\n              Random Password Generation.\n            \nIDENTIFIED WITH\n              auth_plugin\n\n              Sets the account authentication plugin to\n              auth_plugin, clears the\n              credentials to the empty string, and stores the result in\n              the account row in the mysql.user\n              system table.\n            \nIDENTIFIED WITH\n              auth_plugin BY\n              'auth_string'\n\n              Sets the account authentication plugin to\n              auth_plugin, passes the\n              cleartext\n              'auth_string'\n              value to the plugin for possible hashing, and stores the\n              result in the account row in the\n              mysql.user system table.\n            \nIDENTIFIED WITH\n              auth_plugin BY RANDOM\n              PASSWORD\n\n              Sets the account authentication plugin to\n              auth_plugin, generates a random\n              password, passes the cleartext password value to the\n              plugin for possible hashing, and stores the result in the\n              account row in the mysql.user system\n              table. The statement also returns the cleartext password\n              in a result set to make it available to the user or\n              application executing the statement. For details about the\n              result set and characteristics of randomly generated\n              passwords, see\n              Random Password Generation.\n            \nIDENTIFIED WITH\n              auth_plugin AS\n              'auth_string'\n\n              Sets the account authentication plugin to\n              auth_plugin and stores the\n              'auth_string'\n              value as is in the mysql.user account\n              row. If the plugin requires a hashed string, the string is\n              assumed to be already hashed in the format the plugin\n              requires.\n\n\n\n          Example: Specify the password as cleartext; the default plugin\n          is used:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'password';\n          Example: Specify the authentication plugin, along with a\n          cleartext password value:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password BY 'password';\n          In each case, the password value stored in the account row is\n          the cleartext value\n          'password' after\n          it has been hashed by the authentication plugin associated\n          with the account.\n        \n          For additional information about setting passwords and\n          authentication plugins, see\n          Section\u00a08.2.14, \u201cAssigning Account Passwords\u201d, and\n          Section\u00a08.2.17, \u201cPluggable Authentication\u201d.\n\n",
        "\n\n\n\nCREATE USER Multifactor Authentication Options\n\n\n\n\n          The auth_option part of\n          CREATE USER defines an\n          authentication method for one-factor/single-factor\n          authentication (1FA/SFA). CREATE\n          USER also supports multifactor authentication (MFA),\n          such that accounts can have up to three authentication\n          methods. That is, accounts can use two-factor authentication\n          (2FA) or three-factor authentication (3FA).\n        \n          The authentication_policy\n          system variable defines constraints for\n          CREATE USER statements with\n          multifactor authentication (MFA) clauses. For example, the\n          authentication_policy setting\n          controls the number of authentication factors that accounts\n          may have, and for each factor, which authentication methods\n          are permitted. See\n          Configuring the Multifactor Authentication Policy.\n        \n          For information about factor-specific rules that determine the\n          default authentication plugin for authentication clauses that\n          name no plugin, see\n          The Default Authentication Plugin.\n        \n          Following auth_option, there may\n          appear different optional MFA clauses:\n\n\n\n2fa_auth_option: Specifies a\n              factor 2 authentication method. The following example\n              defines caching_sha2_password as the\n              factor 1 authentication method, and\n              authentication_ldap_sasl as the factor\n              2 authentication method.\n            Press CTRL+C to copy CREATE USER 'u1'@'localhost'\n  IDENTIFIED WITH caching_sha2_password\n    BY 'sha2_password'\n  AND IDENTIFIED WITH authentication_ldap_sasl\n    AS 'uid=u1_ldap,ou=People,dc=example,dc=com';\n3fa_auth_option: Following\n              2fa_auth_option, there may\n              appear a 3fa_auth_option clause\n              to specify a factor 3 authentication method. The following\n              example defines caching_sha2_password\n              as the factor 1 authentication method,\n              authentication_ldap_sasl as the factor\n              2 authentication method, and\n              authentication_webauthn as the factor 3\n              authentication method\n            Press CTRL+C to copy CREATE USER 'u1'@'localhost'\n  IDENTIFIED WITH caching_sha2_password\n    BY 'sha2_password'\n  AND IDENTIFIED WITH authentication_ldap_sasl\n    AS 'uid=u1_ldap,ou=People,dc=example,dc=com'\n  AND IDENTIFIED WITH authentication_webauthn;\ninitial_auth_option: Specifies\n              an initial authentication method for configuring\n              FIDO/FIDO2 passwordless authentication. As shown in the\n              following, temporary authentication using either a\n              generated random password or a user-specified\n              auth-string is required to\n              enable WebAuthn passwordless authentication.\n            Press CTRL+C to copy CREATE USER user\n  IDENTIFIED WITH authentication_webauthn\n  INITIAL AUTHENTICATION IDENTIFIED BY {RANDOM PASSWORD | 'auth_string'};\n              For information about configuring passwordless\n              authentication using WebAuthn pluggable authentication,\n              See\n              WebAuthn Passwordless Authentication.\n\n\n",
        "\n\n\n\nCREATE USER Role Options\n\n\n\n\n          The DEFAULT ROLE clause defines which roles\n          become active when the user connects to the server and\n          authenticates, or when the user executes the\n          SET ROLE\n          DEFAULT statement during a session.\n        \n          Each role name uses the format described in\n          Section\u00a08.2.5, \u201cSpecifying Role Names\u201d. For example:\n        Press CTRL+C to copy CREATE USER 'joe'@'10.0.0.1' DEFAULT ROLE administrator, developer;\n          The host name part of the role name, if omitted, defaults to\n          '%'.\n        \n          The DEFAULT ROLE clause permits a list of\n          one or more comma-separated role names. These roles must exist\n          at the time CREATE USER is\n          executed; otherwise the statement raises an error\n          (ER_USER_DOES_NOT_EXIST), and\n          the user is not created.\n\n",
        "\n\n\n\nCREATE USER SSL/TLS Options\n\n\n\n\n          MySQL can check X.509 certificate attributes in addition to\n          the usual authentication that is based on the user name and\n          credentials. For background information on the use of SSL/TLS\n          with MySQL, see Section\u00a08.3, \u201cUsing Encrypted Connections\u201d.\n        \n          To specify SSL/TLS-related options for a MySQL account, use a\n          REQUIRE clause that specifies one or more\n          tls_option values.\n        \n          Order of REQUIRE options does not matter,\n          but no option can be specified twice. The\n          AND keyword is optional between\n          REQUIRE options.\n        \nCREATE USER permits these\n          tls_option values:\n\n\n\nNONE\n\n              Indicates that all accounts named by the statement have no\n              SSL or X.509 requirements. Unencrypted connections are\n              permitted if the user name and password are valid.\n              Encrypted connections can be used, at the client's option,\n              if the client has the proper certificate and key files.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' REQUIRE NONE;\n              Clients attempt to establish a secure connection by\n              default. For clients that have REQUIRE\n              NONE, the connection attempt falls back to an\n              unencrypted connection if a secure connection cannot be\n              established. To require an encrypted connection, a client\n              need specify only the\n              --ssl-mode=REQUIRED\n              option; the connection attempt fails if a secure\n              connection cannot be established.\n            \nNONE is the default if no SSL-related\n              REQUIRE options are specified.\n            \nSSL\n\n              Tells the server to permit only encrypted connections for\n              all accounts named by the statement.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' REQUIRE SSL;\n              Clients attempt to establish a secure connection by\n              default. For accounts that have REQUIRE\n              SSL, the connection attempt fails if a secure\n              connection cannot be established.\n            \nX509\n\n              For all accounts named by the statement, requires that\n              clients present a valid certificate, but the exact\n              certificate, issuer, and subject do not matter. The only\n              requirement is that it should be possible to verify its\n              signature with one of the CA certificates. Use of X.509\n              certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' REQUIRE X509;\n              For accounts with REQUIRE X509, clients\n              must specify the --ssl-key\n              and --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.) This is true for ISSUER\n              and SUBJECT as well because those\n              REQUIRE options imply the requirements\n              of X509.\n            \nISSUER\n              'issuer'\n\n              For all accounts named by the statement, requires that\n              clients present a valid X.509 certificate issued by CA\n              'issuer'. If\n              a client presents a certificate that is valid but has a\n              different issuer, the server rejects the connection. Use\n              of X.509 certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com';\n              Because ISSUER implies the requirements\n              of X509, clients must specify the\n              --ssl-key and\n              --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.)\n            \nSUBJECT\n              'subject'\n\n              For all accounts named by the statement, requires that\n              clients present a valid X.509 certificate containing the\n              subject subject. If a client\n              presents a certificate that is valid but has a different\n              subject, the server rejects the connection. Use of X.509\n              certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com';\n              MySQL does a simple string comparison of the\n              'subject'\n              value to the value in the certificate, so lettercase and\n              component ordering must be given exactly as present in the\n              certificate.\n            \n              Because SUBJECT implies the\n              requirements of X509, clients must\n              specify the --ssl-key and\n              --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.)\n            \nCIPHER\n              'cipher'\n\n              For all accounts named by the statement, requires a\n              specific cipher method for encrypting connections. This\n              option is needed to ensure that ciphers and key lengths of\n              sufficient strength are used. Encryption can be weak if\n              old algorithms using short encryption keys are used.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  REQUIRE CIPHER 'EDH-RSA-DES-CBC3-SHA';\n\n\n          The SUBJECT, ISSUER, and\n          CIPHER options can be combined in the\n          REQUIRE clause:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com'\n  AND ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com'\n  AND CIPHER 'EDH-RSA-DES-CBC3-SHA';\n",
        "\n\n\n\nCREATE USER Resource-Limit Options\n\n\n\n\n          It is possible to place limits on use of server resources by\n          an account, as discussed in Section\u00a08.2.21, \u201cSetting Account Resource Limits\u201d.\n          To do so, use a WITH clause that specifies\n          one or more resource_option values.\n        \n          Order of WITH options does not matter,\n          except that if a given resource limit is specified multiple\n          times, the last instance takes precedence.\n        \nCREATE USER permits these\n          resource_option values:\n\n\n\nMAX_QUERIES_PER_HOUR\n              count,\n              MAX_UPDATES_PER_HOUR\n              count,\n              MAX_CONNECTIONS_PER_HOUR\n              count\n\n              For all accounts named by the statement, these options\n              restrict how many queries, updates, and connections to the\n              server are permitted to each account during any given\n              one-hour period. If count is\n              0 (the default), this means that there\n              is no limitation for the account.\n            \nMAX_USER_CONNECTIONS\n              count\n\n              For all accounts named by the statement, restricts the\n              maximum number of simultaneous connections to the server\n              by each account. A nonzero\n              count specifies the limit for\n              the account explicitly. If\n              count is 0\n              (the default), the server determines the number of\n              simultaneous connections for the account from the global\n              value of the\n              max_user_connections\n              system variable. If\n              max_user_connections is\n              also zero, there is no limit for the account.\n\n\n\n          Example:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100;\n",
        "\n\n\n\nCREATE USER Password-Management Options\n\n\n\n\nCREATE USER supports several\n          password_option values for password\n          management:\n\n\n\n              Password expiration options: You can expire an account\n              password manually and establish its password expiration\n              policy. Policy options do not expire the password.\n              Instead, they determine how the server applies automatic\n              expiration to the account based on password age, which is\n              assessed from the date and time of the most recent account\n              password change.\n            \n              Password reuse options: You can restrict password reuse\n              based on number of password changes, time elapsed, or\n              both.\n            \n              Password verification-required options: You can indicate\n              whether attempts to change an account password must\n              specify the current password, as verification that the\n              user attempting to make the change actually knows the\n              current password.\n            \n              Incorrect-password failed-login tracking options: You can\n              cause the server to track failed login attempts and\n              temporarily lock accounts for which too many consecutive\n              incorrect passwords are given. The required number of\n              failures and the lock time are configurable.\n\n\n\n          This section describes the syntax for password-management\n          options. For information about establishing policy for\n          password management, see\n          Section\u00a08.2.15, \u201cPassword Management\u201d.\n        \n          If multiple password-management options of a given type are\n          specified, the last one takes precedence. For example,\n          PASSWORD EXPIRE DEFAULT PASSWORD EXPIRE\n          NEVER is the same as PASSWORD EXPIRE\n          NEVER.\n\n\n\nNote\n\n\n            Except for the options that pertain to failed-login\n            tracking, password-management options apply only to accounts\n            that use an authentication plugin that stores credentials\n            internally to MySQL. For accounts that use a plugin that\n            performs authentication against a credentials system that is\n            external to MySQL, password management must be handled\n            externally against that system as well. For more information\n            about internal credentials storage, see\n            Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n\n\n          A client has an expired password if the account password was\n          expired manually or the password age is considered greater\n          than its permitted lifetime per the automatic expiration\n          policy. In this case, the server either disconnects the client\n          or restricts the operations permitted to it (see\n          Section\u00a08.2.16, \u201cServer Handling of Expired Passwords\u201d). Operations\n          performed by a restricted client result in an error until the\n          user establishes a new account password.\n        \nCREATE USER permits these\n          password_option values for\n          controlling password expiration:\n\n\n\nPASSWORD EXPIRE\n\n              Immediately marks the password expired for all accounts\n              named by the statement.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE;\nPASSWORD EXPIRE DEFAULT\n\n              Sets all accounts named by the statement so that the\n              global expiration policy applies, as specified by the\n              default_password_lifetime\n              system variable.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;\nPASSWORD EXPIRE NEVER\n\n              This expiration option overrides the global policy for all\n              accounts named by the statement. For each, it disables\n              password expiration so that the password never expires.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;\nPASSWORD EXPIRE INTERVAL\n              N DAY\n\n              This expiration option overrides the global policy for all\n              accounts named by the statement. For each, it sets the\n              password lifetime to N days.\n              The following statement requires the password to be\n              changed every 180 days:\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 180 DAY;\n\n\nCREATE USER permits these\n          password_option values for\n          controlling reuse of previous passwords based on required\n          minimum number of password changes:\n\n\n\nPASSWORD HISTORY DEFAULT\n\n              Sets all accounts named by the statement so that the\n              global policy about password history length applies, to\n              prohibit reuse of passwords before the number of changes\n              specified by the\n              password_history system\n              variable.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD HISTORY DEFAULT;\nPASSWORD HISTORY\n              N\n\n              This history-length option overrides the global policy for\n              all accounts named by the statement. For each, it sets the\n              password history length to N\n              passwords, to prohibit reusing any of the\n              N most recently chosen\n              passwords. The following statement prohibits reuse of any\n              of the previous 6 passwords:\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD HISTORY 6;\n\n\nCREATE USER permits these\n          password_option values for\n          controlling reuse of previous passwords based on time elapsed:\n\n\n\nPASSWORD REUSE INTERVAL DEFAULT\n\n              Sets all statements named by the account so that the\n              global policy about time elapsed applies, to prohibit\n              reuse of passwords newer than the number of days specified\n              by the\n              password_reuse_interval\n              system variable.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL DEFAULT;\nPASSWORD REUSE INTERVAL\n              N DAY\n\n              This time-elapsed option overrides the global policy for\n              all accounts named by the statement. For each, it sets the\n              password reuse interval to N\n              days, to prohibit reuse of passwords newer than that many\n              days. The following statement prohibits password reuse for\n              360 days:\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL 360 DAY;\n\n\nCREATE USER permits these\n          password_option values for\n          controlling whether attempts to change an account password\n          must specify the current password, as verification that the\n          user attempting to make the change actually knows the current\n          password:\n\n\n\nPASSWORD REQUIRE CURRENT\n\n              This verification option overrides the global policy for\n              all accounts named by the statement. For each, it requires\n              that password changes specify the current password.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT;\nPASSWORD REQUIRE CURRENT OPTIONAL\n\n              This verification option overrides the global policy for\n              all accounts named by the statement. For each, it does not\n              require that password changes specify the current\n              password. (The current password may but need not be\n              given.)\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT OPTIONAL;\nPASSWORD REQUIRE CURRENT DEFAULT\n\n              Sets all statements named by the account so that the\n              global policy about password verification applies, as\n              specified by the\n              password_require_current\n              system variable.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT DEFAULT;\n\n\nCREATE USER permits these\n          password_option values for\n          controlling failed-login tracking:\n\n\n\nFAILED_LOGIN_ATTEMPTS\n              N\n\n              Whether to track account login attempts that specify an\n              incorrect password. N must be a\n              number from 0 to 32767. A value of 0 disables failed-login\n              tracking. Values greater than 0 indicate how many\n              consecutive password failures cause temporary account\n              locking (if PASSWORD_LOCK_TIME is also\n              nonzero).\n            \nPASSWORD_LOCK_TIME {N\n              | UNBOUNDED}\n\n              How long to lock the account after too many consecutive\n              login attempts provide an incorrect password.\n              N must be a number from 0 to\n              32767, or UNBOUNDED. A value of 0\n              disables temporary account locking. Values greater than 0\n              indicate how long to lock the account in days. A value of\n              UNBOUNDED causes the account locking\n              duration to be unbounded; once locked, the account remains\n              in a locked state until unlocked. For information about\n              the conditions under which unlocking occurs, see\n              Failed-Login Tracking and Temporary Account Locking.\n\n\n\n          For failed-login tracking and temporary locking to occur, an\n          account's FAILED_LOGIN_ATTEMPTS and\n          PASSWORD_LOCK_TIME options both must be\n          nonzero. The following statement creates an account that\n          remains locked for two days after four consecutive password\n          failures:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  FAILED_LOGIN_ATTEMPTS 4 PASSWORD_LOCK_TIME 2;\n",
        "\n\n\n\nCREATE USER Comment and Attribute Options\n\n\n\n\n          You can also include an optional comment or attribute when\n          creating a user, as described here:\n\n\n\nUser comment\n\n              To set a user comment, add COMMENT\n              'user_comment' to the\n              CREATE USER statement, where\n              user_comment is the text of the\n              user comment.\n            \n              Example (omitting any other options):\n            Press CTRL+C to copy CREATE USER 'jon'@'localhost' COMMENT 'Some information about Jon';\nUser attribute\n\n              A user attribute is a JSON object made up of one or more\n              key-value pairs, and is set by including\n              ATTRIBUTE\n              'json_object' as part\n              of CREATE USER.\n              json_object must be a valid\n              JSON object.\n            \n              Example (omitting any other options):\n            Press CTRL+C to copy CREATE USER 'jim'@'localhost'\n    ATTRIBUTE '{\"fname\": \"James\", \"lname\": \"Scott\", \"phone\": \"123-456-7890\"}';\n\n\n          User comments and user attributes are stored together in the\n          ATTRIBUTE column of the Information Schema\n          USER_ATTRIBUTES table. This query\n          displays the row in this table inserted by the statement just\n          shown for creating the user jim@localhost:\n        Press CTRL+C to copy mysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->    WHERE USER = 'jim' AND HOST = 'localhost'\\G\n*************************** 1. row ***************************\n     USER: jim\n     HOST: localhost\nATTRIBUTE: {\"fname\": \"James\", \"lname\": \"Scott\", \"phone\": \"123-456-7890\"}\n1 row in set (0.00 sec)\n          The COMMENT option in actuality provides a\n          shortcut for setting a user attribute whose only element has\n          comment as its key and whose value is the\n          argument supplied for the option. You can see this by\n          executing the statement CREATE USER 'jon'@'localhost'\n          COMMENT 'Some information about Jon', and observing\n          the row which it inserts into the\n          USER_ATTRIBUTES table:\n        Press CTRL+C to copy mysql> CREATE USER 'jon'@'localhost' COMMENT 'Some information about Jon';\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->    WHERE USER = 'jon' AND HOST = 'localhost';\n+------+-----------+-------------------------------------------+\n| USER | HOST      | ATTRIBUTE                                 |\n+------+-----------+-------------------------------------------+\n| jon  | localhost | {\"comment\": \"Some information about Jon\"} |\n+------+-----------+-------------------------------------------+\n1 row in set (0.00 sec)\n          You cannot use COMMENT and\n          ATTRIBUTE together in the same\n          CREATE USER statement; attempting to do so\n          causes a syntax error. To set a user comment concurrently with\n          setting a user attribute, use ATTRIBUTE and\n          include in its argument a value with a\n          comment key, like this:\n        Press CTRL+C to copy mysql> CREATE USER 'bill'@'localhost'\n    ->        ATTRIBUTE '{\"fname\":\"William\", \"lname\":\"Schmidt\",\n    ->        \"comment\":\"Website developer\"}';\nQuery OK, 0 rows affected (0.16 sec)\n          Since the content of the ATTRIBUTE row is a\n          JSON object, you can employ any appropriate MySQL JSON\n          functions or operators to manipulate it, as shown here:\n        Press CTRL+C to copy mysql> SELECT\n    ->   USER AS User,\n    ->   HOST AS Host,\n    ->   CONCAT(ATTRIBUTE->>\"$.fname\",\" \",ATTRIBUTE->>\"$.lname\") AS 'Full Name',\n    ->   ATTRIBUTE->>\"$.comment\" AS Comment\n    -> FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    -> WHERE USER='bill' AND HOST='localhost';\n+------+-----------+-----------------+-------------------+\n| User | Host      | Full Name       | Comment           |\n+------+-----------+-----------------+-------------------+\n| bill | localhost | William Schmidt | Website developer |\n+------+-----------+-----------------+-------------------+\n1 row in set (0.00 sec)\n          To set or to make changes in the user comment or user\n          attribute for an existing user, you can use a\n          COMMENT or ATTRIBUTE\n          option with an ALTER USER\n          statement.\n        \n          Because the user comment and user attribute are stored\n          together internally in a single\n          JSON column, this sets an upper\n          limit on their maximum combined size; see\n          JSON Storage Requirements, for more\n          information.\n        \n          See also the description of the Information Schema\n          USER_ATTRIBUTES table for more\n          information and examples.\n\n",
        "\n\n\n\nCREATE USER Account-Locking Options\n\n\n\n\n          MySQL supports account locking and unlocking using the\n          ACCOUNT LOCK and ACCOUNT\n          UNLOCK options, which specify the locking state for\n          an account. For additional discussion, see\n          Section\u00a08.2.20, \u201cAccount Locking\u201d.\n        \n          If multiple account-locking options are specified, the last\n          one takes precedence.\n\n",
        "\n\n\n\nCREATE USER Binary Logging\n\n\n\n\nCREATE USER is written to the\n          binary log if it succeeds, but not if it fails; in that case,\n          rollback occurs and no changes are made. A statement written\n          to the binary log includes all named users. If the IF\n          NOT EXISTS clause is given, this includes even users\n          that already exist and were not created.\n        \n          The statement written to the binary log specifies an\n          authentication plugin for each user, determined as follows:\n\n\n\n              The plugin named in the original statement, if one was\n              specified.\n            \n              Otherwise, the default authentication plugin. In\n              particular, if a user u1 already exists\n              and uses a nondefault authentication plugin, the statement\n              written to the binary log for CREATE USER IF NOT\n              EXISTS u1 names the default authentication\n              plugin. (If the statement written to the binary log must\n              specify a nondefault authentication plugin for a user,\n              include it in the original statement.)\n\n\n\n          If the server adds the default authentication plugin for any\n          nonexisting users in the statement written to the binary log,\n          it writes a warning to the error log naming those users.\n        \n          If the original statement specifies the\n          FAILED_LOGIN_ATTEMPTS or\n          PASSWORD_LOCK_TIME option, the statement\n          written to the binary log includes the option.\n        \nCREATE USER statements with\n          clauses that support multifactor authentication (MFA) are\n          written to the binary log.\n\n\n\nCREATE USER ... IDENTIFIED WITH .. INITIAL\n              AUTHENTICATION IDENTIFIED WITH ... statements\n              are written to the binary log as CREATE USER ..\n              IDENTIFIED WITH .. INITIAL AUTHENTICATION IDENTIFIED WITH\n              .. AS\n              'password-hash',\n              where the password-hash is the\n              user-specified auth-string or\n              the random password generated by server when the\n              RANDOM PASSWORD clause is specified.\n\n\n"
    ],
    "Examples": [
        "CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'password';",
        "CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password' PASSWORD EXPIRE;",
        "CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH caching_sha2_password BY 'new_password'\n  PASSWORD EXPIRE INTERVAL 180 DAY\n  FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 2;",
        "CREATE USER\n  'jeffrey'@'localhost' IDENTIFIED WITH mysql_native_password\n                                   BY 'new_password1',\n  'jeanne'@'localhost' IDENTIFIED WITH caching_sha2_password\n                                  BY 'new_password2'\n  REQUIRE X509 WITH MAX_QUERIES_PER_HOUR 60\n  PASSWORD HISTORY 5\n  ACCOUNT LOCK;",
        "CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'password';",
        "CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password BY 'password';",
        "CREATE USER 'u1'@'localhost'\n  IDENTIFIED WITH caching_sha2_password\n    BY 'sha2_password'\n  AND IDENTIFIED WITH authentication_ldap_sasl\n    AS 'uid=u1_ldap,ou=People,dc=example,dc=com';",
        "CREATE USER 'u1'@'localhost'\n  IDENTIFIED WITH caching_sha2_password\n    BY 'sha2_password'\n  AND IDENTIFIED WITH authentication_ldap_sasl\n    AS 'uid=u1_ldap,ou=People,dc=example,dc=com'\n  AND IDENTIFIED WITH authentication_webauthn;",
        "CREATE USER user\n  IDENTIFIED WITH authentication_webauthn\n  INITIAL AUTHENTICATION IDENTIFIED BY {RANDOM PASSWORD | 'auth_string'};",
        "CREATE USER 'joe'@'10.0.0.1' DEFAULT ROLE administrator, developer;",
        "CREATE USER 'jeffrey'@'localhost' REQUIRE NONE;",
        "CREATE USER 'jeffrey'@'localhost' REQUIRE SSL;",
        "CREATE USER 'jeffrey'@'localhost' REQUIRE X509;",
        "CREATE USER 'jeffrey'@'localhost'\n  REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com';",
        "CREATE USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com';",
        "CREATE USER 'jeffrey'@'localhost'\n  REQUIRE CIPHER 'EDH-RSA-DES-CBC3-SHA';",
        "CREATE USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com'\n  AND ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com'\n  AND CIPHER 'EDH-RSA-DES-CBC3-SHA';",
        "CREATE USER 'jeffrey'@'localhost'\n  WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100;",
        "CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE;",
        "CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;",
        "CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;",
        "CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 180 DAY;",
        "CREATE USER 'jeffrey'@'localhost' PASSWORD HISTORY DEFAULT;",
        "CREATE USER 'jeffrey'@'localhost' PASSWORD HISTORY 6;",
        "CREATE USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL DEFAULT;",
        "CREATE USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL 360 DAY;",
        "CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT;",
        "CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT OPTIONAL;",
        "CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT DEFAULT;",
        "CREATE USER 'jeffrey'@'localhost'\n  FAILED_LOGIN_ATTEMPTS 4 PASSWORD_LOCK_TIME 2;",
        "CREATE USER 'jon'@'localhost' COMMENT 'Some information about Jon';",
        "CREATE USER 'jim'@'localhost'\n    ATTRIBUTE '{\"fname\": \"James\", \"lname\": \"Scott\", \"phone\": \"123-456-7890\"}';",
        "mysql> CREATE USER 'jon'@'localhost' COMMENT 'Some information about Jon';\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->    WHERE USER = 'jon' AND HOST = 'localhost';\n+------+-----------+-------------------------------------------+\n| USER | HOST      | ATTRIBUTE                                 |\n+------+-----------+-------------------------------------------+\n| jon  | localhost | {\"comment\": \"Some information about Jon\"} |\n+------+-----------+-------------------------------------------+\n1 row in set (0.00 sec)",
        "mysql> CREATE USER 'bill'@'localhost'\n    ->        ATTRIBUTE '{\"fname\":\"William\", \"lname\":\"Schmidt\",\n    ->        \"comment\":\"Website developer\"}';\nQuery OK, 0 rows affected (0.16 sec)",
        "mysql> SELECT\n    ->   USER AS User,\n    ->   HOST AS Host,\n    ->   CONCAT(ATTRIBUTE->>\"$.fname\",\" \",ATTRIBUTE->>\"$.lname\") AS 'Full Name',\n    ->   ATTRIBUTE->>\"$.comment\" AS Comment\n    -> FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    -> WHERE USER='bill' AND HOST='localhost';\n+------+-----------+-----------------+-------------------+\n| User | Host      | Full Name       | Comment           |\n+------+-----------+-----------------+-------------------+\n| bill | localhost | William Schmidt | Website developer |\n+------+-----------+-----------------+-------------------+\n1 row in set (0.00 sec)"
    ],
    "Category": [
        "Database Administration Statements"
    ]
}