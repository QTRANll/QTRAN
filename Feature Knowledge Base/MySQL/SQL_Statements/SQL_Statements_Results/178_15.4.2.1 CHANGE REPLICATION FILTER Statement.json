{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/change-replication-filter.html"
    ],
    "Title": [
        "15.4.2.1 CHANGE REPLICATION FILTER Statement"
    ],
    "Feature": [
        "CHANGE REPLICATION FILTER filter[, filter]\n\t[, ...] [FOR CHANNEL channel]\n\nfilter: {\n    REPLICATE_DO_DB = (db_list)\n  | REPLICATE_IGNORE_DB = (db_list)\n  | REPLICATE_DO_TABLE = (tbl_list)\n  | REPLICATE_IGNORE_TABLE = (tbl_list)\n  | REPLICATE_WILD_DO_TABLE = (wild_tbl_list)\n  | REPLICATE_WILD_IGNORE_TABLE = (wild_tbl_list)\n  | REPLICATE_REWRITE_DB = (db_pair_list)\n}\n\ndb_list:\n    db_name[, db_name][, ...]\n\ntbl_list:\n    db_name.table_name[, db_name.table_name][, ...]\nwild_tbl_list:\n    'db_pattern.table_pattern'[, 'db_pattern.table_pattern'][, ...]\n\ndb_pair_list:\n    (db_pair)[, (db_pair)][, ...]\n\ndb_pair:\n    from_db, to_db"
    ],
    "Description": [
        "\nCHANGE REPLICATION FILTER sets one or more\n        replication filtering rules on the replica in the same way as\n        starting the replica mysqld with replication\n        filtering options such as\n        --replicate-do-db or\n        --replicate-wild-ignore-table.\n        Filters set using this statement differ from those set using the\n        server options in two key respects:\n",
        "\n\n            The statement does not require restarting the server to take\n            effect, only that the replication SQL thread be stopped\n            using STOP\n            REPLICA SQL_THREAD first (and restarted with\n            START REPLICA\n            SQL_THREAD afterwards).\n          \n            The effects of the statement are not persistent; any filters\n            set using CHANGE REPLICATION FILTER are\n            lost following a restart of the replica\n            mysqld.\n\n",
        "\nCHANGE REPLICATION FILTER\n        requires the\n        REPLICATION_SLAVE_ADMIN privilege\n        (or the deprecated SUPER\n        privilege).\n      ",
        "\n        Use the FOR CHANNEL\n        channel clause to make a\n        replication filter specific to a replication channel, for\n        example on a multi-source replica. Filters applied without a\n        specific FOR CHANNEL clause are considered\n        global filters, meaning that they are applied to all replication\n        channels.\n      ",
        "\n",
        "\n\nNote\n\n\n            Global replication filters cannot be set on a MySQL server\n            instance that is configured for Group Replication, because\n            filtering transactions on some servers would make the group\n            unable to reach agreement on a consistent state. Channel\n            specific replication filters can be set on replication\n            channels that are not directly involved with Group\n            Replication, such as where a group member also acts as a\n            replica to a source that is outside the group. They cannot\n            be set on the group_replication_applier\n            or group_replication_recovery channels.\n\n",
        "\n",
        "\n        The following list shows the CHANGE REPLICATION\n        FILTER options and how they relate to\n        --replicate-* server options:\n",
        "\n\nREPLICATE_DO_DB: Include updates based on\n            database name. Equivalent to\n            --replicate-do-db.\n          \nREPLICATE_IGNORE_DB: Exclude updates\n            based on database name. Equivalent to\n            --replicate-ignore-db.\n          \nREPLICATE_DO_TABLE: Include updates based\n            on table name. Equivalent to\n            --replicate-do-table.\n          \nREPLICATE_IGNORE_TABLE: Exclude updates\n            based on table name. Equivalent to\n            --replicate-ignore-table.\n          \nREPLICATE_WILD_DO_TABLE: Include updates\n            based on wildcard pattern matching table name. Equivalent to\n            --replicate-wild-do-table.\n          \nREPLICATE_WILD_IGNORE_TABLE: Exclude\n            updates based on wildcard pattern matching table name.\n            Equivalent to\n            --replicate-wild-ignore-table.\n          \nREPLICATE_REWRITE_DB: Perform updates on\n            replica after substituting new name on replica for specified\n            database on source. Equivalent to\n            --replicate-rewrite-db.\n\n",
        "\n        The precise effects of REPLICATE_DO_DB and\n        REPLICATE_IGNORE_DB filters are dependent on\n        whether statement-based or row-based replication is in effect.\n        See Section\u00a019.2.5, \u201cHow Servers Evaluate Replication Filtering Rules\u201d, for more information.\n      ",
        "\n        Multiple replication filtering rules can be created in a single\n        CHANGE REPLICATION FILTER statement by\n        separating the rules with commas, as shown here:\n      ",
        "Press CTRL+C to copy CHANGE REPLICATION FILTER\n    REPLICATE_DO_DB = (d1), REPLICATE_IGNORE_DB = (d2);",
        "\n        Issuing the statement just shown is equivalent to starting the\n        replica mysqld with the options\n        --replicate-do-db=d1\n--replicate-ignore-db=d2.\n      ",
        "\n        On a multi-source replica, which uses multiple replication\n        channels to process transaction from different sources, use the\n        FOR CHANNEL\n        channel clause to set a\n        replication filter on a replication channel:\n      ",
        "Press CTRL+C to copy CHANGE REPLICATION FILTER REPLICATE_DO_DB = (d1) FOR CHANNEL channel_1;",
        "\n        This enables you to create a channel specific replication filter\n        to filter out selected data from a source. When a FOR\n        CHANNEL clause is provided, the replication filter\n        statement acts on that replication channel, removing any\n        existing replication filter which has the same filter type as\n        the specified replication filters, and replacing them with the\n        specified filter. Filter types not explicitly listed in the\n        statement are not modified. If issued against a replication\n        channel which is not configured, the statement fails with an\n        ER_SLAVE_CONFIGURATION error. If issued\n        against Group Replication channels, the statement fails with an\n        ER_SLAVE_CHANNEL_OPERATION_NOT_ALLOWED\n        error.\n      ",
        "\n        On a replica with multiple replication channels configured,\n        issuing CHANGE REPLICATION FILTER\n        with no FOR CHANNEL clause configures the\n        replication filter for every configured replication channel, and\n        for the global replication filters. For every filter type, if\n        the filter type is listed in the statement, then any existing\n        filter rules of that type are replaced by the filter rules\n        specified in the most recently issued statement, otherwise the\n        old value of the filter type is retained. For more information\n        see Section\u00a019.2.5.4, \u201cReplication Channel Based Filters\u201d.\n      ",
        "\n        If the same filtering rule is specified multiple times, only the\n        last such rule is actually used. For\n        example, the two statements shown here have exactly the same\n        effect, because the first REPLICATE_DO_DB\n        rule in the first statement is ignored:\n      ",
        "Press CTRL+C to copy CHANGE REPLICATION FILTER\n    REPLICATE_DO_DB = (db1, db2), REPLICATE_DO_DB = (db3, db4);\n\nCHANGE REPLICATION FILTER\n    REPLICATE_DO_DB = (db3, db4);",
        "\n\nCaution\n\n\n          This behavior differs from that of the\n          --replicate-* filter options where specifying\n          the same option multiple times causes the creation of multiple\n          filter rules.\n\n",
        "\n        Names of tables and database not containing any special\n        characters need not be quoted. Values used with\n        REPLICATION_WILD_TABLE and\n        REPLICATION_WILD_IGNORE_TABLE are string\n        expressions, possibly containing (special) wildcard characters,\n        and so must be quoted. This is shown in the following example\n        statements:\n      ",
        "Press CTRL+C to copy CHANGE REPLICATION FILTER\n    REPLICATE_WILD_DO_TABLE = ('db1.old%');\n\nCHANGE REPLICATION FILTER\n    REPLICATE_WILD_IGNORE_TABLE = ('db1.new%', 'db2.new%');",
        "\n        Values used with REPLICATE_REWRITE_DB\n        represent pairs of database names; each\n        such value must be enclosed in parentheses. The following\n        statement rewrites statements occurring on database\n        db1 on the source to database\n        db2 on the replica:\n      ",
        "Press CTRL+C to copy CHANGE REPLICATION FILTER REPLICATE_REWRITE_DB = ((db1, db2));",
        "\n        The statement just shown contains two sets of parentheses, one\n        enclosing the pair of database names, and the other enclosing\n        the entire list. This is perhaps more easily seen in the\n        following example, which creates two\n        rewrite-db rules, one rewriting database\n        dbA to dbB, and one\n        rewriting database dbC to\n        dbD:\n      ",
        "Press CTRL+C to copy CHANGE REPLICATION FILTER\n  REPLICATE_REWRITE_DB = ((dbA, dbB), (dbC, dbD));",
        "\n        The CHANGE REPLICATION FILTER\n        statement replaces replication filtering rules only for the\n        filter types and replication channels affected by the statement,\n        and leaves other rules and channels unchanged. If you want to\n        unset all filters of a given type, set the filter's value\n        to an explicitly empty list, as shown in this example, which\n        removes all existing REPLICATE_DO_DB and\n        REPLICATE_IGNORE_DB rules:\n      ",
        "Press CTRL+C to copy CHANGE REPLICATION FILTER\n    REPLICATE_DO_DB = (), REPLICATE_IGNORE_DB = ();",
        "\n        Setting a filter to empty in this way removes all existing\n        rules, does not create any new ones, and does not restore any\n        rules set at mysqld startup using --replicate-*\n        options on the command line or in the configuration file.\n      ",
        "\n        The RESET REPLICA\n        ALL statement removes channel specific replication\n        filters that were set on channels deleted by the statement. When\n        the deleted channel or channels are recreated, any global\n        replication filters specified for the replica are copied to\n        them, and no channel specific replication filters are applied.\n      ",
        "\n        For more information, see Section\u00a019.2.5, \u201cHow Servers Evaluate Replication Filtering Rules\u201d.\n"
    ],
    "Examples": [
        "CHANGE REPLICATION FILTER\n    REPLICATE_DO_DB = (d1), REPLICATE_IGNORE_DB = (d2);",
        "CHANGE REPLICATION FILTER REPLICATE_DO_DB = (d1) FOR CHANNEL channel_1;",
        "CHANGE REPLICATION FILTER\n    REPLICATE_DO_DB = (db1, db2), REPLICATE_DO_DB = (db3, db4);\n\nCHANGE REPLICATION FILTER\n    REPLICATE_DO_DB = (db3, db4);",
        "CHANGE REPLICATION FILTER\n    REPLICATE_WILD_DO_TABLE = ('db1.old%');\n\nCHANGE REPLICATION FILTER\n    REPLICATE_WILD_IGNORE_TABLE = ('db1.new%', 'db2.new%');",
        "CHANGE REPLICATION FILTER REPLICATE_REWRITE_DB = ((db1, db2));",
        "CHANGE REPLICATION FILTER\n  REPLICATE_REWRITE_DB = ((dbA, dbB), (dbC, dbD));",
        "CHANGE REPLICATION FILTER\n    REPLICATE_DO_DB = (), REPLICATE_IGNORE_DB = ();"
    ],
    "Category": [
        "Replication Statements"
    ]
}