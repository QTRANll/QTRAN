{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/create-tablespace.html"
    ],
    "Title": [
        "15.1.21 CREATE TABLESPACE Statement"
    ],
    "Feature": [
        "CREATE [UNDO] TABLESPACE tablespace_name\n\n  InnoDB and NDB:\n    [ADD DATAFILE 'file_name']\n    [AUTOEXTEND_SIZE [=] value]\n\n  InnoDB only:\n    [FILE_BLOCK_SIZE = value]\n    [ENCRYPTION [=] {'Y' | 'N'}]\n\n  NDB only:\n    USE LOGFILE GROUP logfile_group\n    [EXTENT_SIZE [=] extent_size]\n    [INITIAL_SIZE [=] initial_size]\n    [MAX_SIZE [=] max_size]\n    [NODEGROUP [=] nodegroup_id]\n    [WAIT]\n    [COMMENT [=] 'string']\n\n  InnoDB and NDB:\n    [ENGINE [=] engine_name]\n\n  Reserved for future use:\n    [ENGINE_ATTRIBUTE [=] 'string']"
    ],
    "Description": [
        "\n      This statement is used to create a tablespace. The precise syntax\n      and semantics depend on the storage engine used. In standard MySQL\n      releases, this is always an InnoDB\n      tablespace. MySQL NDB Cluster also supports tablespaces using the\n      NDB storage engine.\n",
        "\nConsiderations for InnoDBConsiderations for NDB ClusterOptionsNotesInnoDB ExamplesNDB Example\n",
        {
            "Sub-title": "Considerations for InnoDB",
            "Illustration": [
                "\nCREATE TABLESPACE syntax is used to\n      create general tablespaces or undo tablespaces. The\n      UNDO keyword must be specified to create an\n      undo tablespace.\n    ",
                "\n      A general tablespace is a shared tablespace. It can hold multiple\n      tables, and supports all table row formats. General tablespaces\n      can be created in a location relative to or independent of the\n      data directory.\n    ",
                "\n      After creating an InnoDB general tablespace,\n      use CREATE TABLE\n      tbl_name ... TABLESPACE [=]\n      tablespace_name or\n      ALTER TABLE\n      tbl_name TABLESPACE [=]\n      tablespace_name to add tables\n      to the tablespace. For more information, see\n      Section\u00a017.6.3.3, \u201cGeneral Tablespaces\u201d.\n    ",
                "\n      Undo tablespaces contain undo logs. Undo tablespaces can be\n      created in a chosen location by specifying a fully qualified data\n      file path. For more information, see\n      Section\u00a017.6.3.4, \u201cUndo Tablespaces\u201d.\n"
            ]
        },
        {
            "Sub-title": "Considerations for NDB Cluster",
            "Illustration": [
                "\n      This statement is used to create a tablespace, which can contain\n      one or more data files, providing storage space for NDB Cluster\n      Disk Data tables (see Section\u00a025.6.11, \u201cNDB Cluster Disk Data Tables\u201d).\n      One data file is created and added to the tablespace using this\n      statement. Additional data files may be added to the tablespace by\n      using the ALTER TABLESPACE\n      statement (see Section\u00a015.1.10, \u201cALTER TABLESPACE Statement\u201d).\n",
                "\n\nNote\n\n\n        All NDB Cluster Disk Data objects share the same namespace. This\n        means that each Disk Data object must be\n        uniquely named (and not merely each Disk Data object of a given\n        type). For example, you cannot have a tablespace and a log file\n        group with the same name, or a tablespace and a data file with\n        the same name.\n\n",
                "\n      A log file group of one or more UNDO log files\n      must be assigned to the tablespace to be created with the\n      USE LOGFILE GROUP clause.\n      logfile_group must be an existing log\n      file group created with CREATE LOGFILE\n      GROUP (see Section\u00a015.1.16, \u201cCREATE LOGFILE GROUP Statement\u201d).\n      Multiple tablespaces may use the same log file group for\n      UNDO logging.\n    ",
                "\n      When setting EXTENT_SIZE or\n      INITIAL_SIZE, you may optionally follow the\n      number with a one-letter abbreviation for an order of magnitude,\n      similar to those used in my.cnf. Generally,\n      this is one of the letters M (for megabytes) or\n      G (for gigabytes).\n    ",
                "\nINITIAL_SIZE and EXTENT_SIZE\n      are subject to rounding as follows:\n",
                "\n\nEXTENT_SIZE is rounded up to the nearest\n          whole multiple of 32K.\n        \nINITIAL_SIZE is rounded\n          down to the nearest whole multiple of\n          32K; this result is rounded up to the nearest whole multiple\n          of EXTENT_SIZE (after any rounding).\n\n",
                "\n\nNote\n\n\nNDB reserves 4% of a tablespace for\n        data node restart operations. This reserved space cannot be used\n        for data storage.\n\n",
                "\n      The rounding just described is done explicitly, and a warning is\n      issued by the MySQL Server when any such rounding is performed.\n      The rounded values are also used by the NDB kernel for calculating\n      INFORMATION_SCHEMA.FILES column\n      values and other purposes. However, to avoid an unexpected result,\n      we suggest that you always use whole multiples of 32K in\n      specifying these options.\n    ",
                "\n      When CREATE TABLESPACE is used with\n      ENGINE [=] NDB, a tablespace and associated\n      data file are created on each Cluster data node. You can verify\n      that the data files were created and obtain information about them\n      by querying the Information Schema\n      FILES table. (See the example later\n      in this section.)\n    ",
                "\n      (See Section\u00a028.3.15, \u201cThe INFORMATION_SCHEMA FILES Table\u201d.)\n"
            ]
        },
        {
            "Sub-title": "Options",
            "Illustration": [
                "\n\nADD DATAFILE: Defines the name of a\n          tablespace data file. This option is always required when\n          creating an NDB tablespace; for\n          InnoDB, it is required only when creating\n          an undo tablespace. The\n          file_name,\n          including any specified path, must be quoted with single or\n          double quotation marks. File names (not counting the file\n          extension) and directory names must be at least one byte in\n          length. Zero length file names and directory names are not\n          supported.\n        \n          Because there are considerable differences in how\n          InnoDB and NDB treat\n          data files, the two storage engines are covered separately in\n          the discussion that follows.\n        InnoDB data files.\u00a0\n            An InnoDB tablespace supports only a\n            single data file, whose name must include an\n            .ibd extension.\n          \n          To place an InnoDB general tablespace data\n          file in a location outside of the data directory, include a\n          fully qualified path or a path relative to the data directory.\n          Only a fully qualified path is permitted for undo tablespaces.\n          If you do not specify a path, a general tablespace is created\n          in the data directory. An undo tablespace created without\n          specifying a path is created in the directory defined by the\n          innodb_undo_directory\n          variable. If innodb_undo_directory is not\n          set, undo tablespaces are created in the data directory.\n        \n          To avoid conflicts with implicitly created file-per-table\n          tablespaces, creating an InnoDB general\n          tablespace in a subdirectory under the data directory is not\n          supported. When creating a general tablespace or undo\n          tablespace outside of the data directory, the directory must\n          exist and must be known to InnoDB prior to\n          creating the tablespace. To make a directory known to\n          InnoDB, add it to the\n          innodb_directories value or\n          to one of the variables whose values are appended to the value\n          of innodb_directories.\n          innodb_directories is a read-only variable.\n          Configuring it requires restarting the server.\n        \n          If the ADD DATAFILE clause is not specified\n          when creating an InnoDB tablespace, a\n          tablespace data file with a unique file name is created\n          implicitly. The unique file name is a 128 bit UUID formatted\n          into five groups of hexadecimal numbers separated by dashes\n          (aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee).\n          A file extension is added if required by the storage engine.\n          An .ibd file extension is added for\n          InnoDB general tablespace data files. In a\n          replication environment, the data file name created on the\n          replication source server is not the same as the data file\n          name created on the replica.\n        \n          The ADD DATAFILE clause does not permit\n          circular directory references when creating an\n          InnoDB tablespace. For example, the\n          circular directory reference (/../) in the\n          following statement is not permitted:\n        Press CTRL+C to copy CREATE TABLESPACE ts1 ADD DATAFILE ts1.ibd 'any_directory/../ts1.ibd';\n          An exception to this restriction exists on Linux, where a\n          circular directory reference is permitted if the preceding\n          directory is a symbolic link. For example, the data file path\n          in the example above is permitted if\n          any_directory is a symbolic link.\n          (It is still permitted for data file paths to begin with\n          '../'.)\n        NDB data files.\u00a0\n            An NDB tablespace supports multiple data\n            files which can have any legal file names; more data files\n            can be added to an NDB Cluster tablespace following its\n            creation by using an ALTER\n            TABLESPACE statement.\n          \n          An NDB tablespace data file is created by\n          default in the data node file system directory\u2014that is,\n          the directory named\n          ndb_nodeid_fs/TS\n          under the data node's data directory\n          (DataDir), where\n          nodeid is the data node's\n          NodeId. To place the\n          data file in a location other than the default, include an\n          absolute directory path or a path relative to the default\n          location. If the directory specified does not exist,\n          NDB attempts to create it; the system user\n          account under which the data node process is running must have\n          the appropriate permissions to do so.\n\n\n\nNote\n\n\n            When determining the path used for a data file,\n            NDB does not expand the\n            ~ (tilde) character.\n\n\n\n          When multiple data nodes are run on the same physical host,\n          the following considerations apply:\n\n\n\n              You cannot specify an absolute path when creating a data\n              file.\n            \n              It is not possible to create tablespace data files outside\n              the data node file system directory, unless each data node\n              has a separate data directory.\n            \n              If each data node has its own data directory, data files\n              can be created anywhere within this directory.\n            \n              If each data node has its own data directory, it may also\n              be possible to create a data file outside the node's\n              data directory using a relative path, as long as this path\n              resolves to a unique location on the host file system for\n              each data node running on that host.\n\n\n\nFILE_BLOCK_SIZE: This option\u2014which is\n          specific to InnoDB general tablespaces, and\n          is ignored by NDB\u2014defines the block\n          size for the tablespace data file. Values can be specified in\n          bytes or kilobytes. For example, an 8 kilobyte file block size\n          can be specified as 8192 or 8K. If you do not specify this\n          option, FILE_BLOCK_SIZE defaults to the\n          innodb_page_size value.\n          FILE_BLOCK_SIZE is required when you intend\n          to use the tablespace for storing compressed\n          InnoDB tables\n          (ROW_FORMAT=COMPRESSED). In this case, you\n          must define the tablespace FILE_BLOCK_SIZE\n          when creating the tablespace.\n        \n          If FILE_BLOCK_SIZE is equal the\n          innodb_page_size value, the\n          tablespace can contain only tables having an uncompressed row\n          format (COMPACT,\n          REDUNDANT, and DYNAMIC).\n          Tables with a COMPRESSED row format have a\n          different physical page size than uncompressed tables.\n          Therefore, compressed tables cannot coexist in the same\n          tablespace as uncompressed tables.\n        \n          For a general tablespace to contain compressed tables,\n          FILE_BLOCK_SIZE must be specified, and the\n          FILE_BLOCK_SIZE value must be a valid\n          compressed page size in relation to the\n          innodb_page_size value. Also,\n          the physical page size of the compressed table\n          (KEY_BLOCK_SIZE) must be equal to\n          FILE_BLOCK_SIZE/1024. For example, if\n          innodb_page_size=16K, and\n          FILE_BLOCK_SIZE=8K, the\n          KEY_BLOCK_SIZE of the table must be 8. For\n          more information, see Section\u00a017.6.3.3, \u201cGeneral Tablespaces\u201d.\n        \nUSE LOGFILE GROUP: Required for\n          NDB, this is the name of a log file group\n          previously created using CREATE LOGFILE\n          GROUP. Not supported for InnoDB,\n          where it fails with an error.\n        \nEXTENT_SIZE: This option is specific to\n          NDB, and is not supported by InnoDB, where it fails with an\n          error. EXTENT_SIZE sets the size, in bytes,\n          of the extents used by any files belonging to the tablespace.\n          The default value is 1M. The minimum size is 32K, and\n          theoretical maximum is 2G, although the practical maximum size\n          depends on a number of factors. In most cases, changing the\n          extent size does not have any measurable effect on\n          performance, and the default value is recommended for all but\n          the most unusual situations.\n        \n          An extent is a unit of\n          disk space allocation. One extent is filled with as much data\n          as that extent can contain before another extent is used. In\n          theory, up to 65,535 (64K) extents may used per data file;\n          however, the recommended maximum is 32,768 (32K). The\n          recommended maximum size for a single data file is\n          32G\u2014that is, 32K extents \u00d7 1 MB per extent. In\n          addition, once an extent is allocated to a given partition, it\n          cannot be used to store data from a different partition; an\n          extent cannot store data from more than one partition. This\n          means, for example that a tablespace having a single datafile\n          whose INITIAL_SIZE (described in the\n          following item) is 256 MB and whose\n          EXTENT_SIZE is 128M has just two extents,\n          and so can be used to store data from at most two different\n          disk data table partitions.\n        \n          You can see how many extents remain free in a given data file\n          by querying the Information Schema\n          FILES table, and so derive an\n          estimate for how much space remains free in the file. For\n          further discussion and examples, see\n          Section\u00a028.3.15, \u201cThe INFORMATION_SCHEMA FILES Table\u201d.\n        \nINITIAL_SIZE: This option is specific to\n          NDB, and is not supported by\n          InnoDB, where it fails with an error.\n        \n          The INITIAL_SIZE parameter sets the total\n          size in bytes of the data file that was specific using\n          ADD DATATFILE. Once this file has been\n          created, its size cannot be changed; however, you can add more\n          data files to the tablespace using\n          ALTER\n          TABLESPACE ... ADD DATAFILE.\n        \nINITIAL_SIZE is optional; its default value\n          is 134217728 (128 MB).\n        \n          On 32-bit systems, the maximum supported value for\n          INITIAL_SIZE is 4294967296 (4 GB).\n        \nAUTOEXTEND_SIZE: Defines the amount by\n          which InnoDB extends the size of the\n          tablespace when it becomes full. The setting must be a\n          multiple of 4MB. The default setting is 0, which causes the\n          tablespace to be extended according to the implicit default\n          behavior. For more information, see\n          Section\u00a017.6.3.9, \u201cTablespace AUTOEXTEND_SIZE Configuration\u201d.\n        \n          Has no effect in any release of MySQL NDB Cluster, regardless\n          of the storage engine used.\n        \nMAX_SIZE: Currently ignored by MySQL;\n          reserved for possible future use. Has no effect in any release\n          of MySQL or MySQL NDB Cluster, regardless of the storage\n          engine used.\n        \nNODEGROUP: Currently ignored by MySQL;\n          reserved for possible future use. Has no effect in any release\n          of MySQL or MySQL NDB Cluster, regardless of the storage\n          engine used.\n        \nWAIT: Currently ignored by MySQL; reserved\n          for possible future use. Has no effect in any release of MySQL\n          or MySQL NDB Cluster, regardless of the storage engine used.\n        \nCOMMENT: Currently ignored by MySQL;\n          reserved for possible future use. Has no effect in any release\n          of MySQL or MySQL NDB Cluster, regardless of the storage\n          engine used.\n        \n          The ENCRYPTION clause enables or disables\n          page-level data encryption for an InnoDB\n          general tablespace.\n        \n          If the ENCRYPTION clause is not specified,\n          the default_table_encryption\n          setting controls whether encryption is enabled. The\n          ENCRYPTION clause overrides the\n          default_table_encryption\n          setting. However, if the\n          table_encryption_privilege_check\n          variable is enabled, the\n          TABLE_ENCRYPTION_ADMIN\n          privilege is required to use an ENCRYPTION\n          clause setting that differs from the\n          default_table_encryption\n          setting.\n        \n          A keyring plugin must be installed and configured before an\n          encryption-enabled tablespace can be created.\n        \n          When a general tablespace is encrypted, all tables residing in\n          the tablespace are encrypted. Likewise, a table created in an\n          encrypted tablespace is encrypted.\n        \n          For more information, see\n          Section\u00a017.13, \u201cInnoDB Data-at-Rest Encryption\u201d\n\nENGINE: Defines the storage engine which\n          uses the tablespace, where\n          engine_name is the name of the\n          storage engine. Currently, only the InnoDB\n          storage engine is supported by standard MySQL 8.4\n          releases. MySQL NDB Cluster supports both\n          NDB and InnoDB\n          tablespaces. The value of the\n          default_storage_engine system\n          variable is used for ENGINE if the option\n          is not specified.\n        \n          The ENGINE_ATTRIBUTE option is used to\n          specify tablespace attributes for primary storage engines. The\n          option is reserved for future use.\n        \n          The value assigned to this option must be a string literal\n          containing a valid JSON document or an empty string ('').\n          Invalid JSON is rejected.\n        Press CTRL+C to copy CREATE TABLESPACE ts1 ENGINE_ATTRIBUTE='{\"key\":\"value\"}';\nENGINE_ATTRIBUTE values can be repeated\n          without error. In this case, the last specified value is used.\n        \nENGINE_ATTRIBUTE values are not checked by\n          the server, nor are they cleared when the table's storage\n          engine is changed.\n\n"
            ]
        },
        {
            "Sub-title": "Notes",
            "Illustration": [
                "\n\n          For the rules covering the naming of MySQL tablespaces, see\n          Section\u00a011.2, \u201cSchema Object Names\u201d. In addition to these rules, the\n          slash character (\u201c/\u201d) is not permitted, nor can\n          you use names beginning with innodb_, as\n          this prefix is reserved for system use.\n        \n          Creation of temporary general tablespaces is not supported.\n        \n          General tablespaces do not support temporary tables.\n        \n          The TABLESPACE option may be used with\n          CREATE TABLE or\n          ALTER TABLE to assign an\n          InnoDB table partition or subpartition to a\n          file-per-table tablespace. All partitions must belong to the\n          same storage engine. Assigning table partitions to shared\n          InnoDB tablespaces is not supported. Shared\n          tablespaces include the InnoDB system\n          tablespace and general tablespaces.\n        \n          General tablespaces support the addition of tables of any row\n          format using\n          CREATE TABLE ...\n          TABLESPACE.\n          innodb_file_per_table does\n          not need to be enabled.\n        \ninnodb_strict_mode is not\n          applicable to general tablespaces. Tablespace management rules\n          are strictly enforced independently of\n          innodb_strict_mode. If\n          CREATE TABLESPACE parameters are incorrect\n          or incompatible, the operation fails regardless of the\n          innodb_strict_mode setting.\n          When a table is added to a general tablespace using\n          CREATE TABLE ...\n          TABLESPACE or\n          ALTER TABLE ...\n          TABLESPACE,\n          innodb_strict_mode is ignored\n          but the statement is evaluated as if\n          innodb_strict_mode is\n          enabled.\n        \n          Use DROP TABLESPACE to remove a tablespace.\n          All tables must be dropped from a tablespace using\n          DROP TABLE prior to dropping\n          the tablespace. Before dropping an NDB Cluster tablespace you\n          must also remove all its data files using one or more\n          ALTER\n          TABLESPACE ... DROP DATATFILE statements. See\n          Section\u00a025.6.11.1, \u201cNDB Cluster Disk Data Objects\u201d.\n        \n          All parts of an InnoDB table added to an\n          InnoDB general tablespace reside in the\n          general tablespace, including indexes and\n          BLOB pages.\n        \n          For an NDB table assigned to a tablespace,\n          only those columns which are not indexed are stored on disk,\n          and actually use the tablespace data files. Indexes and\n          indexed columns for all NDB tables are\n          always kept in memory.\n        \n          Similar to the system tablespace, truncating or dropping\n          tables stored in a general tablespace creates free space\n          internally in the general tablespace\n          .ibd data file which can\n          only be used for new InnoDB data. Space is\n          not released back to the operating system as it is for\n          file-per-table tablespaces.\n        \n          A general tablespace is not associated with any database or\n          schema.\n        \nALTER TABLE ...\n          DISCARD TABLESPACE and\n          ALTER TABLE\n          ...IMPORT TABLESPACE are not supported for tables\n          that belong to a general tablespace.\n        \n          The server uses tablespace-level metadata locking for DDL that\n          references general tablespaces. By comparison, the server uses\n          table-level metadata locking for DDL that references\n          file-per-table tablespaces.\n        \n          A generated or existing tablespace cannot be changed to a\n          general tablespace.\n        \n          There is no conflict between general tablespace names and\n          file-per-table tablespace names. The \u201c/\u201d\n          character, which is present in file-per-table tablespace\n          names, is not permitted in general tablespace names.\n        \nmysqldump does not dump\n          InnoDB CREATE\n          TABLESPACE statements.\n\n"
            ]
        },
        {
            "Sub-title": "InnoDB Examples",
            "Illustration": [
                "\n      This example demonstrates creating a general tablespace and adding\n      three uncompressed tables of different row formats.\n    ",
                "Press CTRL+C to copy mysql> CREATE TABLESPACE `ts1` ADD DATAFILE 'ts1.ibd' ENGINE=INNODB;\n\nmysql> CREATE TABLE t1 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=REDUNDANT;\n\nmysql> CREATE TABLE t2 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=COMPACT;\n\nmysql> CREATE TABLE t3 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=DYNAMIC;",
                "\n      This example demonstrates creating a general tablespace and adding\n      a compressed table. The example assumes a default\n      innodb_page_size value of 16K.\n      The FILE_BLOCK_SIZE of 8192 requires that the\n      compressed table have a KEY_BLOCK_SIZE of 8.\n    ",
                "Press CTRL+C to copy mysql> CREATE TABLESPACE `ts2` ADD DATAFILE 'ts2.ibd' FILE_BLOCK_SIZE = 8192 ENGINE=InnoDB;\n\nmysql> CREATE TABLE t4 (c1 INT PRIMARY KEY) TABLESPACE ts2 ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;",
                "\n      This example demonstrates creating a general tablespace without\n      specifying the ADD DATAFILE clause, which is\n      optional:\n    ",
                "Press CTRL+C to copy mysql> CREATE TABLESPACE `ts3` ENGINE=INNODB;",
                "\n      This example demonstrates creating an undo tablespace:\n    ",
                "Press CTRL+C to copy mysql> CREATE UNDO TABLESPACE undo_003 ADD DATAFILE 'undo_003.ibu';"
            ]
        },
        {
            "Sub-title": "NDB Example",
            "Illustration": [
                "\n      Suppose that you wish to create an NDB Cluster Disk Data\n      tablespace named myts using a datafile named\n      mydata-1.dat. An NDB\n      tablespace always requires the use of a log file group consisting\n      of one or more undo log files. For this example, we first create a\n      log file group named mylg that contains one\n      undo long file named myundo-1.dat, using the\n      CREATE LOGFILE GROUP statement\n      shown here:\n    ",
                "Press CTRL+C to copy mysql> CREATE LOGFILE GROUP myg1\n    ->     ADD UNDOFILE 'myundo-1.dat'\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (3.29 sec)",
                "\n      Now you can create the tablespace previously described using the\n      following statement:\n    ",
                "Press CTRL+C to copy mysql> CREATE TABLESPACE myts\n    ->     ADD DATAFILE 'mydata-1.dat'\n    ->     USE LOGFILE GROUP mylg\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (2.98 sec)",
                "\n      You can now create a Disk Data table using a\n      CREATE TABLE statement with the\n      TABLESPACE and STORAGE DISK\n      options, similar to what is shown here:\n    ",
                "Press CTRL+C to copy mysql> CREATE TABLE mytable (\n    ->     id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    ->     lname VARCHAR(50) NOT NULL,\n    ->     fname VARCHAR(50) NOT NULL,\n    ->     dob DATE NOT NULL,\n    ->     joined DATE NOT NULL,\n    ->     INDEX(last_name, first_name)\n    -> )\n    ->     TABLESPACE myts STORAGE DISK\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (1.41 sec)",
                "\n      It is important to note that only the dob and\n      joined columns from mytable\n      are actually stored on disk, due to the fact that the\n      id, lname, and\n      fname columns are all indexed.\n    ",
                "\n      As mentioned previously, when CREATE TABLESPACE\n      is used with ENGINE [=] NDB, a tablespace and\n      its associated data file are created on each NDB Cluster data\n      node. You can verify that the data files were created and obtain\n      information about them by querying the Information Schema\n      FILES table, as shown here:\n    ",
                "Press CTRL+C to copy mysql> SELECT FILE_NAME, FILE_TYPE, LOGFILE_GROUP_NAME, STATUS, EXTRA\n    ->     FROM INFORMATION_SCHEMA.FILES\n    ->     WHERE TABLESPACE_NAME = 'myts';\n\n+--------------+------------+--------------------+--------+----------------+\n| file_name    | file_type  | logfile_group_name | status | extra          |\n+--------------+------------+--------------------+--------+----------------+\n| mydata-1.dat | DATAFILE   | mylg               | NORMAL | CLUSTER_NODE=5 |\n| mydata-1.dat | DATAFILE   | mylg               | NORMAL | CLUSTER_NODE=6 |\n| NULL         | TABLESPACE | mylg               | NORMAL | NULL           |\n+--------------+------------+--------------------+--------+----------------+\n3 rows in set (0.01 sec)",
                "\n      For additional information and examples, see\n      Section\u00a025.6.11.1, \u201cNDB Cluster Disk Data Objects\u201d.\n"
            ]
        }
    ],
    "Examples": [
        "CREATE TABLESPACE ts1 ADD DATAFILE ts1.ibd 'any_directory/../ts1.ibd';",
        "CREATE TABLESPACE ts1 ENGINE_ATTRIBUTE='{\"key\":\"value\"}';",
        "mysql> CREATE TABLESPACE `ts1` ADD DATAFILE 'ts1.ibd' ENGINE=INNODB;\n\nmysql> CREATE TABLE t1 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=REDUNDANT;\n\nmysql> CREATE TABLE t2 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=COMPACT;\n\nmysql> CREATE TABLE t3 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=DYNAMIC;",
        "mysql> CREATE TABLESPACE `ts2` ADD DATAFILE 'ts2.ibd' FILE_BLOCK_SIZE = 8192 ENGINE=InnoDB;\n\nmysql> CREATE TABLE t4 (c1 INT PRIMARY KEY) TABLESPACE ts2 ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;",
        "mysql> CREATE TABLESPACE `ts3` ENGINE=INNODB;",
        "mysql> CREATE UNDO TABLESPACE undo_003 ADD DATAFILE 'undo_003.ibu';",
        "mysql> CREATE LOGFILE GROUP myg1\n    ->     ADD UNDOFILE 'myundo-1.dat'\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (3.29 sec)",
        "mysql> CREATE TABLESPACE myts\n    ->     ADD DATAFILE 'mydata-1.dat'\n    ->     USE LOGFILE GROUP mylg\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (2.98 sec)",
        "mysql> CREATE TABLE mytable (\n    ->     id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    ->     lname VARCHAR(50) NOT NULL,\n    ->     fname VARCHAR(50) NOT NULL,\n    ->     dob DATE NOT NULL,\n    ->     joined DATE NOT NULL,\n    ->     INDEX(last_name, first_name)\n    -> )\n    ->     TABLESPACE myts STORAGE DISK\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (1.41 sec)",
        "mysql> SELECT FILE_NAME, FILE_TYPE, LOGFILE_GROUP_NAME, STATUS, EXTRA\n    ->     FROM INFORMATION_SCHEMA.FILES\n    ->     WHERE TABLESPACE_NAME = 'myts';\n\n+--------------+------------+--------------------+--------+----------------+\n| file_name    | file_type  | logfile_group_name | status | extra          |\n+--------------+------------+--------------------+--------+----------------+\n| mydata-1.dat | DATAFILE   | mylg               | NORMAL | CLUSTER_NODE=5 |\n| mydata-1.dat | DATAFILE   | mylg               | NORMAL | CLUSTER_NODE=6 |\n| NULL         | TABLESPACE | mylg               | NORMAL | NULL           |\n+--------------+------------+--------------------+--------+----------------+\n3 rows in set (0.01 sec)"
    ],
    "Category": [
        "Data Definition Statements"
    ]
}