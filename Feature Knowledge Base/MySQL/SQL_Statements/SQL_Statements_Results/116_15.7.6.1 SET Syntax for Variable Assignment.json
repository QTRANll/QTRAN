{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/set-variable.html"
    ],
    "Title": [
        "15.7.6.1 SET Syntax for Variable Assignment"
    ],
    "Feature": [
        "SET variable = expr [, variable = expr] ...\n\nvariable: {\n    user_var_name\n  | param_name\n  | local_var_name\n  | {GLOBAL | @@GLOBAL.} system_var_name\n  | {PERSIST | @@PERSIST.} system_var_name\n  | {PERSIST_ONLY | @@PERSIST_ONLY.} system_var_name\n  | [SESSION | @@SESSION. | @@] system_var_name\n}"
    ],
    "Description": [
        "\nSET\n        syntax for variable assignment enables you to assign values to\n        different types of variables that affect the operation of the\n        server or clients:\n",
        "\n\n            User-defined variables. See\n            Section\u00a011.4, \u201cUser-Defined Variables\u201d.\n          \n            Stored procedure and function parameters, and stored program\n            local variables. See\n            Section\u00a015.6.4, \u201cVariables in Stored Programs\u201d.\n          \n            System variables. See\n            Section\u00a07.1.8, \u201cServer System Variables\u201d. System variables\n            also can be set at server startup, as described in\n            Section\u00a07.1.9, \u201cUsing System Variables\u201d.\n\n",
        "\n        A SET\n        statement that assigns variable values is not written to the\n        binary log, so in replication scenarios it affects only the host\n        on which you execute it. To affect all replication hosts,\n        execute the statement on each host.\n      ",
        "\n        The following sections describe\n        SET\n        syntax for setting variables. They use the\n        =\n        assignment operator, but the\n        :=\n        assignment operator is also permitted for this purpose.\n",
        "\nUser-Defined Variable AssignmentParameter and Local Variable AssignmentSystem Variable AssignmentSET Error HandlingMultiple Variable AssignmentSystem Variable References in Expressions\n",
        "\n\n\n\nUser-Defined Variable Assignment\n\n\n\n\n          User-defined variables are created locally within a session\n          and exist only within the context of that session; see\n          Section\u00a011.4, \u201cUser-Defined Variables\u201d.\n        \n          A user-defined variable is written as\n          @var_name and is\n          assigned an expression value as follows:\n        Press CTRL+C to copy SET @var_name = expr;\n          Examples:\n        Press CTRL+C to copy SET @name = 43;\nSET @total_tax = (SELECT SUM(tax) FROM taxable_transactions);\n          As demonstrated by those statements,\n          expr can range from simple (a\n          literal value) to more complex (the value returned by a scalar\n          subquery).\n        \n          The Performance Schema\n          user_variables_by_thread table\n          contains information about user-defined variables. See\n          Section\u00a029.12.10, \u201cPerformance Schema User-Defined Variable Tables\u201d.\n\n",
        "\n\n\n\nParameter and Local Variable Assignment\n\n\n\n\nSET\n          applies to parameters and local variables in the context of\n          the stored object within which they are defined. The following\n          procedure uses the increment procedure\n          parameter and counter local variable:\n        Press CTRL+C to copy CREATE PROCEDURE p(increment INT)\nBEGIN\n  DECLARE counter INT DEFAULT 0;\n  WHILE counter < 10 DO\n    -- ... do work ...\n    SET counter = counter + increment;\n  END WHILE;\nEND;\n",
        "\n\n\n\nSystem Variable Assignment\n\n\n\n\n          The MySQL server maintains system variables that configure its\n          operation. A system variable can have a global value that\n          affects server operation as a whole, a session value that\n          affects the current session, or both. Many system variables\n          are dynamic and can be changed at runtime using the\n          SET\n          statement to affect operation of the current server instance.\n          SET\n          can also be used to persist certain system variables to the\n          mysqld-auto.cnf file in the data\n          directory, to affect server operation for subsequent startups.\n        \n          If a SET statement is issued for a\n          sensitive system variable, the query is rewritten to replace\n          the value with \u201c<redacted>\u201d\n          before it is logged to the general log and audit log. This\n          takes place even if secure storage through a keyring component\n          is not available on the server instance.\n        \n          If you change a session system variable, the value remains in\n          effect within your session until you change the variable to a\n          different value or the session ends. The change has no effect\n          on other sessions.\n        \n          If you change a global system variable, the value is\n          remembered and used to initialize the session value for new\n          sessions until you change the variable to a different value or\n          the server exits. The change is visible to any client that\n          accesses the global value. However, the change affects the\n          corresponding session value only for clients that connect\n          after the change. The global variable change does not affect\n          the session value for any current client sessions (not even\n          the session within which the global value change occurs).\n        \n          To make a global system variable setting permanent so that it\n          applies across server restarts, you can persist it to the\n          mysqld-auto.cnf file in the data\n          directory. It is also possible to make persistent\n          configuration changes by manually modifying a\n          my.cnf option file, but that is more\n          cumbersome, and an error in a manually entered setting might\n          not be discovered until much later.\n          SET\n          statements that persist system variables are more convenient\n          and avoid the possibility of malformed settings because\n          settings with syntax errors do not succeed and do not change\n          server configuration. For more information about persisting\n          system variables and the mysqld-auto.cnf\n          file, see Section\u00a07.1.9.3, \u201cPersisted System Variables\u201d.\n\n\n\nNote\n\n\n            Setting or persisting a global system variable value always\n            requires special privileges. Setting a session system\n            variable value normally requires no special privileges and\n            can be done by any user, although there are exceptions. For\n            more information, see\n            Section\u00a07.1.9.1, \u201cSystem Variable Privileges\u201d.\n\n\n\n          The following discussion describes the syntax options for\n          setting and persisting system variables:\n\n\n\n              To assign a value to a global system variable, precede the\n              variable name by the GLOBAL keyword or\n              the @@GLOBAL. qualifier:\n            Press CTRL+C to copy SET GLOBAL max_connections = 1000;\nSET @@GLOBAL.max_connections = 1000;\n              To assign a value to a session system variable, precede\n              the variable name by the SESSION or\n              LOCAL keyword, by the\n              @@SESSION.,\n              @@LOCAL., or @@\n              qualifier, or by no keyword or no modifier at all:\n            Press CTRL+C to copy SET SESSION sql_mode = 'TRADITIONAL';\nSET LOCAL sql_mode = 'TRADITIONAL';\nSET @@SESSION.sql_mode = 'TRADITIONAL';\nSET @@LOCAL.sql_mode = 'TRADITIONAL';\nSET @@sql_mode = 'TRADITIONAL';\nSET sql_mode = 'TRADITIONAL';\n              A client can change its own session variables, but not\n              those of any other client.\n            \n              To persist a global system variable to the\n              mysqld-auto.cnf option file in the\n              data directory, precede the variable name by the\n              PERSIST keyword or the\n              @@PERSIST. qualifier:\n            Press CTRL+C to copy SET PERSIST max_connections = 1000;\nSET @@PERSIST.max_connections = 1000;\n              This\n              SET\n              syntax enables you to make configuration changes at\n              runtime that also persist across server restarts. Like\n              SET\n              GLOBAL,\n              SET\n              PERSIST sets the global variable runtime value,\n              but also writes the variable setting to the\n              mysqld-auto.cnf file (replacing any\n              existing variable setting if there is one).\n            \n              To persist a global system variable to the\n              mysqld-auto.cnf file without setting\n              the global variable runtime value, precede the variable\n              name by the PERSIST_ONLY keyword or the\n              @@PERSIST_ONLY. qualifier:\n            Press CTRL+C to copy SET PERSIST_ONLY back_log = 100;\nSET @@PERSIST_ONLY.back_log = 100;\n              Like PERSIST,\n              PERSIST_ONLY writes the variable\n              setting to mysqld-auto.cnf. However,\n              unlike PERSIST,\n              PERSIST_ONLY does not modify the global\n              variable runtime value. This makes\n              PERSIST_ONLY suitable for configuring\n              read-only system variables that can be set only at server\n              startup.\n\n\n\n          To set a global system variable value to the compiled-in MySQL\n          default value or a session system variable to the current\n          corresponding global value, set the variable to the value\n          DEFAULT. For example, the following two\n          statements are identical in setting the session value of\n          max_join_size to the current\n          global value:\n        Press CTRL+C to copy SET @@SESSION.max_join_size = DEFAULT;\nSET @@SESSION.max_join_size = @@GLOBAL.max_join_size;\n          Using\n          SET to\n          persist a global system variable to a value of\n          DEFAULT or to its literal default value\n          assigns the variable its default value and adds a setting for\n          the variable to mysqld-auto.cnf. To\n          remove the variable from the file, use\n          RESET PERSIST.\n        \n          Some system variables cannot be persisted or are\n          persist-restricted. See\n          Section\u00a07.1.9.4, \u201cNonpersistible and Persist-Restricted System Variables\u201d.\n        \n          A system variable implemented by a plugin can be persisted if\n          the plugin is installed when the\n          SET\n          statement is executed. Assignment of the persisted plugin\n          variable takes effect for subsequent server restarts if the\n          plugin is still installed. If the plugin is no longer\n          installed, the plugin variable no longer exists when the\n          server reads the mysqld-auto.cnf file. In\n          this case, the server writes a warning to the error log and\n          continues:\n        Press CTRL+C to copy currently unknown variable 'var_name'\nwas read from the persisted config file\n          To display system variable names and values:\n\n\n\n              Use the SHOW VARIABLES\n              statement; see Section\u00a015.7.7.40, \u201cSHOW VARIABLES Statement\u201d.\n            \n              Several Performance Schema tables provide system variable\n              information. See\n              Section\u00a029.12.14, \u201cPerformance Schema System Variable Tables\u201d.\n            \n              The Performance Schema\n              variables_info table contains\n              information showing when and by which user each system\n              variable was most recently set. See\n              Section\u00a029.12.14.2, \u201cPerformance Schema variables_info Table\u201d.\n            \n              The Performance Schema\n              persisted_variables table\n              provides an SQL interface to the\n              mysqld-auto.cnf file, enabling its\n              contents to be inspected at runtime using\n              SELECT statements. See\n              Section\u00a029.12.14.1, \u201cPerformance Schema persisted_variables Table\u201d.\n\n\n",
        "\n\n\n\nSET Error Handling\n\n\n\n\n          If any variable assignment in a\n          SET\n          statement fails, the entire statement fails and no variables\n          are changed, nor is the mysqld-auto.cnf\n          file changed.\n        \nSET\n          produces an error under the circumstances described here. Most\n          of the examples show\n          SET\n          statements that use keyword syntax (for example,\n          GLOBAL or SESSION), but\n          the principles are also true for statements that use the\n          corresponding modifiers (for example,\n          @@GLOBAL. or\n          @@SESSION.).\n\n\n\n              Use of\n              SET\n              (any variant) to set a read-only variable:\n            Press CTRL+C to copy mysql> SET GLOBAL version = 'abc';\nERROR 1238 (HY000): Variable 'version' is a read only variable\n              Use of GLOBAL,\n              PERSIST, or\n              PERSIST_ONLY to set a variable that has\n              only a session value:\n            Press CTRL+C to copy mysql> SET GLOBAL sql_log_bin = ON;\nERROR 1228 (HY000): Variable 'sql_log_bin' is a SESSION\nvariable and can't be used with SET GLOBAL\n              Use of SESSION to set a variable that\n              has only a global value:\n            Press CTRL+C to copy mysql> SET SESSION max_connections = 1000;\nERROR 1229 (HY000): Variable 'max_connections' is a\nGLOBAL variable and should be set with SET GLOBAL\n              Omission of GLOBAL,\n              PERSIST, or\n              PERSIST_ONLY to set a variable that has\n              only a global value:\n            Press CTRL+C to copy mysql> SET max_connections = 1000;\nERROR 1229 (HY000): Variable 'max_connections' is a\nGLOBAL variable and should be set with SET GLOBAL\n              Use of PERSIST or\n              PERSIST_ONLY to set a variable that\n              cannot be persisted:\n            Press CTRL+C to copy mysql> SET PERSIST port = 3307;\nERROR 1238 (HY000): Variable 'port' is a read only variable\nmysql> SET PERSIST_ONLY port = 3307;\nERROR 1238 (HY000): Variable 'port' is a non persistent read only variable\n              The @@GLOBAL.,\n              @@PERSIST.,\n              @@PERSIST_ONLY.,\n              @@SESSION., and @@\n              modifiers apply only to system variables. An error occurs\n              for attempts to apply them to user-defined variables,\n              stored procedure or function parameters, or stored program\n              local variables.\n            \n              Not all system variables can be set to\n              DEFAULT. In such cases, assigning\n              DEFAULT results in an error.\n            \n              An error occurs for attempts to assign\n              DEFAULT to user-defined variables,\n              stored procedure or function parameters, or stored program\n              local variables.\n\n\n",
        "\n\n\n\nMultiple Variable Assignment\n\n\n\n\n          A SET\n          statement can contain multiple variable assignments, separated\n          by commas. This statement assigns values to a user-defined\n          variable and a system variable:\n        Press CTRL+C to copy SET @x = 1, SESSION sql_mode = '';\n          If you set multiple system variables in a single statement,\n          the most recent GLOBAL,\n          PERSIST, PERSIST_ONLY,\n          or SESSION keyword in the statement is used\n          for following assignments that have no keyword specified.\n        \n          Examples of multiple-variable assignment:\n        Press CTRL+C to copy SET GLOBAL sort_buffer_size = 1000000, SESSION sort_buffer_size = 1000000;\nSET @@GLOBAL.sort_buffer_size = 1000000, @@LOCAL.sort_buffer_size = 1000000;\nSET GLOBAL max_connections = 1000, sort_buffer_size = 1000000;\n          The @@GLOBAL.,\n          @@PERSIST.,\n          @@PERSIST_ONLY.,\n          @@SESSION., and @@\n          modifiers apply only to the immediately following system\n          variable, not any remaining system variables. This statement\n          sets the sort_buffer_size\n          global value to 50000 and the session value to 1000000:\n        Press CTRL+C to copy SET @@GLOBAL.sort_buffer_size = 50000, sort_buffer_size = 1000000;\n",
        "\n\n\n\nSystem Variable References in Expressions\n\n\n\n\n          To refer to the value of a system variable in expressions, use\n          one of the @@-modifiers (except\n          @@PERSIST. and\n          @@PERSIST_ONLY., which are not permitted in\n          expressions). For example, you can retrieve system variable\n          values in a SELECT statement\n          like this:\n        Press CTRL+C to copy SELECT @@GLOBAL.sql_mode, @@SESSION.sql_mode, @@sql_mode;\n\n\nNote\n\n\n            A reference to a system variable in an expression as\n            @@var_name\n            (with @@ rather than\n            @@GLOBAL. or\n            @@SESSION.) returns the session value if\n            it exists and the global value otherwise. This differs from\n            SET @@var_name =\n            expr, which always\n            refers to the session value.\n\n\n"
    ],
    "Examples": [
        "SET @var_name = expr;",
        "SET @name = 43;\nSET @total_tax = (SELECT SUM(tax) FROM taxable_transactions);",
        "CREATE PROCEDURE p(increment INT)\nBEGIN\n  DECLARE counter INT DEFAULT 0;\n  WHILE counter < 10 DO\n    -- ... do work ...\n    SET counter = counter + increment;\n  END WHILE;\nEND;",
        "SET GLOBAL max_connections = 1000;\nSET @@GLOBAL.max_connections = 1000;",
        "SET SESSION sql_mode = 'TRADITIONAL';\nSET LOCAL sql_mode = 'TRADITIONAL';\nSET @@SESSION.sql_mode = 'TRADITIONAL';\nSET @@LOCAL.sql_mode = 'TRADITIONAL';\nSET @@sql_mode = 'TRADITIONAL';\nSET sql_mode = 'TRADITIONAL';",
        "SET PERSIST max_connections = 1000;\nSET @@PERSIST.max_connections = 1000;",
        "SET PERSIST_ONLY back_log = 100;\nSET @@PERSIST_ONLY.back_log = 100;",
        "SET @@SESSION.max_join_size = DEFAULT;\nSET @@SESSION.max_join_size = @@GLOBAL.max_join_size;",
        "mysql> SET GLOBAL version = 'abc';\nERROR 1238 (HY000): Variable 'version' is a read only variable",
        "mysql> SET GLOBAL sql_log_bin = ON;\nERROR 1228 (HY000): Variable 'sql_log_bin' is a SESSION\nvariable and can't be used with SET GLOBAL",
        "mysql> SET SESSION max_connections = 1000;\nERROR 1229 (HY000): Variable 'max_connections' is a\nGLOBAL variable and should be set with SET GLOBAL",
        "mysql> SET max_connections = 1000;\nERROR 1229 (HY000): Variable 'max_connections' is a\nGLOBAL variable and should be set with SET GLOBAL",
        "mysql> SET PERSIST port = 3307;\nERROR 1238 (HY000): Variable 'port' is a read only variable\nmysql> SET PERSIST_ONLY port = 3307;\nERROR 1238 (HY000): Variable 'port' is a non persistent read only variable",
        "SET @x = 1, SESSION sql_mode = '';",
        "SET GLOBAL sort_buffer_size = 1000000, SESSION sort_buffer_size = 1000000;\nSET @@GLOBAL.sort_buffer_size = 1000000, @@LOCAL.sort_buffer_size = 1000000;\nSET GLOBAL max_connections = 1000, sort_buffer_size = 1000000;",
        "SET @@GLOBAL.sort_buffer_size = 50000, sort_buffer_size = 1000000;",
        "SELECT @@GLOBAL.sql_mode, @@SESSION.sql_mode, @@sql_mode;"
    ],
    "Category": [
        "Database Administration Statements"
    ]
}