{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/show-index.html"
    ],
    "Title": [
        "15.7.7.23 SHOW INDEX Statement"
    ],
    "Feature": [
        "SHOW [EXTENDED] {INDEX | INDEXES | KEYS}\n    {FROM | IN} tbl_name\n    [{FROM | IN} db_name]\n    [WHERE expr]",
        "mysql> SHOW INDEX FROM City\\G\n*************************** 1. row ***************************\n        Table: city\n   Non_unique: 0\n     Key_name: PRIMARY\n Seq_in_index: 1\n  Column_name: ID\n    Collation: A\n  Cardinality: 4188\n     Sub_part: NULL\n       Packed: NULL\n         Null:\n   Index_type: BTREE\n      Comment:\nIndex_comment:\n      Visible: YES\n   Expression: NULL\n*************************** 2. row ***************************\n        Table: city\n   Non_unique: 1\n     Key_name: CountryCode\n Seq_in_index: 1\n  Column_name: CountryCode\n    Collation: A\n  Cardinality: 232\n     Sub_part: NULL\n       Packed: NULL\n         Null:\n   Index_type: BTREE\n      Comment:\nIndex_comment:\n      Visible: YES\n   Expression: NULL"
    ],
    "Description": [
        "\nSHOW INDEX returns table index\n        information. The format resembles that of the\n        SQLStatistics call in ODBC. This statement\n        requires some privilege for any column in the table.\n      ",
        "\n        An alternative to tbl_name\n        FROM db_name syntax is\n        db_name.tbl_name.\n        These two statements are equivalent:\n      ",
        "Press CTRL+C to copy SHOW INDEX FROM mytable FROM mydb;\nSHOW INDEX FROM mydb.mytable;",
        "\n        The optional EXTENDED keyword causes the\n        output to include information about hidden indexes that MySQL\n        uses internally and are not accessible by users.\n      ",
        "\n        The WHERE clause can be given to select rows\n        using more general conditions, as discussed in\n        Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ",
        "\nSHOW INDEX returns the following\n        fields:\n",
        "\n\nTable\n\n            The name of the table.\n          \nNon_unique\n\n            0 if the index cannot contain duplicates, 1 if it can.\n          \nKey_name\n\n            The name of the index. If the index is the primary key, the\n            name is always PRIMARY.\n          \nSeq_in_index\n\n            The column sequence number in the index, starting with 1.\n          \nColumn_name\n\n            The column name. See also the description for the\n            Expression column.\n          \nCollation\n\n            How the column is sorted in the index. This can have values\n            A (ascending), D\n            (descending), or NULL (not sorted).\n          \nCardinality\n\n            An estimate of the number of unique values in the index. To\n            update this number, run ANALYZE\n            TABLE or (for MyISAM tables)\n            myisamchk -a.\n          \nCardinality is counted based on\n            statistics stored as integers, so the value is not\n            necessarily exact even for small tables. The higher the\n            cardinality, the greater the chance that MySQL uses the\n            index when doing joins.\n          \nSub_part\n\n            The index prefix. That is, the number of indexed characters\n            if the column is only partly indexed,\n            NULL if the entire column is indexed.\n\n\n\nNote\n\n\n              Prefix limits are measured in bytes.\n              However, prefix lengths for index\n              specifications in CREATE\n              TABLE, ALTER\n              TABLE, and CREATE\n              INDEX statements are interpreted as number of\n              characters for nonbinary string types\n              (CHAR,\n              VARCHAR,\n              TEXT) and number of bytes\n              for binary string types\n              (BINARY,\n              VARBINARY,\n              BLOB). Take this into\n              account when specifying a prefix length for a nonbinary\n              string column that uses a multibyte character set.\n\n\n\n            For additional information about index prefixes, see\n            Section\u00a010.3.5, \u201cColumn Indexes\u201d, and\n            Section\u00a015.1.15, \u201cCREATE INDEX Statement\u201d.\n          \nPacked\n\n            Indicates how the key is packed. NULL if\n            it is not.\n          \nNull\n\n            Contains YES if the column may contain\n            NULL values and '' if\n            not.\n          \nIndex_type\n\n            The index method used (BTREE,\n            FULLTEXT, HASH,\n            RTREE).\n          \nComment\n\n            Information about the index not described in its own column,\n            such as disabled if the index is\n            disabled.\n          \nIndex_comment\n\n            Any comment provided for the index with a\n            COMMENT attribute when the index was\n            created.\n          \nVisible\n\n            Whether the index is visible to the optimizer. See\n            Section\u00a010.3.12, \u201cInvisible Indexes\u201d.\n          \nExpression\n\n            MySQL supports functional key parts (see\n            Functional Key Parts); this\n            affects both the Column_name and\n            Expression columns:\n\n\n\n                For a nonfunctional key part,\n                Column_name indicates the column\n                indexed by the key part and\n                Expression is\n                NULL.\n              \n                For a functional key part,\n                Column_name column is\n                NULL and\n                Expression indicates the expression\n                for the key part.\n\n\n\n",
        "\n        Information about table indexes is also available from the\n        INFORMATION_SCHEMA\nSTATISTICS table. See\n        Section\u00a028.3.34, \u201cThe INFORMATION_SCHEMA STATISTICS Table\u201d. The\n        extended information about hidden indexes is available only\n        using SHOW EXTENDED INDEX; it cannot be\n        obtained from the STATISTICS table.\n      ",
        "\n        You can list a table's indexes with the mysqlshow -k\n        db_name\ntbl_name command.\n      ",
        "\nSHOW INDEX includes the table's\n        generated invisible key, if it has one, by default. You can\n        cause this information to be suppressed in the statement's\n        output by setting\n        show_gipk_in_create_table_and_information_schema\n        = OFF. For more information, see\n        Section\u00a015.1.20.11, \u201cGenerated Invisible Primary Keys\u201d.\n"
    ],
    "Examples": [
        "SHOW INDEX FROM mytable FROM mydb;\nSHOW INDEX FROM mydb.mytable;"
    ],
    "Category": [
        "Database Administration Statements"
    ]
}