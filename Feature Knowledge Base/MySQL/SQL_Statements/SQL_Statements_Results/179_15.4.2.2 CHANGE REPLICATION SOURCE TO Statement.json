{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/change-replication-source-to.html"
    ],
    "Title": [
        "15.4.2.2 CHANGE REPLICATION SOURCE TO Statement"
    ],
    "Feature": [
        "CHANGE REPLICATION SOURCE TO option [, option] ... [ channel_option ]\n\noption: {\n    SOURCE_BIND = 'interface_name'\n  | SOURCE_HOST = 'host_name'\n  | SOURCE_USER = 'user_name'\n  | SOURCE_PASSWORD = 'password'\n  | SOURCE_PORT = port_num\n  | PRIVILEGE_CHECKS_USER = {NULL | 'account'}\n  | REQUIRE_ROW_FORMAT = {0|1}\n  | REQUIRE_TABLE_PRIMARY_KEY_CHECK = {STREAM | ON | OFF | GENERATE}\n  | ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS = {OFF | LOCAL | uuid}\n  | SOURCE_LOG_FILE = 'source_log_name'\n  | SOURCE_LOG_POS = source_log_pos\n  | SOURCE_AUTO_POSITION = {0|1}\n  | RELAY_LOG_FILE = 'relay_log_name'\n  | RELAY_LOG_POS = relay_log_pos\n  | SOURCE_HEARTBEAT_PERIOD = interval\n  | SOURCE_CONNECT_RETRY = interval\n  | SOURCE_RETRY_COUNT = count\n  | SOURCE_CONNECTION_AUTO_FAILOVER = {0|1}\n  | SOURCE_DELAY = interval\n  | SOURCE_COMPRESSION_ALGORITHMS = 'algorithm[,algorithm][,algorithm]'\n  | SOURCE_ZSTD_COMPRESSION_LEVEL = level\n  | SOURCE_SSL = {0|1}\n  | SOURCE_SSL_CA = 'ca_file_name'\n  | SOURCE_SSL_CAPATH = 'ca_directory_name'\n  | SOURCE_SSL_CERT = 'cert_file_name'\n  | SOURCE_SSL_CRL = 'crl_file_name'\n  | SOURCE_SSL_CRLPATH = 'crl_directory_name'\n  | SOURCE_SSL_KEY = 'key_file_name'\n  | SOURCE_SSL_CIPHER = 'cipher_list'\n  | SOURCE_SSL_VERIFY_SERVER_CERT = {0|1}\n  | SOURCE_TLS_VERSION = 'protocol_list'\n  | SOURCE_TLS_CIPHERSUITES = 'ciphersuite_list'\n  | SOURCE_PUBLIC_KEY_PATH = 'key_file_name'\n  | GET_SOURCE_PUBLIC_KEY = {0|1}\n  | NETWORK_NAMESPACE = 'namespace'\n  | IGNORE_SERVER_IDS = (server_id_list),\n  | GTID_ONLY = {0|1}\n}\n\nchannel_option:\n    FOR CHANNEL channel\n\nserver_id_list:\n    [server_id [, server_id] ... ]"
    ],
    "Description": [
        "\nCHANGE REPLICATION SOURCE TO\n        changes the parameters that the replica server uses for\n        connecting to the source and reading data from the source. It\n        also updates the contents of the replication metadata\n        repositories (see Section\u00a019.2.4, \u201cRelay Log and Replication Metadata Repositories\u201d).\n      ",
        "\nCHANGE REPLICATION SOURCE TO\n        requires the\n        REPLICATION_SLAVE_ADMIN privilege\n        (or the deprecated SUPER\n        privilege).\n      ",
        "\n        Options that you do not specify on a CHANGE\n        REPLICATION SOURCE TO statement retain their value,\n        except as indicated in the following discussion. In most cases,\n        there is therefore no need to specify options that do not\n        change.\n      ",
        "\n        Values used for SOURCE_HOST and other\n        CHANGE REPLICATION SOURCE TO\n        options are checked for linefeed (\\n or\n        0x0A) characters. The presence of such\n        characters in these values causes the statement to fail with an\n        error.\n      ",
        "\n        The optional FOR CHANNEL\n        channel clause lets you\n        name which replication channel the statement applies to.\n        Providing a FOR CHANNEL\n        channel clause applies the\n        CHANGE REPLICATION SOURCE TO\n        statement to a specific replication channel, and is used to add\n        a new channel or modify an existing channel. For example, to add\n        a new channel called channel2:\n      ",
        "Press CTRL+C to copy CHANGE REPLICATION SOURCE TO SOURCE_HOST=host1, SOURCE_PORT=3002 FOR CHANNEL 'channel2';",
        "\n        If no clause is named and no extra channels exist, a\n        CHANGE REPLICATION SOURCE TO\n        statement applies to the default channel, whose name is the\n        empty string (\"\"). When you have set up multiple replication\n        channels, every CHANGE REPLICATION SOURCE\n        TO statement must name a channel using the\n        FOR CHANNEL\n        channel clause. See\n        Section\u00a019.2.2, \u201cReplication Channels\u201d for more information.\n      ",
        "\n        For some of the options of the CHANGE\n        REPLICATION SOURCE TO statement, you must issue a\n        STOP REPLICA statement prior to\n        issuing a CHANGE REPLICATION SOURCE\n        TO statement (and a START\n        REPLICA statement afterwards). Sometimes, you only\n        need to stop the replication SQL (applier) thread or the\n        replication I/O (receiver) thread, not both:\n",
        "\n\n            When the applier thread is stopped, you can execute\n            CHANGE REPLICATION SOURCE TO\n            using any combination that is otherwise allowed of\n            RELAY_LOG_FILE,\n            RELAY_LOG_POS, and\n            SOURCE_DELAY options, even if the\n            replication receiver thread is running. No other options may\n            be used with this statement when the receiver thread is\n            running.\n          \n            When the receiver thread is stopped, you can execute\n            CHANGE REPLICATION SOURCE TO\n            using any of the options for this statement (in any allowed\n            combination) except\nRELAY_LOG_FILE,\n            RELAY_LOG_POS,\n            SOURCE_DELAY, or\n            SOURCE_AUTO_POSITION = 1 even when the\n            applier thread is running.\n          \n            Both the receiver thread and the applier thread must be\n            stopped before issuing a CHANGE\n            REPLICATION SOURCE TO statement that employs\n            SOURCE_AUTO_POSITION = 1,\n            GTID_ONLY = 1, or\n            ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS.\n\n",
        "\n        You can check the current state of the replication applier\n        thread and replication receiver thread using\n        SHOW\n        REPLICA STATUS. Note that the Group Replication\n        applier channel (group_replication_applier)\n        has no receiver thread, only an applier thread.\n      ",
        "\nCHANGE REPLICATION SOURCE TO\n        statements have a number of side-effects and interactions that\n        you should be aware of beforehand:\n",
        "\n\nCHANGE REPLICATION SOURCE TO\n            causes an implicit commit of an ongoing transaction. See\n            Section\u00a015.3.3, \u201cStatements That Cause an Implicit Commit\u201d.\n          \nCHANGE REPLICATION SOURCE TO\n            causes the previous values for\n            SOURCE_HOST,\n            SOURCE_PORT,\n            SOURCE_LOG_FILE, and\n            SOURCE_LOG_POS to be written to the error\n            log, along with other information about the replica's\n            state prior to execution.\n          \n            If you are using statement-based replication and temporary\n            tables, it is possible for a CHANGE\n            REPLICATION SOURCE TO statement following a\n            STOP\n            REPLICA statement to leave behind temporary tables\n            on the replica. A warning\n            (ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO)\n            is issued whenever this occurs. You can avoid this in such\n            cases by making sure that the value of the\n            Replica_open_temp_tables\n            system status variable is equal to 0 prior to executing such\n            a CHANGE REPLICATION SOURCE\n            TO statement.\n          \n            When using a multithreaded replica\n            (replica_parallel_workers\n            > 0), stopping the replica can cause gaps in the sequence\n            of transactions that have been executed from the relay log,\n            regardless of whether the replica was stopped intentionally\n            or otherwise. In MySQL 8.4, these can be\n            resolved using GTID auto-positioning.\n\n",
        "\n        The following options are available for\n        CHANGE REPLICATION SOURCE TO\n        statements:\n",
        "\n\nASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS\n            = {OFF | LOCAL | uuid}\n\n            Makes the replication channel assign a GTID to replicated\n            transactions that do not have one, enabling replication from\n            a source that does not use GTID-based replication, to a\n            replica that does. For a multi-source replica, you can have\n            a mix of channels that use\n            ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS,\n            and channels that do not. The default is\n            OFF, meaning that the feature is not\n            used.\n          \nLOCAL assigns a GTID including the\n            replica's own UUID (the\n            server_uuid setting).\n            uuid assigns a\n            GTID including the specified UUID, such as the\n            server_uuid setting for the\n            replication source server. Using a nonlocal UUID lets you\n            differentiate between transactions that originated on the\n            replica and transactions that originated on the source, and\n            for a multi-source replica, between transactions that\n            originated on different sources. The UUID you choose only\n            has significance for the replica's own use. If any of the\n            transactions sent by the source do have a GTID already, that\n            GTID is retained.\n          \n            Channels specific to Group Replication cannot use\n            ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS,\n            but an asynchronous replication channel for another source\n            on a server instance that is a Group Replication group\n            member can do so. In that case, do not specify the Group\n            Replication group name as the UUID for creating the GTIDs.\n          \n            To set\n            ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS to\n            LOCAL or\n            uuid, the\n            replica must have\n            gtid_mode=ON set, and this\n            cannot be changed afterwards. This option is for use with a\n            source that has binary log file position based replication,\n            so SOURCE_AUTO_POSITION=1 cannot be set\n            for the channel. Both the replication SQL thread and the\n            replication I/O (receiver) thread must be stopped before\n            setting this option.\n\n\n\nImportant\n\n\n              A replica set up with\n              ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS\n              on any channel cannot be promoted to replace the\n              replication source server in the event that a failover is\n              required, and a backup taken from the replica cannot be\n              used to restore the replication source server. The same\n              restriction applies to replacing or restoring other\n              replicas that use\n              ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS\n              on any channel.\n\n\n\n            For further restrictions and information, see\n            Section\u00a019.1.3.6, \u201cReplication From a Source Without GTIDs to a Replica With GTIDs\u201d.\n          \nGET_SOURCE_PUBLIC_KEY =\n            {0|1}\n\n            Enables RSA key pair-based password exchange by requesting\n            the public key from the source. The option is disabled by\n            default.\n          \n            This option applies to replicas that authenticate with the\n            caching_sha2_password authentication\n            plugin. For connections by accounts that authenticate using\n            this plugin, the source does not send the public key unless\n            requested, so it must be requested or specified in the\n            client. If SOURCE_PUBLIC_KEY_PATH is\n            given and specifies a valid public key file, it takes\n            precedence over GET_SOURCE_PUBLIC_KEY. If\n            you are using a replication user account that authenticates\n            with the caching_sha2_password plugin\n            (the default), and you are not using a secure connection,\n            you must specify either this option or the\n            SOURCE_PUBLIC_KEY_PATH option to provide\n            the RSA public key to the replica.\n          \nGTID_ONLY = {0|1}\n\n            Stops the replication channel persisting file names and file\n            positions in the replication metadata repositories.\n            GTID_ONLY is disabled by default for\n            asynchronous replication channels, but is enabled by default\n            for Group Replication channels, for which it cannot be\n            disabled.\n          \n            For replication channels with this setting, in-memory file\n            positions are still tracked, and file positions can still be\n            observed for debugging purposes in error messages and\n            through interfaces such as SHOW REPLICA\n            STATUS statements (where they are shown as being\n            invalid if they are out of date). However, the writes and\n            reads required to persist and check the file positions are\n            avoided in situations where GTID-based replication does not\n            actually require them, including the transaction queuing and\n            application process.\n          \n            This option can be used only if both the replication SQL\n            (applier) thread and replication I/O (receiver) thread are\n            stopped. To set GTID_ONLY = 1 for a\n            replication channel, GTIDs must be in use on the server\n            (gtid_mode = ON), and\n            row-based binary logging must be in use on the source\n            (statement-based replication is not supported). The options\n            REQUIRE_ROW_FORMAT = 1 and\n            SOURCE_AUTO_POSITION = 1 must be set for\n            the replication channel.\n          \n            When GTID_ONLY = 1 is set, the replica\n            uses\n            replica_parallel_workers=1\n            if that system variable is set to zero for the server, so it\n            is always technically a multi-threaded applier. This is\n            because a multi-threaded applier uses saved positions rather\n            than the replication metadata repositories to locate the\n            start of a transaction that it needs to reapply.\n          \n            If you disable GTID_ONLY after setting\n            it, the existing relay logs are deleted and the existing\n            known binary log file positions are persisted, even if they\n            are stale. The file positions for the binary log and relay\n            log in the replication metadata repositories might be\n            invalid, and a warning is returned if this is the case.\n            Provided that SOURCE_AUTO_POSITION is\n            still enabled, GTID auto-positioning is used to provide the\n            correct positioning.\n          \n            If you also disable SOURCE_AUTO_POSITION,\n            the file positions for the binary log and relay log in the\n            replication metadata repositories are used for positioning\n            if they are valid. If they are marked as invalid, you must\n            provide a valid binary log file name and position\n            (SOURCE_LOG_FILE and\n            SOURCE_LOG_POS). If you also provide a\n            relay log file name and position\n            (RELAY_LOG_FILE and\n            RELAY_LOG_POS), the relay logs are\n            preserved and the applier position is set to the stated\n            position. GTID auto-skip ensures that any transactions\n            already applied are skipped even if the eventual applier\n            position is not correct.\n          \nIGNORE_SERVER_IDS =\n            (server_id_list)\n\n            Makes the replica ignore events originating from the\n            specified servers. The option takes a comma-separated list\n            of 0 or more server IDs. Log rotation and deletion events\n            from the servers are not ignored, and are recorded in the\n            relay log.\n          \n            In circular replication, the originating server normally\n            acts as the terminator of its own events, so that they are\n            not applied more than once. Thus, this option is useful in\n            circular replication when one of the servers in the circle\n            is removed. Suppose that you have a circular replication\n            setup with 4 servers, having server IDs 1, 2, 3, and 4, and\n            server 3 fails. When bridging the gap by starting\n            replication from server 2 to server 4, you can include\n            IGNORE_SERVER_IDS = (3) in the\n            CHANGE REPLICATION SOURCE TO\n            statement that you issue on server 4 to tell it to use\n            server 2 as its source instead of server 3. Doing so causes\n            it to ignore and not to propagate any statements that\n            originated with the server that is no longer in use.\n          \n            If IGNORE_SERVER_IDS contains the\n            server's own ID and the server was started with the\n            --replicate-same-server-id\n            option enabled, an error results.\n          \n            The source metadata repository and the output of\n            SHOW\n            REPLICA STATUS provide the list of servers that\n            are currently ignored. For more information, see\n            Section\u00a019.2.4.2, \u201cReplication Metadata Repositories\u201d, and\n            Section\u00a015.7.7.34, \u201cSHOW REPLICA STATUS Statement\u201d.\n          \n            If a CHANGE REPLICATION SOURCE\n            TO statement is issued without\n            IGNORE_SERVER_IDS, any existing list is\n            preserved. To clear the list of ignored servers, it is\n            necessary to use the option with an empty list, like this:\n          Press CTRL+C to copy CHANGE REPLICATION SOURCE TO IGNORE_SERVER_IDS = ();\nRESET REPLICA\n            ALL also clears\n            IGNORE_SERVER_IDS.\n          \n            When global transaction identifiers (GTIDs) are used for\n            replication, transactions that have already been applied are\n            automatically ignored. Because of this,\n            IGNORE_SERVER_IDS is not compatible with\n            gtid_mode=ON. If\n            gtid_mode is ON,\n            CHANGE REPLICATION SOURCE TO with a\n            non-empty IGNORE_SERVER_IDS list is\n            rejected with an error. Likewise, if any existing\n            replication channel was created with a list of server IDs to\n            be ignored, SET gtid_mode=ON is also\n            rejected. Before starting GTID-based replication, check for\n            and clear any ignored server ID lists on the servers\n            involved; you can do this by checking the output from\n            SHOW REPLICA STATUS. In such\n            cases, you can clear the list by issuing CHANGE\n            REPLICATION SOURCE TO with an empty list of server\n            IDs as shown previously.\n          \nNETWORK_NAMESPACE =\n            'namespace'\n\n            The network namespace to use for TCP/IP connections to the\n            replication source server or, if the MySQL communication\n            stack is in use, for Group Replication\u2019s group\n            communication connections. The maximum length of the string\n            value is 64 characters. If this option is omitted,\n            connections from the replica use the default (global)\n            namespace. On platforms that do not implement network\n            namespace support, failure occurs when the replica attempts\n            to connect to the source. For information about network\n            namespaces, see Section\u00a07.1.14, \u201cNetwork Namespace Support\u201d.\n          \nPRIVILEGE_CHECKS_USER = {NULL |\n            'account'}\n\n            Names a user account that supplies a security context for\n            the specified channel. NULL, which is the\n            default, means no security context is used.\n          \n            The user name and host name for the user account must follow\n            the syntax described in Section\u00a08.2.4, \u201cSpecifying Account Names\u201d, and\n            the user must not be an anonymous user (with a blank user\n            name) or the CURRENT_USER. The account\n            must have the\n            REPLICATION_APPLIER\n            privilege, plus the required privileges to execute the\n            transactions replicated on the channel. For details of the\n            privileges required by the account, see\n            Section\u00a019.3.3, \u201cReplication Privilege Checks\u201d. When you\n            restart the replication channel, the privilege checks are\n            applied from that point on. If you do not specify a channel\n            and no other channels exist, the statement is applied to the\n            default channel.\n          \n            The use of row-based binary logging is strongly recommended\n            when PRIVILEGE_CHECKS_USER is set, and\n            you can set REQUIRE_ROW_FORMAT to enforce\n            this. For example, to start privilege checks on the channel\n            channel_1 on a running replica, issue the\n            following statements:\n          Press CTRL+C to copy STOP REPLICA FOR CHANNEL 'channel_1';\n\nCHANGE REPLICATION SOURCE TO\n    PRIVILEGE_CHECKS_USER = 'user'@'host',\n    REQUIRE_ROW_FORMAT = 1,\n    FOR CHANNEL 'channel_1';\n\nSTART REPLICA FOR CHANNEL 'channel_1';\nRELAY_LOG_FILE =\n            'relay_log_file' ,\n            RELAY_LOG_POS =\n            'relay_log_pos'\n\n            The relay log file name, and the location in that file, at\n            which the replication SQL thread begins reading from the\n            replica's relay log the next time the thread starts.\n            RELAY_LOG_FILE can use either an absolute\n            or relative path, and uses the same base name as\n            SOURCE_LOG_FILE. The maximum length of\n            the string value is 511 characters.\n          \n            A CHANGE REPLICATION SOURCE TO statement\n            using RELAY_LOG_FILE,\n            RELAY_LOG_POS, or both options can be\n            executed on a running replica when the replication SQL\n            (applier) thread is stopped. Relay logs are preserved if at\n            least one of the replication applier thread and the\n            replication I/O (receiver) thread is running. If both\n            threads are stopped, all relay log files are deleted unless\n            at least one of RELAY_LOG_FILE or\n            RELAY_LOG_POS is specified. For the Group\n            Replication applier channel\n            (group_replication_applier), which only\n            has an applier thread and no receiver thread, this is the\n            case if the applier thread is stopped, but with that channel\n            you cannot use the RELAY_LOG_FILE and\n            RELAY_LOG_POS options.\n          \nREQUIRE_ROW_FORMAT = {0|1}\n\n            Permits only row-based replication events to be processed by\n            the replication channel. This option prevents the\n            replication applier from taking actions such as creating\n            temporary tables and executing LOAD DATA\n            INFILE requests, which increases the security of\n            the channel. The REQUIRE_ROW_FORMAT\n            option is disabled by default for asynchronous replication\n            channels, but it is enabled by default for Group Replication\n            channels, and it cannot be disabled for them. For more\n            information, see\n            Section\u00a019.3.3, \u201cReplication Privilege Checks\u201d.\n          \nREQUIRE_TABLE_PRIMARY_KEY_CHECK =\n            {STREAM | ON | OFF | GENERATE}\n\n            This option lets a replica set its own policy for primary\n            key checks, as follows:\n\n\n\nON: The replica sets\n                sql_require_primary_key =\n                ON; any replicated CREATE\n                TABLE or ALTER\n                TABLE statement must result in a table that\n                contains a primary key.\n              \nOFF: The replica sets\n                sql_require_primary_key = OFF; no\n                replicated CREATE TABLE or\n                ALTER TABLE statement is checked for\n                the presence of a primary key.\n              \nSTREAM: The replica uses whatever\n                value of sql_require_primary_key is\n                replicated from the source for each transaction. This is\n                the default value, and the default behavior.\n              \nGENERATE: Causes the replica to\n                generate an invisible primary key for any\n                InnoDB table that, as\n                replicated, lacks a primary key. See\n                Section\u00a015.1.20.11, \u201cGenerated Invisible Primary Keys\u201d, for more\n                information.\n              \nGENERATE is not compatible with Group\n                Replication; you can use ON,\n                OFF, or STREAM.\n\n\n\n            A divergence based on the presence of a generated invisible\n            primary key solely on a source or replica table is supported\n            by MySQL Replication as long as the source supports GIPKs\n            and the replica uses MySQL version 8.0.32 or later. If you\n            use GIPKs on a replica with the source using an earlier\n            version of MySQL, such divergences in schema, other than the\n            extra GIPK on the replica, are not supported and may result\n            in replication errors.\n          \n            For multisource replication, setting\n            REQUIRE_TABLE_PRIMARY_KEY_CHECK to\n            ON or OFF lets the\n            replica normalize behavior across replication channels for\n            different sources, and to keep a consistent setting for\n            sql_require_primary_key.\n            Using ON safeguards against the\n            accidental loss of primary keys when multiple sources update\n            the same set of tables. Using OFF lets\n            sources that can manipulate primary keys to work alongside\n            sources that cannot.\n          \n            In the case of multiple replicas, when\n            REQUIRE_TABLE_PRIMARY_KEY_CHECK is set to\n            GENERATE, the generated invisible primary\n            key added by a given replica is independent of any such key\n            added on any other replica. This means that, if generated\n            invisible primary keys are in use, the values in the\n            generated primary key columns on different replicas are not\n            guaranteed to be the same. This may be an issue when failing\n            over to such a replica.\n          \n            When PRIVILEGE_CHECKS_USER is\n            NULL (the default), the user account does\n            not need administration level privileges to set restricted\n            session variables. Setting this option to a value other than\n            NULL means that, when\n            REQUIRE_TABLE_PRIMARY_KEY_CHECK is\n            ON, OFF, or\n            GENERATE, the user account does not\n            require session administration level privileges to set\n            restricted session variables such as\n            sql_require_primary_key,\n            avoiding the need to grant the account such privileges. For\n            more information, see\n            Section\u00a019.3.3, \u201cReplication Privilege Checks\u201d.\n          \nSOURCE_AUTO_POSITION =\n            {0|1}\n\n            Makes the replica attempt to connect to the source using the\n            auto-positioning feature of GTID-based replication, rather\n            than a binary log file based position. This option is used\n            to start a replica using GTID-based replication. The default\n            is 0, meaning that GTID auto-positioning and GTID-based\n            replication are not used. This option can be used with\n            CHANGE REPLICATION SOURCE TO only if both\n            the replication SQL (applier) thread and replication I/O\n            (receiver) thread are stopped.\n          \n            Both the replica and the source must have GTIDs enabled\n            (GTID_MODE=ON,\n            ON_PERMISSIVE, or\n            OFF_PERMISSIVE on the replica, and\n            GTID_MODE=ON on the\n            source). SOURCE_LOG_FILE,\n            SOURCE_LOG_POS,\n            RELAY_LOG_FILE, and\n            RELAY_LOG_POS cannot be specified\n            together with SOURCE_AUTO_POSITION = 1.\n            If multi-source replication is enabled on the replica, you\n            need to set the SOURCE_AUTO_POSITION = 1\n            option for each applicable replication channel.\n          \n            With SOURCE_AUTO_POSITION = 1 set, in the\n            initial connection handshake, the replica sends a GTID set\n            containing the transactions that it has already received,\n            committed, or both. The source responds by sending all\n            transactions recorded in its binary log whose GTID is not\n            included in the GTID set sent by the replica. This exchange\n            ensures that the source only sends the transactions with a\n            GTID that the replica has not already recorded or committed.\n            If the replica receives transactions from more than one\n            source, as in the case of a diamond topology, the auto-skip\n            function ensures that the transactions are not applied\n            twice. For details of how the GTID set sent by the replica\n            is computed, see\n            Section\u00a019.1.3.3, \u201cGTID Auto-Positioning\u201d.\n          \n            If any of the transactions that should be sent by the source\n            have been purged from the source's binary log, or added to\n            the set of GTIDs in the\n            gtid_purged system variable\n            by another method, the source sends the error\n            ER_SOURCE_HAS_PURGED_REQUIRED_GTIDS\n            to the replica, and replication does not start. The GTIDs of\n            the missing purged transactions are identified and listed in\n            the source's error log in the warning message\n            ER_FOUND_MISSING_GTIDS.\n            Also, if during the exchange of transactions it is found\n            that the replica has recorded or committed transactions with\n            the source's UUID in the GTID, but the source itself has not\n            committed them, the source sends the error\n            ER_REPLICA_HAS_MORE_GTIDS_THAN_SOURCE\n            to the replica and replication does not start. For\n            information on how to handle these situations, see\n            Section\u00a019.1.3.3, \u201cGTID Auto-Positioning\u201d.\n          \n            You can see whether replication is running with GTID\n            auto-positioning enabled by checking the Performance Schema\n            replication_connection_status\n            table or the output of\n            SHOW\n            REPLICA STATUS. Disabling the\n            SOURCE_AUTO_POSITION option again makes\n            the replica revert to file-based replication.\n          \nSOURCE_BIND =\n            'interface_name'\n\n            Determines which of the replica's network interfaces is\n            chosen for connecting to the source, for use on replicas\n            that have multiple network interfaces. Specify the IP\n            address of the network interface. The maximum length of the\n            string value is 255 characters.\n          \n            The IP address configured with this option, if any, can be\n            seen in the Source_Bind column of the\n            output from\n            SHOW\n            REPLICA STATUS. In the source metadata repository\n            table mysql.slave_master_info, the value\n            can be seen as the Source_bind column.\n            The ability to bind a replica to a specific network\n            interface is also supported by NDB Cluster.\n          \nSOURCE_COMPRESSION_ALGORITHMS =\n            'algorithm[,algorithm][,algorithm]'\n\n            Specifies one, two, or three of the permitted compression\n            algorithms for connections to the replication source server,\n            separated by commas. The maximum length of the string value\n            is 99 characters. The default value is\n            uncompressed.\n          \n            The available algorithms are zlib,\n            zstd, and\n            uncompressed, the same as for the\n            protocol_compression_algorithms\n            system variable. The algorithms can be specified in any\n            order, but it is not an order of preference - the algorithm\n            negotiation process attempts to use zlib,\n            then zstd, then\n            uncompressed, if they are specified.\n          \n            The value of\n            SOURCE_COMPRESSION_ALGORITHMS applies\n            only if the\n            replica_compressed_protocol\n            system variable is disabled. If\n            replica_compressed_protocol is enabled,\n            it takes precedence over\n            SOURCE_COMPRESSION_ALGORITHMS and\n            connections to the source use zlib\n            compression if both source and replica support that\n            algorithm. For more information, see\n            Section\u00a06.2.8, \u201cConnection Compression Control\u201d.\n          \n            Binary log transaction compression is activated by the\n            binlog_transaction_compression\n            system variable, and can also be used to save bandwidth. If\n            you do this in combination with connection compression,\n            connection compression has less opportunity to act on the\n            data, but can still compress headers and those events and\n            transaction payloads that are uncompressed. For more\n            information on binary log transaction compression, see\n            Section\u00a07.4.4.5, \u201cBinary Log Transaction Compression\u201d.\n          \nSOURCE_CONNECT_RETRY =\n            interval\n\n            Specifies the interval in seconds between the reconnection\n            attempts that the replica makes after the connection to the\n            source times out. The default interval is 60.\n          \n            The number of attempts is limited by the\n            SOURCE_RETRY_COUNT option. If both the\n            default settings are used, the replica waits 60 seconds\n            between reconnection attempts\n            (SOURCE_CONNECT_RETRY=60), and keeps\n            attempting to reconnect at this rate for 10 minutes\n            (SOURCE_RETRY_COUNT=10). These values are\n            recorded in the source metadata repository and shown in the\n            replication_connection_configuration\n            Performance Schema table.\n          \nSOURCE_CONNECTION_AUTO_FAILOVER =\n            {0|1}\n\n            Activates the asynchronous connection failover mechanism for\n            a replication channel if one or more alternative replication\n            source servers are available (so when there are multiple\n            MySQL servers or groups of servers that share the replicated\n            data). The default is 0, meaning that the mechanism is not\n            activated. For full information and instructions to set up\n            this feature, see\n            Section\u00a019.4.9.2, \u201cAsynchronous Connection Failover for Replicas\u201d.\n          \n            The asynchronous connection failover mechanism takes over\n            after the reconnection attempts controlled by\n            SOURCE_CONNECT_RETRY and\n            SOURCE_RETRY_COUNT are exhausted. It\n            reconnects the replica to an alternative source chosen from\n            a specified source list, which you can manage using the\n            functions\n            asynchronous_connection_failover_add_source()\n            and\n            asynchronous_connection_failover_delete_source().\n            To add and remove managed groups of servers, use\n            asynchronous_connection_failover_add_managed()\n            and\n            asynchronous_connection_failover_delete_managed()\n            instead. For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n\n\n\nImportant\n\n\n\n                  You can only set\n                  SOURCE_CONNECTION_AUTO_FAILOVER = 1\n                  when GTID auto-positioning is in use\n                  (SOURCE_AUTO_POSITION = 1).\n                \n                  When you set SOURCE_CONNECTION_AUTO_FAILOVER\n                  = 1, set\n                  SOURCE_RETRY_COUNT and\n                  SOURCE_CONNECT_RETRY to minimal\n                  numbers that just allow a few retry attempts with the\n                  same source, in case the connection failure is caused\n                  by a transient network outage. Otherwise the\n                  asynchronous connection failover mechanism cannot be\n                  activated promptly. Suitable values are\n                  SOURCE_RETRY_COUNT=3 and\n                  SOURCE_CONNECT_RETRY=10, which make\n                  the replica retry the connection 3 times with\n                  10-second intervals between.\n                \n                  When you set SOURCE_CONNECTION_AUTO_FAILOVER\n                  = 1, the replication metadata repositories\n                  must contain the credentials for a replication user\n                  account that can be used to connect to all the servers\n                  on the source list for the replication channel. The\n                  account must also have SELECT\n                  permissions on the Performance Schema tables. These\n                  credentials can be set using the\n                  CHANGE REPLICATION SOURCE\n                  TO statement with the\n                  SOURCE_USER and\n                  SOURCE_PASSWORD options. For more\n                  information, see\n                  Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n                \n                  When you set SOURCE_CONNECTION_AUTO_FAILOVER\n                  = 1, asynchronous connection failover for\n                  replicas is automatically activated if this\n                  replication channel is on a Group Replication primary\n                  in a group in single-primary mode. With this function\n                  active, if the primary that is replicating goes\n                  offline or into an error state, the new primary starts\n                  replication on the same channel when it is elected. If\n                  you want to use the function, this replication channel\n                  must also be set up on all the secondary servers in\n                  the replication group, and on any new joining members.\n                  (If the servers are provisioned using MySQL\u2019s clone\n                  functionality, this all happens automatically.) If you\n                  do not want to use the function, disable it by using\n                  the\n                  group_replication_disable_member_action()\n                  function to disable the Group Replication member\n                  action\n                  mysql_start_failover_channels_if_primary,\n                  which is enabled by default. For more information, see\n                  Section\u00a019.4.9.2, \u201cAsynchronous Connection Failover for Replicas\u201d.\n\n\n\n\nSOURCE_DELAY =\n            interval\n\n            Specifies how many seconds behind the source the replica\n            must lag. An event received from the source is not executed\n            until at least interval seconds\n            later than its execution on the source.\n            interval must be a nonnegative\n            integer in the range from 0 to\n            231\u22121. The default is 0.\n            For more information, see\n            Section\u00a019.4.11, \u201cDelayed Replication\u201d.\n          \n            A CHANGE REPLICATION SOURCE TO statement\n            using the SOURCE_DELAY option can be\n            executed on a running replica when the replication SQL\n            thread is stopped.\n          \nSOURCE_HEARTBEAT_PERIOD =\n            interval\n\n            Controls the heartbeat interval, which stops the connection\n            timeout occurring in the absence of data if the connection\n            is still good. A heartbeat signal is sent to the replica\n            after that number of seconds, and the waiting period is\n            reset whenever the source's binary log is updated with an\n            event. Heartbeats are therefore sent by the source only if\n            there are no unsent events in the binary log file for a\n            period longer than this.\n          \n            The heartbeat interval interval\n            is a decimal value having the range 0 to 4294967 seconds and\n            a resolution in milliseconds; the smallest nonzero value is\n            0.001. Setting interval to 0\n            disables heartbeats altogether. The heartbeat interval\n            defaults to half the value of the\n            replica_net_timeout system\n            variable. It is recorded in the source metadata repository\n            and shown in the\n            replication_connection_configuration\n            Performance Schema table.\n          \n            The replica_net_timeout\n            system variable specifies the number of seconds that the\n            replica waits for either more data or a heartbeat signal\n            from the source, before the replica considers the connection\n            broken, aborts the read, and tries to reconnect. The default\n            value is 60 seconds (one minute). Note that a change to the\n            value or default setting of\n            replica_net_timeout does\n            not automatically change the heartbeat interval, whether\n            that has been set explicitly or is using a previously\n            calculated default. A warning is issued if you set the\n            global value of replica_net_timeout to a\n            value less than that of the current heartbeat interval. If\n            replica_net_timeout is changed, you must\n            also issue CHANGE REPLICATION SOURCE\n            TO to adjust the heartbeat interval to an\n            appropriate value so that the heartbeat signal occurs before\n            the connection timeout. If you do not do this, the heartbeat\n            signal has no effect, and if no data is received from the\n            source, the replica can make repeated reconnection attempts,\n            creating zombie dump threads.\n          \nSOURCE_HOST =\n            'host_name'\n\n            The host name or IP address of the replication source\n            server. The replica uses this to connect to the source. The\n            maximum length of the string value is 255 characters.\n          \n            If you specify SOURCE_HOST or\n            SOURCE_PORT, the replica assumes that the\n            source server is different from before (even if the option\n            value is the same as its current value.) In this case, the\n            old values for the source's binary log file name and\n            position are considered no longer applicable, so if you do\n            not specify SOURCE_LOG_FILE and\n            SOURCE_LOG_POS in the statement,\n            SOURCE_LOG_FILE='' and\n            SOURCE_LOG_POS=4 are silently appended to\n            it.\n          \n            Setting SOURCE_HOST='' (that is, setting\n            its value explicitly to an empty string) is\n            not the same as not setting\n            SOURCE_HOST at all. Trying to set\n            SOURCE_HOST to an empty string fails with\n            an error.\n          \nSOURCE_LOG_FILE =\n            'source_log_name',\n            SOURCE_LOG_POS =\n            source_log_pos\n\n            The binary log file name, and the location in that file, at\n            which the replication I/O (receiver) thread begins reading\n            from the source's binary log the next time the thread\n            starts. Specify these options if you are using binary log\n            file position based replication.\n          \nSOURCE_LOG_FILE must include the numeric\n            suffix of a specific binary log file that is available on\n            the source server, for example,\n            SOURCE_LOG_FILE='binlog.000145'. The\n            maximum length of the string value is 511 characters.\n          \nSOURCE_LOG_POS is the numeric position\n            for the replica to start reading in that file.\n            SOURCE_LOG_POS=4 represents the start of\n            the events in a binary log file.\n          \n            If you specify either of SOURCE_LOG_FILE\n            or SOURCE_LOG_POS, you cannot specify\n            SOURCE_AUTO_POSITION = 1, which is for\n            GTID-based replication.\n          \n            If neither of SOURCE_LOG_FILE or\n            SOURCE_LOG_POS is specified, the replica\n            uses the last coordinates of the replication SQL\n            thread before CHANGE REPLICATION SOURCE\n            TO was issued. This ensures that there is no\n            discontinuity in replication, even if the replication SQL\n            (applier) thread was late compared to the replication I/O\n            (receiver) thread.\n          \nSOURCE_PASSWORD =\n            'password'\n\n            The password for the replication user account to use for\n            connecting to the replication source server. The maximum\n            length of the string value is 32 characters. If you specify\n            SOURCE_PASSWORD,\n            SOURCE_USER is also required.\n          \n            The password used for a replication user account in a\n            CHANGE REPLICATION SOURCE TO statement is\n            limited to 32 characters in length. Trying to use a password\n            of more than 32 characters causes CHANGE\n            REPLICATION SOURCE TO to fail.\n          \n            The password is masked in MySQL Server\u2019s logs, Performance\n            Schema tables, and SHOW\n            PROCESSLIST statements.\n          \nSOURCE_PORT =\n            port_num\n\n            The TCP/IP port number that the replica uses to connect to\n            the replication source server.\n\n\n\nNote\n\n\n              Replication cannot use Unix socket files. You must be able\n              to connect to the replication source server using TCP/IP.\n\n\n\n            If you specify SOURCE_HOST or\n            SOURCE_PORT, the replica assumes that the\n            source server is different from before (even if the option\n            value is the same as its current value.) In this case, the\n            old values for the source's binary log file name and\n            position are considered no longer applicable, so if you do\n            not specify SOURCE_LOG_FILE and\n            SOURCE_LOG_POS in the statement,\n            SOURCE_LOG_FILE='' and\n            SOURCE_LOG_POS=4 are silently appended to\n            it.\n          \nSOURCE_PUBLIC_KEY_PATH =\n            'key_file_name'\n\n            Enables RSA key pair-based password exchange by providing\n            the path name to a file containing a replica-side copy of\n            the public key required by the source. The file must be in\n            PEM format. The maximum length of the string value is 511\n            characters.\n          \n            This option applies to replicas that authenticate with the\n            sha256_password (deprecated) or\n            caching_sha2_password authentication\n            plugin. (For sha256_password,\n            SOURCE_PUBLIC_KEY_PATH can be used only\n            if MySQL was built using OpenSSL.) If you are using a\n            replication user account that authenticates with the\n            caching_sha2_password plugin (the\n            default), and you are not using a secure connection, you\n            must specify either this option or the\n            GET_SOURCE_PUBLIC_KEY=1 option to provide\n            the RSA public key to the replica.\n          \nSOURCE_RETRY_COUNT =\n            count\n\n            Sets the maximum number of reconnection attempts that the\n            replica makes after the connection to the source times out,\n            as determined by the\n            replica_net_timeout system\n            variable. If the replica does need to reconnect, the first\n            retry occurs immediately after the timeout. The default is\n            10 attempts.\n          \n            The interval between the attempts is specified by the\n            SOURCE_CONNECT_RETRY option. If both the\n            default settings are used, the replica waits 60 seconds\n            between reconnection attempts\n            (SOURCE_CONNECT_RETRY=60), and keeps\n            attempting to reconnect at this rate for 10 minutes\n            (SOURCE_RETRY_COUNT=10). A setting of 0\n            for SOURCE_RETRY_COUNT means that there\n            is no limit on the number of reconnection attempts, so the\n            replica keeps trying to reconnect indefinitely.\n          \n            The values for SOURCE_CONNECT_RETRY and\n            SOURCE_RETRY_COUNT are recorded in the\n            source metadata repository and shown in the\n            replication_connection_configuration\n            Performance Schema table.\n            SOURCE_RETRY_COUNT supersedes the\n            --master-retry-count server\n            startup option.\n          \nSOURCE_SSL = {0|1}\n\n            Specify whether the replica encrypts the replication\n            connection. The default is 0, meaning that the replica does\n            not encrypt the replication connection. If you set\n            SOURCE_SSL=1, you can configure the\n            encryption using the\n            SOURCE_SSL_xxx\n            and\n            SOURCE_TLS_xxx\n            options.\n          \n            Setting SOURCE_SSL=1 for a replication\n            connection and then setting no further\n            SOURCE_SSL_xxx\n            options corresponds to setting\n            --ssl-mode=REQUIRED for the client, as\n            described in\n            Command Options for Encrypted Connections.\n            With SOURCE_SSL=1, the connection attempt\n            only succeeds if an encrypted connection can be established.\n            A replication connection does not fall back to an\n            unencrypted connection, so there is no setting corresponding\n            to the --ssl-mode=PREFERRED setting for\n            replication. If SOURCE_SSL=0 is set, this\n            corresponds to --ssl-mode=DISABLED.\n\n\n\nImportant\n\n\n              To help prevent sophisticated man-in-the-middle attacks,\n              it is important for the replica to verify the server\u2019s\n              identity. You can specify additional\n              SOURCE_SSL_xxx\n              options to correspond to the settings\n              --ssl-mode=VERIFY_CA and\n              --ssl-mode=VERIFY_IDENTITY, which are a\n              better choice than the default setting to help prevent\n              this type of attack. With these settings, the replica\n              checks that the server\u2019s certificate is valid, and\n              checks that the host name the replica is using matches the\n              identity in the server\u2019s certificate. To implement one\n              of these levels of verification, you must first ensure\n              that the CA certificate for the server is reliably\n              available to the replica, otherwise availability issues\n              will result. For this reason, they are not the default\n              setting.\n\n\n\nSOURCE_SSL_xxx,\n            SOURCE_TLS_xxx\n\n            Specify how the replica uses encryption and ciphers to\n            secure the replication connection. These options can be\n            changed even on replicas that are compiled without SSL\n            support. They are saved to the source metadata repository,\n            but are ignored if the replica does not have SSL support\n            enabled. The maximum length of the value for the\n            string-valued\n            SOURCE_SSL_xxx\n            and\n            SOURCE_TLS_xxx\n            options is 511 characters, with the exception of\n            SOURCE_TLS_CIPHERSUITES,\n            for which it is 4000 characters.\n          \n            The\n            SOURCE_SSL_xxx\n            and\n            SOURCE_TLS_xxx\n            options perform the same functions as the\n            --ssl-xxx and\n            --tls-xxx client\n            options described in\n            Command Options for Encrypted Connections. The\n            correspondence between the two sets of options, and the use\n            of the\n            SOURCE_SSL_xxx\n            and\n            SOURCE_TLS_xxx\n            options to set up a secure connection, is explained in\n            Section\u00a019.3.1, \u201cSetting Up Replication to Use Encrypted Connections\u201d.\n          \nSOURCE_USER =\n            'user_name'\n\n            The user name for the replication user account to use for\n            connecting to the replication source server. The maximum\n            length of the string value is 96 characters.\n          \n            For Group Replication, this account must exist on every\n            member of the replication group. It is used for distributed\n            recovery if the XCom communication stack is in use for the\n            group, and also used for group communication connections if\n            the MySQL communication stack is in use for the group. With\n            the MySQL communication stack, the account must have the\n            GROUP_REPLICATION_STREAM\n            permission.\n          \n            It is possible to set an empty user name by specifying\n            SOURCE_USER='', but the replication\n            channel cannot be started with an empty user name. It is\n            valid to set an empty SOURCE_USER user\n            name and use the channel afterwards if you always provide\n            user credentials using the START\n            REPLICA statement or START\n            GROUP_REPLICATION statement that starts the\n            replication channel. This approach means that the\n            replication channel always needs operator intervention to\n            restart, but the user credentials are not recorded in the\n            replication metadata repositories.\n\n\n\nImportant\n\n\n              To connect to the source using a replication user account\n              that authenticates with the\n              caching_sha2_password plugin, you must\n              either set up a secure connection as described in\n              Section\u00a019.3.1, \u201cSetting Up Replication to Use Encrypted Connections\u201d, or\n              enable the unencrypted connection to support password\n              exchange using an RSA key pair. The\n              caching_sha2_password authentication\n              plugin is the default for new users (see\n              Section\u00a08.4.1.2, \u201cCaching SHA-2 Pluggable Authentication\u201d).\n              If the user account that you create or use for replication\n              uses this authentication plugin, and you are not using a\n              secure connection, you must enable RSA key pair-based\n              password exchange for a successful connection. You can do\n              this using either the\n              SOURCE_PUBLIC_KEY_PATH option or the\n              GET_SOURCE_PUBLIC_KEY=1 option for this\n              statement.\n\n\n\nSOURCE_ZSTD_COMPRESSION_LEVEL =\n            level\n\n            The compression level to use for connections to the\n            replication source server that use the\n            zstd compression algorithm. The permitted\n            levels are from 1 to 22, with larger values indicating\n            increasing levels of compression. The default level is 3.\n          \n            The compression level setting has no effect on connections\n            that do not use zstd compression. For\n            more information, see\n            Section\u00a06.2.8, \u201cConnection Compression Control\u201d.\n\n",
        "\n\n\n\nExamples\n\n\n\n\nCHANGE REPLICATION SOURCE TO is\n          useful for setting up a replica when you have the snapshot of\n          the source and have recorded the source's binary log\n          coordinates corresponding to the time of the snapshot. After\n          loading the snapshot into the replica to synchronize it with\n          the source, you can run CHANGE REPLICATION SOURCE TO\n          SOURCE_LOG_FILE='log_name',\n          SOURCE_LOG_POS=log_pos on\n          the replica to specify the coordinates at which the replica\n          should begin reading the source's binary log. The following\n          example changes the source server the replica uses and\n          establishes the source's binary log coordinates from which the\n          replica begins reading:\n        Press CTRL+C to copy CHANGE REPLICATION SOURCE TO\n  SOURCE_HOST='source2.example.com',\n  SOURCE_USER='replication',\n  SOURCE_PASSWORD='password',\n  SOURCE_PORT=3306,\n  SOURCE_LOG_FILE='source2-bin.001',\n  SOURCE_LOG_POS=4,\n  SOURCE_CONNECT_RETRY=10;\n          For the procedure to switch an existing replica to a new\n          source during failover, see\n          Section\u00a019.4.8, \u201cSwitching Sources During Failover\u201d.\n        \n          When GTIDs are in use on the source and the replica, specify\n          GTID auto-positioning instead of giving the binary log file\n          position, as in the following example. For full instructions\n          to configure and start GTID-based replication on new or\n          stopped servers, online servers, or additional replicas, see\n          Section\u00a019.1.3, \u201cReplication with Global Transaction Identifiers\u201d.\n        Press CTRL+C to copy CHANGE REPLICATION SOURCE TO\n  SOURCE_HOST='source3.example.com',\n  SOURCE_USER='replication',\n  SOURCE_PASSWORD='password',\n  SOURCE_PORT=3306,\n  SOURCE_AUTO_POSITION = 1,\n  FOR CHANNEL \"source_3\";\n          In this example, multi-source replication is in use, and the\n          CHANGE REPLICATION SOURCE TO\n          statement is applied to the replication channel\n          \"source_3\" that connects the replica to the\n          specified host. For guidance on setting up multi-source\n          replication, see Section\u00a019.1.5, \u201cMySQL Multi-Source Replication\u201d.\n        \n          The next example shows how to make the replica apply\n          transactions from relay log files that you want to repeat. To\n          do this, the source need not be reachable. You can use\n          CHANGE REPLICATION SOURCE TO to\n          locate the relay log position where you want the replica to\n          start reapplying transactions, and then start the SQL thread:\n        Press CTRL+C to copy CHANGE REPLICATION SOURCE TO\n  RELAY_LOG_FILE='replica-relay-bin.006',\n  RELAY_LOG_POS=4025;\nSTART REPLICA SQL_THREAD;\nCHANGE REPLICATION SOURCE TO\n          can also be used to skip over transactions in the binary log\n          that are causing replication to stop. The appropriate method\n          to do this depends on whether GTIDs are in use or not. For\n          instructions to skip transactions using\n          CHANGE REPLICATION SOURCE TO or\n          another method, see\n          Section\u00a019.1.7.3, \u201cSkipping Transactions\u201d.\n\n"
    ],
    "Examples": [
        "CHANGE REPLICATION SOURCE TO SOURCE_HOST=host1, SOURCE_PORT=3002 FOR CHANNEL 'channel2';",
        "CHANGE REPLICATION SOURCE TO IGNORE_SERVER_IDS = ();",
        "STOP REPLICA FOR CHANNEL 'channel_1';\n\nCHANGE REPLICATION SOURCE TO\n    PRIVILEGE_CHECKS_USER = 'user'@'host',\n    REQUIRE_ROW_FORMAT = 1,\n    FOR CHANNEL 'channel_1';\n\nSTART REPLICA FOR CHANNEL 'channel_1';",
        "CHANGE REPLICATION SOURCE TO\n  SOURCE_HOST='source2.example.com',\n  SOURCE_USER='replication',\n  SOURCE_PASSWORD='password',\n  SOURCE_PORT=3306,\n  SOURCE_LOG_FILE='source2-bin.001',\n  SOURCE_LOG_POS=4,\n  SOURCE_CONNECT_RETRY=10;",
        "CHANGE REPLICATION SOURCE TO\n  SOURCE_HOST='source3.example.com',\n  SOURCE_USER='replication',\n  SOURCE_PASSWORD='password',\n  SOURCE_PORT=3306,\n  SOURCE_AUTO_POSITION = 1,\n  FOR CHANNEL \"source_3\";",
        "CHANGE REPLICATION SOURCE TO\n  RELAY_LOG_FILE='replica-relay-bin.006',\n  RELAY_LOG_POS=4025;\nSTART REPLICA SQL_THREAD;"
    ],
    "Category": [
        "Replication Statements"
    ]
}