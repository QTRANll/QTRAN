{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/handler.html"
    ],
    "Title": [
        "15.2.5 HANDLER Statement"
    ],
    "Feature": [
        "HANDLER tbl_name OPEN [ [AS] alias]\n\nHANDLER tbl_name READ index_name { = | <= | >= | < | > } (value1,value2,...)\n    [ WHERE where_condition ] [LIMIT ... ]\nHANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST }\n    [ WHERE where_condition ] [LIMIT ... ]\nHANDLER tbl_name READ { FIRST | NEXT }\n    [ WHERE where_condition ] [LIMIT ... ]\n\nHANDLER tbl_name CLOSE",
        "HANDLER ... READ my_idx = (col_a_val,col_b_val,col_c_val) ...\nHANDLER ... READ my_idx = (col_a_val,col_b_val) ...\nHANDLER ... READ my_idx = (col_a_val) ...",
        "HANDLER tbl_name READ `PRIMARY` ..."
    ],
    "Description": [
        "\n      The HANDLER statement provides direct access to\n      table storage engine interfaces. It is available for\n      InnoDB and MyISAM tables.\n    ",
        "\n      The HANDLER ... OPEN statement opens a table,\n      making it accessible using subsequent HANDLER ...\n      READ statements. This table object is not shared by\n      other sessions and is not closed until the session calls\n      HANDLER ... CLOSE or the session terminates.\n    ",
        "\n      If you open the table using an alias, further references to the\n      open table with other HANDLER statements must\n      use the alias rather than the table name. If you do not use an\n      alias, but open the table using a table name qualified by the\n      database name, further references must use the unqualified table\n      name. For example, for a table opened using\n      mydb.mytable, further references must use\n      mytable.\n    ",
        "\n      The first HANDLER ... READ syntax fetches a row\n      where the index specified satisfies the given values and the\n      WHERE condition is met. If you have a\n      multiple-column index, specify the index column values as a\n      comma-separated list. Either specify values for all the columns in\n      the index, or specify values for a leftmost prefix of the index\n      columns. Suppose that an index my_idx includes\n      three columns named col_a,\n      col_b, and col_c, in that\n      order. The HANDLER statement can specify values\n      for all three columns in the index, or for the columns in a\n      leftmost prefix. For example:\n    ",
        "\n      To employ the HANDLER interface to refer to a\n      table's PRIMARY KEY, use the quoted identifier\n      `PRIMARY`:\n    ",
        "\n      The second HANDLER ... READ syntax fetches a\n      row from the table in index order that matches the\n      WHERE condition.\n    ",
        "\n      The third HANDLER ... READ syntax fetches a row\n      from the table in natural row order that matches the\n      WHERE condition. It is faster than\n      HANDLER tbl_name READ\n      index_name when a full table\n      scan is desired. Natural row order is the order in which rows are\n      stored in a MyISAM table data file. This\n      statement works for InnoDB tables as well, but\n      there is no such concept because there is no separate data file.\n    ",
        "\n      Without a LIMIT clause, all forms of\n      HANDLER ... READ fetch a single row if one is\n      available. To return a specific number of rows, include a\n      LIMIT clause. It has the same syntax as for the\n      SELECT statement. See\n      Section\u00a015.2.13, \u201cSELECT Statement\u201d.\n    ",
        "\nHANDLER ... CLOSE closes a table that was\n      opened with HANDLER ... OPEN.\n    ",
        "\n      There are several reasons to use the HANDLER\n      interface instead of normal SELECT\n      statements:\n",
        "\n\nHANDLER is faster than\n          SELECT:\n\n\n\n              A designated storage engine handler object is allocated\n              for the HANDLER ... OPEN. The object is\n              reused for subsequent HANDLER\n              statements for that table; it need not be reinitialized\n              for each one.\n            \n              There is less parsing involved.\n            \n              There is no optimizer or query-checking overhead.\n            \n              The handler interface does not have to provide a\n              consistent look of the data (for example,\n              dirty reads are\n              permitted), so the storage engine can use optimizations\n              that SELECT does not\n              normally permit.\n\n\n\nHANDLER makes it easier to port to MySQL\n          applications that use a low-level ISAM-like\n          interface.\n        \nHANDLER enables you to traverse a database\n          in a manner that is difficult (or even impossible) to\n          accomplish with SELECT. The\n          HANDLER interface is a more natural way to\n          look at data when working with applications that provide an\n          interactive user interface to the database.\n\n",
        "\nHANDLER is a somewhat low-level statement. For\n      example, it does not provide consistency. That is,\n      HANDLER ... OPEN does not\n      take a snapshot of the table, and does not\n      lock the table. This means that after a HANDLER ...\n      OPEN statement is issued, table data can be modified (by\n      the current session or other sessions) and these modifications\n      might be only partially visible to HANDLER ...\n      NEXT or HANDLER ... PREV scans.\n    ",
        "\n      An open handler can be closed and marked for reopen, in which case\n      the handler loses its position in the table. This occurs when both\n      of the following circumstances are true:\n",
        "\n\n          Any session executes FLUSH\n          TABLES or DDL statements on the handler's table.\n        \n          The session in which the handler is open executes\n          non-HANDLER statements that use tables.\n\n",
        "\nTRUNCATE TABLE for a table closes\n      all handlers for the table that were opened with\n      HANDLER OPEN.\n    ",
        "\n      If a table is flushed with\n      FLUSH\n      TABLES tbl_name WITH READ\n      LOCK was opened with HANDLER, the\n      handler is implicitly flushed and loses its position.\n"
    ],
    "Examples": [],
    "Category": [
        "Data Manipulation Statements"
    ]
}