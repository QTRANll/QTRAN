{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/alter-table-examples.html"
    ],
    "Title": [
        "15.1.9.3 ALTER TABLE Examples"
    ],
    "Feature": [
        "mysql> SHOW CREATE TABLE t3\\G\n*************************** 1. row ***************************\n       Table: t3\nCreate Table: CREATE TABLE `t3` (\n  `c1` int(11) DEFAULT NULL,\n  `c2` int(11) /*!50120 STORAGE MEMORY */ DEFAULT NULL\n) /*!50100 TABLESPACE ts_1 STORAGE DISK */ ENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.02 sec)"
    ],
    "Description": [
        "\n        Begin with a table t1 created as shown here:\n      ",
        "Press CTRL+C to copy CREATE TABLE t1 (a INTEGER, b CHAR(10));",
        "\n        To rename the table from t1 to\n        t2:\n      ",
        "Press CTRL+C to copy ALTER TABLE t1 RENAME t2;",
        "\n        To change column a from\n        INTEGER to TINYINT NOT\n        NULL (leaving the name the same), and to change column\n        b from CHAR(10) to\n        CHAR(20) as well as renaming it from\n        b to c:\n      ",
        "Press CTRL+C to copy ALTER TABLE t2 MODIFY a TINYINT NOT NULL, CHANGE b c CHAR(20);",
        "\n        To add a new TIMESTAMP column\n        named d:\n      ",
        "Press CTRL+C to copy ALTER TABLE t2 ADD d TIMESTAMP;",
        "\n        To add an index on column d and a\n        UNIQUE index on column a:\n      ",
        "Press CTRL+C to copy ALTER TABLE t2 ADD INDEX (d), ADD UNIQUE (a);",
        "\n        To remove column c:\n      ",
        "Press CTRL+C to copy ALTER TABLE t2 DROP COLUMN c;",
        "\n        To add a new AUTO_INCREMENT integer column\n        named c:\n      ",
        "Press CTRL+C to copy ALTER TABLE t2 ADD c INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  ADD PRIMARY KEY (c);",
        "\n        We indexed c (as a PRIMARY\n        KEY) because AUTO_INCREMENT columns\n        must be indexed, and we declare c as\n        NOT NULL because primary key columns cannot\n        be NULL.\n      ",
        "\n        For NDB tables, it is also possible\n        to change the storage type used for a table or column. For\n        example, consider an NDB table\n        created as shown here:\n      ",
        "Press CTRL+C to copy mysql> CREATE TABLE t1 (c1 INT) TABLESPACE ts_1 ENGINE NDB;\nQuery OK, 0 rows affected (1.27 sec)",
        "\n        To convert this table to disk-based storage, you can use the\n        following ALTER TABLE statement:\n      ",
        "Press CTRL+C to copy mysql> ALTER TABLE t1 TABLESPACE ts_1 STORAGE DISK;\nQuery OK, 0 rows affected (2.99 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `c1` int(11) DEFAULT NULL\n) /*!50100 TABLESPACE ts_1 STORAGE DISK */\nENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)",
        "\n        It is not necessary that the tablespace was referenced when the\n        table was originally created; however, the tablespace must be\n        referenced by the ALTER TABLE:\n      ",
        "Press CTRL+C to copy mysql> CREATE TABLE t2 (c1 INT) ts_1 ENGINE NDB;\nQuery OK, 0 rows affected (1.00 sec)\n\nmysql> ALTER TABLE t2 STORAGE DISK;\nERROR 1005 (HY000): Can't create table 'c.#sql-1750_3' (errno: 140)\nmysql> ALTER TABLE t2 TABLESPACE ts_1 STORAGE DISK;\nQuery OK, 0 rows affected (3.42 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\nmysql> SHOW CREATE TABLE t2\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t2` (\n  `c1` int(11) DEFAULT NULL\n) /*!50100 TABLESPACE ts_1 STORAGE DISK */\nENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)",
        "\n        To change the storage type of an individual column, you can use\n        ALTER TABLE ... MODIFY [COLUMN]. For example,\n        suppose you create an NDB Cluster Disk Data table with two\n        columns, using this CREATE TABLE\n        statement:\n      ",
        "Press CTRL+C to copy mysql> CREATE TABLE t3 (c1 INT, c2 INT)\n    ->     TABLESPACE ts_1 STORAGE DISK ENGINE NDB;\nQuery OK, 0 rows affected (1.34 sec)",
        "\n        To change column c2 from disk-based to\n        in-memory storage, include a STORAGE MEMORY\n        clause in the column definition used by the ALTER\n        TABLE statement, as shown here:\n      ",
        "Press CTRL+C to copy mysql> ALTER TABLE t3 MODIFY c2 INT STORAGE MEMORY;\nQuery OK, 0 rows affected (3.14 sec)\nRecords: 0  Duplicates: 0  Warnings: 0",
        "\n        You can make an in-memory column into a disk-based column by\n        using STORAGE DISK in a similar fashion.\n      ",
        "\n        Column c1 uses disk-based storage, since this\n        is the default for the table (determined by the table-level\n        STORAGE DISK clause in the\n        CREATE TABLE statement). However,\n        column c2 uses in-memory storage, as can be\n        seen here in the output of SHOW CREATE\n        TABLE:\n      ",
        "\n        When you add an AUTO_INCREMENT column, column\n        values are filled in with sequence numbers automatically. For\n        MyISAM tables, you can set the first sequence\n        number by executing SET\n        INSERT_ID=value before\n        ALTER TABLE or by using the\n        AUTO_INCREMENT=value\n        table option.\n      ",
        "\n        With MyISAM tables, if you do not change the\n        AUTO_INCREMENT column, the sequence number is\n        not affected. If you drop an AUTO_INCREMENT\n        column and then add another AUTO_INCREMENT\n        column, the numbers are resequenced beginning with 1.\n      ",
        "\n        When replication is used, adding an\n        AUTO_INCREMENT column to a table might not\n        produce the same ordering of the rows on the replica and the\n        source. This occurs because the order in which the rows are\n        numbered depends on the specific storage engine used for the\n        table and the order in which the rows were inserted. If it is\n        important to have the same order on the source and replica, the\n        rows must be ordered before assigning an\n        AUTO_INCREMENT number. Assuming that you want\n        to add an AUTO_INCREMENT column to the table\n        t1, the following statements produce a new\n        table t2 identical to t1\n        but with an AUTO_INCREMENT column:\n      ",
        "Press CTRL+C to copy CREATE TABLE t2 (id INT AUTO_INCREMENT PRIMARY KEY)\nSELECT * FROM t1 ORDER BY col1, col2;",
        "\n        This assumes that the table t1 has columns\n        col1 and col2.\n      ",
        "\n        This set of statements also produces a new table\n        t2 identical to t1, with\n        the addition of an AUTO_INCREMENT column:\n      ",
        "Press CTRL+C to copy CREATE TABLE t2 LIKE t1;\nALTER TABLE t2 ADD id INT AUTO_INCREMENT PRIMARY KEY;\nINSERT INTO t2 SELECT * FROM t1 ORDER BY col1, col2;",
        "\n\nImportant\n\n\n          To guarantee the same ordering on both source and replica,\n          all columns of t1 must\n          be referenced in the ORDER BY clause.\n\n",
        "\n        Regardless of the method used to create and populate the copy\n        having the AUTO_INCREMENT column, the final\n        step is to drop the original table and then rename the copy:\n      ",
        "Press CTRL+C to copy DROP TABLE t1;\nALTER TABLE t2 RENAME t1;"
    ],
    "Examples": [
        "CREATE TABLE t1 (a INTEGER, b CHAR(10));",
        "ALTER TABLE t1 RENAME t2;",
        "ALTER TABLE t2 MODIFY a TINYINT NOT NULL, CHANGE b c CHAR(20);",
        "ALTER TABLE t2 ADD d TIMESTAMP;",
        "ALTER TABLE t2 ADD INDEX (d), ADD UNIQUE (a);",
        "ALTER TABLE t2 DROP COLUMN c;",
        "ALTER TABLE t2 ADD c INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  ADD PRIMARY KEY (c);",
        "mysql> CREATE TABLE t1 (c1 INT) TABLESPACE ts_1 ENGINE NDB;\nQuery OK, 0 rows affected (1.27 sec)",
        "mysql> ALTER TABLE t1 TABLESPACE ts_1 STORAGE DISK;\nQuery OK, 0 rows affected (2.99 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `c1` int(11) DEFAULT NULL\n) /*!50100 TABLESPACE ts_1 STORAGE DISK */\nENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)",
        "mysql> CREATE TABLE t2 (c1 INT) ts_1 ENGINE NDB;\nQuery OK, 0 rows affected (1.00 sec)\n\nmysql> ALTER TABLE t2 STORAGE DISK;\nERROR 1005 (HY000): Can't create table 'c.#sql-1750_3' (errno: 140)\nmysql> ALTER TABLE t2 TABLESPACE ts_1 STORAGE DISK;\nQuery OK, 0 rows affected (3.42 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\nmysql> SHOW CREATE TABLE t2\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t2` (\n  `c1` int(11) DEFAULT NULL\n) /*!50100 TABLESPACE ts_1 STORAGE DISK */\nENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)",
        "mysql> CREATE TABLE t3 (c1 INT, c2 INT)\n    ->     TABLESPACE ts_1 STORAGE DISK ENGINE NDB;\nQuery OK, 0 rows affected (1.34 sec)",
        "mysql> ALTER TABLE t3 MODIFY c2 INT STORAGE MEMORY;\nQuery OK, 0 rows affected (3.14 sec)\nRecords: 0  Duplicates: 0  Warnings: 0",
        "CREATE TABLE t2 (id INT AUTO_INCREMENT PRIMARY KEY)\nSELECT * FROM t1 ORDER BY col1, col2;",
        "CREATE TABLE t2 LIKE t1;\nALTER TABLE t2 ADD id INT AUTO_INCREMENT PRIMARY KEY;\nINSERT INTO t2 SELECT * FROM t1 ORDER BY col1, col2;",
        "DROP TABLE t1;\nALTER TABLE t2 RENAME t1;"
    ],
    "Category": [
        "Data Definition Statements"
    ]
}