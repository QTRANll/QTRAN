{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/reset-binary-logs-and-gtids.html"
    ],
    "Title": [
        "15.4.1.2 RESET BINARY LOGS AND GTIDS Statement"
    ],
    "Feature": [
        "RESET BINARY LOGS AND GTIDS [TO binary_log_file_index_number]"
    ],
    "Description": [
        "\n\nWarning\n\n\n          Use this statement with caution to ensure you do not lose any\n          wanted binary log file data and GTID execution history.\n\n",
        "\nRESET BINARY LOGS AND GTIDS requires the\n        RELOAD privilege.\n      ",
        "\n        For a server where binary logging is enabled\n        (log_bin is\n        ON), RESET BINARY LOGS AND\n        GTIDS deletes all existing binary log files and resets\n        the binary log index file, resetting the server to its state\n        before binary logging was started. A new empty binary log file\n        is created so that binary logging can be restarted.\n      ",
        "\n        For a server where GTIDs are in use\n        (gtid_mode is\n        ON), issuing RESET BINARY LOGS AND\n        GTIDS resets the GTID execution history. The value of\n        the gtid_purged system variable\n        is set to an empty string (''), the global\n        value (but not the session value) of the\n        gtid_executed system variable\n        is set to an empty string, and the\n        mysql.gtid_executed table is cleared (see\n        mysql.gtid_executed Table). If the\n        GTID-enabled server has binary logging enabled, RESET\n        BINARY LOGS AND GTIDS also resets the binary log as\n        described above. Note that RESET BINARY LOGS AND\n        GTIDS is the method to reset the GTID execution\n        history even if the GTID-enabled server is a replica where\n        binary logging is disabled;\n        RESET\n        REPLICA has no effect on the GTID execution history.\n        For more information on resetting the GTID execution history,\n        see Resetting the GTID Execution History.\n      ",
        "\n        Issuing RESET BINARY LOGS AND GTIDS without\n        the optional TO clause deletes all binary log\n        files listed in the index file, resets the binary log index file\n        to be empty, and creates a new binary log file starting at\n        1. Use the optional TO\n        clause to start the binary log file index from a number other\n        than 1 after the reset.\n      ",
        "\n        Check that you are using a reasonable value for the index\n        number. If you enter an incorrect value, you can correct this by\n        issuing another RESET BINARY LOGS AND GTIDS\n        statement with or without the TO clause. If\n        you do not correct a value that is out of range, the server\n        cannot be restarted.\n      ",
        "\n        The following example demonstrates TO clause\n        usage:\n      ",
        "Press CTRL+C to copy RESET BINARY LOGS AND GTIDS TO 1234;\n\nSHOW BINARY LOGS;\n+-------------------+-----------+-----------+\n| Log_name          | File_size | Encrypted |\n+-------------------+-----------+-----------+\n| source-bin.001234 |       154 | No        |\n+-------------------+-----------+-----------+",
        "\n\nImportant\n\n\n          The effects of RESET BINARY LOGS AND GTIDS\n          without the TO clause differ from those of\n          PURGE BINARY LOGS in 2 key\n          ways:\n\n\n\nRESET BINARY LOGS AND GTIDS removes\n              all binary log files that are listed\n              in the index file, leaving only a single, empty binary log\n              file with a numeric suffix of .000001,\n              whereas the numbering is not reset by\n              PURGE BINARY LOGS.\n            \nRESET BINARY LOGS AND GTIDS is\n              not intended to be used while any\n              replicas are running. The behavior of RESET\n              BINARY LOGS AND GTIDS when used while replicas\n              are running is undefined (and thus unsupported), whereas\n              PURGE BINARY LOGS may be\n              safely used while replicas are running.\n\n\n\n          See also Section\u00a015.4.1.1, \u201cPURGE BINARY LOGS Statement\u201d.\n\n",
        "\nRESET BINARY LOGS AND GTIDS without the\n        TO clause can prove useful when you first set\n        up a source and replica, so that you can verify the setup as\n        follows:\n",
        "\n\n            Start the source and replica, and start replication (see\n            Section\u00a019.1.2, \u201cSetting Up Binary Log File Position Based Replication\u201d).\n          \n            Execute a few test queries on the source.\n          \n            Check that the queries were replicated to the replica.\n          \n            When replication is running correctly, issue\n            STOP REPLICA followed by\n            RESET REPLICA (both on the\n            replica), then verify that no unwanted data from the test\n            queries exists on the replica. Following this, issue\n            RESET BINARY LOGS AND GTIDS (also on the\n            replica) to remove binary logs and and associated\n            transaction IDs.\n          \n            Remove the unwanted data from the source, then issue\n            RESET BINARY LOGS AND GTIDS to purge any\n            binary log entries and identifiers associated with it.\n\n",
        "\n        After verifying the setup, resetting the source and replica and\n        ensuring that no unwanted data or binary log files generated by\n        testing remain on the source or replica, you can start the\n        replica and begin replicating.\n"
    ],
    "Examples": [
        "RESET BINARY LOGS AND GTIDS TO 1234;\n\nSHOW BINARY LOGS;\n+-------------------+-----------+-----------+\n| Log_name          | File_size | Encrypted |\n+-------------------+-----------+-----------+\n| source-bin.001234 |       154 | No        |\n+-------------------+-----------+-----------+"
    ],
    "Category": [
        "Replication Statements"
    ]
}