{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/create-view.html"
    ],
    "Title": [
        "15.1.23 CREATE VIEW Statement"
    ],
    "Feature": [
        "CREATE\n    [OR REPLACE]\n    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]\n    [DEFINER = user]\n    [SQL SECURITY { DEFINER | INVOKER }]\n    VIEW view_name [(column_list)]\n    AS select_statement\n    [WITH [CASCADED | LOCAL] CHECK OPTION]"
    ],
    "Description": [
        "\n      The CREATE VIEW statement creates a\n      new view, or replaces an existing view if the OR\n      REPLACE clause is given. If the view does not exist,\n      CREATE OR REPLACE\n      VIEW is the same as CREATE\n      VIEW. If the view does exist,\n      CREATE OR REPLACE\n      VIEW replaces it.\n    ",
        "\n      For information about restrictions on view use, see\n      Section\u00a027.9, \u201cRestrictions on Views\u201d.\n    ",
        "\n      The select_statement is a\n      SELECT statement that provides the\n      definition of the view. (Selecting from the view selects, in\n      effect, using the SELECT\n      statement.) The select_statement can\n      select from base tables or from other views. The\n      SELECT statement can use a\n      VALUES statement as its source, or\n      can be replaced with a TABLE\n      statement, as with\n      CREATE TABLE\n      ... SELECT.\n    ",
        "\n      The view definition is \u201cfrozen\u201d at creation time and\n      is not affected by subsequent changes to the definitions of the\n      underlying tables. For example, if a view is defined as\n      SELECT * on a table, new columns added to the\n      table later do not become part of the view, and columns dropped\n      from the table result in an error when selecting from the view.\n    ",
        "\n      The ALGORITHM clause affects how MySQL\n      processes the view. The DEFINER and\n      SQL SECURITY clauses specify the security\n      context to be used when checking access privileges at view\n      invocation time. The WITH CHECK OPTION clause\n      can be given to constrain inserts or updates to rows in tables\n      referenced by the view. These clauses are described later in this\n      section.\n    ",
        "\n      The CREATE VIEW statement requires\n      the CREATE VIEW privilege for the\n      view, and some privilege for each column selected by the\n      SELECT statement. For columns used\n      elsewhere in the SELECT statement,\n      you must have the SELECT privilege.\n      If the OR REPLACE clause is present, you must\n      also have the DROP privilege for\n      the view. If the DEFINER clause is present, the\n      privileges required depend on the user\n      value, as discussed in Section\u00a027.6, \u201cStored Object Access Control\u201d.\n    ",
        "\n      When a view is referenced, privilege checking occurs as described\n      later in this section.\n    ",
        "\n      A view belongs to a database. By default, a new view is created in\n      the default database. To create the view explicitly in a given\n      database, use db_name.view_name syntax\n      to qualify the view name with the database name:\n    ",
        "Press CTRL+C to copy CREATE VIEW test.v AS SELECT * FROM t;",
        "\n      Unqualified table or view names in the\n      SELECT statement are also\n      interpreted with respect to the default database. A view can refer\n      to tables or views in other databases by qualifying the table or\n      view name with the appropriate database name.\n    ",
        "\n      Within a database, base tables and views share the same namespace,\n      so a base table and a view cannot have the same name.\n    ",
        "\n      Columns retrieved by the SELECT\n      statement can be simple references to table columns, or\n      expressions that use functions, constant values, operators, and so\n      forth.\n    ",
        "\n      A view must have unique column names with no duplicates, just like\n      a base table. By default, the names of the columns retrieved by\n      the SELECT statement are used for\n      the view column names. To define explicit names for the view\n      columns, specify the optional\n      column_list clause as a list of\n      comma-separated identifiers. The number of names in\n      column_list must be the same as the\n      number of columns retrieved by the\n      SELECT statement.\n    ",
        "\n      A view can be created from many kinds of\n      SELECT statements. It can refer to\n      base tables or other views. It can use joins,\n      UNION, and subqueries. The\n      SELECT need not even refer to any\n      tables:\n    ",
        "Press CTRL+C to copy CREATE VIEW v_today (today) AS SELECT CURRENT_DATE;",
        "\n      The following example defines a view that selects two columns from\n      another table as well as an expression calculated from those\n      columns:\n    ",
        "Press CTRL+C to copy mysql> CREATE TABLE t (qty INT, price INT);\nmysql> INSERT INTO t VALUES(3, 50);\nmysql> CREATE VIEW v AS SELECT qty, price, qty*price AS value FROM t;\nmysql> SELECT * FROM v;\n+------+-------+-------+\n| qty  | price | value |\n+------+-------+-------+\n|    3 |    50 |   150 |\n+------+-------+-------+",
        "\n      A view definition is subject to the following restrictions:\n",
        "\n\n          The SELECT statement cannot\n          refer to system variables or user-defined variables.\n        \n          Within a stored program, the\n          SELECT statement cannot refer\n          to program parameters or local variables.\n        \n          The SELECT statement cannot\n          refer to prepared statement parameters.\n        \n          Any table or view referred to in the definition must exist.\n          If, after the view has been created, a table or view that the\n          definition refers to is dropped, use of the view results in an\n          error. To check a view definition for problems of this kind,\n          use the CHECK TABLE statement.\n        \n          The definition cannot refer to a TEMPORARY\n          table, and you cannot create a TEMPORARY\n          view.\n        \n          You cannot associate a trigger with a view.\n        \n          Aliases for column names in the\n          SELECT statement are checked\n          against the maximum column length of 64 characters (not the\n          maximum alias length of 256 characters).\n\n",
        "\nORDER BY is permitted in a view definition, but\n      it is ignored if you select from a view using a statement that has\n      its own ORDER BY.\n    ",
        "\n      For other options or clauses in the definition, they are added to\n      the options or clauses of the statement that references the view,\n      but the effect is undefined. For example, if a view definition\n      includes a LIMIT clause, and you select from\n      the view using a statement that has its own\n      LIMIT clause, it is undefined which limit\n      applies. This same principle applies to options such as\n      ALL, DISTINCT, or\n      SQL_SMALL_RESULT that follow the\n      SELECT keyword, and to clauses such\n      as INTO, FOR UPDATE,\n      FOR SHARE, LOCK IN SHARE\n      MODE, and PROCEDURE.\n    ",
        "\n      The results obtained from a view may be affected if you change the\n      query processing environment by changing system variables:\n    ",
        "Press CTRL+C to copy mysql> CREATE VIEW v (mycol) AS SELECT 'abc';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET sql_mode = '';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| mycol |\n+-------+\n1 row in set (0.01 sec)\n\nmysql> SET sql_mode = 'ANSI_QUOTES';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| abc   |\n+-------+\n1 row in set (0.00 sec)",
        "\n      The DEFINER and SQL SECURITY\n      clauses determine which MySQL account to use when checking access\n      privileges for the view when a statement is executed that\n      references the view. The valid SQL SECURITY\n      characteristic values are DEFINER (the default)\n      and INVOKER. These indicate that the required\n      privileges must be held by the user who defined or invoked the\n      view, respectively.\n    ",
        "\n      If the DEFINER clause is present, the\n      user value should be a MySQL account\n      specified as\n      'user_name'@'host_name',\n      CURRENT_USER, or\n      CURRENT_USER(). The permitted\n      user values depend on the privileges\n      you hold, as discussed in\n      Section\u00a027.6, \u201cStored Object Access Control\u201d. Also see that section\n      for additional information about view security.\n    ",
        "\n      If the DEFINER clause is omitted, the default\n      definer is the user who executes the CREATE\n      VIEW statement. This is the same as specifying\n      DEFINER = CURRENT_USER explicitly.\n    ",
        "\n      Within a view definition, the\n      CURRENT_USER function returns the\n      view's DEFINER value by default. For views\n      defined with the SQL SECURITY INVOKER\n      characteristic, CURRENT_USER\n      returns the account for the view's invoker. For information about\n      user auditing within views, see\n      Section\u00a08.2.23, \u201cSQL-Based Account Activity Auditing\u201d.\n    ",
        "\n      Within a stored routine that is defined with the SQL\n      SECURITY DEFINER characteristic,\n      CURRENT_USER returns the routine's\n      DEFINER value. This also affects a view defined\n      within such a routine, if the view definition contains a\n      DEFINER value of\n      CURRENT_USER.\n    ",
        "\n      MySQL checks view privileges like this:\n",
        "\n\n          At view definition time, the view creator must have the\n          privileges needed to use the top-level objects accessed by the\n          view. For example, if the view definition refers to table\n          columns, the creator must have some privilege for each column\n          in the select list of the definition, and the\n          SELECT privilege for each\n          column used elsewhere in the definition. If the definition\n          refers to a stored function, only the privileges needed to\n          invoke the function can be checked. The privileges required at\n          function invocation time can be checked only as it executes:\n          For different invocations, different execution paths within\n          the function might be taken.\n        \n          The user who references a view must have appropriate\n          privileges to access it (SELECT\n          to select from it, INSERT to\n          insert into it, and so forth.)\n        \n          When a view has been referenced, privileges for objects\n          accessed by the view are checked against the privileges held\n          by the view DEFINER account or invoker,\n          depending on whether the SQL SECURITY\n          characteristic is DEFINER or\n          INVOKER, respectively.\n        \n          If reference to a view causes execution of a stored function,\n          privilege checking for statements executed within the function\n          depend on whether the function SQL SECURITY\n          characteristic is DEFINER or\n          INVOKER. If the security characteristic is\n          DEFINER, the function runs with the\n          privileges of the DEFINER account. If the\n          characteristic is INVOKER, the function\n          runs with the privileges determined by the view's SQL\n          SECURITY characteristic.\n\n",
        "\n      Example: A view might depend on a stored function, and that\n      function might invoke other stored routines. For example, the\n      following view invokes a stored function f():\n    ",
        "Press CTRL+C to copy CREATE VIEW v AS SELECT * FROM t WHERE t.id = f(t.name);",
        "\n      Suppose that f() contains a statement such as\n      this:\n    ",
        "Press CTRL+C to copy IF name IS NULL then\n  CALL p1();\nELSE\n  CALL p2();\nEND IF;",
        "\n      The privileges required for executing statements within\n      f() need to be checked when\n      f() executes. This might mean that privileges\n      are needed for p1() or p2(),\n      depending on the execution path within f().\n      Those privileges must be checked at runtime, and the user who must\n      possess the privileges is determined by the SQL\n      SECURITY values of the view v and the\n      function f().\n    ",
        "\n      The DEFINER and SQL SECURITY\n      clauses for views are extensions to standard SQL. In standard SQL,\n      views are handled using the rules for SQL SECURITY\n      DEFINER. The standard says that the definer of the view,\n      which is the same as the owner of the view's schema, gets\n      applicable privileges on the view (for example,\n      SELECT) and may grant them. MySQL\n      has no concept of a schema \u201cowner\u201d, so MySQL adds a\n      clause to identify the definer. The DEFINER\n      clause is an extension where the intent is to have what the\n      standard has; that is, a permanent record of who defined the view.\n      This is why the default DEFINER value is the\n      account of the view creator.\n    ",
        "\n      The optional ALGORITHM clause is a MySQL\n      extension to standard SQL. It affects how MySQL processes the\n      view. ALGORITHM takes three values:\n      MERGE, TEMPTABLE, or\n      UNDEFINED. For more information, see\n      Section\u00a027.5.2, \u201cView Processing Algorithms\u201d, as well as\n      Section\u00a010.2.2.4, \u201cOptimizing Derived Tables, View References, and Common Table Expressions\n          with Merging or Materialization\u201d.\n    ",
        "\n      Some views are updatable. That is, you can use them in statements\n      such as UPDATE,\n      DELETE, or\n      INSERT to update the contents of\n      the underlying table. For a view to be updatable, there must be a\n      one-to-one relationship between the rows in the view and the rows\n      in the underlying table. There are also certain other constructs\n      that make a view nonupdatable.\n    ",
        "\n      A generated column in a view is considered updatable because it is\n      possible to assign to it. However, if such a column is updated\n      explicitly, the only permitted value is\n      DEFAULT. For information about generated\n      columns, see Section\u00a015.1.20.8, \u201cCREATE TABLE and Generated Columns\u201d.\n    ",
        "\n      The WITH CHECK OPTION clause can be given for\n      an updatable view to prevent inserts or updates to rows except\n      those for which the WHERE clause in the\n      select_statement is true.\n    ",
        "\n      In a WITH CHECK OPTION clause for an updatable\n      view, the LOCAL and CASCADED\n      keywords determine the scope of check testing when the view is\n      defined in terms of another view. The LOCAL\n      keyword restricts the CHECK OPTION only to the\n      view being defined. CASCADED causes the checks\n      for underlying views to be evaluated as well. When neither keyword\n      is given, the default is CASCADED.\n    ",
        "\n      For more information about updatable views and the WITH\n      CHECK OPTION clause, see\n      Section\u00a027.5.3, \u201cUpdatable and Insertable Views\u201d, and\n      Section\u00a027.5.4, \u201cThe View WITH CHECK OPTION Clause\u201d.\n"
    ],
    "Examples": [
        "CREATE VIEW test.v AS SELECT * FROM t;",
        "CREATE VIEW v_today (today) AS SELECT CURRENT_DATE;",
        "mysql> CREATE TABLE t (qty INT, price INT);\nmysql> INSERT INTO t VALUES(3, 50);\nmysql> CREATE VIEW v AS SELECT qty, price, qty*price AS value FROM t;\nmysql> SELECT * FROM v;\n+------+-------+-------+\n| qty  | price | value |\n+------+-------+-------+\n|    3 |    50 |   150 |\n+------+-------+-------+",
        "mysql> CREATE VIEW v (mycol) AS SELECT 'abc';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET sql_mode = '';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| mycol |\n+-------+\n1 row in set (0.01 sec)\n\nmysql> SET sql_mode = 'ANSI_QUOTES';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| abc   |\n+-------+\n1 row in set (0.00 sec)",
        "CREATE VIEW v AS SELECT * FROM t WHERE t.id = f(t.name);",
        "IF name IS NULL then\n  CALL p1();\nELSE\n  CALL p2();\nEND IF;"
    ],
    "Category": [
        "Data Definition Statements"
    ]
}