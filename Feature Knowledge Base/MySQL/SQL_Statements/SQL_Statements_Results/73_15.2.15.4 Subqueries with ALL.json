{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/all-subqueries.html"
    ],
    "Title": [
        "15.2.15.4 Subqueries with ALL"
    ],
    "Feature": [
        "operand comparison_operator ALL (subquery)"
    ],
    "Description": [
        "\n        Syntax:\n      ",
        "\n        The word ALL, which must follow a comparison\n        operator, means \u201creturn TRUE if the\n        comparison is TRUE for ALL\n        of the values in the column that the subquery returns.\u201d\n        For example:\n      ",
        "Press CTRL+C to copy SELECT s1 FROM t1 WHERE s1 > ALL (SELECT s1 FROM t2);",
        "\n        Suppose that there is a row in table t1\n        containing (10). The expression is\n        TRUE if table t2 contains\n        (-5,0,+5) because 10 is\n        greater than all three values in t2. The\n        expression is FALSE if table\n        t2 contains\n        (12,6,NULL,-100) because there is a single\n        value 12 in table t2 that\n        is greater than 10. The expression is\n        unknown (that is, NULL)\n        if table t2 contains\n        (0,NULL,1).\n      ",
        "\n        Finally, the expression is TRUE if table\n        t2 is empty. So, the following expression is\n        TRUE when table t2 is\n        empty:\n      ",
        "Press CTRL+C to copy SELECT * FROM t1 WHERE 1 > ALL (SELECT s1 FROM t2);",
        "\n        But this expression is NULL when table\n        t2 is empty:\n      ",
        "Press CTRL+C to copy SELECT * FROM t1 WHERE 1 > (SELECT s1 FROM t2);",
        "\n        In addition, the following expression is NULL\n        when table t2 is empty:\n      ",
        "Press CTRL+C to copy SELECT * FROM t1 WHERE 1 > ALL (SELECT MAX(s1) FROM t2);",
        "\n        In general, tables containing NULL\n        values and empty tables are\n        \u201cedge cases.\u201d When writing subqueries, always\n        consider whether you have taken those two possibilities into\n        account.\n      ",
        "\nNOT IN is an alias for <>\n        ALL. Thus, these two statements are the same:\n      ",
        "Press CTRL+C to copy SELECT s1 FROM t1 WHERE s1 <> ALL (SELECT s1 FROM t2);\nSELECT s1 FROM t1 WHERE s1 NOT IN (SELECT s1 FROM t2);",
        "\n        As with IN, ANY, and\n        SOME, you can use\n        TABLE with ALL\n        and NOT IN provided that the following two\n        conditions are met:\n",
        "\n\n            The table in the subquery contains only one column\n          \n            The subquery does not depend on a column expression\n\n",
        "\n        For example, assuming that table t2 consists\n        of a single column, the last two statements shown previously can\n        be written using TABLE t2 like this:\n      ",
        "Press CTRL+C to copy SELECT s1 FROM t1 WHERE s1 <> ALL (TABLE t2);\nSELECT s1 FROM t1 WHERE s1 NOT IN (TABLE t2);",
        "\n        A query such as SELECT * FROM t1 WHERE 1 > ALL\n        (SELECT MAX(s1) FROM t2); cannot be written using\n        TABLE t2 because the subquery depends on a\n        column expression.\n"
    ],
    "Examples": [
        "SELECT s1 FROM t1 WHERE s1 > ALL (SELECT s1 FROM t2);",
        "SELECT * FROM t1 WHERE 1 > ALL (SELECT s1 FROM t2);",
        "SELECT * FROM t1 WHERE 1 > (SELECT s1 FROM t2);",
        "SELECT * FROM t1 WHERE 1 > ALL (SELECT MAX(s1) FROM t2);",
        "SELECT s1 FROM t1 WHERE s1 <> ALL (SELECT s1 FROM t2);\nSELECT s1 FROM t1 WHERE s1 NOT IN (SELECT s1 FROM t2);",
        "SELECT s1 FROM t1 WHERE s1 <> ALL (TABLE t2);\nSELECT s1 FROM t1 WHERE s1 NOT IN (TABLE t2);"
    ],
    "Category": [
        "Data Manipulation Statements"
    ]
}