{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/truncate-table.html"
    ],
    "Title": [
        "15.1.37 TRUNCATE TABLE Statement"
    ],
    "Feature": [
        "TRUNCATE [TABLE] tbl_name"
    ],
    "Description": [
        "\nTRUNCATE TABLE empties a table\n      completely. It requires the DROP\n      privilege. Logically, TRUNCATE\n      TABLE is similar to a\n      DELETE statement that deletes all\n      rows, or a sequence of DROP TABLE\n      and CREATE TABLE statements.\n    ",
        "\n      To achieve high performance, TRUNCATE\n      TABLE bypasses the DML method of deleting data. Thus, it\n      does not cause ON DELETE triggers to fire, it\n      cannot be performed for InnoDB tables with\n      parent-child foreign key relationships, and it cannot be rolled\n      back like a DML operation. However, TRUNCATE\n      TABLE operations on tables that use an atomic\n      DDL-supported storage engine are either fully committed or rolled\n      back if the server halts during their operation. For more\n      information, see Section\u00a015.1.1, \u201cAtomic Data Definition Statement Support\u201d.\n    ",
        "\n      Although TRUNCATE TABLE is similar\n      to DELETE, it is classified as a\n      DDL statement rather than a DML statement. It differs from\n      DELETE in the following ways:\n",
        "\n\n          Truncate operations drop and re-create the table, which is\n          much faster than deleting rows one by one, particularly for\n          large tables.\n        \n          Truncate operations cause an implicit commit, and so cannot be\n          rolled back. See Section\u00a015.3.3, \u201cStatements That Cause an Implicit Commit\u201d.\n        \n          Truncation operations cannot be performed if the session holds\n          an active table lock.\n        \nTRUNCATE TABLE fails for an\n          InnoDB table or\n          NDB table if there are any\n          FOREIGN KEY constraints from other tables\n          that reference the table. Foreign key constraints between\n          columns of the same table are permitted.\n        \n          Truncation operations do not return a meaningful value for the\n          number of deleted rows. The usual result is \u201c0 rows\n          affected,\u201d which should be interpreted as \u201cno\n          information.\u201d\n\n          As long as the table definition is valid, the table can be\n          re-created as an empty table with\n          TRUNCATE TABLE, even if the\n          data or index files have become corrupted.\n        \n          Any AUTO_INCREMENT value is reset to its\n          start value. This is true even for MyISAM\n          and InnoDB, which normally do not reuse\n          sequence values.\n        \n          When used with partitioned tables,\n          TRUNCATE TABLE preserves the\n          partitioning; that is, the data and index files are dropped\n          and re-created, while the partition definitions are\n          unaffected.\n        \n          The TRUNCATE TABLE statement\n          does not invoke ON DELETE triggers.\n        \n          Truncating a corrupted InnoDB table is\n          supported.\n\n",
        "\nTRUNCATE TABLE is treated for\n      purposes of binary logging and replication as DDL rather than DML,\n      and is always logged as a statement.\n    ",
        "\nTRUNCATE TABLE for a table closes\n      all handlers for the table that were opened with\n      HANDLER OPEN.\n    ",
        "\nTRUNCATE TABLE can be used with\n      Performance Schema summary tables, but the effect is to reset the\n      summary columns to 0 or NULL, not to remove\n      rows. See Section\u00a029.12.20, \u201cPerformance Schema Summary Tables\u201d.\n    ",
        "\n      Truncating an InnoDB table that resides in a\n      file-per-table tablespace drops the existing tablespace and\n      creates a new one. If the tablespace was created with an earlier\n      version and resides in an unknown directory,\n      InnoDB creates the new tablespace in the\n      default location and writes the following warning to the error\n      log: The DATA DIRECTORY location must be in a known\n      directory. The DATA DIRECTORY location will be ignored and the\n      file will be put into the default datadir location.\n      Known directories are those defined by the\n      datadir,\n      innodb_data_home_dir, and\n      innodb_directories variables. To\n      have TRUNCATE TABLE create the\n      tablespace in its current location, add the directory to the\n      innodb_directories setting before\n      running TRUNCATE TABLE.\n"
    ],
    "Examples": [],
    "Category": [
        "Data Definition Statements"
    ]
}