{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/call.html"
    ],
    "Title": [
        "15.2.1 CALL Statement"
    ],
    "Feature": [
        "CALL sp_name([parameter[,...]])\nCALL sp_name[()]"
    ],
    "Description": [
        "\n      The CALL statement invokes a stored\n      procedure that was defined previously with\n      CREATE PROCEDURE.\n    ",
        "\n      Stored procedures that take no arguments can be invoked without\n      parentheses. That is, CALL p() and\n      CALL p are equivalent.\n    ",
        "\nCALL can pass back values to its\n      caller using parameters that are declared as\n      OUT or INOUT parameters.\n      When the procedure returns, a client program can also obtain the\n      number of rows affected for the final statement executed within\n      the routine: At the SQL level, call the\n      ROW_COUNT() function; from the C\n      API, call the\n      mysql_affected_rows() function.\n    ",
        "\n      For information about the effect of unhandled conditions on\n      procedure parameters, see\n      Section\u00a015.6.7.8, \u201cCondition Handling and OUT or INOUT Parameters\u201d.\n    ",
        "\n      To get back a value from a procedure using an\n      OUT or INOUT parameter, pass\n      the parameter by means of a user variable, and then check the\n      value of the variable after the procedure returns. (If you are\n      calling the procedure from within another stored procedure or\n      function, you can also pass a routine parameter or local routine\n      variable as an IN or INOUT\n      parameter.) For an INOUT parameter, initialize\n      its value before passing it to the procedure. The following\n      procedure has an OUT parameter that the\n      procedure sets to the current server version, and an\n      INOUT value that the procedure increments by\n      one from its current value:\n    ",
        "Press CTRL+C to copy DELIMITER //\n\nCREATE PROCEDURE p (OUT ver_param VARCHAR(25), INOUT incr_param INT)\nBEGIN\n  # Set value of OUT parameter\n  SELECT VERSION() INTO ver_param;\n  # Increment value of INOUT parameter\n  SET incr_param = incr_param + 1;\nEND //\n\nDELIMITER ;",
        "\n      Before calling the procedure, initialize the variable to be passed\n      as the INOUT parameter. After calling the\n      procedure, you can see that the values of the two variables are\n      set or modified:\n    ",
        "Press CTRL+C to copy mysql> SET @increment = 10;\nmysql> CALL p(@version, @increment);\nmysql> SELECT @version, @increment;\n+----------+------------+\n| @version | @increment |\n+----------+------------+\n| 8.4.0   |         11 |\n+----------+------------+",
        "\n      In prepared CALL statements used\n      with PREPARE and\n      EXECUTE, placeholders can be used\n      for IN parameters, OUT, and\n      INOUT parameters. These types of parameters can\n      be used as follows:\n    ",
        "Press CTRL+C to copy mysql> SET @increment = 10;\nmysql> PREPARE s FROM 'CALL p(?, ?)';\nmysql> EXECUTE s USING @version, @increment;\nmysql> SELECT @version, @increment;\n+----------+------------+\n| @version | @increment |\n+----------+------------+\n| 8.4.0   |         11 |\n+----------+------------+",
        "\n      To write C programs that use the\n      CALL SQL statement to execute\n      stored procedures that produce result sets, the\n      CLIENT_MULTI_RESULTS flag must be enabled. This\n      is because each CALL returns a\n      result to indicate the call status, in addition to any result sets\n      that might be returned by statements executed within the\n      procedure. CLIENT_MULTI_RESULTS must also be\n      enabled if CALL is used to execute\n      any stored procedure that contains prepared statements. It cannot\n      be determined when such a procedure is loaded whether those\n      statements produce result sets, so it is necessary to assume that\n      they do so.\n    ",
        "\nCLIENT_MULTI_RESULTS can be enabled when you\n      call mysql_real_connect(), either\n      explicitly by passing the CLIENT_MULTI_RESULTS\n      flag itself, or implicitly by passing\n      CLIENT_MULTI_STATEMENTS (which also enables\n      CLIENT_MULTI_RESULTS).\n      CLIENT_MULTI_RESULTS is enabled by default.\n    ",
        "\n      To process the result of a CALL\n      statement executed using\n      mysql_query() or\n      mysql_real_query(), use a loop\n      that calls mysql_next_result() to\n      determine whether there are more results. For an example, see\n      Multiple Statement Execution Support.\n    ",
        "\n      C programs can use the prepared-statement interface to execute\n      CALL statements and access\n      OUT and INOUT parameters.\n      This is done by processing the result of a\n      CALL statement using a loop that\n      calls mysql_stmt_next_result() to\n      determine whether there are more results. For an example, see\n      Prepared CALL Statement Support. Languages that\n      provide a MySQL interface can use prepared\n      CALL statements to directly\n      retrieve OUT and INOUT\n      procedure parameters.\n    ",
        "\n      Metadata changes to objects referred to by stored programs are\n      detected and cause automatic reparsing of the affected statements\n      when the program is next executed. For more information, see\n      Section\u00a010.10.3, \u201cCaching of Prepared Statements and Stored Programs\u201d.\n"
    ],
    "Examples": [
        "DELIMITER //\n\nCREATE PROCEDURE p (OUT ver_param VARCHAR(25), INOUT incr_param INT)\nBEGIN\n  # Set value of OUT parameter\n  SELECT VERSION() INTO ver_param;\n  # Increment value of INOUT parameter\n  SET incr_param = incr_param + 1;\nEND //\n\nDELIMITER ;",
        "mysql> SET @increment = 10;\nmysql> CALL p(@version, @increment);\nmysql> SELECT @version, @increment;\n+----------+------------+\n| @version | @increment |\n+----------+------------+\n| 8.4.0   |         11 |\n+----------+------------+",
        "mysql> SET @increment = 10;\nmysql> PREPARE s FROM 'CALL p(?, ?)';\nmysql> EXECUTE s USING @version, @increment;\nmysql> SELECT @version, @increment;\n+----------+------------+\n| @version | @increment |\n+----------+------------+\n| 8.4.0   |         11 |\n+----------+------------+"
    ],
    "Category": [
        "Data Manipulation Statements"
    ]
}