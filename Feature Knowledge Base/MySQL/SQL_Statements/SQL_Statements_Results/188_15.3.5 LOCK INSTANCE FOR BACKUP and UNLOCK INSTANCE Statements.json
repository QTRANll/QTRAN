{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/lock-instance-for-backup.html"
    ],
    "Title": [
        "15.3.5 LOCK INSTANCE FOR BACKUP and UNLOCK INSTANCE Statements"
    ],
    "Feature": [
        "LOCK INSTANCE FOR BACKUP\n\nUNLOCK INSTANCE"
    ],
    "Description": [
        "\nLOCK INSTANCE FOR BACKUP acquires an\n      instance-level backup lock that permits DML\n      during an online backup while preventing operations that could\n      result in an inconsistent snapshot.\n    ",
        "\n      Executing the LOCK INSTANCE FOR BACKUP\n      statement requires the BACKUP_ADMIN\n      privilege. The BACKUP_ADMIN\n      privilege is automatically granted to users with the\n      RELOAD privilege when performing an\n      in-place upgrade to MySQL 8.4 from an earlier\n      version.\n    ",
        "\n      Multiple sessions can hold a backup lock simultaneously.\n    ",
        "\nUNLOCK INSTANCE releases a backup lock held by\n      the current session. A backup lock held by a session is also\n      released if the session is terminated.\n    ",
        "\nLOCK INSTANCE FOR BACKUP prevents files from\n      being created, renamed, or removed. REPAIR\n      TABLE TRUNCATE TABLE,\n      OPTIMIZE TABLE, and account\n      management statements are blocked. See\n      Section\u00a015.7.1, \u201cAccount Management Statements\u201d. Operations that\n      modify InnoDB files that are not recorded in\n      the InnoDB redo log are also blocked.\n    ",
        "\nLOCK INSTANCE FOR BACKUP permits DDL operations\n      that only affect user-created temporary tables. In effect, files\n      that belong to user-created temporary tables can be created,\n      renamed, or removed while a backup lock is held. Creation of\n      binary log files is also permitted.\n    ",
        "\nPURGE BINARY LOGS cannot be issued\n      while a LOCK INSTANCE FOR BACKUP\n      statement is in effect for the instance, because it contravenes\n      the rules of the backup lock by removing files from the server.\n    ",
        "\n      A backup lock acquired by LOCK INSTANCE FOR\n      BACKUP is independent of transactional locks and locks\n      taken by\n      FLUSH\n      TABLES tbl_name [,\n      tbl_name] ... WITH READ LOCK,\n      and the following sequences of statements are permitted:\n    ",
        "Press CTRL+C to copy LOCK INSTANCE FOR BACKUP;\nFLUSH TABLES tbl_name [, tbl_name] ... WITH READ LOCK;\nUNLOCK TABLES;\nUNLOCK INSTANCE;",
        "Press CTRL+C to copy FLUSH TABLES tbl_name [, tbl_name] ... WITH READ LOCK;\nLOCK INSTANCE FOR BACKUP;\nUNLOCK INSTANCE;\nUNLOCK TABLES;",
        "\n      The lock_wait_timeout setting\n      defines the amount of time that a LOCK INSTANCE FOR\n      BACKUP statement waits to acquire a lock before giving\n      up.\n"
    ],
    "Examples": [
        "LOCK INSTANCE FOR BACKUP;\nFLUSH TABLES tbl_name [, tbl_name] ... WITH READ LOCK;\nUNLOCK TABLES;\nUNLOCK INSTANCE;",
        "FLUSH TABLES tbl_name [, tbl_name] ... WITH READ LOCK;\nLOCK INSTANCE FOR BACKUP;\nUNLOCK INSTANCE;\nUNLOCK TABLES;"
    ],
    "Category": [
        "Transactional and Locking Statements"
    ]
}