{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/check-table.html"
    ],
    "Title": [
        "15.7.3.2 CHECK TABLE Statement"
    ],
    "Feature": [
        "CHECK TABLE tbl_name [, tbl_name] ... [option] ...\n\noption: {\n    FOR UPGRADE\n  | QUICK\n  | FAST\n  | MEDIUM\n  | EXTENDED\n  | CHANGED\n}"
    ],
    "Description": [
        "\nCHECK TABLE checks a table or\n        tables for errors. CHECK TABLE\n        can also check views for problems, such as tables that are\n        referenced in the view definition that no longer exist.\n      ",
        "\n        To check a table, you must have some privilege for it.\n      ",
        "\nCHECK TABLE works for\n        InnoDB,\n        MyISAM,\n        ARCHIVE, and\n        CSV tables.\n      ",
        "\n        Before running CHECK TABLE on\n        InnoDB tables, see\n        CHECK TABLE Usage Notes for InnoDB Tables.\n      ",
        "\nCHECK TABLE is supported for\n        partitioned tables, and you can use ALTER TABLE ...\n        CHECK PARTITION to check one or more partitions; for\n        more information, see Section\u00a015.1.9, \u201cALTER TABLE Statement\u201d, and\n        Section\u00a026.3.4, \u201cMaintenance of Partitions\u201d.\n      ",
        "\nCHECK TABLE ignores virtual\n        generated columns that are not indexed.\n",
        "\nCHECK TABLE OutputChecking Version CompatibilityChecking Data ConsistencyCHECK TABLE Usage Notes for InnoDB TablesCHECK TABLE Usage Notes for MyISAM Tables\n",
        "\n\n\n\nCHECK TABLE Output\n\n\n\n\nCHECK TABLE returns a result\n          set with the columns shown in the following table.\n\n\n\nColumn\nValue\n\nTable\nThe table name\n\nOp\nAlways check\n\nMsg_type\nstatus, error,\n                info, note, or\n                warning\n\nMsg_text\nAn informational message\n\n\n\n          The statement might produce many rows of information for each\n          checked table. The last row has a Msg_type\n          value of status and the\n          Msg_text normally should be\n          OK. Table is already up to\n          date means that the storage engine for the table\n          indicated that there was no need to check the table.\n\n",
        "\n\n\n\nChecking Version Compatibility\n\n\n\n\n          The FOR UPGRADE option checks whether the\n          named tables are compatible with the current version of MySQL.\n          With FOR UPGRADE, the server checks each\n          table to determine whether there have been any incompatible\n          changes in any of the table's data types or indexes since the\n          table was created. If not, the check succeeds. Otherwise, if\n          there is a possible incompatibility, the server runs a full\n          check on the table (which might take some time).\n        \n          Incompatibilities might occur because the storage format for a\n          data type has changed or because its sort order has changed.\n          Our aim is to avoid these changes, but occasionally they are\n          necessary to correct problems that would be worse than an\n          incompatibility between releases.\n        \nFOR UPGRADE discovers these\n          incompatibilities:\n\n\n\n              The indexing order for end-space in\n              TEXT columns for\n              InnoDB and MyISAM\n              tables changed between MySQL 4.1 and 5.0.\n            \n              The storage method of the new\n              DECIMAL data type changed\n              between MySQL 5.0.3 and 5.0.5.\n            \n              Changes are sometimes made to character sets or collations\n              that require table indexes to be rebuilt. For details\n              about such changes, see\n              Section\u00a03.5, \u201cChanges in MySQL 8.4\u201d. For\n              information about rebuilding tables, see\n              Section\u00a03.14, \u201cRebuilding or Repairing Tables or Indexes\u201d.\n            \n              MySQL 8.4 does not support the 2-digit\n              YEAR(2) data type permitted\n              in older versions of MySQL. For tables containing\n              YEAR(2) columns,\n              CHECK TABLE recommends\n              REPAIR TABLE, which\n              converts 2-digit YEAR(2)\n              columns to 4-digit YEAR\n              columns.\n            \n              Trigger creation time is maintained.\n            \n              A table is reported as needing a rebuild if it contains\n              old temporal columns in pre-5.6.4 format\n              (TIME,\n              DATETIME, and\n              TIMESTAMP columns without\n              support for fractional seconds precision). This helps the\n              MySQL upgrade procedure detect and upgrade tables\n              containing old temporal columns.\n            \n              Warnings are issued for tables that use nonnative\n              partitioning because nonnative partitioning is removed in\n              MySQL 8.4. See\n              Chapter\u00a026, Partitioning.\n\n\n",
        "\n\n\n\nChecking Data Consistency\n\n\n\n\n          The following table shows the other check options that can be\n          given. These options are passed to the storage engine, which\n          may use or ignore them.\n\n\n\nType\nMeaning\n\nQUICK\nDo not scan the rows to check for incorrect links. Applies to\n                InnoDB and MyISAM\n                tables and views.\n\nFAST\nCheck only tables that have not been closed properly. Ignored for\n                InnoDB; applies only to\n                MyISAM tables and views.\n\nCHANGED\nCheck only tables that have been changed since the last check or that\n                have not been closed properly. Ignored for\n                InnoDB; applies only to\n                MyISAM tables and views.\n\nMEDIUM\nScan rows to verify that deleted links are valid. This also calculates a\n                key checksum for the rows and verifies this with a\n                calculated checksum for the keys. Ignored for\n                InnoDB; applies only to\n                MyISAM tables and views.\n\nEXTENDED\nDo a full key lookup for all keys for each row. This ensures that the\n                table is 100% consistent, but takes a long time. Ignored\n                for InnoDB; applies only to\n                MyISAM tables and views.\n\n\n\n          You can combine check options, as in the following example\n          that does a quick check on the table to determine whether it\n          was closed properly:\n        Press CTRL+C to copy CHECK TABLE test_table FAST QUICK;\n\n\nNote\n\n\n            If CHECK TABLE finds no\n            problems with a table that is marked as\n            \u201ccorrupted\u201d or \u201cnot closed\n            properly\u201d, CHECK TABLE\n            may remove the mark.\n\n\n\n          If a table is corrupted, the problem is most likely in the\n          indexes and not in the data part. All of the preceding check\n          types check the indexes thoroughly and should thus find most\n          errors.\n        \n          To check a table that you assume is okay, use no check options\n          or the QUICK option. The latter should be\n          used when you are in a hurry and can take the very small risk\n          that QUICK does not find an error in the\n          data file. (In most cases, under normal usage, MySQL should\n          find any error in the data file. If this happens, the table is\n          marked as \u201ccorrupted\u201d and cannot be used until it\n          is repaired.)\n        \nFAST and CHANGED are\n          mostly intended to be used from a script (for example, to be\n          executed from cron) to check tables\n          periodically. In most cases, FAST is to be\n          preferred over CHANGED. (The only case when\n          it is not preferred is when you suspect that you have found a\n          bug in the MyISAM code.)\n        \nEXTENDED is to be used only after you have\n          run a normal check but still get errors from a table when\n          MySQL tries to update a row or find a row by key. This is very\n          unlikely if a normal check has succeeded.\n        \n          Use of CHECK\n          TABLE ... EXTENDED might influence execution plans\n          generated by the query optimizer.\n        \n          Some problems reported by CHECK\n          TABLE cannot be corrected automatically:\n\n\n\nFound row where the auto_increment column has the\n              value 0.\n            \n              This means that you have a row in the table where the\n              AUTO_INCREMENT index column contains\n              the value 0. (It is possible to create a row where the\n              AUTO_INCREMENT column is 0 by\n              explicitly setting the column to 0 with an\n              UPDATE statement.)\n            \n              This is not an error in itself, but could cause trouble if\n              you decide to dump the table and restore it or do an\n              ALTER TABLE on the table.\n              In this case, the AUTO_INCREMENT column\n              changes value according to the rules of\n              AUTO_INCREMENT columns, which could\n              cause problems such as a duplicate-key error.\n            \n              To get rid of the warning, execute an\n              UPDATE statement to set the\n              column to some value other than 0.\n\n\n",
        "\n\n\n\nCHECK TABLE Usage Notes for InnoDB Tables\n\n\n\n\n          The following notes apply to\n          InnoDB tables:\n\n\n\n              If CHECK TABLE encounters a\n              corrupt page, the server exits to prevent error\n              propagation (Bug #10132). If the corruption occurs in a\n              secondary index but table data is readable, running\n              CHECK TABLE can still cause\n              a server exit.\n            \n              If CHECK TABLE encounters a\n              corrupted DB_TRX_ID or\n              DB_ROLL_PTR field in a clustered index,\n              CHECK TABLE can cause\n              InnoDB to access an invalid undo log\n              record, resulting in an\n              MVCC-related server exit.\n            \n              If CHECK TABLE encounters\n              errors in InnoDB tables or indexes, it\n              reports an error, and usually marks the index and\n              sometimes marks the table as corrupted, preventing further\n              use of the index or table. Such errors include an\n              incorrect number of entries in a secondary index or\n              incorrect links.\n            \n              If CHECK TABLE finds an\n              incorrect number of entries in a secondary index, it\n              reports an error but does not cause a server exit or\n              prevent access to the file.\n            \nCHECK TABLE surveys the\n              index page structure, then surveys each key entry. It does\n              not validate the key pointer to a clustered record or\n              follow the path for BLOB\n              pointers.\n            \n              When an InnoDB table is stored in its\n              own\n              .ibd\n              file, the first 3\n              pages of the\n              .ibd file contain header information\n              rather than table or index data. The\n              CHECK TABLE statement does\n              not detect inconsistencies that affect only the header\n              data. To verify the entire contents of an\n              InnoDB .ibd file,\n              use the innochecksum command.\n            \n              When running CHECK TABLE on\n              large InnoDB tables, other threads may\n              be blocked during CHECK\n              TABLE execution. To avoid timeouts, the\n              semaphore wait threshold (600 seconds) is extended by 2\n              hours (7200 seconds) for CHECK\n              TABLE operations. If InnoDB\n              detects semaphore waits of 240 seconds or more, it starts\n              printing InnoDB monitor output to the\n              error log. If a lock request extends beyond the semaphore\n              wait threshold, InnoDB aborts the\n              process. To avoid the possibility of a semaphore wait\n              timeout entirely, run\n              CHECK TABLE\n              QUICK instead of CHECK\n              TABLE.\n            \nCHECK TABLE functionality\n              for InnoDB SPATIAL\n              indexes includes an R-tree validity check and a check to\n              ensure that the R-tree row count matches the clustered\n              index.\n            \nCHECK TABLE supports\n              secondary indexes on virtual generated columns, which are\n              supported by InnoDB.\n            \nInnoDB supports parallel\n              clustered index reads, which can improve\n              CHECK TABLE performance.\n              InnoDB reads the clustered index twice\n              during a CHECK TABLE\n              operation. The second read can be performed in parallel.\n              The\n              innodb_parallel_read_threads\n              session variable must be set to a value greater than 1 for\n              parallel clustered index reads to occur. The actual number\n              of threads used to perform a parallel clustered index read\n              is determined by the\n              innodb_parallel_read_threads\n              setting or the number of index subtrees to scan, whichever\n              is smaller.\n\n\n",
        "\n\n\n\nCHECK TABLE Usage Notes for MyISAM Tables\n\n\n\n\n          The following notes apply to\n          MyISAM tables:\n\n\n\nCHECK TABLE updates key\n              statistics for MyISAM tables.\n            \n              If CHECK TABLE output does\n              not return OK or Table is\n              already up to date, you should normally run a\n              repair of the table. See\n              Section\u00a09.6, \u201cMyISAM Table Maintenance and Crash Recovery\u201d.\n            \n              If none of the CHECK TABLE\n              options QUICK,\n              MEDIUM, or EXTENDED\n              are specified, the default check type for dynamic-format\n              MyISAM tables is\n              MEDIUM. This has the same result as\n              running myisamchk --medium-check\n              tbl_name on the\n              table. The default check type also is\n              MEDIUM for static-format\n              MyISAM tables, unless\n              CHANGED or FAST is\n              specified. In that case, the default is\n              QUICK. The row scan is skipped for\n              CHANGED and FAST\n              because the rows are very seldom corrupted.\n\n\n"
    ],
    "Examples": [
        "CHECK TABLE test_table FAST QUICK;"
    ],
    "Category": [
        "Database Administration Statements"
    ]
}