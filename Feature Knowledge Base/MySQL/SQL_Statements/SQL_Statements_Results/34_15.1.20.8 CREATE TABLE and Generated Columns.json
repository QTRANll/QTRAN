{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/create-table-generated-columns.html"
    ],
    "Title": [
        "15.1.20.8 CREATE TABLE and Generated Columns"
    ],
    "Feature": [
        "col_name data_type [GENERATED ALWAYS] AS (expr)\n  [VIRTUAL | STORED] [NOT NULL | NULL]\n  [UNIQUE [KEY]] [[PRIMARY] KEY]\n  [COMMENT 'string']"
    ],
    "Description": [
        "\nCREATE TABLE supports the\n        specification of generated columns. Values of a generated column\n        are computed from an expression included in the column\n        definition.\n      ",
        "\n        Generated columns are also supported by the\n        NDB storage engine.\n      ",
        "\n        The following simple example shows a table that stores the\n        lengths of the sides of right triangles in the\n        sidea and sideb columns,\n        and computes the length of the hypotenuse in\n        sidec (the square root of the sums of the\n        squares of the other sides):\n      ",
        "Press CTRL+C to copy CREATE TABLE triangle (\n  sidea DOUBLE,\n  sideb DOUBLE,\n  sidec DOUBLE AS (SQRT(sidea * sidea + sideb * sideb))\n);\nINSERT INTO triangle (sidea, sideb) VALUES(1,1),(3,4),(6,8);",
        "\n        Selecting from the table yields this result:\n      ",
        "Press CTRL+C to copy mysql> SELECT * FROM triangle;\n+-------+-------+--------------------+\n| sidea | sideb | sidec              |\n+-------+-------+--------------------+\n|     1 |     1 | 1.4142135623730951 |\n|     3 |     4 |                  5 |\n|     6 |     8 |                 10 |\n+-------+-------+--------------------+",
        "\n        Any application that uses the triangle table\n        has access to the hypotenuse values without having to specify\n        the expression that calculates them.\n      ",
        "\n        Generated column definitions have this syntax:\n      ",
        "\nAS (expr)\n        indicates that the column is generated and defines the\n        expression used to compute column values. AS\n        may be preceded by GENERATED ALWAYS to make\n        the generated nature of the column more explicit. Constructs\n        that are permitted or prohibited in the expression are discussed\n        later.\n      ",
        "\n        The VIRTUAL or STORED\n        keyword indicates how column values are stored, which has\n        implications for column use:\n",
        "\n\nVIRTUAL: Column values are not stored,\n            but are evaluated when rows are read, immediately after any\n            BEFORE triggers. A virtual column takes\n            no storage.\n          \nInnoDB supports secondary indexes on\n            virtual columns. See\n            Section\u00a015.1.20.9, \u201cSecondary Indexes and Generated Columns\u201d.\n          \nSTORED: Column values are evaluated and\n            stored when rows are inserted or updated. A stored column\n            does require storage space and can be indexed.\n\n",
        "\n        The default is VIRTUAL if neither keyword is\n        specified.\n      ",
        "\n        It is permitted to mix VIRTUAL and\n        STORED columns within a table.\n      ",
        "\n        Other attributes may be given to indicate whether the column is\n        indexed or can be NULL, or provide a comment.\n      ",
        "\n        Generated column expressions must adhere to the following rules.\n        An error occurs if an expression contains disallowed constructs.\n",
        "\n\n            Literals, deterministic built-in functions, and operators\n            are permitted. A function is deterministic if, given the\n            same data in tables, multiple invocations produce the same\n            result, independently of the connected user. Examples of\n            functions that are nondeterministic and fail this\n            definition: CONNECTION_ID(),\n            CURRENT_USER(),\n            NOW().\n          \n            Stored functions and loadable functions are not permitted.\n          \n            Stored procedure and function parameters are not permitted.\n          \n            Variables (system variables, user-defined variables, and\n            stored program local variables) are not permitted.\n          \n            Subqueries are not permitted.\n          \n            A generated column definition can refer to other generated\n            columns, but only those occurring earlier in the table\n            definition. A generated column definition can refer to any\n            base (nongenerated) column in the table whether its\n            definition occurs earlier or later.\n          \n            The AUTO_INCREMENT attribute cannot be\n            used in a generated column definition.\n          \n            An AUTO_INCREMENT column cannot be used\n            as a base column in a generated column definition.\n          \n            If expression evaluation causes truncation or provides\n            incorrect input to a function, the\n            CREATE TABLE statement\n            terminates with an error and the DDL operation is rejected.\n\n",
        "\n        If the expression evaluates to a data type that differs from the\n        declared column type, implicit coercion to the declared type\n        occurs according to the usual MySQL type-conversion rules. See\n        Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d.\n      ",
        "\n        If a generated column uses the\n        TIMESTAMP data type, the setting\n        for\n        explicit_defaults_for_timestamp\n        is ignored. In such cases, if this variable is disabled then\n        NULL is not converted to\n        CURRENT_TIMESTAMP. If the column\n        is also declared as NOT NULL, attempting to\n        insert NULL is explicitly rejected with\n        ER_BAD_NULL_ERROR.\n",
        "\n\nNote\n\n\n          Expression evaluation uses the SQL mode in effect at\n          evaluation time. If any component of the expression depends on\n          the SQL mode, different results may occur for different uses\n          of the table unless the SQL mode is the same during all uses.\n\n",
        "\n        For CREATE\n        TABLE ... LIKE, the destination table preserves\n        generated column information from the original table.\n      ",
        "\n        For CREATE\n        TABLE ... SELECT, the destination table does not\n        preserve information about whether columns in the selected-from\n        table are generated columns. The\n        SELECT part of the statement\n        cannot assign values to generated columns in the destination\n        table.\n      ",
        "\n        Partitioning by generated columns is permitted. See\n        Table Partitioning.\n      ",
        "\n        A foreign key constraint on a stored generated column cannot use\n        CASCADE, SET NULL, or\n        SET DEFAULT as ON UPDATE\n        referential actions, nor can it use SET NULL\n        or SET DEFAULT as ON\n        DELETE referential actions.\n      ",
        "\n        A foreign key constraint on the base column of a stored\n        generated column cannot use CASCADE,\n        SET NULL, or SET DEFAULT\n        as ON UPDATE or ON DELETE\n        referential actions.\n      ",
        "\n        A foreign key constraint cannot reference a virtual generated\n        column.\n      ",
        "\n        Triggers cannot use\n        NEW.col_name or\n        use OLD.col_name\n        to refer to generated columns.\n      ",
        "\n        For INSERT,\n        REPLACE, and\n        UPDATE, if a generated column is\n        inserted into, replaced, or updated explicitly, the only\n        permitted value is DEFAULT.\n      ",
        "\n        A generated column in a view is considered updatable because it\n        is possible to assign to it. However, if such a column is\n        updated explicitly, the only permitted value is\n        DEFAULT.\n      ",
        "\n        Generated columns have several use cases, such as these:\n",
        "\n\n            Virtual generated columns can be used as a way to simplify\n            and unify queries. A complicated condition can be defined as\n            a generated column and referred to from multiple queries on\n            the table to ensure that all of them use exactly the same\n            condition.\n          \n            Stored generated columns can be used as a materialized cache\n            for complicated conditions that are costly to calculate on\n            the fly.\n          \n            Generated columns can simulate functional indexes: Use a\n            generated column to define a functional expression and index\n            it. This can be useful for working with columns of types\n            that cannot be indexed directly, such as\n            JSON columns; see\n            Indexing a Generated Column to Provide a JSON Column Index, for a detailed\n            example.\n          \n            For stored generated columns, the disadvantage of this\n            approach is that values are stored twice; once as the value\n            of the generated column and once in the index.\n          \n            If a generated column is indexed, the optimizer recognizes\n            query expressions that match the column definition and uses\n            indexes from the column as appropriate during query\n            execution, even if a query does not refer to the column\n            directly by name. For details, see\n            Section\u00a010.3.11, \u201cOptimizer Use of Generated Column Indexes\u201d.\n\n",
        "\n        Example:\n      ",
        "\n        Suppose that a table t1 contains\n        first_name and last_name\n        columns and that applications frequently construct the full name\n        using an expression like this:\n      ",
        "Press CTRL+C to copy SELECT CONCAT(first_name,' ',last_name) AS full_name FROM t1;",
        "\n        One way to avoid writing out the expression is to create a view\n        v1 on t1, which simplifies\n        applications by enabling them to select\n        full_name directly without using an\n        expression:\n      ",
        "Press CTRL+C to copy CREATE VIEW v1 AS\nSELECT *, CONCAT(first_name,' ',last_name) AS full_name FROM t1;\n\nSELECT full_name FROM v1;",
        "\n        A generated column also enables applications to select\n        full_name directly without the need to define\n        a view:\n      ",
        "Press CTRL+C to copy CREATE TABLE t1 (\n  first_name VARCHAR(10),\n  last_name VARCHAR(10),\n  full_name VARCHAR(255) AS (CONCAT(first_name,' ',last_name))\n);\n\nSELECT full_name FROM t1;"
    ],
    "Examples": [
        "CREATE TABLE triangle (\n  sidea DOUBLE,\n  sideb DOUBLE,\n  sidec DOUBLE AS (SQRT(sidea * sidea + sideb * sideb))\n);\nINSERT INTO triangle (sidea, sideb) VALUES(1,1),(3,4),(6,8);",
        "mysql> SELECT * FROM triangle;\n+-------+-------+--------------------+\n| sidea | sideb | sidec              |\n+-------+-------+--------------------+\n|     1 |     1 | 1.4142135623730951 |\n|     3 |     4 |                  5 |\n|     6 |     8 |                 10 |\n+-------+-------+--------------------+",
        "SELECT CONCAT(first_name,' ',last_name) AS full_name FROM t1;",
        "CREATE VIEW v1 AS\nSELECT *, CONCAT(first_name,' ',last_name) AS full_name FROM t1;\n\nSELECT full_name FROM v1;",
        "CREATE TABLE t1 (\n  first_name VARCHAR(10),\n  last_name VARCHAR(10),\n  full_name VARCHAR(255) AS (CONCAT(first_name,' ',last_name))\n);\n\nSELECT full_name FROM t1;"
    ],
    "Category": [
        "Data Definition Statements"
    ]
}