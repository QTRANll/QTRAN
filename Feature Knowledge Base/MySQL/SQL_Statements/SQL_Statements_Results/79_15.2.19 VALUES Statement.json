{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/values.html"
    ],
    "Title": [
        "15.2.19 VALUES Statement"
    ],
    "Feature": [
        "VALUES row_constructor_list [ORDER BY column_designator] [LIMIT number]\n\nrow_constructor_list:\n    ROW(value_list)[, ROW(value_list)][, ...]\n\nvalue_list:\n    value[, value][, ...]\n\ncolumn_designator:\n    column_index"
    ],
    "Description": [
        "\nVALUES is a DML statement which\n      returns a set of one or more rows as a table. In other words, it\n      is a table value constructor which also functions as a standalone\n      SQL statement.\n    ",
        "\n      The VALUES statement consists of\n      the VALUES keyword followed by a list of one or\n      more row constructors, separated by commas. A row constructor\n      consists of the ROW() row constructor clause\n      with a value list of one or more scalar values enclosed in the\n      parentheses. A value can be a literal of any MySQL data type or an\n      expression that resolves to a scalar value.\n    ",
        "\nROW() cannot be empty (but each of the supplied\n      scalar values can be NULL). Each\n      ROW() in the same\n      VALUES statement must have the same\n      number of values in its value list.\n    ",
        "\n      The DEFAULT keyword is not supported by\n      VALUES and causes a syntax error, except when\n      it is used to supply values in an\n      INSERT statement.\n    ",
        "\n      The output of VALUES is a table:\n    ",
        "Press CTRL+C to copy mysql> VALUES ROW(1,-2,3), ROW(5,7,9), ROW(4,6,8);\n+----------+----------+----------+\n| column_0 | column_1 | column_2 |\n+----------+----------+----------+\n|        1 |       -2 |        3 |\n|        5 |        7 |        9 |\n|        4 |        6 |        8 |\n+----------+----------+----------+\n3 rows in set (0.00 sec)",
        "\n      The columns of the table output from\n      VALUES have the implicitly named\n      columns column_0, column_1,\n      column_2, and so on, always beginning with\n      0. This fact can be used to order the rows by\n      column using an optional ORDER BY clause in the\n      same way that this clause works with a\n      SELECT statement, as shown here:\n    ",
        "Press CTRL+C to copy mysql> VALUES ROW(1,-2,3), ROW(5,7,9), ROW(4,6,8) ORDER BY column_1;\n+----------+----------+----------+\n| column_0 | column_1 | column_2 |\n+----------+----------+----------+\n|        1 |       -2 |        3 |\n|        4 |        6 |        8 |\n|        5 |        7 |        9 |\n+----------+----------+----------+\n3 rows in set (0.00 sec)",
        "\nVALUES statement also supports a\n      LIMIT clause for limiting the number of rows in\n      the output.\n    ",
        "\n      The VALUES statement is permissive regarding\n      data types of column values; you can mix types within the same\n      column, as shown here:\n    ",
        "Press CTRL+C to copy mysql> VALUES ROW(\"q\", 42, '2019-12-18'),\n    ->     ROW(23, \"abc\", 98.6),\n    ->     ROW(27.0002, \"Mary Smith\", '{\"a\": 10, \"b\": 25}');\n+----------+------------+--------------------+\n| column_0 | column_1   | column_2           |\n+----------+------------+--------------------+\n| q        | 42         | 2019-12-18         |\n| 23       | abc        | 98.6               |\n| 27.0002  | Mary Smith | {\"a\": 10, \"b\": 25} |\n+----------+------------+--------------------+\n3 rows in set (0.00 sec)",
        "\n\nImportant\n\n\nVALUES with one or more instances of\n        ROW() acts as a table value constructor;\n        although it can be used to supply values in an\n        INSERT or\n        REPLACE statement, do not confuse\n        it with the VALUES keyword that is also used\n        for this purpose. You should also not confuse it with the\n        VALUES() function that refers to\n        column values in\n        INSERT ...\n        ON DUPLICATE KEY UPDATE.\n      \n        You should also bear in mind that ROW() is a\n        row value constructor (see Section\u00a015.2.15.5, \u201cRow Subqueries\u201d),\n        whereas VALUES ROW() is a table value\n        constructor; the two cannot be used interchangeably.\n\n",
        "\nVALUES can be used in many cases\n      where you could employ SELECT,\n      including those listed here:\n",
        "\n\n          With UNION, as shown here:\n        Press CTRL+C to copy mysql> SELECT 1,2 UNION SELECT 10,15;\n+----+----+\n| 1  | 2  |\n+----+----+\n|  1 |  2 |\n| 10 | 15 |\n+----+----+\n2 rows in set (0.00 sec)\n\nmysql> VALUES ROW(1,2) UNION VALUES ROW(10,15);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|       10 |       15 |\n+----------+----------+\n2 rows in set (0.00 sec)\n          You can union together constructed tables having more than one\n          row, like this:\n        Press CTRL+C to copy mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n     >     UNION VALUES ROW(10,15),ROW(20,25);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        3 |        4 |\n|        5 |        6 |\n|       10 |       15 |\n|       20 |       25 |\n+----------+----------+\n5 rows in set (0.00 sec)\n          You can also (and it is usually preferable to) omit\n          UNION altogether in such cases\n          and use a single VALUES statement, like\n          this:\n        Press CTRL+C to copy mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6), ROW(10,15), ROW(20,25);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        3 |        4 |\n|        5 |        6 |\n|       10 |       15 |\n|       20 |       25 |\n+----------+----------+\nVALUES can also be used in unions with\n          SELECT statements,\n          TABLE statements, or both.\n        \n          The constructed tables in the\n          UNION must contain the same\n          number of columns, just as if you were using\n          SELECT. See\n          Section\u00a015.2.18, \u201cUNION Clause\u201d, for further examples.\n        \n          You can use EXCEPT and\n          INTERSECT with\n          VALUES in much the same way as\n          UNION, as shown here:\n        Press CTRL+C to copy mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n    ->   INTERSECT \n    -> VALUES ROW(10,15), ROW(20,25), ROW(3,4);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        3 |        4 |\n+----------+----------+\n1 row in set (0.00 sec)\n \nmysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n    ->   EXCEPT \n    -> VALUES ROW(10,15), ROW(20,25), ROW(3,4);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        5 |        6 |\n+----------+----------+\n2 rows in set (0.00 sec)\n          See Section\u00a015.2.4, \u201cEXCEPT Clause\u201d, and Section\u00a015.2.8, \u201cINTERSECT Clause\u201d,\n          for more information.\n        \n          In joins. See Section\u00a015.2.13.2, \u201cJOIN Clause\u201d, for more information and\n          examples.\n        \n          In place of VALUES() in an\n          INSERT or\n          REPLACE statement, in which\n          case its semantics differ slightly from what is described\n          here. See Section\u00a015.2.7, \u201cINSERT Statement\u201d, for details.\n        \n          In place of the source table in\n          CREATE\n          TABLE ... SELECT and\n          CREATE VIEW ...\n          SELECT. See the descriptions of these statements for\n          more information and examples.\n\n"
    ],
    "Examples": [
        "mysql> VALUES ROW(1,-2,3), ROW(5,7,9), ROW(4,6,8);\n+----------+----------+----------+\n| column_0 | column_1 | column_2 |\n+----------+----------+----------+\n|        1 |       -2 |        3 |\n|        5 |        7 |        9 |\n|        4 |        6 |        8 |\n+----------+----------+----------+\n3 rows in set (0.00 sec)",
        "mysql> VALUES ROW(1,-2,3), ROW(5,7,9), ROW(4,6,8) ORDER BY column_1;\n+----------+----------+----------+\n| column_0 | column_1 | column_2 |\n+----------+----------+----------+\n|        1 |       -2 |        3 |\n|        4 |        6 |        8 |\n|        5 |        7 |        9 |\n+----------+----------+----------+\n3 rows in set (0.00 sec)",
        "mysql> VALUES ROW(\"q\", 42, '2019-12-18'),\n    ->     ROW(23, \"abc\", 98.6),\n    ->     ROW(27.0002, \"Mary Smith\", '{\"a\": 10, \"b\": 25}');\n+----------+------------+--------------------+\n| column_0 | column_1   | column_2           |\n+----------+------------+--------------------+\n| q        | 42         | 2019-12-18         |\n| 23       | abc        | 98.6               |\n| 27.0002  | Mary Smith | {\"a\": 10, \"b\": 25} |\n+----------+------------+--------------------+\n3 rows in set (0.00 sec)",
        "mysql> SELECT 1,2 UNION SELECT 10,15;\n+----+----+\n| 1  | 2  |\n+----+----+\n|  1 |  2 |\n| 10 | 15 |\n+----+----+\n2 rows in set (0.00 sec)\n\nmysql> VALUES ROW(1,2) UNION VALUES ROW(10,15);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|       10 |       15 |\n+----------+----------+\n2 rows in set (0.00 sec)",
        "mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n     >     UNION VALUES ROW(10,15),ROW(20,25);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        3 |        4 |\n|        5 |        6 |\n|       10 |       15 |\n|       20 |       25 |\n+----------+----------+\n5 rows in set (0.00 sec)",
        "mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6), ROW(10,15), ROW(20,25);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        3 |        4 |\n|        5 |        6 |\n|       10 |       15 |\n|       20 |       25 |\n+----------+----------+",
        "mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n    ->   INTERSECT \n    -> VALUES ROW(10,15), ROW(20,25), ROW(3,4);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        3 |        4 |\n+----------+----------+\n1 row in set (0.00 sec)\n \nmysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n    ->   EXCEPT \n    -> VALUES ROW(10,15), ROW(20,25), ROW(3,4);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        5 |        6 |\n+----------+----------+\n2 rows in set (0.00 sec)"
    ],
    "Category": [
        "Data Manipulation Statements"
    ]
}