{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/alter-user.html"
    ],
    "Title": [
        "15.7.1.1 ALTER USER Statement"
    ],
    "Feature": [
        "ALTER USER [IF EXISTS]\n    user [auth_option] [, user [auth_option]] ...\n    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]\n    [WITH resource_option [resource_option] ...]\n    [password_option | lock_option] ...\n    [COMMENT 'comment_string' | ATTRIBUTE 'json_object']\n\nALTER USER [IF EXISTS]\n    USER() user_func_auth_option\n\nALTER USER [IF EXISTS]\n    user [registration_option]\n\nALTER USER [IF EXISTS]\n    USER() [registration_option]\n\nALTER USER [IF EXISTS]\n    user DEFAULT ROLE\n    {NONE | ALL | role [, role ] ...}\n\nuser:\n    (see Section 8.2.4, \u201cSpecifying Account Names\u201d)\n\nauth_option: {\n    IDENTIFIED BY 'auth_string'\n        [REPLACE 'current_auth_string']\n        [RETAIN CURRENT PASSWORD]\n  | IDENTIFIED BY RANDOM PASSWORD\n        [REPLACE 'current_auth_string']\n        [RETAIN CURRENT PASSWORD]\n  | IDENTIFIED WITH auth_plugin\n  | IDENTIFIED WITH auth_plugin BY 'auth_string'\n        [REPLACE 'current_auth_string']\n        [RETAIN CURRENT PASSWORD]\n  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD\n        [REPLACE 'current_auth_string']\n        [RETAIN CURRENT PASSWORD]\n  | IDENTIFIED WITH auth_plugin AS 'auth_string'\n  | DISCARD OLD PASSWORD\n  | ADD factor factor_auth_option [ADD factor factor_auth_option]\n  | MODIFY factor factor_auth_option [MODIFY factor factor_auth_option]\n  | DROP factor [DROP factor]\n}\n\nuser_func_auth_option: {\n    IDENTIFIED BY 'auth_string'\n        [REPLACE 'current_auth_string']\n        [RETAIN CURRENT PASSWORD]\n  | DISCARD OLD PASSWORD\n}\n\nfactor_auth_option: {\n    IDENTIFIED BY 'auth_string'\n  | IDENTIFIED BY RANDOM PASSWORD\n  | IDENTIFIED WITH auth_plugin BY 'auth_string'\n  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD\n  | IDENTIFIED WITH auth_plugin AS 'auth_string'\n}\n\nregistration_option: {\n    factor INITIATE REGISTRATION\n  | factor FINISH REGISTRATION SET CHALLENGE_RESPONSE AS 'auth_string'\n  | factor UNREGISTER\n}\n\nfactor: {2 | 3} FACTOR\n\ntls_option: {\n   SSL\n | X509\n | CIPHER 'cipher'\n | ISSUER 'issuer'\n | SUBJECT 'subject'\n}\n\nresource_option: {\n    MAX_QUERIES_PER_HOUR count\n  | MAX_UPDATES_PER_HOUR count\n  | MAX_CONNECTIONS_PER_HOUR count\n  | MAX_USER_CONNECTIONS count\n}\n\npassword_option: {\n    PASSWORD EXPIRE [DEFAULT | NEVER | INTERVAL N DAY]\n  | PASSWORD HISTORY {DEFAULT | N}\n  | PASSWORD REUSE INTERVAL {DEFAULT | N DAY}\n  | PASSWORD REQUIRE CURRENT [DEFAULT | OPTIONAL]\n  | FAILED_LOGIN_ATTEMPTS N\n  | PASSWORD_LOCK_TIME {N | UNBOUNDED}\n}\n\nlock_option: {\n    ACCOUNT LOCK\n  | ACCOUNT UNLOCK\n}"
    ],
    "Description": [
        "\n        The ALTER USER statement modifies\n        MySQL accounts. It enables authentication, role, SSL/TLS,\n        resource-limit, password-management, comment, and attribute\n        properties to be modified for existing accounts. It can also be\n        used to lock and unlock accounts.\n      ",
        "\n        In most cases, ALTER USER\n        requires the global CREATE USER\n        privilege, or the UPDATE\n        privilege for the mysql system schema. The\n        exceptions are:\n",
        "\n\n            Any client who connects to the server using a nonanonymous\n            account can change the password for that account. (In\n            particular, you can change your own password.) To see which\n            account the server authenticated you as, invoke the\n            CURRENT_USER() function:\n          Press CTRL+C to copy SELECT CURRENT_USER();\n            For DEFAULT ROLE syntax,\n            ALTER USER requires these\n            privileges:\n\n\n\n                Setting the default roles for another user requires the\n                global CREATE USER\n                privilege, or the UPDATE\n                privilege for the mysql.default_roles\n                system table.\n              \n                Setting the default roles for yourself requires no\n                special privileges, as long as the roles you want as the\n                default have been granted to you.\n\n\n\n            Statements that modify secondary passwords require these\n            privileges:\n\n\n\n                The\n                APPLICATION_PASSWORD_ADMIN\n                privilege is required to use the RETAIN CURRENT\n                PASSWORD or DISCARD OLD\n                PASSWORD clause for ALTER\n                USER statements that apply to your own\n                account. The privilege is required to manipulate your\n                own secondary password because most users require only\n                one password.\n              \n                If an account is to be permitted to manipulate secondary\n                passwords for all accounts, it requires the\n                CREATE USER privilege\n                rather than\n                APPLICATION_PASSWORD_ADMIN.\n\n\n\n",
        "\n        When the read_only system\n        variable is enabled, ALTER USER\n        additionally requires the\n        CONNECTION_ADMIN privilege (or\n        the deprecated SUPER privilege).\n      ",
        "\n        These additional privilege considerations also apply:\n",
        "\n\n            The authentication_policy\n            system variable places certain constraints on how the\n            authentication-related clauses of ALTER\n            USER statements may be used; for details, see the\n            description of that variable. These constraints do not apply\n            if you have the\n            AUTHENTICATION_POLICY_ADMIN\n            privilege.\n          \n            To modify an account that uses passwordless authentication,\n            you must have the\n            PASSWORDLESS_USER_ADMIN\n            privilege.\n\n",
        "\n        By default, an error occurs if you try to modify a user that\n        does not exist. If the IF EXISTS clause is\n        given, the statement produces a warning for each named user that\n        does not exist, rather than an error.\n",
        "\n\nImportant\n\n\n          Under some circumstances, ALTER\n          USER may be recorded in server logs or on the client\n          side in a history file such as\n          ~/.mysql_history, which means that\n          cleartext passwords may be read by anyone having read access\n          to that information. For information about the conditions\n          under which this occurs for the server logs and how to control\n          it, see Section\u00a08.1.2.3, \u201cPasswords and Logging\u201d. For similar\n          information about client-side logging, see\n          Section\u00a06.5.1.3, \u201cmysql Client Logging\u201d.\n\n",
        "\n        There are several aspects to the ALTER\n        USER statement, described under the following topics:\n",
        "\nALTER USER OverviewALTER USER Authentication OptionsALTER USER Multifactor Authentication OptionsALTER USER Registration OptionsALTER USER Role OptionsALTER USER SSL/TLS OptionsALTER USER Resource-Limit OptionsALTER USER Password-Management OptionsALTER USER Comment and Attribute OptionsALTER USER Account-Locking OptionsALTER USER Binary Logging\n",
        "\n\n\n\nALTER USER Overview\n\n\n\n\n          For each affected account, ALTER\n          USER modifies the corresponding row in the\n          mysql.user system table to reflect the\n          properties specified in the statement. Unspecified properties\n          retain their current values.\n        \n          Each account name uses the format described in\n          Section\u00a08.2.4, \u201cSpecifying Account Names\u201d. The host name part of the\n          account name, if omitted, defaults to '%'.\n          It is also possible to specify\n          CURRENT_USER or\n          CURRENT_USER() to refer to the\n          account associated with the current session.\n        \n          In one case only, the account may be specified with the\n          USER() function:\n        Press CTRL+C to copy ALTER USER USER() IDENTIFIED BY 'auth_string';\n          This syntax enables changing your own password without naming\n          your account literally. (The syntax also supports the\n          REPLACE, RETAIN CURRENT\n          PASSWORD, and DISCARD OLD\n          PASSWORD clauses described at\n          ALTER USER Authentication Options.)\n        \n          For ALTER USER syntax that\n          permits an auth_option value to\n          follow a user value,\n          auth_option indicates how the\n          account authenticates by specifying an account authentication\n          plugin, credentials (for example, a password), or both. Each\n          auth_option value applies\n          only to the account named immediately\n          preceding it.\n        \n          Following the user specifications,\n          the statement may include options for SSL/TLS, resource-limit,\n          password-management, and locking properties. All such options\n          are global to the statement and apply to\n          all accounts named in the statement.\n        \n          Example: Change an account's password and expire it. As a\n          result, the user must connect with the named password and\n          choose a new one at the next connection:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password' PASSWORD EXPIRE;\n          Example: Modify an account to use the\n          caching_sha2_password authentication plugin\n          and the given password. Require that a new password be chosen\n          every 180 days, and enable failed-login tracking, such that\n          three consecutive incorrect passwords cause temporary account\n          locking for two days:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH caching_sha2_password BY 'new_password'\n  PASSWORD EXPIRE INTERVAL 180 DAY\n  FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 2;\n          Example: Lock or unlock an account:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' ACCOUNT LOCK;\nALTER USER 'jeffrey'@'localhost' ACCOUNT UNLOCK;\n          Example: Require an account to connect using SSL and establish\n          a limit of 20 connections per hour:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SSL WITH MAX_CONNECTIONS_PER_HOUR 20;\n          Example: Alter multiple accounts, specifying some per-account\n          properties and some global properties:\n        Press CTRL+C to copy ALTER USER\n  'jeffrey'@'localhost'\n    IDENTIFIED BY 'jeffrey_new_password',\n  'jeanne'@'localhost',\n  'josh'@'localhost'\n    IDENTIFIED BY 'josh_new_password'\n    REPLACE 'josh_current_password'\n    RETAIN CURRENT PASSWORD\n  REQUIRE SSL WITH MAX_USER_CONNECTIONS 2\n  PASSWORD HISTORY 5;\n          The IDENTIFIED BY value following\n          jeffrey applies only to its immediately\n          preceding account, so it changes the password to\n          'jeffrey_new_password'\n          only for jeffrey. For\n          jeanne, there is no per-account value (thus\n          leaving the password unchanged). For josh,\n          IDENTIFIED BY establishes a new password\n          ('josh_new_password'),\n          REPLACE is specified to verify that the\n          user issuing the ALTER USER\n          statement knows the current password\n          ('josh_current_password'),\n          and that current password is also retained as the account\n          secondary password. (As a result, josh can\n          connect with either the primary or secondary password.)\n        \n          The remaining properties apply globally to all accounts named\n          in the statement, so for both accounts:\n\n\n\n              Connections are required to use SSL.\n            \n              The account can be used for a maximum of two simultaneous\n              connections.\n            \n              Password changes cannot reuse any of the five most recent\n              passwords.\n\n\n\n          Example: Discard the secondary password for\n          josh, leaving the account with only its\n          primary password:\n        Press CTRL+C to copy ALTER USER 'josh'@'localhost' DISCARD OLD PASSWORD;\n          In the absence of a particular type of option, the account\n          remains unchanged in that respect. For example, with no\n          locking option, the locking state of the account is not\n          changed.\n\n",
        "\n\n\n\nALTER USER Authentication Options\n\n\n\n\n          An account name may be followed by an\n          auth_option authentication option\n          that specifies the account authentication plugin, credentials,\n          or both. It may also include a password-verification clause\n          that specifies the account current password to be replaced,\n          and clauses that manage whether an account has a secondary\n          password.\n\n\n\nNote\n\n\n            Clauses for random password generation, password\n            verification, and secondary passwords apply only to accounts\n            that use an authentication plugin that stores credentials\n            internally to MySQL. For accounts that use a plugin that\n            performs authentication against a credentials system that is\n            external to MySQL, password management must be handled\n            externally against that system as well. For more information\n            about internal credentials storage, see\n            Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n\n\n\nauth_plugin names an\n              authentication plugin. The plugin name can be a quoted\n              string literal or an unquoted name. Plugin names are\n              stored in the plugin column of the\n              mysql.user system table.\n            \n              For auth_option syntax that\n              does not specify an authentication plugin, the server\n              assigns the default plugin, determined as described in\n              The Default Authentication Plugin.\n              For descriptions of each plugin, see\n              Section\u00a08.4.1, \u201cAuthentication Plugins\u201d.\n            \n              Credentials that are stored internally are stored in the\n              mysql.user system table. An\n              'auth_string'\n              value or RANDOM PASSWORD specifies\n              account credentials, either as a cleartext (unencrypted)\n              string or hashed in the format expected by the\n              authentication plugin associated with the account,\n              respectively:\n\n\n\n                  For syntax that uses BY\n                  'auth_string',\n                  the string is cleartext and is passed to the\n                  authentication plugin for possible hashing. The result\n                  returned by the plugin is stored in the\n                  mysql.user table. A plugin may use\n                  the value as specified, in which case no hashing\n                  occurs.\n                \n                  For syntax that uses BY RANDOM\n                  PASSWORD, MySQL generates a random password\n                  and as cleartext and passes it to the authentication\n                  plugin for possible hashing. The result returned by\n                  the plugin is stored in the\n                  mysql.user table. A plugin may use\n                  the value as specified, in which case no hashing\n                  occurs.\n                \n                  Randomly generated passwords have the characteristics\n                  described in\n                  Random Password Generation.\n                \n                  For syntax that uses AS\n                  'auth_string',\n                  the string is assumed to be already in the format the\n                  authentication plugin requires, and is stored as is in\n                  the mysql.user table. If a plugin\n                  requires a hashed value, the value must be already\n                  hashed in a format appropriate for the plugin;\n                  otherwise, the value cannot be used by the plugin and\n                  correct authentication of client connections does not\n                  occur.\n                \n                  A hashed string can be either a string literal or a\n                  hexadecimal value. The latter corresponds to the type\n                  of value displayed by SHOW CREATE\n                  USER for password hashes containing\n                  unprintable characters when the\n                  print_identified_with_as_hex\n                  system variable is enabled.\n                \n                  If an authentication plugin performs no hashing of the\n                  authentication string, the BY\n                  'auth_string' and\n                  AS\n                  'auth_string'\n                  clauses have the same effect: The authentication\n                  string is stored as is in the\n                  mysql.user system table.\n\n\n\n              The REPLACE\n              'current_auth_string'\n              clause performs password verification. If given:\n\n\n\nREPLACE specifies the account\n                  current password to be replaced, as a cleartext\n                  (unencrypted) string.\n                \n                  The clause must be given if password changes for the\n                  account are required to specify the current password,\n                  as verification that the user attempting to make the\n                  change actually knows the current password.\n                \n                  The clause is optional if password changes for the\n                  account may but need not specify the current password.\n                \n                  The statement fails if the clause is given but does\n                  not match the current password, even if the clause is\n                  optional.\n                \nREPLACE can be specified only when\n                  changing the account password for the current user.\n\n\n\n              For more information about password verification by\n              specifying the current password, see\n              Section\u00a08.2.15, \u201cPassword Management\u201d.\n            \n              The RETAIN CURRENT PASSWORD and\n              DISCARD OLD PASSWORD clauses implement\n              dual-password capability. Both are optional, but if given,\n              have the following effects:\n\n\n\nRETAIN CURRENT PASSWORD retains an\n                  account current password as its secondary password,\n                  replacing any existing secondary password. The new\n                  password becomes the primary password, but clients can\n                  use the account to connect to the server using either\n                  the primary or secondary password. (Exception: If the\n                  new password specified by the\n                  ALTER USER statement is\n                  empty, the secondary password becomes empty as well,\n                  even if RETAIN CURRENT PASSWORD is\n                  given.)\n                \n                  If you specify RETAIN CURRENT\n                  PASSWORD for an account that has an empty\n                  primary password, the statement fails.\n                \n                  If an account has a secondary password and you change\n                  its primary password without specifying\n                  RETAIN CURRENT PASSWORD, the\n                  secondary password remains unchanged.\n                \n                  If you change the authentication plugin assigned to\n                  the account, the secondary password is discarded. If\n                  you change the authentication plugin and also specify\n                  RETAIN CURRENT PASSWORD, the\n                  statement fails.\n                \nDISCARD OLD PASSWORD discards the\n                  secondary password, if one exists. The account retains\n                  only its primary password, and clients can use the\n                  account to connect to the server only with the primary\n                  password.\n\n\n\n              For more information about use of dual passwords, see\n              Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n\n\nALTER USER permits these\n          auth_option syntaxes:\n\n\n\nIDENTIFIED BY\n              'auth_string' [REPLACE\n              'current_auth_string'] [RETAIN\n              CURRENT PASSWORD]\n\n              Sets the account authentication plugin to the default\n              plugin, passes the cleartext\n              'auth_string'\n              value to the plugin for possible hashing, and stores the\n              result in the account row in the\n              mysql.user system table.\n            \n              The REPLACE clause, if given, specifies\n              the account current password, as described previously in\n              this section.\n            \n              The RETAIN CURRENT PASSWORD clause, if\n              given, causes the account current password to be retained\n              as its secondary password, as described previously in this\n              section.\n            \nIDENTIFIED BY RANDOM PASSWORD [REPLACE\n              'current_auth_string'] [RETAIN\n              CURRENT PASSWORD]\n\n              Sets the account authentication plugin to the default\n              plugin, generates a random password, passes the cleartext\n              password value to the plugin for possible hashing, and\n              stores the result in the account row in the\n              mysql.user system table. The statement\n              also returns the cleartext password in a result set to\n              make it available to the user or application executing the\n              statement. For details about the result set and\n              characteristics of randomly generated passwords, see\n              Random Password Generation.\n            \n              The REPLACE clause, if given, specifies\n              the account current password, as described previously in\n              this section.\n            \n              The RETAIN CURRENT PASSWORD clause, if\n              given, causes the account current password to be retained\n              as its secondary password, as described previously in this\n              section.\n            \nIDENTIFIED WITH\n              auth_plugin\n\n              Sets the account authentication plugin to\n              auth_plugin, clears the\n              credentials to the empty string (the credentials are\n              associated with the old authentication plugin, not the new\n              one), and stores the result in the account row in the\n              mysql.user system table.\n            \n              In addition, the password is marked expired. The user must\n              choose a new one when next connecting.\n            \nIDENTIFIED WITH\n              auth_plugin BY\n              'auth_string' [REPLACE\n              'current_auth_string'] [RETAIN\n              CURRENT PASSWORD]\n\n              Sets the account authentication plugin to\n              auth_plugin, passes the\n              cleartext\n              'auth_string'\n              value to the plugin for possible hashing, and stores the\n              result in the account row in the\n              mysql.user system table.\n            \n              The REPLACE clause, if given, specifies\n              the account current password, as described previously in\n              this section.\n            \n              The RETAIN CURRENT PASSWORD clause, if\n              given, causes the account current password to be retained\n              as its secondary password, as described previously in this\n              section.\n            \nIDENTIFIED WITH\n              auth_plugin BY RANDOM PASSWORD\n              [REPLACE 'current_auth_string']\n              [RETAIN CURRENT PASSWORD]\n\n              Sets the account authentication plugin to\n              auth_plugin, generates a random\n              password, passes the cleartext password value to the\n              plugin for possible hashing, and stores the result in the\n              account row in the mysql.user system\n              table. The statement also returns the cleartext password\n              in a result set to make it available to the user or\n              application executing the statement. For details about the\n              result set and characteristics of randomly generated\n              passwords, see\n              Random Password Generation.\n            \n              The REPLACE clause, if given, specifies\n              the account current password, as described previously in\n              this section.\n            \n              The RETAIN CURRENT PASSWORD clause, if\n              given, causes the account current password to be retained\n              as its secondary password, as described previously in this\n              section.\n            \nIDENTIFIED WITH\n              auth_plugin AS\n              'auth_string'\n\n              Sets the account authentication plugin to\n              auth_plugin and stores the\n              'auth_string'\n              value as is in the mysql.user account\n              row. If the plugin requires a hashed string, the string is\n              assumed to be already hashed in the format the plugin\n              requires.\n            \nDISCARD OLD PASSWORD\n\n              Discards the account secondary password, if there is one,\n              as described previously in this section.\n\n\n\n          Example: Specify the password as cleartext; the default plugin\n          is used:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'password';\n          Example: Specify the authentication plugin, along with a\n          cleartext password value:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             BY 'password';\n          Example: Like the preceding example, but in addition, specify\n          the current password as a cleartext value to satisfy any\n          account requirement that the user making the change knows that\n          password:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             BY 'password'\n             REPLACE 'current_password';\n          The preceding statement fails unless the current user is\n          jeffrey because REPLACE\n          is permitted only for changes to the current user's password.\n        \n          Example: Establish a new primary password and retain the\n          existing password as the secondary password:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password'\n  RETAIN CURRENT PASSWORD;\n          Example: Discard the secondary password, leaving the account\n          with only its primary password:\n        Press CTRL+C to copy ALTER USER 'jeffery'@'localhost' DISCARD OLD PASSWORD;\n          Example: Specify the authentication plugin, along with a\n          hashed password value:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             AS '*6C8989366EAF75BB670AD8EA7A7FC1176A95CEF4';\n          For additional information about setting passwords and\n          authentication plugins, see\n          Section\u00a08.2.14, \u201cAssigning Account Passwords\u201d, and\n          Section\u00a08.2.17, \u201cPluggable Authentication\u201d.\n\n",
        "\n\n\n\nALTER USER Multifactor Authentication Options\n\n\n\n\nALTER USER has\n          ADD, MODIFY, and\n          DROP clauses that enable authentication\n          factors to be added, modified, or dropped. In each case, the\n          clause specifies an operation to perform on one authentication\n          factor, and optionally an operation on another authentication\n          factor. For each operation, the\n          factor item specifies the\n          FACTOR keyword preceded by the number 2 or\n          3 to indicate whether the operation applies to the second or\n          third authentication factor. (1 is not permitted in this\n          context. To act on the first authentication factor, use the\n          syntax described in\n          ALTER USER Authentication Options.)\n        \nALTER USER multifactor\n          authentication clause constraints are defined by the\n          authentication_policy system\n          variable. For example, the\n          authentication_policy setting\n          controls the number of authentication factors that accounts\n          may have, and for each factor, which authentication methods\n          are permitted. See\n          Configuring the Multifactor Authentication Policy.\n        \n          When ALTER USER adds, modifies,\n          or drops second and third factors in a single statement,\n          operations are executed sequentially, but if any operation in\n          the sequence fails the entire ALTER\n          USER statement fails.\n        \n          For ADD, each named factor must not already\n          exist or it cannot be added. For MODIFY and\n          DROP, each named factor must exist to be\n          modified or dropped. If a second and third factor are defined,\n          dropping the second factor causes the third factor to take its\n          place as the second factor.\n        \n          This statement drops authentication factors 2 and 3, which has\n          the effect of converting the account from 3FA to 1FA:\n        Press CTRL+C to copy ALTER USER 'user' DROP 2 FACTOR 3 FACTOR;\n          For additional ADD,\n          MODIFY, and DROP\n          examples, see\n          Getting Started with Multifactor Authentication.\n        \n          For information about factor-specific rules that determine the\n          default authentication plugin for authentication clauses that\n          do not name a plugin, see\n          The Default Authentication Plugin.\n\n",
        "\n\n\n\nALTER USER Registration Options\n\n\n\n\nALTER USER has clauses that\n          enable FIDO/FIDO2 devices to be registered and unregistered.\n          For more information, see\n          Using WebAuthn Authentication,\n          Device Unregistration for WebAuthn,\n          and the mysql client\n          --register-factor option\n          description.\n        \n          The mysql client\n          --register-factor option, used\n          for FIDO/FIDO2 device registration, causes the\n          mysql client to generate and execute\n          INITIATE REGISTRATION and FINISH\n          REGISTRATION statements. These statements are not\n          intended for manual execution.\n\n",
        "\n\n\n\nALTER USER Role Options\n\n\n\n\nALTER USER ...\n          DEFAULT ROLE defines which roles become active when\n          the user connects to the server and authenticates, or when the\n          user executes the\n          SET ROLE\n          DEFAULT statement during a session.\n        \nALTER USER ...\n          DEFAULT ROLE is alternative syntax for\n          SET DEFAULT ROLE (see\n          Section\u00a015.7.1.9, \u201cSET DEFAULT ROLE Statement\u201d). However,\n          ALTER USER can set the default\n          for only a single user, whereas SET\n          DEFAULT ROLE can set the default for multiple users.\n          On the other hand, you can specify\n          CURRENT_USER as the user name for the\n          ALTER USER statement, whereas\n          you cannot for SET DEFAULT\n          ROLE.\n        \n          Each user account name uses the format described previously.\n        \n          Each role name uses the format described in\n          Section\u00a08.2.5, \u201cSpecifying Role Names\u201d. For example:\n        Press CTRL+C to copy ALTER USER 'joe'@'10.0.0.1' DEFAULT ROLE administrator, developer;\n          The host name part of the role name, if omitted, defaults to\n          '%'.\n        \n          The clause following the DEFAULT ROLE\n          keywords permits these values:\n\n\n\nNONE: Set the default to\n              NONE (no roles).\n            \nALL: Set the default to all roles\n              granted to the account.\n            \nrole [,\n              role ] ...: Set the\n              default to the named roles, which must exist and be\n              granted to the account at the time\n              ALTER USER ...\n              DEFAULT ROLE is executed.\n\n\n",
        "\n\n\n\nALTER USER SSL/TLS Options\n\n\n\n\n          MySQL can check X.509 certificate attributes in addition to\n          the usual authentication that is based on the user name and\n          credentials. For background information on the use of SSL/TLS\n          with MySQL, see Section\u00a08.3, \u201cUsing Encrypted Connections\u201d.\n        \n          To specify SSL/TLS-related options for a MySQL account, use a\n          REQUIRE clause that specifies one or more\n          tls_option values.\n        \n          Order of REQUIRE options does not matter,\n          but no option can be specified twice. The\n          AND keyword is optional between\n          REQUIRE options.\n        \nALTER USER permits these\n          tls_option values:\n\n\n\nNONE\n\n              Indicates that all accounts named by the statement have no\n              SSL or X.509 requirements. Unencrypted connections are\n              permitted if the user name and password are valid.\n              Encrypted connections can be used, at the client's option,\n              if the client has the proper certificate and key files.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' REQUIRE NONE;\n              Clients attempt to establish a secure connection by\n              default. For clients that have REQUIRE\n              NONE, the connection attempt falls back to an\n              unencrypted connection if a secure connection cannot be\n              established. To require an encrypted connection, a client\n              need specify only the\n              --ssl-mode=REQUIRED\n              option; the connection attempt fails if a secure\n              connection cannot be established.\n            \nSSL\n\n              Tells the server to permit only encrypted connections for\n              all accounts named by the statement.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' REQUIRE SSL;\n              Clients attempt to establish a secure connection by\n              default. For accounts that have REQUIRE\n              SSL, the connection attempt fails if a secure\n              connection cannot be established.\n            \nX509\n\n              For all accounts named by the statement, requires that\n              clients present a valid certificate, but the exact\n              certificate, issuer, and subject do not matter. The only\n              requirement is that it should be possible to verify its\n              signature with one of the CA certificates. Use of X.509\n              certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' REQUIRE X509;\n              For accounts with REQUIRE X509, clients\n              must specify the --ssl-key\n              and --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.) This is true for ISSUER\n              and SUBJECT as well because those\n              REQUIRE options imply the requirements\n              of X509.\n            \nISSUER\n              'issuer'\n\n              For all accounts named by the statement, requires that\n              clients present a valid X.509 certificate issued by CA\n              'issuer'. If\n              a client presents a certificate that is valid but has a\n              different issuer, the server rejects the connection. Use\n              of X.509 certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com';\n              Because ISSUER implies the requirements\n              of X509, clients must specify the\n              --ssl-key and\n              --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.)\n            \nSUBJECT\n              'subject'\n\n              For all accounts named by the statement, requires that\n              clients present a valid X.509 certificate containing the\n              subject subject. If a client\n              presents a certificate that is valid but has a different\n              subject, the server rejects the connection. Use of X.509\n              certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com';\n              MySQL does a simple string comparison of the\n              'subject'\n              value to the value in the certificate, so lettercase and\n              component ordering must be given exactly as present in the\n              certificate.\n            \n              Because SUBJECT implies the\n              requirements of X509, clients must\n              specify the --ssl-key and\n              --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.)\n            \nCIPHER\n              'cipher'\n\n              For all accounts named by the statement, requires a\n              specific cipher method for encrypting connections. This\n              option is needed to ensure that ciphers and key lengths of\n              sufficient strength are used. Encryption can be weak if\n              old algorithms using short encryption keys are used.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  REQUIRE CIPHER 'EDH-RSA-DES-CBC3-SHA';\n\n\n          The SUBJECT, ISSUER, and\n          CIPHER options can be combined in the\n          REQUIRE clause:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com'\n  AND ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com'\n  AND CIPHER 'EDH-RSA-DES-CBC3-SHA';\n",
        "\n\n\n\nALTER USER Resource-Limit Options\n\n\n\n\n          It is possible to place limits on use of server resources by\n          an account, as discussed in Section\u00a08.2.21, \u201cSetting Account Resource Limits\u201d.\n          To do so, use a WITH clause that specifies\n          one or more resource_option values.\n        \n          Order of WITH options does not matter,\n          except that if a given resource limit is specified multiple\n          times, the last instance takes precedence.\n        \nALTER USER permits these\n          resource_option values:\n\n\n\nMAX_QUERIES_PER_HOUR\n              count,\n              MAX_UPDATES_PER_HOUR\n              count,\n              MAX_CONNECTIONS_PER_HOUR\n              count\n\n              For all accounts named by the statement, these options\n              restrict how many queries, updates, and connections to the\n              server are permitted to each account during any given\n              one-hour period. If count is\n              0 (the default), this means that there\n              is no limitation for the account.\n            \nMAX_USER_CONNECTIONS\n              count\n\n              For all accounts named by the statement, restricts the\n              maximum number of simultaneous connections to the server\n              by each account. A nonzero\n              count specifies the limit for\n              the account explicitly. If\n              count is 0\n              (the default), the server determines the number of\n              simultaneous connections for the account from the global\n              value of the\n              max_user_connections\n              system variable. If\n              max_user_connections is\n              also zero, there is no limit for the account.\n\n\n\n          Example:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100;\n",
        "\n\n\n\nALTER USER Password-Management Options\n\n\n\n\nALTER USER supports several\n          password_option values for password\n          management:\n\n\n\n              Password expiration options: You can expire an account\n              password manually and establish its password expiration\n              policy. Policy options do not expire the password.\n              Instead, they determine how the server applies automatic\n              expiration to the account based on password age, which is\n              assessed from the date and time of the most recent account\n              password change.\n            \n              Password reuse options: You can restrict password reuse\n              based on number of password changes, time elapsed, or\n              both.\n            \n              Password verification-required options: You can indicate\n              whether attempts to change an account password must\n              specify the current password, as verification that the\n              user attempting to make the change actually knows the\n              current password.\n            \n              Incorrect-password failed-login tracking options: You can\n              cause the server to track failed login attempts and\n              temporarily lock accounts for which too many consecutive\n              incorrect passwords are given. The required number of\n              failures and the lock time are configurable.\n\n\n\n          This section describes the syntax for password-management\n          options. For information about establishing policy for\n          password management, see\n          Section\u00a08.2.15, \u201cPassword Management\u201d.\n        \n          If multiple password-management options of a given type are\n          specified, the last one takes precedence. For example,\n          PASSWORD EXPIRE DEFAULT PASSWORD EXPIRE\n          NEVER is the same as PASSWORD EXPIRE\n          NEVER.\n\n\n\nNote\n\n\n            Except for the options that pertain to failed-login\n            tracking, password-management options apply only to accounts\n            that use an authentication plugin that stores credentials\n            internally to MySQL. For accounts that use a plugin that\n            performs authentication against a credentials system that is\n            external to MySQL, password management must be handled\n            externally against that system as well. For more information\n            about internal credentials storage, see\n            Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n\n\n          A client has an expired password if the account password was\n          expired manually or the password age is considered greater\n          than its permitted lifetime per the automatic expiration\n          policy. In this case, the server either disconnects the client\n          or restricts the operations permitted to it (see\n          Section\u00a08.2.16, \u201cServer Handling of Expired Passwords\u201d). Operations\n          performed by a restricted client result in an error until the\n          user establishes a new account password.\n\n\n\nNote\n\n\n            Although it is possible to \u201creset\u201d an expired\n            password by setting it to its current value, it is\n            preferable, as a matter of good policy, to choose a\n            different password. DBAs can enforce non-reuse by\n            establishing an appropriate password-reuse policy. See\n            Password Reuse Policy.\n\n\n\nALTER USER permits these\n          password_option values for\n          controlling password expiration:\n\n\n\nPASSWORD EXPIRE\n\n              Immediately marks the password expired for all accounts\n              named by the statement.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE;\nPASSWORD EXPIRE DEFAULT\n\n              Sets all accounts named by the statement so that the\n              global expiration policy applies, as specified by the\n              default_password_lifetime\n              system variable.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;\nPASSWORD EXPIRE NEVER\n\n              This expiration option overrides the global policy for all\n              accounts named by the statement. For each, it disables\n              password expiration so that the password never expires.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;\nPASSWORD EXPIRE INTERVAL\n              N DAY\n\n              This expiration option overrides the global policy for all\n              accounts named by the statement. For each, it sets the\n              password lifetime to N days.\n              The following statement requires the password to be\n              changed every 180 days:\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 180 DAY;\n\n\nALTER USER permits these\n          password_option values for\n          controlling reuse of previous passwords based on required\n          minimum number of password changes:\n\n\n\nPASSWORD HISTORY DEFAULT\n\n              Sets all accounts named by the statement so that the\n              global policy about password history length applies, to\n              prohibit reuse of passwords before the number of changes\n              specified by the\n              password_history system\n              variable.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD HISTORY DEFAULT;\nPASSWORD HISTORY\n              N\n\n              This history-length option overrides the global policy for\n              all accounts named by the statement. For each, it sets the\n              password history length to N\n              passwords, to prohibit reusing any of the\n              N most recently chosen\n              passwords. The following statement prohibits reuse of any\n              of the previous 6 passwords:\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD HISTORY 6;\n\n\nALTER USER permits these\n          password_option values for\n          controlling reuse of previous passwords based on time elapsed:\n\n\n\nPASSWORD REUSE INTERVAL DEFAULT\n\n              Sets all statements named by the account so that the\n              global policy about time elapsed applies, to prohibit\n              reuse of passwords newer than the number of days specified\n              by the\n              password_reuse_interval\n              system variable.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL DEFAULT;\nPASSWORD REUSE INTERVAL\n              N DAY\n\n              This time-elapsed option overrides the global policy for\n              all accounts named by the statement. For each, it sets the\n              password reuse interval to N\n              days, to prohibit reuse of passwords newer than that many\n              days. The following statement prohibits password reuse for\n              360 days:\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL 360 DAY;\n\n\nALTER USER permits these\n          password_option values for\n          controlling whether attempts to change an account password\n          must specify the current password, as verification that the\n          user attempting to make the change actually knows the current\n          password:\n\n\n\nPASSWORD REQUIRE CURRENT\n\n              This verification option overrides the global policy for\n              all accounts named by the statement. For each, it requires\n              that password changes specify the current password.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT;\nPASSWORD REQUIRE CURRENT OPTIONAL\n\n              This verification option overrides the global policy for\n              all accounts named by the statement. For each, it does not\n              require that password changes specify the current\n              password. (The current password may but need not be\n              given.)\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT OPTIONAL;\nPASSWORD REQUIRE CURRENT DEFAULT\n\n              Sets all statements named by the account so that the\n              global policy about password verification applies, as\n              specified by the\n              password_require_current\n              system variable.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT DEFAULT;\n\n\nALTER USER permits these\n          password_option values for\n          controlling failed-login tracking:\n\n\n\nFAILED_LOGIN_ATTEMPTS\n              N\n\n              Whether to track account login attempts that specify an\n              incorrect password. N must be a\n              number from 0 to 32767. A value of 0 disables failed-login\n              tracking. Values greater than 0 indicate how many\n              consecutive password failures cause temporary account\n              locking (if PASSWORD_LOCK_TIME is also\n              nonzero).\n            \nPASSWORD_LOCK_TIME {N\n              | UNBOUNDED}\n\n              How long to lock the account after too many consecutive\n              login attempts provide an incorrect password.\n              N must be a number from 0 to\n              32767, or UNBOUNDED. A value of 0\n              disables temporary account locking. Values greater than 0\n              indicate how long to lock the account in days. A value of\n              UNBOUNDED causes the account locking\n              duration to be unbounded; once locked, the account remains\n              in a locked state until unlocked. For information about\n              the conditions under which unlocking occurs, see\n              Failed-Login Tracking and Temporary Account Locking.\n\n\n\n          For failed-login tracking and temporary locking to occur, an\n          account's FAILED_LOGIN_ATTEMPTS and\n          PASSWORD_LOCK_TIME options both must be\n          nonzero. The following statement modifies an account such that\n          it remains locked for two days after four consecutive password\n          failures:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  FAILED_LOGIN_ATTEMPTS 4 PASSWORD_LOCK_TIME 2;\n",
        "\n\n\n\nALTER USER Comment and Attribute Options\n\n\n\n\n          MySQL 8.4 supports user comments and user\n          attributes, as described in Section\u00a015.7.1.3, \u201cCREATE USER Statement\u201d.\n          These can be modified employing ALTER USER\n          by means of the COMMENT and\n          ATTRIBUTE options, respectively. You cannot\n          specify both options in the same ALTER USER\n          statement; attempting to do so results in a syntax error.\n        \n          The user comment and user attribute are stored in the\n          Information Schema\n          USER_ATTRIBUTES table as a JSON\n          object; the user comment is stored as the value for a\n          comment key in the ATTRIBUTE column of this\n          table, as shown later in this discussion. The\n          COMMENT text can be any arbitrary quoted\n          text, and replaces any existing user comment. The\n          ATTRIBUTE value must be the valid string\n          representation of a JSON object. This is merged with any\n          existing user attribute as if the\n          JSON_MERGE_PATCH() function had\n          been used on the existing user attribute and the new one; for\n          any keys that are re-used, the new value overwrites the old\n          one, as shown here:\n        Press CTRL+C to copy mysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"foo\": \"bar\"} |\n+------+-----------+----------------+\n1 row in set (0.11 sec)\n\nmysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"baz\": \"faz\", \"foo\": \"moo\"}';\nQuery OK, 0 rows affected (0.22 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+------------------------------+\n| USER | HOST      | ATTRIBUTE                    |\n+------+-----------+------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"foo\": \"moo\"} |\n+------+-----------+------------------------------+\n1 row in set (0.00 sec)\n          To remove a key and its value from the user attribute, set the\n          key to JSON null (must be lowercase and\n          unquoted), like this:\n        Press CTRL+C to copy mysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"foo\": null}';\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"baz\": \"faz\"} |\n+------+-----------+----------------+\n1 row in set (0.00 sec)\n          To set an existing user comment to an empty string, use\n          ALTER USER ... COMMENT ''. This leaves an\n          empty comment value in the\n          USER_ATTRIBUTES table; to remove\n          the user comment completely, use ALTER USER ...\n          ATTRIBUTE ... with the value for the column key set\n          to JSON null (unquoted, in lower case).\n          This is illustrated by the following sequence of SQL\n          statements:\n        Press CTRL+C to copy mysql> ALTER USER 'bill'@'localhost' COMMENT 'Something about Bill';\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+---------------------------------------------------+\n| USER | HOST      | ATTRIBUTE                                         |\n+------+-----------+---------------------------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"comment\": \"Something about Bill\"} |\n+------+-----------+---------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> ALTER USER 'bill'@'localhost' COMMENT '';\nQuery OK, 0 rows affected (0.09 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+-------------------------------+\n| USER | HOST      | ATTRIBUTE                     |\n+------+-----------+-------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"comment\": \"\"} |\n+------+-----------+-------------------------------+\n1 row in set (0.00 sec)\n\nmysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"comment\": null}';\nQuery OK, 0 rows affected (0.07 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"baz\": \"faz\"} |\n+------+-----------+----------------+\n1 row in set (0.00 sec)\n",
        "\n\n\n\nALTER USER Account-Locking Options\n\n\n\n\n          MySQL supports account locking and unlocking using the\n          ACCOUNT LOCK and ACCOUNT\n          UNLOCK options, which specify the locking state for\n          an account. For additional discussion, see\n          Section\u00a08.2.20, \u201cAccount Locking\u201d.\n        \n          If multiple account-locking options are specified, the last\n          one takes precedence.\n        \nALTER USER ...\n          ACCOUNT UNLOCK unlocks any account named by the\n          statement that is temporarily locked due to too many failed\n          logins. See Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n",
        "\n\n\n\nALTER USER Binary Logging\n\n\n\n\nALTER USER is written to the\n          binary log if it succeeds, but not if it fails; in that case,\n          rollback occurs and no changes are made. A statement written\n          to the binary log includes all named users. If the IF\n          EXISTS clause is given, this includes even users\n          that do not exist and were not altered.\n        \n          If the original statement changes the credentials for a user,\n          the statement written to the binary log specifies the\n          applicable authentication plugin for that user, determined as\n          follows:\n\n\n\n              The plugin named in the original statement, if one was\n              specified.\n            \n              Otherwise, the plugin associated with the user account if\n              the user exists, or the default authentication plugin if\n              the user does not exist. (If the statement written to the\n              binary log must specify a particular authentication plugin\n              for a user, include it in the original statement.)\n\n\n\n          If the server adds the default authentication plugin for any\n          users in the statement written to the binary log, it writes a\n          warning to the error log naming those users.\n        \n          If the original statement specifies the\n          FAILED_LOGIN_ATTEMPTS or\n          PASSWORD_LOCK_TIME option, the statement\n          written to the binary log includes the option.\n        \nALTER USER statements with\n          clauses that support multifactor authentication (MFA) are\n          written to the binary log with the exception of ALTER\n          USER user factor INITIATE\n          REGISTRATION statements.\n\n\n\nALTER USER user factor\n              FINISH REGISTRATION SET CHALLENGE_RESPONSE AS\n              'auth_string'\n              statements are written to the binary log as ALTER\n              USER user MODIFY\n              factor IDENTIFIED WITH\n              authentication_webauthn AS\n              webauthn_hash_string;\n            \n              In a replication context, the replication user requires\n              PASSWORDLESS_USER_ADMIN\n              privilege to execute ALTER USER ...\n              MODIFY operations on accounts configured for\n              passwordless authentication using the\n              authentication_webauthn plugin.\n\n\n"
    ],
    "Examples": [
        "SELECT CURRENT_USER();",
        "ALTER USER USER() IDENTIFIED BY 'auth_string';",
        "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password' PASSWORD EXPIRE;",
        "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH caching_sha2_password BY 'new_password'\n  PASSWORD EXPIRE INTERVAL 180 DAY\n  FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 2;",
        "ALTER USER 'jeffrey'@'localhost' ACCOUNT LOCK;\nALTER USER 'jeffrey'@'localhost' ACCOUNT UNLOCK;",
        "ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SSL WITH MAX_CONNECTIONS_PER_HOUR 20;",
        "ALTER USER\n  'jeffrey'@'localhost'\n    IDENTIFIED BY 'jeffrey_new_password',\n  'jeanne'@'localhost',\n  'josh'@'localhost'\n    IDENTIFIED BY 'josh_new_password'\n    REPLACE 'josh_current_password'\n    RETAIN CURRENT PASSWORD\n  REQUIRE SSL WITH MAX_USER_CONNECTIONS 2\n  PASSWORD HISTORY 5;",
        "ALTER USER 'josh'@'localhost' DISCARD OLD PASSWORD;",
        "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'password';",
        "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             BY 'password';",
        "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             BY 'password'\n             REPLACE 'current_password';",
        "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password'\n  RETAIN CURRENT PASSWORD;",
        "ALTER USER 'jeffery'@'localhost' DISCARD OLD PASSWORD;",
        "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             AS '*6C8989366EAF75BB670AD8EA7A7FC1176A95CEF4';",
        "ALTER USER 'user' DROP 2 FACTOR 3 FACTOR;",
        "ALTER USER 'joe'@'10.0.0.1' DEFAULT ROLE administrator, developer;",
        "ALTER USER 'jeffrey'@'localhost' REQUIRE NONE;",
        "ALTER USER 'jeffrey'@'localhost' REQUIRE SSL;",
        "ALTER USER 'jeffrey'@'localhost' REQUIRE X509;",
        "ALTER USER 'jeffrey'@'localhost'\n  REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com';",
        "ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com';",
        "ALTER USER 'jeffrey'@'localhost'\n  REQUIRE CIPHER 'EDH-RSA-DES-CBC3-SHA';",
        "ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com'\n  AND ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com'\n  AND CIPHER 'EDH-RSA-DES-CBC3-SHA';",
        "ALTER USER 'jeffrey'@'localhost'\n  WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100;",
        "ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE;",
        "ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;",
        "ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;",
        "ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 180 DAY;",
        "ALTER USER 'jeffrey'@'localhost' PASSWORD HISTORY DEFAULT;",
        "ALTER USER 'jeffrey'@'localhost' PASSWORD HISTORY 6;",
        "ALTER USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL DEFAULT;",
        "ALTER USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL 360 DAY;",
        "ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT;",
        "ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT OPTIONAL;",
        "ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT DEFAULT;",
        "ALTER USER 'jeffrey'@'localhost'\n  FAILED_LOGIN_ATTEMPTS 4 PASSWORD_LOCK_TIME 2;",
        "mysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"foo\": \"bar\"} |\n+------+-----------+----------------+\n1 row in set (0.11 sec)\n\nmysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"baz\": \"faz\", \"foo\": \"moo\"}';\nQuery OK, 0 rows affected (0.22 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+------------------------------+\n| USER | HOST      | ATTRIBUTE                    |\n+------+-----------+------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"foo\": \"moo\"} |\n+------+-----------+------------------------------+\n1 row in set (0.00 sec)",
        "mysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"foo\": null}';\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"baz\": \"faz\"} |\n+------+-----------+----------------+\n1 row in set (0.00 sec)",
        "mysql> ALTER USER 'bill'@'localhost' COMMENT 'Something about Bill';\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+---------------------------------------------------+\n| USER | HOST      | ATTRIBUTE                                         |\n+------+-----------+---------------------------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"comment\": \"Something about Bill\"} |\n+------+-----------+---------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> ALTER USER 'bill'@'localhost' COMMENT '';\nQuery OK, 0 rows affected (0.09 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+-------------------------------+\n| USER | HOST      | ATTRIBUTE                     |\n+------+-----------+-------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"comment\": \"\"} |\n+------+-----------+-------------------------------+\n1 row in set (0.00 sec)\n\nmysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"comment\": null}';\nQuery OK, 0 rows affected (0.07 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"baz\": \"faz\"} |\n+------+-----------+----------------+\n1 row in set (0.00 sec)"
    ],
    "Category": [
        "Database Administration Statements"
    ]
}