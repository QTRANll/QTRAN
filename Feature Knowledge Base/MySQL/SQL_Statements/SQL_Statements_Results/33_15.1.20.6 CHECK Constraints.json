{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/create-table-check-constraints.html"
    ],
    "Title": [
        "15.1.20.6 CHECK Constraints"
    ],
    "Feature": [
        "[CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED]",
        "mysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `c1` int(11) DEFAULT NULL,\n  `c2` int(11) DEFAULT NULL,\n  `c3` int(11) DEFAULT NULL,\n  CONSTRAINT `c1_nonzero` CHECK ((`c1` <> 0)),\n  CONSTRAINT `c2_positive` CHECK ((`c2` > 0)),\n  CONSTRAINT `t1_chk_1` CHECK ((`c1` <> `c2`)),\n  CONSTRAINT `t1_chk_2` CHECK ((`c1` > 10)),\n  CONSTRAINT `t1_chk_3` CHECK ((`c3` < 100)),\n  CONSTRAINT `t1_chk_4` CHECK ((`c1` > `c3`))\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci"
    ],
    "Description": [
        "\nCREATE TABLE permits the core\n        features of table and column CHECK\n        constraints, for all storage engines.\n        CREATE TABLE permits the\n        following CHECK constraint syntax, for both\n        table constraints and column constraints:\n      ",
        "\n        The optional symbol specifies a name\n        for the constraint. If omitted, MySQL generates a name from the\n        table name, a literal _chk_, and an ordinal\n        number (1, 2, 3, ...). Constraint names have a maximum length of\n        64 characters. They are case-sensitive, but not\n        accent-sensitive.\n      ",
        "\nexpr specifies the constraint\n        condition as a boolean expression that must evaluate to\n        TRUE or UNKNOWN (for\n        NULL values) for each row of the table. If\n        the condition evaluates to FALSE, it fails\n        and a constraint violation occurs. The effect of a violation\n        depends on the statement being executed, as described later in\n        this section.\n      ",
        "\n        The optional enforcement clause indicates whether the constraint\n        is enforced:\n",
        "\n\n            If omitted or specified as ENFORCED, the\n            constraint is created and enforced.\n          \n            If specified as NOT ENFORCED, the\n            constraint is created but not enforced.\n\n",
        "\n        A CHECK constraint is specified as either a\n        table constraint or column constraint:\n",
        "\n\n            A table constraint does not appear within a column\n            definition and can refer to any table column or columns.\n            Forward references are permitted to columns appearing later\n            in the table definition.\n          \n            A column constraint appears within a column definition and\n            can refer only to that column.\n\n",
        "\n        Consider this table definition:\n      ",
        "Press CTRL+C to copy CREATE TABLE t1\n(\n  CHECK (c1 <> c2),\n  c1 INT CHECK (c1 > 10),\n  c2 INT CONSTRAINT c2_positive CHECK (c2 > 0),\n  c3 INT CHECK (c3 < 100),\n  CONSTRAINT c1_nonzero CHECK (c1 <> 0),\n  CHECK (c1 > c3)\n);",
        "\n        The definition includes table constraints and column\n        constraints, in named and unnamed formats:\n",
        "\n\n            The first constraint is a table constraint: It occurs\n            outside any column definition, so it can (and does) refer to\n            multiple table columns. This constraint contains forward\n            references to columns not defined yet. No constraint name is\n            specified, so MySQL generates a name.\n          \n            The next three constraints are column constraints: Each\n            occurs within a column definition, and thus can refer only\n            to the column being defined. One of the constraints is named\n            explicitly. MySQL generates a name for each of the other\n            two.\n          \n            The last two constraints are table constraints. One of them\n            is named explicitly. MySQL generates a name for the other\n            one.\n\n",
        "\n        As mentioned, MySQL generates a name for any\n        CHECK constraint specified without one. To\n        see the names generated for the preceding table definition, use\n        SHOW CREATE TABLE:\n      ",
        "\n        The SQL standard specifies that all types of constraints\n        (primary key, unique index, foreign key, check) belong to the\n        same namespace. In MySQL, each constraint type has its own\n        namespace per schema (database). Consequently,\n        CHECK constraint names must be unique per\n        schema; no two tables in the same schema can share a\n        CHECK constraint name. (Exception: A\n        TEMPORARY table hides a\n        non-TEMPORARY table of the same name, so it\n        can have the same CHECK constraint names as\n        well.)\n      ",
        "\n        Beginning generated constraint names with the table name helps\n        ensure schema uniqueness because table names also must be unique\n        within the schema.\n      ",
        "\nCHECK condition expressions must adhere to\n        the following rules. An error occurs if an expression contains\n        disallowed constructs.\n",
        "\n\n            Nongenerated and generated columns are permitted, except\n            columns with the AUTO_INCREMENT attribute\n            and columns in other tables.\n          \n            Literals, deterministic built-in functions, and operators\n            are permitted. A function is deterministic if, given the\n            same data in tables, multiple invocations produce the same\n            result, independently of the connected user. Examples of\n            functions that are nondeterministic and fail this\n            definition: CONNECTION_ID(),\n            CURRENT_USER(),\n            NOW().\n          \n            Stored functions and loadable functions are not permitted.\n          \n            Stored procedure and function parameters are not permitted.\n          \n            Variables (system variables, user-defined variables, and\n            stored program local variables) are not permitted.\n          \n            Subqueries are not permitted.\n\n",
        "\n        Foreign key referential actions (ON UPDATE,\n        ON DELETE) are prohibited on columns used in\n        CHECK constraints. Likewise,\n        CHECK constraints are prohibited on columns\n        used in foreign key referential actions.\n      ",
        "\nCHECK constraints are evaluated for\n        INSERT,\n        UPDATE,\n        REPLACE,\n        LOAD DATA, and\n        LOAD XML statements and an error\n        occurs if a constraint evaluates to FALSE. If\n        an error occurs, handling of changes already applied differs for\n        transactional and nontransactional storage engines, and also\n        depends on whether strict SQL mode is in effect, as described in\n        Strict SQL Mode.\n      ",
        "\nCHECK constraints are evaluated for\n        INSERT IGNORE,\n        UPDATE IGNORE,\n        LOAD DATA ...\n        IGNORE, and\n        LOAD XML ...\n        IGNORE statements and a warning occurs if a constraint\n        evaluates to FALSE. The insert or update for\n        any offending row is skipped.\n      ",
        "\n        If the constraint expression evaluates to a data type that\n        differs from the declared column type, implicit coercion to the\n        declared type occurs according to the usual MySQL\n        type-conversion rules. See Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d. If\n        type conversion fails or results in a loss of precision, an\n        error occurs.\n",
        "\n\nNote\n\n\n          Constraint expression evaluation uses the SQL mode in effect\n          at evaluation time. If any component of the expression depends\n          on the SQL mode, different results may occur for different\n          uses of the table unless the SQL mode is the same during all\n          uses.\n\n",
        "\n        The Information Schema\n        CHECK_CONSTRAINTS table provides\n        information about CHECK constraints defined\n        on tables. See\n        Section\u00a028.3.5, \u201cThe INFORMATION_SCHEMA CHECK_CONSTRAINTS Table\u201d.\n"
    ],
    "Examples": [
        "CREATE TABLE t1\n(\n  CHECK (c1 <> c2),\n  c1 INT CHECK (c1 > 10),\n  c2 INT CONSTRAINT c2_positive CHECK (c2 > 0),\n  c3 INT CHECK (c3 < 100),\n  CONSTRAINT c1_nonzero CHECK (c1 <> 0),\n  CHECK (c1 > c3)\n);"
    ],
    "Category": [
        "Data Definition Statements"
    ]
}