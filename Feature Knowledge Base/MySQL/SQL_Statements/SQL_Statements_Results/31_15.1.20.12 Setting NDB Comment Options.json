{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/create-table-ndb-comment-options.html"
    ],
    "Title": [
        "15.1.20.12 Setting NDB Comment Options"
    ],
    "Feature": [
        "COMMENT 'NDB_COLUMN=speclist'\n\nspeclist := spec[,spec]\n\nspec := \n    BLOB_INLINE_SIZE=value\n  | MAX_BLOB_PART_SIZE[={0|1}]",
        "COMMENT=\"NDB_TABLE=ndb_table_option[,ndb_table_option[,...]]\"\n\nndb_table_option: {\n    NOLOGGING={1 | 0}\n  | READ_BACKUP={1 | 0}\n  | PARTITION_BALANCE={FOR_RP_BY_NODE | FOR_RA_BY_NODE | FOR_RP_BY_LDM\n                      | FOR_RA_BY_LDM | FOR_RA_BY_LDM_X_2\n                      | FOR_RA_BY_LDM_X_3 | FOR_RA_BY_LDM_X_4}\n  | FULLY_REPLICATED={1 | 0}\n}",
        "mysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n     > FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\"\\G\n*************************** 1. row ***************************\n   TABLE_NAME: t1\n TABLE_SCHEMA: test\nTABLE_COMMENT: NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RP_BY_NODE\n1 row in set (0.01 sec)",
        "mysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n    ->     FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\"\\G\n*************************** 1. row ***************************\n   TABLE_NAME: t1\n TABLE_SCHEMA: test\nTABLE_COMMENT: NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RP_BY_NODE\n1 row in set (0.01 sec)"
    ],
    "Description": [
        "\nNDB_COLUMN OptionsNDB_TABLE Options\n",
        "\n\n\n\n\n        It is possible to set a number of options specific to NDB\n        Cluster in the table comment or column comments of an\n        NDB table. Table-level options for\n        controlling read from any replica and partition balance can be\n        embedded in a table comment using NDB_TABLE.\n      ",
        "\nNDB_COLUMN can be used in a column comment to\n        set the size of the blob parts table column used for storing\n        parts of blob values by NDB to its maximum.\n        This works for BLOB,\n        MEDIUMBLOB, LONGBLOB,\n        TEXT,\n        MEDIUMTEXT, LONGTEXT, and\n        JSON columns. A column comment\n        can also be used to control the inline size of a blob column.\n        NDB_COLUMN comments do not support\n        TINYBLOB or TINYTEXT\n        columns, since these have an inline part (only) of fixed size,\n        and no separate parts to store elsewhere.\n      ",
        "\nNDB_TABLE can be used in a table comment to\n        set options relating to partition balance and whether the table\n        is fully replicated, among others.\n      ",
        "\n        The remainder of this section describes these options and their\n        use.\n",
        "NDB_COLUMN Options",
        "\n\n\n\n\n\n        In NDB Cluster, a column comment in a CREATE\n        TABLE or ALTER TABLE\n        statement can also be used to specify an\n        NDB_COLUMN option. NDB\n        supports two column comment options\n        BLOB_INLINE_SIZE and\n        MAX_BLOB_PART_SIZE. Syntax for these options\n        is shown here:\n      ",
        "\nBLOB_INLINE_SIZE specifies the number of\n        bytes to be stored inline by the column; its expected value is\n        an integer in the range 1 - 29980, inclusive. Setting a value\n        greater than 29980 raises an error; setting a value less than 1\n        is allowed, but causes the default inline size for the column\n        type to be used.\n      ",
        "\n        You should be aware that the maximum value for this option is\n        actually the maximum number of bytes that can be stored in one\n        row of an NDB table; every column in the row\n        contributes to this total.\n      ",
        "\n        You should also keep in mind, especially when working with\n        TEXT columns, that the value set by\n        MAX_BLOB_PART_SIZE or\n        BLOB_INLINE_SIZE represents column size in\n        bytes. It does not indicate the number of characters, which\n        varies according to the character set and collation used by the\n        column.\n      ",
        "\n        To see the effects of this option, first create a table with two\n        BLOB columns, one (b1)\n        with no extra options, and another (b2) with\n        a setting for BLOB_INLINE_SIZE, as shown\n        here:\n      ",
        "Press CTRL+C to copy mysql> CREATE TABLE t1 (\n    ->    a INT NOT NULL PRIMARY KEY,\n    ->    b1 BLOB,\n    ->    b2 BLOB COMMENT 'NDB_COLUMN=BLOB_INLINE_SIZE=8000'\n    ->  ) ENGINE NDB;\nQuery OK, 0 rows affected (0.32 sec)",
        "\n        You can see the BLOB_INLINE_SIZE settings for\n        the BLOB columns by querying the\n        ndbinfo.blobs table, like\n        this:\n      ",
        "Press CTRL+C to copy mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't1';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| b1          |         256 |           2000 |\n| b2          |        8000 |           2000 |\n+-------------+-------------+----------------+\n2 rows in set (0.01 sec)",
        "\n        You can also check the output from the\n        ndb_desc utility, as shown here, with the\n        relevant lines displayed using emphasized text:\n      ",
        "\n        For MAX_BLOB_PART_SIZE, the\n        = sign and the value following it are\n        optional. Using any value other than 0 or 1 results in a syntax\n        error.\n      ",
        "\n        The effect of using MAX_BLOB_PART_SIZE in a\n        column comment is to set the blob part size of a\n        TEXT or\n        BLOB column to the maximum number\n        of bytes supported for this by NDB (13948).\n        This option can be applied to any blob column type supported by\n        MySQL except TINYBLOB or\n        TINYTEXT (BLOB,\n        MEDIUMBLOB, LONGBLOB,\n        TEXT, MEDIUMTEXT,\n        LONGTEXT). Unlike\n        BLOB_INLINE_SIZE,\n        MAX_BLOB_PART_SIZE has no effect on\n        JSON columns.\n      ",
        "\n        To see the effects of this option, we first run the following\n        SQL statement in the mysql client to create a\n        table with two BLOB columns, one\n        (c1) with no extra options, and another\n        (c2) with\n        MAX_BLOB_PART_SIZE:\n      ",
        "Press CTRL+C to copy mysql> CREATE TABLE test.t2 (\n    ->   p INT PRIMARY KEY, \n    ->   c1 BLOB, \n    ->   c2 BLOB COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE'\n    -> ) ENGINE NDB;\nQuery OK, 0 rows affected (0.32 sec)",
        "\n        From the system shell, run the ndb_desc\n        utility to obtain information about the table just created, as\n        shown in this example:\n      ",
        "\n        Column information in the output is listed under\n        Attributes; for columns c1\n        and c2 it is displayed here in emphasized\n        text. For c1, the blob part size is 2000, the\n        default value; for c2, it is 13948, as set by\n        MAX_BLOB_PART_SIZE.\n      ",
        "\n        You can also query the ndbinfo.blobs table to\n        see this, as shown here:\n      ",
        "Press CTRL+C to copy mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't2';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |         256 |           2000 |\n| c2          |         256 |          13948 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)",
        "\n        You can change the blob part size for a given blob column of an\n        NDB table using an ALTER\n        TABLE statement such as this one, and verifying the\n        changes afterwards using SHOW CREATE\n        TABLE:\n      ",
        "Press CTRL+C to copy mysql> ALTER TABLE test.t2 \n    ->    DROP COLUMN c1, \n    ->     ADD COLUMN c1 BLOB COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE',\n    ->     CHANGE COLUMN c2 c2 BLOB AFTER c1;\nQuery OK, 0 rows affected (0.47 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE test.t2\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t2` (\n  `p` int(11) NOT NULL,\n  `c1` blob COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE',\n  `c2` blob,\n  PRIMARY KEY (`p`)\n) ENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)\n\nmysql> EXIT\nBye",
        "\n        The output of ndb_desc shows that the blob\n        part sizes of the columns have been changed as expected:\n      ",
        "\n        You can also see the change by running the query against\n        ndbinfo.blobs again:\n      ",
        "Press CTRL+C to copy mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't2';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |         256 |          13948 |\n| c2          |         256 |           2000 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)",
        "\n        It is possible to set both BLOB_INLINE_SIZE\n        and MAX_BLOB_PART_SIZE for a blob column, as\n        shown in this CREATE TABLE statement:\n      ",
        "Press CTRL+C to copy mysql> CREATE TABLE test.t3 (\n    ->   p INT NOT NULL PRIMARY KEY,\n    ->   c1 JSON,\n    ->   c2 JSON COMMENT 'NDB_COLUMN=BLOB_INLINE_SIZE=5000,MAX_BLOB_PART_SIZE'\n    -> ) ENGINE NDB;\nQuery OK, 0 rows affected (0.28 sec)",
        "\n        Querying the blobs table shows\n        us that the statement worked as expected:\n      ",
        "Press CTRL+C to copy mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't3';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |        4000 |           8100 |\n| c2          |        5000 |           8100 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)",
        "\n        You can also verify that the statement worked by checking the\n        output of ndb_desc.\n      ",
        "\n        Changing a column's blob part size must be done using a\n        copying ALTER TABLE; this operation cannot be\n        performed online (see\n        Section\u00a025.6.12, \u201cOnline Operations with ALTER TABLE in NDB Cluster\u201d).\n      ",
        "\n        For more information about how NDB\n        stores columns of blob types, see\n        String Type Storage Requirements.\n",
        "NDB_TABLE Options",
        "\n\n\n\n\n\n\n        For an NDB Cluster table, the table comment in a CREATE\n        TABLE or ALTER TABLE\n        statement can also be used to specify an\n        NDB_TABLE option, which consists of one or\n        more name-value pairs, separated by commas if need be, following\n        the string NDB_TABLE=. Complete syntax for\n        names and values syntax is shown here:\n      ",
        "\n        Spaces are not permitted within the quoted string. The string is\n        case-insensitive.\n      ",
        "\n        The four NDB table options that can be set as\n        part of a comment in this way are described in more detail in\n        the next few paragraphs.\n      ",
        "\n\n\n\nNOLOGGING: By default, NDB\n        tables are logged, and checkpointed. This makes them durable to\n        whole cluster failures. Using NOLOGGING when\n        creating or altering a table means that this table is not redo\n        logged or included in local checkpoints. In this case, the table\n        is still replicated across the data nodes for high availability,\n        and updated using transactions, but changes made to it are not\n        recorded in the data node's redo logs, and its content is\n        not checkpointed to disk; when recovering from a cluster\n        failure, the cluster retains the table definition, but none of\n        its rows\u2014that is, the table is empty.\n      ",
        "\n        Using such nonlogging tables reduces the data node's\n        demands on disk I/O and storage, as well as CPU for\n        checkpointing CPU. This may be suitable for short-lived data\n        which is frequently updated, and where the loss of all data in\n        the unlikely event of a total cluster failure is acceptable.\n      ",
        "\n        It is also possible to use the\n        ndb_table_no_logging system\n        variable to cause any NDB tables created or altered while this\n        variable is in effect to behave as though it had been created\n        with the NOLOGGING comment. Unlike when using\n        the comment directly, there is nothing in this case in the\n        output of SHOW CREATE TABLE to\n        indicate that it is a nonlogging table. Using the table comment\n        approach is recommended since it offers per-table control of the\n        feature, and this aspect of the table schema is embedded in the\n        table creation statement where it can be found easily by\n        SQL-based tools.\n      ",
        "\n\n\n\nREAD_BACKUP: Setting this option to 1 has the\n        same effect as though\n        ndb_read_backup were enabled;\n        enables reading from any replica. Doing so greatly improves the\n        performance of reads from the table at a relatively small cost\n        to write performance. 1 is the default for\n        READ_BACKUP, and the default for\n        ndb_read_backup is\n        ON (previously, read from any replica was\n        disabled by default).\n      ",
        "\n        You can set READ_BACKUP for an existing table\n        online, using an ALTER TABLE statement\n        similar to one of those shown here:\n      ",
        "Press CTRL+C to copy ALTER TABLE ... ALGORITHM=INPLACE, COMMENT=\"NDB_TABLE=READ_BACKUP=1\";\n\nALTER TABLE ... ALGORITHM=INPLACE, COMMENT=\"NDB_TABLE=READ_BACKUP=0\";",
        "\n        For more information about the ALGORITHM\n        option for ALTER TABLE, see\n        Section\u00a025.6.12, \u201cOnline Operations with ALTER TABLE in NDB Cluster\u201d.\n      ",
        "\n\n\n\nPARTITION_BALANCE: Provides additional\n        control over assignment and placement of partitions. The\n        following four schemes are supported:\n",
        "\n\nFOR_RP_BY_NODE: One partition per node.\n          \n            Only one LDM on each node stores a primary partition. Each\n            partition is stored in the same LDM (same ID) on all nodes.\n          \nFOR_RA_BY_NODE: One partition per node\n            group.\n          \n            Each node stores a single partition, which can be either a\n            primary replica or a backup replica. Each partition is\n            stored in the same LDM on all nodes.\n          \nFOR_RP_BY_LDM: One partition for each LDM\n            on each node; the default.\n          \n            This is the setting used if READ_BACKUP\n            is set to 1.\n          \nFOR_RA_BY_LDM: One partition per LDM in\n            each node group.\n          \n            These partitions can be primary or backup partitions.\n          \nFOR_RA_BY_LDM_X_2: Two partitions per LDM\n            in each node group.\n          \n            These partitions can be primary or backup partitions.\n          \nFOR_RA_BY_LDM_X_3: Three partitions per\n            LDM in each node group.\n          \n            These partitions can be primary or backup partitions.\n          \nFOR_RA_BY_LDM_X_4: Four partitions per\n            LDM in each node group.\n          \n            These partitions can be primary or backup partitions.\n\n",
        "\nPARTITION_BALANCE is the preferred interface\n        for setting the number of partitions per table. Using\n        MAX_ROWS to force the number of partitions is\n        deprecated but continues to be supported for backward\n        compatibility; it is subject to removal in a future release of\n        MySQL NDB Cluster. (Bug #81759, Bug #23544301)\n      ",
        "\n\n\nFULLY_REPLICATED controls whether the table\n        is fully replicated, that is, whether each data node has a\n        complete copy of the table. To enable full replication of the\n        table, use FULLY_REPLICATED=1.\n      ",
        "\n        This setting can also be controlled using the\n        ndb_fully_replicated system variable. Setting\n        it to ON enables the option by default for\n        all new NDB tables; the default is\n        OFF. The\n        ndb_data_node_neighbour system\n        variable is also used for fully replicated tables, to ensure\n        that when a fully replicated table is accessed, we access the\n        data node which is local to this MySQL Server.\n      ",
        "\n        An example of a CREATE TABLE statement using\n        such a comment when creating an NDB table is\n        shown here:\n      ",
        "Press CTRL+C to copy mysql> CREATE TABLE t1 (\n     >     c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n     >     c2 VARCHAR(100),\n     >     c3 VARCHAR(100) )\n     > ENGINE=NDB\n     >\nCOMMENT=\"NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RP_BY_NODE\";",
        "\n        The comment is displayed as part of the output of\n        SHOW CREATE TABLE. The text of\n        the comment is also available from querying the MySQL\n        Information Schema TABLES table, as\n        in this example:\n      ",
        "\n        This comment syntax is also supported with\n        ALTER TABLE statements for\n        NDB tables, as shown here:\n      ",
        "Press CTRL+C to copy mysql> ALTER TABLE t1 COMMENT=\"NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE\";\nQuery OK, 0 rows affected (0.40 sec)\nRecords: 0  Duplicates: 0  Warnings: 0",
        "\n        The TABLE_COMMENT column displays the comment\n        that is required to re-create the table as it is following the\n        ALTER TABLE statement, like this:\n      ",
        "Press CTRL+C to copy mysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n     > FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\";\n+------------+--------------+--------------------------------------------------+\n| TABLE_NAME | TABLE_SCHEMA | TABLE_COMMENT                                    |\n+------------+--------------+--------------------------------------------------+\n| t1         | c            | NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE       |\n| t1         | d            |                                                  |\n+------------+--------------+--------------------------------------------------+\n2 rows in set (0.01 sec)",
        "\n        Keep in mind that a table comment used with ALTER\n        TABLE replaces any existing comment which the table\n        might have.\n      ",
        "Press CTRL+C to copy mysql> ALTER TABLE t1 COMMENT=\"NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE\";\nQuery OK, 0 rows affected (0.40 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n     > FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\";\n+------------+--------------+--------------------------------------------------+\n| TABLE_NAME | TABLE_SCHEMA | TABLE_COMMENT                                    |\n+------------+--------------+--------------------------------------------------+\n| t1         | c            | NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE       |\n| t1         | d            |                                                  |\n+------------+--------------+--------------------------------------------------+\n2 rows in set (0.01 sec)",
        "\n        You can also see the value of the\n        PARTITION_BALANCE option in the output of\n        ndb_desc. ndb_desc also\n        shows whether the READ_BACKUP and\n        FULLY_REPLICATED options are set for the\n        table. See the description of this program for more information.\n"
    ],
    "Examples": [
        "mysql> CREATE TABLE t1 (\n    ->    a INT NOT NULL PRIMARY KEY,\n    ->    b1 BLOB,\n    ->    b2 BLOB COMMENT 'NDB_COLUMN=BLOB_INLINE_SIZE=8000'\n    ->  ) ENGINE NDB;\nQuery OK, 0 rows affected (0.32 sec)",
        "mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't1';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| b1          |         256 |           2000 |\n| b2          |        8000 |           2000 |\n+-------------+-------------+----------------+\n2 rows in set (0.01 sec)",
        "mysql> CREATE TABLE test.t2 (\n    ->   p INT PRIMARY KEY, \n    ->   c1 BLOB, \n    ->   c2 BLOB COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE'\n    -> ) ENGINE NDB;\nQuery OK, 0 rows affected (0.32 sec)",
        "mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't2';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |         256 |           2000 |\n| c2          |         256 |          13948 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)",
        "mysql> ALTER TABLE test.t2 \n    ->    DROP COLUMN c1, \n    ->     ADD COLUMN c1 BLOB COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE',\n    ->     CHANGE COLUMN c2 c2 BLOB AFTER c1;\nQuery OK, 0 rows affected (0.47 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE test.t2\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t2` (\n  `p` int(11) NOT NULL,\n  `c1` blob COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE',\n  `c2` blob,\n  PRIMARY KEY (`p`)\n) ENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)\n\nmysql> EXIT\nBye",
        "mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't2';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |         256 |          13948 |\n| c2          |         256 |           2000 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)",
        "mysql> CREATE TABLE test.t3 (\n    ->   p INT NOT NULL PRIMARY KEY,\n    ->   c1 JSON,\n    ->   c2 JSON COMMENT 'NDB_COLUMN=BLOB_INLINE_SIZE=5000,MAX_BLOB_PART_SIZE'\n    -> ) ENGINE NDB;\nQuery OK, 0 rows affected (0.28 sec)",
        "mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't3';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |        4000 |           8100 |\n| c2          |        5000 |           8100 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)",
        "ALTER TABLE ... ALGORITHM=INPLACE, COMMENT=\"NDB_TABLE=READ_BACKUP=1\";\n\nALTER TABLE ... ALGORITHM=INPLACE, COMMENT=\"NDB_TABLE=READ_BACKUP=0\";",
        "mysql> CREATE TABLE t1 (\n     >     c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n     >     c2 VARCHAR(100),\n     >     c3 VARCHAR(100) )\n     > ENGINE=NDB\n     >\nCOMMENT=\"NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RP_BY_NODE\";",
        "mysql> ALTER TABLE t1 COMMENT=\"NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE\";\nQuery OK, 0 rows affected (0.40 sec)\nRecords: 0  Duplicates: 0  Warnings: 0",
        "mysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n     > FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\";\n+------------+--------------+--------------------------------------------------+\n| TABLE_NAME | TABLE_SCHEMA | TABLE_COMMENT                                    |\n+------------+--------------+--------------------------------------------------+\n| t1         | c            | NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE       |\n| t1         | d            |                                                  |\n+------------+--------------+--------------------------------------------------+\n2 rows in set (0.01 sec)",
        "mysql> ALTER TABLE t1 COMMENT=\"NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE\";\nQuery OK, 0 rows affected (0.40 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n     > FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\";\n+------------+--------------+--------------------------------------------------+\n| TABLE_NAME | TABLE_SCHEMA | TABLE_COMMENT                                    |\n+------------+--------------+--------------------------------------------------+\n| t1         | c            | NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE       |\n| t1         | d            |                                                  |\n+------------+--------------+--------------------------------------------------+\n2 rows in set (0.01 sec)"
    ],
    "Category": [
        "Data Definition Statements"
    ]
}