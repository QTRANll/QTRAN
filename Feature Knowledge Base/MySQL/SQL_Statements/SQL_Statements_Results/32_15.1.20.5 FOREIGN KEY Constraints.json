{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/create-table-foreign-keys.html"
    ],
    "Title": [
        "15.1.20.5 FOREIGN KEY Constraints"
    ],
    "Feature": [
        "[CONSTRAINT [symbol]] FOREIGN KEY\n    [index_name] (col_name, ...)\n    REFERENCES tbl_name (col_name,...)\n    [ON DELETE reference_option]\n    [ON UPDATE reference_option]\n\nreference_option:\n    RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT",
        "ALTER TABLE tbl_name\n    ADD [CONSTRAINT [symbol]] FOREIGN KEY\n    [index_name] (col_name, ...)\n    REFERENCES tbl_name (col_name,...)\n    [ON DELETE reference_option]\n    [ON UPDATE reference_option]",
        "mysql> SHOW CREATE TABLE child\\G\n*************************** 1. row ***************************\n       Table: child\nCreate Table: CREATE TABLE `child` (\n  `id` int DEFAULT NULL,\n  `parent_id` int DEFAULT NULL,\n  KEY `par_ind` (`parent_id`),\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`)\n  REFERENCES `parent` (`id`) ON DELETE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci",
        "mysql> SELECT * FROM INFORMATION_SCHEMA.INNODB_FOREIGN \\G\n*************************** 1. row ***************************\n      ID: test/child_ibfk_1\nFOR_NAME: test/child\nREF_NAME: test/parent\n  N_COLS: 1\n    TYPE: 1\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.INNODB_FOREIGN_COLS \\G\n*************************** 1. row ***************************\n          ID: test/child_ibfk_1\nFOR_COL_NAME: parent_id\nREF_COL_NAME: id\n         POS: 0"
    ],
    "Description": [
        "\n        MySQL supports foreign keys, which permit cross-referencing\n        related data across tables, and foreign key constraints, which\n        help keep the related data consistent.\n      ",
        "\n        A foreign key relationship involves a parent table that holds\n        the initial column values, and a child table with column values\n        that reference the parent column values. A foreign key\n        constraint is defined on the child table.\n      ",
        "\n        The essential syntax for a defining a foreign key constraint in\n        a CREATE TABLE or\n        ALTER TABLE statement includes\n        the following:\n      ",
        "\n        Foreign key constraint usage is described under the following\n        topics in this section:\n",
        "\nIdentifiersConditions and RestrictionsReferential ActionsForeign Key Constraint ExamplesAdding Foreign Key ConstraintsDropping Foreign Key ConstraintsForeign Key ChecksLockingForeign Key Definitions and MetadataForeign Key Errors\n",
        "\n\n\n\nIdentifiers\n\n\n\n\n          Foreign key constraint naming is governed by the following\n          rules:\n\n\n\n              The CONSTRAINT\nsymbol value is used, if\n              defined.\n            \n              If the CONSTRAINT\nsymbol clause is not defined,\n              or a symbol is not included following the\n              CONSTRAINT keyword, a constraint name\n              name is generated automatically.\n            \n              If the CONSTRAINT\nsymbol clause is not defined,\n              or a symbol is not included following the\n              CONSTRAINT keyword, both\n              InnoDB and\n              NDB storage engines ignore\n              FOREIGN_KEY\n              index_name.\n            \n              The CONSTRAINT\n              symbol value, if\n              defined, must be unique in the database. A duplicate\n              symbol results in an error\n              similar to: ERROR 1005 (HY000): Can't create\n              table 'test.fk1' (errno: 121).\n            \n              NDB Cluster stores foreign key names using the same\n              lettercase with which they are created.\n\n\n\n          Table and column identifiers in a FOREIGN KEY ...\n          REFERENCES clause can be quoted within backticks\n          (`). Alternatively, double quotation marks\n          (\") can be used if the\n          ANSI_QUOTES SQL mode is\n          enabled. The\n          lower_case_table_names system\n          variable setting is also taken into account.\n\n",
        "\n\n\n\nConditions and Restrictions\n\n\n\n\n          Foreign key constraints are subject to the following\n          conditions and restrictions:\n\n\n\n              Parent and child tables must use the same storage engine,\n              and they cannot be defined as temporary tables.\n            \n              Creating a foreign key constraint requires the\n              REFERENCES privilege on the\n              parent table.\n            \n              Corresponding columns in the foreign key and the\n              referenced key must have similar data types. The\n              size and sign of fixed precision types such as\n              INTEGER and\n              DECIMAL must be the\n              same. The length of string types need not be\n              the same. For nonbinary (character) string columns, the\n              character set and collation must be the same.\n            \n              MySQL supports foreign key references between one column\n              and another within a table. (A column cannot have a\n              foreign key reference to itself.) In these cases, a\n              \u201cchild table record\u201d refers to a dependent\n              record within the same table.\n            \n              MySQL requires indexes on foreign keys and referenced keys\n              so that foreign key checks can be fast and not require a\n              table scan. In the referencing table, there must be an\n              index where the foreign key columns are listed as the\n              first columns in the same order. Such\n              an index is created on the referencing table automatically\n              if it does not exist. This index might be silently dropped\n              later if you create another index that can be used to\n              enforce the foreign key constraint.\n              index_name, if given, is used\n              as described previously.\n            \n              Previously, InnoDB allowed a foreign\n              key to reference any index column or group of columns,\n              even a non-unique index or partial index, an extension of\n              standard SQL. This is still allowed for backwards\n              compatibility, but is now deprecated; in addition, it must\n              be enabled by setting\n              restrict_fk_on_non_standard_key.\n              If this is done, there must still be an index in the\n              referenced table where the referenced columns are the\n              first columns in the same order.\n              Hidden columns that InnoDB adds to an\n              index are also considered in such cases (see\n              Section\u00a017.6.2.1, \u201cClustered and Secondary Indexes\u201d). You should expect\n              support for use of nonstandard keys to be removed in a\n              future version of MySQL, and migrate away from their use.\n            \nNDB always requires an explicit unique\n              key (or primary key) on any column referenced as a foreign\n              key.\n            \n              Index prefixes on foreign key columns are not supported.\n              Consequently, BLOB and\n              TEXT columns cannot be\n              included in a foreign key because indexes on those columns\n              must always include a prefix length.\n            \nInnoDB does not currently\n              support foreign keys for tables with user-defined\n              partitioning. This includes both parent and child tables.\n            \n              This restriction does not apply for\n              NDB tables that are\n              partitioned by KEY or LINEAR\n              KEY (the only user partitioning types supported\n              by the NDB storage engine); these may\n              have foreign key references or be the targets of such\n              references.\n            \n              A table in a foreign key relationship cannot be altered to\n              use another storage engine. To change the storage engine,\n              you must drop any foreign key constraints first.\n            \n              A foreign key constraint cannot reference a virtual\n              generated column.\n\n\n\n          For information about how the MySQL implementation of foreign\n          key constraints differs from the SQL standard, see\n          Section\u00a01.7.2.3, \u201cFOREIGN KEY Constraint Differences\u201d.\n\n",
        "\n\n\n\nReferential Actions\n\n\n\n\n          When an UPDATE or\n          DELETE operation affects a key\n          value in the parent table that has matching rows in the child\n          table, the result depends on the referential\n          action specified by ON UPDATE\n          and ON DELETE subclauses of the\n          FOREIGN KEY clause. Referential actions\n          include:\n\n\n\nCASCADE: Delete or update the row from\n              the parent table and automatically delete or update the\n              matching rows in the child table. Both ON DELETE\n              CASCADE and ON UPDATE CASCADE\n              are supported. Between two tables, do not define several\n              ON UPDATE CASCADE clauses that act on\n              the same column in the parent table or in the child table.\n            \n              If a FOREIGN KEY clause is defined on\n              both tables in a foreign key relationship, making both\n              tables a parent and child, an ON UPDATE\n              CASCADE or ON DELETE CASCADE\n              subclause defined for one FOREIGN KEY\n              clause must be defined for the other in order for\n              cascading operations to succeed. If an ON UPDATE\n              CASCADE or ON DELETE CASCADE\n              subclause is only defined for one FOREIGN\n              KEY clause, cascading operations fail with an\n              error.\n\n\n\nNote\n\n\n                Cascaded foreign key actions do not activate triggers.\n\n\n\nSET NULL: Delete or update the row from\n              the parent table and set the foreign key column or columns\n              in the child table to NULL. Both\n              ON DELETE SET NULL and ON\n              UPDATE SET NULL clauses are supported.\n            \n              If you specify a SET NULL action,\n              make sure that you have not declared the columns\n              in the child table as NOT\n              NULL.\n            \nRESTRICT: Rejects the delete or update\n              operation for the parent table. Specifying\n              RESTRICT (or NO\n              ACTION) is the same as omitting the ON\n              DELETE or ON UPDATE clause.\n            \nNO ACTION: A keyword from standard SQL.\n              For InnoDB, this is\n              equivalent to RESTRICT; the delete or\n              update operation for the parent table is immediately\n              rejected if there is a related foreign key value in the\n              referenced table. NDB\n              supports deferred checks, and NO ACTION\n              specifies a deferred check; when this is used, constraint\n              checks are not performed until commit time. Note that for\n              NDB tables, this causes all foreign key\n              checks made for both parent and child tables to be\n              deferred.\n            \nSET DEFAULT: This action is recognized\n              by the MySQL parser, but both\n              InnoDB and\n              NDB reject table definitions\n              containing ON DELETE SET DEFAULT or\n              ON UPDATE SET DEFAULT clauses.\n\n\n\n          For storage engines that support foreign keys, MySQL rejects\n          any INSERT or\n          UPDATE operation that attempts\n          to create a foreign key value in a child table if there is no\n          matching candidate key value in the parent table.\n        \n          For an ON DELETE or ON\n          UPDATE that is not specified, the default action is\n          always NO ACTION.\n        \n          As the default, an ON DELETE NO ACTION or\n          ON UPDATE NO ACTION clause that is\n          specified explicitly does not appear in\n          SHOW CREATE TABLE output or in\n          tables dumped with mysqldump.\n          RESTRICT, which is an equivalent\n          non-default keyword, appears in SHOW\n          CREATE TABLE output and in tables dumped with\n          mysqldump.\n        \n          For NDB tables, ON\n          UPDATE CASCADE is not supported where the reference\n          is to the parent table's primary key.\n        \n          For NDB tables, ON\n          DELETE CASCADE is not supported where the child\n          table contains one or more columns of any of the\n          TEXT or\n          BLOB types. (Bug #89511, Bug\n          #27484882)\n        \nInnoDB performs cascading operations using\n          a depth-first search algorithm on the records of the index\n          that corresponds to the foreign key constraint.\n        \n          A foreign key constraint on a stored generated column cannot\n          use CASCADE, SET NULL,\n          or SET DEFAULT as ON\n          UPDATE referential actions, nor can it use\n          SET NULL or SET DEFAULT\n          as ON DELETE referential actions.\n        \n          A foreign key constraint on the base column of a stored\n          generated column cannot use CASCADE,\n          SET NULL, or SET DEFAULT\n          as ON UPDATE or ON\n          DELETE referential actions.\n\n",
        "\n\n\n\nForeign Key Constraint Examples\n\n\n\n\n          This simple example relates parent and\n          child tables through a single-column\n          foreign key:\n        Press CTRL+C to copy CREATE TABLE parent (\n    id INT NOT NULL,\n    PRIMARY KEY (id)\n) ENGINE=INNODB;\n\nCREATE TABLE child (\n    id INT,\n    parent_id INT,\n    INDEX par_ind (parent_id),\n    FOREIGN KEY (parent_id)\n        REFERENCES parent(id)\n        ON DELETE CASCADE\n) ENGINE=INNODB;\n          This is a more complex example in which a\n          product_order table has foreign keys for\n          two other tables. One foreign key references a two-column\n          index in the product table. The other\n          references a single-column index in the\n          customer table:\n        Press CTRL+C to copy CREATE TABLE product (\n    category INT NOT NULL, id INT NOT NULL,\n    price DECIMAL,\n    PRIMARY KEY(category, id)\n)   ENGINE=INNODB;\n\nCREATE TABLE customer (\n    id INT NOT NULL,\n    PRIMARY KEY (id)\n)   ENGINE=INNODB;\n\nCREATE TABLE product_order (\n    no INT NOT NULL AUTO_INCREMENT,\n    product_category INT NOT NULL,\n    product_id INT NOT NULL,\n    customer_id INT NOT NULL,\n\n    PRIMARY KEY(no),\n    INDEX (product_category, product_id),\n    INDEX (customer_id),\n\n    FOREIGN KEY (product_category, product_id)\n      REFERENCES product(category, id)\n      ON UPDATE CASCADE ON DELETE RESTRICT,\n\n    FOREIGN KEY (customer_id)\n      REFERENCES customer(id)\n)   ENGINE=INNODB;\n",
        "\n\n\n\nAdding Foreign Key Constraints\n\n\n\n\n          You can add a foreign key constraint to an existing table\n          using the following ALTER TABLE\n          syntax:\n        Press CTRL+C to copy ALTER TABLE tbl_name\n    ADD [CONSTRAINT [symbol]] FOREIGN KEY\n    [index_name] (col_name, ...)\n    REFERENCES tbl_name (col_name,...)\n    [ON DELETE reference_option]\n    [ON UPDATE reference_option]\n          The foreign key can be self referential (referring to the same\n          table). When you add a foreign key constraint to a table using\n          ALTER TABLE, remember\n          to first create an index on the column(s) referenced by the\n          foreign key.\n\n",
        "\n\n\n\nDropping Foreign Key Constraints\n\n\n\n\n          You can drop a foreign key constraint using the following\n          ALTER TABLE syntax:\n        Press CTRL+C to copy ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol;\n          If the FOREIGN KEY clause defined a\n          CONSTRAINT name when you created the\n          constraint, you can refer to that name to drop the foreign key\n          constraint. Otherwise, a constraint name was generated\n          internally, and you must use that value. To determine the\n          foreign key constraint name, use SHOW\n          CREATE TABLE:\n        Press CTRL+C to copy mysql> SHOW CREATE TABLE child\\G\n*************************** 1. row ***************************\n       Table: child\nCreate Table: CREATE TABLE `child` (\n  `id` int DEFAULT NULL,\n  `parent_id` int DEFAULT NULL,\n  KEY `par_ind` (`parent_id`),\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`)\n  REFERENCES `parent` (`id`) ON DELETE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\nmysql> ALTER TABLE child DROP FOREIGN KEY `child_ibfk_1`;\n          Adding and dropping a foreign key in the same\n          ALTER TABLE statement is\n          supported for\n          ALTER TABLE ...\n          ALGORITHM=INPLACE. It is not supported for\n          ALTER TABLE ...\n          ALGORITHM=COPY.\n\n",
        "\n\n\n\nForeign Key Checks\n\n\n\n\n          In MySQL, InnoDB and NDB tables support checking of foreign\n          key constraints. Foreign key checking is controlled by the\n          foreign_key_checks variable,\n          which is enabled by default. Typically, you leave this\n          variable enabled during normal operation to enforce\n          referential integrity. The\n          foreign_key_checks variable\n          has the same effect on NDB tables\n          as it does for InnoDB tables.\n        \n          The foreign_key_checks\n          variable is dynamic and supports both global and session\n          scopes. For information about using system variables, see\n          Section\u00a07.1.9, \u201cUsing System Variables\u201d.\n        \n          Disabling foreign key checking is useful when:\n\n\n\n              Dropping a table that is referenced by a foreign key\n              constraint. A referenced table can only be dropped after\n              foreign_key_checks is\n              disabled. When you drop a table, constraints defined on\n              the table are also dropped.\n            \n              Reloading tables in different order than required by their\n              foreign key relationships. For example,\n              mysqldump produces correct definitions\n              of tables in the dump file, including foreign key\n              constraints for child tables. To make it easier to reload\n              dump files for tables with foreign key relationships,\n              mysqldump automatically includes a\n              statement in the dump output that disables\n              foreign_key_checks. This\n              enables you to import the tables in any order in case the\n              dump file contains tables that are not correctly ordered\n              for foreign keys. Disabling\n              foreign_key_checks also\n              speeds up the import operation by avoiding foreign key\n              checks.\n            \n              Executing LOAD DATA\n              operations, to avoid foreign key checking.\n            \n              Performing an ALTER TABLE\n              operation on a table that has a foreign key relationship.\n\n\n\n          When foreign_key_checks is\n          disabled, foreign key constraints are ignored, with the\n          following exceptions:\n\n\n\n              Recreating a table that was previously dropped returns an\n              error if the table definition does not conform to the\n              foreign key constraints that reference the table. The\n              table must have the correct column names and types. It\n              must also have indexes on the referenced keys. If these\n              requirements are not satisfied, MySQL returns Error 1005\n              that refers to errno: 150 in the error message, which\n              means that a foreign key constraint was not correctly\n              formed.\n            \n              Altering a table returns an error (errno: 150) if a\n              foreign key definition is incorrectly formed for the\n              altered table.\n            \n              Dropping an index required by a foreign key constraint.\n              The foreign key constraint must be removed before dropping\n              the index.\n            \n              Creating a foreign key constraint where a column\n              references a nonmatching column type.\n\n\n\n          Disabling foreign_key_checks\n          has these additional implications:\n\n\n\n              It is permitted to drop a database that contains tables\n              with foreign keys that are referenced by tables outside\n              the database.\n            \n              It is permitted to drop a table with foreign keys\n              referenced by other tables.\n            \n              Enabling\n              foreign_key_checks does\n              not trigger a scan of table data, which means that rows\n              added to a table while\n              foreign_key_checks is\n              disabled are not checked for consistency when\n              foreign_key_checks is\n              re-enabled.\n\n\n",
        "\n\n\n\nLocking\n\n\n\n\n          MySQL extends metadata locks, as necessary, to tables that are\n          related by a foreign key constraint. Extending metadata locks\n          prevents conflicting DML and DDL operations from executing\n          concurrently on related tables. This feature also enables\n          updates to foreign key metadata when a parent table is\n          modified. In earlier MySQL releases, foreign key metadata,\n          which is owned by the child table, could not be updated\n          safely.\n        \n          If a table is locked explicitly with LOCK\n          TABLES, any tables related by a foreign key\n          constraint are opened and locked implicitly. For foreign key\n          checks, a shared read-only lock\n          (LOCK TABLES\n          READ) is taken on related tables. For cascading\n          updates, a shared-nothing write lock\n          (LOCK TABLES\n          WRITE) is taken on related tables that are involved\n          in the operation.\n\n",
        "\n\n\n\nForeign Key Definitions and Metadata\n\n\n\n\n          To view a foreign key definition, use\n          SHOW CREATE TABLE:\n        Press CTRL+C to copy mysql> SHOW CREATE TABLE child\\G\n*************************** 1. row ***************************\n       Table: child\nCreate Table: CREATE TABLE `child` (\n  `id` int DEFAULT NULL,\n  `parent_id` int DEFAULT NULL,\n  KEY `par_ind` (`parent_id`),\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`)\n  REFERENCES `parent` (`id`) ON DELETE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n          You can obtain information about foreign keys from the\n          Information Schema\n          KEY_COLUMN_USAGE table. An\n          example of a query against this table is shown here:\n        Press CTRL+C to copy mysql> SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME\n       FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n       WHERE REFERENCED_TABLE_SCHEMA IS NOT NULL;\n+--------------+------------+-------------+-----------------+\n| TABLE_SCHEMA | TABLE_NAME | COLUMN_NAME | CONSTRAINT_NAME |\n+--------------+------------+-------------+-----------------+\n| test         | child      | parent_id   | child_ibfk_1    |\n+--------------+------------+-------------+-----------------+\n          You can obtain information specific to\n          InnoDB foreign keys from the\n          INNODB_FOREIGN and\n          INNODB_FOREIGN_COLS tables.\n          Example queries are show here:\n        Press CTRL+C to copy mysql> SELECT * FROM INFORMATION_SCHEMA.INNODB_FOREIGN \\G\n*************************** 1. row ***************************\n      ID: test/child_ibfk_1\nFOR_NAME: test/child\nREF_NAME: test/parent\n  N_COLS: 1\n    TYPE: 1\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.INNODB_FOREIGN_COLS \\G\n*************************** 1. row ***************************\n          ID: test/child_ibfk_1\nFOR_COL_NAME: parent_id\nREF_COL_NAME: id\n         POS: 0\n",
        "\n\n\n\nForeign Key Errors\n\n\n\n\n          In the event of a foreign key error involving\n          InnoDB tables (usually Error 150 in the\n          MySQL Server), information about the latest foreign key error\n          can be obtained by checking\n          SHOW ENGINE\n          INNODB STATUS output.\n        Press CTRL+C to copy mysql> SHOW ENGINE INNODB STATUS\\G\n...\n------------------------\nLATEST FOREIGN KEY ERROR\n------------------------\n2018-04-12 14:57:24 0x7f97a9c91700 Transaction:\nTRANSACTION 7717, ACTIVE 0 sec inserting\nmysql tables in use 1, locked 1\n4 lock struct(s), heap size 1136, 3 row lock(s), undo log entries 3\nMySQL thread id 8, OS thread handle 140289365317376, query id 14 localhost root update\nINSERT INTO child VALUES (NULL, 1), (NULL, 2), (NULL, 3), (NULL, 4), (NULL, 5), (NULL, 6)\nForeign key constraint fails for table `test`.`child`:\n,\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`) REFERENCES `parent` (`id`) ON DELETE\n  CASCADE ON UPDATE CASCADE\nTrying to add in child table, in index par_ind tuple:\nDATA TUPLE: 2 fields;\n 0: len 4; hex 80000003; asc     ;;\n 1: len 4; hex 80000003; asc     ;;\n\nBut in parent table `test`.`parent`, in index PRIMARY,\nthe closest match we can find is record:\nPHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 4; hex 80000004; asc     ;;\n 1: len 6; hex 000000001e19; asc       ;;\n 2: len 7; hex 81000001110137; asc       7;;\n...\n\n\nWarning\n\n\n            If a user has table-level privileges for all parent tables,\n            ER_NO_REFERENCED_ROW_2 and\n            ER_ROW_IS_REFERENCED_2 error\n            messages for foreign key operations expose information about\n            parent tables. If a user does not have table-level\n            privileges for all parent tables, more generic error\n            messages are displayed instead\n            (ER_NO_REFERENCED_ROW and\n            ER_ROW_IS_REFERENCED).\n          \n            An exception is that, for stored programs defined to execute\n            with DEFINER privileges, the user against\n            which privileges are assessed is the user in the program\n            DEFINER clause, not the invoking user. If\n            that user has table-level parent table privileges, parent\n            table information is still displayed. In this case, it is\n            the responsibility of the stored program creator to hide the\n            information by including appropriate condition handlers.\n\n\n"
    ],
    "Examples": [
        "CREATE TABLE parent (\n    id INT NOT NULL,\n    PRIMARY KEY (id)\n) ENGINE=INNODB;\n\nCREATE TABLE child (\n    id INT,\n    parent_id INT,\n    INDEX par_ind (parent_id),\n    FOREIGN KEY (parent_id)\n        REFERENCES parent(id)\n        ON DELETE CASCADE\n) ENGINE=INNODB;",
        "CREATE TABLE product (\n    category INT NOT NULL, id INT NOT NULL,\n    price DECIMAL,\n    PRIMARY KEY(category, id)\n)   ENGINE=INNODB;\n\nCREATE TABLE customer (\n    id INT NOT NULL,\n    PRIMARY KEY (id)\n)   ENGINE=INNODB;\n\nCREATE TABLE product_order (\n    no INT NOT NULL AUTO_INCREMENT,\n    product_category INT NOT NULL,\n    product_id INT NOT NULL,\n    customer_id INT NOT NULL,\n\n    PRIMARY KEY(no),\n    INDEX (product_category, product_id),\n    INDEX (customer_id),\n\n    FOREIGN KEY (product_category, product_id)\n      REFERENCES product(category, id)\n      ON UPDATE CASCADE ON DELETE RESTRICT,\n\n    FOREIGN KEY (customer_id)\n      REFERENCES customer(id)\n)   ENGINE=INNODB;",
        "ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol;",
        "mysql> SHOW CREATE TABLE child\\G\n*************************** 1. row ***************************\n       Table: child\nCreate Table: CREATE TABLE `child` (\n  `id` int DEFAULT NULL,\n  `parent_id` int DEFAULT NULL,\n  KEY `par_ind` (`parent_id`),\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`)\n  REFERENCES `parent` (`id`) ON DELETE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\nmysql> ALTER TABLE child DROP FOREIGN KEY `child_ibfk_1`;",
        "mysql> SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME\n       FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n       WHERE REFERENCED_TABLE_SCHEMA IS NOT NULL;\n+--------------+------------+-------------+-----------------+\n| TABLE_SCHEMA | TABLE_NAME | COLUMN_NAME | CONSTRAINT_NAME |\n+--------------+------------+-------------+-----------------+\n| test         | child      | parent_id   | child_ibfk_1    |\n+--------------+------------+-------------+-----------------+",
        "mysql> SHOW ENGINE INNODB STATUS\\G\n...\n------------------------\nLATEST FOREIGN KEY ERROR\n------------------------\n2018-04-12 14:57:24 0x7f97a9c91700 Transaction:\nTRANSACTION 7717, ACTIVE 0 sec inserting\nmysql tables in use 1, locked 1\n4 lock struct(s), heap size 1136, 3 row lock(s), undo log entries 3\nMySQL thread id 8, OS thread handle 140289365317376, query id 14 localhost root update\nINSERT INTO child VALUES (NULL, 1), (NULL, 2), (NULL, 3), (NULL, 4), (NULL, 5), (NULL, 6)\nForeign key constraint fails for table `test`.`child`:\n,\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`) REFERENCES `parent` (`id`) ON DELETE\n  CASCADE ON UPDATE CASCADE\nTrying to add in child table, in index par_ind tuple:\nDATA TUPLE: 2 fields;\n 0: len 4; hex 80000003; asc     ;;\n 1: len 4; hex 80000003; asc     ;;\n\nBut in parent table `test`.`parent`, in index PRIMARY,\nthe closest match we can find is record:\nPHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 4; hex 80000004; asc     ;;\n 1: len 6; hex 000000001e19; asc       ;;\n 2: len 7; hex 81000001110137; asc       7;;\n..."
    ],
    "Category": [
        "Data Definition Statements"
    ]
}