{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/checksum-table.html"
    ],
    "Title": [
        "15.7.3.3 CHECKSUM TABLE Statement"
    ],
    "Feature": [
        "CHECKSUM TABLE tbl_name [, tbl_name] ... [QUICK | EXTENDED]"
    ],
    "Description": [
        "\nCHECKSUM TABLE reports a\n        checksum for the contents\n        of a table. You can use this statement to verify that the\n        contents are the same before and after a backup, rollback, or\n        other operation that is intended to put the data back to a known\n        state.\n      ",
        "\n        This statement requires the\n        SELECT privilege for the table.\n      ",
        "\n        This statement is not supported for views. If you run\n        CHECKSUM TABLE against a view,\n        the Checksum value is always\n        NULL, and a warning is returned.\n      ",
        "\n        For a nonexistent table, CHECKSUM\n        TABLE returns NULL and generates a\n        warning.\n      ",
        "\n        During the checksum operation, the table is locked with a read\n        lock for InnoDB and\n        MyISAM.\n",
        "\n\n\n\nPerformance Considerations\n\n\n\n\n          By default, the entire table is read row by row and the\n          checksum is calculated. For large tables, this could take a\n          long time, thus you would only perform this operation\n          occasionally. This row-by-row calculation is what you get with\n          the EXTENDED clause, with\n          InnoDB and all other storage engines other\n          than MyISAM, and with\n          MyISAM tables not created with the\n          CHECKSUM=1 clause.\n        \n          For MyISAM tables created with the\n          CHECKSUM=1 clause,\n          CHECKSUM TABLE or\n          CHECKSUM TABLE\n          ... QUICK returns the \u201clive\u201d table\n          checksum that can be returned very fast. If the table does not\n          meet all these conditions, the QUICK method\n          returns NULL. The QUICK\n          method is not supported with InnoDB tables.\n          See Section\u00a015.1.20, \u201cCREATE TABLE Statement\u201d for the syntax of the\n          CHECKSUM clause.\n        \n          The checksum value depends on the table row format. If the row\n          format changes, the checksum also changes. For example, the\n          storage format for temporal types such as\n          TIME,\n          DATETIME, and\n          TIMESTAMP changed in MySQL 5.6\n          prior to MySQL 5.6.5, so if a 5.5 table is upgraded to MySQL\n          5.6, the checksum value may change.\n\n\n\nImportant\n\n\n            If the checksums for two tables are different, then it is\n            almost certain that the tables are different in some way.\n            However, because the hashing function used by\n            CHECKSUM TABLE is not\n            guaranteed to be collision-free, there is a slight chance\n            that two tables which are not identical can produce the same\n            checksum.\n\n\n"
    ],
    "Examples": [],
    "Category": [
        "Database Administration Statements"
    ]
}