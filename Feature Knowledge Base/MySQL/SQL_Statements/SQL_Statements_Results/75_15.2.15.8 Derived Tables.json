{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/derived-tables.html"
    ],
    "Title": [
        "15.2.15.8 Derived Tables"
    ],
    "Feature": [
        "SELECT ... FROM (subquery) [AS] tbl_name ...",
        "SELECT * FROM JSON_TABLE(arg_list) [AS] tbl_name ...",
        "SELECT ... FROM (subquery) [AS] tbl_name (col_list) ..."
    ],
    "Description": [
        "\n        This section discusses general characteristics of derived\n        tables. For information about lateral derived tables preceded by\n        the LATERAL keyword, see\n        Section\u00a015.2.15.9, \u201cLateral Derived Tables\u201d.\n      ",
        "\n        A derived table is an expression that generates a table within\n        the scope of a query FROM clause. For\n        example, a subquery in a SELECT\n        statement FROM clause is a derived table:\n      ",
        "\n        The JSON_TABLE() function\n        generates a table and provides another way to create a derived\n        table:\n      ",
        "\n        The [AS] tbl_name\n        clause is mandatory because every table in a\n        FROM clause must have a name. Any columns in\n        the derived table must have unique names. Alternatively,\n        tbl_name may be followed by a\n        parenthesized list of names for the derived table columns:\n      ",
        "\n        The number of column names must be the same as the number of\n        table columns.\n      ",
        "\n        For the sake of illustration, assume that you have this table:\n      ",
        "Press CTRL+C to copy CREATE TABLE t1 (s1 INT, s2 CHAR(5), s3 FLOAT);",
        "\n        Here is how to use a subquery in the FROM\n        clause, using the example table:\n      ",
        "Press CTRL+C to copy INSERT INTO t1 VALUES (1,'1',1.0);\nINSERT INTO t1 VALUES (2,'2',2.0);\nSELECT sb1,sb2,sb3\n  FROM (SELECT s1 AS sb1, s2 AS sb2, s3*2 AS sb3 FROM t1) AS sb\n  WHERE sb1 > 1;",
        "\n        Result:\n      ",
        "\n        Here is another example: Suppose that you want to know the\n        average of a set of sums for a grouped table. This does not\n        work:\n      ",
        "Press CTRL+C to copy SELECT AVG(SUM(column1)) FROM t1 GROUP BY column1;",
        "\n        However, this query provides the desired information:\n      ",
        "Press CTRL+C to copy SELECT AVG(sum_column1)\n  FROM (SELECT SUM(column1) AS sum_column1\n        FROM t1 GROUP BY column1) AS t1;",
        "\n        Notice that the column name used within the subquery\n        (sum_column1) is recognized in the outer\n        query.\n      ",
        "\n        The column names for a derived table come from its select list:\n      ",
        "Press CTRL+C to copy mysql> SELECT * FROM (SELECT 1, 2, 3, 4) AS dt;\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+",
        "\n        To provide column names explicitly, follow the derived table\n        name with a parenthesized list of column names:\n      ",
        "Press CTRL+C to copy mysql> SELECT * FROM (SELECT 1, 2, 3, 4) AS dt (a, b, c, d);\n+---+---+---+---+\n| a | b | c | d |\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+",
        "\n        A derived table can return a scalar, column, row, or table.\n      ",
        "\n        Derived tables are subject to these restrictions:\n",
        "\n\n            A derived table cannot contain references to other tables of\n            the same SELECT (use a\n            LATERAL derived table for that; see\n            Section\u00a015.2.15.9, \u201cLateral Derived Tables\u201d).\n\n",
        "\n        The optimizer determines information about derived tables in\n        such a way that EXPLAIN does not\n        need to materialize them. See\n        Section\u00a010.2.2.4, \u201cOptimizing Derived Tables, View References, and Common Table Expressions\n          with Merging or Materialization\u201d.\n      ",
        "\n        It is possible under certain circumstances that using\n        EXPLAIN\n        SELECT modifies table data. This can occur if the\n        outer query accesses any tables and an inner query invokes a\n        stored function that changes one or more rows of a table.\n        Suppose that there are two tables t1 and\n        t2 in database d1, and a\n        stored function f1 that modifies\n        t2, created as shown here:\n      ",
        "Press CTRL+C to copy CREATE DATABASE d1;\nUSE d1;\nCREATE TABLE t1 (c1 INT);\nCREATE TABLE t2 (c1 INT);\nCREATE FUNCTION f1(p1 INT) RETURNS INT\n  BEGIN\n    INSERT INTO t2 VALUES (p1);\n    RETURN p1;\n  END;",
        "\n        Referencing the function directly in an\n        EXPLAIN\n        SELECT has no effect on t2, as\n        shown here:\n      ",
        "Press CTRL+C to copy mysql> SELECT * FROM t2;\nEmpty set (0.02 sec)\n\nmysql> EXPLAIN SELECT f1(5)\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: NULL\n   partitions: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n1 row in set (0.01 sec)\n\nmysql> SELECT * FROM t2;\nEmpty set (0.01 sec)",
        "\n        This is because the SELECT\n        statement did not reference any tables, as can be seen in the\n        table and Extra columns of\n        the output. This is also true of the following nested\n        SELECT:\n      ",
        "Press CTRL+C to copy mysql> EXPLAIN SELECT NOW() AS a1, (SELECT f1(5)) AS a2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+-------+------+------------------------------------------+\n| Level | Code | Message                                  |\n+-------+------+------------------------------------------+\n| Note  | 1249 | Select 2 was reduced during optimization |\n+-------+------+------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT * FROM t2;\nEmpty set (0.00 sec)",
        "\n        However, if the outer SELECT\n        references any tables, the optimizer executes the statement in\n        the subquery as well, with the result that t2\n        is modified:\n      ",
        "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t1 AS a1, (SELECT f1(5)) AS a2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: <derived2>\n   partitions: NULL\n         type: system\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n*************************** 2. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: a1\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n*************************** 3. row ***************************\n           id: 2\n  select_type: DERIVED\n        table: NULL\n   partitions: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n3 rows in set (0.00 sec)\n\nmysql> SELECT * FROM t2;\n+------+\n| c1   |\n+------+\n|    5 |\n+------+\n1 row in set (0.00 sec)",
        "\n        The derived table optimization can also be employed with many\n        correlated (scalar) subqueries. For more information and\n        examples, see Section\u00a015.2.15.7, \u201cCorrelated Subqueries\u201d.\n"
    ],
    "Examples": [
        "CREATE TABLE t1 (s1 INT, s2 CHAR(5), s3 FLOAT);",
        "INSERT INTO t1 VALUES (1,'1',1.0);\nINSERT INTO t1 VALUES (2,'2',2.0);\nSELECT sb1,sb2,sb3\n  FROM (SELECT s1 AS sb1, s2 AS sb2, s3*2 AS sb3 FROM t1) AS sb\n  WHERE sb1 > 1;",
        "SELECT AVG(SUM(column1)) FROM t1 GROUP BY column1;",
        "SELECT AVG(sum_column1)\n  FROM (SELECT SUM(column1) AS sum_column1\n        FROM t1 GROUP BY column1) AS t1;",
        "mysql> SELECT * FROM (SELECT 1, 2, 3, 4) AS dt;\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+",
        "mysql> SELECT * FROM (SELECT 1, 2, 3, 4) AS dt (a, b, c, d);\n+---+---+---+---+\n| a | b | c | d |\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+",
        "CREATE DATABASE d1;\nUSE d1;\nCREATE TABLE t1 (c1 INT);\nCREATE TABLE t2 (c1 INT);\nCREATE FUNCTION f1(p1 INT) RETURNS INT\n  BEGIN\n    INSERT INTO t2 VALUES (p1);\n    RETURN p1;\n  END;",
        "mysql> SELECT * FROM t2;\nEmpty set (0.02 sec)\n\nmysql> EXPLAIN SELECT f1(5)\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: NULL\n   partitions: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n1 row in set (0.01 sec)\n\nmysql> SELECT * FROM t2;\nEmpty set (0.01 sec)",
        "mysql> EXPLAIN SELECT NOW() AS a1, (SELECT f1(5)) AS a2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+-------+------+------------------------------------------+\n| Level | Code | Message                                  |\n+-------+------+------------------------------------------+\n| Note  | 1249 | Select 2 was reduced during optimization |\n+-------+------+------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT * FROM t2;\nEmpty set (0.00 sec)",
        "mysql> EXPLAIN SELECT * FROM t1 AS a1, (SELECT f1(5)) AS a2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: <derived2>\n   partitions: NULL\n         type: system\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n*************************** 2. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: a1\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n*************************** 3. row ***************************\n           id: 2\n  select_type: DERIVED\n        table: NULL\n   partitions: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n3 rows in set (0.00 sec)\n\nmysql> SELECT * FROM t2;\n+------+\n| c1   |\n+------+\n|    5 |\n+------+\n1 row in set (0.00 sec)"
    ],
    "Category": [
        "Data Manipulation Statements"
    ]
}