{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/install-plugin.html"
    ],
    "Title": [
        "15.7.4.4 INSTALL PLUGIN Statement"
    ],
    "Feature": [
        "INSTALL PLUGIN plugin_name SONAME 'shared_library_name'"
    ],
    "Description": [
        "\n        This statement installs a server plugin. It requires the\n        INSERT privilege for the\n        mysql.plugin system table because it adds a\n        row to that table to register the plugin.\n      ",
        "\nplugin_name is the name of the plugin\n        as defined in the plugin descriptor structure contained in the\n        library file (see Plugin Data Structures).\n        Plugin names are not case-sensitive. For maximal compatibility,\n        plugin names should be limited to ASCII letters, digits, and\n        underscore because they are used in C source files, shell\n        command lines, M4 and Bourne shell scripts, and SQL\n        environments.\n      ",
        "\nshared_library_name is the name of\n        the shared library that contains the plugin code. The name\n        includes the file name extension (for example,\n        libmyplugin.so,\n        libmyplugin.dll, or\n        libmyplugin.dylib).\n      ",
        "\n        The shared library must be located in the plugin directory (the\n        directory named by the\n        plugin_dir system variable).\n        The library must be in the plugin directory itself, not in a\n        subdirectory. By default,\n        plugin_dir is the\n        plugin directory under the directory named\n        by the pkglibdir configuration variable, but\n        it can be changed by setting the value of\n        plugin_dir at server startup.\n        For example, set its value in a my.cnf\n        file:\n      ",
        "\n        If the value of plugin_dir is a\n        relative path name, it is taken to be relative to the MySQL base\n        directory (the value of the\n        basedir system variable).\n      ",
        "\nINSTALL PLUGIN loads and\n        initializes the plugin code to make the plugin available for\n        use. A plugin is initialized by executing its initialization\n        function, which handles any setup that the plugin must perform\n        before it can be used. When the server shuts down, it executes\n        the deinitialization function for each plugin that is loaded so\n        that the plugin has a chance to perform any final cleanup.\n      ",
        "\nINSTALL PLUGIN also registers the\n        plugin by adding a line that indicates the plugin name and\n        library file name to the mysql.plugin system\n        table. During the normal startup sequence, the server loads and\n        initializes plugins registered in\n        mysql.plugin. This means that a plugin is\n        installed with INSTALL PLUGIN\n        only once, not every time the server starts. If the server is\n        started with the\n        --skip-grant-tables option,\n        plugins registered in the mysql.plugin table\n        are not loaded and are unavailable.\n      ",
        "\n        A plugin library can contain multiple plugins. For each of them\n        to be installed, use a separate INSTALL\n        PLUGIN statement. Each statement names a different\n        plugin, but all of them specify the same library name.\n      ",
        "\nINSTALL PLUGIN causes the server\n        to read option (my.cnf) files just as\n        during server startup. This enables the plugin to pick up any\n        relevant options from those files. It is possible to add plugin\n        options to an option file even before loading a plugin (if the\n        loose prefix is used). It is also possible to\n        uninstall a plugin, edit my.cnf, and\n        install the plugin again. Restarting the plugin this way enables\n        it to the new option values without a server restart.\n      ",
        "\n        For options that control individual plugin loading at server\n        startup, see Section\u00a07.6.1, \u201cInstalling and Uninstalling Plugins\u201d. If you need to\n        load plugins for a single server startup when the\n        --skip-grant-tables option is\n        given (which tells the server not to read system tables), use\n        the --plugin-load option. See\n        Section\u00a07.1.7, \u201cServer Command Options\u201d.\n      ",
        "\n        To remove a plugin, use the UNINSTALL\n        PLUGIN statement.\n      ",
        "\n        For additional information about plugin loading, see\n        Section\u00a07.6.1, \u201cInstalling and Uninstalling Plugins\u201d.\n      ",
        "\n        To see what plugins are installed, use the\n        SHOW PLUGINS statement or query\n        the INFORMATION_SCHEMA the\n        PLUGINS table.\n      ",
        "\n        If you recompile a plugin library and need to reinstall it, you\n        can use either of the following methods:\n",
        "\n\n            Use UNINSTALL PLUGIN to\n            uninstall all plugins in the library, install the new plugin\n            library file in the plugin directory, and then use\n            INSTALL PLUGIN to install all\n            plugins in the library. This procedure has the advantage\n            that it can be used without stopping the server. However, if\n            the plugin library contains many plugins, you must issue\n            many INSTALL PLUGIN and\n            UNINSTALL PLUGIN statements.\n          \n            Stop the server, install the new plugin library file in the\n            plugin directory, and restart the server.\n\n"
    ],
    "Examples": [],
    "Category": [
        "Database Administration Statements"
    ]
}