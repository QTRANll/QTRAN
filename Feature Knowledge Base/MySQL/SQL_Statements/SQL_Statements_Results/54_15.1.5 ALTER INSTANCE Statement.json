{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/alter-instance.html"
    ],
    "Title": [
        "15.1.5 ALTER INSTANCE Statement"
    ],
    "Feature": [
        "ALTER INSTANCE instance_action\n\ninstance_action: {\n  | {ENABLE|DISABLE} INNODB REDO_LOG\n  | ROTATE INNODB MASTER KEY\n  | ROTATE BINLOG MASTER KEY\n  | RELOAD TLS\n      [FOR CHANNEL {mysql_main | mysql_admin}]\n      [NO ROLLBACK ON ERROR]\n  | RELOAD KEYRING\n}"
    ],
    "Description": [
        "\nALTER INSTANCE defines actions applicable to a\n      MySQL server instance. The statement supports these actions:\n",
        "\n\nALTER INSTANCE {ENABLE | DISABLE} INNODB\n          REDO_LOG\n\n          This action enables or disables InnoDB redo\n          logging. Redo logging is enabled by default. This feature is\n          intended only for loading data into a new MySQL instance. The\n          statement is not written to the binary log.\n\n\n\nWarning\n\n\nDo not disable redo logging on a production\n            system. While it is permitted to shut down and\n            restart the server while redo logging is disabled, an\n            unexpected server stoppage while redo logging is disabled\n            can cause data loss and instance corruption.\n\n\n\n          An ALTER\n          INSTANCE [ENABLE|DISABLE] INNODB REDO_LOG operation\n          requires an exclusive backup lock, which prevents other\n          ALTER INSTANCE operations from\n          executing concurrently. Other ALTER\n          INSTANCE operations must wait for the lock to be\n          released before executing.\n        \n          For more information, see\n          Disabling Redo Logging.\n        \nALTER INSTANCE ROTATE INNODB MASTER KEY\n\n          This action rotates the master encryption key used for\n          InnoDB tablespace encryption. Key rotation\n          requires the\n          ENCRYPTION_KEY_ADMIN or\n          SUPER privilege. To perform\n          this action, a keyring plugin must be installed and\n          configured. For instructions, see Section\u00a08.4.4, \u201cThe MySQL Keyring\u201d.\n        \nALTER INSTANCE ROTATE INNODB MASTER KEY\n          supports concurrent DML. However, it cannot be run\n          concurrently with\n          CREATE TABLE ...\n          ENCRYPTION or\n          ALTER TABLE ...\n          ENCRYPTION operations, and locks are taken to\n          prevent conflicts that could arise from concurrent execution\n          of these statements. If one of the conflicting statements is\n          running, it must complete before another can proceed.\n        \nALTER INSTANCE ROTATE INNODB MASTER KEY\n          statements are written to the binary log so that they can be\n          executed on replicated servers.\n        \n          For additional ALTER INSTANCE ROTATE INNODB MASTER\n          KEY usage information, see\n          Section\u00a017.13, \u201cInnoDB Data-at-Rest Encryption\u201d.\n        \nALTER INSTANCE ROTATE BINLOG MASTER KEY\n\n          This action rotates the binary log master key used for binary\n          log encryption. Key rotation for the binary log master key\n          requires the\n          BINLOG_ENCRYPTION_ADMIN or\n          SUPER privilege. The statement\n          cannot be used if the\n          binlog_encryption system\n          variable is set to OFF. To perform this\n          action, a keyring plugin must be installed and configured. For\n          instructions, see Section\u00a08.4.4, \u201cThe MySQL Keyring\u201d.\n        \nALTER INSTANCE ROTATE BINLOG MASTER KEY\n          actions are not written to the binary log and are not executed\n          on replicas. Binary log master key rotation can therefore be\n          carried out in replication environments including a mix of\n          MySQL versions. To schedule regular rotation of the binary log\n          master key on all applicable source and replica servers, you\n          can enable the MySQL Event Scheduler on each server and issue\n          the ALTER INSTANCE ROTATE BINLOG MASTER KEY\n          statement using a CREATE EVENT\n          statement. If you rotate the binary log master key because you\n          suspect that the current or any of the previous binary log\n          master keys might have been compromised, issue the statement\n          on every applicable source and replica server, which enables\n          you to verify immediate compliance.\n        \n          For additional ALTER INSTANCE ROTATE BINLOG MASTER\n          KEY usage information, including what to do if the\n          process does not complete correctly or is interrupted by an\n          unexpected server halt, see\n          Section\u00a019.3.2, \u201cEncrypting Binary Log Files and Relay Log Files\u201d.\n        \nALTER INSTANCE RELOAD TLS\n\n          This action reconfigures a TLS context from the current values\n          of the system variables that define the context. It also\n          updates the status variables that reflect the active context\n          values. This action requires the\n          CONNECTION_ADMIN privilege. For\n          additional information about reconfiguring the TLS context,\n          including which system and status variables are\n          context-related, see\n          Server-Side Runtime Configuration and Monitoring for Encrypted\n        Connections.\n        \n          By default, the statement reloads the TLS context for the main\n          connection interface. If the FOR CHANNEL\n          clause is given, the statement reloads the TLS context for the\n          named channel: mysql_main for the main\n          connection interface, mysql_admin for the\n          administrative connection interface. For information about the\n          different interfaces, see\n          Section\u00a07.1.12.1, \u201cConnection Interfaces\u201d. The updated TLS\n          context properties are exposed in the Performance Schema\n          tls_channel_status table. See\n          Section\u00a029.12.22.9, \u201cThe tls_channel_status Table\u201d.\n        \n          Updating the TLS context for the main interface may also\n          affect the administrative interface because unless some\n          nondefault TLS value is configured for that interface, it uses\n          the same TLS context as the main interface.\n\n\n\nNote\n\n\n            When you reload the TLS context, OpenSSL reloads the file\n            containing the CRL (certificate revocation list) as part of\n            the process. If the CRL file is large, the server allocates\n            a large chunk of memory (ten times the file size), which is\n            doubled while the new instance is being loaded and the old\n            one has not yet been released. The process resident memory\n            is not immediately reduced after a large allocation is\n            freed, so if you issue the ALTER INSTANCE RELOAD\n            TLS statement repeatedly with a large CRL file,\n            the process resident memory usage may grow as a result of\n            this.\n\n\n\n          By default, the RELOAD TLS action rolls\n          back with an error and has no effect if the configuration\n          values do not permit creation of the new TLS context. The\n          previous context values continue to be used for new\n          connections. If the optional NO ROLLBACK ON\n          ERROR clause is given and the new context cannot be\n          created, rollback does not occur. Instead, a warning is\n          generated and encryption is disabled for new connections on\n          the interface to which the statement applies.\n        \nALTER INSTANCE RELOAD TLS statements are\n          not written to the binary log (and thus are not replicated).\n          TLS configuration is local and depends on local files not\n          necessarily present on all servers involved.\n        \nALTER INSTANCE RELOAD KEYRING\n\n          If a keyring component is installed, this action tells the\n          component to re-read its configuration file and reinitialize\n          any keyring in-memory data. If you modify the component\n          configuration at runtime, the new configuration does not take\n          effect until you perform this action. Keyring reloading\n          requires the\n          ENCRYPTION_KEY_ADMIN privilege.\n        \n          This action enables reconfiguring only the currently installed\n          keyring component. It does not enable changing which component\n          is installed. For example, if you change the configuration for\n          the installed keyring component, ALTER\n          INSTANCE RELOAD KEYRING causes the new configuration\n          to take effect. On the other hand, if you change the keyring\n          component named in the server manifest file,\n          ALTER INSTANCE RELOAD KEYRING\n          has no effect and the current component remains installed.\n        \nALTER INSTANCE RELOAD KEYRING statements\n          are not written to the binary log (and thus are not\n          replicated).\n\n"
    ],
    "Examples": [],
    "Category": [
        "Data Definition Statements"
    ]
}