{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/comparisons-using-subqueries.html"
    ],
    "Title": [
        "15.2.15.2 Comparisons Using Subqueries"
    ],
    "Feature": [
        "non_subquery_operand comparison_operator (subquery)",
        "=  >  <  >=  <=  <>  !=  <=>",
        "... WHERE 'a' = (SELECT column1 FROM t1)",
        "non_subquery_operand LIKE (subquery)"
    ],
    "Description": [
        "\n        The most common use of a subquery is in the form:\n      ",
        "\n        Where comparison_operator is one of\n        these operators:\n      ",
        "\n        For example:\n      ",
        "\n        MySQL also permits this construct:\n      ",
        "\n        At one time the only legal place for a subquery was on the right\n        side of a comparison, and you might still find some old DBMSs\n        that insist on this.\n      ",
        "\n        Here is an example of a common-form subquery comparison that you\n        cannot do with a join. It finds all the rows in table\n        t1 for which the column1\n        value is equal to a maximum value in table\n        t2:\n      ",
        "Press CTRL+C to copy SELECT * FROM t1\n  WHERE column1 = (SELECT MAX(column2) FROM t2);",
        "\n        Here is another example, which again is impossible with a join\n        because it involves aggregating for one of the tables. It finds\n        all rows in table t1 containing a value that\n        occurs twice in a given column:\n      ",
        "Press CTRL+C to copy SELECT * FROM t1 AS t\n  WHERE 2 = (SELECT COUNT(*) FROM t1 WHERE t1.id = t.id);",
        "\n        For a comparison of the subquery to a scalar, the subquery must\n        return a scalar. For a comparison of the subquery to a row\n        constructor, the subquery must be a row subquery that returns a\n        row with the same number of values as the row constructor. See\n        Section\u00a015.2.15.5, \u201cRow Subqueries\u201d.\n"
    ],
    "Examples": [
        "SELECT * FROM t1\n  WHERE column1 = (SELECT MAX(column2) FROM t2);",
        "SELECT * FROM t1 AS t\n  WHERE 2 = (SELECT COUNT(*) FROM t1 WHERE t1.id = t.id);"
    ],
    "Category": [
        "Data Manipulation Statements"
    ]
}