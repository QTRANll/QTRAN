{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/show-columns.html"
    ],
    "Title": [
        "15.7.7.6 SHOW COLUMNS Statement"
    ],
    "Feature": [
        "SHOW [EXTENDED] [FULL] {COLUMNS | FIELDS}\n    {FROM | IN} tbl_name\n    [{FROM | IN} db_name]\n    [LIKE 'pattern' | WHERE expr]"
    ],
    "Description": [
        "\nSHOW COLUMNS displays information\n        about the columns in a given table. It also works for views.\n        SHOW COLUMNS displays information\n        only for those columns for which you have some privilege.\n      ",
        "Press CTRL+C to copy mysql> SHOW COLUMNS FROM City;\n+-------------+----------+------+-----+---------+----------------+\n| Field       | Type     | Null | Key | Default | Extra          |\n+-------------+----------+------+-----+---------+----------------+\n| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name        | char(35) | NO   |     |         |                |\n| CountryCode | char(3)  | NO   | MUL |         |                |\n| District    | char(20) | NO   |     |         |                |\n| Population  | int(11)  | NO   |     | 0       |                |\n+-------------+----------+------+-----+---------+----------------+",
        "\n        An alternative to tbl_name\n        FROM db_name syntax is\n        db_name.tbl_name. These two\n        statements are equivalent:\n      ",
        "Press CTRL+C to copy SHOW COLUMNS FROM mytable FROM mydb;\nSHOW COLUMNS FROM mydb.mytable;",
        "\n        The optional EXTENDED keyword causes the\n        output to include information about hidden columns that MySQL\n        uses internally and are not accessible by users.\n      ",
        "\n        The optional FULL keyword causes the output\n        to include the column collation and comments, as well as the\n        privileges you have for each column.\n      ",
        "\n        The LIKE clause, if present,\n        indicates which column names to match. The\n        WHERE clause can be given to select rows\n        using more general conditions, as discussed in\n        Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ",
        "\n        The data types may differ from what you expect them to be based\n        on a CREATE TABLE statement\n        because MySQL sometimes changes data types when you create or\n        alter a table. The conditions under which this occurs are\n        described in Section\u00a015.1.20.7, \u201cSilent Column Specification Changes\u201d.\n      ",
        "\nSHOW COLUMNS displays the\n        following values for each table column:\n",
        "\n\nField\n\n            The name of the column.\n          \nType\n\n            The column data type.\n          \nCollation\n\n            The collation for nonbinary string columns, or\n            NULL for other columns. This value is\n            displayed only if you use the FULL\n            keyword.\n          \nNull\n\n            The column nullability. The value is YES\n            if NULL values can be stored in the\n            column, NO if not.\n          \nKey\n\n            Whether the column is indexed:\n\n\n\n                If Key is empty, the column either is\n                not indexed or is indexed only as a secondary column in\n                a multiple-column, nonunique index.\n              \n                If Key is PRI, the\n                column is a PRIMARY KEY or is one of\n                the columns in a multiple-column PRIMARY\n                KEY.\n              \n                If Key is UNI, the\n                column is the first column of a\n                UNIQUE index. (A\n                UNIQUE index permits multiple\n                NULL values, but you can tell whether\n                the column permits NULL by checking\n                the Null field.)\n              \n                If Key is MUL, the\n                column is the first column of a nonunique index in which\n                multiple occurrences of a given value are permitted\n                within the column.\n\n\n\n            If more than one of the Key values\n            applies to a given column of a table, Key\n            displays the one with the highest priority, in the order\n            PRI, UNI,\n            MUL.\n          \n            A UNIQUE index may be displayed as\n            PRI if it cannot contain\n            NULL values and there is no\n            PRIMARY KEY in the table. A\n            UNIQUE index may display as\n            MUL if several columns form a composite\n            UNIQUE index; although the combination of\n            the columns is unique, each column can still hold multiple\n            occurrences of a given value.\n          \nDefault\n\n            The default value for the column. This is\n            NULL if the column has an explicit\n            default of NULL, or if the column\n            definition includes no DEFAULT clause.\n          \nExtra\n\n            Any additional information that is available about a given\n            column. The value is nonempty in these cases:\n\n\n\nauto_increment for columns that have\n                the AUTO_INCREMENT attribute.\n              \non update CURRENT_TIMESTAMP for\n                TIMESTAMP or\n                DATETIME columns that\n                have the ON UPDATE CURRENT_TIMESTAMP\n                attribute.\n              \nVIRTUAL GENERATED or STORED\n                GENERATED for generated columns.\n              \nDEFAULT_GENERATED for columns that\n                have an expression default value.\n\n\n\nPrivileges\n\n            The privileges you have for the column. This value is\n            displayed only if you use the FULL\n            keyword.\n          \nComment\n\n            Any comment included in the column definition. This value is\n            displayed only if you use the FULL\n            keyword.\n\n",
        "\n        Table column information is also available from the\n        INFORMATION_SCHEMA\nCOLUMNS table. See\n        Section\u00a028.3.8, \u201cThe INFORMATION_SCHEMA COLUMNS Table\u201d. The extended\n        information about hidden columns is available only using\n        SHOW EXTENDED COLUMNS; it cannot be obtained\n        from the COLUMNS table.\n      ",
        "\n        You can list a table's columns with the mysqlshow\n        db_name\ntbl_name command.\n      ",
        "\n        The DESCRIBE statement provides\n        information similar to SHOW\n        COLUMNS. See Section\u00a015.8.1, \u201cDESCRIBE Statement\u201d.\n      ",
        "\n        The SHOW CREATE TABLE,\n        SHOW TABLE STATUS, and\n        SHOW INDEX statements also\n        provide information about tables. See Section\u00a015.7.7, \u201cSHOW Statements\u201d.\n      ",
        "\nSHOW COLUMNS includes the table's\n        generated invisible primary key, if it has one, by default. You\n        can cause this information to be suppressed in the\n        statement's output by setting\n        show_gipk_in_create_table_and_information_schema\n        = OFF. For more information, see\n        Section\u00a015.1.20.11, \u201cGenerated Invisible Primary Keys\u201d.\n"
    ],
    "Examples": [
        "mysql> SHOW COLUMNS FROM City;\n+-------------+----------+------+-----+---------+----------------+\n| Field       | Type     | Null | Key | Default | Extra          |\n+-------------+----------+------+-----+---------+----------------+\n| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name        | char(35) | NO   |     |         |                |\n| CountryCode | char(3)  | NO   | MUL |         |                |\n| District    | char(20) | NO   |     |         |                |\n| Population  | int(11)  | NO   |     | 0       |                |\n+-------------+----------+------+-----+---------+----------------+",
        "SHOW COLUMNS FROM mytable FROM mydb;\nSHOW COLUMNS FROM mydb.mytable;"
    ],
    "Category": [
        "Database Administration Statements"
    ]
}