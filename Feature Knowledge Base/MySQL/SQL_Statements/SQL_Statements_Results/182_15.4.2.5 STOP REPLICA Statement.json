{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/stop-replica.html"
    ],
    "Title": [
        "15.4.2.5 STOP REPLICA Statement"
    ],
    "Feature": [
        "STOP REPLICA [thread_types] [channel_option]\n\nthread_types:\n    [thread_type [, thread_type] ... ]\n\nthread_type: IO_THREAD | SQL_THREAD\n\nchannel_option:\n    FOR CHANNEL channel"
    ],
    "Description": [
        "\n        Stops the replication threads.\n      ",
        "\nSTOP REPLICA requires the\n        REPLICATION_SLAVE_ADMIN privilege\n        (or the deprecated SUPER\n        privilege). Recommended best practice is to execute\n        STOP REPLICA on the replica before stopping\n        the replica server (see Section\u00a07.1.19, \u201cThe Server Shutdown Process\u201d, for\n        more information).\n      ",
        "\n        Like START REPLICA, this\n        statement may be used with the IO_THREAD and\n        SQL_THREAD options to name the replication\n        thread or threads to be stopped. Note that the Group Replication\n        applier channel (group_replication_applier)\n        has no replication I/O (receiver) thread, only a replication SQL\n        (applier) thread. Using the SQL_THREAD option\n        therefore stops this channel completely.\n      ",
        "\nSTOP REPLICA causes an implicit commit of an\n        ongoing transaction. See Section\u00a015.3.3, \u201cStatements That Cause an Implicit Commit\u201d.\n      ",
        "\ngtid_next must be set to\n        AUTOMATIC before issuing this statement.\n      ",
        "\n        You can control how long STOP REPLICA waits\n        before timing out by setting the system variable\n        rpl_stop_replica_timeout. This\n        can be used to avoid deadlocks between STOP\n        REPLICA and other SQL statements using different\n        client connections to the replica. When the timeout value is\n        reached, the issuing client returns an error message and stops\n        waiting, but the STOP REPLICA instruction\n        remains in effect. Once the replication threads are no longer\n        busy, the STOP REPLICA statement is executed\n        and the replica stops.\n      ",
        "\n        Some CHANGE REPLICATION SOURCE TO\n        statements are allowed while the replica is running, depending\n        on the states of the replication threads. However, using\n        STOP REPLICA prior to executing a\n        CHANGE REPLICATION SOURCE TO\n        statement in such cases is still supported. See\n        Section\u00a015.4.2.2, \u201cCHANGE REPLICATION SOURCE TO Statement\u201d, and\n        Section\u00a019.4.8, \u201cSwitching Sources During Failover\u201d, for more\n        information.\n      ",
        "\n        The optional FOR CHANNEL\n        channel clause enables you\n        to name which replication channel the statement applies to.\n        Providing a FOR CHANNEL\n        channel clause applies the\n        STOP REPLICA statement to a specific\n        replication channel. If no channel is named and no extra\n        channels exist, the statement applies to the default channel. If\n        a STOP REPLICA statement does not name a\n        channel when using multiple channels, this statement stops the\n        specified threads for all channels. See\n        Section\u00a019.2.2, \u201cReplication Channels\u201d for more\n        information.\n      ",
        "\n        The replication channels for Group Replication\n        (group_replication_applier and\n        group_replication_recovery) are managed\n        automatically by the server instance. STOP\n        REPLICA cannot be used at all with the\n        group_replication_recovery channel, and\n        should only be used with the\n        group_replication_applier channel when Group\n        Replication is not running. The\n        group_replication_applier channel only has an\n        applier thread and has no receiver thread, so it can be stopped\n        if required by using the SQL_THREAD option\n        without the IO_THREAD option.\n      ",
        "\n        When the replica is multithreaded\n        (replica_parallel_workers is a\n        nonzero value), any gaps in the sequence of transactions\n        executed from the relay log are closed as part of stopping the\n        worker threads. If the replica is stopped unexpectedly (for\n        example due to an error in a worker thread, or another thread\n        issuing KILL) while a\n        STOP REPLICA statement is executing, the\n        sequence of executed transactions from the relay log may become\n        inconsistent. See\n        Section\u00a019.5.1.34, \u201cReplication and Transaction Inconsistencies\u201d,\n        for more information.\n      ",
        "\n        When the source is using the row-based binary logging format,\n        you should execute STOP REPLICA or\n        STOP REPLICA SQL_THREAD on the replica prior\n        to shutting down the replica server if you are replicating any\n        tables that use a nontransactional storage engine. If the\n        current replication event group has modified one or more\n        nontransactional tables, STOP REPLICA waits\n        for up to 60 seconds for the event group to complete, unless you\n        issue a KILL\n        QUERY or KILL\n        CONNECTION statement for the replication SQL thread.\n        If the event group remains incomplete after the timeout, an\n        error message is logged.\n      ",
        "\n        When the source is using the statement-based binary logging\n        format, changing the source while it has open temporary tables\n        is potentially unsafe. This is one of the reasons why\n        statement-based replication of temporary tables is not\n        recommended. You can find out whether there are any temporary\n        tables on the replica by checking the value of\n        Replica_open_temp_tables. When\n        using statement-based replication, this value should be 0 before\n        executing CHANGE REPLICATION SOURCE\n        TO. If there are any temporary tables open on the\n        replica, issuing a CHANGE REPLICATION\n        SOURCE TO statement after issuing a STOP\n        REPLICA causes an\n        ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO\n        warning.\n"
    ],
    "Examples": [],
    "Category": [
        "Replication Statements"
    ]
}