{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/reset-replica.html"
    ],
    "Title": [
        "15.4.2.3 RESET REPLICA Statement"
    ],
    "Feature": [
        "RESET REPLICA [ALL] [channel_option]\n\nchannel_option:\n    FOR CHANNEL channel"
    ],
    "Description": [
        "\nRESET REPLICA makes the replica forget its\n        position in the source's binary log.\n      ",
        "\n        This statement is meant to be used for a clean start; it clears\n        the replication metadata repositories, deletes all the relay log\n        files, and starts a new relay log file. It also resets to 0 the\n        replication delay specified with the\n        SOURCE_DELAY option of the\n        CHANGE REPLICATION SOURCE TO\n        statement.\n",
        "\n\nNote\n\n\n          All relay log files are deleted, even if they have not been\n          completely executed by the replication SQL thread. (This is a\n          condition likely to exist on a replica if you have issued a\n          STOP\n          REPLICA statement or if the replica is highly\n          loaded.)\n\n",
        "\n        For a server where GTIDs are in use\n        (gtid_mode is\n        ON), issuing RESET REPLICA\n        has no effect on the GTID execution history. The statement does\n        not change the values of gtid_executed or\n        gtid_purged, or the\n        mysql.gtid_executed table. If you need to\n        reset the GTID execution history, use RESET\n        BINARY LOGS AND GTIDS, even if the GTID-enabled server\n        is a replica where binary logging is disabled.\n      ",
        "\nRESET REPLICA requires the\n        RELOAD privilege.\n      ",
        "\n        To use RESET REPLICA, the replication SQL\n        thread and replication I/O (receiver) thread must be stopped, so\n        on a running replica use\n        STOP\n        REPLICA before issuing RESET\n        REPLICA. To use RESET REPLICA on a\n        Group Replication group member, the member status must be\n        OFFLINE, meaning that the plugin is loaded\n        but the member does not currently belong to any group. A group\n        member can be taken offline by using a STOP\n        GROUP REPLICATION statement.\n      ",
        "\n        The optional FOR CHANNEL\n        channel clause enables you\n        to name which replication channel the statement applies to.\n        Providing a FOR CHANNEL\n        channel clause applies the\n        RESET REPLICA statement to a specific\n        replication channel. Combining a FOR CHANNEL\n        channel clause with the\n        ALL option deletes the specified channel. If\n        no channel is named and no extra channels exist, the statement\n        applies to the default channel. Issuing a RESET REPLICA\n        ALL statement without a FOR CHANNEL\n        channel clause when\n        multiple replication channels exist deletes\n        all replication channels and recreates only\n        the default channel. See Section\u00a019.2.2, \u201cReplication Channels\u201d\n        for more information.\n      ",
        "\nRESET REPLICA does not change any replication\n        connection parameters, which include the source's host name and\n        port, the replication user account and its password, the\n        PRIVILEGE_CHECKS_USER account, the\n        REQUIRE_ROW_FORMAT option, the\n        REQUIRE_TABLE_PRIMARY_KEY_CHECK option,and\n        the ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS\n        option. If you want to change any of the replication connection\n        parameters, you can do this using a CHANGE\n        REPLICATION SOURCE TO statement after the server\n        starts. If you want to remove all of the replication connection\n        parameters, use RESET REPLICA ALL.\n        RESET REPLICA ALL also clears the\n        IGNORE_SERVER_IDS list set by\n        CHANGE REPLICATION SOURCE TO.\n        When you have used RESET REPLICA ALL, if you\n        want to use the instance as a replica again, you need to issue a\n        CHANGE REPLICATION SOURCE TO\n        statement after the server start to specify new connection\n        parameters.\n      ",
        "\n        You can set the GTID_ONLY option on the\n        CHANGE REPLICATION SOURCE TO\n        statement to stop a replication channel from persisting file\n        names and file positions in the replication metadata\n        repositories. When you issue RESET\n        REPLICA, the replication metadata repositories are\n        synchronized. RESET REPLICA ALL deletes\n        rather than updates the repositories, so they are synchronized\n        implicitly.\n      ",
        "\n        In the event of an unexpected server exit or deliberate restart\n        after issuing RESET REPLICA but before\n        issuing START REPLICA,\n        replication connection parameters are preserved in the\n        crash-safe InnoDB tables\n        mysql.slave_master_info and\n        mysql.slave_relay_log_info as part of the\n        RESET REPLICA operation. They are also\n        retained in memory. In the event of an unexpected server exit or\n        deliberate restart after issuing RESET\n        REPLICA but before issuing START\n        REPLICA, the replication connection parameters are\n        retrieved from the tables and reapplied to the channel. This\n        applies for both the connection and applier metadata\n        repositories.\n      ",
        "\nRESET REPLICA does not change any replication\n        filter settings (such as\n        --replicate-ignore-table) for\n        channels affected by the statement. However, RESET\n        REPLICA ALL removes the replication filters that were\n        set on the channels deleted by the statement. When the deleted\n        channel or channels are recreated, any global replication\n        filters specified for the replica are copied to them, and no\n        channel specific replication filters are applied. For more\n        information see\n        Section\u00a019.2.5.4, \u201cReplication Channel Based Filters\u201d.\n      ",
        "\nRESET REPLICA causes an implicit commit of an\n        ongoing transaction. See Section\u00a015.3.3, \u201cStatements That Cause an Implicit Commit\u201d.\n      ",
        "\n        If the replication SQL thread was in the middle of replicating\n        temporary tables when it was stopped, and RESET\n        REPLICA is issued, these replicated temporary tables\n        are deleted on the replica.\n",
        "\n\nNote\n\n\n          When used on an NDB Cluster replica SQL node, RESET\n          REPLICA clears the\n          mysql.ndb_apply_status table. You should\n          keep in mind when using this statement that\n          ndb_apply_status uses the\n          NDB storage engine and so is\n          shared by all SQL nodes attached to the cluster.\n        \n          You can override this behavior by issuing\n          SET\nGLOBAL\n          @@ndb_clear_apply_status=OFF\n          prior to executing RESET REPLICA, which\n          keeps the replica from purging the\n          ndb_apply_status table in such cases.\n\n"
    ],
    "Examples": [],
    "Category": [
        "Replication Statements"
    ]
}