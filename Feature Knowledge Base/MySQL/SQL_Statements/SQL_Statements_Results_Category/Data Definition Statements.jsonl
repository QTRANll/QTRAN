{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-tablespace.html"], "Title": ["15.1.10 ALTER TABLESPACE Statement"], "Feature": ["ALTER [UNDO] TABLESPACE tablespace_name\n  NDB only:\n    {ADD | DROP} DATAFILE 'file_name'\n    [INITIAL_SIZE [=] size]\n    [WAIT]\n  InnoDB and NDB:\n    [RENAME TO tablespace_name]\n  InnoDB only:\n    [AUTOEXTEND_SIZE [=] 'value']\n    [SET {ACTIVE | INACTIVE}]\n    [ENCRYPTION [=] {'Y' | 'N'}]\n  InnoDB and NDB:\n    [ENGINE [=] engine_name]\n  Reserved for future use:\n    [ENGINE_ATTRIBUTE [=] 'string']", "ALTER TABLESPACE tablespace_name ADD DATAFILE 'file_name'\n    ENGINE={NDB|NDBCLUSTER}", "ALTER UNDO TABLESPACE tablespace_name SET {ACTIVE|INACTIVE}\n    ENGINE=INNODB"], "Description": ["\n      This statement is used with NDB and\n      InnoDB tablespaces. It can be used to add a new\n      data file to, or to drop a data file from an\n      NDB tablespace. It can also be used to rename\n      an NDB Cluster Disk Data tablespace, rename an\n      InnoDB general tablespace, encrypt an\n      InnoDB general tablespace, or mark an\n      InnoDB undo tablespace as active or inactive.\n    ", "\n      The UNDO keyword is used with the SET\n      {ACTIVE | INACTIVE} clause to mark an\n      InnoDB undo tablespace as active or inactive.\n      For more information, see\n      Section\u00a017.6.3.4, \u201cUndo Tablespaces\u201d.\n    ", "\n      The ADD DATAFILE variant enables you to specify\n      an initial size for an NDB Disk Data tablespace\n      using an INITIAL_SIZE clause, where\n      size is measured in bytes; the default\n      value is 134217728 (128 MB). You may optionally follow\n      size with a one-letter abbreviation for\n      an order of magnitude, similar to those used in\n      my.cnf. Generally, this is one of the letters\n      M (megabytes) or G\n      (gigabytes).\n    ", "\n      On 32-bit systems, the maximum supported value for\n      INITIAL_SIZE is 4294967296 (4 GB). (Bug #29186)\n    ", "\nINITIAL_SIZE is rounded, explicitly, as for\n      CREATE TABLESPACE.\n    ", "\n      Once a data file has been created, its size cannot be changed;\n      however, you can add more data files to an NDB\n      tablespace using additional ALTER TABLESPACE ... ADD\n      DATAFILE statements.\n    ", "\n      When ALTER TABLESPACE ... ADD DATAFILE is used\n      with ENGINE = NDB, a data file is created on\n      each Cluster data node, but only one row is generated in the\n      Information Schema FILES table. See\n      the description of this table, as well as\n      Section\u00a025.6.11.1, \u201cNDB Cluster Disk Data Objects\u201d, for more\n      information. ADD DATAFILE is not supported with\n      InnoDB tablespaces.\n    ", "\n      Using DROP DATAFILE with\n      ALTER TABLESPACE drops the data\n      file 'file_name' from an\n      NDB tablespace. You cannot drop a data file\n      from a tablespace which is in use by any table; in other words,\n      the data file must be empty (no extents used). See\n      Section\u00a025.6.11.1, \u201cNDB Cluster Disk Data Objects\u201d. In addition,\n      any data file to be dropped must previously have been added to the\n      tablespace with CREATE TABLESPACE\n      or ALTER TABLESPACE. DROP\n      DATAFILE is not supported with InnoDB\n      tablespaces.\n    ", "\nWAIT is parsed but otherwise ignored. It is\n      intended for future expansion.\n    ", "\n      The ENGINE clause, which specifies the storage\n      engine used by the tablespace, is deprecated, since the tablespace\n      storage engine is known by the data dictionary, making the\n      ENGINE clause obsolete. In MySQL\n      8.4, it is supported in the following two cases only:\n", "\nPress CTRL+C to copy ALTER TABLESPACE tablespace_name ADD DATAFILE 'file_name'\n    ENGINE={NDB|NDBCLUSTER}Press CTRL+C to copy ALTER UNDO TABLESPACE tablespace_name SET {ACTIVE|INACTIVE}\n    ENGINE=INNODB\n", "\n      You should expect the eventual removal of\n      ENGINE from these statements as well, in a\n      future version of MySQL.\n    ", "\nRENAME TO operations are implicitly performed\n      in autocommit mode, regardless of the value of\n      autocommit.\n    ", "\n      A RENAME TO operation cannot be performed while\n      LOCK TABLES or\n      FLUSH TABLES WITH READ\n      LOCK is in effect for tables that reside in the\n      tablespace.\n    ", "\n      Exclusive metadata locks\n      are taken on tables that reside in a general tablespace while the\n      tablespace is renamed, which prevents concurrent DDL. Concurrent\n      DML is supported.\n    ", "\n      The CREATE TABLESPACE privilege is\n      required to rename an InnoDB general\n      tablespace.\n    ", "\n      The AUTOEXTEND_SIZE option defines the amount\n      by which InnoDB extends the size of a\n      tablespace when it becomes full. The setting must be a multiple of\n      4MB. The default setting is 0, which causes the tablespace to be\n      extended according to the implicit default behavior. For more\n      information, see\n      Section\u00a017.6.3.9, \u201cTablespace AUTOEXTEND_SIZE Configuration\u201d.\n    ", "\n      The ENCRYPTION clause enables or disables\n      page-level data encryption for an InnoDB\n      general tablespace or the mysql system\n      tablespace.\n    ", "\n      A keyring plugin must be installed and configured before\n      encryption can be enabled.\n    ", "\n      If the\n      table_encryption_privilege_check\n      variable is enabled, the\n      TABLE_ENCRYPTION_ADMIN privilege is\n      required to alter a general tablespace with an\n      ENCRYPTION clause setting that differs from the\n      default_table_encryption setting.\n    ", "\n      Enabling encryption for a general tablespace fails if any table in\n      the tablespace belongs to a schema defined with DEFAULT\n      ENCRYPTION='N'. Similarly, disabling encryption fails if\n      any table in the general tablespace belongs to a schema defined\n      with DEFAULT ENCRYPTION='Y'.\n    ", "\n      If an ALTER TABLESPACE statement\n      executed on a general tablespace does not include an\n      ENCRYPTION clause, the tablespace retains its\n      current encryption status, regardless of the\n      default_table_encryption setting.\n    ", "\n      When a general tablespace or the mysql system\n      tablespace is encrypted, all tables residing in the tablespace are\n      encrypted. Likewise, a table created in an encrypted tablespace is\n      encrypted.\n    ", "\n      The INPLACE algorithm is used when altering the\n      ENCRYPTION attribute of a general tablespace or\n      the mysql system tablespace. The\n      INPLACE algorithm permits concurrent DML on\n      tables that reside in the tablespace. Concurrent DDL is blocked.\n    ", "\n      For more information, see\n      Section\u00a017.13, \u201cInnoDB Data-at-Rest Encryption\u201d.\n    ", "\n      The ENGINE_ATTRIBUTE option is used to specify\n      tablespace attributes for primary storage engines. The option is\n      reserved for future use.\n    ", "\n      The value assigned to this option is a string literal containing a\n      valid JSON document or an empty string (''). Invalid JSON is\n      rejected.\n    ", "Press CTRL+C to copy ALTER TABLESPACE ts1 ENGINE_ATTRIBUTE='{\"key\":\"value\"}';", "\nENGINE_ATTRIBUTE values can be repeated without\n      error. In this case, the last specified value is used.\n    ", "\nENGINE_ATTRIBUTE values are not checked by the\n      server, nor are they cleared when the table's storage engine\n      is changed.\n    ", "\n      It is not permitted to alter an individual element of a JSON\n      attribute value. You can only add or replace an attribute.\n"], "Examples": ["ALTER TABLESPACE ts1 ENGINE_ATTRIBUTE='{\"key\":\"value\"}';"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-view.html"], "Title": ["15.1.11 ALTER VIEW Statement"], "Feature": ["ALTER\n    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]\n    [DEFINER = user]\n    [SQL SECURITY { DEFINER | INVOKER }]\n    VIEW view_name [(column_list)]\n    AS select_statement\n    [WITH [CASCADED | LOCAL] CHECK OPTION]"], "Description": ["\n      This statement changes the definition of a view, which must exist.\n      The syntax is similar to that for CREATE\n      VIEW see Section\u00a015.1.23, \u201cCREATE VIEW Statement\u201d). This statement\n      requires the CREATE VIEW and\n      DROP privileges for the view, and\n      some privilege for each column referred to in the\n      SELECT statement.\n      ALTER VIEW is permitted only to the\n      definer or users with the\n      SET_ANY_DEFINER or\n      ALLOW_NONEXISTENT_DEFINER\n      privilege.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-database.html"], "Title": ["15.1.12 CREATE DATABASE Statement"], "Feature": ["CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name\n    [create_option] ...\n\ncreate_option: [DEFAULT] {\n    CHARACTER SET [=] charset_name\n  | COLLATE [=] collation_name\n  | ENCRYPTION [=] {'Y' | 'N'}\n}"], "Description": ["\nCREATE DATABASE creates a database\n      with the given name. To use this statement, you need the\n      CREATE privilege for the database.\n      CREATE\n      SCHEMA is a synonym for CREATE\n      DATABASE.\n    ", "\n      An error occurs if the database exists and you did not specify\n      IF NOT EXISTS.\n    ", "\nCREATE DATABASE is not permitted\n      within a session that has an active LOCK\n      TABLES statement.\n    ", "\n      Each create_option specifies a database\n      characteristic. Database characteristics are stored in the data\n      dictionary.\n", "\n\n          The CHARACTER SET option specifies the\n          default database character set. The COLLATE\n          option specifies the default database collation. For\n          information about character set and collation names, see\n          Chapter\u00a012, Character Sets, Collations, Unicode.\n        \n          To see the available character sets and collations, use the\n          the SHOW CHARACTER SET and\n          SHOW COLLATION statements,\n          respectively. See Section\u00a015.7.7.4, \u201cSHOW CHARACTER SET Statement\u201d, and\n          Section\u00a015.7.7.5, \u201cSHOW COLLATION Statement\u201d.\n        \n          The ENCRYPTION option defines the default\n          database encryption, which is inherited by tables created in\n          the database. The permitted values are 'Y'\n          (encryption enabled) and 'N' (encryption\n          disabled). If the ENCRYPTION option is not\n          specified, the value of the\n          default_table_encryption\n          system variable defines the default database encryption. If\n          the\n          table_encryption_privilege_check\n          system variable is enabled, the\n          TABLE_ENCRYPTION_ADMIN\n          privilege is required to specify a default encryption setting\n          that differs from the\n          default_table_encryption\n          setting. For more information, see\n          Defining an Encryption Default for Schemas and General Tablespaces.\n\n", "\n      A database in MySQL is implemented as a directory containing files\n      that correspond to tables in the database. Because there are no\n      tables in a database when it is initially created, the\n      CREATE DATABASE statement creates\n      only a directory under the MySQL data directory. Rules for\n      permissible database names are given in\n      Section\u00a011.2, \u201cSchema Object Names\u201d. If a database name contains special\n      characters, the name for the database directory contains encoded\n      versions of those characters as described in\n      Section\u00a011.2.4, \u201cMapping of Identifiers to File Names\u201d.\n    ", "\n      Creating a database directory by manually creating a directory\n      under the data directory (for example, with\n      mkdir) is unsupported in MySQL\n      8.4.\n    ", "\n      When you create a database, let the server manage the directory\n      and the files in it. Manipulating database directories and files\n      directly can cause inconsistencies and unexpected results.\n    ", "\n      MySQL has no limit on the number of databases. The underlying file\n      system may have a limit on the number of directories.\n    ", "\n      You can also use the mysqladmin program to\n      create databases. See Section\u00a06.5.2, \u201cmysqladmin \u2014 A MySQL Server Administration Program\u201d.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-index.html"], "Title": ["15.1.15 CREATE INDEX Statement"], "Feature": ["CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX index_name\n    [index_type]\n    ON tbl_name (key_part,...)\n    [index_option]\n    [algorithm_option | lock_option] ...\n\nkey_part: {col_name [(length)] | (expr)} [ASC | DESC]\n\nindex_option: {\n    KEY_BLOCK_SIZE [=] value\n  | index_type\n  | WITH PARSER parser_name\n  | COMMENT 'string'\n  | {VISIBLE | INVISIBLE}\n  | ENGINE_ATTRIBUTE [=] 'string'\n  | SECONDARY_ENGINE_ATTRIBUTE [=] 'string'\n}\n\nindex_type:\n    USING {BTREE | HASH}\n\nalgorithm_option:\n    ALGORITHM [=] {DEFAULT | INPLACE | COPY}\n\nlock_option:\n    LOCK [=] {DEFAULT | NONE | SHARED | EXCLUSIVE}", "INDEX ((col1 + col2), (col3 - col4))", "INDEX (col1 + col2, col3 - col4)", "INDEX ((col1), (col2))", "INDEX (col1, col2)", "+------------------------------------+\n| data                               |\n+------------------------------------+\n| {\"name\": \"James\", \"salary\": 10000} |\n+------------------------------------+", "+------------------------------------+\n| data                               |\n+------------------------------------+\n| {\"name\": \"james\", \"salary\": 9000}  |\n| {\"name\": \"James\", \"salary\": 10000} |\n+------------------------------------+", "CAST(data->'$.arr[*][*]' AS UNSIGNED ARRAY)"], "Description": ["\n      Normally, you create all indexes on a table at the time the table\n      itself is created with CREATE\n      TABLE. See Section\u00a015.1.20, \u201cCREATE TABLE Statement\u201d. This\n      guideline is especially important for\n      InnoDB tables, where the primary key\n      determines the physical layout of rows in the data file.\n      CREATE INDEX enables you to add\n      indexes to existing tables.\n    ", "\nCREATE INDEX is mapped to an\n      ALTER TABLE statement to create\n      indexes. See Section\u00a015.1.9, \u201cALTER TABLE Statement\u201d.\n      CREATE INDEX cannot be used to\n      create a PRIMARY KEY; use\n      ALTER TABLE instead. For more\n      information about indexes, see Section\u00a010.3.1, \u201cHow MySQL Uses Indexes\u201d.\n    ", "\nInnoDB supports secondary indexes on\n      virtual columns. For more information, see\n      Section\u00a015.1.20.9, \u201cSecondary Indexes and Generated Columns\u201d.\n    ", "\n      When the innodb_stats_persistent\n      setting is enabled, run the ANALYZE\n      TABLE statement for an\n      InnoDB table after creating an index\n      on that table.\n    ", "\n      The expr for a\n      key_part specification can also take\n      the form (CAST json_expression\n      AS type ARRAY) to create a\n      multi-valued index on a JSON\n      column. See Multi-Valued Indexes.\n    ", "\n      An index specification of the form\n      (key_part1,\n      key_part2, ...) creates an\n      index with multiple key parts. Index key values are formed by\n      concatenating the values of the given key parts. For example\n      (col1, col2, col3) specifies a multiple-column\n      index with index keys consisting of values from\n      col1, col2, and\n      col3.\n    ", "\n      A key_part specification can end with\n      ASC or DESC to specify\n      whether index values are stored in ascending or descending order.\n      The default is ascending if no order specifier is given.\n    ", "\nASC and DESC are not\n      supported for HASH indexes, multi-valued\n      indexes or SPATIAL indexes.\n    ", "\n      The following sections describe different aspects of the\n      CREATE INDEX statement:\n", "\nColumn Prefix Key PartsFunctional Key PartsUnique IndexesFull-Text IndexesMulti-Valued IndexesSpatial IndexesIndex OptionsTable Copying and Locking Options\n", "\n\n\n\nColumn Prefix Key Parts\n\n\n\n\n        For string columns, indexes can be created that use only the\n        leading part of column values, using\n        col_name(length)\n        syntax to specify an index prefix length:\n\n\n\n            Prefixes can be specified for\n            CHAR,\n            VARCHAR,\n            BINARY, and\n            VARBINARY key parts.\n          \n            Prefixes must be specified for\n            BLOB and\n            TEXT key parts. Additionally,\n            BLOB and\n            TEXT columns can be indexed\n            only for InnoDB,\n            MyISAM, and BLACKHOLE\n            tables.\n          \n            Prefix limits are measured in bytes.\n            However, prefix lengths for index\n            specifications in CREATE\n            TABLE, ALTER TABLE,\n            and CREATE INDEX statements\n            are interpreted as number of characters for nonbinary string\n            types (CHAR,\n            VARCHAR,\n            TEXT) and number of bytes for\n            binary string types (BINARY,\n            VARBINARY,\n            BLOB). Take this into account\n            when specifying a prefix length for a nonbinary string\n            column that uses a multibyte character set.\n          \n            Prefix support and lengths of prefixes (where supported) are\n            storage engine dependent. For example, a prefix can be up to\n            767 bytes long for InnoDB\n            tables that use the\n            REDUNDANT\n            or\n            COMPACT\n            row format. The prefix length limit is 3072 bytes for\n            InnoDB tables that use the\n            DYNAMIC\n            or\n            COMPRESSED\n            row format. For MyISAM tables,\n            the prefix length limit is 1000 bytes. The\n            NDB storage engine does not\n            support prefixes (see\n            Section\u00a025.2.7.6, \u201cUnsupported or Missing Features in NDB Cluster\u201d).\n\n\n\n        If a specified index prefix exceeds the maximum column data type\n        size, CREATE INDEX handles the\n        index as follows:\n\n\n\n            For a nonunique index, either an error occurs (if strict SQL\n            mode is enabled), or the index length is reduced to lie\n            within the maximum column data type size and a warning is\n            produced (if strict SQL mode is not enabled).\n          \n            For a unique index, an error occurs regardless of SQL mode\n            because reducing the index length might enable insertion of\n            nonunique entries that do not meet the specified uniqueness\n            requirement.\n\n\n\n        The statement shown here creates an index using the first 10\n        characters of the name column (assuming that\n        name has a nonbinary string type):\n      Press CTRL+C to copy CREATE INDEX part_of_name ON customer (name(10));\n        If names in the column usually differ in the first 10\n        characters, lookups performed using this index should not be\n        much slower than using an index created from the entire\n        name column. Also, using column prefixes for\n        indexes can make the index file much smaller, which could save a\n        lot of disk space and might also speed up\n        INSERT operations.\n\n", "\n\n\n\nFunctional Key Parts\n\n\n\n\n        A \u201cnormal\u201d index indexes column values or prefixes\n        of column values. For example, in the following table, the index\n        entry for a given t1 row includes the full\n        col1 value and a prefix of the\n        col2 value consisting of its first 10\n        characters:\n      Press CTRL+C to copy CREATE TABLE t1 (\n  col1 VARCHAR(10),\n  col2 VARCHAR(20),\n  INDEX (col1, col2(10))\n);\n        Functional key parts that index expression values canalso be\n        used in place of column or column prefix values. Use of\n        functional key parts enables indexing of values not stored\n        directly in the table. Examples:\n      Press CTRL+C to copy CREATE TABLE t1 (col1 INT, col2 INT, INDEX func_index ((ABS(col1))));\nCREATE INDEX idx1 ON t1 ((col1 + col2));\nCREATE INDEX idx2 ON t1 ((col1 + col2), (col1 - col2), col1);\nALTER TABLE t1 ADD INDEX ((col1 * 40) DESC);\n        An index with multiple key parts can mix nonfunctional and\n        functional key parts.\n      \nASC and DESC are supported\n        for functional key parts.\n      \n        Functional key parts must adhere to the following rules. An\n        error occurs if a key part definition contains disallowed\n        constructs.\n\n\n\n            In index definitions, enclose expressions within parentheses\n            to distinguish them from columns or column prefixes. For\n            example, this is permitted; the expressions are enclosed\n            within parentheses:\n          Press CTRL+C to copy INDEX ((col1 + col2), (col3 - col4))\n            This produces an error; the expressions are not enclosed\n            within parentheses:\n          Press CTRL+C to copy INDEX (col1 + col2, col3 - col4)\n            A functional key part cannot consist solely of a column\n            name. For example, this is not permitted:\n          Press CTRL+C to copy INDEX ((col1), (col2))\n            Instead, write the key parts as nonfunctional key parts,\n            without parentheses:\n          Press CTRL+C to copy INDEX (col1, col2)\n            A functional key part expression cannot refer to column\n            prefixes. For a workaround, see the discussion of\n            SUBSTRING() and\n            CAST() later in this section.\n          \n            Functional key parts are not permitted in foreign key\n            specifications.\n\n\n\n        For CREATE\n        TABLE ... LIKE, the destination table preserves\n        functional key parts from the original table.\n      \n        Functional indexes are implemented as hidden virtual generated\n        columns, which has these implications:\n\n\n\n            Each functional key part counts against the limit on total\n            number of table columns; see\n            Section\u00a010.4.7, \u201cLimits on Table Column Count and Row Size\u201d.\n          \n            Functional key parts inherit all restrictions that apply to\n            generated columns. Examples:\n\n\n\n                Only functions permitted for generated columns are\n                permitted for functional key parts.\n              \n                Subqueries, parameters, variables, stored functions, and\n                loadable functions are not permitted.\n\n\n\n            For more information about applicable restrictions, see\n            Section\u00a015.1.20.8, \u201cCREATE TABLE and Generated Columns\u201d, and\n            Section\u00a015.1.9.2, \u201cALTER TABLE and Generated Columns\u201d.\n          \n            The virtual generated column itself requires no storage. The\n            index itself takes up storage space as any other index.\n\n\n\nUNIQUE is supported for indexes that include\n        functional key parts. However, primary keys cannot include\n        functional key parts. A primary key requires the generated\n        column to be stored, but functional key parts are implemented as\n        virtual generated columns, not stored generated columns.\n      \nSPATIAL and FULLTEXT\n        indexes cannot have functional key parts.\n      \n        If a table contains no primary key, InnoDB\n        automatically promotes the first UNIQUE NOT\n        NULL index to the primary key. This is not supported\n        for UNIQUE NOT NULL indexes that have\n        functional key parts.\n      \n        Nonfunctional indexes raise a warning if there are duplicate\n        indexes. Indexes that contain functional key parts do not have\n        this feature.\n      \n        To remove a column that is referenced by a functional key part,\n        the index must be removed first. Otherwise, an error occurs.\n      \n        Although nonfunctional key parts support a prefix length\n        specification, this is not possible for functional key parts.\n        The solution is to use\n        SUBSTRING() (or\n        CAST(), as described later in\n        this section). For a functional key part containing the\n        SUBSTRING() function to be used\n        in a query, the WHERE clause must contain\n        SUBSTRING() with the same\n        arguments. In the following example, only the second\n        SELECT is able to use the index\n        because that is the only query in which the arguments to\n        SUBSTRING() match the index\n        specification:\n      Press CTRL+C to copy CREATE TABLE tbl (\n  col1 LONGTEXT,\n  INDEX idx1 ((SUBSTRING(col1, 1, 10)))\n);\nSELECT * FROM tbl WHERE SUBSTRING(col1, 1, 9) = '123456789';\nSELECT * FROM tbl WHERE SUBSTRING(col1, 1, 10) = '1234567890';\n        Functional key parts enable indexing of values that cannot be\n        indexed otherwise, such as JSON\n        values. However, this must be done correctly to achieve the\n        desired effect. For example, this syntax does not work:\n      Press CTRL+C to copy CREATE TABLE employees (\n  data JSON,\n  INDEX ((data->>'$.name'))\n);\n        The syntax fails because:\n\n\n\n            The\n            ->>\n            operator translates into\n            JSON_UNQUOTE(JSON_EXTRACT(...)).\n          \nJSON_UNQUOTE() returns a\n            value with a data type of\n            LONGTEXT, and the hidden\n            generated column thus is assigned the same data type.\n          \n            MySQL cannot index LONGTEXT\n            columns specified without a prefix length on the key part,\n            and prefix lengths are not permitted in functional key\n            parts.\n\n\n\n        To index the JSON column, you could try using\n        the CAST() function as follows:\n      Press CTRL+C to copy CREATE TABLE employees (\n  data JSON,\n  INDEX ((CAST(data->>'$.name' AS CHAR(30))))\n);\n        The hidden generated column is assigned the\n        VARCHAR(30) data type, which can\n        be indexed. But this approach produces a new issue when trying\n        to use the index:\n\n\n\nCAST() returns a string with\n            the collation utf8mb4_0900_ai_ci (the\n            server default collation).\n          \nJSON_UNQUOTE() returns a\n            string with the collation utf8mb4_bin\n            (hard coded).\n\n\n\n        As a result, there is a collation mismatch between the indexed\n        expression in the preceding table definition and the\n        WHERE clause expression in the following\n        query:\n      Press CTRL+C to copy SELECT * FROM employees WHERE data->>'$.name' = 'James';\n        The index is not used because the expressions in the query and\n        the index differ. To support this kind of scenario for\n        functional key parts, the optimizer automatically strips\n        CAST() when looking for an index\n        to use, but only if the collation of the\n        indexed expression matches that of the query expression. For an\n        index with a functional key part to be used, either of the\n        following two solutions work (although they differ somewhat in\n        effect):\n\n\n\n            Solution 1. Assign the indexed expression the same collation\n            as JSON_UNQUOTE():\n          Press CTRL+C to copy CREATE TABLE employees (\n  data JSON,\n  INDEX idx ((CAST(data->>\"$.name\" AS CHAR(30)) COLLATE utf8mb4_bin))\n);\nINSERT INTO employees VALUES\n  ('{ \"name\": \"james\", \"salary\": 9000 }'),\n  ('{ \"name\": \"James\", \"salary\": 10000 }'),\n  ('{ \"name\": \"Mary\", \"salary\": 12000 }'),\n  ('{ \"name\": \"Peter\", \"salary\": 8000 }');\nSELECT * FROM employees WHERE data->>'$.name' = 'James';\n            The ->> operator is the same as\n            JSON_UNQUOTE(JSON_EXTRACT(...)), and\n            JSON_UNQUOTE() returns a string with\n            collation utf8mb4_bin. The comparison is\n            thus case-sensitive, and only one row matches:\n          Press CTRL+C to copy +------------------------------------+\n| data                               |\n+------------------------------------+\n| {\"name\": \"James\", \"salary\": 10000} |\n+------------------------------------+\n            Solution 2. Specify the full expression in the query:\n          Press CTRL+C to copy CREATE TABLE employees (\n  data JSON,\n  INDEX idx ((CAST(data->>\"$.name\" AS CHAR(30))))\n);\nINSERT INTO employees VALUES\n  ('{ \"name\": \"james\", \"salary\": 9000 }'),\n  ('{ \"name\": \"James\", \"salary\": 10000 }'),\n  ('{ \"name\": \"Mary\", \"salary\": 12000 }'),\n  ('{ \"name\": \"Peter\", \"salary\": 8000 }');\nSELECT * FROM employees WHERE CAST(data->>'$.name' AS CHAR(30)) = 'James';\nCAST() returns a string with collation\n            utf8mb4_0900_ai_ci, so the comparison\n            case-insensitive and two rows match:\n          Press CTRL+C to copy +------------------------------------+\n| data                               |\n+------------------------------------+\n| {\"name\": \"james\", \"salary\": 9000}  |\n| {\"name\": \"James\", \"salary\": 10000} |\n+------------------------------------+\n\n\n        Be aware that although the optimizer supports automatically\n        stripping CAST() with indexed\n        generated columns, the following approach does not work because\n        it produces a different result with and without an index\n        (Bug#27337092):\n      Press CTRL+C to copy mysql> CREATE TABLE employees (\n         data JSON,\n         generated_col VARCHAR(30) AS (CAST(data->>'$.name' AS CHAR(30)))\n       );\nQuery OK, 0 rows affected, 1 warning (0.03 sec)\n\nmysql> INSERT INTO employees (data)\n       VALUES ('{\"name\": \"james\"}'), ('{\"name\": \"James\"}');\nQuery OK, 2 rows affected, 1 warning (0.01 sec)\nRecords: 2  Duplicates: 0  Warnings: 1\n\nmysql> SELECT * FROM employees WHERE data->>'$.name' = 'James';\n+-------------------+---------------+\n| data              | generated_col |\n+-------------------+---------------+\n| {\"name\": \"James\"} | James         |\n+-------------------+---------------+\n1 row in set (0.00 sec)\n\nmysql> ALTER TABLE employees ADD INDEX idx (generated_col);\nQuery OK, 0 rows affected, 1 warning (0.03 sec)\nRecords: 0  Duplicates: 0  Warnings: 1\n\nmysql> SELECT * FROM employees WHERE data->>'$.name' = 'James';\n+-------------------+---------------+\n| data              | generated_col |\n+-------------------+---------------+\n| {\"name\": \"james\"} | james         |\n| {\"name\": \"James\"} | James         |\n+-------------------+---------------+\n2 rows in set (0.01 sec)\n", "\n\n\n\nUnique Indexes\n\n\n\n\n        A UNIQUE index creates a constraint such that\n        all values in the index must be distinct. An error occurs if you\n        try to add a new row with a key value that matches an existing\n        row. If you specify a prefix value for a column in a\n        UNIQUE index, the column values must be\n        unique within the prefix length. A UNIQUE\n        index permits multiple NULL values for\n        columns that can contain NULL.\n      \n        If a table has a PRIMARY KEY or\n        UNIQUE NOT NULL index that consists of a\n        single column that has an integer type, you can use\n        _rowid to refer to the indexed column in\n        SELECT statements, as follows:\n\n\n\n_rowid refers to the PRIMARY\n            KEY column if there is a PRIMARY\n            KEY consisting of a single integer column. If\n            there is a PRIMARY KEY but it does not\n            consist of a single integer column,\n            _rowid cannot be used.\n          \n            Otherwise, _rowid refers to the column in\n            the first UNIQUE NOT NULL index if that\n            index consists of a single integer column. If the first\n            UNIQUE NOT NULL index does not consist of\n            a single integer column, _rowid cannot be\n            used.\n\n\n", "\n\n\n\nFull-Text Indexes\n\n\n\n\nFULLTEXT indexes are supported only for\n        InnoDB and\n        MyISAM tables and can include only\n        CHAR,\n        VARCHAR, and\n        TEXT columns. Indexing always\n        happens over the entire column; column prefix indexing is not\n        supported and any prefix length is ignored if specified. See\n        Section\u00a014.9, \u201cFull-Text Search Functions\u201d, for details of operation.\n\n", "\n\n\n\nMulti-Valued Indexes\n\n\n\n\nInnoDB supports multi-valued indexes. A\n        multi-valued index is a secondary index defined on a column that\n        stores an array of values. A \u201cnormal\u201d index has one\n        index record for each data record (1:1). A multi-valued index\n        can have multiple index records for a single data record (N:1).\n        Multi-valued indexes are intended for indexing\n        JSON arrays. For example, a multi-valued\n        index defined on the array of zip codes in the following JSON\n        document creates an index record for each zip code, with each\n        index record referencing the same data record.\n      Press CTRL+C to copy {\n    \"user\":\"Bob\",\n    \"user_id\":31,\n    \"zipcode\":[94477,94536]\n}\nCreating multi-valued Indexes\n\n        You can create a multi-valued index in a\n        CREATE TABLE,\n        ALTER TABLE, or\n        CREATE INDEX statement. This\n        requires using CAST(... AS ...\n        ARRAY) in the index definition, which casts same-typed\n        scalar values in a JSON array to an SQL data\n        type array. A virtual column is then generated transparently\n        with the values in the SQL data type array; finally, a\n        functional index (also referred to as a virtual index) is\n        created on the virtual column. It is the functional index\n        defined on the virtual column of values from the SQL data type\n        array that forms the multi-valued index.\n      \n        The examples in the following list show the three different ways\n        in which a multi-valued index zips can be\n        created on an array $.zipcode on a\n        JSON column custinfo in a\n        table named customers. In each case, the JSON\n        array is cast to an SQL data type array of\n        UNSIGNED integer values.\n\n\n\nCREATE TABLE only:\n          Press CTRL+C to copy CREATE TABLE customers (\n    id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    modified DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    custinfo JSON,\n    INDEX zips( (CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)) )\n    );\nCREATE TABLE plus ALTER\n            TABLE:\n          \nPress CTRL+C to copy CREATE TABLE customers (\n    id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    modified DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    custinfo JSON\n    );\n\nALTER TABLE customers ADD INDEX zips( (CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)) );\n\nCREATE TABLE plus CREATE\n            INDEX:\n          \nPress CTRL+C to copy CREATE TABLE customers (\n    id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    modified DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    custinfo JSON\n    );\n\nCREATE INDEX zips ON customers ( (CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)) );\n\n\n\n        A multi-valued index can also be defined as part of a composite\n        index. This example shows a composite index that includes two\n        single-valued parts (for the id and\n        modified columns), and one multi-valued part\n        (for the custinfo column):\n      Press CTRL+C to copy CREATE TABLE customers (\n    id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    modified DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    custinfo JSON\n    );\n\nALTER TABLE customers ADD INDEX comp(id, modified,\n    (CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)) );\n        Only one multi-valued key part can be used in a composite index.\n        The multi-valued key part may be used in any order relative to\n        the other parts of the key. In other words, the ALTER\n        TABLE statement just shown could have used\n        comp(id, (CAST(custinfo->'$.zipcode' AS UNSIGNED\n        ARRAY), modified)) (or any other ordering) and still\n        have been valid.\n\nUsing multi-valued Indexes\n\n        The optimizer uses a multi-valued index to fetch records when\n        the following functions are specified in a\n        WHERE clause:\n\n\n\nMEMBER OF()\n\nJSON_CONTAINS()\n\nJSON_OVERLAPS()\n\n\n\n        We can demonstrate this by creating and populating the\n        customers table using the following\n        CREATE TABLE and INSERT\n        statements:\n      Press CTRL+C to copy mysql> CREATE TABLE customers (\n    ->     id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    ->     modified DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    ->     custinfo JSON\n    ->     );\nQuery OK, 0 rows affected (0.51 sec)\n\nmysql> INSERT INTO customers VALUES\n    ->     (NULL, NOW(), '{\"user\":\"Jack\",\"user_id\":37,\"zipcode\":[94582,94536]}'),\n    ->     (NULL, NOW(), '{\"user\":\"Jill\",\"user_id\":22,\"zipcode\":[94568,94507,94582]}'),\n    ->     (NULL, NOW(), '{\"user\":\"Bob\",\"user_id\":31,\"zipcode\":[94477,94507]}'),\n    ->     (NULL, NOW(), '{\"user\":\"Mary\",\"user_id\":72,\"zipcode\":[94536]}'),\n    ->     (NULL, NOW(), '{\"user\":\"Ted\",\"user_id\":56,\"zipcode\":[94507,94582]}');\nQuery OK, 5 rows affected (0.07 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n        First we execute three queries on the\n        customers table, one each using\n        MEMBER OF(),\n        JSON_CONTAINS(), and\n        JSON_OVERLAPS(), with the result from each\n        query shown here:\n      Press CTRL+C to copy mysql> SELECT * FROM customers\n    ->     WHERE 94507 MEMBER OF(custinfo->'$.zipcode');\n+----+---------------------+-------------------------------------------------------------------+\n| id | modified            | custinfo                                                          |\n+----+---------------------+-------------------------------------------------------------------+\n|  2 | 2019-06-29 22:23:12 | {\"user\": \"Jill\", \"user_id\": 22, \"zipcode\": [94568, 94507, 94582]} |\n|  3 | 2019-06-29 22:23:12 | {\"user\": \"Bob\", \"user_id\": 31, \"zipcode\": [94477, 94507]}         |\n|  5 | 2019-06-29 22:23:12 | {\"user\": \"Ted\", \"user_id\": 56, \"zipcode\": [94507, 94582]}         |\n+----+---------------------+-------------------------------------------------------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT * FROM customers\n    ->     WHERE JSON_CONTAINS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+---------------------+-------------------------------------------------------------------+\n| id | modified            | custinfo                                                          |\n+----+---------------------+-------------------------------------------------------------------+\n|  2 | 2019-06-29 22:23:12 | {\"user\": \"Jill\", \"user_id\": 22, \"zipcode\": [94568, 94507, 94582]} |\n|  5 | 2019-06-29 22:23:12 | {\"user\": \"Ted\", \"user_id\": 56, \"zipcode\": [94507, 94582]}         |\n+----+---------------------+-------------------------------------------------------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT * FROM customers\n    ->     WHERE JSON_OVERLAPS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+---------------------+-------------------------------------------------------------------+\n| id | modified            | custinfo                                                          |\n+----+---------------------+-------------------------------------------------------------------+\n|  1 | 2019-06-29 22:23:12 | {\"user\": \"Jack\", \"user_id\": 37, \"zipcode\": [94582, 94536]}        |\n|  2 | 2019-06-29 22:23:12 | {\"user\": \"Jill\", \"user_id\": 22, \"zipcode\": [94568, 94507, 94582]} |\n|  3 | 2019-06-29 22:23:12 | {\"user\": \"Bob\", \"user_id\": 31, \"zipcode\": [94477, 94507]}         |\n|  5 | 2019-06-29 22:23:12 | {\"user\": \"Ted\", \"user_id\": 56, \"zipcode\": [94507, 94582]}         |\n+----+---------------------+-------------------------------------------------------------------+\n4 rows in set (0.00 sec)\n        Next, we run EXPLAIN on each of\n        the previous three queries:\n      Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE 94507 MEMBER OF(custinfo->'$.zipcode');\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    5 |   100.00 | Using where |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE JSON_CONTAINS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    5 |   100.00 | Using where |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE JSON_OVERLAPS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    5 |   100.00 | Using where |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.01 sec)\n        None of the three queries just shown are able to use any keys.\n        To solve this problem, we can add a multi-valued index on the\n        zipcode array in the JSON\n        column (custinfo), like this:\n      Press CTRL+C to copy mysql> ALTER TABLE customers\n    ->     ADD INDEX zips( (CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)) );\nQuery OK, 0 rows affected (0.47 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n        When we run the previous EXPLAIN statements\n        again, we can now observe that the queries can (and do) use the\n        index zips that was just created:\n      Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE 94507 MEMBER OF(custinfo->'$.zipcode');\n+----+-------------+-----------+------------+------+---------------+------+---------+-------+------+----------+-------------+\n| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref   | rows | filtered | Extra       |\n+----+-------------+-----------+------------+------+---------------+------+---------+-------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | ref  | zips          | zips | 9       | const |    1 |   100.00 | Using where |\n+----+-------------+-----------+------------+------+---------------+------+---------+-------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE JSON_CONTAINS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table     | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | range | zips          | zips | 9       | NULL |    6 |   100.00 | Using where |\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE JSON_OVERLAPS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table     | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | range | zips          | zips | 9       | NULL |    6 |   100.00 | Using where |\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.01 sec)\n        A multi-valued index can be defined as a unique key. If defined\n        as a unique key, attempting to insert a value already present in\n        the multi-valued index returns a duplicate key error. If\n        duplicate values are already present, attempting to add a unique\n        multi-valued index fails, as shown here:\n      Press CTRL+C to copy mysql> ALTER TABLE customers DROP INDEX zips;\nQuery OK, 0 rows affected (0.55 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> ALTER TABLE customers\n    ->     ADD UNIQUE INDEX zips((CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)));\nERROR 1062 (23000): Duplicate entry '[94507, ' for key 'customers.zips'\nmysql> ALTER TABLE customers\n    ->     ADD INDEX zips((CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)));\nQuery OK, 0 rows affected (0.36 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\nCharacteristics of Multi-Valued Indexes\n\n        Multi-valued indexes have the additional characteristics listed\n        here:\n\n\n\n            DML operations that affect multi-valued indexes are handled\n            in the same way as DML operations that affect a normal\n            index, with the only difference being that there may be more\n            than one insert or update for a single clustered index\n            record.\n          \n            Nullability and multi-valued indexes:\n\n\n\n                If a multi-valued key part has an empty array, no\n                entries are added to the index, and the data record is\n                not accessible by an index scan.\n              \n                If multi-valued key part generation returns a\n                NULL value, a single entry containing\n                NULL is added to the multi-valued\n                index. If the key part is defined as NOT\n                NULL, an error is reported.\n              \n                If the typed array column is set to\n                NULL, the storage engine stores a\n                single record containing NULL that\n                points to the data record.\n              \nJSON null values are not permitted in\n                indexed arrays. If any returned value is\n                NULL, it is treated as a JSON null\n                and an Invalid JSON value error\n                is reported.\n\n\n\n            Because multi-valued indexes are virtual indexes on virtual\n            columns, they must adhere to the same rules as secondary\n            indexes on virtual generated columns.\n          \n            Index records are not added for empty arrays.\n\n\nLimitations and Restrictions on Multi-valued Indexes\n\n        Multi-valued indexes are subject to the limitations and\n        restrictions listed here:\n\n\n\n            Only one multi-valued key part is permitted per multi-valued\n            index. However, the CAST(... AS ...\n            ARRAY) expression can refer to multiple arrays\n            within a JSON document, as shown here:\n          Press CTRL+C to copy CAST(data->'$.arr[*][*]' AS UNSIGNED ARRAY)\n            In this case, all values matching the JSON expression are\n            stored in the index as a single flat array.\n          \n            An index with a multi-valued key part does not support\n            ordering and therefore cannot be used as a primary key. For\n            the same reason, a multi-valued index cannot be defined\n            using the ASC or DESC\n            keyword.\n          \n            A multi-valued index cannot be a covering index.\n          \n            The maximum number of values per record for a multi-valued\n            index is determined by the amount of data than can be stored\n            on a single undo log page, which is 65221 bytes (64K minus\n            315 bytes for overhead), which means that the maximum total\n            length of key values is also 65221 bytes. The maximum number\n            of keys depends on various factors, which prevents defining\n            a specific limit. Tests have shown a multi-valued index to\n            permit as many as 1604 integer keys per record, for example.\n            When the limit is reached, an error similar to the following\n            is reported: ERROR 3905 (HY000): Exceeded max\n            number of values per record for multi-valued index 'idx' by\n            1 value(s).\n\n            The only type of expression that is permitted in a\n            multi-valued key part is a JSON\n            expression. The expression need not reference an existing\n            element in a JSON document inserted into the indexed column,\n            but must itself be syntactically valid.\n          \n            Because index records for the same clustered index record\n            are dispersed throughout a multi-valued index, a\n            multi-valued index does not support range scans or\n            index-only scans.\n          \n            Multi-valued indexes are not permitted in foreign key\n            specifications.\n          \n            Index prefixes cannot be defined for multi-valued indexes.\n          \n            Multi-valued indexes cannot be defined on data cast as\n            BINARY (see the description\n            of the CAST() function).\n          \n            Online creation of a multi-value index is not supported,\n            which means the operation uses\n            ALGORITHM=COPY. See\n            Performance and Space Requirements.\n          \n            Character sets and collations other than the following two\n            combinations of character set and collation are not\n            supported for multi-valued indexes:\n\n\n\n                The binary character set with the\n                default binary collation\n              \n                The utf8mb4 character set with the\n                default utf8mb4_0900_as_cs collation.\n\n\n\n            As with other indexes on columns of\n            InnoDB tables, a multi-valued index\n            cannot be created with USING HASH;\n            attempting to do so results in a warning: This\n            storage engine does not support the HASH index algorithm,\n            storage engine default was used instead.\n            (USING BTREE is supported as usual.)\n\n\n", "\n\n\n\nSpatial Indexes\n\n\n\n\n        The MyISAM,\n        InnoDB,\n        NDB, and\n        ARCHIVE storage engines support\n        spatial columns such as POINT and\n        GEOMETRY.\n        (Section\u00a013.4, \u201cSpatial Data Types\u201d, describes the spatial data\n        types.) However, support for spatial column indexing varies\n        among engines. Spatial and nonspatial indexes on spatial columns\n        are available according to the following rules.\n      \n        Spatial indexes on spatial columns have these characteristics:\n\n\n\n            Available only for InnoDB and\n            MyISAM tables. Specifying\n            SPATIAL INDEX for other storage engines\n            results in an error.\n          \n            An index on a spatial column must be a\n            SPATIAL index. The\n            SPATIAL keyword is thus optional but\n            implicit for creating an index on a spatial column.\n          \n            Available for single spatial columns only. A spatial index\n            cannot be created over multiple spatial columns.\n          \n            Indexed columns must be NOT NULL.\n          \n            Column prefix lengths are prohibited. The full width of each\n            column is indexed.\n          \n            Not permitted for a primary key or unique index.\n\n\n\n        Nonspatial indexes on spatial columns (created with\n        INDEX, UNIQUE, or\n        PRIMARY KEY) have these characteristics:\n\n\n\n            Permitted for any storage engine that supports spatial\n            columns except ARCHIVE.\n          \n            Columns can be NULL unless the index is a\n            primary key.\n          \n            The index type for a non-SPATIAL index\n            depends on the storage engine. Currently, B-tree is used.\n          \n            Permitted for a column that can have NULL\n            values only for InnoDB,\n            MyISAM, and\n            MEMORY tables.\n\n\n", "\n\n\n\nIndex Options\n\n\n\n\n        Following the key part list, index options can be given. An\n        index_option value can be any of the\n        following:\n\n\n\nKEY_BLOCK_SIZE [=]\n            value\n\n            For MyISAM tables,\n            KEY_BLOCK_SIZE optionally specifies the\n            size in bytes to use for index key blocks. The value is\n            treated as a hint; a different size could be used if\n            necessary. A KEY_BLOCK_SIZE value\n            specified for an individual index definition overrides a\n            table-level KEY_BLOCK_SIZE value.\n          \nKEY_BLOCK_SIZE is not supported at the\n            index level for InnoDB tables.\n            See Section\u00a015.1.20, \u201cCREATE TABLE Statement\u201d.\n          \nindex_type\n\n            Some storage engines permit you to specify an index type\n            when creating an index. For example:\n          Press CTRL+C to copy CREATE TABLE lookup (id INT) ENGINE = MEMORY;\nCREATE INDEX id_index ON lookup (id) USING BTREE;\nTable\u00a015.1, \u201cIndex Types Per Storage Engine\u201d\n            shows the permissible index type values supported by\n            different storage engines. Where multiple index types are\n            listed, the first one is the default when no index type\n            specifier is given. Storage engines not listed in the table\n            do not support an index_type\n            clause in index definitions.\n\n\nTable\u00a015.1\u00a0Index Types Per Storage Engine\n\n\nStorage Engine\nPermissible Index Types\n\nInnoDB\nBTREE\n\nMyISAM\nBTREE\n\nMEMORY/HEAP\nHASH, BTREE\n\nNDB\nHASH, BTREE (see note in text)\n\n\n\n\n            The index_type clause cannot be\n            used for FULLTEXT INDEX specifications.\n            Full-text index implementation is storage-engine dependent.\n            Spatial indexes are implemented as R-tree indexes.\n          \n            If you specify an index type that is not valid for a given\n            storage engine, but another index type is available that the\n            engine can use without affecting query results, the engine\n            uses the available type. The parser recognizes\n            RTREE as a type name. This is permitted\n            only for SPATIAL indexes.\n          \nBTREE indexes are implemented by the\n            NDB storage engine as T-tree\n            indexes.\n\n\n\nNote\n\n\n              For indexes on NDB table\n              columns, the USING option can be\n              specified only for a unique index or primary key.\n              USING HASH prevents the creation of an\n              ordered index; otherwise, creating a unique index or\n              primary key on an NDB table\n              automatically results in the creation of both an ordered\n              index and a hash index, each of which indexes the same set\n              of columns.\n            \n              For unique indexes that include one or more\n              NULL columns of an\n              NDB table, the hash index can\n              be used only to look up literal values, which means that\n              IS [NOT] NULL conditions require a full\n              scan of the table. One workaround is to make sure that a\n              unique index using one or more NULL\n              columns on such a table is always created in such a way\n              that it includes the ordered index; that is, avoid\n              employing USING HASH when creating the\n              index.\n\n\n\n            If you specify an index type that is not valid for a given\n            storage engine, but another index type is available that the\n            engine can use without affecting query results, the engine\n            uses the available type. The parser recognizes\n            RTREE as a type name, but currently this\n            cannot be specified for any storage engine.\n\n\n\nNote\n\n\n              Use of the index_type option\n              before the ON\n              tbl_name clause is\n              deprecated; expect support for use of the option in this\n              position to be removed in a future MySQL release. If an\n              index_type option is given in\n              both the earlier and later positions, the final option\n              applies.\n\n\n\nTYPE type_name\n            is recognized as a synonym for USING\n            type_name. However,\n            USING is the preferred form.\n          \n            The following tables show index characteristics for the\n            storage engines that support the\n            index_type option.\n\n\nTable\u00a015.2\u00a0InnoDB Storage Engine Index Characteristics\n\n\nIndex Class\nIndex Type\nStores NULL VALUES\nPermits Multiple NULL Values\nIS NULL Scan Type\nIS NOT NULL Scan Type\n\nPrimary key\nBTREE\nNo\nNo\nN/A\nN/A\n\nUnique\nBTREE\nYes\nYes\nIndex\nIndex\n\nKey\nBTREE\nYes\nYes\nIndex\nIndex\n\nFULLTEXT\nN/A\nYes\nYes\nTable\nTable\n\nSPATIAL\nN/A\nNo\nNo\nN/A\nN/A\n\n\n\n\n\nTable\u00a015.3\u00a0MyISAM Storage Engine Index Characteristics\n\n\nIndex Class\nIndex Type\nStores NULL VALUES\nPermits Multiple NULL Values\nIS NULL Scan Type\nIS NOT NULL Scan Type\n\nPrimary key\nBTREE\nNo\nNo\nN/A\nN/A\n\nUnique\nBTREE\nYes\nYes\nIndex\nIndex\n\nKey\nBTREE\nYes\nYes\nIndex\nIndex\n\nFULLTEXT\nN/A\nYes\nYes\nTable\nTable\n\nSPATIAL\nN/A\nNo\nNo\nN/A\nN/A\n\n\n\n\n\nTable\u00a015.4\u00a0MEMORY Storage Engine Index Characteristics\n\n\nIndex Class\nIndex Type\nStores NULL VALUES\nPermits Multiple NULL Values\nIS NULL Scan Type\nIS NOT NULL Scan Type\n\nPrimary key\nBTREE\nNo\nNo\nN/A\nN/A\n\nUnique\nBTREE\nYes\nYes\nIndex\nIndex\n\nKey\nBTREE\nYes\nYes\nIndex\nIndex\n\nPrimary key\nHASH\nNo\nNo\nN/A\nN/A\n\nUnique\nHASH\nYes\nYes\nIndex\nIndex\n\nKey\nHASH\nYes\nYes\nIndex\nIndex\n\n\n\n\n\nTable\u00a015.5\u00a0NDB Storage Engine Index Characteristics\n\n\nIndex Class\nIndex Type\nStores NULL VALUES\nPermits Multiple NULL Values\nIS NULL Scan Type\nIS NOT NULL Scan Type\n\nPrimary key\nBTREE\nNo\nNo\nIndex\nIndex\n\nUnique\nBTREE\nYes\nYes\nIndex\nIndex\n\nKey\nBTREE\nYes\nYes\nIndex\nIndex\n\nPrimary key\nHASH\nNo\nNo\nTable (see note 1)\nTable (see note 1)\n\nUnique\nHASH\nYes\nYes\nTable (see note 1)\nTable (see note 1)\n\nKey\nHASH\nYes\nYes\nTable (see note 1)\nTable (see note 1)\n\n\n\n\n            Table note:\n          \n            1. USING HASH prevents creation of an\n            implicit ordered index.\n          \nWITH PARSER\n            parser_name\n\n            This option can be used only with\n            FULLTEXT indexes. It associates a parser\n            plugin with the index if full-text indexing and searching\n            operations need special handling.\n            InnoDB and\n            MyISAM support full-text parser\n            plugins. If you have a MyISAM\n            table with an associated full-text parser plugin, you can\n            convert the table to InnoDB using\n            ALTER TABLE. See\n            Full-Text Parser Plugins and\n            Writing Full-Text Parser Plugins for more\n            information.\n          \nCOMMENT\n            'string'\n\n            Index definitions can include an optional comment of up to\n            1024 characters.\n          \n            The\n            MERGE_THRESHOLD\n            for index pages can be configured for individual indexes\n            using the index_option\nCOMMENT clause of the\n            CREATE INDEX statement. For\n            example:\n          Press CTRL+C to copy CREATE TABLE t1 (id INT);\nCREATE INDEX id_index ON t1 (id) COMMENT 'MERGE_THRESHOLD=40';\n            If the page-full percentage for an index page falls below\n            the MERGE_THRESHOLD value when a row is\n            deleted or when a row is shortened by an update operation,\n            InnoDB attempts to merge the\n            index page with a neighboring index page. The default\n            MERGE_THRESHOLD value is 50, which is the\n            previously hardcoded value.\n          \nMERGE_THRESHOLD can also be defined at\n            the index level and table level using\n            CREATE TABLE and\n            ALTER TABLE statements. For\n            more information, see\n            Section\u00a017.8.11, \u201cConfiguring the Merge Threshold for Index Pages\u201d.\n          \nVISIBLE, INVISIBLE\n\n            Specify index visibility. Indexes are visible by default. An\n            invisible index is not used by the optimizer. Specification\n            of index visibility applies to indexes other than primary\n            keys (either explicit or implicit). For more information,\n            see Section\u00a010.3.12, \u201cInvisible Indexes\u201d.\n          \n            The ENGINE_ATTRIBUTE and\n            SECONDARY_ENGINE_ATTRIBUTE are used to\n            specify index attributes for primary and secondary storage\n            engines. The options are reserved for future use.\n          \n            The value assigned to this option is a string literal\n            containing a valid JSON document or an empty string ('').\n            Invalid JSON is rejected.\n          Press CTRL+C to copy CREATE INDEX i1 ON t1 (c1) ENGINE_ATTRIBUTE='{\"key\":\"value\"}';\nENGINE_ATTRIBUTE and\n            SECONDARY_ENGINE_ATTRIBUTE values can be\n            repeated without error. In this case, the last specified\n            value is used.\n          \nENGINE_ATTRIBUTE and\n            SECONDARY_ENGINE_ATTRIBUTE values are not\n            checked by the server, nor are they cleared when the\n            table's storage engine is changed.\n\n\n", "\n\n\n\nTable Copying and Locking Options\n\n\n\n\nALGORITHM and LOCK clauses\n        may be given to influence the table copying method and level of\n        concurrency for reading and writing the table while its indexes\n        are being modified. They have the same meaning as for the\n        ALTER TABLE statement. For more\n        information, see Section\u00a015.1.9, \u201cALTER TABLE Statement\u201d\n\n        NDB Cluster supports online operations using the same\n        ALGORITHM=INPLACE syntax used with the\n        standard MySQL Server. See\n        Section\u00a025.6.12, \u201cOnline Operations with ALTER TABLE in NDB Cluster\u201d, for more\n        information.\n\n"], "Examples": ["CREATE INDEX part_of_name ON customer (name(10));", "CREATE TABLE t1 (\n  col1 VARCHAR(10),\n  col2 VARCHAR(20),\n  INDEX (col1, col2(10))\n);", "CREATE TABLE t1 (col1 INT, col2 INT, INDEX func_index ((ABS(col1))));\nCREATE INDEX idx1 ON t1 ((col1 + col2));\nCREATE INDEX idx2 ON t1 ((col1 + col2), (col1 - col2), col1);\nALTER TABLE t1 ADD INDEX ((col1 * 40) DESC);", "CREATE TABLE tbl (\n  col1 LONGTEXT,\n  INDEX idx1 ((SUBSTRING(col1, 1, 10)))\n);\nSELECT * FROM tbl WHERE SUBSTRING(col1, 1, 9) = '123456789';\nSELECT * FROM tbl WHERE SUBSTRING(col1, 1, 10) = '1234567890';", "CREATE TABLE employees (\n  data JSON,\n  INDEX ((data->>'$.name'))\n);", "CREATE TABLE employees (\n  data JSON,\n  INDEX ((CAST(data->>'$.name' AS CHAR(30))))\n);", "SELECT * FROM employees WHERE data->>'$.name' = 'James';", "CREATE TABLE employees (\n  data JSON,\n  INDEX idx ((CAST(data->>\"$.name\" AS CHAR(30)) COLLATE utf8mb4_bin))\n);\nINSERT INTO employees VALUES\n  ('{ \"name\": \"james\", \"salary\": 9000 }'),\n  ('{ \"name\": \"James\", \"salary\": 10000 }'),\n  ('{ \"name\": \"Mary\", \"salary\": 12000 }'),\n  ('{ \"name\": \"Peter\", \"salary\": 8000 }');\nSELECT * FROM employees WHERE data->>'$.name' = 'James';", "CREATE TABLE employees (\n  data JSON,\n  INDEX idx ((CAST(data->>\"$.name\" AS CHAR(30))))\n);\nINSERT INTO employees VALUES\n  ('{ \"name\": \"james\", \"salary\": 9000 }'),\n  ('{ \"name\": \"James\", \"salary\": 10000 }'),\n  ('{ \"name\": \"Mary\", \"salary\": 12000 }'),\n  ('{ \"name\": \"Peter\", \"salary\": 8000 }');\nSELECT * FROM employees WHERE CAST(data->>'$.name' AS CHAR(30)) = 'James';", "mysql> CREATE TABLE employees (\n         data JSON,\n         generated_col VARCHAR(30) AS (CAST(data->>'$.name' AS CHAR(30)))\n       );\nQuery OK, 0 rows affected, 1 warning (0.03 sec)\n\nmysql> INSERT INTO employees (data)\n       VALUES ('{\"name\": \"james\"}'), ('{\"name\": \"James\"}');\nQuery OK, 2 rows affected, 1 warning (0.01 sec)\nRecords: 2  Duplicates: 0  Warnings: 1\n\nmysql> SELECT * FROM employees WHERE data->>'$.name' = 'James';\n+-------------------+---------------+\n| data              | generated_col |\n+-------------------+---------------+\n| {\"name\": \"James\"} | James         |\n+-------------------+---------------+\n1 row in set (0.00 sec)\n\nmysql> ALTER TABLE employees ADD INDEX idx (generated_col);\nQuery OK, 0 rows affected, 1 warning (0.03 sec)\nRecords: 0  Duplicates: 0  Warnings: 1\n\nmysql> SELECT * FROM employees WHERE data->>'$.name' = 'James';\n+-------------------+---------------+\n| data              | generated_col |\n+-------------------+---------------+\n| {\"name\": \"james\"} | james         |\n| {\"name\": \"James\"} | James         |\n+-------------------+---------------+\n2 rows in set (0.01 sec)", "CREATE TABLE customers (\n    id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    modified DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    custinfo JSON,\n    INDEX zips( (CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)) )\n    );", "CREATE TABLE customers (\n    id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    modified DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    custinfo JSON\n    );\n\nALTER TABLE customers ADD INDEX zips( (CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)) );", "CREATE TABLE customers (\n    id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    modified DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    custinfo JSON\n    );\n\nCREATE INDEX zips ON customers ( (CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)) );", "CREATE TABLE customers (\n    id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    modified DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    custinfo JSON\n    );\n\nALTER TABLE customers ADD INDEX comp(id, modified,\n    (CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)) );", "mysql> CREATE TABLE customers (\n    ->     id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    ->     modified DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    ->     custinfo JSON\n    ->     );\nQuery OK, 0 rows affected (0.51 sec)\n\nmysql> INSERT INTO customers VALUES\n    ->     (NULL, NOW(), '{\"user\":\"Jack\",\"user_id\":37,\"zipcode\":[94582,94536]}'),\n    ->     (NULL, NOW(), '{\"user\":\"Jill\",\"user_id\":22,\"zipcode\":[94568,94507,94582]}'),\n    ->     (NULL, NOW(), '{\"user\":\"Bob\",\"user_id\":31,\"zipcode\":[94477,94507]}'),\n    ->     (NULL, NOW(), '{\"user\":\"Mary\",\"user_id\":72,\"zipcode\":[94536]}'),\n    ->     (NULL, NOW(), '{\"user\":\"Ted\",\"user_id\":56,\"zipcode\":[94507,94582]}');\nQuery OK, 5 rows affected (0.07 sec)\nRecords: 5  Duplicates: 0  Warnings: 0", "mysql> SELECT * FROM customers\n    ->     WHERE 94507 MEMBER OF(custinfo->'$.zipcode');\n+----+---------------------+-------------------------------------------------------------------+\n| id | modified            | custinfo                                                          |\n+----+---------------------+-------------------------------------------------------------------+\n|  2 | 2019-06-29 22:23:12 | {\"user\": \"Jill\", \"user_id\": 22, \"zipcode\": [94568, 94507, 94582]} |\n|  3 | 2019-06-29 22:23:12 | {\"user\": \"Bob\", \"user_id\": 31, \"zipcode\": [94477, 94507]}         |\n|  5 | 2019-06-29 22:23:12 | {\"user\": \"Ted\", \"user_id\": 56, \"zipcode\": [94507, 94582]}         |\n+----+---------------------+-------------------------------------------------------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT * FROM customers\n    ->     WHERE JSON_CONTAINS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+---------------------+-------------------------------------------------------------------+\n| id | modified            | custinfo                                                          |\n+----+---------------------+-------------------------------------------------------------------+\n|  2 | 2019-06-29 22:23:12 | {\"user\": \"Jill\", \"user_id\": 22, \"zipcode\": [94568, 94507, 94582]} |\n|  5 | 2019-06-29 22:23:12 | {\"user\": \"Ted\", \"user_id\": 56, \"zipcode\": [94507, 94582]}         |\n+----+---------------------+-------------------------------------------------------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT * FROM customers\n    ->     WHERE JSON_OVERLAPS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+---------------------+-------------------------------------------------------------------+\n| id | modified            | custinfo                                                          |\n+----+---------------------+-------------------------------------------------------------------+\n|  1 | 2019-06-29 22:23:12 | {\"user\": \"Jack\", \"user_id\": 37, \"zipcode\": [94582, 94536]}        |\n|  2 | 2019-06-29 22:23:12 | {\"user\": \"Jill\", \"user_id\": 22, \"zipcode\": [94568, 94507, 94582]} |\n|  3 | 2019-06-29 22:23:12 | {\"user\": \"Bob\", \"user_id\": 31, \"zipcode\": [94477, 94507]}         |\n|  5 | 2019-06-29 22:23:12 | {\"user\": \"Ted\", \"user_id\": 56, \"zipcode\": [94507, 94582]}         |\n+----+---------------------+-------------------------------------------------------------------+\n4 rows in set (0.00 sec)", "mysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE 94507 MEMBER OF(custinfo->'$.zipcode');\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    5 |   100.00 | Using where |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE JSON_CONTAINS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    5 |   100.00 | Using where |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE JSON_OVERLAPS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    5 |   100.00 | Using where |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.01 sec)", "mysql> ALTER TABLE customers\n    ->     ADD INDEX zips( (CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)) );\nQuery OK, 0 rows affected (0.47 sec)\nRecords: 0  Duplicates: 0  Warnings: 0", "mysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE 94507 MEMBER OF(custinfo->'$.zipcode');\n+----+-------------+-----------+------------+------+---------------+------+---------+-------+------+----------+-------------+\n| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref   | rows | filtered | Extra       |\n+----+-------------+-----------+------------+------+---------------+------+---------+-------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | ref  | zips          | zips | 9       | const |    1 |   100.00 | Using where |\n+----+-------------+-----------+------------+------+---------------+------+---------+-------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE JSON_CONTAINS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table     | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | range | zips          | zips | 9       | NULL |    6 |   100.00 | Using where |\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> EXPLAIN SELECT * FROM customers\n    ->     WHERE JSON_OVERLAPS(custinfo->'$.zipcode', CAST('[94507,94582]' AS JSON));\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n| id | select_type | table     | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n|  1 | SIMPLE      | customers | NULL       | range | zips          | zips | 9       | NULL |    6 |   100.00 | Using where |\n+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+-------------+\n1 row in set, 1 warning (0.01 sec)", "mysql> ALTER TABLE customers DROP INDEX zips;\nQuery OK, 0 rows affected (0.55 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> ALTER TABLE customers\n    ->     ADD UNIQUE INDEX zips((CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)));\nERROR 1062 (23000): Duplicate entry '[94507, ' for key 'customers.zips'\nmysql> ALTER TABLE customers\n    ->     ADD INDEX zips((CAST(custinfo->'$.zipcode' AS UNSIGNED ARRAY)));\nQuery OK, 0 rows affected (0.36 sec)\nRecords: 0  Duplicates: 0  Warnings: 0", "CREATE TABLE lookup (id INT) ENGINE = MEMORY;\nCREATE INDEX id_index ON lookup (id) USING BTREE;", "CREATE TABLE t1 (id INT);\nCREATE INDEX id_index ON t1 (id) COMMENT 'MERGE_THRESHOLD=40';", "CREATE INDEX i1 ON t1 (c1) ENGINE_ATTRIBUTE='{\"key\":\"value\"}';"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-logfile-group.html"], "Title": ["15.1.16 CREATE LOGFILE GROUP Statement"], "Feature": ["CREATE LOGFILE GROUP logfile_group\n    ADD UNDOFILE 'undo_file'\n    [INITIAL_SIZE [=] initial_size]\n    [UNDO_BUFFER_SIZE [=] undo_buffer_size]\n    [REDO_BUFFER_SIZE [=] redo_buffer_size]\n    [NODEGROUP [=] nodegroup_id]\n    [WAIT]\n    [COMMENT [=] 'string']\n    ENGINE [=] engine_name"], "Description": ["\n      This statement creates a new log file group named\n      logfile_group having a single undo file\n      named 'undo_file'. A\n      CREATE LOGFILE GROUP statement has\n      one and only one ADD UNDOFILE clause. For rules\n      covering the naming of log file groups, see\n      Section\u00a011.2, \u201cSchema Object Names\u201d.\n", "\n\nNote\n\n\n        All NDB Cluster Disk Data objects share the same namespace. This\n        means that each Disk Data object must be\n        uniquely named (and not merely each Disk Data object of a given\n        type). For example, you cannot have a tablespace and a log file\n        group with the same name, or a tablespace and a data file with\n        the same name.\n\n", "\n      There can be only one log file group per NDB Cluster instance at\n      any given time.\n    ", "\n      The optional INITIAL_SIZE parameter sets the\n      undo file's initial size; if not specified, it defaults to\n      128M (128 megabytes). The optional\n      UNDO_BUFFER_SIZE parameter sets the size used\n      by the undo buffer for the log file group; The default value for\n      UNDO_BUFFER_SIZE is 8M\n      (eight megabytes); this value cannot exceed the amount of system\n      memory available. Both of these parameters are specified in bytes.\n      You may optionally follow either or both of these with a\n      one-letter abbreviation for an order of magnitude, similar to\n      those used in my.cnf. Generally, this is\u00a0one\n      of the letters M (for megabytes) or\n      G (for gigabytes).\n    ", "\n      Memory used for UNDO_BUFFER_SIZE comes from the\n      global pool whose size is determined by the value of the\n      SharedGlobalMemory data\n      node configuration parameter. This includes any default value\n      implied for this option by the setting of the\n      InitialLogFileGroup data\n      node configuration parameter.\n    ", "\n      The maximum permitted for UNDO_BUFFER_SIZE is\n      629145600 (600 MB).\n    ", "\n      On 32-bit systems, the maximum supported value for\n      INITIAL_SIZE is 4294967296 (4 GB). (Bug #29186)\n    ", "\n      The minimum allowed value for INITIAL_SIZE is\n      1048576 (1 MB).\n    ", "\n      The ENGINE option determines the storage engine\n      to be used by this log file group, with\n      engine_name being the name of the\n      storage engine. This must be NDB (or\n      NDBCLUSTER). If\n      ENGINE is not set, MySQL tries to use the\n      engine specified by the\n      default_storage_engine server\n      system variable. In any case, if the engine is not specified as\n      NDB or\n      NDBCLUSTER, the CREATE\n      LOGFILE GROUP statement appears to succeed but actually\n      fails to create the log file group, as shown here:\n    ", "Press CTRL+C to copy mysql> CREATE LOGFILE GROUP lg1\n    ->     ADD UNDOFILE 'undo.dat' INITIAL_SIZE = 10M;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+-------+------+------------------------------------------------------------------------------------------------+\n| Level | Code | Message                                                                                        |\n+-------+------+------------------------------------------------------------------------------------------------+\n| Error | 1478 | Table storage engine 'InnoDB' does not support the create option 'TABLESPACE or LOGFILE GROUP' |\n+-------+------+------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> DROP LOGFILE GROUP lg1 ENGINE = NDB;\nERROR 1529 (HY000): Failed to drop LOGFILE GROUP\n\nmysql> CREATE LOGFILE GROUP lg1\n    ->     ADD UNDOFILE 'undo.dat' INITIAL_SIZE = 10M\n    ->     ENGINE = NDB;\nQuery OK, 0 rows affected (2.97 sec)", "\n      The fact that the CREATE LOGFILE GROUP\n      statement does not actually return an error when a storage engine\n      other than NDB is specified, but rather appears\n      to succeed, is a known issue which we hope to address in a future\n      version of NDB Cluster.\n    ", "\nREDO_BUFFER_SIZE,\n      NODEGROUP, WAIT, and\n      COMMENT are parsed but ignored, and so have no\n      effect in MySQL 8.4. These options are intended for\n      future expansion.\n    ", "\n      When used with ENGINE [=] NDB, a log file group\n      and associated undo log file are created on each Cluster data\n      node. You can verify that the undo files were created and obtain\n      information about them by querying the Information Schema\n      FILES table. For example:\n    ", "Press CTRL+C to copy mysql> SELECT LOGFILE_GROUP_NAME, LOGFILE_GROUP_NUMBER, EXTRA\n    -> FROM INFORMATION_SCHEMA.FILES\n    -> WHERE FILE_NAME = 'undo_10.dat';\n+--------------------+----------------------+----------------+\n| LOGFILE_GROUP_NAME | LOGFILE_GROUP_NUMBER | EXTRA          |\n+--------------------+----------------------+----------------+\n| lg_3               |                   11 | CLUSTER_NODE=3 |\n| lg_3               |                   11 | CLUSTER_NODE=4 |\n+--------------------+----------------------+----------------+\n2 rows in set (0.06 sec)", "\nCREATE LOGFILE GROUP is useful only\n      with Disk Data storage for NDB Cluster. See\n      Section\u00a025.6.11, \u201cNDB Cluster Disk Data Tables\u201d.\n"], "Examples": ["mysql> CREATE LOGFILE GROUP lg1\n    ->     ADD UNDOFILE 'undo.dat' INITIAL_SIZE = 10M;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+-------+------+------------------------------------------------------------------------------------------------+\n| Level | Code | Message                                                                                        |\n+-------+------+------------------------------------------------------------------------------------------------+\n| Error | 1478 | Table storage engine 'InnoDB' does not support the create option 'TABLESPACE or LOGFILE GROUP' |\n+-------+------+------------------------------------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> DROP LOGFILE GROUP lg1 ENGINE = NDB;\nERROR 1529 (HY000): Failed to drop LOGFILE GROUP\n\nmysql> CREATE LOGFILE GROUP lg1\n    ->     ADD UNDOFILE 'undo.dat' INITIAL_SIZE = 10M\n    ->     ENGINE = NDB;\nQuery OK, 0 rows affected (2.97 sec)", "mysql> SELECT LOGFILE_GROUP_NAME, LOGFILE_GROUP_NUMBER, EXTRA\n    -> FROM INFORMATION_SCHEMA.FILES\n    -> WHERE FILE_NAME = 'undo_10.dat';\n+--------------------+----------------------+----------------+\n| LOGFILE_GROUP_NAME | LOGFILE_GROUP_NUMBER | EXTRA          |\n+--------------------+----------------------+----------------+\n| lg_3               |                   11 | CLUSTER_NODE=3 |\n| lg_3               |                   11 | CLUSTER_NODE=4 |\n+--------------------+----------------------+----------------+\n2 rows in set (0.06 sec)"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-procedure.html"], "Title": ["15.1.17 CREATE PROCEDURE and CREATE FUNCTION Statements"], "Feature": ["CREATE\n    [DEFINER = user]\n    PROCEDURE [IF NOT EXISTS] sp_name ([proc_parameter[,...]])\n    [characteristic ...] routine_body\n\nCREATE\n    [DEFINER = user]\n    FUNCTION [IF NOT EXISTS] sp_name ([func_parameter[,...]])\n    RETURNS type\n    [characteristic ...] routine_body\n\nproc_parameter:\n    [ IN | OUT | INOUT ] param_name type\n\nfunc_parameter:\n    param_name type\n\ntype:\n    Any valid MySQL data type\n\ncharacteristic: {\n    COMMENT 'string'\n  | LANGUAGE SQL\n  | [NOT] DETERMINISTIC\n  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n}\n\nroutine_body:\n    SQL routine"], "Description": ["\n      These statements are used to create a stored routine (a stored\n      procedure or function). That is, the specified routine becomes\n      known to the server. By default, a stored routine is associated\n      with the default database. To associate the routine explicitly\n      with a given database, specify the name as\n      db_name.sp_name when you create it.\n    ", "\n      The CREATE FUNCTION statement is also used in\n      MySQL to support loadable functions. See\n      Section\u00a015.7.4.1, \u201cCREATE FUNCTION Statement for Loadable Functions\u201d. A loadable function\n      can be regarded as an external stored function. Stored functions\n      share their namespace with loadable functions. See\n      Section\u00a011.2.5, \u201cFunction Name Parsing and Resolution\u201d, for the rules describing\n      how the server interprets references to different kinds of\n      functions.\n    ", "\n      To invoke a stored procedure, use the\n      CALL statement (see\n      Section\u00a015.2.1, \u201cCALL Statement\u201d). To invoke a stored function, refer to it\n      in an expression. The function returns a value during expression\n      evaluation.\n    ", "\nCREATE PROCEDURE and\n      CREATE FUNCTION require the\n      CREATE ROUTINE privilege. If the\n      DEFINER clause is present, the privileges\n      required depend on the user value, as\n      discussed in Section\u00a027.6, \u201cStored Object Access Control\u201d. If binary\n      logging is enabled, CREATE FUNCTION\n      might require the SUPER privilege,\n      as discussed in Section\u00a027.7, \u201cStored Program Binary Logging\u201d.\n    ", "\n      By default, MySQL automatically grants the\n      ALTER ROUTINE and\n      EXECUTE privileges to the routine\n      creator. This behavior can be changed by disabling the\n      automatic_sp_privileges system\n      variable. See Section\u00a027.2.2, \u201cStored Routines and MySQL Privileges\u201d.\n    ", "\n      The DEFINER and SQL SECURITY\n      clauses specify the security context to be used when checking\n      access privileges at routine execution time, as described later in\n      this section.\n    ", "\n      If the routine name is the same as the name of a built-in SQL\n      function, a syntax error occurs unless you use a space between the\n      name and the following parenthesis when defining the routine or\n      invoking it later. For this reason, avoid using the names of\n      existing SQL functions for your own stored routines.\n    ", "\n      The IGNORE_SPACE SQL mode\n      applies to built-in functions, not to stored routines. It is\n      always permissible to have spaces after a stored routine name,\n      regardless of whether\n      IGNORE_SPACE is enabled.\n    ", "\nIF NOT EXISTS prevents an error from occurring\n      if there already exists a routine with the same name. This option\n      is supported with both CREATE FUNCTION and\n      CREATE PROCEDURE.\n    ", "\n      If a built-in function with the same name already exists,\n      attempting to create a stored function with CREATE\n      FUNCTION ... IF NOT EXISTS succeeds with a warning\n      indicating that it has the same name as a native function; this is\n      no different than when performing the same CREATE\n      FUNCTION statement without specifying IF NOT\n      EXISTS.\n    ", "\n      If a loadable function with the same name already exists,\n      attempting to create a stored function using IF NOT\n      EXISTS succeeds with a warning. This is the same as\n      without specifying IF NOT EXISTS.\n    ", "\n      See Function Name Resolution, for more\n      information.\n    ", "\n      The parameter list enclosed within parentheses must always be\n      present. If there are no parameters, an empty parameter list of\n      () should be used. Parameter names are not\n      case-sensitive.\n    ", "\n      Each parameter is an IN parameter by default.\n      To specify otherwise for a parameter, use the keyword\n      OUT or INOUT before the\n      parameter name.\n", "\n\nNote\n\n\n        Specifying a parameter as IN,\n        OUT, or INOUT is valid\n        only for a PROCEDURE. For a\n        FUNCTION, parameters are always regarded as\n        IN parameters.\n\n", "\n      An IN parameter passes a value into a\n      procedure. The procedure might modify the value, but the\n      modification is not visible to the caller when the procedure\n      returns. An OUT parameter passes a value from\n      the procedure back to the caller. Its initial value is\n      NULL within the procedure, and its value is\n      visible to the caller when the procedure returns. An\n      INOUT parameter is initialized by the caller,\n      can be modified by the procedure, and any change made by the\n      procedure is visible to the caller when the procedure returns.\n    ", "\n      For each OUT or INOUT\n      parameter, pass a user-defined variable in the\n      CALL statement that invokes the\n      procedure so that you can obtain its value when the procedure\n      returns. If you are calling the procedure from within another\n      stored procedure or function, you can also pass a routine\n      parameter or local routine variable as an OUT\n      or INOUT parameter. If you are calling the\n      procedure from within a trigger, you can also pass\n      NEW.col_name as an\n      OUT or INOUT parameter.\n    ", "\n      For information about the effect of unhandled conditions on\n      procedure parameters, see\n      Section\u00a015.6.7.8, \u201cCondition Handling and OUT or INOUT Parameters\u201d.\n    ", "\n      Routine parameters cannot be referenced in statements prepared\n      within the routine; see\n      Section\u00a027.8, \u201cRestrictions on Stored Programs\u201d.\n    ", "\n      The following example shows a simple stored procedure that, given\n      a country code, counts the number of cities for that country that\n      appear in the city table of the\n      world database. The country code is passed\n      using an IN parameter, and the city count is\n      returned using an OUT parameter:\n    ", "Press CTRL+C to copy mysql> delimiter //\n\nmysql> CREATE PROCEDURE citycount (IN country CHAR(3), OUT cities INT)\n       BEGIN\n         SELECT COUNT(*) INTO cities FROM world.city\n         WHERE CountryCode = country;\n       END//\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> delimiter ;\n\nmysql> CALL citycount('JPN', @cities); -- cities in Japan\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT @cities;\n+---------+\n| @cities |\n+---------+\n|     248 |\n+---------+\n1 row in set (0.00 sec)\n\nmysql> CALL citycount('FRA', @cities); -- cities in France\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT @cities;\n+---------+\n| @cities |\n+---------+\n|      40 |\n+---------+\n1 row in set (0.00 sec)", "\n      The example uses the mysql client\n      delimiter command to change the statement\n      delimiter from ; to // while\n      the procedure is being defined. This enables the\n      ; delimiter used in the procedure body to be\n      passed through to the server rather than being interpreted by\n      mysql itself. See\n      Section\u00a027.1, \u201cDefining Stored Programs\u201d.\n    ", "\n      The RETURNS clause may be specified only for a\n      FUNCTION, for which it is mandatory. It\n      indicates the return type of the function, and the function body\n      must contain a RETURN\n      value statement. If the\n      RETURN statement returns a value of\n      a different type, the value is coerced to the proper type. For\n      example, if a function specifies an\n      ENUM or\n      SET value in the\n      RETURNS clause, but the\n      RETURN statement returns an\n      integer, the value returned from the function is the string for\n      the corresponding ENUM member of\n      set of SET members.\n    ", "\n      The following example function takes a parameter, performs an\n      operation using an SQL function, and returns the result. In this\n      case, it is unnecessary to use delimiter\n      because the function definition contains no internal\n      ; statement delimiters:\n    ", "Press CTRL+C to copy mysql> CREATE FUNCTION hello (s CHAR(20))\nmysql> RETURNS CHAR(50) DETERMINISTIC\n       RETURN CONCAT('Hello, ',s,'!');\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT hello('world');\n+----------------+\n| hello('world') |\n+----------------+\n| Hello, world!  |\n+----------------+\n1 row in set (0.00 sec)", "\n      Parameter types and function return types can be declared to use\n      any valid data type. The COLLATE attribute can\n      be used if preceded by a CHARACTER SET\n      specification.\n    ", "\n      The routine_body consists of a valid\n      SQL routine statement. This can be a simple statement such as\n      SELECT or\n      INSERT, or a compound statement\n      written using BEGIN and END.\n      Compound statements can contain declarations, loops, and other\n      control structure statements. The syntax for these statements is\n      described in Section\u00a015.6, \u201cCompound Statement Syntax\u201d. In\n      practice, stored functions tend to use compound statements, unless\n      the body consists of a single\n      RETURN statement.\n    ", "\n      MySQL permits routines to contain DDL statements, such as\n      CREATE and DROP. MySQL also\n      permits stored procedures (but not stored functions) to contain\n      SQL transaction statements such as\n      COMMIT. Stored functions may not\n      contain statements that perform explicit or implicit commit or\n      rollback. Support for these statements is not required by the SQL\n      standard, which states that each DBMS vendor may decide whether to\n      permit them.\n    ", "\n      Statements that return a result set can be used within a stored\n      procedure but not within a stored function. This prohibition\n      includes SELECT statements that do\n      not have an INTO\n      var_list clause and other\n      statements such as SHOW,\n      EXPLAIN, and\n      CHECK TABLE. For statements that\n      can be determined at function definition time to return a result\n      set, a Not allowed to return a result set from a\n      function error occurs\n      (ER_SP_NO_RETSET). For statements\n      that can be determined only at runtime to return a result set, a\n      PROCEDURE %s can't return a result set in the given\n      context error occurs\n      (ER_SP_BADSELECT).\n    ", "\nUSE statements within stored\n      routines are not permitted. When a routine is invoked, an implicit\n      USE db_name is\n      performed (and undone when the routine terminates). The causes the\n      routine to have the given default database while it executes.\n      References to objects in databases other than the routine default\n      database should be qualified with the appropriate database name.\n    ", "\n      For additional information about statements that are not permitted\n      in stored routines, see\n      Section\u00a027.8, \u201cRestrictions on Stored Programs\u201d.\n    ", "\n      For information about invoking stored procedures from within\n      programs written in a language that has a MySQL interface, see\n      Section\u00a015.2.1, \u201cCALL Statement\u201d.\n    ", "\n      MySQL stores the sql_mode system\n      variable setting in effect when a routine is created or altered,\n      and always executes the routine with this setting in force,\n      regardless of the current server SQL mode when the\n      routine begins executing.\n    ", "\n      The switch from the SQL mode of the invoker to that of the routine\n      occurs after evaluation of arguments and assignment of the\n      resulting values to routine parameters. If you define a routine in\n      strict SQL mode but invoke it in nonstrict mode, assignment of\n      arguments to routine parameters does not take place in strict\n      mode. If you require that expressions passed to a routine be\n      assigned in strict SQL mode, you should invoke the routine with\n      strict mode in effect.\n    ", "\n      The COMMENT characteristic is a MySQL\n      extension, and may be used to describe the stored routine. This\n      information is displayed by the SHOW CREATE\n      PROCEDURE and SHOW CREATE\n      FUNCTION statements.\n    ", "\n      The LANGUAGE characteristic indicates the\n      language in which the routine is written. The server ignores this\n      characteristic; only SQL routines are supported.\n    ", "\n      A routine is considered \u201cdeterministic\u201d if it always\n      produces the same result for the same input parameters, and\n      \u201cnot deterministic\u201d otherwise. If neither\n      DETERMINISTIC nor NOT\n      DETERMINISTIC is given in the routine definition, the\n      default is NOT DETERMINISTIC. To declare that a\n      function is deterministic, you must specify\n      DETERMINISTIC explicitly.\n    ", "\n      Assessment of the nature of a routine is based on the\n      \u201chonesty\u201d of the creator: MySQL does not check that a\n      routine declared DETERMINISTIC is free of\n      statements that produce nondeterministic results. However,\n      misdeclaring a routine might affect results or affect performance.\n      Declaring a nondeterministic routine as\n      DETERMINISTIC might lead to unexpected results\n      by causing the optimizer to make incorrect execution plan choices.\n      Declaring a deterministic routine as\n      NONDETERMINISTIC might diminish performance by\n      causing available optimizations not to be used.\n    ", "\n      If binary logging is enabled, the DETERMINISTIC\n      characteristic affects which routine definitions MySQL accepts.\n      See Section\u00a027.7, \u201cStored Program Binary Logging\u201d.\n    ", "\n      A routine that contains the NOW()\n      function (or its synonyms) or\n      RAND() is nondeterministic, but it\n      might still be replication-safe. For\n      NOW(), the binary log includes the\n      timestamp and replicates correctly.\n      RAND() also replicates correctly as\n      long as it is called only a single time during the execution of a\n      routine. (You can consider the routine execution timestamp and\n      random number seed as implicit inputs that are identical on the\n      source and replica.)\n    ", "\n      Several characteristics provide information about the nature of\n      data use by the routine. In MySQL, these characteristics are\n      advisory only. The server does not use them to constrain what\n      kinds of statements a routine is permitted to execute.\n", "\n\nCONTAINS SQL indicates that the routine\n          does not contain statements that read or write data. This is\n          the default if none of these characteristics is given\n          explicitly. Examples of such statements are SET @x =\n          1 or DO RELEASE_LOCK('abc'),\n          which execute but neither read nor write data.\n        \nNO SQL indicates that the routine contains\n          no SQL statements.\n        \nREADS SQL DATA indicates that the routine\n          contains statements that read data (for example,\n          SELECT), but not statements\n          that write data.\n        \nMODIFIES SQL DATA indicates that the\n          routine contains statements that may write data (for example,\n          INSERT or\n          DELETE).\n\n", "\n      The SQL SECURITY characteristic can be\n      DEFINER or INVOKER to\n      specify the security context; that is, whether the routine\n      executes using the privileges of the account named in the routine\n      DEFINER clause or the user who invokes it. This\n      account must have permission to access the database with which the\n      routine is associated. The default value is\n      DEFINER. The user who invokes the routine must\n      have the EXECUTE privilege for it,\n      as must the DEFINER account if the routine\n      executes in definer security context.\n    ", "\n      The DEFINER clause specifies the MySQL account\n      to be used when checking access privileges at routine execution\n      time for routines that have the SQL SECURITY\n      DEFINER characteristic.\n    ", "\n      If the DEFINER clause is present, the\n      user value should be a MySQL account\n      specified as\n      'user_name'@'host_name',\n      CURRENT_USER, or\n      CURRENT_USER(). The permitted\n      user values depend on the privileges\n      you hold, as discussed in\n      Section\u00a027.6, \u201cStored Object Access Control\u201d. Also see that section\n      for additional information about stored routine security.\n    ", "\n      If the DEFINER clause is omitted, the default\n      definer is the user who executes the CREATE\n      PROCEDURE or CREATE\n      FUNCTION statement. This is the same as specifying\n      DEFINER = CURRENT_USER explicitly.\n    ", "\n      Within the body of a stored routine that is defined with the\n      SQL SECURITY DEFINER characteristic, the\n      CURRENT_USER function returns the\n      routine's DEFINER value. For information about\n      user auditing within stored routines, see\n      Section\u00a08.2.23, \u201cSQL-Based Account Activity Auditing\u201d.\n    ", "\n      Consider the following procedure, which displays a count of the\n      number of MySQL accounts listed in the\n      mysql.user system table:\n    ", "Press CTRL+C to copy CREATE DEFINER = 'admin'@'localhost' PROCEDURE account_count()\nBEGIN\n  SELECT 'Number of accounts:', COUNT(*) FROM mysql.user;\nEND;", "\n      The procedure is assigned a DEFINER account of\n      'admin'@'localhost' no matter which user\n      defines it. It executes with the privileges of that account no\n      matter which user invokes it (because the default security\n      characteristic is DEFINER). The procedure\n      succeeds or fails depending on whether invoker has the\n      EXECUTE privilege for it and\n      'admin'@'localhost' has the\n      SELECT privilege for the\n      mysql.user table.\n    ", "\n      Now suppose that the procedure is defined with the SQL\n      SECURITY INVOKER characteristic:\n    ", "Press CTRL+C to copy CREATE DEFINER = 'admin'@'localhost' PROCEDURE account_count()\nSQL SECURITY INVOKER\nBEGIN\n  SELECT 'Number of accounts:', COUNT(*) FROM mysql.user;\nEND;", "\n      The procedure still has a DEFINER of\n      'admin'@'localhost', but in this case, it\n      executes with the privileges of the invoking user. Thus, the\n      procedure succeeds or fails depending on whether the invoker has\n      the EXECUTE privilege for it and\n      the SELECT privilege for the\n      mysql.user table.\n    ", "\n      By default, when a routine with the SQL SECURITY\n      DEFINER characteristic is executed, MySQL Server does\n      not set any active roles for the MySQL account named in the\n      DEFINER clause, only the default roles. The\n      exception is if the\n      activate_all_roles_on_login\n      system variable is enabled, in which case MySQL Server sets all\n      roles granted to the DEFINER user, including\n      mandatory roles. Any privileges granted through roles are\n      therefore not checked by default when the\n      CREATE PROCEDURE or\n      CREATE FUNCTION statement is\n      issued. For stored programs, if execution should occur with roles\n      different from the default, the program body can execute\n      SET ROLE to activate the required\n      roles. This must be done with caution since the privileges\n      assigned to roles can be changed.\n    ", "\n      The server handles the data type of a routine parameter, local\n      routine variable created with\n      DECLARE, or function return value\n      as follows:\n", "\n\n          Assignments are checked for data type mismatches and overflow.\n          Conversion and overflow problems result in warnings, or errors\n          in strict SQL mode.\n        \n          Only scalar values can be assigned. For example, a statement\n          such as SET x = (SELECT 1, 2) is invalid.\n        \n          For character data types, if CHARACTER SET\n          is included in the declaration, the specified character set\n          and its default collation is used. If the\n          COLLATE attribute is also present, that\n          collation is used rather than the default collation.\n        \n          If CHARACTER SET and\n          COLLATE are not present, the database\n          character set and collation in effect at routine creation time\n          are used. To avoid having the server use the database\n          character set and collation, provide an explicit\n          CHARACTER SET and a\n          COLLATE attribute for character data\n          parameters.\n        \n          If you alter the database default character set or collation,\n          stored routines that are to use the new database defaults must\n          be dropped and recreated.\n        \n          The database character set and collation are given by the\n          value of the\n          character_set_database and\n          collation_database system\n          variables. For more information, see\n          Section\u00a012.3.3, \u201cDatabase Character Set and Collation\u201d.\n\n"], "Examples": ["mysql> delimiter //\n\nmysql> CREATE PROCEDURE citycount (IN country CHAR(3), OUT cities INT)\n       BEGIN\n         SELECT COUNT(*) INTO cities FROM world.city\n         WHERE CountryCode = country;\n       END//\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> delimiter ;\n\nmysql> CALL citycount('JPN', @cities); -- cities in Japan\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT @cities;\n+---------+\n| @cities |\n+---------+\n|     248 |\n+---------+\n1 row in set (0.00 sec)\n\nmysql> CALL citycount('FRA', @cities); -- cities in France\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT @cities;\n+---------+\n| @cities |\n+---------+\n|      40 |\n+---------+\n1 row in set (0.00 sec)", "mysql> CREATE FUNCTION hello (s CHAR(20))\nmysql> RETURNS CHAR(50) DETERMINISTIC\n       RETURN CONCAT('Hello, ',s,'!');\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT hello('world');\n+----------------+\n| hello('world') |\n+----------------+\n| Hello, world!  |\n+----------------+\n1 row in set (0.00 sec)", "CREATE DEFINER = 'admin'@'localhost' PROCEDURE account_count()\nBEGIN\n  SELECT 'Number of accounts:', COUNT(*) FROM mysql.user;\nEND;", "CREATE DEFINER = 'admin'@'localhost' PROCEDURE account_count()\nSQL SECURITY INVOKER\nBEGIN\n  SELECT 'Number of accounts:', COUNT(*) FROM mysql.user;\nEND;"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-server.html"], "Title": ["15.1.18 CREATE SERVER Statement"], "Feature": ["CREATE SERVER server_name\n    FOREIGN DATA WRAPPER wrapper_name\n    OPTIONS (option [, option] ...)\n\noption: {\n    HOST character-literal\n  | DATABASE character-literal\n  | USER character-literal\n  | PASSWORD character-literal\n  | SOCKET character-literal\n  | OWNER character-literal\n  | PORT numeric-literal\n}"], "Description": ["\n      This statement creates the definition of a server for use with the\n      FEDERATED storage engine. The CREATE\n      SERVER statement creates a new row in the\n      servers table in the mysql\n      database. This statement requires the\n      SUPER privilege.\n    ", "\n      The server_name\n      should be a unique reference to the server. Server definitions are\n      global within the scope of the server, it is not possible to\n      qualify the server definition to a specific database.\n      server_name has a\n      maximum length of 64 characters (names longer than 64 characters\n      are silently truncated), and is case-insensitive. You may specify\n      the name as a quoted string.\n    ", "\n      The wrapper_name is\n      an identifier and may be quoted with single quotation marks.\n    ", "\n      For each option you\n      must specify either a character literal or numeric literal.\n      Character literals are UTF-8, support a maximum length of 64\n      characters and default to a blank (empty) string. String literals\n      are silently truncated to 64 characters. Numeric literals must be\n      a number between 0 and 9999, default value is 0.\n", "\n\nNote\n\n\n        The OWNER option is currently not applied,\n        and has no effect on the ownership or operation of the server\n        connection that is created.\n\n", "\n      The CREATE SERVER statement creates an entry in\n      the mysql.servers table that can later be used\n      with the CREATE TABLE statement\n      when creating a FEDERATED table. The options\n      that you specify are used to populate the columns in the\n      mysql.servers table. The table columns are\n      Server_name, Host,\n      Db, Username,\n      Password, Port and\n      Socket.\n    ", "\n      For example:\n    ", "Press CTRL+C to copy CREATE SERVER s\nFOREIGN DATA WRAPPER mysql\nOPTIONS (USER 'Remote', HOST '198.51.100.106', DATABASE 'test');", "\n      Be sure to specify all options necessary to establish a connection\n      to the server. The user name, host name, and database name are\n      mandatory. Other options might be required as well, such as\n      password.\n    ", "\n      The data stored in the table can be used when creating a\n      connection to a FEDERATED table:\n    ", "Press CTRL+C to copy CREATE TABLE t (s1 INT) ENGINE=FEDERATED CONNECTION='s';", "\n      For more information, see\n      Section\u00a018.8, \u201cThe FEDERATED Storage Engine\u201d.\n    ", "\nCREATE SERVER causes an implicit commit. See\n      Section\u00a015.3.3, \u201cStatements That Cause an Implicit Commit\u201d.\n    ", "\nCREATE SERVER is not written to the binary log,\n      regardless of the logging format that is in use.\n"], "Examples": ["CREATE SERVER s\nFOREIGN DATA WRAPPER mysql\nOPTIONS (USER 'Remote', HOST '198.51.100.106', DATABASE 'test');", "CREATE TABLE t (s1 INT) ENGINE=FEDERATED CONNECTION='s';"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-spatial-reference-system.html"], "Title": ["15.1.19 CREATE SPATIAL REFERENCE SYSTEM Statement"], "Feature": ["CREATE OR REPLACE SPATIAL REFERENCE SYSTEM\n    srid srs_attribute ...\n\nCREATE SPATIAL REFERENCE SYSTEM\n    [IF NOT EXISTS]\n    srid srs_attribute ...\n\nsrs_attribute: {\n    NAME 'srs_name'\n  | DEFINITION 'definition'\n  | ORGANIZATION 'org_name' IDENTIFIED BY org_id\n  | DESCRIPTION 'description'\n}\n\nsrid, org_id: 32-bit unsigned integer"], "Description": ["\n      This statement creates a\n      spatial reference\n      system (SRS) definition and stores it in the data\n      dictionary. It requires the SUPER\n      privilege. The resulting data dictionary entry can be inspected\n      using the INFORMATION_SCHEMA\nST_SPATIAL_REFERENCE_SYSTEMS table.\n    ", "\n      SRID values must be unique, so if neither OR\n      REPLACE nor IF NOT EXISTS is\n      specified, an error occurs if an SRS definition with the given\n      srid value already exists.\n    ", "\n      With CREATE OR REPLACE syntax, any existing SRS\n      definition with the same SRID value is replaced, unless the SRID\n      value is used by some column in an existing table. In that case,\n      an error occurs. For example:\n    ", "Press CTRL+C to copy mysql> CREATE OR REPLACE SPATIAL REFERENCE SYSTEM 4326 ...;\nERROR 3716 (SR005): Can't modify SRID 4326. There is at\nleast one column depending on it.", "\n      To identify which column or columns use the SRID, use this query,\n      replacing 4326 with the SRID of the definition you are trying to\n      create:\n    ", "Press CTRL+C to copy SELECT * FROM INFORMATION_SCHEMA.ST_GEOMETRY_COLUMNS WHERE SRS_ID=4326;", "\n      With CREATE ... IF NOT EXISTS syntax, any\n      existing SRS definition with the same SRID value causes the new\n      definition to be ignored and a warning occurs.\n    ", "\n      SRID values must be in the range of 32-bit unsigned integers, with\n      these restrictions:\n", "\n\n          SRID 0 is a valid SRID but cannot be used with\n          CREATE SPATIAL REFERENCE\n          SYSTEM.\n        \n          If the value is in a reserved SRID range, a warning occurs.\n          Reserved ranges are [0, 32767] (reserved by EPSG),\n          [60,000,000, 69,999,999] (reserved by EPSG), and\n          [2,000,000,000, 2,147,483,647] (reserved by MySQL). EPSG\n          stands for the European Petroleum\n          Survey Group.\n        \n          Users should not create SRSs with SRIDs in the reserved\n          ranges. Doing so runs the risk of the SRIDs conflicting with\n          future SRS definitions distributed with MySQL, with the result\n          that the new system-provided SRSs are not installed for MySQL\n          upgrades or that the user-defined SRSs are overwritten.\n\n", "\n      Attributes for the statement must satisfy these conditions:\n", "\n\n          Attributes can be given in any order, but no attribute can be\n          given more than once.\n        \n          The NAME and DEFINITION\n          attributes are mandatory.\n        \n          The NAME\nsrs_name attribute value must be\n          unique. The combination of the ORGANIZATION\norg_name and\n          org_id attribute values must be\n          unique.\n        \n          The NAME\nsrs_name attribute value and\n          ORGANIZATION\norg_name attribute value cannot be\n          empty or begin or end with whitespace.\n        \n          String values in attribute specifications cannot contain\n          control characters, including newline.\n        \n          The following table shows the maximum lengths for string\n          attribute values.\n\n\nTable\u00a015.6\u00a0CREATE SPATIAL REFERENCE SYSTEM Attribute Lengths\n\n\nAttribute\nMaximum Length (characters)\n\nNAME\n80\n\nDEFINITION\n4096\n\nORGANIZATION\n256\n\nDESCRIPTION\n2048\n\n\n\n\n", "\n      Here is an example CREATE SPATIAL REFERENCE\n      SYSTEM statement. The DEFINITION\n      value is reformatted across multiple lines for readability. (For\n      the statement to be legal, the value actually must be given on a\n      single line.)\n    ", "Press CTRL+C to copy CREATE SPATIAL REFERENCE SYSTEM 4120\nNAME 'Greek'\nORGANIZATION 'EPSG' IDENTIFIED BY 4120\nDEFINITION\n  'GEOGCS[\"Greek\",DATUM[\"Greek\",SPHEROID[\"Bessel 1841\",\n  6377397.155,299.1528128,AUTHORITY[\"EPSG\",\"7004\"]],\n  AUTHORITY[\"EPSG\",\"6120\"]],PRIMEM[\"Greenwich\",0,\n  AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.017453292519943278,\n  AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Lat\",NORTH],AXIS[\"Lon\",EAST],\n  AUTHORITY[\"EPSG\",\"4120\"]]';", "\n      The grammar for SRS definitions is based on the grammar defined in\n      OpenGIS Implementation Specification: Coordinate\n      Transformation Services, Revision 1.00, OGC 01-009,\n      January 12, 2001, Section 7.2. This specification is available at\n      http://www.opengeospatial.org/standards/ct.\n    ", "\n      MySQL incorporates these changes to the specification:\n", "\n\n          Only the <horz cs> production rule is\n          implemented (that is, geographic and projected SRSs).\n        \n          There is an optional, nonstandard\n          <authority> clause for\n          <parameter>. This makes it possible\n          to recognize projection parameters by authority instead of\n          name.\n        \n          The specification does not make AXIS\n          clauses mandatory in GEOGCS spatial\n          reference system definitions. However, if there are no\n          AXIS clauses, MySQL cannot determine\n          whether a definition has axes in latitude-longitude order or\n          longitude-latitude order. MySQL enforces the nonstandard\n          requirement that each GEOGCS definition\n          must include two AXIS clauses. One must be\n          NORTH or SOUTH, and the\n          other EAST or WEST. The\n          AXIS clause order determines whether the\n          definition has axes in latitude-longitude order or\n          longitude-latitude order.\n        \n          SRS definitions may not contain newlines.\n\n", "\n      If an SRS definition specifies an authority code for the\n      projection (which is recommended), an error occurs if the\n      definition is missing mandatory parameters. In this case, the\n      error message indicates what the problem is. The projection\n      methods and mandatory parameters that MySQL supports are shown in\n      Table\u00a015.7, \u201cSupported Spatial Reference System Projection Methods\u201d and\n      Table\u00a015.8, \u201cSpatial Reference System Projection Parameters\u201d.\n    ", "\n      The following table shows the projection methods that MySQL\n      supports. MySQL permits unknown projection methods but cannot\n      check the definition for mandatory parameters and cannot convert\n      spatial data to or from an unknown projection. For detailed\n      explanations of how each projection works, including formulas, see\n      EPSG\n      Guidance Note 7-2.\n", "\nTable\u00a015.7\u00a0Supported Spatial Reference System Projection Methods\n\n\nEPSG Code\nProjection Name\nMandatory Parameters (EPSG Codes)\n\n1024\nPopular Visualisation Pseudo Mercator\n8801, 8802, 8806, 8807\n\n1027\nLambert Azimuthal Equal Area (Spherical)\n8801, 8802, 8806, 8807\n\n1028\nEquidistant Cylindrical\n8823, 8802, 8806, 8807\n\n1029\nEquidistant Cylindrical (Spherical)\n8823, 8802, 8806, 8807\n\n1041\nKrovak (North Orientated)\n8811, 8833, 1036, 8818, 8819, 8806, 8807\n\n1042\nKrovak Modified\n8811, 8833, 1036, 8818, 8819, 8806, 8807, 8617, 8618, 1026, 1027, 1028,\n            1029, 1030, 1031, 1032, 1033, 1034, 1035\n\n1043\nKrovak Modified (North Orientated)\n8811, 8833, 1036, 8818, 8819, 8806, 8807, 8617, 8618, 1026, 1027, 1028,\n            1029, 1030, 1031, 1032, 1033, 1034, 1035\n\n1051\nLambert Conic Conformal (2SP Michigan)\n8821, 8822, 8823, 8824, 8826, 8827, 1038\n\n1052\nColombia Urban\n8801, 8802, 8806, 8807, 1039\n\n9801\nLambert Conic Conformal (1SP)\n8801, 8802, 8805, 8806, 8807\n\n9802\nLambert Conic Conformal (2SP)\n8821, 8822, 8823, 8824, 8826, 8827\n\n9803\nLambert Conic Conformal (2SP Belgium)\n8821, 8822, 8823, 8824, 8826, 8827\n\n9804\nMercator (variant A)\n8801, 8802, 8805, 8806, 8807\n\n9805\nMercator (variant B)\n8823, 8802, 8806, 8807\n\n9806\nCassini-Soldner\n8801, 8802, 8806, 8807\n\n9807\nTransverse Mercator\n8801, 8802, 8805, 8806, 8807\n\n9808\nTransverse Mercator (South Orientated)\n8801, 8802, 8805, 8806, 8807\n\n9809\nOblique Stereographic\n8801, 8802, 8805, 8806, 8807\n\n9810\nPolar Stereographic (variant A)\n8801, 8802, 8805, 8806, 8807\n\n9811\nNew Zealand Map Grid\n8801, 8802, 8806, 8807\n\n9812\nHotine Oblique Mercator (variant A)\n8811, 8812, 8813, 8814, 8815, 8806, 8807\n\n9813\nLaborde Oblique Mercator\n8811, 8812, 8813, 8815, 8806, 8807\n\n9815\nHotine Oblique Mercator (variant B)\n8811, 8812, 8813, 8814, 8815, 8816, 8817\n\n9816\nTunisia Mining Grid\n8821, 8822, 8826, 8827\n\n9817\nLambert Conic Near-Conformal\n8801, 8802, 8805, 8806, 8807\n\n9818\nAmerican Polyconic\n8801, 8802, 8806, 8807\n\n9819\nKrovak\n8811, 8833, 1036, 8818, 8819, 8806, 8807\n\n9820\nLambert Azimuthal Equal Area\n8801, 8802, 8806, 8807\n\n9822\nAlbers Equal Area\n8821, 8822, 8823, 8824, 8826, 8827\n\n9824\nTransverse Mercator Zoned Grid System\n8801, 8830, 8831, 8805, 8806, 8807\n\n9826\nLambert Conic Conformal (West Orientated)\n8801, 8802, 8805, 8806, 8807\n\n9828\nBonne (South Orientated)\n8801, 8802, 8806, 8807\n\n9829\nPolar Stereographic (variant B)\n8832, 8833, 8806, 8807\n\n9830\nPolar Stereographic (variant C)\n8832, 8833, 8826, 8827\n\n9831\nGuam Projection\n8801, 8802, 8806, 8807\n\n9832\nModified Azimuthal Equidistant\n8801, 8802, 8806, 8807\n\n9833\nHyperbolic Cassini-Soldner\n8801, 8802, 8806, 8807\n\n9834\nLambert Cylindrical Equal Area (Spherical)\n8823, 8802, 8806, 8807\n\n9835\nLambert Cylindrical Equal Area\n8823, 8802, 8806, 8807\n\n\nEPSG Code\nProjection Name\nMandatory Parameters (EPSG Codes)\n\n", "\n      The following table shows the projection parameters that MySQL\n      recognizes. Recognition occurs primarily by authority code. If\n      there is no authority code, MySQL falls back to case-insensitive\n      string matching on the parameter name. For details about each\n      parameter, look it up by code in the\n      EPSG Online\n      Registry.\n", "\nTable\u00a015.8\u00a0Spatial Reference System Projection Parameters\n\n\nEPSG Code\nFallback Name (Recognized by MySQL)\nEPSG Name\n\n1026\nc1\nC1\n\n1027\nc2\nC2\n\n1028\nc3\nC3\n\n1029\nc4\nC4\n\n1030\nc5\nC5\n\n1031\nc6\nC6\n\n1032\nc7\nC7\n\n1033\nc8\nC8\n\n1034\nc9\nC9\n\n1035\nc10\nC10\n\n1036\nazimuth\nCo-latitude of cone axis\n\n1038\nellipsoid_scale_factor\nEllipsoid scaling factor\n\n1039\nprojection_plane_height_at_origin\nProjection plane origin height\n\n8617\nevaluation_point_ordinate_1\nOrdinate 1 of evaluation point\n\n8618\nevaluation_point_ordinate_2\nOrdinate 2 of evaluation point\n\n8801\nlatitude_of_origin\nLatitude of natural origin\n\n8802\ncentral_meridian\nLongitude of natural origin\n\n8805\nscale_factor\nScale factor at natural origin\n\n8806\nfalse_easting\nFalse easting\n\n8807\nfalse_northing\nFalse northing\n\n8811\nlatitude_of_center\nLatitude of projection centre\n\n8812\nlongitude_of_center\nLongitude of projection centre\n\n8813\nazimuth\nAzimuth of initial line\n\n8814\nrectified_grid_angle\nAngle from Rectified to Skew Grid\n\n8815\nscale_factor\nScale factor on initial line\n\n8816\nfalse_easting\nEasting at projection centre\n\n8817\nfalse_northing\nNorthing at projection centre\n\n8818\npseudo_standard_parallel_1\nLatitude of pseudo standard parallel\n\n8819\nscale_factor\nScale factor on pseudo standard parallel\n\n8821\nlatitude_of_origin\nLatitude of false origin\n\n8822\ncentral_meridian\nLongitude of false origin\n\n8823\nstandard_parallel_1, standard_parallel1\nLatitude of 1st standard parallel\n\n8824\nstandard_parallel_2, standard_parallel2\nLatitude of 2nd standard parallel\n\n8826\nfalse_easting\nEasting at false origin\n\n8827\nfalse_northing\nNorthing at false origin\n\n8830\ninitial_longitude\nInitial longitude\n\n8831\nzone_width\nZone width\n\n8832\nstandard_parallel\nLatitude of standard parallel\n\n8833\nlongitude_of_center\nLongitude of origin\n\n\nEPSG Code\nFallback Name (Recognized by MySQL)\nEPSG Name\n\n"], "Examples": ["mysql> CREATE OR REPLACE SPATIAL REFERENCE SYSTEM 4326 ...;\nERROR 3716 (SR005): Can't modify SRID 4326. There is at\nleast one column depending on it.", "SELECT * FROM INFORMATION_SCHEMA.ST_GEOMETRY_COLUMNS WHERE SRS_ID=4326;", "CREATE SPATIAL REFERENCE SYSTEM 4120\nNAME 'Greek'\nORGANIZATION 'EPSG' IDENTIFIED BY 4120\nDEFINITION\n  'GEOGCS[\"Greek\",DATUM[\"Greek\",SPHEROID[\"Bessel 1841\",\n  6377397.155,299.1528128,AUTHORITY[\"EPSG\",\"7004\"]],\n  AUTHORITY[\"EPSG\",\"6120\"]],PRIMEM[\"Greenwich\",0,\n  AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.017453292519943278,\n  AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Lat\",NORTH],AXIS[\"Lon\",EAST],\n  AUTHORITY[\"EPSG\",\"4120\"]]';"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-database.html"], "Title": ["15.1.2 ALTER DATABASE Statement"], "Feature": ["ALTER {DATABASE | SCHEMA} [db_name]\n    alter_option ...\n\nalter_option: {\n    [DEFAULT] CHARACTER SET [=] charset_name\n  | [DEFAULT] COLLATE [=] collation_name\n  | [DEFAULT] ENCRYPTION [=] {'Y' | 'N'}\n  | READ ONLY [=] {DEFAULT | 0 | 1}\n}"], "Description": ["\nALTER DATABASE enables you to\n      change the overall characteristics of a database. These\n      characteristics are stored in the data dictionary. This statement\n      requires the ALTER privilege on the\n      database. ALTER\n      SCHEMA is a synonym for ALTER\n      DATABASE.\n    ", "\n      If the database name is omitted, the statement applies to the\n      default database. In that case, an error occurs if there is no\n      default database.\n    ", "\n      For any alter_option omitted from the\n      statement, the database retains its current option value, with the\n      exception that changing the character set may change the collation\n      and vice versa.\n", "\nCharacter Set and Collation OptionsEncryption OptionRead Only Option\n", {"Sub-title": "Character Set and Collation Options", "Illustration": ["\n      The CHARACTER SET option changes the default\n      database character set. The COLLATE option\n      changes the default database collation. For information about\n      character set and collation names, see Chapter\u00a012, Character Sets, Collations, Unicode.\n    ", "\n      To see the available character sets and collations, use the\n      SHOW CHARACTER SET and\n      SHOW COLLATION statements,\n      respectively. See Section\u00a015.7.7.4, \u201cSHOW CHARACTER SET Statement\u201d, and\n      Section\u00a015.7.7.5, \u201cSHOW COLLATION Statement\u201d.\n    ", "\n      A stored routine that uses the database defaults when the routine\n      is created includes those defaults as part of its definition. (In\n      a stored routine, variables with character data types use the\n      database defaults if the character set or collation are not\n      specified explicitly. See Section\u00a015.1.17, \u201cCREATE PROCEDURE and CREATE FUNCTION Statements\u201d.) If\n      you change the default character set or collation for a database,\n      any stored routines that are to use the new defaults must be\n      dropped and recreated.\n"]}, {"Sub-title": "Encryption Option", "Illustration": ["\n      The ENCRYPTION option, defines the default\n      database encryption, which is inherited by tables created in the\n      database. The permitted values are 'Y'\n      (encryption enabled) and 'N' (encryption\n      disabled).\n    ", "\n      The mysql system schema cannot be set to\n      default encryption. The existing tables within it are part of the\n      general mysql tablespace, which may be\n      encrypted. The information_schema contains only\n      views. It is not possible to create any tables within it. There is\n      nothing on the disk to encrypt. All tables in the\n      performance_schema use the\n      PERFORMANCE_SCHEMA engine, which is\n      purely in-memory. It is not possible to create any other tables in\n      it. There is nothing on the disk to encrypt.\n    ", "\n      Only newly created tables inherit the default database encryption.\n      For existing tables associated with the database, their encryption\n      remains unchanged. If the\n      table_encryption_privilege_check\n      system variable is enabled, the\n      TABLE_ENCRYPTION_ADMIN privilege is\n      required to specify a default encryption setting that differs from\n      the value of the\n      default_table_encryption system\n      variable. For more information, see\n      Defining an Encryption Default for Schemas and General Tablespaces.\n"]}, {"Sub-title": "Read Only Option", "Illustration": ["\n      The READ ONLY option controls whether to permit\n      modification of the database and objects within it. The permitted\n      values are DEFAULT or 0 (not\n      read only) and 1 (read only). This option is\n      useful for database migration because a database for which\n      READ ONLY is enabled can be migrated to another\n      MySQL instance without concern that the database might be changed\n      during the operation.\n    ", "\n      With NDB Cluster, making a database read only on one\n      mysqld server is synchronized to other\n      mysqld servers in the same cluster, so that the\n      database becomes read only on all mysqld\n      servers.\n    ", "\n      The READ ONLY option, if enabled, is displayed\n      in the INFORMATION_SCHEMA\nSCHEMATA_EXTENSIONS table. See\n      Section\u00a028.3.32, \u201cThe INFORMATION_SCHEMA SCHEMATA_EXTENSIONS Table\u201d.\n    ", "\n      The READ ONLY option cannot be enabled for\n      these system schemas: mysql,\n      information_schema,\n      performance_schema.\n    ", "\n      In ALTER DATABASE statements, the\n      READ ONLY option interacts with other instances\n      of itself and with other options as follows:\n", "\n\n          An error occurs if multiple instances of READ\n          ONLY conflict (for example, READ ONLY = 1\n          READ ONLY = 0).\n        \n          An ALTER DATABASE statement\n          that contains only (nonconflicting) READ\n          ONLY options is permitted even for a read-only\n          database.\n        \n          A mix of (nonconflicting) READ ONLY options\n          with other options is permitted if the read-only state of the\n          database either before or after the statement permits\n          modifications. If the read-only state both before and after\n          prohibits changes, an error occurs.\n        \n          This statement succeeds whether or not the database is read\n          only:\n        Press CTRL+C to copy ALTER DATABASE mydb READ ONLY = 0 DEFAULT COLLATE utf8mb4_bin;\n          This statement succeeds if the database is not read only, but\n          fails if it is already read only:\n        Press CTRL+C to copy ALTER DATABASE mydb READ ONLY = 1 DEFAULT COLLATE utf8mb4_bin;\n", "\n      Enabling READ ONLY affects all users of the\n      database, with these exceptions that are not subject to read-only\n      checks:\n", "\n\n          Statements executed by the server as part of server\n          initialization, restart, upgrade, or replication.\n        \n          Statements in a file named at server startup by the\n          init_file system variable.\n        \nTEMPORARY tables; it is possible to create,\n          alter, drop, and write to TEMPORARY tables\n          in a read-only database.\n        \n          NDB Cluster non-SQL inserts and updates.\n\n", "\n      Other than for the excepted operations just listed, enabling\n      READ ONLY prohibits write operations to the\n      database and its objects, including their definitions, data, and\n      metadata. The following list details affected SQL statements and\n      operations:\n", "\n\n          The database itself:\n\n\n\nCREATE DATABASE\n\nALTER DATABASE (except to\n              change the READ ONLY option)\n            \nDROP DATABASE\n\n\n\n          Views:\n\n\n\nCREATE VIEW\n\nALTER VIEW\n\nDROP VIEW\n\n              Selecting from views that invoke functions with side\n              effects.\n            \n              Updating updatable views.\n            \n              Statements that create or drop objects in a writable\n              database are rejected if they affect metadata of a view in\n              a read-only database (for example, by making the view\n              valid or invalid).\n\n\n\n          Stored routines:\n\n\n\nCREATE PROCEDURE\n\nDROP PROCEDURE\n\nCALL (of procedures with\n              side effects)\n            \nCREATE FUNCTION\n\nDROP FUNCTION\n\nSELECT (of functions with\n              side effects)\n            \n              For procedures and functions, read-only checks follow\n              prelocking behavior. For\n              CALL statements, read-only\n              checks are done on a per-statement basis, so if some\n              conditionally executed statement writing to a read-only\n              database does not actually execute, the call still\n              succeeds. On the other hand, for a function called within\n              a SELECT, execution of the\n              function body happens in prelocked mode. As long as a some\n              statement within the function writes to a read-only\n              database, execution of the function fails with an error\n              regardless of whether the statement actually executes.\n\n\n\n          Triggers:\n\n\n\nCREATE TRIGGER\n\nDROP TRIGGER\n\n              Trigger invocation.\n\n\n\n          Events:\n\n\n\nCREATE EVENT\n\nALTER EVENT\n\nDROP EVENT\n\n              Event execution:\n\n\n\n                  Executing an event in the database fails because that\n                  would change the last-execution timestamp, which is\n                  event metadata stored in the data dictionary. Failure\n                  of event execution also has the effect of causing the\n                  event scheduler to stop.\n                \n                  If an event writes to an object in a read-only\n                  database, execution of the event fails with an error,\n                  but the event scheduler is not stopped.\n\n\n\n\n\n          Tables:\n\n\n\nCREATE TABLE\n\nALTER TABLE\n\nCREATE INDEX\n\nDROP INDEX\n\nRENAME TABLE\n\nTRUNCATE TABLE\n\nDROP TABLE\n\nDELETE\n\nINSERT\n\nIMPORT TABLE\n\nLOAD DATA\n\nLOAD XML\n\nREPLACE\n\nUPDATE\n\n              For cascading foreign keys where the child table is in a\n              read-only database, updates and deletes on the parent are\n              rejected even if the child table is not directly affected.\n            \n              For a MERGE table such as\n              CREATE TABLE s1.t(i int) ENGINE MERGE UNION\n              (s2.t, s3.t), INSERT_METHOD=..., the following\n              behavior applies:\n\n\n\n                  Inserting into the MERGE table\n                  (INSERT into s1.t) fails if at\n                  least one of s1,\n                  s2, s3 is read\n                  only, regardless of insert method. The insert is\n                  refused even if it would actually end up in a writable\n                  table.\n                \n                  Dropping the MERGE table\n                  (DROP TABLE s1.t) succeeds as long\n                  as s1 is not read only. It is\n                  permitted to drop a MERGE table\n                  that refers to a read-only database.\n\n\n\n\n\n", "\n      An ALTER DATABASE statement blocks\n      until all concurrent transactions that have already accessed an\n      object in the database being altered have committed. Conversely, a\n      write transaction accessing an object in a database being altered\n      in a concurrent ALTER DATABASE\n      blocks until the ALTER DATABASE has\n      committed.\n    ", "\n      If the Clone plugin is used to clone a local or remote data\n      directory, the databases in the clone retain the read-only state\n      they had in the source data directory. The read-only state does\n      not affect the cloning process itself. If it is not desirable to\n      have the same database read-only state in the clone, the option\n      must be changed explicitly for the clone after the cloning process\n      has finished, using ALTER DATABASE\n      operations on the clone.\n    ", "\n      When cloning from a donor to a recipient, if the recipient has a\n      user database that is read only, cloning fails with an error\n      message. Cloning may be retried after making the database\n      writable.\n    ", "\nREAD ONLY is permitted for\n      ALTER DATABASE, but not for\n      CREATE DATABASE. However, for a\n      read-only database, the statement produced by\n      SHOW CREATE DATABASE does include\n      READ ONLY=1 within a comment to indicate its\n      read-only status:\n    ", "Press CTRL+C to copy mysql> ALTER DATABASE mydb READ ONLY = 1;\nmysql> SHOW CREATE DATABASE mydb\\G\n*************************** 1. row ***************************\n       Database: mydb\nCreate Database: CREATE DATABASE `mydb`\n                 /*!40100 DEFAULT CHARACTER SET utf8mb4\n                          COLLATE utf8mb4_0900_ai_ci */\n                 /*!80016 DEFAULT ENCRYPTION='N' */\n                 /* READ ONLY = 1 */", "\n      If the server executes a CREATE\n      DATABASE statement containing such a comment, the server\n      ignores the comment and the READ ONLY option is\n      not processed. This has implications for\n      mysqldump, which uses SHOW\n      CREATE DATABASE to produce CREATE\n      DATABASE statements in dump output:\n", "\n\n          In a dump file, the CREATE\n          DATABASE statement for a read-only database contains\n          the commented READ ONLY option.\n        \n          The dump file can be restored as usual, but because the server\n          ignores the commented READ ONLY option, the\n          restored database is not read only. If\n          the database is to be read only after being restored, you must\n          execute ALTER DATABASE manually\n          to make it so.\n\n", "\n      Suppose that mydb is read only and you dump it\n      as follows:\n    ", "\n      A restore operation later must be followed by\n      ALTER DATABASE if\n      mydb should still be read only:\n    ", "Press CTRL+C to copy $> mysql\nmysql> SOURCE mydb.sql;\nmysql> ALTER DATABASE mydb READ ONLY = 1;", "\n      MySQL Enterprise Backup is not subject to this issue. It backs up and restores a\n      read-only database like any other, but enables the READ\n      ONLY option at restore time if it was enabled at backup\n      time.\n    ", "\nALTER DATABASE is written to the\n      binary log, so a change to the READ ONLY option\n      on a replication source server also affects replicas. To prevent\n      this from happening, binary logging must be disabled prior to\n      execution of the ALTER DATABASE\n      statement. For example, to prepare for migrating a database\n      without affecting replicas, perform these operations:\n", "\n\n          Within a single session, disable binary logging and enable\n          READ ONLY for the database:\n        Press CTRL+C to copy mysql> SET sql_log_bin = OFF;\nmysql> ALTER DATABASE mydb READ ONLY = 1;\n          Dump the database, for example, with\n          mysqldump:\n        Press CTRL+C to copy $> mysqldump --databases mydb > mydb.sql\n          Within a single session, disable binary logging and disable\n          READ ONLY for the database:\n        Press CTRL+C to copy mysql> SET sql_log_bin = OFF;\nmysql> ALTER DATABASE mydb READ ONLY = 0;\n"]}], "Examples": ["ALTER DATABASE mydb READ ONLY = 0 DEFAULT COLLATE utf8mb4_bin;", "ALTER DATABASE mydb READ ONLY = 1 DEFAULT COLLATE utf8mb4_bin;", "mysql> ALTER DATABASE mydb READ ONLY = 1;\nmysql> SHOW CREATE DATABASE mydb\\G\n*************************** 1. row ***************************\n       Database: mydb\nCreate Database: CREATE DATABASE `mydb`\n                 /*!40100 DEFAULT CHARACTER SET utf8mb4\n                          COLLATE utf8mb4_0900_ai_ci */\n                 /*!80016 DEFAULT ENCRYPTION='N' */\n                 /* READ ONLY = 1 */", "mysql> SET sql_log_bin = OFF;\nmysql> ALTER DATABASE mydb READ ONLY = 1;", "mysql> SET sql_log_bin = OFF;\nmysql> ALTER DATABASE mydb READ ONLY = 0;"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-table.html"], "Title": ["15.1.20 CREATE TABLE Statement"], "Feature": ["CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n    (create_definition,...)\n    [table_options]\n    [partition_options]\n\nCREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n    [(create_definition,...)]\n    [table_options]\n    [partition_options]\n    [IGNORE | REPLACE]\n    [AS] query_expression\n\nCREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name\n    { LIKE old_tbl_name | (LIKE old_tbl_name) }\n\ncreate_definition: {\n    col_name column_definition\n  | {INDEX | KEY} [index_name] [index_type] (key_part,...)\n      [index_option] ...\n  | {FULLTEXT | SPATIAL} [INDEX | KEY] [index_name] (key_part,...)\n      [index_option] ...\n  | [CONSTRAINT [symbol]] PRIMARY KEY\n      [index_type] (key_part,...)\n      [index_option] ...\n  | [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY]\n      [index_name] [index_type] (key_part,...)\n      [index_option] ...\n  | [CONSTRAINT [symbol]] FOREIGN KEY\n      [index_name] (col_name,...)\n      reference_definition\n  | check_constraint_definition\n}\n\ncolumn_definition: {\n    data_type [NOT NULL | NULL] [DEFAULT {literal | (expr)} ]\n      [VISIBLE | INVISIBLE]\n      [AUTO_INCREMENT] [UNIQUE [KEY]] [[PRIMARY] KEY]\n      [COMMENT 'string']\n      [COLLATE collation_name]\n      [COLUMN_FORMAT {FIXED | DYNAMIC | DEFAULT}]\n      [ENGINE_ATTRIBUTE [=] 'string']\n      [SECONDARY_ENGINE_ATTRIBUTE [=] 'string']\n      [STORAGE {DISK | MEMORY}]\n      [reference_definition]\n      [check_constraint_definition]\n  | data_type\n      [COLLATE collation_name]\n      [GENERATED ALWAYS] AS (expr)\n      [VIRTUAL | STORED] [NOT NULL | NULL]\n      [VISIBLE | INVISIBLE]\n      [UNIQUE [KEY]] [[PRIMARY] KEY]\n      [COMMENT 'string']\n      [reference_definition]\n      [check_constraint_definition]\n}\n\ndata_type:\n    (see Chapter 13, Data Types)\n\nkey_part: {col_name [(length)] | (expr)} [ASC | DESC]\n\nindex_type:\n    USING {BTREE | HASH}\n\nindex_option: {\n    KEY_BLOCK_SIZE [=] value\n  | index_type\n  | WITH PARSER parser_name\n  | COMMENT 'string'\n  | {VISIBLE | INVISIBLE}\n  |ENGINE_ATTRIBUTE [=] 'string'\n  |SECONDARY_ENGINE_ATTRIBUTE [=] 'string'\n}\n\ncheck_constraint_definition:\n    [CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED]\n\nreference_definition:\n    REFERENCES tbl_name (key_part,...)\n      [MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]\n      [ON DELETE reference_option]\n      [ON UPDATE reference_option]\n\nreference_option:\n    RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT\n\ntable_options:\n    table_option [[,] table_option] ...\n\ntable_option: {\n    AUTOEXTEND_SIZE [=] value\n  | AUTO_INCREMENT [=] value\n  | AVG_ROW_LENGTH [=] value\n  | [DEFAULT] CHARACTER SET [=] charset_name\n  | CHECKSUM [=] {0 | 1}\n  | [DEFAULT] COLLATE [=] collation_name\n  | COMMENT [=] 'string'\n  | COMPRESSION [=] {'ZLIB' | 'LZ4' | 'NONE'}\n  | CONNECTION [=] 'connect_string'\n  | {DATA | INDEX} DIRECTORY [=] 'absolute path to directory'\n  | DELAY_KEY_WRITE [=] {0 | 1}\n  | ENCRYPTION [=] {'Y' | 'N'}\n  | ENGINE [=] engine_name\n  | ENGINE_ATTRIBUTE [=] 'string'\n  | INSERT_METHOD [=] { NO | FIRST | LAST }\n  | KEY_BLOCK_SIZE [=] value\n  | MAX_ROWS [=] value\n  | MIN_ROWS [=] value\n  | PACK_KEYS [=] {0 | 1 | DEFAULT}\n  | PASSWORD [=] 'string'\n  | ROW_FORMAT [=] {DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT}\n  | START TRANSACTION \n  | SECONDARY_ENGINE_ATTRIBUTE [=] 'string'\n  | STATS_AUTO_RECALC [=] {DEFAULT | 0 | 1}\n  | STATS_PERSISTENT [=] {DEFAULT | 0 | 1}\n  | STATS_SAMPLE_PAGES [=] value\n  | tablespace_option\n  | UNION [=] (tbl_name[,tbl_name]...)\n}\n\npartition_options:\n    PARTITION BY\n        { [LINEAR] HASH(expr)\n        | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list)\n        | RANGE{(expr) | COLUMNS(column_list)}\n        | LIST{(expr) | COLUMNS(column_list)} }\n    [PARTITIONS num]\n    [SUBPARTITION BY\n        { [LINEAR] HASH(expr)\n        | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list) }\n      [SUBPARTITIONS num]\n    ]\n    [(partition_definition [, partition_definition] ...)]\n\npartition_definition:\n    PARTITION partition_name\n        [VALUES\n            {LESS THAN {(expr | value_list) | MAXVALUE}\n            |\n            IN (value_list)}]\n        [[STORAGE] ENGINE [=] engine_name]\n        [COMMENT [=] 'string' ]\n        [DATA DIRECTORY [=] 'data_dir']\n        [INDEX DIRECTORY [=] 'index_dir']\n        [MAX_ROWS [=] max_number_of_rows]\n        [MIN_ROWS [=] min_number_of_rows]\n        [TABLESPACE [=] tablespace_name]\n        [(subpartition_definition [, subpartition_definition] ...)]\n\nsubpartition_definition:\n    SUBPARTITION logical_name\n        [[STORAGE] ENGINE [=] engine_name]\n        [COMMENT [=] 'string' ]\n        [DATA DIRECTORY [=] 'data_dir']\n        [INDEX DIRECTORY [=] 'index_dir']\n        [MAX_ROWS [=] max_number_of_rows]\n        [MIN_ROWS [=] min_number_of_rows]\n        [TABLESPACE [=] tablespace_name]\n\ntablespace_option:\n    TABLESPACE tablespace_name [STORAGE DISK]\n  | [TABLESPACE tablespace_name] STORAGE MEMORY\n\nquery_expression:\n    SELECT ...   (Some valid select or union statement)", "SELECT * FROM tbl_name WHERE auto_col IS NULL", "CREATE TABLE tbl_name ... TABLESPACE [=] tablespace_name", "CREATE TABLE tbl_name ... TABLESPACE [=] innodb_system", "CREATE TABLE tbl_name ... TABLESPACE [=] innodb_file_per_table", "COMMENT = 'Data for the years previous to 1999'"], "Description": ["\nCREATE TABLE creates a table with\n      the given name. You must have the\n      CREATE privilege for the table.\n    ", "\n      By default, tables are created in the default database, using the\n      InnoDB storage engine. An error\n      occurs if the table exists, if there is no default database, or if\n      the database does not exist.\n    ", "\n      MySQL has no limit on the number of tables. The underlying file\n      system may have a limit on the number of files that represent\n      tables. Individual storage engines may impose engine-specific\n      constraints. InnoDB permits up to 4 billion\n      tables.\n    ", "\n      For information about the physical representation of a table, see\n      Section\u00a015.1.20.1, \u201cFiles Created by CREATE TABLE\u201d.\n    ", "\n      There are several aspects to the CREATE\n      TABLE statement, described under the following topics in\n      this section:\n", "\nTable NameTemporary TablesTable Cloning and CopyingColumn Data Types and AttributesIndexes, Foreign Keys, and CHECK ConstraintsTable OptionsTable Partitioning\n", {"Sub-title": "Table Name", "Illustration": ["\n\ntbl_name\n\n          The table name can be specified as\n          db_name.tbl_name to create the\n          table in a specific database. This works regardless of whether\n          there is a default database, assuming that the database\n          exists. If you use quoted identifiers, quote the database and\n          table names separately. For example, write\n          `mydb`.`mytbl`, not\n          `mydb.mytbl`.\n        \n          Rules for permissible table names are given in\n          Section\u00a011.2, \u201cSchema Object Names\u201d.\n        \nIF NOT EXISTS\n\n          Prevents an error from occurring if the table exists. However,\n          there is no verification that the existing table has a\n          structure identical to that indicated by the\n          CREATE TABLE statement.\n\n"]}, {"Sub-title": "Temporary Tables", "Illustration": ["\n      You can use the TEMPORARY keyword when creating\n      a table. A TEMPORARY table is visible only\n      within the current session, and is dropped automatically when the\n      session is closed. For more information, see\n      Section\u00a015.1.20.2, \u201cCREATE TEMPORARY TABLE Statement\u201d.\n"]}, {"Sub-title": "Table Cloning and Copying", "Illustration": ["\n\nLIKE\n\n          Use CREATE TABLE ... LIKE to create an\n          empty table based on the definition of another table,\n          including any column attributes and indexes defined in the\n          original table:\n        Press CTRL+C to copy CREATE TABLE new_tbl LIKE orig_tbl;\n          For more information, see Section\u00a015.1.20.3, \u201cCREATE TABLE ... LIKE Statement\u201d.\n        \n[AS]\n          query_expression\n\n          To create one table from another, add a\n          SELECT statement at the end of\n          the CREATE TABLE statement:\n        Press CTRL+C to copy CREATE TABLE new_tbl AS SELECT * FROM orig_tbl;\n          For more information, see\n          Section\u00a015.1.20.4, \u201cCREATE TABLE ... SELECT Statement\u201d.\n        \nIGNORE | REPLACE\n\n          The IGNORE and REPLACE\n          options indicate how to handle rows that duplicate unique key\n          values when copying a table using a\n          SELECT statement.\n        \n          For more information, see\n          Section\u00a015.1.20.4, \u201cCREATE TABLE ... SELECT Statement\u201d.\n\n"]}, {"Sub-title": "Column Data Types and Attributes", "Illustration": ["\n      There is a hard limit of 4096 columns per table, but the effective\n      maximum may be less for a given table and depends on the factors\n      discussed in Section\u00a010.4.7, \u201cLimits on Table Column Count and Row Size\u201d.\n", "\n\ndata_type\n\ndata_type represents the data type\n          in a column definition. For a full description of the syntax\n          available for specifying column data types, as well as\n          information about the properties of each type, see\n          Chapter\u00a013, Data Types.\n\n\n\nAUTO_INCREMENT applies only to integer\n              types.\n            \n              Character data types (CHAR,\n              VARCHAR, the\n              TEXT types,\n              ENUM,\n              SET, and any synonyms) can\n              include CHARACTER SET to specify the\n              character set for the column. CHARSET\n              is a synonym for CHARACTER SET. A\n              collation for the character set can be specified with the\n              COLLATE attribute, along with any other\n              attributes. For details, see Chapter\u00a012, Character Sets, Collations, Unicode.\n              Example:\n            Press CTRL+C to copy CREATE TABLE t (c CHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin);\n              MySQL 8.4 interprets length specifications in\n              character column definitions in characters. Lengths for\n              BINARY and\n              VARBINARY are in bytes.\n            \n              For CHAR,\n              VARCHAR,\n              BINARY, and\n              VARBINARY columns, indexes\n              can be created that use only the leading part of column\n              values, using\n              col_name(length)\n              syntax to specify an index prefix length.\n              BLOB and\n              TEXT columns also can be\n              indexed, but a prefix length must be\n              given. Prefix lengths are given in characters for\n              nonbinary string types and in bytes for binary string\n              types. That is, index entries consist of the first\n              length characters of each\n              column value for CHAR,\n              VARCHAR, and\n              TEXT columns, and the first\n              length bytes of each column\n              value for BINARY,\n              VARBINARY, and\n              BLOB columns. Indexing only\n              a prefix of column values like this can make the index\n              file much smaller. For additional information about index\n              prefixes, see Section\u00a015.1.15, \u201cCREATE INDEX Statement\u201d.\n            \n              Only the InnoDB and\n              MyISAM storage engines support indexing\n              on BLOB and\n              TEXT columns. For example:\n            Press CTRL+C to copy CREATE TABLE test (blob_col BLOB, INDEX(blob_col(10)));\n              If a specified index prefix exceeds the maximum column\n              data type size, CREATE\n              TABLE handles the index as follows:\n\n\n\n                  For a nonunique index, either an error occurs (if\n                  strict SQL mode is enabled), or the index length is\n                  reduced to lie within the maximum column data type\n                  size and a warning is produced (if strict SQL mode is\n                  not enabled).\n                \n                  For a unique index, an error occurs regardless of SQL\n                  mode because reducing the index length might enable\n                  insertion of nonunique entries that do not meet the\n                  specified uniqueness requirement.\n\n\n\nJSON columns cannot be\n              indexed. You can work around this restriction by creating\n              an index on a generated column that extracts a scalar\n              value from the JSON column. See\n              Indexing a Generated Column to Provide a JSON Column Index, for a\n              detailed example.\n\n\n\nNOT NULL | NULL\n\n          If neither NULL nor NOT\n          NULL is specified, the column is treated as though\n          NULL had been specified.\n        \n          In MySQL 8.4, only the InnoDB,\n          MyISAM, and MEMORY\n          storage engines support indexes on columns that can have\n          NULL values. In other cases, you must\n          declare indexed columns as NOT NULL or an\n          error results.\n        \nDEFAULT\n\n          Specifies a default value for a column. For more information\n          about default value handling, including the case that a column\n          definition includes no explicit DEFAULT\n          value, see Section\u00a013.6, \u201cData Type Default Values\u201d.\n        \n          If the NO_ZERO_DATE or\n          NO_ZERO_IN_DATE SQL mode is\n          enabled and a date-valued default is not correct according to\n          that mode, CREATE TABLE\n          produces a warning if strict SQL mode is not enabled and an\n          error if strict mode is enabled. For example, with\n          NO_ZERO_IN_DATE enabled,\n          c1 DATE DEFAULT '2010-00-00' produces a\n          warning.\n        \nVISIBLE, INVISIBLE\n\n          Specify column visibility. The default is\n          VISIBLE if neither keyword is present. A\n          table must have at least one visible column. Attempting to\n          make all columns invisible produces an error. For more\n          information, see Section\u00a015.1.20.10, \u201cInvisible Columns\u201d.\n        \nAUTO_INCREMENT\n\n          An integer column can have the additional attribute\n          AUTO_INCREMENT. When you insert a value of\n          NULL (recommended) or 0\n          into an indexed AUTO_INCREMENT column, the\n          column is set to the next sequence value. Typically this is\n          value+1, where\n          value is the largest value for the\n          column currently in the table.\n          AUTO_INCREMENT sequences begin with\n          1.\n        \n          To retrieve an AUTO_INCREMENT value after\n          inserting a row, use the\n          LAST_INSERT_ID() SQL function\n          or the mysql_insert_id() C API\n          function. See Section\u00a014.15, \u201cInformation Functions\u201d, and\n          mysql_insert_id().\n        \n          If the NO_AUTO_VALUE_ON_ZERO\n          SQL mode is enabled, you can store 0 in\n          AUTO_INCREMENT columns as\n          0 without generating a new sequence value.\n          See Section\u00a07.1.11, \u201cServer SQL Modes\u201d.\n        \n          There can be only one AUTO_INCREMENT column\n          per table, it must be indexed, and it cannot have a\n          DEFAULT value. An\n          AUTO_INCREMENT column works properly only\n          if it contains only positive values. Inserting a negative\n          number is regarded as inserting a very large positive number.\n          This is done to avoid precision problems when numbers\n          \u201cwrap\u201d over from positive to negative and also to\n          ensure that you do not accidentally get an\n          AUTO_INCREMENT column that contains\n          0.\n        \n          For MyISAM tables, you can specify an\n          AUTO_INCREMENT secondary column in a\n          multiple-column key. See\n          Section\u00a05.6.9, \u201cUsing AUTO_INCREMENT\u201d.\n        \n          To make MySQL compatible with some ODBC applications, you can\n          find the AUTO_INCREMENT value for the last\n          inserted row with the following query:\n        Press CTRL+C to copy SELECT * FROM tbl_name WHERE auto_col IS NULL\n          This method requires that\n          sql_auto_is_null variable is\n          not set to 0. See Section\u00a07.1.8, \u201cServer System Variables\u201d.\n        \n          For information about InnoDB and\n          AUTO_INCREMENT, see\n          Section\u00a017.6.1.6, \u201cAUTO_INCREMENT Handling in InnoDB\u201d. For\n          information about AUTO_INCREMENT and MySQL\n          Replication, see\n          Section\u00a019.5.1.1, \u201cReplication and AUTO_INCREMENT\u201d.\n        \nCOMMENT\n\n          A comment for a column can be specified with the\n          COMMENT option, up to 1024 characters long.\n          The comment is displayed by the SHOW\n          CREATE TABLE and\n          SHOW FULL\n          COLUMNS statements. It is also shown in the\n          COLUMN_COMMENT column of the Information\n          Schema COLUMNS table.\n        \nCOLUMN_FORMAT\n\n          In NDB Cluster, it is also possible to specify a data storage\n          format for individual columns of\n          NDB tables using\n          COLUMN_FORMAT. Permissible column formats\n          are FIXED, DYNAMIC, and\n          DEFAULT. FIXED is used\n          to specify fixed-width storage, DYNAMIC\n          permits the column to be variable-width, and\n          DEFAULT causes the column to use\n          fixed-width or variable-width storage as determined by the\n          column's data type (possibly overridden by a\n          ROW_FORMAT specifier).\n        \n          For NDB tables, the default value\n          for COLUMN_FORMAT is\n          FIXED.\n        \n          In NDB Cluster, the maximum possible offset for a column\n          defined with COLUMN_FORMAT=FIXED is 8188\n          bytes. For more information and possible workarounds, see\n          Section\u00a025.2.7.5, \u201cLimits Associated with Database Objects in NDB Cluster\u201d.\n        \nCOLUMN_FORMAT currently has no effect on\n          columns of tables using storage engines other than\n          NDB. MySQL 8.4\n          silently ignores COLUMN_FORMAT.\n        \nENGINE_ATTRIBUTE and\n          SECONDARY_ENGINE_ATTRIBUTE options are used\n          to specify column attributes for primary and secondary storage\n          engines. The options are reserved for future use.\n        \n          The value assigned to this option is a string literal\n          containing a valid JSON document or an empty string ('').\n          Invalid JSON is rejected.\n        Press CTRL+C to copy CREATE TABLE t1 (c1 INT ENGINE_ATTRIBUTE='{\"key\":\"value\"}');\nENGINE_ATTRIBUTE and\n          SECONDARY_ENGINE_ATTRIBUTE values can be\n          repeated without error. In this case, the last specified value\n          is used.\n        \nENGINE_ATTRIBUTE and\n          SECONDARY_ENGINE_ATTRIBUTE values are not\n          checked by the server, nor are they cleared when the\n          table's storage engine is changed.\n        \nSTORAGE\n\n          For NDB tables, it is possible to\n          specify whether the column is stored on disk or in memory by\n          using a STORAGE clause. STORAGE\n          DISK causes the column to be stored on disk, and\n          STORAGE MEMORY causes in-memory storage to\n          be used. The CREATE TABLE\n          statement used must still include a\n          TABLESPACE clause:\n        Press CTRL+C to copy mysql> CREATE TABLE t1 (\n    ->     c1 INT STORAGE DISK,\n    ->     c2 INT STORAGE MEMORY\n    -> ) ENGINE NDB;\nERROR 1005 (HY000): Can't create table 'c.t1' (errno: 140)\n\nmysql> CREATE TABLE t1 (\n    ->     c1 INT STORAGE DISK,\n    ->     c2 INT STORAGE MEMORY\n    -> ) TABLESPACE ts_1 ENGINE NDB;\nQuery OK, 0 rows affected (1.06 sec)\n          For NDB tables, STORAGE\n          DEFAULT is equivalent to STORAGE\n          MEMORY.\n        \n          The STORAGE clause has no effect on tables\n          using storage engines other than\n          NDB. The\n          STORAGE keyword is supported only in the\n          build of mysqld that is supplied with NDB\n          Cluster; it is not recognized in any other version of MySQL,\n          where any attempt to use the STORAGE\n          keyword causes a syntax error.\n        \nGENERATED ALWAYS\n\n          Used to specify a generated column expression. For information\n          about generated\n          columns, see\n          Section\u00a015.1.20.8, \u201cCREATE TABLE and Generated Columns\u201d.\n        \nStored generated\n          columns can be indexed. InnoDB\n          supports secondary indexes on\n          virtual\n          generated columns. See\n          Section\u00a015.1.20.9, \u201cSecondary Indexes and Generated Columns\u201d.\n\n"]}, {"Sub-title": "Indexes, Foreign Keys, and CHECK Constraints", "Illustration": ["\n      Several keywords apply to creation of indexes, foreign keys, and\n      CHECK constraints. For general background in\n      addition to the following descriptions, see\n      Section\u00a015.1.15, \u201cCREATE INDEX Statement\u201d,\n      Section\u00a015.1.20.5, \u201cFOREIGN KEY Constraints\u201d, and\n      Section\u00a015.1.20.6, \u201cCHECK Constraints\u201d.\n", "\n\nCONSTRAINT\n          symbol\n\n          The CONSTRAINT\n          symbol clause may be\n          given to name a constraint. If the clause is not given, or a\n          symbol is not included following\n          the CONSTRAINT keyword, MySQL automatically\n          generates a constraint name, with the exception noted below.\n          The symbol value, if used, must be\n          unique per schema (database), per constraint type. A duplicate\n          symbol results in an error. See\n          also the discussion about length limits of generated\n          constraint identifiers at Section\u00a011.2.1, \u201cIdentifier Length Limits\u201d.\n\n\n\nNote\n\n\n            If the CONSTRAINT\n            symbol clause is not\n            given in a foreign key definition, or a\n            symbol is not included following\n            the CONSTRAINT keyword, MySQL\n            automatically generates a constraint name.\n\n\n\n          The SQL standard specifies that all types of constraints\n          (primary key, unique index, foreign key, check) belong to the\n          same namespace. In MySQL, each constraint type has its own\n          namespace per schema. Consequently, names for each type of\n          constraint must be unique per schema, but constraints of\n          different types can have the same name.\n        \nPRIMARY KEY\n\n          A unique index where all key columns must be defined as\n          NOT NULL. If they are not explicitly\n          declared as NOT NULL, MySQL declares them\n          so implicitly (and silently). A table can have only one\n          PRIMARY KEY. The name of a PRIMARY\n          KEY is always PRIMARY, which thus\n          cannot be used as the name for any other kind of index.\n        \n          If you do not have a PRIMARY KEY and an\n          application asks for the PRIMARY KEY in\n          your tables, MySQL returns the first UNIQUE\n          index that has no NULL columns as the\n          PRIMARY KEY.\n        \n          In InnoDB tables, keep the PRIMARY\n          KEY short to minimize storage overhead for secondary\n          indexes. Each secondary index entry contains a copy of the\n          primary key columns for the corresponding row. (See\n          Section\u00a017.6.2.1, \u201cClustered and Secondary Indexes\u201d.)\n        \n          In the created table, a PRIMARY KEY is\n          placed first, followed by all UNIQUE\n          indexes, and then the nonunique indexes. This helps the MySQL\n          optimizer to prioritize which index to use and also more\n          quickly to detect duplicated UNIQUE keys.\n        \n          A PRIMARY KEY can be a multiple-column\n          index. However, you cannot create a multiple-column index\n          using the PRIMARY KEY key attribute in a\n          column specification. Doing so only marks that single column\n          as primary. You must use a separate PRIMARY\n          KEY(key_part, ...)\n          clause.\n        \n          If a table has a PRIMARY KEY or\n          UNIQUE NOT NULL index that consists of a\n          single column that has an integer type, you can use\n          _rowid to refer to the indexed column in\n          SELECT statements, as described\n          in Unique Indexes.\n        \n          In MySQL, the name of a PRIMARY KEY is\n          PRIMARY. For other indexes, if you do not\n          assign a name, the index is assigned the same name as the\n          first indexed column, with an optional suffix\n          (_2, _3,\n          ...) to make it unique. You can see index\n          names for a table using SHOW INDEX FROM\n          tbl_name. See\n          Section\u00a015.7.7.23, \u201cSHOW INDEX Statement\u201d.\n        \nKEY | INDEX\n\nKEY is normally a synonym for\n          INDEX. The key attribute PRIMARY\n          KEY can also be specified as just\n          KEY when given in a column definition. This\n          was implemented for compatibility with other database systems.\n        \nUNIQUE\n\n          A UNIQUE index creates a constraint such\n          that all values in the index must be distinct. An error occurs\n          if you try to add a new row with a key value that matches an\n          existing row. For all engines, a UNIQUE\n          index permits multiple NULL values for\n          columns that can contain NULL. If you\n          specify a prefix value for a column in a\n          UNIQUE index, the column values must be\n          unique within the prefix length.\n        \n          If a table has a PRIMARY KEY or\n          UNIQUE NOT NULL index that consists of a\n          single column that has an integer type, you can use\n          _rowid to refer to the indexed column in\n          SELECT statements, as described\n          in Unique Indexes.\n        \nFULLTEXT\n\n          A FULLTEXT index is a special type of index\n          used for full-text searches. Only the\n          InnoDB and\n          MyISAM storage engines support\n          FULLTEXT indexes. They can be created only\n          from CHAR,\n          VARCHAR, and\n          TEXT columns. Indexing always\n          happens over the entire column; column prefix indexing is not\n          supported and any prefix length is ignored if specified. See\n          Section\u00a014.9, \u201cFull-Text Search Functions\u201d, for details of operation. A\n          WITH PARSER clause can be specified as an\n          index_option value to associate a\n          parser plugin with the index if full-text indexing and\n          searching operations need special handling. This clause is\n          valid only for FULLTEXT indexes.\n          InnoDB and\n          MyISAM support full-text parser\n          plugins. See Full-Text Parser Plugins and\n          Writing Full-Text Parser Plugins for more\n          information.\n        \nSPATIAL\n\n          You can create SPATIAL indexes on spatial\n          data types. Spatial types are supported only for\n          InnoDB and MyISAM\n          tables, and indexed columns must be declared as NOT\n          NULL. See Section\u00a013.4, \u201cSpatial Data Types\u201d.\n        \nFOREIGN KEY\n\n          MySQL supports foreign keys, which let you cross-reference\n          related data across tables, and foreign key constraints, which\n          help keep this spread-out data consistent. For definition and\n          option information, see\n          reference_definition,\n          and\n          reference_option.\n        \n          Partitioned tables employing the\n          InnoDB storage engine do not\n          support foreign keys. See\n          Section\u00a026.6, \u201cRestrictions and Limitations on Partitioning\u201d, for more\n          information.\n        \nCHECK\n\n          The CHECK clause enables the creation of\n          constraints to be checked for data values in table rows. See\n          Section\u00a015.1.20.6, \u201cCHECK Constraints\u201d.\n        \nkey_part\n\n\n\n              A key_part specification can\n              end with ASC or DESC\n              to specify whether index values are stored in ascending or\n              descending order. The default is ascending if no order\n              specifier is given.\n            \n              Prefixes, defined by the length\n              attribute, can be up to 767 bytes long for\n              InnoDB tables that use the\n              REDUNDANT\n              or\n              COMPACT\n              row format. The prefix length limit is 3072 bytes for\n              InnoDB tables that use the\n              DYNAMIC\n              or\n              COMPRESSED\n              row format. For MyISAM tables, the\n              prefix length limit is 1000 bytes.\n            \n              Prefix limits are measured in bytes.\n              However, prefix lengths for index\n              specifications in CREATE\n              TABLE, ALTER\n              TABLE, and CREATE\n              INDEX statements are interpreted as number of\n              characters for nonbinary string types\n              (CHAR,\n              VARCHAR,\n              TEXT) and number of bytes\n              for binary string types\n              (BINARY,\n              VARBINARY,\n              BLOB). Take this into\n              account when specifying a prefix length for a nonbinary\n              string column that uses a multibyte character set.\n            \n              The expr for a\n              key_part specification can take\n              the form (CAST\n              json_path AS\n              type ARRAY) to create\n              a multi-valued index on a\n              JSON column.\n              Multi-Valued Indexes, provides\n              detailed information regarding creation of, usage of, and\n              restrictions and limitations on multi-valued indexes.\n\n\n\nindex_type\n\n          Some storage engines permit you to specify an index type when\n          creating an index. The syntax for the\n          index_type specifier is\n          USING type_name.\n        \n          Example:\n        Press CTRL+C to copy CREATE TABLE lookup\n  (id INT, INDEX USING BTREE (id)\n) ENGINE = MEMORY;\n          The preferred position for USING is after\n          the index column list. It can be given before the column list,\n          but support for use of the option in that position is\n          deprecated and you should expect it to be removed in a future\n          MySQL release.\n        \nindex_option\n\nindex_option values specify\n          additional options for an index.\n\n\n\nKEY_BLOCK_SIZE\n\n              For MyISAM tables,\n              KEY_BLOCK_SIZE optionally specifies the\n              size in bytes to use for index key blocks. The value is\n              treated as a hint; a different size could be used if\n              necessary. A KEY_BLOCK_SIZE value\n              specified for an individual index definition overrides the\n              table-level KEY_BLOCK_SIZE value.\n            \n              For information about the table-level\n              KEY_BLOCK_SIZE attribute, see\n              Table Options.\n            \nWITH PARSER\n\n              The WITH PARSER option can be used only\n              with FULLTEXT indexes. It associates a\n              parser plugin with the index if full-text indexing and\n              searching operations need special handling.\n              InnoDB and\n              MyISAM support full-text\n              parser plugins. If you have a\n              MyISAM table with an\n              associated full-text parser plugin, you can convert the\n              table to InnoDB using ALTER\n              TABLE.\n            \nCOMMENT\n\n              Index definitions can include an optional comment of up to\n              1024 characters.\n            \n              You can set the InnoDB\nMERGE_THRESHOLD value for an individual\n              index using the\n              index_option\nCOMMENT clause. See\n              Section\u00a017.8.11, \u201cConfiguring the Merge Threshold for Index Pages\u201d.\n            \nVISIBLE, INVISIBLE\n\n              Specify index visibility. Indexes are visible by default.\n              An invisible index is not used by the optimizer.\n              Specification of index visibility applies to indexes other\n              than primary keys (either explicit or implicit). For more\n              information, see Section\u00a010.3.12, \u201cInvisible Indexes\u201d.\n            \nENGINE_ATTRIBUTE and\n              SECONDARY_ENGINE_ATTRIBUTE options are\n              used to specify index attributes for primary and secondary\n              storage engines. The options are reserved for future use.\n\n\n\n          For more information about permissible\n          index_option values, see\n          Section\u00a015.1.15, \u201cCREATE INDEX Statement\u201d. For more information about\n          indexes, see Section\u00a010.3.1, \u201cHow MySQL Uses Indexes\u201d.\n        \nreference_definition\n\n          For reference_definition syntax\n          details and examples, see\n          Section\u00a015.1.20.5, \u201cFOREIGN KEY Constraints\u201d.\n        \nInnoDB and\n          NDB tables support checking of\n          foreign key constraints. The columns of the referenced table\n          must always be explicitly named. Both ON\n          DELETE and ON UPDATE actions on\n          foreign keys are supported. For more detailed information and\n          examples, see Section\u00a015.1.20.5, \u201cFOREIGN KEY Constraints\u201d.\n        \n          For other storage engines, MySQL Server parses and ignores the\n          FOREIGN KEY syntax in\n          CREATE TABLE statements.\n\n\n\nImportant\n\n\n            For users familiar with the ANSI/ISO SQL Standard, please\n            note that no storage engine, including\n            InnoDB, recognizes or enforces the\n            MATCH clause used in referential\n            integrity constraint definitions. Use of an explicit\n            MATCH clause does not have the specified\n            effect, and also causes ON DELETE and\n            ON UPDATE clauses to be ignored. For\n            these reasons, specifying MATCH should be\n            avoided.\n          \n            The MATCH clause in the SQL standard\n            controls how NULL values in a composite\n            (multiple-column) foreign key are handled when comparing to\n            a primary key. InnoDB essentially\n            implements the semantics defined by MATCH\n            SIMPLE, which permit a foreign key to be all or\n            partially NULL. In that case, the (child\n            table) row containing such a foreign key is permitted to be\n            inserted, and does not match any row in the referenced\n            (parent) table. It is possible to implement other semantics\n            using triggers.\n          \n            Additionally, MySQL requires that the referenced columns be\n            indexed for performance. However, InnoDB\n            does not enforce any requirement that the referenced columns\n            be declared UNIQUE or NOT\n            NULL. The handling of foreign key references to\n            nonunique keys or keys that contain NULL\n            values is not well defined for operations such as\n            UPDATE or DELETE\n            CASCADE. You are advised to use foreign keys that\n            reference only keys that are both UNIQUE\n            (or PRIMARY) and NOT\n            NULL.\n          \n            MySQL parses but ignores \u201cinline\n            REFERENCES specifications\u201d (as\n            defined in the SQL standard) where the references are\n            defined as part of the column specification. MySQL accepts\n            REFERENCES clauses only when specified as\n            part of a separate FOREIGN KEY\n            specification. For more information, see\n            Section\u00a01.7.2.3, \u201cFOREIGN KEY Constraint Differences\u201d.\n\n\n\nreference_option\n\n          For information about the RESTRICT,\n          CASCADE, SET NULL,\n          NO ACTION, and SET\n          DEFAULT options, see\n          Section\u00a015.1.20.5, \u201cFOREIGN KEY Constraints\u201d.\n\n"]}, {"Sub-title": "Table Options", "Illustration": ["\n      Table options are used to optimize the behavior of the table. In\n      most cases, you do not have to specify any of them. These options\n      apply to all storage engines unless otherwise indicated. Options\n      that do not apply to a given storage engine may be accepted and\n      remembered as part of the table definition. Such options then\n      apply if you later use ALTER TABLE\n      to convert the table to use a different storage engine.\n", "\n\nENGINE\n\n          Specifies the storage engine for the table, using one of the\n          names shown in the following table. The engine name can be\n          unquoted or quoted. The quoted name\n          'DEFAULT' is recognized but ignored.\n\n\n\nStorage Engine\nDescription\n\nInnoDB\nTransaction-safe tables with row locking and foreign keys. The default\n                storage engine for new tables. See\n                Chapter\u00a017, The InnoDB Storage Engine, and in\n                particular Section\u00a017.1, \u201cIntroduction to InnoDB\u201d if you\n                have MySQL experience but are new to\n                InnoDB.\n\nMyISAM\nThe binary portable storage engine that is primarily used for read-only\n                or read-mostly workloads. See\n                Section\u00a018.2, \u201cThe MyISAM Storage Engine\u201d.\n\nMEMORY\nThe data for this storage engine is stored only in memory. See\n                Section\u00a018.3, \u201cThe MEMORY Storage Engine\u201d.\n\nCSV\nTables that store rows in comma-separated values format. See\n                Section\u00a018.4, \u201cThe CSV Storage Engine\u201d.\n\nARCHIVE\nThe archiving storage engine. See\n                Section\u00a018.5, \u201cThe ARCHIVE Storage Engine\u201d.\n\nEXAMPLE\nAn example engine. See Section\u00a018.9, \u201cThe EXAMPLE Storage Engine\u201d.\n\nFEDERATED\nStorage engine that accesses remote tables. See\n                Section\u00a018.8, \u201cThe FEDERATED Storage Engine\u201d.\n\nHEAP\nThis is a synonym for MEMORY.\n\nMERGE\nA collection of MyISAM tables used as one table. Also\n                known as MRG_MyISAM. See\n                Section\u00a018.7, \u201cThe MERGE Storage Engine\u201d.\n\nNDB\nClustered, fault-tolerant, memory-based tables, supporting transactions\n                and foreign keys. Also known as\n                NDBCLUSTER. See\n                Chapter\u00a025, MySQL NDB Cluster 8.4.\n\n\nStorage Engine\nDescription\n\n\n          By default, if a storage engine is specified that is not\n          available, the statement fails with an error. You can override\n          this behavior by removing\n          NO_ENGINE_SUBSTITUTION from\n          the server SQL mode (see Section\u00a07.1.11, \u201cServer SQL Modes\u201d) so that\n          MySQL allows substitution of the specified engine with the\n          default storage engine instead. Normally in such cases, this\n          is InnoDB, which is the default value for\n          the default_storage_engine\n          system variable. When\n          NO_ENGINE_SUBSTITUTION is disabled, a\n          warning occurs if the storage engine specification is not\n          honored.\n        \nAUTOEXTEND_SIZE\n\n          Defines the amount by which InnoDB extends\n          the size of the tablespace when it becomes full. The setting\n          must be a multiple of 4MB. The default setting is 0, which\n          causes the tablespace to be extended according to the implicit\n          default behavior. For more information, see\n          Section\u00a017.6.3.9, \u201cTablespace AUTOEXTEND_SIZE Configuration\u201d.\n        \nAUTO_INCREMENT\n\n          The initial AUTO_INCREMENT value for the\n          table. In MySQL 8.4, this works for\n          MyISAM, MEMORY,\n          InnoDB, and ARCHIVE\n          tables. To set the first auto-increment value for engines that\n          do not support the AUTO_INCREMENT table\n          option, insert a \u201cdummy\u201d row with a value one\n          less than the desired value after creating the table, and then\n          delete the dummy row.\n        \n          For engines that support the AUTO_INCREMENT\n          table option in CREATE TABLE\n          statements, you can also use ALTER TABLE\n          tbl_name AUTO_INCREMENT =\n          N to reset the\n          AUTO_INCREMENT value. The value cannot be\n          set lower than the maximum value currently in the column.\n        \nAVG_ROW_LENGTH\n\n          An approximation of the average row length for your table. You\n          need to set this only for large tables with variable-size\n          rows.\n        \n          When you create a MyISAM table, MySQL uses\n          the product of the MAX_ROWS and\n          AVG_ROW_LENGTH options to decide how big\n          the resulting table is. If you don't specify either option,\n          the maximum size for MyISAM data and index\n          files is 256TB by default. (If your operating system does not\n          support files that large, table sizes are constrained by the\n          file size limit.) If you want to keep down the pointer sizes\n          to make the index smaller and faster and you don't really need\n          big files, you can decrease the default pointer size by\n          setting the\n          myisam_data_pointer_size\n          system variable. (See\n          Section\u00a07.1.8, \u201cServer System Variables\u201d.) If you want all\n          your tables to be able to grow above the default limit and are\n          willing to have your tables slightly slower and larger than\n          necessary, you can increase the default pointer size by\n          setting this variable. Setting the value to 7 permits table\n          sizes up to 65,536TB.\n        \n[DEFAULT] CHARACTER SET\n\n          Specifies a default character set for the table.\n          CHARSET is a synonym for CHARACTER\n          SET. If the character set name is\n          DEFAULT, the database character set is\n          used.\n        \nCHECKSUM\n\n          Set this to 1 if you want MySQL to maintain a live checksum\n          for all rows (that is, a checksum that MySQL updates\n          automatically as the table changes). This makes the table a\n          little slower to update, but also makes it easier to find\n          corrupted tables. The CHECKSUM\n          TABLE statement reports the checksum.\n          (MyISAM only.)\n        \n[DEFAULT] COLLATE\n\n          Specifies a default collation for the table.\n        \nCOMMENT\n\n          A comment for the table, up to 2048 characters long.\n        \n          You can set the InnoDB\nMERGE_THRESHOLD value for a table using the\n          table_option\nCOMMENT clause. See\n          Section\u00a017.8.11, \u201cConfiguring the Merge Threshold for Index Pages\u201d.\n        Setting NDB_TABLE options.\u00a0\n\n\n            The table comment in a CREATE TABLE that\n            creates an NDB table or an\n            ALTER TABLE statement which\n            alters one can also be used to specify one to four of the\n            NDB_TABLE options\n            NOLOGGING,\n            READ_BACKUP,\n            PARTITION_BALANCE, or\n            FULLY_REPLICATED as a set of name-value\n            pairs, separated by commas if need be, immediately following\n            the string NDB_TABLE= that begins the\n            quoted comment text. An example statement using this syntax\n            is shown here (emphasized text):\n          Press CTRL+C to copy CREATE TABLE t1 (\n    c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    c2 VARCHAR(100),\n    c3 VARCHAR(100) )\nENGINE=NDB\nCOMMENT=\"NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RP_BY_NODE\";\n          Spaces are not permitted within the quoted string. The string\n          is case-insensitive.\n        \n          The comment is displayed as part of the output of\n          SHOW CREATE TABLE. The text of\n          the comment is also available as the TABLE_COMMENT column of\n          the MySQL Information Schema\n          TABLES table.\n        \n          This comment syntax is also supported with\n          ALTER TABLE statements for\n          NDB tables. Keep in mind that a table\n          comment used with ALTER TABLE replaces any\n          existing comment which the table might have had previously.\n        \n          Setting the MERGE_THRESHOLD option in table\n          comments is not supported for NDB\n          tables (it is ignored).\n        \n          For complete syntax information and examples, see\n          Section\u00a015.1.20.12, \u201cSetting NDB Comment Options\u201d.\n        \nCOMPRESSION\n\n          The compression algorithm used for page level compression for\n          InnoDB tables. Supported values include\n          Zlib, LZ4, and\n          None. The COMPRESSION\n          attribute was introduced with the transparent page compression\n          feature. Page compression is only supported with\n          InnoDB tables that reside in\n          file-per-table\n          tablespaces, and is only available on Linux and Windows\n          platforms that support sparse files and hole punching. For\n          more information, see\n          Section\u00a017.9.2, \u201cInnoDB Page Compression\u201d.\n        \nCONNECTION\n\n          The connection string for a FEDERATED\n          table.\n\n\n\nNote\n\n\n            Older versions of MySQL used a COMMENT\n            option for the connection string.\n\n\n\nDATA DIRECTORY, INDEX\n          DIRECTORY\n\n          For InnoDB, the DATA\n          DIRECTORY='directory'\n          clause permits creating tables outside of the data directory.\n          The innodb_file_per_table\n          variable must be enabled to use the DATA\n          DIRECTORY clause. The full directory path must be\n          specified, and known to InnoDB. For more\n          information, see\n          Section\u00a017.6.1.2, \u201cCreating Tables Externally\u201d.\n        \n          When creating MyISAM tables, you can use\n          the DATA\n          DIRECTORY='directory'\n          clause, the INDEX\n          DIRECTORY='directory'\n          clause, or both. They specify where to put a\n          MyISAM table's data file and index file,\n          respectively. Unlike InnoDB tables, MySQL\n          does not create subdirectories that correspond to the database\n          name when creating a MyISAM table with a\n          DATA DIRECTORY or INDEX\n          DIRECTORY option. Files are created in the directory\n          that is specified.\n        \n          You must have the FILE\n          privilege to use the DATA DIRECTORY or\n          INDEX DIRECTORY table option.\n\n\n\nImportant\n\n\n            Table-level DATA DIRECTORY and\n            INDEX DIRECTORY options are ignored for\n            partitioned tables. (Bug #32091)\n\n\n\n          These options work only when you are not using the\n          --skip-symbolic-links\n          option. Your operating system must also have a working,\n          thread-safe realpath() call. See\n          Section\u00a010.12.2.2, \u201cUsing Symbolic Links for MyISAM Tables on Unix\u201d, for more complete\n          information.\n        \n          If a MyISAM table is created with no\n          DATA DIRECTORY option, the\n          .MYD file is created in the database\n          directory. By default, if MyISAM finds an\n          existing .MYD file in this case, it\n          overwrites it. The same applies to .MYI\n          files for tables created with no INDEX\n          DIRECTORY option. To suppress this behavior, start\n          the server with the\n          --keep_files_on_create option,\n          in which case MyISAM does not overwrite\n          existing files and returns an error instead.\n        \n          If a MyISAM table is created with a\n          DATA DIRECTORY or INDEX\n          DIRECTORY option and an existing\n          .MYD or .MYI file is\n          found, MyISAM always returns an error, and\n          does not overwrite a file in the specified directory.\n\n\n\nImportant\n\n\n            You cannot use path names that contain the MySQL data\n            directory with DATA DIRECTORY or\n            INDEX DIRECTORY. This includes\n            partitioned tables and individual table partitions. (See Bug\n            #32167.)\n\n\n\nDELAY_KEY_WRITE\n\n          Set this to 1 if you want to delay key updates for the table\n          until the table is closed. See the description of the\n          delay_key_write system\n          variable in Section\u00a07.1.8, \u201cServer System Variables\u201d.\n          (MyISAM only.)\n        \nENCRYPTION\n\n          The ENCRYPTION clause enables or disables\n          page-level data encryption for an InnoDB\n          table. A keyring plugin must be installed and configured\n          before encryption can be enabled. The\n          ENCRYPTION clause can be specified when\n          creating a table in an a file-per-table tablespace, or when\n          creating a table in a general tablespace.\n        \n          A table inherits the default schema encryption if an\n          ENCRYPTION clause is not specified. If the\n          table_encryption_privilege_check\n          variable is enabled, the\n          TABLE_ENCRYPTION_ADMIN\n          privilege is required to create a table with an\n          ENCRYPTION clause setting that differs from\n          the default schema encryption. When creating a table in a\n          general tablespace, table and tablespace encryption must\n          match.\n        \n          Specifying an ENCRYPTION clause with a\n          value other than 'N' or\n          '' is not permitted when using a storage\n          engine that does not support encryption.\n        \n          For more information, see\n          Section\u00a017.13, \u201cInnoDB Data-at-Rest Encryption\u201d.\n        \n          The ENGINE_ATTRIBUTE and\n          SECONDARY_ENGINE_ATTRIBUTE options are used\n          to specify table attributes for primary and secondary storage\n          engines. The options are reserved for future use.\n        \n          The value assigned to either of these options must be a string\n          literal containing a valid JSON document or an empty string\n          (''). Invalid JSON is rejected.\n        Press CTRL+C to copy CREATE TABLE t1 (c1 INT) ENGINE_ATTRIBUTE='{\"key\":\"value\"}';\nENGINE_ATTRIBUTE and\n          SECONDARY_ENGINE_ATTRIBUTE values can be\n          repeated without error. In this case, the last specified value\n          is used.\n        \nENGINE_ATTRIBUTE and\n          SECONDARY_ENGINE_ATTRIBUTE values are not\n          checked by the server, nor are they cleared when the\n          table's storage engine is changed.\n        \nINSERT_METHOD\n\n          If you want to insert data into a MERGE\n          table, you must specify with INSERT_METHOD\n          the table into which the row should be inserted.\n          INSERT_METHOD is an option useful for\n          MERGE tables only. Use a value of\n          FIRST or LAST to have\n          inserts go to the first or last table, or a value of\n          NO to prevent inserts. See\n          Section\u00a018.7, \u201cThe MERGE Storage Engine\u201d.\n        \nKEY_BLOCK_SIZE\n\n          For MyISAM tables,\n          KEY_BLOCK_SIZE optionally specifies the\n          size in bytes to use for index key blocks. The value is\n          treated as a hint; a different size could be used if\n          necessary. A KEY_BLOCK_SIZE value specified\n          for an individual index definition overrides the table-level\n          KEY_BLOCK_SIZE value.\n        \n          For InnoDB tables,\n          KEY_BLOCK_SIZE specifies the\n          page size in kilobytes to use\n          for compressed\nInnoDB tables. The\n          KEY_BLOCK_SIZE value is treated as a hint;\n          a different size could be used by InnoDB if\n          necessary. KEY_BLOCK_SIZE can only be less\n          than or equal to the\n          innodb_page_size value. A\n          value of 0 represents the default compressed page size, which\n          is half of the\n          innodb_page_size value.\n          Depending on\n          innodb_page_size, possible\n          KEY_BLOCK_SIZE values include 0, 1, 2, 4,\n          8, and 16. See Section\u00a017.9.1, \u201cInnoDB Table Compression\u201d for\n          more information.\n        \n          Oracle recommends enabling\n          innodb_strict_mode when\n          specifying KEY_BLOCK_SIZE for\n          InnoDB tables. When\n          innodb_strict_mode is\n          enabled, specifying an invalid\n          KEY_BLOCK_SIZE value returns an error. If\n          innodb_strict_mode is\n          disabled, an invalid KEY_BLOCK_SIZE value\n          results in a warning, and the\n          KEY_BLOCK_SIZE option is ignored.\n        \n          The Create_options column in response to\n          SHOW TABLE STATUS reports the\n          actual KEY_BLOCK_SIZE used by the table, as\n          does SHOW CREATE TABLE.\n        \nInnoDB only supports\n          KEY_BLOCK_SIZE at the table level.\n        \nKEY_BLOCK_SIZE is not supported with 32KB\n          and 64KB innodb_page_size\n          values. InnoDB table compression does not\n          support these pages sizes.\n        \nInnoDB does not support the\n          KEY_BLOCK_SIZE option when creating\n          temporary tables.\n        \nMAX_ROWS\n\n          The maximum number of rows you plan to store in the table.\n          This is not a hard limit, but rather a hint to the storage\n          engine that the table must be able to store at least this many\n          rows.\n\n\n\nImportant\n\n\n            The use of MAX_ROWS with\n            NDB tables to control the number of table\n            partitions is deprecated. It remains supported in later\n            versions for backward compatibility, but is subject to\n            removal in a future release. Use PARTITION_BALANCE instead;\n            see\n            Setting NDB_TABLE options.\n\n\n\n          The NDB storage engine treats\n          this value as a maximum. If you plan to create very large NDB\n          Cluster tables (containing millions of rows), you should use\n          this option to insure that NDB\n          allocates sufficient number of index slots in the hash table\n          used for storing hashes of the table's primary keys by\n          setting MAX_ROWS = 2 *\n          rows, where\n          rows is the number of rows that you\n          expect to insert into the table.\n        \n          The maximum MAX_ROWS value is 4294967295;\n          larger values are truncated to this limit.\n        \nMIN_ROWS\n\n          The minimum number of rows you plan to store in the table. The\n          MEMORY storage engine uses this\n          option as a hint about memory use.\n        \nPACK_KEYS\n\n          Takes effect only with MyISAM tables. Set\n          this option to 1 if you want to have smaller indexes. This\n          usually makes updates slower and reads faster. Setting the\n          option to 0 disables all packing of keys. Setting it to\n          DEFAULT tells the storage engine to pack\n          only long CHAR,\n          VARCHAR,\n          BINARY, or\n          VARBINARY columns.\n        \n          If you do not use PACK_KEYS, the default is\n          to pack strings, but not numbers. If you use\n          PACK_KEYS=1, numbers are packed as well.\n        \n          When packing binary number keys, MySQL uses prefix\n          compression:\n\n\n\n              Every key needs one extra byte to indicate how many bytes\n              of the previous key are the same for the next key.\n            \n              The pointer to the row is stored in high-byte-first order\n              directly after the key, to improve compression.\n\n\n\n          This means that if you have many equal keys on two consecutive\n          rows, all following \u201csame\u201d keys usually only take\n          two bytes (including the pointer to the row). Compare this to\n          the ordinary case where the following keys takes\n          storage_size_for_key + pointer_size (where\n          the pointer size is usually 4). Conversely, you get a\n          significant benefit from prefix compression only if you have\n          many numbers that are the same. If all keys are totally\n          different, you use one byte more per key, if the key is not a\n          key that can have NULL values. (In this\n          case, the packed key length is stored in the same byte that is\n          used to mark if a key is NULL.)\n        \nPASSWORD\n\n          This option is unused.\n        \nROW_FORMAT\n\n          Defines the physical format in which the rows are stored.\n        \n          When creating a table with\n          strict mode disabled,\n          the storage engine's default row format is used if the\n          specified row format is not supported. The actual row format\n          of the table is reported in the Row_format\n          column in response to SHOW TABLE\n          STATUS. The Create_options column\n          shows the row format that was specified in the\n          CREATE TABLE statement, as does\n          SHOW CREATE TABLE.\n        \n          Row format choices differ depending on the storage engine used\n          for the table.\n        \n          For InnoDB tables:\n\n\n\n              The default row format is defined by\n              innodb_default_row_format,\n              which has a default setting of DYNAMIC.\n              The default row format is used when the\n              ROW_FORMAT option is not defined or\n              when ROW_FORMAT=DEFAULT is used.\n            \n              If the ROW_FORMAT option is not\n              defined, or if ROW_FORMAT=DEFAULT is\n              used, operations that rebuild a table also silently change\n              the row format of the table to the default defined by\n              innodb_default_row_format.\n              For more information, see\n              Defining the Row Format of a Table.\n            \n              For more efficient InnoDB storage of\n              data types, especially BLOB\n              types, use the DYNAMIC. See\n              DYNAMIC Row Format for\n              requirements associated with the\n              DYNAMIC row format.\n            \n              To enable compression for InnoDB\n              tables, specify ROW_FORMAT=COMPRESSED.\n              The ROW_FORMAT=COMPRESSED option is not\n              supported when creating temporary tables. See\n              Section\u00a017.9, \u201cInnoDB Table and Page Compression\u201d for requirements\n              associated with the COMPRESSED row\n              format.\n            \n              The row format used in older versions of MySQL can still\n              be requested by specifying the\n              REDUNDANT row format.\n            \n              When you specify a non-default\n              ROW_FORMAT clause, consider also\n              enabling the\n              innodb_strict_mode\n              configuration option.\n            \nROW_FORMAT=FIXED is not supported. If\n              ROW_FORMAT=FIXED is specified while\n              innodb_strict_mode is\n              disabled, InnoDB issues a warning and\n              assumes ROW_FORMAT=DYNAMIC. If\n              ROW_FORMAT=FIXED is specified while\n              innodb_strict_mode is\n              enabled, which is the default, InnoDB\n              returns an error.\n            \n              For additional information about InnoDB\n              row formats, see Section\u00a017.10, \u201cInnoDB Row Formats\u201d.\n\n\n\n          For MyISAM tables, the option value can be\n          FIXED or DYNAMIC for\n          static or variable-length row format.\n          myisampack sets the type to\n          COMPRESSED. See\n          Section\u00a018.2.3, \u201cMyISAM Table Storage Formats\u201d.\n        \n          For NDB tables, the default\n          ROW_FORMAT is DYNAMIC.\n        \nSTART TRANSACTION\n\n          This is an internal-use table option, used to permit\n          CREATE TABLE ... SELECT to be logged as a\n          single, atomic transaction in the binary log when using\n          row-based replication with a storage engine that supports\n          atomic DDL. Only BINLOG,\n          COMMIT, and\n          ROLLBACK\n          statements are permitted after CREATE TABLE ... START\n          TRANSACTION. For related information, see\n          Section\u00a015.1.1, \u201cAtomic Data Definition Statement Support\u201d.\n        \nSTATS_AUTO_RECALC\n\n          Specifies whether to automatically recalculate\n          persistent\n          statistics for an InnoDB table. The\n          value DEFAULT causes the persistent\n          statistics setting for the table to be determined by the\n          innodb_stats_auto_recalc\n          configuration option. The value 1 causes\n          statistics to be recalculated when 10% of the data in the\n          table has changed. The value 0 prevents\n          automatic recalculation for this table; with this setting,\n          issue an ANALYZE TABLE\n          statement to recalculate the statistics after making\n          substantial changes to the table. For more information about\n          the persistent statistics feature, see\n          Section\u00a017.8.10.1, \u201cConfiguring Persistent Optimizer Statistics Parameters\u201d.\n        \nSTATS_PERSISTENT\n\n          Specifies whether to enable\n          persistent\n          statistics for an InnoDB table. The\n          value DEFAULT causes the persistent\n          statistics setting for the table to be determined by the\n          innodb_stats_persistent\n          configuration option. The value 1 enables\n          persistent statistics for the table, while the value\n          0 turns off this feature. After enabling\n          persistent statistics through a CREATE\n          TABLE or ALTER TABLE statement,\n          issue an ANALYZE TABLE\n          statement to calculate the statistics, after loading\n          representative data into the table. For more information about\n          the persistent statistics feature, see\n          Section\u00a017.8.10.1, \u201cConfiguring Persistent Optimizer Statistics Parameters\u201d.\n        \nSTATS_SAMPLE_PAGES\n\n          The number of index pages to sample when estimating\n          cardinality and other statistics for an indexed column, such\n          as those calculated by ANALYZE\n          TABLE. For more information, see\n          Section\u00a017.8.10.1, \u201cConfiguring Persistent Optimizer Statistics Parameters\u201d.\n        \nTABLESPACE\n\n          The TABLESPACE clause can be used to create\n          an InnoDB table in an existing\n          general tablespace, a file-per-table tablespace, or the system\n          tablespace.\n        Press CTRL+C to copy CREATE TABLE tbl_name ... TABLESPACE [=] tablespace_name\n          The general tablespace that you specify must exist prior to\n          using the TABLESPACE clause. For\n          information about general tablespaces, see\n          Section\u00a017.6.3.3, \u201cGeneral Tablespaces\u201d.\n        \n          The\n          tablespace_name\n          is a case-sensitive identifier. It may be quoted or unquoted.\n          The forward slash character (\u201c/\u201d) is not\n          permitted. Names beginning with \u201cinnodb_\u201d are\n          reserved for special use.\n        \n          To create a table in the system tablespace, specify\n          innodb_system as the tablespace name.\n        Press CTRL+C to copy CREATE TABLE tbl_name ... TABLESPACE [=] innodb_system\n          Using TABLESPACE [=] innodb_system, you can\n          place a table of any uncompressed row format in the system\n          tablespace regardless of the\n          innodb_file_per_table\n          setting. For example, you can add a table with\n          ROW_FORMAT=DYNAMIC to the system tablespace\n          using TABLESPACE [=] innodb_system.\n        \n          To create a table in a file-per-table tablespace, specify\n          innodb_file_per_table as the tablespace\n          name.\nPress CTRL+C to copy CREATE TABLE tbl_name ... TABLESPACE [=] innodb_file_per_table\n\n\nNote\n\n\n            If innodb_file_per_table is\n            enabled, you need not specify\n            TABLESPACE=innodb_file_per_table to\n            create an InnoDB file-per-table\n            tablespace. InnoDB tables are created in\n            file-per-table tablespaces by default when\n            innodb_file_per_table is\n            enabled.\n\n\n\n          The DATA DIRECTORY clause is permitted with\n          CREATE TABLE ...\n          TABLESPACE=innodb_file_per_table but is otherwise\n          not supported for use in combination with the\n          TABLESPACE clause. The directory specified\n          in a DATA DIRECTORY clause must be known to\n          InnoDB. For more information, see\n          Using the DATA DIRECTORY Clause.\n\n\n\nNote\n\n\n            Support for TABLESPACE =\n            innodb_file_per_table and TABLESPACE =\n            innodb_temporary clauses with\n            CREATE\n            TEMPORARY TABLE is deprecated; expect it to be\n            removed in a future version of MySQL.\n\n\n\n          The STORAGE table option is employed only\n          with NDB tables.\n          STORAGE determines the type of storage\n          used, and can be either of DISK or\n          MEMORY.\n        \nTABLESPACE ... STORAGE DISK assigns a table\n          to an NDB Cluster Disk Data tablespace. STORAGE\n          DISK cannot be used in CREATE\n          TABLE unless preceded by\n          TABLESPACE\ntablespace_name.\n        \n          For STORAGE MEMORY, the tablespace name is\n          optional, thus, you can use TABLESPACE\n          tablespace_name STORAGE\n          MEMORY or simply STORAGE MEMORY\n          to specify explicitly that the table is in-memory.\n        \n          See Section\u00a025.6.11, \u201cNDB Cluster Disk Data Tables\u201d, for more\n          information.\n        \nUNION\n\n          Used to access a collection of identical\n          MyISAM tables as one. This works only with\n          MERGE tables. See\n          Section\u00a018.7, \u201cThe MERGE Storage Engine\u201d.\n        \n          You must have SELECT,\n          UPDATE, and\n          DELETE privileges for the\n          tables you map to a MERGE table.\n\n\n\nNote\n\n\n            Formerly, all tables used had to be in the same database as\n            the MERGE table itself. This restriction\n            no longer applies.\n\n\n\n"]}, {"Sub-title": "Table Partitioning", "Illustration": ["\npartition_options can be used to\n      control partitioning of the table created with\n      CREATE TABLE.\n    ", "\n      Not all options shown in the syntax for\n      partition_options at the beginning of\n      this section are available for all partitioning types. Please see\n      the listings for the following individual types for information\n      specific to each type, and see Chapter\u00a026, Partitioning, for\n      more complete information about the workings of and uses for\n      partitioning in MySQL, as well as additional examples of table\n      creation and other statements relating to MySQL partitioning.\n    ", "\n      Partitions can be modified, merged, added to tables, and dropped\n      from tables. For basic information about the MySQL statements to\n      accomplish these tasks, see Section\u00a015.1.9, \u201cALTER TABLE Statement\u201d. For\n      more detailed descriptions and examples, see\n      Section\u00a026.3, \u201cPartition Management\u201d.\n", "\n\nPARTITION BY\n\n          If used, a partition_options clause\n          begins with PARTITION BY. This clause\n          contains the function that is used to determine the partition;\n          the function returns an integer value ranging from 1 to\n          num, where\n          num is the number of partitions.\n          (The maximum number of user-defined partitions which a table\n          may contain is 1024; the number of\n          subpartitions\u2014discussed later in this section\u2014is\n          included in this maximum.)\n\n\n\nNote\n\n\n            The expression (expr) used in a\n            PARTITION BY clause cannot refer to any\n            columns not in the table being created; such references are\n            specifically not permitted and cause the statement to fail\n            with an error. (Bug #29444)\n\n\n\nHASH(expr)\n\n          Hashes one or more columns to create a key for placing and\n          locating rows. expr is an\n          expression using one or more table columns. This can be any\n          valid MySQL expression (including MySQL functions) that yields\n          a single integer value. For example, these are both valid\n          CREATE TABLE statements using\n          PARTITION BY HASH:\n        Press CTRL+C to copy CREATE TABLE t1 (col1 INT, col2 CHAR(5))\n    PARTITION BY HASH(col1);\n\nCREATE TABLE t1 (col1 INT, col2 CHAR(5), col3 DATETIME)\n    PARTITION BY HASH ( YEAR(col3) );\n          You may not use either VALUES LESS THAN or\n          VALUES IN clauses with PARTITION\n          BY HASH.\n        \nPARTITION BY HASH uses the remainder of\n          expr divided by the number of\n          partitions (that is, the modulus). For examples and additional\n          information, see Section\u00a026.2.4, \u201cHASH Partitioning\u201d.\n        \n          The LINEAR keyword entails a somewhat\n          different algorithm. In this case, the number of the partition\n          in which a row is stored is calculated as the result of one or\n          more logical AND operations. For\n          discussion and examples of linear hashing, see\n          Section\u00a026.2.4.1, \u201cLINEAR HASH Partitioning\u201d.\n        \nKEY(column_list)\n\n          This is similar to HASH, except that MySQL\n          supplies the hashing function so as to guarantee an even data\n          distribution. The column_list\n          argument is simply a list of 1 or more table columns (maximum:\n          16). This example shows a simple table partitioned by key,\n          with 4 partitions:\n        Press CTRL+C to copy CREATE TABLE tk (col1 INT, col2 CHAR(5), col3 DATE)\n    PARTITION BY KEY(col3)\n    PARTITIONS 4;\n          For tables that are partitioned by key, you can employ linear\n          partitioning by using the LINEAR keyword.\n          This has the same effect as with tables that are partitioned\n          by HASH. That is, the partition number is\n          found using the\n          &\n          operator rather than the modulus (see\n          Section\u00a026.2.4.1, \u201cLINEAR HASH Partitioning\u201d, and\n          Section\u00a026.2.5, \u201cKEY Partitioning\u201d, for details). This example\n          uses linear partitioning by key to distribute data between 5\n          partitions:\n        Press CTRL+C to copy CREATE TABLE tk (col1 INT, col2 CHAR(5), col3 DATE)\n    PARTITION BY LINEAR KEY(col3)\n    PARTITIONS 5;\n          The ALGORITHM={1 | 2} option is supported\n          with [SUB]PARTITION BY [LINEAR] KEY.\n          ALGORITHM=1 causes the server to use the\n          same key-hashing functions as MySQL 5.1;\n          ALGORITHM=2 means that the server employs\n          the key-hashing functions implemented and used by default for\n          new KEY partitioned tables in MySQL 5.5 and\n          later. (Partitioned tables created with the key-hashing\n          functions employed in MySQL 5.5 and later cannot be used by a\n          MySQL 5.1 server.) Not specifying the option has the same\n          effect as using ALGORITHM=2. This option is\n          intended for use chiefly when upgrading or downgrading\n          [LINEAR] KEY partitioned tables between\n          MySQL 5.1 and later MySQL versions, or for creating tables\n          partitioned by KEY or LINEAR\n          KEY on a MySQL 5.5 or later server which can be used\n          on a MySQL 5.1 server. For more information, see\n          Section\u00a015.1.9.1, \u201cALTER TABLE Partition Operations\u201d.\n        \nmysqldump writes this option encased in\n          versioned comments.\n        \nALGORITHM=1 is shown when necessary in the\n          output of SHOW CREATE TABLE\n          using versioned comments in the same manner as\n          mysqldump. ALGORITHM=2\n          is always omitted from SHOW CREATE TABLE\n          output, even if this option was specified when creating the\n          original table.\n        \n          You may not use either VALUES LESS THAN or\n          VALUES IN clauses with PARTITION\n          BY KEY.\n        \nRANGE(expr)\n\n          In this case, expr shows a range of\n          values using a set of VALUES LESS THAN\n          operators. When using range partitioning, you must define at\n          least one partition using VALUES LESS THAN.\n          You cannot use VALUES IN with range\n          partitioning.\n\n\n\nNote\n\n\n            For tables partitioned by RANGE,\n            VALUES LESS THAN must be used with either\n            an integer literal value or an expression that evaluates to\n            a single integer value. In MySQL 8.4, you can\n            overcome this limitation in a table that is defined using\n            PARTITION BY RANGE COLUMNS, as described\n            later in this section.\n\n\n\n          Suppose that you have a table that you wish to partition on a\n          column containing year values, according to the following\n          scheme.\n\n\n\nPartition Number:\nYears Range:\n\n0\n1990 and earlier\n\n1\n1991 to 1994\n\n2\n1995 to 1998\n\n3\n1999 to 2002\n\n4\n2003 to 2005\n\n5\n2006 and later\n\n\n\n          A table implementing such a partitioning scheme can be\n          realized by the CREATE TABLE\n          statement shown here:\n        Press CTRL+C to copy CREATE TABLE t1 (\n    year_col  INT,\n    some_data INT\n)\nPARTITION BY RANGE (year_col) (\n    PARTITION p0 VALUES LESS THAN (1991),\n    PARTITION p1 VALUES LESS THAN (1995),\n    PARTITION p2 VALUES LESS THAN (1999),\n    PARTITION p3 VALUES LESS THAN (2002),\n    PARTITION p4 VALUES LESS THAN (2006),\n    PARTITION p5 VALUES LESS THAN MAXVALUE\n);\nPARTITION ... VALUES LESS THAN ...\n          statements work in a consecutive fashion. VALUES LESS\n          THAN MAXVALUE works to specify\n          \u201cleftover\u201d values that are greater than the\n          maximum value otherwise specified.\n        \nVALUES LESS THAN clauses work sequentially\n          in a manner similar to that of the case\n          portions of a switch ... case block (as\n          found in many programming languages such as C, Java, and PHP).\n          That is, the clauses must be arranged in such a way that the\n          upper limit specified in each successive VALUES LESS\n          THAN is greater than that of the previous one, with\n          the one referencing MAXVALUE coming last of\n          all in the list.\n        \nRANGE\n          COLUMNS(column_list)\n\n          This variant on RANGE facilitates partition\n          pruning for queries using range conditions on multiple columns\n          (that is, having conditions such as WHERE a = 1 AND b\n          < 10 or WHERE a = 1 AND b = 10 AND c\n          < 10). It enables you to specify value ranges in\n          multiple columns by using a list of columns in the\n          COLUMNS clause and a set of column values\n          in each PARTITION ... VALUES LESS THAN\n          (value_list) partition\n          definition clause. (In the simplest case, this set consists of\n          a single column.) The maximum number of columns that can be\n          referenced in the column_list and\n          value_list is 16.\n        \n          The column_list used in the\n          COLUMNS clause may contain only names of\n          columns; each column in the list must be one of the following\n          MySQL data types: the integer types; the string types; and\n          time or date column types. Columns using\n          BLOB, TEXT,\n          SET, ENUM,\n          BIT, or spatial data types are not\n          permitted; columns that use floating-point number types are\n          also not permitted. You also may not use functions or\n          arithmetic expressions in the COLUMNS\n          clause.\n        \n          The VALUES LESS THAN clause used in a\n          partition definition must specify a literal value for each\n          column that appears in the COLUMNS()\n          clause; that is, the list of values used for each\n          VALUES LESS THAN clause must contain the\n          same number of values as there are columns listed in the\n          COLUMNS clause. An attempt to use more or\n          fewer values in a VALUES LESS THAN clause\n          than there are in the COLUMNS clause causes\n          the statement to fail with the error Inconsistency\n          in usage of column lists for partitioning.... You\n          cannot use NULL for any value appearing in\n          VALUES LESS THAN. It is possible to use\n          MAXVALUE more than once for a given column\n          other than the first, as shown in this example:\n        Press CTRL+C to copy CREATE TABLE rc (\n    a INT NOT NULL,\n    b INT NOT NULL\n)\nPARTITION BY RANGE COLUMNS(a,b) (\n    PARTITION p0 VALUES LESS THAN (10,5),\n    PARTITION p1 VALUES LESS THAN (20,10),\n    PARTITION p2 VALUES LESS THAN (50,MAXVALUE),\n    PARTITION p3 VALUES LESS THAN (65,MAXVALUE),\n    PARTITION p4 VALUES LESS THAN (MAXVALUE,MAXVALUE)\n);\n          Each value used in a VALUES LESS THAN value\n          list must match the type of the corresponding column exactly;\n          no conversion is made. For example, you cannot use the string\n          '1' for a value that matches a column that\n          uses an integer type (you must use the numeral\n          1 instead), nor can you use the numeral\n          1 for a value that matches a column that\n          uses a string type (in such a case, you must use a quoted\n          string: '1').\n        \n          For more information, see\n          Section\u00a026.2.1, \u201cRANGE Partitioning\u201d, and\n          Section\u00a026.4, \u201cPartition Pruning\u201d.\n        \nLIST(expr)\n\n          This is useful when assigning partitions based on a table\n          column with a restricted set of possible values, such as a\n          state or country code. In such a case, all rows pertaining to\n          a certain state or country can be assigned to a single\n          partition, or a partition can be reserved for a certain set of\n          states or countries. It is similar to\n          RANGE, except that only VALUES\n          IN may be used to specify permissible values for\n          each partition.\n        \nVALUES IN is used with a list of values to\n          be matched. For instance, you could create a partitioning\n          scheme such as the following:\n        Press CTRL+C to copy CREATE TABLE client_firms (\n    id   INT,\n    name VARCHAR(35)\n)\nPARTITION BY LIST (id) (\n    PARTITION r0 VALUES IN (1, 5, 9, 13, 17, 21),\n    PARTITION r1 VALUES IN (2, 6, 10, 14, 18, 22),\n    PARTITION r2 VALUES IN (3, 7, 11, 15, 19, 23),\n    PARTITION r3 VALUES IN (4, 8, 12, 16, 20, 24)\n);\n          When using list partitioning, you must define at least one\n          partition using VALUES IN. You cannot use\n          VALUES LESS THAN with PARTITION BY\n          LIST.\n\n\n\nNote\n\n\n            For tables partitioned by LIST, the value\n            list used with VALUES IN must consist of\n            integer values only. In MySQL 8.4, you can\n            overcome this limitation using partitioning by LIST\n            COLUMNS, which is described later in this section.\n\n\n\nLIST\n          COLUMNS(column_list)\n\n          This variant on LIST facilitates partition\n          pruning for queries using comparison conditions on multiple\n          columns (that is, having conditions such as WHERE a =\n          5 AND b = 5 or WHERE a = 1 AND b = 10 AND c\n          = 5). It enables you to specify values in multiple\n          columns by using a list of columns in the\n          COLUMNS clause and a set of column values\n          in each PARTITION ... VALUES IN\n          (value_list) partition\n          definition clause.\n        \n          The rules governing regarding data types for the column list\n          used in LIST\n          COLUMNS(column_list) and\n          the value list used in VALUES\n          IN(value_list) are the\n          same as those for the column list used in RANGE\n          COLUMNS(column_list) and\n          the value list used in VALUES LESS\n          THAN(value_list),\n          respectively, except that in the VALUES IN\n          clause, MAXVALUE is not permitted, and you\n          may use NULL.\n        \n          There is one important difference between the list of values\n          used for VALUES IN with PARTITION\n          BY LIST COLUMNS as opposed to when it is used with\n          PARTITION BY LIST. When used with\n          PARTITION BY LIST COLUMNS, each element in\n          the VALUES IN clause must be a\n          set of column values; the number of\n          values in each set must be the same as the number of columns\n          used in the COLUMNS clause, and the data\n          types of these values must match those of the columns (and\n          occur in the same order). In the simplest case, the set\n          consists of a single column. The maximum number of columns\n          that can be used in the column_list\n          and in the elements making up the\n          value_list is 16.\n        \n          The table defined by the following CREATE\n          TABLE statement provides an example of a table using\n          LIST COLUMNS partitioning:\n        Press CTRL+C to copy CREATE TABLE lc (\n    a INT NULL,\n    b INT NULL\n)\nPARTITION BY LIST COLUMNS(a,b) (\n    PARTITION p0 VALUES IN( (0,0), (NULL,NULL) ),\n    PARTITION p1 VALUES IN( (0,1), (0,2), (0,3), (1,1), (1,2) ),\n    PARTITION p2 VALUES IN( (1,0), (2,0), (2,1), (3,0), (3,1) ),\n    PARTITION p3 VALUES IN( (1,3), (2,2), (2,3), (3,2), (3,3) )\n);\nPARTITIONS num\n\n          The number of partitions may optionally be specified with a\n          PARTITIONS num\n          clause, where num is the number of\n          partitions. If both this clause and any\n          PARTITION clauses are used,\n          num must be equal to the total\n          number of any partitions that are declared using\n          PARTITION clauses.\n\n\n\nNote\n\n\n            Whether or not you use a PARTITIONS\n            clause in creating a table that is partitioned by\n            RANGE or LIST, you\n            must still include at least one PARTITION\n            VALUES clause in the table definition (see below).\n\n\n\nSUBPARTITION BY\n\n          A partition may optionally be divided into a number of\n          subpartitions. This can be indicated by using the optional\n          SUBPARTITION BY clause. Subpartitioning may\n          be done by HASH or KEY.\n          Either of these may be LINEAR. These work\n          in the same way as previously described for the equivalent\n          partitioning types. (It is not possible to subpartition by\n          LIST or RANGE.)\n        \n          The number of subpartitions can be indicated using the\n          SUBPARTITIONS keyword followed by an\n          integer value.\n        \n          Rigorous checking of the value used in\n          PARTITIONS or\n          SUBPARTITIONS clauses is applied and this\n          value must adhere to the following rules:\n\n\n\n              The value must be a positive, nonzero integer.\n            \n              No leading zeros are permitted.\n            \n              The value must be an integer literal, and cannot not be an\n              expression. For example, PARTITIONS\n              0.2E+01 is not permitted, even though\n              0.2E+01 evaluates to\n              2. (Bug #15890)\n\n\n\npartition_definition\n\n          Each partition may be individually defined using a\n          partition_definition clause. The\n          individual parts making up this clause are as follows:\n\n\n\nPARTITION\n              partition_name\n\n              Specifies a logical name for the partition.\n            \nVALUES\n\n              For range partitioning, each partition must include a\n              VALUES LESS THAN clause; for list\n              partitioning, you must specify a VALUES\n              IN clause for each partition. This is used to\n              determine which rows are to be stored in this partition.\n              See the discussions of partitioning types in\n              Chapter\u00a026, Partitioning, for syntax examples.\n            \n[STORAGE] ENGINE\n\n              MySQL accepts a [STORAGE] ENGINE option\n              for both PARTITION and\n              SUBPARTITION. Currently, the only way\n              in which this option can be used is to set all partitions\n              or all subpartitions to the same storage engine, and an\n              attempt to set different storage engines for partitions or\n              subpartitions in the same table raises the error\n              ERROR 1469 (HY000): The mix of handlers in the\n              partitions is not permitted in this version of\n              MySQL.\n            \nCOMMENT\n\n              An optional COMMENT clause may be used\n              to specify a string that describes the partition. Example:\n            Press CTRL+C to copy COMMENT = 'Data for the years previous to 1999'\n              The maximum length for a partition comment is 1024\n              characters.\n            \nDATA DIRECTORY and INDEX\n              DIRECTORY\n\nDATA DIRECTORY and INDEX\n              DIRECTORY may be used to indicate the directory\n              where, respectively, the data and indexes for this\n              partition are to be stored. Both the\n              data_dir\n              and the\n              index_dir\n              must be absolute system path names.\n            \n              The directory specified in a DATA\n              DIRECTORY clause must be known to\n              InnoDB. For more information, see\n              Using the DATA DIRECTORY Clause.\n            \n              You must have the FILE\n              privilege to use the DATA DIRECTORY or\n              INDEX DIRECTORY partition option.\n            \n              Example:\n            Press CTRL+C to copy CREATE TABLE th (id INT, name VARCHAR(30), adate DATE)\nPARTITION BY LIST(YEAR(adate))\n(\n  PARTITION p1999 VALUES IN (1995, 1999, 2003)\n    DATA DIRECTORY = '/var/appdata/95/data'\n    INDEX DIRECTORY = '/var/appdata/95/idx',\n  PARTITION p2000 VALUES IN (1996, 2000, 2004)\n    DATA DIRECTORY = '/var/appdata/96/data'\n    INDEX DIRECTORY = '/var/appdata/96/idx',\n  PARTITION p2001 VALUES IN (1997, 2001, 2005)\n    DATA DIRECTORY = '/var/appdata/97/data'\n    INDEX DIRECTORY = '/var/appdata/97/idx',\n  PARTITION p2002 VALUES IN (1998, 2002, 2006)\n    DATA DIRECTORY = '/var/appdata/98/data'\n    INDEX DIRECTORY = '/var/appdata/98/idx'\n);\nDATA DIRECTORY and INDEX\n              DIRECTORY behave in the same way as in the\n              CREATE TABLE\n              statement's table_option\n              clause as used for MyISAM tables.\n            \n              One data directory and one index directory may be\n              specified per partition. If left unspecified, the data and\n              indexes are stored by default in the table's database\n              directory.\n            \n              The DATA DIRECTORY and INDEX\n              DIRECTORY options are ignored for creating\n              partitioned tables if\n              NO_DIR_IN_CREATE is in\n              effect.\n            \nMAX_ROWS and\n              MIN_ROWS\n\n              May be used to specify, respectively, the maximum and\n              minimum number of rows to be stored in the partition. The\n              values for max_number_of_rows\n              and min_number_of_rows must be\n              positive integers. As with the table-level options with\n              the same names, these act only as\n              \u201csuggestions\u201d to the server and are not hard\n              limits.\n            \nTABLESPACE\n\n              May be used to designate an InnoDB\n              file-per-table tablespace for the partition by specifying\n              TABLESPACE `innodb_file_per_table`. All\n              partitions must belong to the same storage engine.\n            \n              Placing InnoDB table partitions in\n              shared InnoDB tablespaces is not\n              supported. Shared tablespaces include the\n              InnoDB system tablespace and general\n              tablespaces.\n\n\n\nsubpartition_definition\n\n          The partition definition may optionally contain one or more\n          subpartition_definition clauses.\n          Each of these consists at a minimum of the\n          SUBPARTITION\n          name, where\n          name is an identifier for the\n          subpartition. Except for the replacement of the\n          PARTITION keyword with\n          SUBPARTITION, the syntax for a subpartition\n          definition is identical to that for a partition definition.\n        \n          Subpartitioning must be done by HASH or\n          KEY, and can be done only on\n          RANGE or LIST\n          partitions. See Section\u00a026.2.6, \u201cSubpartitioning\u201d.\n\n", "\nPartitioning by Generated Columns\n", "\n      Partitioning by generated columns is permitted. For example:\n    ", "Press CTRL+C to copy CREATE TABLE t1 (\n  s1 INT,\n  s2 INT AS (EXP(s1)) STORED\n)\nPARTITION BY LIST (s2) (\n  PARTITION p1 VALUES IN (1)\n);", "\n      Partitioning sees a generated column as a regular column, which\n      enables workarounds for limitations on functions that are not\n      permitted for partitioning (see\n      Section\u00a026.6.3, \u201cPartitioning Limitations Relating to Functions\u201d). The\n      preceding example demonstrates this technique:\n      EXP() cannot be used directly in\n      the PARTITION BY clause, but a generated column\n      defined using EXP() is permitted.\n"]}], "Examples": ["CREATE TABLE new_tbl LIKE orig_tbl;", "CREATE TABLE new_tbl AS SELECT * FROM orig_tbl;", "CREATE TABLE t (c CHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin);", "CREATE TABLE test (blob_col BLOB, INDEX(blob_col(10)));", "CREATE TABLE t1 (c1 INT ENGINE_ATTRIBUTE='{\"key\":\"value\"}');", "mysql> CREATE TABLE t1 (\n    ->     c1 INT STORAGE DISK,\n    ->     c2 INT STORAGE MEMORY\n    -> ) ENGINE NDB;\nERROR 1005 (HY000): Can't create table 'c.t1' (errno: 140)\n\nmysql> CREATE TABLE t1 (\n    ->     c1 INT STORAGE DISK,\n    ->     c2 INT STORAGE MEMORY\n    -> ) TABLESPACE ts_1 ENGINE NDB;\nQuery OK, 0 rows affected (1.06 sec)", "CREATE TABLE lookup\n  (id INT, INDEX USING BTREE (id)\n) ENGINE = MEMORY;", "CREATE TABLE t1 (\n    c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    c2 VARCHAR(100),\n    c3 VARCHAR(100) )\nENGINE=NDB\nCOMMENT=\"NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RP_BY_NODE\";", "CREATE TABLE t1 (c1 INT) ENGINE_ATTRIBUTE='{\"key\":\"value\"}';", "CREATE TABLE t1 (col1 INT, col2 CHAR(5))\n    PARTITION BY HASH(col1);\n\nCREATE TABLE t1 (col1 INT, col2 CHAR(5), col3 DATETIME)\n    PARTITION BY HASH ( YEAR(col3) );", "CREATE TABLE tk (col1 INT, col2 CHAR(5), col3 DATE)\n    PARTITION BY KEY(col3)\n    PARTITIONS 4;", "CREATE TABLE tk (col1 INT, col2 CHAR(5), col3 DATE)\n    PARTITION BY LINEAR KEY(col3)\n    PARTITIONS 5;", "CREATE TABLE t1 (\n    year_col  INT,\n    some_data INT\n)\nPARTITION BY RANGE (year_col) (\n    PARTITION p0 VALUES LESS THAN (1991),\n    PARTITION p1 VALUES LESS THAN (1995),\n    PARTITION p2 VALUES LESS THAN (1999),\n    PARTITION p3 VALUES LESS THAN (2002),\n    PARTITION p4 VALUES LESS THAN (2006),\n    PARTITION p5 VALUES LESS THAN MAXVALUE\n);", "CREATE TABLE rc (\n    a INT NOT NULL,\n    b INT NOT NULL\n)\nPARTITION BY RANGE COLUMNS(a,b) (\n    PARTITION p0 VALUES LESS THAN (10,5),\n    PARTITION p1 VALUES LESS THAN (20,10),\n    PARTITION p2 VALUES LESS THAN (50,MAXVALUE),\n    PARTITION p3 VALUES LESS THAN (65,MAXVALUE),\n    PARTITION p4 VALUES LESS THAN (MAXVALUE,MAXVALUE)\n);", "CREATE TABLE client_firms (\n    id   INT,\n    name VARCHAR(35)\n)\nPARTITION BY LIST (id) (\n    PARTITION r0 VALUES IN (1, 5, 9, 13, 17, 21),\n    PARTITION r1 VALUES IN (2, 6, 10, 14, 18, 22),\n    PARTITION r2 VALUES IN (3, 7, 11, 15, 19, 23),\n    PARTITION r3 VALUES IN (4, 8, 12, 16, 20, 24)\n);", "CREATE TABLE lc (\n    a INT NULL,\n    b INT NULL\n)\nPARTITION BY LIST COLUMNS(a,b) (\n    PARTITION p0 VALUES IN( (0,0), (NULL,NULL) ),\n    PARTITION p1 VALUES IN( (0,1), (0,2), (0,3), (1,1), (1,2) ),\n    PARTITION p2 VALUES IN( (1,0), (2,0), (2,1), (3,0), (3,1) ),\n    PARTITION p3 VALUES IN( (1,3), (2,2), (2,3), (3,2), (3,3) )\n);", "CREATE TABLE th (id INT, name VARCHAR(30), adate DATE)\nPARTITION BY LIST(YEAR(adate))\n(\n  PARTITION p1999 VALUES IN (1995, 1999, 2003)\n    DATA DIRECTORY = '/var/appdata/95/data'\n    INDEX DIRECTORY = '/var/appdata/95/idx',\n  PARTITION p2000 VALUES IN (1996, 2000, 2004)\n    DATA DIRECTORY = '/var/appdata/96/data'\n    INDEX DIRECTORY = '/var/appdata/96/idx',\n  PARTITION p2001 VALUES IN (1997, 2001, 2005)\n    DATA DIRECTORY = '/var/appdata/97/data'\n    INDEX DIRECTORY = '/var/appdata/97/idx',\n  PARTITION p2002 VALUES IN (1998, 2002, 2006)\n    DATA DIRECTORY = '/var/appdata/98/data'\n    INDEX DIRECTORY = '/var/appdata/98/idx'\n);", "CREATE TABLE t1 (\n  s1 INT,\n  s2 INT AS (EXP(s1)) STORED\n)\nPARTITION BY LIST (s2) (\n  PARTITION p1 VALUES IN (1)\n);"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/invisible-columns.html"], "Title": ["15.1.20.10 Invisible Columns"], "Feature": ["mysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `i` int DEFAULT NULL,\n  `j` int DEFAULT NULL,\n  `k` int DEFAULT NULL /*!80023 INVISIBLE */\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci"], "Description": ["\n        MySQL 8.4 supports invisible columns. An invisible\n        column is normally hidden to queries, but can be accessed if\n        explicitly referenced.\n      ", "\n        As an illustration of when invisible columns may be useful,\n        suppose that an application uses SELECT *\n        queries to access a table, and must continue to work without\n        modification even if the table is altered to add a new column\n        that the application does not expect to be there. In a\n        SELECT * query, the *\n        evaluates to all table columns, except those that are invisible,\n        so the solution is to add the new column as an invisible column.\n        The column remains \u201chidden\u201d from SELECT\n        * queries, and the application continues to work as\n        previously. A newer version of the application can refer to the\n        invisible column if necessary by explicitly referencing it.\n      ", "\n        The following sections detail how MySQL treats invisible\n        columns.\n", "\nDDL Statements and Invisible ColumnsDML Statements and Invisible ColumnsInvisible Column MetadataThe Binary Log and Invisible Columns\n", "\n\n\n\nDDL Statements and Invisible Columns\n\n\n\n\n          Columns are visible by default. To explicitly specify\n          visibility for a new column, use a VISIBLE\n          or INVISIBLE keyword as part of the column\n          definition for CREATE TABLE or\n          ALTER TABLE:\n        Press CTRL+C to copy CREATE TABLE t1 (\n  i INT,\n  j DATE INVISIBLE\n) ENGINE = InnoDB;\nALTER TABLE t1 ADD COLUMN k INT INVISIBLE;\n          To alter the visibility of an existing column, use a\n          VISIBLE or INVISIBLE\n          keyword with one of the ALTER TABLE\n          column-modification clauses:\n        Press CTRL+C to copy ALTER TABLE t1 CHANGE COLUMN j j DATE VISIBLE;\nALTER TABLE t1 MODIFY COLUMN j DATE INVISIBLE;\nALTER TABLE t1 ALTER COLUMN j SET VISIBLE;\n          A table must have at least one visible column. Attempting to\n          make all columns invisible produces an error.\n        \n          Invisible columns support the usual column attributes:\n          NULL, NOT NULL,\n          AUTO_INCREMENT, and so forth.\n        \n          Generated columns can be invisible.\n        \n          Index definitions can name invisible columns, including\n          definitions for PRIMARY KEY and\n          UNIQUE indexes. Although a table must have\n          at least one visible column, an index definition need not have\n          any visible columns.\n        \n          An invisible column dropped from a table is dropped in the\n          usual way from any index definition that names the column.\n        \n          Foreign key constraints can be defined on invisible columns,\n          and foreign key constraints can reference invisible columns.\n        \nCHECK constraints can be defined on\n          invisible columns. For new or modified rows, violation of a\n          CHECK constraint on an invisible column\n          produces an error.\n        \nCREATE\n          TABLE ... LIKE includes invisible columns, and they\n          are invisible in the new table.\n        \nCREATE\n          TABLE ... SELECT does not include invisible columns,\n          unless they are explicitly referenced in the\n          SELECT part. However, even if\n          explicitly referenced, a column that is invisible in the\n          existing table is visible in the new table:\n        Press CTRL+C to copy mysql> CREATE TABLE t1 (col1 INT, col2 INT INVISIBLE);\nmysql> CREATE TABLE t2 AS SELECT col1, col2 FROM t1;\nmysql> SHOW CREATE TABLE t2\\G\n*************************** 1. row ***************************\n       Table: t2\nCreate Table: CREATE TABLE `t2` (\n  `col1` int DEFAULT NULL,\n  `col2` int DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n          If invisibility should be preserved, provide a definition for\n          the invisible column in the CREATE\n          TABLE part of the\n          CREATE\n          TABLE ... SELECT statement:\n        Press CTRL+C to copy mysql> CREATE TABLE t1 (col1 INT, col2 INT INVISIBLE);\nmysql> CREATE TABLE t2 (col2 INT INVISIBLE) AS SELECT col1, col2 FROM t1;\nmysql> SHOW CREATE TABLE t2\\G\n*************************** 1. row ***************************\n       Table: t2\nCreate Table: CREATE TABLE `t2` (\n  `col1` int DEFAULT NULL,\n  `col2` int DEFAULT NULL /*!80023 INVISIBLE */\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n          Views can refer to invisible columns by explicitly referencing\n          them in the SELECT statement that defines\n          the view. Changing a column's visibility subsequent to\n          defining a view that references the column does not change\n          view behavior.\n\n", "\n\n\n\nDML Statements and Invisible Columns\n\n\n\n\n          For SELECT statements, an\n          invisible column is not part of the result set unless\n          explicitly referenced in the select list. In a select list,\n          the * and\n          tbl_name.*\n          shorthands do not include invisible columns. Natural joins do\n          not include invisible columns.\n        \n          Consider the following statement sequence:\n        Press CTRL+C to copy mysql> CREATE TABLE t1 (col1 INT, col2 INT INVISIBLE);\nmysql> INSERT INTO t1 (col1, col2) VALUES(1, 2), (3, 4);\n\nmysql> SELECT * FROM t1;\n+------+\n| col1 |\n+------+\n|    1 |\n|    3 |\n+------+\n\nmysql> SELECT col1, col2 FROM t1;\n+------+------+\n| col1 | col2 |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n+------+------+\n          The first SELECT does not reference the\n          invisible column col2 in the select list\n          (because * does not include invisible\n          columns), so col2 does not appear in the\n          statement result. The second SELECT\n          explicitly references col2, so the column\n          appears in the result.\n        \n          The statement TABLE\n          t1 produces the same output as the first\n          SELECT statement. Since there is no way to\n          specify columns in a TABLE statement,\n          TABLE never displays invisible columns.\n        \n          For statements that create new rows, an invisible column is\n          assigned its implicit default value unless explicitly\n          referenced and assigned a value. For information about\n          implicit defaults, see\n          Implicit Default Handling.\n        \n          For INSERT (and\n          REPLACE, for non-replaced\n          rows), implicit default assignment occurs with a missing\n          column list, an empty column list, or a nonempty column list\n          that does not include the invisible column:\n        Press CTRL+C to copy CREATE TABLE t1 (col1 INT, col2 INT INVISIBLE);\nINSERT INTO t1 VALUES(...);\nINSERT INTO t1 () VALUES(...);\nINSERT INTO t1 (col1) VALUES(...);\n          For the first two INSERT\n          statements, the VALUES() list must provide\n          a value for each visible column and no invisible column. For\n          the third INSERT statement, the\n          VALUES() list must provide the same number\n          of values as the number of named columns; the same is true\n          when you use VALUES\n          ROW() rather than VALUES().\n        \n          For LOAD DATA and\n          LOAD XML, implicit default\n          assignment occurs with a missing column list or a nonempty\n          column list that does not include the invisible column. Input\n          rows should not include a value for the invisible column.\n        \n          To assign a value other than the implicit default for the\n          preceding statements, explicitly name the invisible column in\n          the column list and provide a value for it.\n        \nINSERT INTO ...\n          SELECT * and\n          REPLACE INTO ...\n          SELECT * do not include invisible columns because\n          * does not include invisible columns.\n          Implicit default assignment occurs as described previously.\n        \n          For statements that insert or ignore new rows, or that replace\n          or modify existing rows, based on values in a PRIMARY\n          KEY or UNIQUE index, MySQL treats\n          invisible columns the same as visible columns: Invisible\n          columns participate in key value comparisons. Specifically, if\n          a new row has the same value as an existing row for a unique\n          key value, these behaviors occur whether the index columns are\n          visible or invisible:\n\n\n\n              With the IGNORE modifier,\n              INSERT,\n              LOAD DATA, and\n              LOAD XML ignore the new\n              row.\n            \nREPLACE replaces the\n              existing row with the new row. With the\n              REPLACE modifier,\n              LOAD DATA and\n              LOAD XML do the same.\n            \nINSERT\n              ... ON DUPLICATE KEY UPDATE updates the existing\n              row.\n\n\n\n          To update invisible columns for\n          UPDATE statements, name them\n          and assign a value, just as for visible columns.\n\n", "\n\n\n\nInvisible Column Metadata\n\n\n\n\n          Information about whether a column is visible or invisible is\n          available from the EXTRA column of the\n          Information Schema COLUMNS table\n          or SHOW COLUMNS output. For\n          example:\n        Press CTRL+C to copy mysql> SELECT TABLE_NAME, COLUMN_NAME, EXTRA\n       FROM INFORMATION_SCHEMA.COLUMNS\n       WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME = 't1';\n+------------+-------------+-----------+\n| TABLE_NAME | COLUMN_NAME | EXTRA     |\n+------------+-------------+-----------+\n| t1         | i           |           |\n| t1         | j           |           |\n| t1         | k           | INVISIBLE |\n+------------+-------------+-----------+\n          Columns are visible by default, so in that case,\n          EXTRA displays no visibility information.\n          For invisible columns, EXTRA displays\n          INVISIBLE.\n        \nSHOW CREATE TABLE displays invisible\n          columns in the table definition, with the\n          INVISIBLE keyword in a version-specific\n          comment:\n        Press CTRL+C to copy mysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `i` int DEFAULT NULL,\n  `j` int DEFAULT NULL,\n  `k` int DEFAULT NULL /*!80023 INVISIBLE */\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\nmysqldump uses SHOW CREATE\n          TABLE, so they include invisible columns in dumped\n          table definitions. They also include invisible column values\n          in dumped data.\n        \n          Reloading a dump file into an older version of MySQL that does\n          not support invisible columns causes the version-specific\n          comment to be ignored, which creates any invisible columns as\n          visible.\n\n", "\n\n\n\nThe Binary Log and Invisible Columns\n\n\n\n\n          MySQL treats invisible columns as follows with respect to\n          events in the binary log:\n\n\n\n              Table-creation events include the\n              INVISIBLE attribute for invisible\n              columns.\n            \n              Invisible columns are treated like visible columns in row\n              events. They are included if needed according to the\n              binlog_row_image system\n              variable setting.\n            \n              When row events are applied, invisible columns are treated\n              like visible columns in row events.\n            \n              Invisible columns are treated like visible columns when\n              computing writesets. In particular, writesets include\n              indexes defined on invisible columns.\n            \n              The mysqlbinlog command includes\n              visibility in column metadata.\n\n\n"], "Examples": ["CREATE TABLE t1 (\n  i INT,\n  j DATE INVISIBLE\n) ENGINE = InnoDB;\nALTER TABLE t1 ADD COLUMN k INT INVISIBLE;", "ALTER TABLE t1 CHANGE COLUMN j j DATE VISIBLE;\nALTER TABLE t1 MODIFY COLUMN j DATE INVISIBLE;\nALTER TABLE t1 ALTER COLUMN j SET VISIBLE;", "mysql> CREATE TABLE t1 (col1 INT, col2 INT INVISIBLE);\nmysql> CREATE TABLE t2 AS SELECT col1, col2 FROM t1;\nmysql> SHOW CREATE TABLE t2\\G\n*************************** 1. row ***************************\n       Table: t2\nCreate Table: CREATE TABLE `t2` (\n  `col1` int DEFAULT NULL,\n  `col2` int DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "mysql> CREATE TABLE t1 (col1 INT, col2 INT INVISIBLE);\nmysql> CREATE TABLE t2 (col2 INT INVISIBLE) AS SELECT col1, col2 FROM t1;\nmysql> SHOW CREATE TABLE t2\\G\n*************************** 1. row ***************************\n       Table: t2\nCreate Table: CREATE TABLE `t2` (\n  `col1` int DEFAULT NULL,\n  `col2` int DEFAULT NULL /*!80023 INVISIBLE */\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "mysql> CREATE TABLE t1 (col1 INT, col2 INT INVISIBLE);\nmysql> INSERT INTO t1 (col1, col2) VALUES(1, 2), (3, 4);\n\nmysql> SELECT * FROM t1;\n+------+\n| col1 |\n+------+\n|    1 |\n|    3 |\n+------+\n\nmysql> SELECT col1, col2 FROM t1;\n+------+------+\n| col1 | col2 |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n+------+------+", "CREATE TABLE t1 (col1 INT, col2 INT INVISIBLE);\nINSERT INTO t1 VALUES(...);\nINSERT INTO t1 () VALUES(...);\nINSERT INTO t1 (col1) VALUES(...);", "mysql> SELECT TABLE_NAME, COLUMN_NAME, EXTRA\n       FROM INFORMATION_SCHEMA.COLUMNS\n       WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME = 't1';\n+------------+-------------+-----------+\n| TABLE_NAME | COLUMN_NAME | EXTRA     |\n+------------+-------------+-----------+\n| t1         | i           |           |\n| t1         | j           |           |\n| t1         | k           | INVISIBLE |\n+------------+-------------+-----------+"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-table-gipks.html"], "Title": ["15.1.20.11 Generated Invisible Primary Keys"], "Feature": ["mysql> SHOW CREATE TABLE auto_0\\G\n*************************** 1. row ***************************\n       Table: auto_0\nCreate Table: CREATE TABLE `auto_0` (\n  `c1` varchar(50) DEFAULT NULL,\n  `c2` int DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)\n\nmysql> SHOW CREATE TABLE auto_1\\G\n*************************** 1. row ***************************\n       Table: auto_1\nCreate Table: CREATE TABLE `auto_1` (\n  `my_row_id` bigint unsigned NOT NULL AUTO_INCREMENT /*!80023 INVISIBLE */,\n  `c1` varchar(50) DEFAULT NULL,\n  `c2` int DEFAULT NULL,\n  PRIMARY KEY (`my_row_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)"], "Description": ["\n        MySQL 8.4 supports generated invisible primary keys\n        for any InnoDB table that is\n        created without an explicit primary key. When the\n        sql_generate_invisible_primary_key\n        server system variable is set to ON, the\n        MySQL server automatically adds a generated invisible primary\n        key (GIPK) to any such table. This setting has no effect on\n        tables created using any other storage engine than\n        InnoDB.\n      ", "\n        By default, the value of\n        sql_generate_invisible_primary_key is\n        OFF, meaning that the automatic addition of\n        GIPKs is disabled. To illustrate how this affects table\n        creation, we begin by creating two identical tables, neither\n        having a primary key, the only difference being that the first\n        (table auto_0) is created with\n        sql_generate_invisible_primary_key set to\n        OFF, and the second\n        (auto_1) after setting it to\n        ON, as shown here:\n      ", "Press CTRL+C to copy mysql> SELECT @@sql_generate_invisible_primary_key;\n+--------------------------------------+\n| @@sql_generate_invisible_primary_key |\n+--------------------------------------+\n|                                    0 |\n+--------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> CREATE TABLE auto_0 (c1 VARCHAR(50), c2 INT);\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> SET sql_generate_invisible_primary_key=ON;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @@sql_generate_invisible_primary_key;\n+--------------------------------------+\n| @@sql_generate_invisible_primary_key |\n+--------------------------------------+\n|                                    1 |\n+--------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> CREATE TABLE auto_1 (c1 VARCHAR(50), c2 INT);\nQuery OK, 0 rows affected (0.04 sec)", "\n        Compare the output of these SHOW CREATE\n        TABLE statements to see the difference in how the\n        tables were actually created:\n      ", "\n        Since auto_1 had no primary key specified by\n        the CREATE TABLE statement used to create it,\n        setting sql_generate_invisible_primary_key =\n        ON causes MySQL to add both the invisible column\n        my_row_id to this table and a primary key on\n        that column. Since\n        sql_generate_invisible_primary_key was\n        OFF at the time that\n        auto_0 was created, no such additions were\n        performed on that table.\n      ", "\n        When a primary key is added to a table by the server, the column\n        and key name is always my_row_id. For this\n        reason, when enabling generated invisible primary keys in this\n        way, you cannot create a table having a column named\n        my_row_id unless the table creation statement\n        also specifies an explicit primary key. (You are not required to\n        name the column or key my_row_id in such\n        cases.)\n      ", "\nmy_row_id is an invisible column, which means\n        it is not shown in the output of\n        SELECT * or\n        TABLE; the column must be\n        selected explicitly by name. See\n        Section\u00a015.1.20.10, \u201cInvisible Columns\u201d.\n      ", "\n        When GIPKs are enabled, a generated primary key cannot be\n        altered other than to switch it between\n        VISIBLE and INVISIBLE. To\n        make the generated invisible primary key on\n        auto_1 visible, execute this\n        ALTER TABLE statement:\n      ", "Press CTRL+C to copy mysql> ALTER TABLE auto_1 ALTER COLUMN my_row_id SET VISIBLE;\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE auto_1\\G\n*************************** 1. row ***************************\n       Table: auto_1\nCreate Table: CREATE TABLE `auto_1` (\n  `my_row_id` bigint unsigned NOT NULL AUTO_INCREMENT,\n  `c1` varchar(50) DEFAULT NULL,\n  `c2` int DEFAULT NULL,\n  PRIMARY KEY (`my_row_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)", "\n        To make this generated primary key invisible again, issue\n        ALTER TABLE auto_1 ALTER COLUMN my_row_id SET\n        INVISIBLE.\n      ", "\n        A generated invisible primary key is always invisible by\n        default.\n      ", "\n        Whenever GIPKs are enabled, you cannot drop a generated primary\n        key if either of the following 2 conditions would result:\n", "\n\n            The table is left with no primary key.\n          \n            The primary key is dropped, but not the primary key column.\n\n", "\n        The effects of\n        sql_generate_invisible_primary_key apply to\n        tables using the InnoDB storage engine only.\n        You can use an ALTER TABLE\n        statement to change the storage engine used by a table that has\n        a generated invisible primary key; in this case, the primary key\n        and column remain in place, but the table and key no longer\n        receive any special treatment.\n      ", "\n        By default, GIPKs are shown in the output of\n        SHOW CREATE TABLE,\n        SHOW COLUMNS, and\n        SHOW INDEX, and are visible in\n        the Information Schema COLUMNS and\n        STATISTICS tables. You can cause\n        generated invisible primary keys to be hidden instead in such\n        cases by setting the\n        show_gipk_in_create_table_and_information_schema\n        system variable to OFF. By default, this\n        variable is ON, as shown here:\n      ", "Press CTRL+C to copy mysql> SELECT @@show_gipk_in_create_table_and_information_schema;\n+----------------------------------------------------+\n| @@show_gipk_in_create_table_and_information_schema |\n+----------------------------------------------------+\n|                                                  1 |\n+----------------------------------------------------+\n1 row in set (0.00 sec)", "\n        As can be seen from the following query against the\n        COLUMNS table, my_row_id\n        is visible among the columns of auto_1:\n      ", "Press CTRL+C to copy mysql> SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE, COLUMN_KEY\n    -> FROM INFORMATION_SCHEMA.COLUMNS\n    -> WHERE TABLE_NAME = \"auto_1\";\n+-------------+------------------+-----------+------------+\n| COLUMN_NAME | ORDINAL_POSITION | DATA_TYPE | COLUMN_KEY |\n+-------------+------------------+-----------+------------+\n| my_row_id   |                1 | bigint    | PRI        |\n| c1          |                2 | varchar   |            |\n| c2          |                3 | int       |            |\n+-------------+------------------+-----------+------------+\n3 rows in set (0.01 sec)", "\n        After\n        show_gipk_in_create_table_and_information_schema\n        is set to OFF, my_row_id\n        can no longer be seen in the COLUMNS table,\n        as shown here:\n      ", "Press CTRL+C to copy mysql> SET show_gipk_in_create_table_and_information_schema = OFF;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @@show_gipk_in_create_table_and_information_schema;\n+----------------------------------------------------+\n| @@show_gipk_in_create_table_and_information_schema |\n+----------------------------------------------------+\n|                                                  0 |\n+----------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE, COLUMN_KEY\n    -> FROM INFORMATION_SCHEMA.COLUMNS\n    -> WHERE TABLE_NAME = \"auto_1\";\n+-------------+------------------+-----------+------------+\n| COLUMN_NAME | ORDINAL_POSITION | DATA_TYPE | COLUMN_KEY |\n+-------------+------------------+-----------+------------+\n| c1          |                2 | varchar   |            |\n| c2          |                3 | int       |            |\n+-------------+------------------+-----------+------------+\n2 rows in set (0.00 sec)", "\n        The setting for\n        sql_generate_invisible_primary_key is not\n        replicated, and is ignored by replication applier threads. This\n        means that the setting of this variable on the source has no\n        effect on the replica. You can cause the replica to add a GIPK\n        for tables replicated without primary keys on a given\n        replication channel using\n        REQUIRE_TABLE_PRIMARY_KEY_CHECK = GENERATE as\n        part of a\n        CHANGE\n        REPLICATION SOURCE TO statement.\n      ", "\n        GIPKs work with row-based replication of\n        CREATE\n        TABLE ... SELECT; the information written to the\n        binary log for this statement in such cases includes the GIPK\n        definition, and thus is replicated correctly. Statement-based\n        replication of CREATE TABLE ... SELECT is not\n        supported with sql_generate_invisible_primary_key =\n        ON.\n      ", "\n        When creating or importing backups of installations where GIPKs\n        are in use, it is possible to exclude generated invisible\n        primary key columns and values. The\n        --skip-generated-invisible-primary-key\n        option for mysqldump causes GIPK information\n        to be excluded in the program's output.\n"], "Examples": ["mysql> SELECT @@sql_generate_invisible_primary_key;\n+--------------------------------------+\n| @@sql_generate_invisible_primary_key |\n+--------------------------------------+\n|                                    0 |\n+--------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> CREATE TABLE auto_0 (c1 VARCHAR(50), c2 INT);\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> SET sql_generate_invisible_primary_key=ON;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @@sql_generate_invisible_primary_key;\n+--------------------------------------+\n| @@sql_generate_invisible_primary_key |\n+--------------------------------------+\n|                                    1 |\n+--------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> CREATE TABLE auto_1 (c1 VARCHAR(50), c2 INT);\nQuery OK, 0 rows affected (0.04 sec)", "mysql> ALTER TABLE auto_1 ALTER COLUMN my_row_id SET VISIBLE;\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE auto_1\\G\n*************************** 1. row ***************************\n       Table: auto_1\nCreate Table: CREATE TABLE `auto_1` (\n  `my_row_id` bigint unsigned NOT NULL AUTO_INCREMENT,\n  `c1` varchar(50) DEFAULT NULL,\n  `c2` int DEFAULT NULL,\n  PRIMARY KEY (`my_row_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)", "mysql> SELECT @@show_gipk_in_create_table_and_information_schema;\n+----------------------------------------------------+\n| @@show_gipk_in_create_table_and_information_schema |\n+----------------------------------------------------+\n|                                                  1 |\n+----------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE, COLUMN_KEY\n    -> FROM INFORMATION_SCHEMA.COLUMNS\n    -> WHERE TABLE_NAME = \"auto_1\";\n+-------------+------------------+-----------+------------+\n| COLUMN_NAME | ORDINAL_POSITION | DATA_TYPE | COLUMN_KEY |\n+-------------+------------------+-----------+------------+\n| my_row_id   |                1 | bigint    | PRI        |\n| c1          |                2 | varchar   |            |\n| c2          |                3 | int       |            |\n+-------------+------------------+-----------+------------+\n3 rows in set (0.01 sec)", "mysql> SET show_gipk_in_create_table_and_information_schema = OFF;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @@show_gipk_in_create_table_and_information_schema;\n+----------------------------------------------------+\n| @@show_gipk_in_create_table_and_information_schema |\n+----------------------------------------------------+\n|                                                  0 |\n+----------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT COLUMN_NAME, ORDINAL_POSITION, DATA_TYPE, COLUMN_KEY\n    -> FROM INFORMATION_SCHEMA.COLUMNS\n    -> WHERE TABLE_NAME = \"auto_1\";\n+-------------+------------------+-----------+------------+\n| COLUMN_NAME | ORDINAL_POSITION | DATA_TYPE | COLUMN_KEY |\n+-------------+------------------+-----------+------------+\n| c1          |                2 | varchar   |            |\n| c2          |                3 | int       |            |\n+-------------+------------------+-----------+------------+\n2 rows in set (0.00 sec)"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-table-ndb-comment-options.html"], "Title": ["15.1.20.12 Setting NDB Comment Options"], "Feature": ["COMMENT 'NDB_COLUMN=speclist'\n\nspeclist := spec[,spec]\n\nspec := \n    BLOB_INLINE_SIZE=value\n  | MAX_BLOB_PART_SIZE[={0|1}]", "COMMENT=\"NDB_TABLE=ndb_table_option[,ndb_table_option[,...]]\"\n\nndb_table_option: {\n    NOLOGGING={1 | 0}\n  | READ_BACKUP={1 | 0}\n  | PARTITION_BALANCE={FOR_RP_BY_NODE | FOR_RA_BY_NODE | FOR_RP_BY_LDM\n                      | FOR_RA_BY_LDM | FOR_RA_BY_LDM_X_2\n                      | FOR_RA_BY_LDM_X_3 | FOR_RA_BY_LDM_X_4}\n  | FULLY_REPLICATED={1 | 0}\n}", "mysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n     > FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\"\\G\n*************************** 1. row ***************************\n   TABLE_NAME: t1\n TABLE_SCHEMA: test\nTABLE_COMMENT: NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RP_BY_NODE\n1 row in set (0.01 sec)", "mysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n    ->     FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\"\\G\n*************************** 1. row ***************************\n   TABLE_NAME: t1\n TABLE_SCHEMA: test\nTABLE_COMMENT: NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RP_BY_NODE\n1 row in set (0.01 sec)"], "Description": ["\nNDB_COLUMN OptionsNDB_TABLE Options\n", "\n\n\n\n\n        It is possible to set a number of options specific to NDB\n        Cluster in the table comment or column comments of an\n        NDB table. Table-level options for\n        controlling read from any replica and partition balance can be\n        embedded in a table comment using NDB_TABLE.\n      ", "\nNDB_COLUMN can be used in a column comment to\n        set the size of the blob parts table column used for storing\n        parts of blob values by NDB to its maximum.\n        This works for BLOB,\n        MEDIUMBLOB, LONGBLOB,\n        TEXT,\n        MEDIUMTEXT, LONGTEXT, and\n        JSON columns. A column comment\n        can also be used to control the inline size of a blob column.\n        NDB_COLUMN comments do not support\n        TINYBLOB or TINYTEXT\n        columns, since these have an inline part (only) of fixed size,\n        and no separate parts to store elsewhere.\n      ", "\nNDB_TABLE can be used in a table comment to\n        set options relating to partition balance and whether the table\n        is fully replicated, among others.\n      ", "\n        The remainder of this section describes these options and their\n        use.\n", "NDB_COLUMN Options", "\n\n\n\n\n\n        In NDB Cluster, a column comment in a CREATE\n        TABLE or ALTER TABLE\n        statement can also be used to specify an\n        NDB_COLUMN option. NDB\n        supports two column comment options\n        BLOB_INLINE_SIZE and\n        MAX_BLOB_PART_SIZE. Syntax for these options\n        is shown here:\n      ", "\nBLOB_INLINE_SIZE specifies the number of\n        bytes to be stored inline by the column; its expected value is\n        an integer in the range 1 - 29980, inclusive. Setting a value\n        greater than 29980 raises an error; setting a value less than 1\n        is allowed, but causes the default inline size for the column\n        type to be used.\n      ", "\n        You should be aware that the maximum value for this option is\n        actually the maximum number of bytes that can be stored in one\n        row of an NDB table; every column in the row\n        contributes to this total.\n      ", "\n        You should also keep in mind, especially when working with\n        TEXT columns, that the value set by\n        MAX_BLOB_PART_SIZE or\n        BLOB_INLINE_SIZE represents column size in\n        bytes. It does not indicate the number of characters, which\n        varies according to the character set and collation used by the\n        column.\n      ", "\n        To see the effects of this option, first create a table with two\n        BLOB columns, one (b1)\n        with no extra options, and another (b2) with\n        a setting for BLOB_INLINE_SIZE, as shown\n        here:\n      ", "Press CTRL+C to copy mysql> CREATE TABLE t1 (\n    ->    a INT NOT NULL PRIMARY KEY,\n    ->    b1 BLOB,\n    ->    b2 BLOB COMMENT 'NDB_COLUMN=BLOB_INLINE_SIZE=8000'\n    ->  ) ENGINE NDB;\nQuery OK, 0 rows affected (0.32 sec)", "\n        You can see the BLOB_INLINE_SIZE settings for\n        the BLOB columns by querying the\n        ndbinfo.blobs table, like\n        this:\n      ", "Press CTRL+C to copy mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't1';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| b1          |         256 |           2000 |\n| b2          |        8000 |           2000 |\n+-------------+-------------+----------------+\n2 rows in set (0.01 sec)", "\n        You can also check the output from the\n        ndb_desc utility, as shown here, with the\n        relevant lines displayed using emphasized text:\n      ", "\n        For MAX_BLOB_PART_SIZE, the\n        = sign and the value following it are\n        optional. Using any value other than 0 or 1 results in a syntax\n        error.\n      ", "\n        The effect of using MAX_BLOB_PART_SIZE in a\n        column comment is to set the blob part size of a\n        TEXT or\n        BLOB column to the maximum number\n        of bytes supported for this by NDB (13948).\n        This option can be applied to any blob column type supported by\n        MySQL except TINYBLOB or\n        TINYTEXT (BLOB,\n        MEDIUMBLOB, LONGBLOB,\n        TEXT, MEDIUMTEXT,\n        LONGTEXT). Unlike\n        BLOB_INLINE_SIZE,\n        MAX_BLOB_PART_SIZE has no effect on\n        JSON columns.\n      ", "\n        To see the effects of this option, we first run the following\n        SQL statement in the mysql client to create a\n        table with two BLOB columns, one\n        (c1) with no extra options, and another\n        (c2) with\n        MAX_BLOB_PART_SIZE:\n      ", "Press CTRL+C to copy mysql> CREATE TABLE test.t2 (\n    ->   p INT PRIMARY KEY, \n    ->   c1 BLOB, \n    ->   c2 BLOB COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE'\n    -> ) ENGINE NDB;\nQuery OK, 0 rows affected (0.32 sec)", "\n        From the system shell, run the ndb_desc\n        utility to obtain information about the table just created, as\n        shown in this example:\n      ", "\n        Column information in the output is listed under\n        Attributes; for columns c1\n        and c2 it is displayed here in emphasized\n        text. For c1, the blob part size is 2000, the\n        default value; for c2, it is 13948, as set by\n        MAX_BLOB_PART_SIZE.\n      ", "\n        You can also query the ndbinfo.blobs table to\n        see this, as shown here:\n      ", "Press CTRL+C to copy mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't2';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |         256 |           2000 |\n| c2          |         256 |          13948 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)", "\n        You can change the blob part size for a given blob column of an\n        NDB table using an ALTER\n        TABLE statement such as this one, and verifying the\n        changes afterwards using SHOW CREATE\n        TABLE:\n      ", "Press CTRL+C to copy mysql> ALTER TABLE test.t2 \n    ->    DROP COLUMN c1, \n    ->     ADD COLUMN c1 BLOB COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE',\n    ->     CHANGE COLUMN c2 c2 BLOB AFTER c1;\nQuery OK, 0 rows affected (0.47 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE test.t2\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t2` (\n  `p` int(11) NOT NULL,\n  `c1` blob COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE',\n  `c2` blob,\n  PRIMARY KEY (`p`)\n) ENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)\n\nmysql> EXIT\nBye", "\n        The output of ndb_desc shows that the blob\n        part sizes of the columns have been changed as expected:\n      ", "\n        You can also see the change by running the query against\n        ndbinfo.blobs again:\n      ", "Press CTRL+C to copy mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't2';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |         256 |          13948 |\n| c2          |         256 |           2000 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)", "\n        It is possible to set both BLOB_INLINE_SIZE\n        and MAX_BLOB_PART_SIZE for a blob column, as\n        shown in this CREATE TABLE statement:\n      ", "Press CTRL+C to copy mysql> CREATE TABLE test.t3 (\n    ->   p INT NOT NULL PRIMARY KEY,\n    ->   c1 JSON,\n    ->   c2 JSON COMMENT 'NDB_COLUMN=BLOB_INLINE_SIZE=5000,MAX_BLOB_PART_SIZE'\n    -> ) ENGINE NDB;\nQuery OK, 0 rows affected (0.28 sec)", "\n        Querying the blobs table shows\n        us that the statement worked as expected:\n      ", "Press CTRL+C to copy mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't3';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |        4000 |           8100 |\n| c2          |        5000 |           8100 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)", "\n        You can also verify that the statement worked by checking the\n        output of ndb_desc.\n      ", "\n        Changing a column's blob part size must be done using a\n        copying ALTER TABLE; this operation cannot be\n        performed online (see\n        Section\u00a025.6.12, \u201cOnline Operations with ALTER TABLE in NDB Cluster\u201d).\n      ", "\n        For more information about how NDB\n        stores columns of blob types, see\n        String Type Storage Requirements.\n", "NDB_TABLE Options", "\n\n\n\n\n\n\n        For an NDB Cluster table, the table comment in a CREATE\n        TABLE or ALTER TABLE\n        statement can also be used to specify an\n        NDB_TABLE option, which consists of one or\n        more name-value pairs, separated by commas if need be, following\n        the string NDB_TABLE=. Complete syntax for\n        names and values syntax is shown here:\n      ", "\n        Spaces are not permitted within the quoted string. The string is\n        case-insensitive.\n      ", "\n        The four NDB table options that can be set as\n        part of a comment in this way are described in more detail in\n        the next few paragraphs.\n      ", "\n\n\n\nNOLOGGING: By default, NDB\n        tables are logged, and checkpointed. This makes them durable to\n        whole cluster failures. Using NOLOGGING when\n        creating or altering a table means that this table is not redo\n        logged or included in local checkpoints. In this case, the table\n        is still replicated across the data nodes for high availability,\n        and updated using transactions, but changes made to it are not\n        recorded in the data node's redo logs, and its content is\n        not checkpointed to disk; when recovering from a cluster\n        failure, the cluster retains the table definition, but none of\n        its rows\u2014that is, the table is empty.\n      ", "\n        Using such nonlogging tables reduces the data node's\n        demands on disk I/O and storage, as well as CPU for\n        checkpointing CPU. This may be suitable for short-lived data\n        which is frequently updated, and where the loss of all data in\n        the unlikely event of a total cluster failure is acceptable.\n      ", "\n        It is also possible to use the\n        ndb_table_no_logging system\n        variable to cause any NDB tables created or altered while this\n        variable is in effect to behave as though it had been created\n        with the NOLOGGING comment. Unlike when using\n        the comment directly, there is nothing in this case in the\n        output of SHOW CREATE TABLE to\n        indicate that it is a nonlogging table. Using the table comment\n        approach is recommended since it offers per-table control of the\n        feature, and this aspect of the table schema is embedded in the\n        table creation statement where it can be found easily by\n        SQL-based tools.\n      ", "\n\n\n\nREAD_BACKUP: Setting this option to 1 has the\n        same effect as though\n        ndb_read_backup were enabled;\n        enables reading from any replica. Doing so greatly improves the\n        performance of reads from the table at a relatively small cost\n        to write performance. 1 is the default for\n        READ_BACKUP, and the default for\n        ndb_read_backup is\n        ON (previously, read from any replica was\n        disabled by default).\n      ", "\n        You can set READ_BACKUP for an existing table\n        online, using an ALTER TABLE statement\n        similar to one of those shown here:\n      ", "Press CTRL+C to copy ALTER TABLE ... ALGORITHM=INPLACE, COMMENT=\"NDB_TABLE=READ_BACKUP=1\";\n\nALTER TABLE ... ALGORITHM=INPLACE, COMMENT=\"NDB_TABLE=READ_BACKUP=0\";", "\n        For more information about the ALGORITHM\n        option for ALTER TABLE, see\n        Section\u00a025.6.12, \u201cOnline Operations with ALTER TABLE in NDB Cluster\u201d.\n      ", "\n\n\n\nPARTITION_BALANCE: Provides additional\n        control over assignment and placement of partitions. The\n        following four schemes are supported:\n", "\n\nFOR_RP_BY_NODE: One partition per node.\n          \n            Only one LDM on each node stores a primary partition. Each\n            partition is stored in the same LDM (same ID) on all nodes.\n          \nFOR_RA_BY_NODE: One partition per node\n            group.\n          \n            Each node stores a single partition, which can be either a\n            primary replica or a backup replica. Each partition is\n            stored in the same LDM on all nodes.\n          \nFOR_RP_BY_LDM: One partition for each LDM\n            on each node; the default.\n          \n            This is the setting used if READ_BACKUP\n            is set to 1.\n          \nFOR_RA_BY_LDM: One partition per LDM in\n            each node group.\n          \n            These partitions can be primary or backup partitions.\n          \nFOR_RA_BY_LDM_X_2: Two partitions per LDM\n            in each node group.\n          \n            These partitions can be primary or backup partitions.\n          \nFOR_RA_BY_LDM_X_3: Three partitions per\n            LDM in each node group.\n          \n            These partitions can be primary or backup partitions.\n          \nFOR_RA_BY_LDM_X_4: Four partitions per\n            LDM in each node group.\n          \n            These partitions can be primary or backup partitions.\n\n", "\nPARTITION_BALANCE is the preferred interface\n        for setting the number of partitions per table. Using\n        MAX_ROWS to force the number of partitions is\n        deprecated but continues to be supported for backward\n        compatibility; it is subject to removal in a future release of\n        MySQL NDB Cluster. (Bug #81759, Bug #23544301)\n      ", "\n\n\nFULLY_REPLICATED controls whether the table\n        is fully replicated, that is, whether each data node has a\n        complete copy of the table. To enable full replication of the\n        table, use FULLY_REPLICATED=1.\n      ", "\n        This setting can also be controlled using the\n        ndb_fully_replicated system variable. Setting\n        it to ON enables the option by default for\n        all new NDB tables; the default is\n        OFF. The\n        ndb_data_node_neighbour system\n        variable is also used for fully replicated tables, to ensure\n        that when a fully replicated table is accessed, we access the\n        data node which is local to this MySQL Server.\n      ", "\n        An example of a CREATE TABLE statement using\n        such a comment when creating an NDB table is\n        shown here:\n      ", "Press CTRL+C to copy mysql> CREATE TABLE t1 (\n     >     c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n     >     c2 VARCHAR(100),\n     >     c3 VARCHAR(100) )\n     > ENGINE=NDB\n     >\nCOMMENT=\"NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RP_BY_NODE\";", "\n        The comment is displayed as part of the output of\n        SHOW CREATE TABLE. The text of\n        the comment is also available from querying the MySQL\n        Information Schema TABLES table, as\n        in this example:\n      ", "\n        This comment syntax is also supported with\n        ALTER TABLE statements for\n        NDB tables, as shown here:\n      ", "Press CTRL+C to copy mysql> ALTER TABLE t1 COMMENT=\"NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE\";\nQuery OK, 0 rows affected (0.40 sec)\nRecords: 0  Duplicates: 0  Warnings: 0", "\n        The TABLE_COMMENT column displays the comment\n        that is required to re-create the table as it is following the\n        ALTER TABLE statement, like this:\n      ", "Press CTRL+C to copy mysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n     > FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\";\n+------------+--------------+--------------------------------------------------+\n| TABLE_NAME | TABLE_SCHEMA | TABLE_COMMENT                                    |\n+------------+--------------+--------------------------------------------------+\n| t1         | c            | NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE       |\n| t1         | d            |                                                  |\n+------------+--------------+--------------------------------------------------+\n2 rows in set (0.01 sec)", "\n        Keep in mind that a table comment used with ALTER\n        TABLE replaces any existing comment which the table\n        might have.\n      ", "Press CTRL+C to copy mysql> ALTER TABLE t1 COMMENT=\"NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE\";\nQuery OK, 0 rows affected (0.40 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n     > FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\";\n+------------+--------------+--------------------------------------------------+\n| TABLE_NAME | TABLE_SCHEMA | TABLE_COMMENT                                    |\n+------------+--------------+--------------------------------------------------+\n| t1         | c            | NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE       |\n| t1         | d            |                                                  |\n+------------+--------------+--------------------------------------------------+\n2 rows in set (0.01 sec)", "\n        You can also see the value of the\n        PARTITION_BALANCE option in the output of\n        ndb_desc. ndb_desc also\n        shows whether the READ_BACKUP and\n        FULLY_REPLICATED options are set for the\n        table. See the description of this program for more information.\n"], "Examples": ["mysql> CREATE TABLE t1 (\n    ->    a INT NOT NULL PRIMARY KEY,\n    ->    b1 BLOB,\n    ->    b2 BLOB COMMENT 'NDB_COLUMN=BLOB_INLINE_SIZE=8000'\n    ->  ) ENGINE NDB;\nQuery OK, 0 rows affected (0.32 sec)", "mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't1';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| b1          |         256 |           2000 |\n| b2          |        8000 |           2000 |\n+-------------+-------------+----------------+\n2 rows in set (0.01 sec)", "mysql> CREATE TABLE test.t2 (\n    ->   p INT PRIMARY KEY, \n    ->   c1 BLOB, \n    ->   c2 BLOB COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE'\n    -> ) ENGINE NDB;\nQuery OK, 0 rows affected (0.32 sec)", "mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't2';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |         256 |           2000 |\n| c2          |         256 |          13948 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)", "mysql> ALTER TABLE test.t2 \n    ->    DROP COLUMN c1, \n    ->     ADD COLUMN c1 BLOB COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE',\n    ->     CHANGE COLUMN c2 c2 BLOB AFTER c1;\nQuery OK, 0 rows affected (0.47 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE test.t2\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t2` (\n  `p` int(11) NOT NULL,\n  `c1` blob COMMENT 'NDB_COLUMN=MAX_BLOB_PART_SIZE',\n  `c2` blob,\n  PRIMARY KEY (`p`)\n) ENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)\n\nmysql> EXIT\nBye", "mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't2';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |         256 |          13948 |\n| c2          |         256 |           2000 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)", "mysql> CREATE TABLE test.t3 (\n    ->   p INT NOT NULL PRIMARY KEY,\n    ->   c1 JSON,\n    ->   c2 JSON COMMENT 'NDB_COLUMN=BLOB_INLINE_SIZE=5000,MAX_BLOB_PART_SIZE'\n    -> ) ENGINE NDB;\nQuery OK, 0 rows affected (0.28 sec)", "mysql> SELECT \n    ->   column_name AS 'Column Name', \n    ->   inline_size AS 'Inline Size', \n    ->   part_size AS 'Blob Part Size' \n    -> FROM ndbinfo.blobs \n    -> WHERE table_name = 't3';\n+-------------+-------------+----------------+\n| Column Name | Inline Size | Blob Part Size |\n+-------------+-------------+----------------+\n| c1          |        4000 |           8100 |\n| c2          |        5000 |           8100 |\n+-------------+-------------+----------------+\n2 rows in set (0.00 sec)", "ALTER TABLE ... ALGORITHM=INPLACE, COMMENT=\"NDB_TABLE=READ_BACKUP=1\";\n\nALTER TABLE ... ALGORITHM=INPLACE, COMMENT=\"NDB_TABLE=READ_BACKUP=0\";", "mysql> CREATE TABLE t1 (\n     >     c1 INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n     >     c2 VARCHAR(100),\n     >     c3 VARCHAR(100) )\n     > ENGINE=NDB\n     >\nCOMMENT=\"NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RP_BY_NODE\";", "mysql> ALTER TABLE t1 COMMENT=\"NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE\";\nQuery OK, 0 rows affected (0.40 sec)\nRecords: 0  Duplicates: 0  Warnings: 0", "mysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n     > FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\";\n+------------+--------------+--------------------------------------------------+\n| TABLE_NAME | TABLE_SCHEMA | TABLE_COMMENT                                    |\n+------------+--------------+--------------------------------------------------+\n| t1         | c            | NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE       |\n| t1         | d            |                                                  |\n+------------+--------------+--------------------------------------------------+\n2 rows in set (0.01 sec)", "mysql> ALTER TABLE t1 COMMENT=\"NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE\";\nQuery OK, 0 rows affected (0.40 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SELECT TABLE_NAME, TABLE_SCHEMA, TABLE_COMMENT\n     > FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=\"t1\";\n+------------+--------------+--------------------------------------------------+\n| TABLE_NAME | TABLE_SCHEMA | TABLE_COMMENT                                    |\n+------------+--------------+--------------------------------------------------+\n| t1         | c            | NDB_TABLE=PARTITION_BALANCE=FOR_RA_BY_NODE       |\n| t1         | d            |                                                  |\n+------------+--------------+--------------------------------------------------+\n2 rows in set (0.01 sec)"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-table-foreign-keys.html"], "Title": ["15.1.20.5 FOREIGN KEY Constraints"], "Feature": ["[CONSTRAINT [symbol]] FOREIGN KEY\n    [index_name] (col_name, ...)\n    REFERENCES tbl_name (col_name,...)\n    [ON DELETE reference_option]\n    [ON UPDATE reference_option]\n\nreference_option:\n    RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT", "ALTER TABLE tbl_name\n    ADD [CONSTRAINT [symbol]] FOREIGN KEY\n    [index_name] (col_name, ...)\n    REFERENCES tbl_name (col_name,...)\n    [ON DELETE reference_option]\n    [ON UPDATE reference_option]", "mysql> SHOW CREATE TABLE child\\G\n*************************** 1. row ***************************\n       Table: child\nCreate Table: CREATE TABLE `child` (\n  `id` int DEFAULT NULL,\n  `parent_id` int DEFAULT NULL,\n  KEY `par_ind` (`parent_id`),\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`)\n  REFERENCES `parent` (`id`) ON DELETE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "mysql> SELECT * FROM INFORMATION_SCHEMA.INNODB_FOREIGN \\G\n*************************** 1. row ***************************\n      ID: test/child_ibfk_1\nFOR_NAME: test/child\nREF_NAME: test/parent\n  N_COLS: 1\n    TYPE: 1\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.INNODB_FOREIGN_COLS \\G\n*************************** 1. row ***************************\n          ID: test/child_ibfk_1\nFOR_COL_NAME: parent_id\nREF_COL_NAME: id\n         POS: 0"], "Description": ["\n        MySQL supports foreign keys, which permit cross-referencing\n        related data across tables, and foreign key constraints, which\n        help keep the related data consistent.\n      ", "\n        A foreign key relationship involves a parent table that holds\n        the initial column values, and a child table with column values\n        that reference the parent column values. A foreign key\n        constraint is defined on the child table.\n      ", "\n        The essential syntax for a defining a foreign key constraint in\n        a CREATE TABLE or\n        ALTER TABLE statement includes\n        the following:\n      ", "\n        Foreign key constraint usage is described under the following\n        topics in this section:\n", "\nIdentifiersConditions and RestrictionsReferential ActionsForeign Key Constraint ExamplesAdding Foreign Key ConstraintsDropping Foreign Key ConstraintsForeign Key ChecksLockingForeign Key Definitions and MetadataForeign Key Errors\n", "\n\n\n\nIdentifiers\n\n\n\n\n          Foreign key constraint naming is governed by the following\n          rules:\n\n\n\n              The CONSTRAINT\nsymbol value is used, if\n              defined.\n            \n              If the CONSTRAINT\nsymbol clause is not defined,\n              or a symbol is not included following the\n              CONSTRAINT keyword, a constraint name\n              name is generated automatically.\n            \n              If the CONSTRAINT\nsymbol clause is not defined,\n              or a symbol is not included following the\n              CONSTRAINT keyword, both\n              InnoDB and\n              NDB storage engines ignore\n              FOREIGN_KEY\n              index_name.\n            \n              The CONSTRAINT\n              symbol value, if\n              defined, must be unique in the database. A duplicate\n              symbol results in an error\n              similar to: ERROR 1005 (HY000): Can't create\n              table 'test.fk1' (errno: 121).\n            \n              NDB Cluster stores foreign key names using the same\n              lettercase with which they are created.\n\n\n\n          Table and column identifiers in a FOREIGN KEY ...\n          REFERENCES clause can be quoted within backticks\n          (`). Alternatively, double quotation marks\n          (\") can be used if the\n          ANSI_QUOTES SQL mode is\n          enabled. The\n          lower_case_table_names system\n          variable setting is also taken into account.\n\n", "\n\n\n\nConditions and Restrictions\n\n\n\n\n          Foreign key constraints are subject to the following\n          conditions and restrictions:\n\n\n\n              Parent and child tables must use the same storage engine,\n              and they cannot be defined as temporary tables.\n            \n              Creating a foreign key constraint requires the\n              REFERENCES privilege on the\n              parent table.\n            \n              Corresponding columns in the foreign key and the\n              referenced key must have similar data types. The\n              size and sign of fixed precision types such as\n              INTEGER and\n              DECIMAL must be the\n              same. The length of string types need not be\n              the same. For nonbinary (character) string columns, the\n              character set and collation must be the same.\n            \n              MySQL supports foreign key references between one column\n              and another within a table. (A column cannot have a\n              foreign key reference to itself.) In these cases, a\n              \u201cchild table record\u201d refers to a dependent\n              record within the same table.\n            \n              MySQL requires indexes on foreign keys and referenced keys\n              so that foreign key checks can be fast and not require a\n              table scan. In the referencing table, there must be an\n              index where the foreign key columns are listed as the\n              first columns in the same order. Such\n              an index is created on the referencing table automatically\n              if it does not exist. This index might be silently dropped\n              later if you create another index that can be used to\n              enforce the foreign key constraint.\n              index_name, if given, is used\n              as described previously.\n            \n              Previously, InnoDB allowed a foreign\n              key to reference any index column or group of columns,\n              even a non-unique index or partial index, an extension of\n              standard SQL. This is still allowed for backwards\n              compatibility, but is now deprecated; in addition, it must\n              be enabled by setting\n              restrict_fk_on_non_standard_key.\n              If this is done, there must still be an index in the\n              referenced table where the referenced columns are the\n              first columns in the same order.\n              Hidden columns that InnoDB adds to an\n              index are also considered in such cases (see\n              Section\u00a017.6.2.1, \u201cClustered and Secondary Indexes\u201d). You should expect\n              support for use of nonstandard keys to be removed in a\n              future version of MySQL, and migrate away from their use.\n            \nNDB always requires an explicit unique\n              key (or primary key) on any column referenced as a foreign\n              key.\n            \n              Index prefixes on foreign key columns are not supported.\n              Consequently, BLOB and\n              TEXT columns cannot be\n              included in a foreign key because indexes on those columns\n              must always include a prefix length.\n            \nInnoDB does not currently\n              support foreign keys for tables with user-defined\n              partitioning. This includes both parent and child tables.\n            \n              This restriction does not apply for\n              NDB tables that are\n              partitioned by KEY or LINEAR\n              KEY (the only user partitioning types supported\n              by the NDB storage engine); these may\n              have foreign key references or be the targets of such\n              references.\n            \n              A table in a foreign key relationship cannot be altered to\n              use another storage engine. To change the storage engine,\n              you must drop any foreign key constraints first.\n            \n              A foreign key constraint cannot reference a virtual\n              generated column.\n\n\n\n          For information about how the MySQL implementation of foreign\n          key constraints differs from the SQL standard, see\n          Section\u00a01.7.2.3, \u201cFOREIGN KEY Constraint Differences\u201d.\n\n", "\n\n\n\nReferential Actions\n\n\n\n\n          When an UPDATE or\n          DELETE operation affects a key\n          value in the parent table that has matching rows in the child\n          table, the result depends on the referential\n          action specified by ON UPDATE\n          and ON DELETE subclauses of the\n          FOREIGN KEY clause. Referential actions\n          include:\n\n\n\nCASCADE: Delete or update the row from\n              the parent table and automatically delete or update the\n              matching rows in the child table. Both ON DELETE\n              CASCADE and ON UPDATE CASCADE\n              are supported. Between two tables, do not define several\n              ON UPDATE CASCADE clauses that act on\n              the same column in the parent table or in the child table.\n            \n              If a FOREIGN KEY clause is defined on\n              both tables in a foreign key relationship, making both\n              tables a parent and child, an ON UPDATE\n              CASCADE or ON DELETE CASCADE\n              subclause defined for one FOREIGN KEY\n              clause must be defined for the other in order for\n              cascading operations to succeed. If an ON UPDATE\n              CASCADE or ON DELETE CASCADE\n              subclause is only defined for one FOREIGN\n              KEY clause, cascading operations fail with an\n              error.\n\n\n\nNote\n\n\n                Cascaded foreign key actions do not activate triggers.\n\n\n\nSET NULL: Delete or update the row from\n              the parent table and set the foreign key column or columns\n              in the child table to NULL. Both\n              ON DELETE SET NULL and ON\n              UPDATE SET NULL clauses are supported.\n            \n              If you specify a SET NULL action,\n              make sure that you have not declared the columns\n              in the child table as NOT\n              NULL.\n            \nRESTRICT: Rejects the delete or update\n              operation for the parent table. Specifying\n              RESTRICT (or NO\n              ACTION) is the same as omitting the ON\n              DELETE or ON UPDATE clause.\n            \nNO ACTION: A keyword from standard SQL.\n              For InnoDB, this is\n              equivalent to RESTRICT; the delete or\n              update operation for the parent table is immediately\n              rejected if there is a related foreign key value in the\n              referenced table. NDB\n              supports deferred checks, and NO ACTION\n              specifies a deferred check; when this is used, constraint\n              checks are not performed until commit time. Note that for\n              NDB tables, this causes all foreign key\n              checks made for both parent and child tables to be\n              deferred.\n            \nSET DEFAULT: This action is recognized\n              by the MySQL parser, but both\n              InnoDB and\n              NDB reject table definitions\n              containing ON DELETE SET DEFAULT or\n              ON UPDATE SET DEFAULT clauses.\n\n\n\n          For storage engines that support foreign keys, MySQL rejects\n          any INSERT or\n          UPDATE operation that attempts\n          to create a foreign key value in a child table if there is no\n          matching candidate key value in the parent table.\n        \n          For an ON DELETE or ON\n          UPDATE that is not specified, the default action is\n          always NO ACTION.\n        \n          As the default, an ON DELETE NO ACTION or\n          ON UPDATE NO ACTION clause that is\n          specified explicitly does not appear in\n          SHOW CREATE TABLE output or in\n          tables dumped with mysqldump.\n          RESTRICT, which is an equivalent\n          non-default keyword, appears in SHOW\n          CREATE TABLE output and in tables dumped with\n          mysqldump.\n        \n          For NDB tables, ON\n          UPDATE CASCADE is not supported where the reference\n          is to the parent table's primary key.\n        \n          For NDB tables, ON\n          DELETE CASCADE is not supported where the child\n          table contains one or more columns of any of the\n          TEXT or\n          BLOB types. (Bug #89511, Bug\n          #27484882)\n        \nInnoDB performs cascading operations using\n          a depth-first search algorithm on the records of the index\n          that corresponds to the foreign key constraint.\n        \n          A foreign key constraint on a stored generated column cannot\n          use CASCADE, SET NULL,\n          or SET DEFAULT as ON\n          UPDATE referential actions, nor can it use\n          SET NULL or SET DEFAULT\n          as ON DELETE referential actions.\n        \n          A foreign key constraint on the base column of a stored\n          generated column cannot use CASCADE,\n          SET NULL, or SET DEFAULT\n          as ON UPDATE or ON\n          DELETE referential actions.\n\n", "\n\n\n\nForeign Key Constraint Examples\n\n\n\n\n          This simple example relates parent and\n          child tables through a single-column\n          foreign key:\n        Press CTRL+C to copy CREATE TABLE parent (\n    id INT NOT NULL,\n    PRIMARY KEY (id)\n) ENGINE=INNODB;\n\nCREATE TABLE child (\n    id INT,\n    parent_id INT,\n    INDEX par_ind (parent_id),\n    FOREIGN KEY (parent_id)\n        REFERENCES parent(id)\n        ON DELETE CASCADE\n) ENGINE=INNODB;\n          This is a more complex example in which a\n          product_order table has foreign keys for\n          two other tables. One foreign key references a two-column\n          index in the product table. The other\n          references a single-column index in the\n          customer table:\n        Press CTRL+C to copy CREATE TABLE product (\n    category INT NOT NULL, id INT NOT NULL,\n    price DECIMAL,\n    PRIMARY KEY(category, id)\n)   ENGINE=INNODB;\n\nCREATE TABLE customer (\n    id INT NOT NULL,\n    PRIMARY KEY (id)\n)   ENGINE=INNODB;\n\nCREATE TABLE product_order (\n    no INT NOT NULL AUTO_INCREMENT,\n    product_category INT NOT NULL,\n    product_id INT NOT NULL,\n    customer_id INT NOT NULL,\n\n    PRIMARY KEY(no),\n    INDEX (product_category, product_id),\n    INDEX (customer_id),\n\n    FOREIGN KEY (product_category, product_id)\n      REFERENCES product(category, id)\n      ON UPDATE CASCADE ON DELETE RESTRICT,\n\n    FOREIGN KEY (customer_id)\n      REFERENCES customer(id)\n)   ENGINE=INNODB;\n", "\n\n\n\nAdding Foreign Key Constraints\n\n\n\n\n          You can add a foreign key constraint to an existing table\n          using the following ALTER TABLE\n          syntax:\n        Press CTRL+C to copy ALTER TABLE tbl_name\n    ADD [CONSTRAINT [symbol]] FOREIGN KEY\n    [index_name] (col_name, ...)\n    REFERENCES tbl_name (col_name,...)\n    [ON DELETE reference_option]\n    [ON UPDATE reference_option]\n          The foreign key can be self referential (referring to the same\n          table). When you add a foreign key constraint to a table using\n          ALTER TABLE, remember\n          to first create an index on the column(s) referenced by the\n          foreign key.\n\n", "\n\n\n\nDropping Foreign Key Constraints\n\n\n\n\n          You can drop a foreign key constraint using the following\n          ALTER TABLE syntax:\n        Press CTRL+C to copy ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol;\n          If the FOREIGN KEY clause defined a\n          CONSTRAINT name when you created the\n          constraint, you can refer to that name to drop the foreign key\n          constraint. Otherwise, a constraint name was generated\n          internally, and you must use that value. To determine the\n          foreign key constraint name, use SHOW\n          CREATE TABLE:\n        Press CTRL+C to copy mysql> SHOW CREATE TABLE child\\G\n*************************** 1. row ***************************\n       Table: child\nCreate Table: CREATE TABLE `child` (\n  `id` int DEFAULT NULL,\n  `parent_id` int DEFAULT NULL,\n  KEY `par_ind` (`parent_id`),\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`)\n  REFERENCES `parent` (`id`) ON DELETE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\nmysql> ALTER TABLE child DROP FOREIGN KEY `child_ibfk_1`;\n          Adding and dropping a foreign key in the same\n          ALTER TABLE statement is\n          supported for\n          ALTER TABLE ...\n          ALGORITHM=INPLACE. It is not supported for\n          ALTER TABLE ...\n          ALGORITHM=COPY.\n\n", "\n\n\n\nForeign Key Checks\n\n\n\n\n          In MySQL, InnoDB and NDB tables support checking of foreign\n          key constraints. Foreign key checking is controlled by the\n          foreign_key_checks variable,\n          which is enabled by default. Typically, you leave this\n          variable enabled during normal operation to enforce\n          referential integrity. The\n          foreign_key_checks variable\n          has the same effect on NDB tables\n          as it does for InnoDB tables.\n        \n          The foreign_key_checks\n          variable is dynamic and supports both global and session\n          scopes. For information about using system variables, see\n          Section\u00a07.1.9, \u201cUsing System Variables\u201d.\n        \n          Disabling foreign key checking is useful when:\n\n\n\n              Dropping a table that is referenced by a foreign key\n              constraint. A referenced table can only be dropped after\n              foreign_key_checks is\n              disabled. When you drop a table, constraints defined on\n              the table are also dropped.\n            \n              Reloading tables in different order than required by their\n              foreign key relationships. For example,\n              mysqldump produces correct definitions\n              of tables in the dump file, including foreign key\n              constraints for child tables. To make it easier to reload\n              dump files for tables with foreign key relationships,\n              mysqldump automatically includes a\n              statement in the dump output that disables\n              foreign_key_checks. This\n              enables you to import the tables in any order in case the\n              dump file contains tables that are not correctly ordered\n              for foreign keys. Disabling\n              foreign_key_checks also\n              speeds up the import operation by avoiding foreign key\n              checks.\n            \n              Executing LOAD DATA\n              operations, to avoid foreign key checking.\n            \n              Performing an ALTER TABLE\n              operation on a table that has a foreign key relationship.\n\n\n\n          When foreign_key_checks is\n          disabled, foreign key constraints are ignored, with the\n          following exceptions:\n\n\n\n              Recreating a table that was previously dropped returns an\n              error if the table definition does not conform to the\n              foreign key constraints that reference the table. The\n              table must have the correct column names and types. It\n              must also have indexes on the referenced keys. If these\n              requirements are not satisfied, MySQL returns Error 1005\n              that refers to errno: 150 in the error message, which\n              means that a foreign key constraint was not correctly\n              formed.\n            \n              Altering a table returns an error (errno: 150) if a\n              foreign key definition is incorrectly formed for the\n              altered table.\n            \n              Dropping an index required by a foreign key constraint.\n              The foreign key constraint must be removed before dropping\n              the index.\n            \n              Creating a foreign key constraint where a column\n              references a nonmatching column type.\n\n\n\n          Disabling foreign_key_checks\n          has these additional implications:\n\n\n\n              It is permitted to drop a database that contains tables\n              with foreign keys that are referenced by tables outside\n              the database.\n            \n              It is permitted to drop a table with foreign keys\n              referenced by other tables.\n            \n              Enabling\n              foreign_key_checks does\n              not trigger a scan of table data, which means that rows\n              added to a table while\n              foreign_key_checks is\n              disabled are not checked for consistency when\n              foreign_key_checks is\n              re-enabled.\n\n\n", "\n\n\n\nLocking\n\n\n\n\n          MySQL extends metadata locks, as necessary, to tables that are\n          related by a foreign key constraint. Extending metadata locks\n          prevents conflicting DML and DDL operations from executing\n          concurrently on related tables. This feature also enables\n          updates to foreign key metadata when a parent table is\n          modified. In earlier MySQL releases, foreign key metadata,\n          which is owned by the child table, could not be updated\n          safely.\n        \n          If a table is locked explicitly with LOCK\n          TABLES, any tables related by a foreign key\n          constraint are opened and locked implicitly. For foreign key\n          checks, a shared read-only lock\n          (LOCK TABLES\n          READ) is taken on related tables. For cascading\n          updates, a shared-nothing write lock\n          (LOCK TABLES\n          WRITE) is taken on related tables that are involved\n          in the operation.\n\n", "\n\n\n\nForeign Key Definitions and Metadata\n\n\n\n\n          To view a foreign key definition, use\n          SHOW CREATE TABLE:\n        Press CTRL+C to copy mysql> SHOW CREATE TABLE child\\G\n*************************** 1. row ***************************\n       Table: child\nCreate Table: CREATE TABLE `child` (\n  `id` int DEFAULT NULL,\n  `parent_id` int DEFAULT NULL,\n  KEY `par_ind` (`parent_id`),\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`)\n  REFERENCES `parent` (`id`) ON DELETE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n          You can obtain information about foreign keys from the\n          Information Schema\n          KEY_COLUMN_USAGE table. An\n          example of a query against this table is shown here:\n        Press CTRL+C to copy mysql> SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME\n       FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n       WHERE REFERENCED_TABLE_SCHEMA IS NOT NULL;\n+--------------+------------+-------------+-----------------+\n| TABLE_SCHEMA | TABLE_NAME | COLUMN_NAME | CONSTRAINT_NAME |\n+--------------+------------+-------------+-----------------+\n| test         | child      | parent_id   | child_ibfk_1    |\n+--------------+------------+-------------+-----------------+\n          You can obtain information specific to\n          InnoDB foreign keys from the\n          INNODB_FOREIGN and\n          INNODB_FOREIGN_COLS tables.\n          Example queries are show here:\n        Press CTRL+C to copy mysql> SELECT * FROM INFORMATION_SCHEMA.INNODB_FOREIGN \\G\n*************************** 1. row ***************************\n      ID: test/child_ibfk_1\nFOR_NAME: test/child\nREF_NAME: test/parent\n  N_COLS: 1\n    TYPE: 1\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.INNODB_FOREIGN_COLS \\G\n*************************** 1. row ***************************\n          ID: test/child_ibfk_1\nFOR_COL_NAME: parent_id\nREF_COL_NAME: id\n         POS: 0\n", "\n\n\n\nForeign Key Errors\n\n\n\n\n          In the event of a foreign key error involving\n          InnoDB tables (usually Error 150 in the\n          MySQL Server), information about the latest foreign key error\n          can be obtained by checking\n          SHOW ENGINE\n          INNODB STATUS output.\n        Press CTRL+C to copy mysql> SHOW ENGINE INNODB STATUS\\G\n...\n------------------------\nLATEST FOREIGN KEY ERROR\n------------------------\n2018-04-12 14:57:24 0x7f97a9c91700 Transaction:\nTRANSACTION 7717, ACTIVE 0 sec inserting\nmysql tables in use 1, locked 1\n4 lock struct(s), heap size 1136, 3 row lock(s), undo log entries 3\nMySQL thread id 8, OS thread handle 140289365317376, query id 14 localhost root update\nINSERT INTO child VALUES (NULL, 1), (NULL, 2), (NULL, 3), (NULL, 4), (NULL, 5), (NULL, 6)\nForeign key constraint fails for table `test`.`child`:\n,\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`) REFERENCES `parent` (`id`) ON DELETE\n  CASCADE ON UPDATE CASCADE\nTrying to add in child table, in index par_ind tuple:\nDATA TUPLE: 2 fields;\n 0: len 4; hex 80000003; asc     ;;\n 1: len 4; hex 80000003; asc     ;;\n\nBut in parent table `test`.`parent`, in index PRIMARY,\nthe closest match we can find is record:\nPHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 4; hex 80000004; asc     ;;\n 1: len 6; hex 000000001e19; asc       ;;\n 2: len 7; hex 81000001110137; asc       7;;\n...\n\n\nWarning\n\n\n            If a user has table-level privileges for all parent tables,\n            ER_NO_REFERENCED_ROW_2 and\n            ER_ROW_IS_REFERENCED_2 error\n            messages for foreign key operations expose information about\n            parent tables. If a user does not have table-level\n            privileges for all parent tables, more generic error\n            messages are displayed instead\n            (ER_NO_REFERENCED_ROW and\n            ER_ROW_IS_REFERENCED).\n          \n            An exception is that, for stored programs defined to execute\n            with DEFINER privileges, the user against\n            which privileges are assessed is the user in the program\n            DEFINER clause, not the invoking user. If\n            that user has table-level parent table privileges, parent\n            table information is still displayed. In this case, it is\n            the responsibility of the stored program creator to hide the\n            information by including appropriate condition handlers.\n\n\n"], "Examples": ["CREATE TABLE parent (\n    id INT NOT NULL,\n    PRIMARY KEY (id)\n) ENGINE=INNODB;\n\nCREATE TABLE child (\n    id INT,\n    parent_id INT,\n    INDEX par_ind (parent_id),\n    FOREIGN KEY (parent_id)\n        REFERENCES parent(id)\n        ON DELETE CASCADE\n) ENGINE=INNODB;", "CREATE TABLE product (\n    category INT NOT NULL, id INT NOT NULL,\n    price DECIMAL,\n    PRIMARY KEY(category, id)\n)   ENGINE=INNODB;\n\nCREATE TABLE customer (\n    id INT NOT NULL,\n    PRIMARY KEY (id)\n)   ENGINE=INNODB;\n\nCREATE TABLE product_order (\n    no INT NOT NULL AUTO_INCREMENT,\n    product_category INT NOT NULL,\n    product_id INT NOT NULL,\n    customer_id INT NOT NULL,\n\n    PRIMARY KEY(no),\n    INDEX (product_category, product_id),\n    INDEX (customer_id),\n\n    FOREIGN KEY (product_category, product_id)\n      REFERENCES product(category, id)\n      ON UPDATE CASCADE ON DELETE RESTRICT,\n\n    FOREIGN KEY (customer_id)\n      REFERENCES customer(id)\n)   ENGINE=INNODB;", "ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol;", "mysql> SHOW CREATE TABLE child\\G\n*************************** 1. row ***************************\n       Table: child\nCreate Table: CREATE TABLE `child` (\n  `id` int DEFAULT NULL,\n  `parent_id` int DEFAULT NULL,\n  KEY `par_ind` (`parent_id`),\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`)\n  REFERENCES `parent` (`id`) ON DELETE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\nmysql> ALTER TABLE child DROP FOREIGN KEY `child_ibfk_1`;", "mysql> SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME\n       FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n       WHERE REFERENCED_TABLE_SCHEMA IS NOT NULL;\n+--------------+------------+-------------+-----------------+\n| TABLE_SCHEMA | TABLE_NAME | COLUMN_NAME | CONSTRAINT_NAME |\n+--------------+------------+-------------+-----------------+\n| test         | child      | parent_id   | child_ibfk_1    |\n+--------------+------------+-------------+-----------------+", "mysql> SHOW ENGINE INNODB STATUS\\G\n...\n------------------------\nLATEST FOREIGN KEY ERROR\n------------------------\n2018-04-12 14:57:24 0x7f97a9c91700 Transaction:\nTRANSACTION 7717, ACTIVE 0 sec inserting\nmysql tables in use 1, locked 1\n4 lock struct(s), heap size 1136, 3 row lock(s), undo log entries 3\nMySQL thread id 8, OS thread handle 140289365317376, query id 14 localhost root update\nINSERT INTO child VALUES (NULL, 1), (NULL, 2), (NULL, 3), (NULL, 4), (NULL, 5), (NULL, 6)\nForeign key constraint fails for table `test`.`child`:\n,\n  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`) REFERENCES `parent` (`id`) ON DELETE\n  CASCADE ON UPDATE CASCADE\nTrying to add in child table, in index par_ind tuple:\nDATA TUPLE: 2 fields;\n 0: len 4; hex 80000003; asc     ;;\n 1: len 4; hex 80000003; asc     ;;\n\nBut in parent table `test`.`parent`, in index PRIMARY,\nthe closest match we can find is record:\nPHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 4; hex 80000004; asc     ;;\n 1: len 6; hex 000000001e19; asc       ;;\n 2: len 7; hex 81000001110137; asc       7;;\n..."], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-table-check-constraints.html"], "Title": ["15.1.20.6 CHECK Constraints"], "Feature": ["[CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED]", "mysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `c1` int(11) DEFAULT NULL,\n  `c2` int(11) DEFAULT NULL,\n  `c3` int(11) DEFAULT NULL,\n  CONSTRAINT `c1_nonzero` CHECK ((`c1` <> 0)),\n  CONSTRAINT `c2_positive` CHECK ((`c2` > 0)),\n  CONSTRAINT `t1_chk_1` CHECK ((`c1` <> `c2`)),\n  CONSTRAINT `t1_chk_2` CHECK ((`c1` > 10)),\n  CONSTRAINT `t1_chk_3` CHECK ((`c3` < 100)),\n  CONSTRAINT `t1_chk_4` CHECK ((`c1` > `c3`))\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci"], "Description": ["\nCREATE TABLE permits the core\n        features of table and column CHECK\n        constraints, for all storage engines.\n        CREATE TABLE permits the\n        following CHECK constraint syntax, for both\n        table constraints and column constraints:\n      ", "\n        The optional symbol specifies a name\n        for the constraint. If omitted, MySQL generates a name from the\n        table name, a literal _chk_, and an ordinal\n        number (1, 2, 3, ...). Constraint names have a maximum length of\n        64 characters. They are case-sensitive, but not\n        accent-sensitive.\n      ", "\nexpr specifies the constraint\n        condition as a boolean expression that must evaluate to\n        TRUE or UNKNOWN (for\n        NULL values) for each row of the table. If\n        the condition evaluates to FALSE, it fails\n        and a constraint violation occurs. The effect of a violation\n        depends on the statement being executed, as described later in\n        this section.\n      ", "\n        The optional enforcement clause indicates whether the constraint\n        is enforced:\n", "\n\n            If omitted or specified as ENFORCED, the\n            constraint is created and enforced.\n          \n            If specified as NOT ENFORCED, the\n            constraint is created but not enforced.\n\n", "\n        A CHECK constraint is specified as either a\n        table constraint or column constraint:\n", "\n\n            A table constraint does not appear within a column\n            definition and can refer to any table column or columns.\n            Forward references are permitted to columns appearing later\n            in the table definition.\n          \n            A column constraint appears within a column definition and\n            can refer only to that column.\n\n", "\n        Consider this table definition:\n      ", "Press CTRL+C to copy CREATE TABLE t1\n(\n  CHECK (c1 <> c2),\n  c1 INT CHECK (c1 > 10),\n  c2 INT CONSTRAINT c2_positive CHECK (c2 > 0),\n  c3 INT CHECK (c3 < 100),\n  CONSTRAINT c1_nonzero CHECK (c1 <> 0),\n  CHECK (c1 > c3)\n);", "\n        The definition includes table constraints and column\n        constraints, in named and unnamed formats:\n", "\n\n            The first constraint is a table constraint: It occurs\n            outside any column definition, so it can (and does) refer to\n            multiple table columns. This constraint contains forward\n            references to columns not defined yet. No constraint name is\n            specified, so MySQL generates a name.\n          \n            The next three constraints are column constraints: Each\n            occurs within a column definition, and thus can refer only\n            to the column being defined. One of the constraints is named\n            explicitly. MySQL generates a name for each of the other\n            two.\n          \n            The last two constraints are table constraints. One of them\n            is named explicitly. MySQL generates a name for the other\n            one.\n\n", "\n        As mentioned, MySQL generates a name for any\n        CHECK constraint specified without one. To\n        see the names generated for the preceding table definition, use\n        SHOW CREATE TABLE:\n      ", "\n        The SQL standard specifies that all types of constraints\n        (primary key, unique index, foreign key, check) belong to the\n        same namespace. In MySQL, each constraint type has its own\n        namespace per schema (database). Consequently,\n        CHECK constraint names must be unique per\n        schema; no two tables in the same schema can share a\n        CHECK constraint name. (Exception: A\n        TEMPORARY table hides a\n        non-TEMPORARY table of the same name, so it\n        can have the same CHECK constraint names as\n        well.)\n      ", "\n        Beginning generated constraint names with the table name helps\n        ensure schema uniqueness because table names also must be unique\n        within the schema.\n      ", "\nCHECK condition expressions must adhere to\n        the following rules. An error occurs if an expression contains\n        disallowed constructs.\n", "\n\n            Nongenerated and generated columns are permitted, except\n            columns with the AUTO_INCREMENT attribute\n            and columns in other tables.\n          \n            Literals, deterministic built-in functions, and operators\n            are permitted. A function is deterministic if, given the\n            same data in tables, multiple invocations produce the same\n            result, independently of the connected user. Examples of\n            functions that are nondeterministic and fail this\n            definition: CONNECTION_ID(),\n            CURRENT_USER(),\n            NOW().\n          \n            Stored functions and loadable functions are not permitted.\n          \n            Stored procedure and function parameters are not permitted.\n          \n            Variables (system variables, user-defined variables, and\n            stored program local variables) are not permitted.\n          \n            Subqueries are not permitted.\n\n", "\n        Foreign key referential actions (ON UPDATE,\n        ON DELETE) are prohibited on columns used in\n        CHECK constraints. Likewise,\n        CHECK constraints are prohibited on columns\n        used in foreign key referential actions.\n      ", "\nCHECK constraints are evaluated for\n        INSERT,\n        UPDATE,\n        REPLACE,\n        LOAD DATA, and\n        LOAD XML statements and an error\n        occurs if a constraint evaluates to FALSE. If\n        an error occurs, handling of changes already applied differs for\n        transactional and nontransactional storage engines, and also\n        depends on whether strict SQL mode is in effect, as described in\n        Strict SQL Mode.\n      ", "\nCHECK constraints are evaluated for\n        INSERT IGNORE,\n        UPDATE IGNORE,\n        LOAD DATA ...\n        IGNORE, and\n        LOAD XML ...\n        IGNORE statements and a warning occurs if a constraint\n        evaluates to FALSE. The insert or update for\n        any offending row is skipped.\n      ", "\n        If the constraint expression evaluates to a data type that\n        differs from the declared column type, implicit coercion to the\n        declared type occurs according to the usual MySQL\n        type-conversion rules. See Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d. If\n        type conversion fails or results in a loss of precision, an\n        error occurs.\n", "\n\nNote\n\n\n          Constraint expression evaluation uses the SQL mode in effect\n          at evaluation time. If any component of the expression depends\n          on the SQL mode, different results may occur for different\n          uses of the table unless the SQL mode is the same during all\n          uses.\n\n", "\n        The Information Schema\n        CHECK_CONSTRAINTS table provides\n        information about CHECK constraints defined\n        on tables. See\n        Section\u00a028.3.5, \u201cThe INFORMATION_SCHEMA CHECK_CONSTRAINTS Table\u201d.\n"], "Examples": ["CREATE TABLE t1\n(\n  CHECK (c1 <> c2),\n  c1 INT CHECK (c1 > 10),\n  c2 INT CONSTRAINT c2_positive CHECK (c2 > 0),\n  c3 INT CHECK (c3 < 100),\n  CONSTRAINT c1_nonzero CHECK (c1 <> 0),\n  CHECK (c1 > c3)\n);"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-table-generated-columns.html"], "Title": ["15.1.20.8 CREATE TABLE and Generated Columns"], "Feature": ["col_name data_type [GENERATED ALWAYS] AS (expr)\n  [VIRTUAL | STORED] [NOT NULL | NULL]\n  [UNIQUE [KEY]] [[PRIMARY] KEY]\n  [COMMENT 'string']"], "Description": ["\nCREATE TABLE supports the\n        specification of generated columns. Values of a generated column\n        are computed from an expression included in the column\n        definition.\n      ", "\n        Generated columns are also supported by the\n        NDB storage engine.\n      ", "\n        The following simple example shows a table that stores the\n        lengths of the sides of right triangles in the\n        sidea and sideb columns,\n        and computes the length of the hypotenuse in\n        sidec (the square root of the sums of the\n        squares of the other sides):\n      ", "Press CTRL+C to copy CREATE TABLE triangle (\n  sidea DOUBLE,\n  sideb DOUBLE,\n  sidec DOUBLE AS (SQRT(sidea * sidea + sideb * sideb))\n);\nINSERT INTO triangle (sidea, sideb) VALUES(1,1),(3,4),(6,8);", "\n        Selecting from the table yields this result:\n      ", "Press CTRL+C to copy mysql> SELECT * FROM triangle;\n+-------+-------+--------------------+\n| sidea | sideb | sidec              |\n+-------+-------+--------------------+\n|     1 |     1 | 1.4142135623730951 |\n|     3 |     4 |                  5 |\n|     6 |     8 |                 10 |\n+-------+-------+--------------------+", "\n        Any application that uses the triangle table\n        has access to the hypotenuse values without having to specify\n        the expression that calculates them.\n      ", "\n        Generated column definitions have this syntax:\n      ", "\nAS (expr)\n        indicates that the column is generated and defines the\n        expression used to compute column values. AS\n        may be preceded by GENERATED ALWAYS to make\n        the generated nature of the column more explicit. Constructs\n        that are permitted or prohibited in the expression are discussed\n        later.\n      ", "\n        The VIRTUAL or STORED\n        keyword indicates how column values are stored, which has\n        implications for column use:\n", "\n\nVIRTUAL: Column values are not stored,\n            but are evaluated when rows are read, immediately after any\n            BEFORE triggers. A virtual column takes\n            no storage.\n          \nInnoDB supports secondary indexes on\n            virtual columns. See\n            Section\u00a015.1.20.9, \u201cSecondary Indexes and Generated Columns\u201d.\n          \nSTORED: Column values are evaluated and\n            stored when rows are inserted or updated. A stored column\n            does require storage space and can be indexed.\n\n", "\n        The default is VIRTUAL if neither keyword is\n        specified.\n      ", "\n        It is permitted to mix VIRTUAL and\n        STORED columns within a table.\n      ", "\n        Other attributes may be given to indicate whether the column is\n        indexed or can be NULL, or provide a comment.\n      ", "\n        Generated column expressions must adhere to the following rules.\n        An error occurs if an expression contains disallowed constructs.\n", "\n\n            Literals, deterministic built-in functions, and operators\n            are permitted. A function is deterministic if, given the\n            same data in tables, multiple invocations produce the same\n            result, independently of the connected user. Examples of\n            functions that are nondeterministic and fail this\n            definition: CONNECTION_ID(),\n            CURRENT_USER(),\n            NOW().\n          \n            Stored functions and loadable functions are not permitted.\n          \n            Stored procedure and function parameters are not permitted.\n          \n            Variables (system variables, user-defined variables, and\n            stored program local variables) are not permitted.\n          \n            Subqueries are not permitted.\n          \n            A generated column definition can refer to other generated\n            columns, but only those occurring earlier in the table\n            definition. A generated column definition can refer to any\n            base (nongenerated) column in the table whether its\n            definition occurs earlier or later.\n          \n            The AUTO_INCREMENT attribute cannot be\n            used in a generated column definition.\n          \n            An AUTO_INCREMENT column cannot be used\n            as a base column in a generated column definition.\n          \n            If expression evaluation causes truncation or provides\n            incorrect input to a function, the\n            CREATE TABLE statement\n            terminates with an error and the DDL operation is rejected.\n\n", "\n        If the expression evaluates to a data type that differs from the\n        declared column type, implicit coercion to the declared type\n        occurs according to the usual MySQL type-conversion rules. See\n        Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d.\n      ", "\n        If a generated column uses the\n        TIMESTAMP data type, the setting\n        for\n        explicit_defaults_for_timestamp\n        is ignored. In such cases, if this variable is disabled then\n        NULL is not converted to\n        CURRENT_TIMESTAMP. If the column\n        is also declared as NOT NULL, attempting to\n        insert NULL is explicitly rejected with\n        ER_BAD_NULL_ERROR.\n", "\n\nNote\n\n\n          Expression evaluation uses the SQL mode in effect at\n          evaluation time. If any component of the expression depends on\n          the SQL mode, different results may occur for different uses\n          of the table unless the SQL mode is the same during all uses.\n\n", "\n        For CREATE\n        TABLE ... LIKE, the destination table preserves\n        generated column information from the original table.\n      ", "\n        For CREATE\n        TABLE ... SELECT, the destination table does not\n        preserve information about whether columns in the selected-from\n        table are generated columns. The\n        SELECT part of the statement\n        cannot assign values to generated columns in the destination\n        table.\n      ", "\n        Partitioning by generated columns is permitted. See\n        Table Partitioning.\n      ", "\n        A foreign key constraint on a stored generated column cannot use\n        CASCADE, SET NULL, or\n        SET DEFAULT as ON UPDATE\n        referential actions, nor can it use SET NULL\n        or SET DEFAULT as ON\n        DELETE referential actions.\n      ", "\n        A foreign key constraint on the base column of a stored\n        generated column cannot use CASCADE,\n        SET NULL, or SET DEFAULT\n        as ON UPDATE or ON DELETE\n        referential actions.\n      ", "\n        A foreign key constraint cannot reference a virtual generated\n        column.\n      ", "\n        Triggers cannot use\n        NEW.col_name or\n        use OLD.col_name\n        to refer to generated columns.\n      ", "\n        For INSERT,\n        REPLACE, and\n        UPDATE, if a generated column is\n        inserted into, replaced, or updated explicitly, the only\n        permitted value is DEFAULT.\n      ", "\n        A generated column in a view is considered updatable because it\n        is possible to assign to it. However, if such a column is\n        updated explicitly, the only permitted value is\n        DEFAULT.\n      ", "\n        Generated columns have several use cases, such as these:\n", "\n\n            Virtual generated columns can be used as a way to simplify\n            and unify queries. A complicated condition can be defined as\n            a generated column and referred to from multiple queries on\n            the table to ensure that all of them use exactly the same\n            condition.\n          \n            Stored generated columns can be used as a materialized cache\n            for complicated conditions that are costly to calculate on\n            the fly.\n          \n            Generated columns can simulate functional indexes: Use a\n            generated column to define a functional expression and index\n            it. This can be useful for working with columns of types\n            that cannot be indexed directly, such as\n            JSON columns; see\n            Indexing a Generated Column to Provide a JSON Column Index, for a detailed\n            example.\n          \n            For stored generated columns, the disadvantage of this\n            approach is that values are stored twice; once as the value\n            of the generated column and once in the index.\n          \n            If a generated column is indexed, the optimizer recognizes\n            query expressions that match the column definition and uses\n            indexes from the column as appropriate during query\n            execution, even if a query does not refer to the column\n            directly by name. For details, see\n            Section\u00a010.3.11, \u201cOptimizer Use of Generated Column Indexes\u201d.\n\n", "\n        Example:\n      ", "\n        Suppose that a table t1 contains\n        first_name and last_name\n        columns and that applications frequently construct the full name\n        using an expression like this:\n      ", "Press CTRL+C to copy SELECT CONCAT(first_name,' ',last_name) AS full_name FROM t1;", "\n        One way to avoid writing out the expression is to create a view\n        v1 on t1, which simplifies\n        applications by enabling them to select\n        full_name directly without using an\n        expression:\n      ", "Press CTRL+C to copy CREATE VIEW v1 AS\nSELECT *, CONCAT(first_name,' ',last_name) AS full_name FROM t1;\n\nSELECT full_name FROM v1;", "\n        A generated column also enables applications to select\n        full_name directly without the need to define\n        a view:\n      ", "Press CTRL+C to copy CREATE TABLE t1 (\n  first_name VARCHAR(10),\n  last_name VARCHAR(10),\n  full_name VARCHAR(255) AS (CONCAT(first_name,' ',last_name))\n);\n\nSELECT full_name FROM t1;"], "Examples": ["CREATE TABLE triangle (\n  sidea DOUBLE,\n  sideb DOUBLE,\n  sidec DOUBLE AS (SQRT(sidea * sidea + sideb * sideb))\n);\nINSERT INTO triangle (sidea, sideb) VALUES(1,1),(3,4),(6,8);", "mysql> SELECT * FROM triangle;\n+-------+-------+--------------------+\n| sidea | sideb | sidec              |\n+-------+-------+--------------------+\n|     1 |     1 | 1.4142135623730951 |\n|     3 |     4 |                  5 |\n|     6 |     8 |                 10 |\n+-------+-------+--------------------+", "SELECT CONCAT(first_name,' ',last_name) AS full_name FROM t1;", "CREATE VIEW v1 AS\nSELECT *, CONCAT(first_name,' ',last_name) AS full_name FROM t1;\n\nSELECT full_name FROM v1;", "CREATE TABLE t1 (\n  first_name VARCHAR(10),\n  last_name VARCHAR(10),\n  full_name VARCHAR(255) AS (CONCAT(first_name,' ',last_name))\n);\n\nSELECT full_name FROM t1;"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-table-secondary-indexes.html"], "Title": ["15.1.20.9 Secondary Indexes and Generated Columns"], "Feature": ["mysql> EXPLAIN SELECT c->>\"$.name\" AS name\n    ->           FROM jempn WHERE g > 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: jempn\n   partitions: p0,p1,p2,p3\n         type: range\npossible_keys: i\n          key: i\n      key_len: 5\n          ref: NULL\n         rows: 3\n     filtered: 100.00\n        Extra: Using pushed condition (`test`.`jempn`.`g` > 2)\n1 row in set, 1 warning (0.01 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Note\n   Code: 1003\nMessage: /* select#1 */ select\njson_unquote(json_extract(`test`.`jempn`.`c`,'$.name')) AS `name` from\n`test`.`jempn` where (`test`.`jempn`.`g` > 2)   \n1 row in set (0.00 sec)"], "Description": ["\nInnoDB supports secondary indexes on virtual\n        generated columns. Other index types are not supported. A\n        secondary index defined on a virtual column is sometimes\n        referred to as a \u201cvirtual index\u201d.\n      ", "\n        A secondary index may be created on one or more virtual columns\n        or on a combination of virtual columns and regular columns or\n        stored generated columns. Secondary indexes that include virtual\n        columns may be defined as UNIQUE.\n      ", "\n        When a secondary index is created on a virtual generated column,\n        generated column values are materialized in the records of the\n        index. If the index is a\n        covering index (one\n        that includes all the columns retrieved by a query), generated\n        column values are retrieved from materialized values in the\n        index structure instead of computed \u201con the fly\u201d.\n      ", "\n        There are additional write costs to consider when using a\n        secondary index on a virtual column due to computation performed\n        when materializing virtual column values in secondary index\n        records during INSERT and\n        UPDATE operations. Even with\n        additional write costs, secondary indexes on virtual columns may\n        be preferable to generated stored columns,\n        which are materialized in the clustered index, resulting in\n        larger tables that require more disk space and memory. If a\n        secondary index is not defined on a virtual column, there are\n        additional costs for reads, as virtual column values must be\n        computed each time the column's row is examined.\n      ", "\n        Values of an indexed virtual column are MVCC-logged to avoid\n        unnecessary recomputation of generated column values during\n        rollback or during a purge operation. The data length of logged\n        values is limited by the index key limit of 767 bytes for\n        COMPACT and REDUNDANT row\n        formats, and 3072 bytes for DYNAMIC and\n        COMPRESSED row formats.\n      ", "\n        Adding or dropping a secondary index on a virtual column is an\n        in-place operation.\n", "\n\n\n\nIndexing a Generated Column to Provide a JSON Column Index\n\n\n\n\n          As noted elsewhere, JSON\n          columns cannot be indexed directly. To create an index that\n          references such a column indirectly, you can define a\n          generated column that extracts the information that should be\n          indexed, then create an index on the generated column, as\n          shown in this example:\n        Press CTRL+C to copy mysql> CREATE TABLE jemp (\n    ->     c JSON,\n    ->     g INT GENERATED ALWAYS AS (c->\"$.id\"),\n    ->     INDEX i (g)\n    -> );\nQuery OK, 0 rows affected (0.28 sec)\n\nmysql> INSERT INTO jemp (c) VALUES\n     >   ('{\"id\": \"1\", \"name\": \"Fred\"}'), ('{\"id\": \"2\", \"name\": \"Wilma\"}'),\n     >   ('{\"id\": \"3\", \"name\": \"Barney\"}'), ('{\"id\": \"4\", \"name\": \"Betty\"}');\nQuery OK, 4 rows affected (0.04 sec)\nRecords: 4  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c->>\"$.name\" AS name\n     >     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)\n\nmysql> EXPLAIN SELECT c->>\"$.name\" AS name\n     >    FROM jemp WHERE g > 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: jemp\n   partitions: NULL\n         type: range\npossible_keys: i\n          key: i\n      key_len: 5\n          ref: NULL\n         rows: 2\n     filtered: 100.00\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Note\n   Code: 1003\nMessage: /* select#1 */ select json_unquote(json_extract(`test`.`jemp`.`c`,'$.name'))\nAS `name` from `test`.`jemp` where (`test`.`jemp`.`g` > 2)\n1 row in set (0.00 sec)\n          (We have wrapped the output from the last statement in this\n          example to fit the viewing area.)\n        \n          When you use EXPLAIN on a\n          SELECT or other SQL statement\n          containing one or more expressions that use the\n          -> or ->>\n          operator, these expressions are translated into their\n          equivalents using JSON_EXTRACT() and (if\n          needed) JSON_UNQUOTE() instead, as shown\n          here in the output from SHOW\n          WARNINGS immediately following this\n          EXPLAIN statement:\n        Press CTRL+C to copy mysql> EXPLAIN SELECT c->>\"$.name\"\n     > FROM jemp WHERE g > 2 ORDER BY c->\"$.name\"\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: jemp\n   partitions: NULL\n         type: range\npossible_keys: i\n          key: i\n      key_len: 5\n          ref: NULL\n         rows: 2\n     filtered: 100.00\n        Extra: Using where; Using filesort\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Note\n   Code: 1003\nMessage: /* select#1 */ select json_unquote(json_extract(`test`.`jemp`.`c`,'$.name')) AS\n`c->>\"$.name\"` from `test`.`jemp` where (`test`.`jemp`.`g` > 2) order by\njson_extract(`test`.`jemp`.`c`,'$.name')\n1 row in set (0.00 sec)\n          See the descriptions of the\n          ->\n          and\n          ->>\n          operators, as well as those of the\n          JSON_EXTRACT() and\n          JSON_UNQUOTE() functions, for\n          additional information and examples.\n        \n          This technique also can be used to provide indexes that\n          indirectly reference columns of other types that cannot be\n          indexed directly, such as GEOMETRY columns.\n        \n          It is also possible to create an index on a\n          JSON column using the\n          JSON_VALUE() function with an\n          expression that can be used to optimize queries employing the\n          expression. See the description of that function for more\n          information and examples.\n        JSON columns and indirect indexing in NDB Cluster\n\n\n\n\n\n          It is also possible to use indirect indexing of JSON columns\n          in MySQL NDB Cluster, subject to the following conditions:\n\n\n\nNDB handles a\n              JSON column value\n              internally as a BLOB. This\n              means that any NDB table having one or\n              more JSON columns must have a primary key, else it cannot\n              be recorded in the binary log.\n            \n              The NDB storage engine does\n              not support indexing of virtual columns. Since the default\n              for generated columns is VIRTUAL, you\n              must specify explicitly the generated column to which to\n              apply the indirect index as STORED.\n\n\n\n          The CREATE TABLE statement\n          used to create the table jempn shown here\n          is a version of the jemp table shown\n          previously, with modifications making it compatible with\n          NDB:\n        Press CTRL+C to copy CREATE TABLE jempn (\n  a BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  c JSON DEFAULT NULL,\n  g INT GENERATED ALWAYS AS (c->\"$.id\") STORED,\n  INDEX i (g)\n) ENGINE=NDB;\n          We can populate this table using the following\n          INSERT statement:\n        Press CTRL+C to copy INSERT INTO jempn (c) VALUES\n  ('{\"id\": \"1\", \"name\": \"Fred\"}'),\n  ('{\"id\": \"2\", \"name\": \"Wilma\"}'),\n  ('{\"id\": \"3\", \"name\": \"Barney\"}'),\n  ('{\"id\": \"4\", \"name\": \"Betty\"}');\n          Now NDB can use index i,\n          as shown here:\n        Press CTRL+C to copy mysql> EXPLAIN SELECT c->>\"$.name\" AS name\n    ->           FROM jempn WHERE g > 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: jempn\n   partitions: p0,p1,p2,p3\n         type: range\npossible_keys: i\n          key: i\n      key_len: 5\n          ref: NULL\n         rows: 3\n     filtered: 100.00\n        Extra: Using pushed condition (`test`.`jempn`.`g` > 2)\n1 row in set, 1 warning (0.01 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Note\n   Code: 1003\nMessage: /* select#1 */ select\njson_unquote(json_extract(`test`.`jempn`.`c`,'$.name')) AS `name` from\n`test`.`jempn` where (`test`.`jempn`.`g` > 2)   \n1 row in set (0.00 sec)\n          You should keep in mind that a stored generated column, as\n          well as any index on such a column, uses\n          DataMemory.\n\n"], "Examples": ["mysql> CREATE TABLE jemp (\n    ->     c JSON,\n    ->     g INT GENERATED ALWAYS AS (c->\"$.id\"),\n    ->     INDEX i (g)\n    -> );\nQuery OK, 0 rows affected (0.28 sec)\n\nmysql> INSERT INTO jemp (c) VALUES\n     >   ('{\"id\": \"1\", \"name\": \"Fred\"}'), ('{\"id\": \"2\", \"name\": \"Wilma\"}'),\n     >   ('{\"id\": \"3\", \"name\": \"Barney\"}'), ('{\"id\": \"4\", \"name\": \"Betty\"}');\nQuery OK, 4 rows affected (0.04 sec)\nRecords: 4  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c->>\"$.name\" AS name\n     >     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)\n\nmysql> EXPLAIN SELECT c->>\"$.name\" AS name\n     >    FROM jemp WHERE g > 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: jemp\n   partitions: NULL\n         type: range\npossible_keys: i\n          key: i\n      key_len: 5\n          ref: NULL\n         rows: 2\n     filtered: 100.00\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Note\n   Code: 1003\nMessage: /* select#1 */ select json_unquote(json_extract(`test`.`jemp`.`c`,'$.name'))\nAS `name` from `test`.`jemp` where (`test`.`jemp`.`g` > 2)\n1 row in set (0.00 sec)", "mysql> EXPLAIN SELECT c->>\"$.name\"\n     > FROM jemp WHERE g > 2 ORDER BY c->\"$.name\"\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: jemp\n   partitions: NULL\n         type: range\npossible_keys: i\n          key: i\n      key_len: 5\n          ref: NULL\n         rows: 2\n     filtered: 100.00\n        Extra: Using where; Using filesort\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Note\n   Code: 1003\nMessage: /* select#1 */ select json_unquote(json_extract(`test`.`jemp`.`c`,'$.name')) AS\n`c->>\"$.name\"` from `test`.`jemp` where (`test`.`jemp`.`g` > 2) order by\njson_extract(`test`.`jemp`.`c`,'$.name')\n1 row in set (0.00 sec)", "CREATE TABLE jempn (\n  a BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  c JSON DEFAULT NULL,\n  g INT GENERATED ALWAYS AS (c->\"$.id\") STORED,\n  INDEX i (g)\n) ENGINE=NDB;", "INSERT INTO jempn (c) VALUES\n  ('{\"id\": \"1\", \"name\": \"Fred\"}'),\n  ('{\"id\": \"2\", \"name\": \"Wilma\"}'),\n  ('{\"id\": \"3\", \"name\": \"Barney\"}'),\n  ('{\"id\": \"4\", \"name\": \"Betty\"}');"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-tablespace.html"], "Title": ["15.1.21 CREATE TABLESPACE Statement"], "Feature": ["CREATE [UNDO] TABLESPACE tablespace_name\n\n  InnoDB and NDB:\n    [ADD DATAFILE 'file_name']\n    [AUTOEXTEND_SIZE [=] value]\n\n  InnoDB only:\n    [FILE_BLOCK_SIZE = value]\n    [ENCRYPTION [=] {'Y' | 'N'}]\n\n  NDB only:\n    USE LOGFILE GROUP logfile_group\n    [EXTENT_SIZE [=] extent_size]\n    [INITIAL_SIZE [=] initial_size]\n    [MAX_SIZE [=] max_size]\n    [NODEGROUP [=] nodegroup_id]\n    [WAIT]\n    [COMMENT [=] 'string']\n\n  InnoDB and NDB:\n    [ENGINE [=] engine_name]\n\n  Reserved for future use:\n    [ENGINE_ATTRIBUTE [=] 'string']"], "Description": ["\n      This statement is used to create a tablespace. The precise syntax\n      and semantics depend on the storage engine used. In standard MySQL\n      releases, this is always an InnoDB\n      tablespace. MySQL NDB Cluster also supports tablespaces using the\n      NDB storage engine.\n", "\nConsiderations for InnoDBConsiderations for NDB ClusterOptionsNotesInnoDB ExamplesNDB Example\n", {"Sub-title": "Considerations for InnoDB", "Illustration": ["\nCREATE TABLESPACE syntax is used to\n      create general tablespaces or undo tablespaces. The\n      UNDO keyword must be specified to create an\n      undo tablespace.\n    ", "\n      A general tablespace is a shared tablespace. It can hold multiple\n      tables, and supports all table row formats. General tablespaces\n      can be created in a location relative to or independent of the\n      data directory.\n    ", "\n      After creating an InnoDB general tablespace,\n      use CREATE TABLE\n      tbl_name ... TABLESPACE [=]\n      tablespace_name or\n      ALTER TABLE\n      tbl_name TABLESPACE [=]\n      tablespace_name to add tables\n      to the tablespace. For more information, see\n      Section\u00a017.6.3.3, \u201cGeneral Tablespaces\u201d.\n    ", "\n      Undo tablespaces contain undo logs. Undo tablespaces can be\n      created in a chosen location by specifying a fully qualified data\n      file path. For more information, see\n      Section\u00a017.6.3.4, \u201cUndo Tablespaces\u201d.\n"]}, {"Sub-title": "Considerations for NDB Cluster", "Illustration": ["\n      This statement is used to create a tablespace, which can contain\n      one or more data files, providing storage space for NDB Cluster\n      Disk Data tables (see Section\u00a025.6.11, \u201cNDB Cluster Disk Data Tables\u201d).\n      One data file is created and added to the tablespace using this\n      statement. Additional data files may be added to the tablespace by\n      using the ALTER TABLESPACE\n      statement (see Section\u00a015.1.10, \u201cALTER TABLESPACE Statement\u201d).\n", "\n\nNote\n\n\n        All NDB Cluster Disk Data objects share the same namespace. This\n        means that each Disk Data object must be\n        uniquely named (and not merely each Disk Data object of a given\n        type). For example, you cannot have a tablespace and a log file\n        group with the same name, or a tablespace and a data file with\n        the same name.\n\n", "\n      A log file group of one or more UNDO log files\n      must be assigned to the tablespace to be created with the\n      USE LOGFILE GROUP clause.\n      logfile_group must be an existing log\n      file group created with CREATE LOGFILE\n      GROUP (see Section\u00a015.1.16, \u201cCREATE LOGFILE GROUP Statement\u201d).\n      Multiple tablespaces may use the same log file group for\n      UNDO logging.\n    ", "\n      When setting EXTENT_SIZE or\n      INITIAL_SIZE, you may optionally follow the\n      number with a one-letter abbreviation for an order of magnitude,\n      similar to those used in my.cnf. Generally,\n      this is one of the letters M (for megabytes) or\n      G (for gigabytes).\n    ", "\nINITIAL_SIZE and EXTENT_SIZE\n      are subject to rounding as follows:\n", "\n\nEXTENT_SIZE is rounded up to the nearest\n          whole multiple of 32K.\n        \nINITIAL_SIZE is rounded\n          down to the nearest whole multiple of\n          32K; this result is rounded up to the nearest whole multiple\n          of EXTENT_SIZE (after any rounding).\n\n", "\n\nNote\n\n\nNDB reserves 4% of a tablespace for\n        data node restart operations. This reserved space cannot be used\n        for data storage.\n\n", "\n      The rounding just described is done explicitly, and a warning is\n      issued by the MySQL Server when any such rounding is performed.\n      The rounded values are also used by the NDB kernel for calculating\n      INFORMATION_SCHEMA.FILES column\n      values and other purposes. However, to avoid an unexpected result,\n      we suggest that you always use whole multiples of 32K in\n      specifying these options.\n    ", "\n      When CREATE TABLESPACE is used with\n      ENGINE [=] NDB, a tablespace and associated\n      data file are created on each Cluster data node. You can verify\n      that the data files were created and obtain information about them\n      by querying the Information Schema\n      FILES table. (See the example later\n      in this section.)\n    ", "\n      (See Section\u00a028.3.15, \u201cThe INFORMATION_SCHEMA FILES Table\u201d.)\n"]}, {"Sub-title": "Options", "Illustration": ["\n\nADD DATAFILE: Defines the name of a\n          tablespace data file. This option is always required when\n          creating an NDB tablespace; for\n          InnoDB, it is required only when creating\n          an undo tablespace. The\n          file_name,\n          including any specified path, must be quoted with single or\n          double quotation marks. File names (not counting the file\n          extension) and directory names must be at least one byte in\n          length. Zero length file names and directory names are not\n          supported.\n        \n          Because there are considerable differences in how\n          InnoDB and NDB treat\n          data files, the two storage engines are covered separately in\n          the discussion that follows.\n        InnoDB data files.\u00a0\n            An InnoDB tablespace supports only a\n            single data file, whose name must include an\n            .ibd extension.\n          \n          To place an InnoDB general tablespace data\n          file in a location outside of the data directory, include a\n          fully qualified path or a path relative to the data directory.\n          Only a fully qualified path is permitted for undo tablespaces.\n          If you do not specify a path, a general tablespace is created\n          in the data directory. An undo tablespace created without\n          specifying a path is created in the directory defined by the\n          innodb_undo_directory\n          variable. If innodb_undo_directory is not\n          set, undo tablespaces are created in the data directory.\n        \n          To avoid conflicts with implicitly created file-per-table\n          tablespaces, creating an InnoDB general\n          tablespace in a subdirectory under the data directory is not\n          supported. When creating a general tablespace or undo\n          tablespace outside of the data directory, the directory must\n          exist and must be known to InnoDB prior to\n          creating the tablespace. To make a directory known to\n          InnoDB, add it to the\n          innodb_directories value or\n          to one of the variables whose values are appended to the value\n          of innodb_directories.\n          innodb_directories is a read-only variable.\n          Configuring it requires restarting the server.\n        \n          If the ADD DATAFILE clause is not specified\n          when creating an InnoDB tablespace, a\n          tablespace data file with a unique file name is created\n          implicitly. The unique file name is a 128 bit UUID formatted\n          into five groups of hexadecimal numbers separated by dashes\n          (aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee).\n          A file extension is added if required by the storage engine.\n          An .ibd file extension is added for\n          InnoDB general tablespace data files. In a\n          replication environment, the data file name created on the\n          replication source server is not the same as the data file\n          name created on the replica.\n        \n          The ADD DATAFILE clause does not permit\n          circular directory references when creating an\n          InnoDB tablespace. For example, the\n          circular directory reference (/../) in the\n          following statement is not permitted:\n        Press CTRL+C to copy CREATE TABLESPACE ts1 ADD DATAFILE ts1.ibd 'any_directory/../ts1.ibd';\n          An exception to this restriction exists on Linux, where a\n          circular directory reference is permitted if the preceding\n          directory is a symbolic link. For example, the data file path\n          in the example above is permitted if\n          any_directory is a symbolic link.\n          (It is still permitted for data file paths to begin with\n          '../'.)\n        NDB data files.\u00a0\n            An NDB tablespace supports multiple data\n            files which can have any legal file names; more data files\n            can be added to an NDB Cluster tablespace following its\n            creation by using an ALTER\n            TABLESPACE statement.\n          \n          An NDB tablespace data file is created by\n          default in the data node file system directory\u2014that is,\n          the directory named\n          ndb_nodeid_fs/TS\n          under the data node's data directory\n          (DataDir), where\n          nodeid is the data node's\n          NodeId. To place the\n          data file in a location other than the default, include an\n          absolute directory path or a path relative to the default\n          location. If the directory specified does not exist,\n          NDB attempts to create it; the system user\n          account under which the data node process is running must have\n          the appropriate permissions to do so.\n\n\n\nNote\n\n\n            When determining the path used for a data file,\n            NDB does not expand the\n            ~ (tilde) character.\n\n\n\n          When multiple data nodes are run on the same physical host,\n          the following considerations apply:\n\n\n\n              You cannot specify an absolute path when creating a data\n              file.\n            \n              It is not possible to create tablespace data files outside\n              the data node file system directory, unless each data node\n              has a separate data directory.\n            \n              If each data node has its own data directory, data files\n              can be created anywhere within this directory.\n            \n              If each data node has its own data directory, it may also\n              be possible to create a data file outside the node's\n              data directory using a relative path, as long as this path\n              resolves to a unique location on the host file system for\n              each data node running on that host.\n\n\n\nFILE_BLOCK_SIZE: This option\u2014which is\n          specific to InnoDB general tablespaces, and\n          is ignored by NDB\u2014defines the block\n          size for the tablespace data file. Values can be specified in\n          bytes or kilobytes. For example, an 8 kilobyte file block size\n          can be specified as 8192 or 8K. If you do not specify this\n          option, FILE_BLOCK_SIZE defaults to the\n          innodb_page_size value.\n          FILE_BLOCK_SIZE is required when you intend\n          to use the tablespace for storing compressed\n          InnoDB tables\n          (ROW_FORMAT=COMPRESSED). In this case, you\n          must define the tablespace FILE_BLOCK_SIZE\n          when creating the tablespace.\n        \n          If FILE_BLOCK_SIZE is equal the\n          innodb_page_size value, the\n          tablespace can contain only tables having an uncompressed row\n          format (COMPACT,\n          REDUNDANT, and DYNAMIC).\n          Tables with a COMPRESSED row format have a\n          different physical page size than uncompressed tables.\n          Therefore, compressed tables cannot coexist in the same\n          tablespace as uncompressed tables.\n        \n          For a general tablespace to contain compressed tables,\n          FILE_BLOCK_SIZE must be specified, and the\n          FILE_BLOCK_SIZE value must be a valid\n          compressed page size in relation to the\n          innodb_page_size value. Also,\n          the physical page size of the compressed table\n          (KEY_BLOCK_SIZE) must be equal to\n          FILE_BLOCK_SIZE/1024. For example, if\n          innodb_page_size=16K, and\n          FILE_BLOCK_SIZE=8K, the\n          KEY_BLOCK_SIZE of the table must be 8. For\n          more information, see Section\u00a017.6.3.3, \u201cGeneral Tablespaces\u201d.\n        \nUSE LOGFILE GROUP: Required for\n          NDB, this is the name of a log file group\n          previously created using CREATE LOGFILE\n          GROUP. Not supported for InnoDB,\n          where it fails with an error.\n        \nEXTENT_SIZE: This option is specific to\n          NDB, and is not supported by InnoDB, where it fails with an\n          error. EXTENT_SIZE sets the size, in bytes,\n          of the extents used by any files belonging to the tablespace.\n          The default value is 1M. The minimum size is 32K, and\n          theoretical maximum is 2G, although the practical maximum size\n          depends on a number of factors. In most cases, changing the\n          extent size does not have any measurable effect on\n          performance, and the default value is recommended for all but\n          the most unusual situations.\n        \n          An extent is a unit of\n          disk space allocation. One extent is filled with as much data\n          as that extent can contain before another extent is used. In\n          theory, up to 65,535 (64K) extents may used per data file;\n          however, the recommended maximum is 32,768 (32K). The\n          recommended maximum size for a single data file is\n          32G\u2014that is, 32K extents \u00d7 1 MB per extent. In\n          addition, once an extent is allocated to a given partition, it\n          cannot be used to store data from a different partition; an\n          extent cannot store data from more than one partition. This\n          means, for example that a tablespace having a single datafile\n          whose INITIAL_SIZE (described in the\n          following item) is 256 MB and whose\n          EXTENT_SIZE is 128M has just two extents,\n          and so can be used to store data from at most two different\n          disk data table partitions.\n        \n          You can see how many extents remain free in a given data file\n          by querying the Information Schema\n          FILES table, and so derive an\n          estimate for how much space remains free in the file. For\n          further discussion and examples, see\n          Section\u00a028.3.15, \u201cThe INFORMATION_SCHEMA FILES Table\u201d.\n        \nINITIAL_SIZE: This option is specific to\n          NDB, and is not supported by\n          InnoDB, where it fails with an error.\n        \n          The INITIAL_SIZE parameter sets the total\n          size in bytes of the data file that was specific using\n          ADD DATATFILE. Once this file has been\n          created, its size cannot be changed; however, you can add more\n          data files to the tablespace using\n          ALTER\n          TABLESPACE ... ADD DATAFILE.\n        \nINITIAL_SIZE is optional; its default value\n          is 134217728 (128 MB).\n        \n          On 32-bit systems, the maximum supported value for\n          INITIAL_SIZE is 4294967296 (4 GB).\n        \nAUTOEXTEND_SIZE: Defines the amount by\n          which InnoDB extends the size of the\n          tablespace when it becomes full. The setting must be a\n          multiple of 4MB. The default setting is 0, which causes the\n          tablespace to be extended according to the implicit default\n          behavior. For more information, see\n          Section\u00a017.6.3.9, \u201cTablespace AUTOEXTEND_SIZE Configuration\u201d.\n        \n          Has no effect in any release of MySQL NDB Cluster, regardless\n          of the storage engine used.\n        \nMAX_SIZE: Currently ignored by MySQL;\n          reserved for possible future use. Has no effect in any release\n          of MySQL or MySQL NDB Cluster, regardless of the storage\n          engine used.\n        \nNODEGROUP: Currently ignored by MySQL;\n          reserved for possible future use. Has no effect in any release\n          of MySQL or MySQL NDB Cluster, regardless of the storage\n          engine used.\n        \nWAIT: Currently ignored by MySQL; reserved\n          for possible future use. Has no effect in any release of MySQL\n          or MySQL NDB Cluster, regardless of the storage engine used.\n        \nCOMMENT: Currently ignored by MySQL;\n          reserved for possible future use. Has no effect in any release\n          of MySQL or MySQL NDB Cluster, regardless of the storage\n          engine used.\n        \n          The ENCRYPTION clause enables or disables\n          page-level data encryption for an InnoDB\n          general tablespace.\n        \n          If the ENCRYPTION clause is not specified,\n          the default_table_encryption\n          setting controls whether encryption is enabled. The\n          ENCRYPTION clause overrides the\n          default_table_encryption\n          setting. However, if the\n          table_encryption_privilege_check\n          variable is enabled, the\n          TABLE_ENCRYPTION_ADMIN\n          privilege is required to use an ENCRYPTION\n          clause setting that differs from the\n          default_table_encryption\n          setting.\n        \n          A keyring plugin must be installed and configured before an\n          encryption-enabled tablespace can be created.\n        \n          When a general tablespace is encrypted, all tables residing in\n          the tablespace are encrypted. Likewise, a table created in an\n          encrypted tablespace is encrypted.\n        \n          For more information, see\n          Section\u00a017.13, \u201cInnoDB Data-at-Rest Encryption\u201d\n\nENGINE: Defines the storage engine which\n          uses the tablespace, where\n          engine_name is the name of the\n          storage engine. Currently, only the InnoDB\n          storage engine is supported by standard MySQL 8.4\n          releases. MySQL NDB Cluster supports both\n          NDB and InnoDB\n          tablespaces. The value of the\n          default_storage_engine system\n          variable is used for ENGINE if the option\n          is not specified.\n        \n          The ENGINE_ATTRIBUTE option is used to\n          specify tablespace attributes for primary storage engines. The\n          option is reserved for future use.\n        \n          The value assigned to this option must be a string literal\n          containing a valid JSON document or an empty string ('').\n          Invalid JSON is rejected.\n        Press CTRL+C to copy CREATE TABLESPACE ts1 ENGINE_ATTRIBUTE='{\"key\":\"value\"}';\nENGINE_ATTRIBUTE values can be repeated\n          without error. In this case, the last specified value is used.\n        \nENGINE_ATTRIBUTE values are not checked by\n          the server, nor are they cleared when the table's storage\n          engine is changed.\n\n"]}, {"Sub-title": "Notes", "Illustration": ["\n\n          For the rules covering the naming of MySQL tablespaces, see\n          Section\u00a011.2, \u201cSchema Object Names\u201d. In addition to these rules, the\n          slash character (\u201c/\u201d) is not permitted, nor can\n          you use names beginning with innodb_, as\n          this prefix is reserved for system use.\n        \n          Creation of temporary general tablespaces is not supported.\n        \n          General tablespaces do not support temporary tables.\n        \n          The TABLESPACE option may be used with\n          CREATE TABLE or\n          ALTER TABLE to assign an\n          InnoDB table partition or subpartition to a\n          file-per-table tablespace. All partitions must belong to the\n          same storage engine. Assigning table partitions to shared\n          InnoDB tablespaces is not supported. Shared\n          tablespaces include the InnoDB system\n          tablespace and general tablespaces.\n        \n          General tablespaces support the addition of tables of any row\n          format using\n          CREATE TABLE ...\n          TABLESPACE.\n          innodb_file_per_table does\n          not need to be enabled.\n        \ninnodb_strict_mode is not\n          applicable to general tablespaces. Tablespace management rules\n          are strictly enforced independently of\n          innodb_strict_mode. If\n          CREATE TABLESPACE parameters are incorrect\n          or incompatible, the operation fails regardless of the\n          innodb_strict_mode setting.\n          When a table is added to a general tablespace using\n          CREATE TABLE ...\n          TABLESPACE or\n          ALTER TABLE ...\n          TABLESPACE,\n          innodb_strict_mode is ignored\n          but the statement is evaluated as if\n          innodb_strict_mode is\n          enabled.\n        \n          Use DROP TABLESPACE to remove a tablespace.\n          All tables must be dropped from a tablespace using\n          DROP TABLE prior to dropping\n          the tablespace. Before dropping an NDB Cluster tablespace you\n          must also remove all its data files using one or more\n          ALTER\n          TABLESPACE ... DROP DATATFILE statements. See\n          Section\u00a025.6.11.1, \u201cNDB Cluster Disk Data Objects\u201d.\n        \n          All parts of an InnoDB table added to an\n          InnoDB general tablespace reside in the\n          general tablespace, including indexes and\n          BLOB pages.\n        \n          For an NDB table assigned to a tablespace,\n          only those columns which are not indexed are stored on disk,\n          and actually use the tablespace data files. Indexes and\n          indexed columns for all NDB tables are\n          always kept in memory.\n        \n          Similar to the system tablespace, truncating or dropping\n          tables stored in a general tablespace creates free space\n          internally in the general tablespace\n          .ibd data file which can\n          only be used for new InnoDB data. Space is\n          not released back to the operating system as it is for\n          file-per-table tablespaces.\n        \n          A general tablespace is not associated with any database or\n          schema.\n        \nALTER TABLE ...\n          DISCARD TABLESPACE and\n          ALTER TABLE\n          ...IMPORT TABLESPACE are not supported for tables\n          that belong to a general tablespace.\n        \n          The server uses tablespace-level metadata locking for DDL that\n          references general tablespaces. By comparison, the server uses\n          table-level metadata locking for DDL that references\n          file-per-table tablespaces.\n        \n          A generated or existing tablespace cannot be changed to a\n          general tablespace.\n        \n          There is no conflict between general tablespace names and\n          file-per-table tablespace names. The \u201c/\u201d\n          character, which is present in file-per-table tablespace\n          names, is not permitted in general tablespace names.\n        \nmysqldump does not dump\n          InnoDB CREATE\n          TABLESPACE statements.\n\n"]}, {"Sub-title": "InnoDB Examples", "Illustration": ["\n      This example demonstrates creating a general tablespace and adding\n      three uncompressed tables of different row formats.\n    ", "Press CTRL+C to copy mysql> CREATE TABLESPACE `ts1` ADD DATAFILE 'ts1.ibd' ENGINE=INNODB;\n\nmysql> CREATE TABLE t1 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=REDUNDANT;\n\nmysql> CREATE TABLE t2 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=COMPACT;\n\nmysql> CREATE TABLE t3 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=DYNAMIC;", "\n      This example demonstrates creating a general tablespace and adding\n      a compressed table. The example assumes a default\n      innodb_page_size value of 16K.\n      The FILE_BLOCK_SIZE of 8192 requires that the\n      compressed table have a KEY_BLOCK_SIZE of 8.\n    ", "Press CTRL+C to copy mysql> CREATE TABLESPACE `ts2` ADD DATAFILE 'ts2.ibd' FILE_BLOCK_SIZE = 8192 ENGINE=InnoDB;\n\nmysql> CREATE TABLE t4 (c1 INT PRIMARY KEY) TABLESPACE ts2 ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;", "\n      This example demonstrates creating a general tablespace without\n      specifying the ADD DATAFILE clause, which is\n      optional:\n    ", "Press CTRL+C to copy mysql> CREATE TABLESPACE `ts3` ENGINE=INNODB;", "\n      This example demonstrates creating an undo tablespace:\n    ", "Press CTRL+C to copy mysql> CREATE UNDO TABLESPACE undo_003 ADD DATAFILE 'undo_003.ibu';"]}, {"Sub-title": "NDB Example", "Illustration": ["\n      Suppose that you wish to create an NDB Cluster Disk Data\n      tablespace named myts using a datafile named\n      mydata-1.dat. An NDB\n      tablespace always requires the use of a log file group consisting\n      of one or more undo log files. For this example, we first create a\n      log file group named mylg that contains one\n      undo long file named myundo-1.dat, using the\n      CREATE LOGFILE GROUP statement\n      shown here:\n    ", "Press CTRL+C to copy mysql> CREATE LOGFILE GROUP myg1\n    ->     ADD UNDOFILE 'myundo-1.dat'\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (3.29 sec)", "\n      Now you can create the tablespace previously described using the\n      following statement:\n    ", "Press CTRL+C to copy mysql> CREATE TABLESPACE myts\n    ->     ADD DATAFILE 'mydata-1.dat'\n    ->     USE LOGFILE GROUP mylg\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (2.98 sec)", "\n      You can now create a Disk Data table using a\n      CREATE TABLE statement with the\n      TABLESPACE and STORAGE DISK\n      options, similar to what is shown here:\n    ", "Press CTRL+C to copy mysql> CREATE TABLE mytable (\n    ->     id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    ->     lname VARCHAR(50) NOT NULL,\n    ->     fname VARCHAR(50) NOT NULL,\n    ->     dob DATE NOT NULL,\n    ->     joined DATE NOT NULL,\n    ->     INDEX(last_name, first_name)\n    -> )\n    ->     TABLESPACE myts STORAGE DISK\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (1.41 sec)", "\n      It is important to note that only the dob and\n      joined columns from mytable\n      are actually stored on disk, due to the fact that the\n      id, lname, and\n      fname columns are all indexed.\n    ", "\n      As mentioned previously, when CREATE TABLESPACE\n      is used with ENGINE [=] NDB, a tablespace and\n      its associated data file are created on each NDB Cluster data\n      node. You can verify that the data files were created and obtain\n      information about them by querying the Information Schema\n      FILES table, as shown here:\n    ", "Press CTRL+C to copy mysql> SELECT FILE_NAME, FILE_TYPE, LOGFILE_GROUP_NAME, STATUS, EXTRA\n    ->     FROM INFORMATION_SCHEMA.FILES\n    ->     WHERE TABLESPACE_NAME = 'myts';\n\n+--------------+------------+--------------------+--------+----------------+\n| file_name    | file_type  | logfile_group_name | status | extra          |\n+--------------+------------+--------------------+--------+----------------+\n| mydata-1.dat | DATAFILE   | mylg               | NORMAL | CLUSTER_NODE=5 |\n| mydata-1.dat | DATAFILE   | mylg               | NORMAL | CLUSTER_NODE=6 |\n| NULL         | TABLESPACE | mylg               | NORMAL | NULL           |\n+--------------+------------+--------------------+--------+----------------+\n3 rows in set (0.01 sec)", "\n      For additional information and examples, see\n      Section\u00a025.6.11.1, \u201cNDB Cluster Disk Data Objects\u201d.\n"]}], "Examples": ["CREATE TABLESPACE ts1 ADD DATAFILE ts1.ibd 'any_directory/../ts1.ibd';", "CREATE TABLESPACE ts1 ENGINE_ATTRIBUTE='{\"key\":\"value\"}';", "mysql> CREATE TABLESPACE `ts1` ADD DATAFILE 'ts1.ibd' ENGINE=INNODB;\n\nmysql> CREATE TABLE t1 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=REDUNDANT;\n\nmysql> CREATE TABLE t2 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=COMPACT;\n\nmysql> CREATE TABLE t3 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=DYNAMIC;", "mysql> CREATE TABLESPACE `ts2` ADD DATAFILE 'ts2.ibd' FILE_BLOCK_SIZE = 8192 ENGINE=InnoDB;\n\nmysql> CREATE TABLE t4 (c1 INT PRIMARY KEY) TABLESPACE ts2 ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;", "mysql> CREATE TABLESPACE `ts3` ENGINE=INNODB;", "mysql> CREATE UNDO TABLESPACE undo_003 ADD DATAFILE 'undo_003.ibu';", "mysql> CREATE LOGFILE GROUP myg1\n    ->     ADD UNDOFILE 'myundo-1.dat'\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (3.29 sec)", "mysql> CREATE TABLESPACE myts\n    ->     ADD DATAFILE 'mydata-1.dat'\n    ->     USE LOGFILE GROUP mylg\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (2.98 sec)", "mysql> CREATE TABLE mytable (\n    ->     id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    ->     lname VARCHAR(50) NOT NULL,\n    ->     fname VARCHAR(50) NOT NULL,\n    ->     dob DATE NOT NULL,\n    ->     joined DATE NOT NULL,\n    ->     INDEX(last_name, first_name)\n    -> )\n    ->     TABLESPACE myts STORAGE DISK\n    ->     ENGINE=NDB;\nQuery OK, 0 rows affected (1.41 sec)", "mysql> SELECT FILE_NAME, FILE_TYPE, LOGFILE_GROUP_NAME, STATUS, EXTRA\n    ->     FROM INFORMATION_SCHEMA.FILES\n    ->     WHERE TABLESPACE_NAME = 'myts';\n\n+--------------+------------+--------------------+--------+----------------+\n| file_name    | file_type  | logfile_group_name | status | extra          |\n+--------------+------------+--------------------+--------+----------------+\n| mydata-1.dat | DATAFILE   | mylg               | NORMAL | CLUSTER_NODE=5 |\n| mydata-1.dat | DATAFILE   | mylg               | NORMAL | CLUSTER_NODE=6 |\n| NULL         | TABLESPACE | mylg               | NORMAL | NULL           |\n+--------------+------------+--------------------+--------+----------------+\n3 rows in set (0.01 sec)"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-trigger.html"], "Title": ["15.1.22 CREATE TRIGGER Statement"], "Feature": ["CREATE\n    [DEFINER = user]\n    TRIGGER [IF NOT EXISTS] trigger_name\n    trigger_time trigger_event\n    ON tbl_name FOR EACH ROW\n    [trigger_order]\n    trigger_body\n\ntrigger_time: { BEFORE | AFTER }\n\ntrigger_event: { INSERT | UPDATE | DELETE }\n\ntrigger_order: { FOLLOWS | PRECEDES } other_trigger_name"], "Description": ["\n      This statement creates a new trigger. A trigger is a named\n      database object that is associated with a table, and that\n      activates when a particular event occurs for the table. The\n      trigger becomes associated with the table named\n      tbl_name, which must refer to a\n      permanent table. You cannot associate a trigger with a\n      TEMPORARY table or a view.\n    ", "\n      Trigger names exist in the schema namespace, meaning that all\n      triggers must have unique names within a schema. Triggers in\n      different schemas can have the same name.\n    ", "\nIF NOT EXISTS prevents an error from occurring\n      if a trigger having the same name, on the same table, exists in\n      the same schema.\n    ", "\n      This section describes CREATE\n      TRIGGER syntax. For additional discussion, see\n      Section\u00a027.3.1, \u201cTrigger Syntax and Examples\u201d.\n    ", "\nCREATE TRIGGER requires the\n      TRIGGER privilege for the table\n      associated with the trigger. If the DEFINER\n      clause is present, the privileges required depend on the\n      user value, as discussed in\n      Section\u00a027.6, \u201cStored Object Access Control\u201d. If binary logging is\n      enabled, CREATE TRIGGER might\n      require the SUPER privilege, as\n      discussed in Section\u00a027.7, \u201cStored Program Binary Logging\u201d.\n    ", "\n      The DEFINER clause determines the security\n      context to be used when checking access privileges at trigger\n      activation time, as described later in this section.\n    ", "\ntrigger_time is the trigger action\n      time. It can be BEFORE or\n      AFTER to indicate that the trigger activates\n      before or after each row to be modified.\n    ", "\n      Basic column value checks occur prior to trigger activation, so\n      you cannot use BEFORE triggers to convert\n      values inappropriate for the column type to valid values.\n    ", "\ntrigger_event indicates the kind of\n      operation that activates the trigger. These\n      trigger_event values are permitted:\n", "\n\nINSERT: The trigger activates\n          whenever a new row is inserted into the table (for example,\n          through INSERT,\n          LOAD DATA, and\n          REPLACE statements).\n        \nUPDATE: The trigger activates\n          whenever a row is modified (for example, through\n          UPDATE statements).\n        \nDELETE: The trigger activates\n          whenever a row is deleted from the table (for example, through\n          DELETE and\n          REPLACE statements).\n          DROP TABLE and\n          TRUNCATE TABLE statements on\n          the table do not activate this trigger,\n          because they do not use DELETE.\n          Dropping a partition does not activate\n          DELETE triggers, either.\n\n", "\n      The trigger_event does not represent a\n      literal type of SQL statement that activates the trigger so much\n      as it represents a type of table operation. For example, an\n      INSERT trigger activates not only\n      for INSERT statements but also\n      LOAD DATA statements because both\n      statements insert rows into a table.\n    ", "\n      A potentially confusing example of this is the INSERT\n      INTO ... ON DUPLICATE KEY UPDATE ... syntax: a\n      BEFORE INSERT trigger activates for every row,\n      followed by either an AFTER INSERT trigger or\n      both the BEFORE UPDATE and AFTER\n      UPDATE triggers, depending on whether there was a\n      duplicate key for the row.\n", "\n\nNote\n\n\n        Cascaded foreign key actions do not activate triggers.\n\n", "\n      It is possible to define multiple triggers for a given table that\n      have the same trigger event and action time. For example, you can\n      have two BEFORE UPDATE triggers for a table. By\n      default, triggers that have the same trigger event and action time\n      activate in the order they were created. To affect trigger order,\n      specify a trigger_order clause that\n      indicates FOLLOWS or\n      PRECEDES and the name of an existing trigger\n      that also has the same trigger event and action time. With\n      FOLLOWS, the new trigger activates after the\n      existing trigger. With PRECEDES, the new\n      trigger activates before the existing trigger.\n    ", "\ntrigger_body is the statement to\n      execute when the trigger activates. To execute multiple\n      statements, use the\n      BEGIN ... END\n      compound statement construct. This also enables you to use the\n      same statements that are permitted within stored routines. See\n      Section\u00a015.6.1, \u201cBEGIN ... END Compound Statement\u201d. Some statements are not permitted in\n      triggers; see Section\u00a027.8, \u201cRestrictions on Stored Programs\u201d.\n    ", "\n      Within the trigger body, you can refer to columns in the subject\n      table (the table associated with the trigger) by using the aliases\n      OLD and NEW.\n      OLD.col_name refers\n      to a column of an existing row before it is updated or deleted.\n      NEW.col_name refers\n      to the column of a new row to be inserted or an existing row after\n      it is updated.\n    ", "\n      Triggers cannot use\n      NEW.col_name or use\n      OLD.col_name to\n      refer to generated columns. For information about generated\n      columns, see Section\u00a015.1.20.8, \u201cCREATE TABLE and Generated Columns\u201d.\n    ", "\n      MySQL stores the sql_mode system\n      variable setting in effect when a trigger is created, and always\n      executes the trigger body with this setting in force,\n      regardless of the current server SQL mode when the\n      trigger begins executing.\n    ", "\n      The DEFINER clause specifies the MySQL account\n      to be used when checking access privileges at trigger activation\n      time. If the DEFINER clause is present, the\n      user value should be a MySQL account\n      specified as\n      'user_name'@'host_name',\n      CURRENT_USER, or\n      CURRENT_USER(). The permitted\n      user values depend on the privileges\n      you hold, as discussed in\n      Section\u00a027.6, \u201cStored Object Access Control\u201d. Also see that section\n      for additional information about trigger security.\n    ", "\n      If the DEFINER clause is omitted, the default\n      definer is the user who executes the CREATE\n      TRIGGER statement. This is the same as specifying\n      DEFINER = CURRENT_USER explicitly.\n    ", "\n      MySQL takes the DEFINER user into account when\n      checking trigger privileges as follows:\n", "\n\n          At CREATE TRIGGER time, the\n          user who issues the statement must have the\n          TRIGGER privilege.\n        \n          At trigger activation time, privileges are checked against the\n          DEFINER user. This user must have these\n          privileges:\n\n\n\n              The TRIGGER privilege for\n              the subject table.\n            \n              The SELECT privilege for\n              the subject table if references to table columns occur\n              using\n              OLD.col_name\n              or\n              NEW.col_name\n              in the trigger body.\n            \n              The UPDATE privilege for\n              the subject table if table columns are targets of\n              SET NEW.col_name =\n              value assignments in\n              the trigger body.\n            \n              Whatever other privileges normally are required for the\n              statements executed by the trigger.\n\n\n\n", "\n      Within a trigger body, the\n      CURRENT_USER function returns the\n      account used to check privileges at trigger activation time. This\n      is the DEFINER user, not the user whose actions\n      caused the trigger to be activated. For information about user\n      auditing within triggers, see\n      Section\u00a08.2.23, \u201cSQL-Based Account Activity Auditing\u201d.\n    ", "\n      If you use LOCK TABLES to lock a\n      table that has triggers, the tables used within the trigger are\n      also locked, as described in\n      LOCK TABLES and Triggers.\n    ", "\n      For additional discussion of trigger use, see\n      Section\u00a027.3.1, \u201cTrigger Syntax and Examples\u201d.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-view.html"], "Title": ["15.1.23 CREATE VIEW Statement"], "Feature": ["CREATE\n    [OR REPLACE]\n    [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]\n    [DEFINER = user]\n    [SQL SECURITY { DEFINER | INVOKER }]\n    VIEW view_name [(column_list)]\n    AS select_statement\n    [WITH [CASCADED | LOCAL] CHECK OPTION]"], "Description": ["\n      The CREATE VIEW statement creates a\n      new view, or replaces an existing view if the OR\n      REPLACE clause is given. If the view does not exist,\n      CREATE OR REPLACE\n      VIEW is the same as CREATE\n      VIEW. If the view does exist,\n      CREATE OR REPLACE\n      VIEW replaces it.\n    ", "\n      For information about restrictions on view use, see\n      Section\u00a027.9, \u201cRestrictions on Views\u201d.\n    ", "\n      The select_statement is a\n      SELECT statement that provides the\n      definition of the view. (Selecting from the view selects, in\n      effect, using the SELECT\n      statement.) The select_statement can\n      select from base tables or from other views. The\n      SELECT statement can use a\n      VALUES statement as its source, or\n      can be replaced with a TABLE\n      statement, as with\n      CREATE TABLE\n      ... SELECT.\n    ", "\n      The view definition is \u201cfrozen\u201d at creation time and\n      is not affected by subsequent changes to the definitions of the\n      underlying tables. For example, if a view is defined as\n      SELECT * on a table, new columns added to the\n      table later do not become part of the view, and columns dropped\n      from the table result in an error when selecting from the view.\n    ", "\n      The ALGORITHM clause affects how MySQL\n      processes the view. The DEFINER and\n      SQL SECURITY clauses specify the security\n      context to be used when checking access privileges at view\n      invocation time. The WITH CHECK OPTION clause\n      can be given to constrain inserts or updates to rows in tables\n      referenced by the view. These clauses are described later in this\n      section.\n    ", "\n      The CREATE VIEW statement requires\n      the CREATE VIEW privilege for the\n      view, and some privilege for each column selected by the\n      SELECT statement. For columns used\n      elsewhere in the SELECT statement,\n      you must have the SELECT privilege.\n      If the OR REPLACE clause is present, you must\n      also have the DROP privilege for\n      the view. If the DEFINER clause is present, the\n      privileges required depend on the user\n      value, as discussed in Section\u00a027.6, \u201cStored Object Access Control\u201d.\n    ", "\n      When a view is referenced, privilege checking occurs as described\n      later in this section.\n    ", "\n      A view belongs to a database. By default, a new view is created in\n      the default database. To create the view explicitly in a given\n      database, use db_name.view_name syntax\n      to qualify the view name with the database name:\n    ", "Press CTRL+C to copy CREATE VIEW test.v AS SELECT * FROM t;", "\n      Unqualified table or view names in the\n      SELECT statement are also\n      interpreted with respect to the default database. A view can refer\n      to tables or views in other databases by qualifying the table or\n      view name with the appropriate database name.\n    ", "\n      Within a database, base tables and views share the same namespace,\n      so a base table and a view cannot have the same name.\n    ", "\n      Columns retrieved by the SELECT\n      statement can be simple references to table columns, or\n      expressions that use functions, constant values, operators, and so\n      forth.\n    ", "\n      A view must have unique column names with no duplicates, just like\n      a base table. By default, the names of the columns retrieved by\n      the SELECT statement are used for\n      the view column names. To define explicit names for the view\n      columns, specify the optional\n      column_list clause as a list of\n      comma-separated identifiers. The number of names in\n      column_list must be the same as the\n      number of columns retrieved by the\n      SELECT statement.\n    ", "\n      A view can be created from many kinds of\n      SELECT statements. It can refer to\n      base tables or other views. It can use joins,\n      UNION, and subqueries. The\n      SELECT need not even refer to any\n      tables:\n    ", "Press CTRL+C to copy CREATE VIEW v_today (today) AS SELECT CURRENT_DATE;", "\n      The following example defines a view that selects two columns from\n      another table as well as an expression calculated from those\n      columns:\n    ", "Press CTRL+C to copy mysql> CREATE TABLE t (qty INT, price INT);\nmysql> INSERT INTO t VALUES(3, 50);\nmysql> CREATE VIEW v AS SELECT qty, price, qty*price AS value FROM t;\nmysql> SELECT * FROM v;\n+------+-------+-------+\n| qty  | price | value |\n+------+-------+-------+\n|    3 |    50 |   150 |\n+------+-------+-------+", "\n      A view definition is subject to the following restrictions:\n", "\n\n          The SELECT statement cannot\n          refer to system variables or user-defined variables.\n        \n          Within a stored program, the\n          SELECT statement cannot refer\n          to program parameters or local variables.\n        \n          The SELECT statement cannot\n          refer to prepared statement parameters.\n        \n          Any table or view referred to in the definition must exist.\n          If, after the view has been created, a table or view that the\n          definition refers to is dropped, use of the view results in an\n          error. To check a view definition for problems of this kind,\n          use the CHECK TABLE statement.\n        \n          The definition cannot refer to a TEMPORARY\n          table, and you cannot create a TEMPORARY\n          view.\n        \n          You cannot associate a trigger with a view.\n        \n          Aliases for column names in the\n          SELECT statement are checked\n          against the maximum column length of 64 characters (not the\n          maximum alias length of 256 characters).\n\n", "\nORDER BY is permitted in a view definition, but\n      it is ignored if you select from a view using a statement that has\n      its own ORDER BY.\n    ", "\n      For other options or clauses in the definition, they are added to\n      the options or clauses of the statement that references the view,\n      but the effect is undefined. For example, if a view definition\n      includes a LIMIT clause, and you select from\n      the view using a statement that has its own\n      LIMIT clause, it is undefined which limit\n      applies. This same principle applies to options such as\n      ALL, DISTINCT, or\n      SQL_SMALL_RESULT that follow the\n      SELECT keyword, and to clauses such\n      as INTO, FOR UPDATE,\n      FOR SHARE, LOCK IN SHARE\n      MODE, and PROCEDURE.\n    ", "\n      The results obtained from a view may be affected if you change the\n      query processing environment by changing system variables:\n    ", "Press CTRL+C to copy mysql> CREATE VIEW v (mycol) AS SELECT 'abc';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET sql_mode = '';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| mycol |\n+-------+\n1 row in set (0.01 sec)\n\nmysql> SET sql_mode = 'ANSI_QUOTES';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| abc   |\n+-------+\n1 row in set (0.00 sec)", "\n      The DEFINER and SQL SECURITY\n      clauses determine which MySQL account to use when checking access\n      privileges for the view when a statement is executed that\n      references the view. The valid SQL SECURITY\n      characteristic values are DEFINER (the default)\n      and INVOKER. These indicate that the required\n      privileges must be held by the user who defined or invoked the\n      view, respectively.\n    ", "\n      If the DEFINER clause is present, the\n      user value should be a MySQL account\n      specified as\n      'user_name'@'host_name',\n      CURRENT_USER, or\n      CURRENT_USER(). The permitted\n      user values depend on the privileges\n      you hold, as discussed in\n      Section\u00a027.6, \u201cStored Object Access Control\u201d. Also see that section\n      for additional information about view security.\n    ", "\n      If the DEFINER clause is omitted, the default\n      definer is the user who executes the CREATE\n      VIEW statement. This is the same as specifying\n      DEFINER = CURRENT_USER explicitly.\n    ", "\n      Within a view definition, the\n      CURRENT_USER function returns the\n      view's DEFINER value by default. For views\n      defined with the SQL SECURITY INVOKER\n      characteristic, CURRENT_USER\n      returns the account for the view's invoker. For information about\n      user auditing within views, see\n      Section\u00a08.2.23, \u201cSQL-Based Account Activity Auditing\u201d.\n    ", "\n      Within a stored routine that is defined with the SQL\n      SECURITY DEFINER characteristic,\n      CURRENT_USER returns the routine's\n      DEFINER value. This also affects a view defined\n      within such a routine, if the view definition contains a\n      DEFINER value of\n      CURRENT_USER.\n    ", "\n      MySQL checks view privileges like this:\n", "\n\n          At view definition time, the view creator must have the\n          privileges needed to use the top-level objects accessed by the\n          view. For example, if the view definition refers to table\n          columns, the creator must have some privilege for each column\n          in the select list of the definition, and the\n          SELECT privilege for each\n          column used elsewhere in the definition. If the definition\n          refers to a stored function, only the privileges needed to\n          invoke the function can be checked. The privileges required at\n          function invocation time can be checked only as it executes:\n          For different invocations, different execution paths within\n          the function might be taken.\n        \n          The user who references a view must have appropriate\n          privileges to access it (SELECT\n          to select from it, INSERT to\n          insert into it, and so forth.)\n        \n          When a view has been referenced, privileges for objects\n          accessed by the view are checked against the privileges held\n          by the view DEFINER account or invoker,\n          depending on whether the SQL SECURITY\n          characteristic is DEFINER or\n          INVOKER, respectively.\n        \n          If reference to a view causes execution of a stored function,\n          privilege checking for statements executed within the function\n          depend on whether the function SQL SECURITY\n          characteristic is DEFINER or\n          INVOKER. If the security characteristic is\n          DEFINER, the function runs with the\n          privileges of the DEFINER account. If the\n          characteristic is INVOKER, the function\n          runs with the privileges determined by the view's SQL\n          SECURITY characteristic.\n\n", "\n      Example: A view might depend on a stored function, and that\n      function might invoke other stored routines. For example, the\n      following view invokes a stored function f():\n    ", "Press CTRL+C to copy CREATE VIEW v AS SELECT * FROM t WHERE t.id = f(t.name);", "\n      Suppose that f() contains a statement such as\n      this:\n    ", "Press CTRL+C to copy IF name IS NULL then\n  CALL p1();\nELSE\n  CALL p2();\nEND IF;", "\n      The privileges required for executing statements within\n      f() need to be checked when\n      f() executes. This might mean that privileges\n      are needed for p1() or p2(),\n      depending on the execution path within f().\n      Those privileges must be checked at runtime, and the user who must\n      possess the privileges is determined by the SQL\n      SECURITY values of the view v and the\n      function f().\n    ", "\n      The DEFINER and SQL SECURITY\n      clauses for views are extensions to standard SQL. In standard SQL,\n      views are handled using the rules for SQL SECURITY\n      DEFINER. The standard says that the definer of the view,\n      which is the same as the owner of the view's schema, gets\n      applicable privileges on the view (for example,\n      SELECT) and may grant them. MySQL\n      has no concept of a schema \u201cowner\u201d, so MySQL adds a\n      clause to identify the definer. The DEFINER\n      clause is an extension where the intent is to have what the\n      standard has; that is, a permanent record of who defined the view.\n      This is why the default DEFINER value is the\n      account of the view creator.\n    ", "\n      The optional ALGORITHM clause is a MySQL\n      extension to standard SQL. It affects how MySQL processes the\n      view. ALGORITHM takes three values:\n      MERGE, TEMPTABLE, or\n      UNDEFINED. For more information, see\n      Section\u00a027.5.2, \u201cView Processing Algorithms\u201d, as well as\n      Section\u00a010.2.2.4, \u201cOptimizing Derived Tables, View References, and Common Table Expressions\n          with Merging or Materialization\u201d.\n    ", "\n      Some views are updatable. That is, you can use them in statements\n      such as UPDATE,\n      DELETE, or\n      INSERT to update the contents of\n      the underlying table. For a view to be updatable, there must be a\n      one-to-one relationship between the rows in the view and the rows\n      in the underlying table. There are also certain other constructs\n      that make a view nonupdatable.\n    ", "\n      A generated column in a view is considered updatable because it is\n      possible to assign to it. However, if such a column is updated\n      explicitly, the only permitted value is\n      DEFAULT. For information about generated\n      columns, see Section\u00a015.1.20.8, \u201cCREATE TABLE and Generated Columns\u201d.\n    ", "\n      The WITH CHECK OPTION clause can be given for\n      an updatable view to prevent inserts or updates to rows except\n      those for which the WHERE clause in the\n      select_statement is true.\n    ", "\n      In a WITH CHECK OPTION clause for an updatable\n      view, the LOCAL and CASCADED\n      keywords determine the scope of check testing when the view is\n      defined in terms of another view. The LOCAL\n      keyword restricts the CHECK OPTION only to the\n      view being defined. CASCADED causes the checks\n      for underlying views to be evaluated as well. When neither keyword\n      is given, the default is CASCADED.\n    ", "\n      For more information about updatable views and the WITH\n      CHECK OPTION clause, see\n      Section\u00a027.5.3, \u201cUpdatable and Insertable Views\u201d, and\n      Section\u00a027.5.4, \u201cThe View WITH CHECK OPTION Clause\u201d.\n"], "Examples": ["CREATE VIEW test.v AS SELECT * FROM t;", "CREATE VIEW v_today (today) AS SELECT CURRENT_DATE;", "mysql> CREATE TABLE t (qty INT, price INT);\nmysql> INSERT INTO t VALUES(3, 50);\nmysql> CREATE VIEW v AS SELECT qty, price, qty*price AS value FROM t;\nmysql> SELECT * FROM v;\n+------+-------+-------+\n| qty  | price | value |\n+------+-------+-------+\n|    3 |    50 |   150 |\n+------+-------+-------+", "mysql> CREATE VIEW v (mycol) AS SELECT 'abc';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET sql_mode = '';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| mycol |\n+-------+\n1 row in set (0.01 sec)\n\nmysql> SET sql_mode = 'ANSI_QUOTES';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| abc   |\n+-------+\n1 row in set (0.00 sec)", "CREATE VIEW v AS SELECT * FROM t WHERE t.id = f(t.name);", "IF name IS NULL then\n  CALL p1();\nELSE\n  CALL p2();\nEND IF;"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-database.html"], "Title": ["15.1.24 DROP DATABASE Statement"], "Feature": ["DROP {DATABASE | SCHEMA} [IF EXISTS] db_name"], "Description": ["\nDROP DATABASE drops all tables in\n      the database and deletes the database. Be\n      very careful with this statement! To use\n      DROP DATABASE, you need the\n      DROP privilege on the database.\n      DROP\n      SCHEMA is a synonym for DROP\n      DATABASE.\n", "\n\nImportant\n\n\n        When a database is dropped, privileges granted specifically for\n        the database are not automatically dropped.\n        They must be dropped manually. See Section\u00a015.7.1.6, \u201cGRANT Statement\u201d.\n\n", "\nIF EXISTS is used to prevent an error from\n      occurring if the database does not exist.\n    ", "\n      If the default database is dropped, the default database is unset\n      (the DATABASE() function returns\n      NULL).\n    ", "\n      If you use DROP DATABASE on a\n      symbolically linked database, both the link and the original\n      database are deleted.\n    ", "\nDROP DATABASE returns the number of\n      tables that were removed.\n    ", "\n      The DROP DATABASE statement removes\n      from the given database directory those files and directories that\n      MySQL itself may create during normal operation. This includes all\n      files with the extensions shown in the following list:\n", "\n\n.BAK\n\n.DAT\n\n.HSH\n\n.MRG\n\n.MYD\n\n.MYI\n\n.cfg\n\n.db\n\n.ibd\n\n.ndb\n\n", "\n      If other files or directories remain in the database directory\n      after MySQL removes those just listed, the database directory\n      cannot be removed. In this case, you must remove any remaining\n      files or directories manually and issue the\n      DROP DATABASE statement again.\n    ", "\n      Dropping a database does not remove any\n      TEMPORARY tables that were created in that\n      database. TEMPORARY tables are automatically\n      removed when the session that created them ends. See\n      Section\u00a015.1.20.2, \u201cCREATE TEMPORARY TABLE Statement\u201d.\n    ", "\n      You can also drop databases with mysqladmin.\n      See Section\u00a06.5.2, \u201cmysqladmin \u2014 A MySQL Server Administration Program\u201d.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-event.html"], "Title": ["15.1.25 DROP EVENT Statement"], "Feature": ["DROP EVENT [IF EXISTS] event_name"], "Description": ["\n      This statement drops the event named\n      event_name. The event immediately\n      ceases being active, and is deleted completely from the server.\n    ", "\n      If the event does not exist, the error ERROR 1517\n      (HY000): Unknown event\n      'event_name' results. You\n      can override this and cause the statement to generate a warning\n      for nonexistent events instead using IF EXISTS.\n    ", "\n      This statement requires the EVENT\n      privilege for the schema to which the event to be dropped belongs.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-index.html"], "Title": ["15.1.27 DROP INDEX Statement"], "Feature": ["DROP INDEX index_name ON tbl_name\n    [algorithm_option | lock_option] ...\n\nalgorithm_option:\n    ALGORITHM [=] {DEFAULT | INPLACE | COPY}\n\nlock_option:\n    LOCK [=] {DEFAULT | NONE | SHARED | EXCLUSIVE}"], "Description": ["\nDROP INDEX drops the index named\n      index_name from the table\n      tbl_name. This statement is mapped to\n      an ALTER TABLE statement to drop\n      the index. See Section\u00a015.1.9, \u201cALTER TABLE Statement\u201d.\n    ", "\n      To drop a primary key, the index name is always\n      PRIMARY, which must be specified as a quoted\n      identifier because PRIMARY is a reserved word:\n    ", "Press CTRL+C to copy DROP INDEX `PRIMARY` ON t;", "\n      Indexes on variable-width columns of\n      NDB tables are dropped online; that\n      is, without any table copying. The table is not locked against\n      access from other NDB Cluster API nodes, although it is locked\n      against other operations on the same API node\n      for the duration of the operation. This is done automatically by\n      the server whenever it determines that it is possible to do so;\n      you do not have to use any special SQL syntax or server options to\n      cause it to happen.\n    ", "\nALGORITHM and LOCK clauses\n      may be given to influence the table copying method and level of\n      concurrency for reading and writing the table while its indexes\n      are being modified. They have the same meaning as for the\n      ALTER TABLE statement. For more\n      information, see Section\u00a015.1.9, \u201cALTER TABLE Statement\u201d\n", "\n      MySQL NDB Cluster supports online operations using the same\n      ALGORITHM=INPLACE syntax supported in the\n      standard MySQL Server. See\n      Section\u00a025.6.12, \u201cOnline Operations with ALTER TABLE in NDB Cluster\u201d, for more\n      information.\n"], "Examples": ["DROP INDEX `PRIMARY` ON t;"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-logfile-group.html"], "Title": ["15.1.28 DROP LOGFILE GROUP Statement"], "Feature": ["DROP LOGFILE GROUP logfile_group\n    ENGINE [=] engine_name"], "Description": ["\n      This statement drops the log file group named\n      logfile_group. The log file group must\n      already exist or an error results. (For information on creating\n      log file groups, see Section\u00a015.1.16, \u201cCREATE LOGFILE GROUP Statement\u201d.)\n", "\n\nImportant\n\n\n        Before dropping a log file group, you must drop all tablespaces\n        that use that log file group for UNDO\n        logging.\n\n", "\n      The required ENGINE clause provides the name of\n      the storage engine used by the log file group to be dropped. The\n      only permitted values for engine_name\n      are NDB and\n      NDBCLUSTER.\n    ", "\nDROP LOGFILE GROUP is useful only\n      with Disk Data storage for NDB Cluster. See\n      Section\u00a025.6.11, \u201cNDB Cluster Disk Data Tables\u201d.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-procedure.html"], "Title": ["15.1.29 DROP PROCEDURE and DROP FUNCTION Statements"], "Feature": ["DROP {PROCEDURE | FUNCTION} [IF EXISTS] sp_name"], "Description": ["\n      These statements are used to drop a stored routine (a stored\n      procedure or function). That is, the specified routine is removed\n      from the server. (DROP FUNCTION is also used to\n      drop loadable functions; see\n      Section\u00a015.7.4.2, \u201cDROP FUNCTION Statement for Loadable Functions\u201d.)\n    ", "\n      To drop a stored routine, you must have the\n      ALTER ROUTINE privilege for it. (If\n      the automatic_sp_privileges\n      system variable is enabled, that privilege and\n      EXECUTE are granted automatically\n      to the routine creator when the routine is created and dropped\n      from the creator when the routine is dropped. See\n      Section\u00a027.2.2, \u201cStored Routines and MySQL Privileges\u201d.)\n    ", "\n      In addition, if the definer of the routine has the\n      SYSTEM_USER privilege, the user\n      dropping it must also have this privilege.\n    ", "\n      The IF EXISTS clause is a MySQL extension. It\n      prevents an error from occurring if the procedure or function does\n      not exist. A warning is produced that can be viewed with\n      SHOW WARNINGS.\n    ", "\nDROP FUNCTION is also used to drop\n      loadable functions (see Section\u00a015.7.4.2, \u201cDROP FUNCTION Statement for Loadable Functions\u201d).\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-event.html"], "Title": ["15.1.3 ALTER EVENT Statement"], "Feature": ["ALTER\n    [DEFINER = user]\n    EVENT event_name\n    [ON SCHEDULE schedule]\n    [ON COMPLETION [NOT] PRESERVE]\n    [RENAME TO new_event_name]\n    [ENABLE | DISABLE | DISABLE ON {REPLICA | SLAVE}]\n    [COMMENT 'string']\n    [DO event_body]"], "Description": ["\n      The ALTER EVENT statement changes\n      one or more of the characteristics of an existing event without\n      the need to drop and recreate it. The syntax for each of the\n      DEFINER, ON SCHEDULE,\n      ON COMPLETION, COMMENT,\n      ENABLE / DISABLE, and\n      DO clauses is exactly the same as\n      when used with CREATE EVENT. (See\n      Section\u00a015.1.13, \u201cCREATE EVENT Statement\u201d.)\n    ", "\n      Any user can alter an event defined on a database for which that\n      user has the EVENT privilege. When\n      a user executes a successful ALTER\n      EVENT statement, that user becomes the definer for the\n      affected event.\n    ", "\nALTER EVENT works only with an\n      existing event:\n    ", "Press CTRL+C to copy mysql> ALTER EVENT no_such_event \n     >     ON SCHEDULE \n     >       EVERY '2:3' DAY_HOUR;\nERROR 1517 (HY000): Unknown event 'no_such_event'", "\n      In each of the following examples, assume that the event named\n      myevent is defined as shown here:\n    ", "Press CTRL+C to copy CREATE EVENT myevent\n    ON SCHEDULE\n      EVERY 6 HOUR\n    COMMENT 'A sample comment.'\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;", "\n      The following statement changes the schedule for\n      myevent from once every six hours starting\n      immediately to once every twelve hours, starting four hours from\n      the time the statement is run:\n    ", "Press CTRL+C to copy ALTER EVENT myevent\n    ON SCHEDULE\n      EVERY 12 HOUR\n    STARTS CURRENT_TIMESTAMP + INTERVAL 4 HOUR;", "\n      It is possible to change multiple characteristics of an event in a\n      single statement. This example changes the SQL statement executed\n      by myevent to one that deletes all records from\n      mytable; it also changes the schedule for the\n      event such that it executes once, one day after this\n      ALTER EVENT statement is run.\n    ", "Press CTRL+C to copy ALTER EVENT myevent\n    ON SCHEDULE\n      AT CURRENT_TIMESTAMP + INTERVAL 1 DAY\n    DO\n      TRUNCATE TABLE myschema.mytable;", "\n      Specify the options in an ALTER\n      EVENT statement only for those characteristics that you\n      want to change; omitted options keep their existing values. This\n      includes any default values for CREATE\n      EVENT such as ENABLE.\n    ", "\n      To disable myevent, use this\n      ALTER EVENT statement:\n    ", "Press CTRL+C to copy ALTER EVENT myevent\n    DISABLE;", "\n      The ON SCHEDULE clause may use expressions\n      involving built-in MySQL functions and user variables to obtain\n      any of the timestamp or\n      interval values which it contains. You\n      cannot use stored routines or loadable functions in such\n      expressions, and you cannot use any table references; however, you\n      can use SELECT FROM DUAL. This is true for both\n      ALTER EVENT and\n      CREATE EVENT statements. References\n      to stored routines, loadable functions, and tables in such cases\n      are specifically not permitted, and fail with an error (see Bug\n      #22830).\n    ", "\n      Although an ALTER EVENT statement\n      that contains another ALTER EVENT\n      statement in its DO clause appears\n      to succeed, when the server attempts to execute the resulting\n      scheduled event, the execution fails with an error.\n    ", "\n      To rename an event, use the ALTER\n      EVENT statement's RENAME TO clause.\n      This statement renames the event myevent to\n      yourevent:\n    ", "Press CTRL+C to copy ALTER EVENT myevent\n    RENAME TO yourevent;", "\n      You can also move an event to a different database using\n      ALTER EVENT ... RENAME TO ... and\n      db_name.event_name\n      notation, as shown here:\n    ", "Press CTRL+C to copy ALTER EVENT olddb.myevent\n    RENAME TO newdb.myevent;", "\n      To execute the previous statement, the user executing it must have\n      the EVENT privilege on both the\n      olddb and newdb databases.\n", "\n\nNote\n\n\n        There is no RENAME EVENT statement.\n\n", "\n      The value DISABLE ON REPLICA is used on a\n      replica instead of ENABLE or\n      DISABLE to indicate an event that was created\n      on the replication source server and replicated to the replica,\n      but that is not executed on the replica. Normally,\n      DISABLE ON REPLICA is set automatically as\n      required; however, there are some circumstances under which you\n      may want or need to change it manually. See\n      Section\u00a019.5.1.16, \u201cReplication of Invoked Features\u201d, for more\n      information.\n    ", "\nDISABLE ON REPLICA replaces DISABLE ON\n      SLAVE, which is deprecated, and subject to removal in a\n      future version of MySQL.\n"], "Examples": ["mysql> ALTER EVENT no_such_event \n     >     ON SCHEDULE \n     >       EVERY '2:3' DAY_HOUR;\nERROR 1517 (HY000): Unknown event 'no_such_event'", "CREATE EVENT myevent\n    ON SCHEDULE\n      EVERY 6 HOUR\n    COMMENT 'A sample comment.'\n    DO\n      UPDATE myschema.mytable SET mycol = mycol + 1;", "ALTER EVENT myevent\n    ON SCHEDULE\n      EVERY 12 HOUR\n    STARTS CURRENT_TIMESTAMP + INTERVAL 4 HOUR;", "ALTER EVENT myevent\n    ON SCHEDULE\n      AT CURRENT_TIMESTAMP + INTERVAL 1 DAY\n    DO\n      TRUNCATE TABLE myschema.mytable;", "ALTER EVENT myevent\n    DISABLE;", "ALTER EVENT myevent\n    RENAME TO yourevent;", "ALTER EVENT olddb.myevent\n    RENAME TO newdb.myevent;"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-server.html"], "Title": ["15.1.30 DROP SERVER Statement"], "Feature": ["DROP SERVER [ IF EXISTS ] server_name"], "Description": ["\n      Drops the server definition for the server named\n      server_name. The\n      corresponding row in the mysql.servers table is\n      deleted. This statement requires the\n      SUPER privilege.\n    ", "\n      Dropping a server for a table does not affect any\n      FEDERATED tables that used this connection\n      information when they were created. See\n      Section\u00a015.1.18, \u201cCREATE SERVER Statement\u201d.\n    ", "\nDROP SERVER causes an implicit commit. See\n      Section\u00a015.3.3, \u201cStatements That Cause an Implicit Commit\u201d.\n    ", "\nDROP SERVER is not written to the binary log,\n      regardless of the logging format that is in use.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-spatial-reference-system.html"], "Title": ["15.1.31 DROP SPATIAL REFERENCE SYSTEM Statement"], "Feature": ["DROP SPATIAL REFERENCE SYSTEM\n    [IF EXISTS]\n    srid\n\nsrid: 32-bit unsigned integer"], "Description": ["\n      This statement removes a\n      spatial reference\n      system (SRS) definition from the data dictionary. It\n      requires the SUPER privilege.\n    ", "\n      Example:\n    ", "Press CTRL+C to copy DROP SPATIAL REFERENCE SYSTEM 4120;", "\n      If no SRS definition with the SRID value exists, an error occurs\n      unless IF EXISTS is specified. In that case, a\n      warning occurs rather than an error.\n    ", "\n      If the SRID value is used by some column in an existing table, an\n      error occurs. For example:\n    ", "Press CTRL+C to copy mysql> DROP SPATIAL REFERENCE SYSTEM 4326;\nERROR 3716 (SR005): Can't modify SRID 4326. There is at\nleast one column depending on it.", "\n      To identify which column or columns use the SRID, use this query:\n    ", "Press CTRL+C to copy SELECT * FROM INFORMATION_SCHEMA.ST_GEOMETRY_COLUMNS WHERE SRS_ID=4326;", "\n      SRID values must be in the range of 32-bit unsigned integers, with\n      these restrictions:\n", "\n\n          SRID 0 is a valid SRID but cannot be used with\n          DROP SPATIAL REFERENCE SYSTEM.\n        \n          If the value is in a reserved SRID range, a warning occurs.\n          Reserved ranges are [0, 32767] (reserved by EPSG),\n          [60,000,000, 69,999,999] (reserved by EPSG), and\n          [2,000,000,000, 2,147,483,647] (reserved by MySQL). EPSG\n          stands for the European Petroleum\n          Survey Group.\n        \n          Users should not drop SRSs with SRIDs in the reserved ranges.\n          If system-installed SRSs are dropped, the SRS definitions may\n          be recreated for MySQL upgrades.\n\n"], "Examples": ["DROP SPATIAL REFERENCE SYSTEM 4120;", "mysql> DROP SPATIAL REFERENCE SYSTEM 4326;\nERROR 3716 (SR005): Can't modify SRID 4326. There is at\nleast one column depending on it.", "SELECT * FROM INFORMATION_SCHEMA.ST_GEOMETRY_COLUMNS WHERE SRS_ID=4326;"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-table.html"], "Title": ["15.1.32 DROP TABLE Statement"], "Feature": ["DROP [TEMPORARY] TABLE [IF EXISTS]\n    tbl_name [, tbl_name] ...\n    [RESTRICT | CASCADE]"], "Description": ["\nDROP TABLE removes one or more\n      tables. You must have the DROP\n      privilege for each table.\n    ", "\nBe careful with this statement! For each\n      table, it removes the table definition and all table data. If the\n      table is partitioned, the statement removes the table definition,\n      all its partitions, all data stored in those partitions, and all\n      partition definitions associated with the dropped table.\n    ", "\n      Dropping a table also drops any triggers for the table.\n    ", "\nDROP TABLE causes an implicit\n      commit, except when used with the TEMPORARY\n      keyword. See Section\u00a015.3.3, \u201cStatements That Cause an Implicit Commit\u201d.\n", "\n\nImportant\n\n\n        When a table is dropped, privileges granted specifically for the\n        table are not automatically dropped. They\n        must be dropped manually. See Section\u00a015.7.1.6, \u201cGRANT Statement\u201d.\n\n", "\n      If any tables named in the argument list do not exist,\n      DROP TABLE behavior depends on\n      whether the IF EXISTS clause is given:\n", "\n\n          Without IF EXISTS, the statement fails with\n          an error indicating which nonexisting tables it was unable to\n          drop, and no changes are made.\n        \n          With IF EXISTS, no error occurs for\n          nonexisting tables. The statement drops all named tables that\n          do exist, and generates a NOTE diagnostic\n          for each nonexistent table. These notes can be displayed with\n          SHOW WARNINGS. See\n          Section\u00a015.7.7.41, \u201cSHOW WARNINGS Statement\u201d.\n\n", "\nIF EXISTS can also be useful for dropping\n      tables in unusual circumstances under which there is an entry in\n      the data dictionary but no table managed by the storage engine.\n      (For example, if an abnormal server exit occurs after removal of\n      the table from the storage engine but before removal of the data\n      dictionary entry.)\n    ", "\n      The TEMPORARY keyword has the following\n      effects:\n", "\n\n          The statement drops only TEMPORARY tables.\n        \n          The statement does not cause an implicit commit.\n        \n          No access rights are checked. A TEMPORARY\n          table is visible only with the session that created it, so no\n          check is necessary.\n\n", "\n      Including the TEMPORARY keyword is a good way\n      to prevent accidentally dropping non-TEMPORARY\n      tables.\n    ", "\n      The RESTRICT and CASCADE\n      keywords do nothing. They are permitted to make porting easier\n      from other database systems.\n    ", "\nDROP TABLE is not supported with\n      all innodb_force_recovery\n      settings. See Section\u00a017.20.3, \u201cForcing InnoDB Recovery\u201d.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-tablespace.html"], "Title": ["15.1.33 DROP TABLESPACE Statement"], "Feature": ["DROP [UNDO] TABLESPACE tablespace_name"], "Description": ["\n      This statement drops a tablespace that was previously created\n      using CREATE TABLESPACE. It is\n      supported by the NDB and\n      InnoDB storage engines.\n    ", "\n      The UNDO keyword must be specified to drop an\n      undo tablespace. Only undo tablespaces created using\n      CREATE UNDO\n      TABLESPACE syntax can be dropped. An undo tablespace\n      must be in an empty state before it can be\n      dropped. For more information, see\n      Section\u00a017.6.3.4, \u201cUndo Tablespaces\u201d.\n    ", "\ntablespace_name is a\n      case-sensitive identifier in MySQL.\n    ", "\n      For an InnoDB general tablespace, all tables\n      must be dropped from the tablespace prior to a DROP\n      TABLESPACE operation. If the tablespace is not empty,\n      DROP TABLESPACE returns an error.\n    ", "\n      An NDB tablespace to be dropped must not\n      contain any data files; in other words, before you can drop an\n      NDB tablespace, you must first drop each of its\n      data files using\n      ALTER TABLESPACE\n      ... DROP DATAFILE.\n", {"Sub-title": "Notes", "Illustration": ["\n\n          A general InnoDB tablespace is not deleted\n          automatically when the last table in the tablespace is\n          dropped. The tablespace must be dropped explicitly using\n          DROP TABLESPACE\n          tablespace_name.\n        \n          A DROP DATABASE operation can\n          drop tables that belong to a general tablespace but it cannot\n          drop the tablespace, even if the operation drops all tables\n          that belong to the tablespace. The tablespace must be dropped\n          explicitly using DROP TABLESPACE\n          tablespace_name.\n        \n          Similar to the system tablespace, truncating or dropping\n          tables stored in a general tablespace creates free space\n          internally in the general tablespace\n          .ibd data file which can\n          only be used for new InnoDB data. Space is\n          not released back to the operating system as it is for\n          file-per-table tablespaces.\n\n"]}, {"Sub-title": "InnoDB Examples", "Illustration": ["\n      This example demonstrates how to drop an InnoDB\n      general tablespace. The general tablespace ts1\n      is created with a single table. Before dropping the tablespace,\n      the table must be dropped.\n    ", "Press CTRL+C to copy mysql> CREATE TABLESPACE `ts1` ADD DATAFILE 'ts1.ibd' Engine=InnoDB;\n\nmysql> CREATE TABLE t1 (c1 INT PRIMARY KEY) TABLESPACE ts1 Engine=InnoDB;\n\nmysql> DROP TABLE t1;\n\nmysql> DROP TABLESPACE ts1;", "\n      This example demonstrates dropping an undo tablespace. An undo\n      tablespace must be in an empty state before it\n      can be dropped. For more information, see\n      Section\u00a017.6.3.4, \u201cUndo Tablespaces\u201d.\n    ", "Press CTRL+C to copy mysql> DROP UNDO TABLESPACE undo_003;"]}, {"Sub-title": "NDB Example", "Illustration": ["\n      This example shows how to drop an NDB\n      tablespace myts having a data file named\n      mydata-1.dat after first creating the\n      tablespace, and assumes the existence of a log file group named\n      mylg (see\n      Section\u00a015.1.16, \u201cCREATE LOGFILE GROUP Statement\u201d).\n    ", "Press CTRL+C to copy mysql> CREATE TABLESPACE myts\n    ->     ADD DATAFILE 'mydata-1.dat'\n    ->     USE LOGFILE GROUP mylg\n    ->     ENGINE=NDB;", "\n      You must remove all data files from the tablespace using\n      ALTER TABLESPACE, as shown here,\n      before it can be dropped:\n    ", "Press CTRL+C to copy mysql> ALTER TABLESPACE myts\n    ->     DROP DATAFILE 'mydata-1.dat';\n\nmysql> DROP TABLESPACE myts;"]}], "Examples": ["mysql> CREATE TABLESPACE `ts1` ADD DATAFILE 'ts1.ibd' Engine=InnoDB;\n\nmysql> CREATE TABLE t1 (c1 INT PRIMARY KEY) TABLESPACE ts1 Engine=InnoDB;\n\nmysql> DROP TABLE t1;\n\nmysql> DROP TABLESPACE ts1;", "mysql> DROP UNDO TABLESPACE undo_003;", "mysql> CREATE TABLESPACE myts\n    ->     ADD DATAFILE 'mydata-1.dat'\n    ->     USE LOGFILE GROUP mylg\n    ->     ENGINE=NDB;", "mysql> ALTER TABLESPACE myts\n    ->     DROP DATAFILE 'mydata-1.dat';\n\nmysql> DROP TABLESPACE myts;"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-trigger.html"], "Title": ["15.1.34 DROP TRIGGER Statement"], "Feature": ["DROP TRIGGER [IF EXISTS] [schema_name.]trigger_name"], "Description": ["\n      This statement drops a trigger. The schema (database) name is\n      optional. If the schema is omitted, the trigger is dropped from\n      the default schema. DROP TRIGGER\n      requires the TRIGGER privilege for\n      the table associated with the trigger.\n    ", "\n      Use IF EXISTS to prevent an error from\n      occurring for a trigger that does not exist. A\n      NOTE is generated for a nonexistent trigger\n      when using IF EXISTS. See\n      Section\u00a015.7.7.41, \u201cSHOW WARNINGS Statement\u201d.\n    ", "\n      Triggers for a table are also dropped if you drop the table.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-view.html"], "Title": ["15.1.35 DROP VIEW Statement"], "Feature": ["DROP VIEW [IF EXISTS]\n    view_name [, view_name] ...\n    [RESTRICT | CASCADE]"], "Description": ["\nDROP VIEW removes one or more\n      views. You must have the DROP\n      privilege for each view.\n    ", "\n      If any views named in the argument list do not exist, the\n      statement fails with an error indicating by name which nonexisting\n      views it was unable to drop, and no changes are made.\n", "\n\nNote\n\n\n        In MySQL 8.3 and earlier,\n        DROP VIEW returns an error if any\n        views named in the argument list do not exist, but also drops\n        all views in the list that do exist. Due to the change in\n        behavior in MySQL 8.4, a partially completed\n        DROP VIEW operation on a MySQL\n        8.3 replication source server fails when\n        replicated on a MySQL 8.4 replica. To avoid this\n        failure scenario, use IF EXISTS syntax in\n        DROP VIEW statements to prevent\n        an error from occurring for views that do not exist. For more\n        information, see Section\u00a015.1.1, \u201cAtomic Data Definition Statement Support\u201d.\n\n", "\n      The IF EXISTS clause prevents an error from\n      occurring for views that don't exist. When this clause is given, a\n      NOTE is generated for each nonexistent view.\n      See Section\u00a015.7.7.41, \u201cSHOW WARNINGS Statement\u201d.\n    ", "\nRESTRICT and CASCADE, if\n      given, are parsed and ignored.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/rename-table.html"], "Title": ["15.1.36 RENAME TABLE Statement"], "Feature": ["RENAME TABLE\n    tbl_name TO new_tbl_name\n    [, tbl_name2 TO new_tbl_name2] ..."], "Description": ["\nRENAME TABLE renames one or more\n      tables. You must have ALTER and\n      DROP privileges for the original\n      table, and CREATE and\n      INSERT privileges for the new\n      table.\n    ", "\n      For example, to rename a table named old_table\n      to new_table, use this statement:\n    ", "Press CTRL+C to copy RENAME TABLE old_table TO new_table;", "\n      That statement is equivalent to the following\n      ALTER TABLE statement:\n    ", "Press CTRL+C to copy ALTER TABLE old_table RENAME new_table;", "\nRENAME TABLE, unlike ALTER\n      TABLE, can rename multiple tables within a single\n      statement:\n    ", "Press CTRL+C to copy RENAME TABLE old_table1 TO new_table1,\n             old_table2 TO new_table2,\n             old_table3 TO new_table3;", "\n      Renaming operations are performed left to right. Thus, to swap two\n      table names, do this (assuming that a table with the intermediary\n      name tmp_table does not already exist):\n    ", "Press CTRL+C to copy RENAME TABLE old_table TO tmp_table,\n             new_table TO old_table,\n             tmp_table TO new_table;", "\n      Metadata locks on tables are acquired in name order, which in some\n      cases can make a difference in operation outcome when multiple\n      transactions execute concurrently. See\n      Section\u00a010.11.4, \u201cMetadata Locking\u201d.\n    ", "\n      You can rename tables locked with a LOCK\n      TABLES statement, provided that they are locked with a\n      WRITE lock or are the product of renaming\n      WRITE-locked tables from earlier steps in a\n      multiple-table rename operation. For example, this is permitted:\n    ", "Press CTRL+C to copy LOCK TABLE old_table1 WRITE;\nRENAME TABLE old_table1 TO new_table1,\n             new_table1 TO new_table2;", "\n      This is not permitted:\n    ", "Press CTRL+C to copy LOCK TABLE old_table1 READ;\nRENAME TABLE old_table1 TO new_table1,\n             new_table1 TO new_table2;", "\n      With the transaction table locking conditions satisfied, the\n      rename operation is done atomically; no other session can access\n      any of the tables while the rename is in progress.\n    ", "\n      If any errors occur during a RENAME TABLE, the\n      statement fails and no changes are made.\n    ", "\n      You can use RENAME TABLE to move a table from\n      one database to another:\n    ", "Press CTRL+C to copy RENAME TABLE current_db.tbl_name TO other_db.tbl_name;", "\n      Using this method to move all tables from one database to a\n      different one in effect renames the database (an operation for\n      which MySQL has no single statement), except that the original\n      database continues to exist, albeit with no tables.\n    ", "\n      Like RENAME TABLE, ALTER TABLE ...\n      RENAME can also be used to move a table to a different\n      database. Regardless of the statement used, if the rename\n      operation would move the table to a database located on a\n      different file system, the success of the outcome is platform\n      specific and depends on the underlying operating system calls used\n      to move table files.\n    ", "\n      If a table has triggers, attempts to rename the table into a\n      different database fail with a Trigger in wrong\n      schema\n      (ER_TRG_IN_WRONG_SCHEMA) error.\n    ", "\n      An unencrypted table can be moved to an encryption-enabled\n      database and vice versa. However, if the\n      table_encryption_privilege_check\n      variable is enabled, the\n      TABLE_ENCRYPTION_ADMIN privilege is\n      required if the table encryption setting differs from the default\n      database encryption.\n    ", "\n      To rename TEMPORARY tables, RENAME\n      TABLE does not work. Use ALTER\n      TABLE instead.\n    ", "\nRENAME TABLE works for views, except that views\n      cannot be renamed into a different database.\n    ", "\n      Any privileges granted specifically for a renamed table or view\n      are not migrated to the new name. They must be changed manually.\n    ", "\nRENAME TABLE tbl_name TO\n      new_tbl_name changes\n      internally generated foreign key constraint names and user-defined\n      foreign key constraint names that begin with the string\n      \u201ctbl_name_ibfk_\u201d to\n      reflect the new table name. InnoDB interprets\n      foreign key constraint names that begin with the string\n      \u201ctbl_name_ibfk_\u201d as\n      internally generated names.\n    ", "\n      Foreign key constraint names that point to the renamed table are\n      automatically updated unless there is a conflict, in which case\n      the statement fails with an error. A conflict occurs if the\n      renamed constraint name already exists. In such cases, you must\n      drop and re-create the foreign keys for them to function properly.\n    ", "\nRENAME TABLE tbl_name TO\n      new_tbl_name changes\n      internally generated and user-defined CHECK\n      constraint names that begin with the string\n      \u201ctbl_name_chk_\u201d to reflect\n      the new table name. MySQL interprets CHECK\n      constraint names that begin with the string\n      \u201ctbl_name_chk_\u201d as\n      internally generated names. Example:\n    ", "Press CTRL+C to copy mysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `i1` int(11) DEFAULT NULL,\n  `i2` int(11) DEFAULT NULL,\n  CONSTRAINT `t1_chk_1` CHECK ((`i1` > 0)),\n  CONSTRAINT `t1_chk_2` CHECK ((`i2` < 0))\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.02 sec)\n\nmysql> RENAME TABLE t1 TO t3;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> SHOW CREATE TABLE t3\\G\n*************************** 1. row ***************************\n       Table: t3\nCreate Table: CREATE TABLE `t3` (\n  `i1` int(11) DEFAULT NULL,\n  `i2` int(11) DEFAULT NULL,\n  CONSTRAINT `t3_chk_1` CHECK ((`i1` > 0)),\n  CONSTRAINT `t3_chk_2` CHECK ((`i2` < 0))\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)"], "Examples": ["RENAME TABLE old_table TO new_table;", "ALTER TABLE old_table RENAME new_table;", "RENAME TABLE old_table1 TO new_table1,\n             old_table2 TO new_table2,\n             old_table3 TO new_table3;", "RENAME TABLE old_table TO tmp_table,\n             new_table TO old_table,\n             tmp_table TO new_table;", "LOCK TABLE old_table1 WRITE;\nRENAME TABLE old_table1 TO new_table1,\n             new_table1 TO new_table2;", "LOCK TABLE old_table1 READ;\nRENAME TABLE old_table1 TO new_table1,\n             new_table1 TO new_table2;", "RENAME TABLE current_db.tbl_name TO other_db.tbl_name;", "mysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `i1` int(11) DEFAULT NULL,\n  `i2` int(11) DEFAULT NULL,\n  CONSTRAINT `t1_chk_1` CHECK ((`i1` > 0)),\n  CONSTRAINT `t1_chk_2` CHECK ((`i2` < 0))\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.02 sec)\n\nmysql> RENAME TABLE t1 TO t3;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> SHOW CREATE TABLE t3\\G\n*************************** 1. row ***************************\n       Table: t3\nCreate Table: CREATE TABLE `t3` (\n  `i1` int(11) DEFAULT NULL,\n  `i2` int(11) DEFAULT NULL,\n  CONSTRAINT `t3_chk_1` CHECK ((`i1` > 0)),\n  CONSTRAINT `t3_chk_2` CHECK ((`i2` < 0))\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/truncate-table.html"], "Title": ["15.1.37 TRUNCATE TABLE Statement"], "Feature": ["TRUNCATE [TABLE] tbl_name"], "Description": ["\nTRUNCATE TABLE empties a table\n      completely. It requires the DROP\n      privilege. Logically, TRUNCATE\n      TABLE is similar to a\n      DELETE statement that deletes all\n      rows, or a sequence of DROP TABLE\n      and CREATE TABLE statements.\n    ", "\n      To achieve high performance, TRUNCATE\n      TABLE bypasses the DML method of deleting data. Thus, it\n      does not cause ON DELETE triggers to fire, it\n      cannot be performed for InnoDB tables with\n      parent-child foreign key relationships, and it cannot be rolled\n      back like a DML operation. However, TRUNCATE\n      TABLE operations on tables that use an atomic\n      DDL-supported storage engine are either fully committed or rolled\n      back if the server halts during their operation. For more\n      information, see Section\u00a015.1.1, \u201cAtomic Data Definition Statement Support\u201d.\n    ", "\n      Although TRUNCATE TABLE is similar\n      to DELETE, it is classified as a\n      DDL statement rather than a DML statement. It differs from\n      DELETE in the following ways:\n", "\n\n          Truncate operations drop and re-create the table, which is\n          much faster than deleting rows one by one, particularly for\n          large tables.\n        \n          Truncate operations cause an implicit commit, and so cannot be\n          rolled back. See Section\u00a015.3.3, \u201cStatements That Cause an Implicit Commit\u201d.\n        \n          Truncation operations cannot be performed if the session holds\n          an active table lock.\n        \nTRUNCATE TABLE fails for an\n          InnoDB table or\n          NDB table if there are any\n          FOREIGN KEY constraints from other tables\n          that reference the table. Foreign key constraints between\n          columns of the same table are permitted.\n        \n          Truncation operations do not return a meaningful value for the\n          number of deleted rows. The usual result is \u201c0 rows\n          affected,\u201d which should be interpreted as \u201cno\n          information.\u201d\n\n          As long as the table definition is valid, the table can be\n          re-created as an empty table with\n          TRUNCATE TABLE, even if the\n          data or index files have become corrupted.\n        \n          Any AUTO_INCREMENT value is reset to its\n          start value. This is true even for MyISAM\n          and InnoDB, which normally do not reuse\n          sequence values.\n        \n          When used with partitioned tables,\n          TRUNCATE TABLE preserves the\n          partitioning; that is, the data and index files are dropped\n          and re-created, while the partition definitions are\n          unaffected.\n        \n          The TRUNCATE TABLE statement\n          does not invoke ON DELETE triggers.\n        \n          Truncating a corrupted InnoDB table is\n          supported.\n\n", "\nTRUNCATE TABLE is treated for\n      purposes of binary logging and replication as DDL rather than DML,\n      and is always logged as a statement.\n    ", "\nTRUNCATE TABLE for a table closes\n      all handlers for the table that were opened with\n      HANDLER OPEN.\n    ", "\nTRUNCATE TABLE can be used with\n      Performance Schema summary tables, but the effect is to reset the\n      summary columns to 0 or NULL, not to remove\n      rows. See Section\u00a029.12.20, \u201cPerformance Schema Summary Tables\u201d.\n    ", "\n      Truncating an InnoDB table that resides in a\n      file-per-table tablespace drops the existing tablespace and\n      creates a new one. If the tablespace was created with an earlier\n      version and resides in an unknown directory,\n      InnoDB creates the new tablespace in the\n      default location and writes the following warning to the error\n      log: The DATA DIRECTORY location must be in a known\n      directory. The DATA DIRECTORY location will be ignored and the\n      file will be put into the default datadir location.\n      Known directories are those defined by the\n      datadir,\n      innodb_data_home_dir, and\n      innodb_directories variables. To\n      have TRUNCATE TABLE create the\n      tablespace in its current location, add the directory to the\n      innodb_directories setting before\n      running TRUNCATE TABLE.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-function.html"], "Title": ["15.1.4 ALTER FUNCTION Statement"], "Feature": ["ALTER FUNCTION func_name [characteristic ...]\n\ncharacteristic: {\n    COMMENT 'string'\n  | LANGUAGE SQL\n  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n}"], "Description": ["\n      This statement can be used to change the characteristics of a\n      stored function. More than one change may be specified in an\n      ALTER FUNCTION statement. However,\n      you cannot change the parameters or body of a stored function\n      using this statement; to make such changes, you must drop and\n      re-create the function using DROP\n      FUNCTION and CREATE\n      FUNCTION.\n    ", "\n      You must have the ALTER ROUTINE\n      privilege for the function. (That privilege is granted\n      automatically to the function creator.) If binary logging is\n      enabled, the ALTER FUNCTION\n      statement might also require the\n      SUPER privilege, as described in\n      Section\u00a027.7, \u201cStored Program Binary Logging\u201d.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-instance.html"], "Title": ["15.1.5 ALTER INSTANCE Statement"], "Feature": ["ALTER INSTANCE instance_action\n\ninstance_action: {\n  | {ENABLE|DISABLE} INNODB REDO_LOG\n  | ROTATE INNODB MASTER KEY\n  | ROTATE BINLOG MASTER KEY\n  | RELOAD TLS\n      [FOR CHANNEL {mysql_main | mysql_admin}]\n      [NO ROLLBACK ON ERROR]\n  | RELOAD KEYRING\n}"], "Description": ["\nALTER INSTANCE defines actions applicable to a\n      MySQL server instance. The statement supports these actions:\n", "\n\nALTER INSTANCE {ENABLE | DISABLE} INNODB\n          REDO_LOG\n\n          This action enables or disables InnoDB redo\n          logging. Redo logging is enabled by default. This feature is\n          intended only for loading data into a new MySQL instance. The\n          statement is not written to the binary log.\n\n\n\nWarning\n\n\nDo not disable redo logging on a production\n            system. While it is permitted to shut down and\n            restart the server while redo logging is disabled, an\n            unexpected server stoppage while redo logging is disabled\n            can cause data loss and instance corruption.\n\n\n\n          An ALTER\n          INSTANCE [ENABLE|DISABLE] INNODB REDO_LOG operation\n          requires an exclusive backup lock, which prevents other\n          ALTER INSTANCE operations from\n          executing concurrently. Other ALTER\n          INSTANCE operations must wait for the lock to be\n          released before executing.\n        \n          For more information, see\n          Disabling Redo Logging.\n        \nALTER INSTANCE ROTATE INNODB MASTER KEY\n\n          This action rotates the master encryption key used for\n          InnoDB tablespace encryption. Key rotation\n          requires the\n          ENCRYPTION_KEY_ADMIN or\n          SUPER privilege. To perform\n          this action, a keyring plugin must be installed and\n          configured. For instructions, see Section\u00a08.4.4, \u201cThe MySQL Keyring\u201d.\n        \nALTER INSTANCE ROTATE INNODB MASTER KEY\n          supports concurrent DML. However, it cannot be run\n          concurrently with\n          CREATE TABLE ...\n          ENCRYPTION or\n          ALTER TABLE ...\n          ENCRYPTION operations, and locks are taken to\n          prevent conflicts that could arise from concurrent execution\n          of these statements. If one of the conflicting statements is\n          running, it must complete before another can proceed.\n        \nALTER INSTANCE ROTATE INNODB MASTER KEY\n          statements are written to the binary log so that they can be\n          executed on replicated servers.\n        \n          For additional ALTER INSTANCE ROTATE INNODB MASTER\n          KEY usage information, see\n          Section\u00a017.13, \u201cInnoDB Data-at-Rest Encryption\u201d.\n        \nALTER INSTANCE ROTATE BINLOG MASTER KEY\n\n          This action rotates the binary log master key used for binary\n          log encryption. Key rotation for the binary log master key\n          requires the\n          BINLOG_ENCRYPTION_ADMIN or\n          SUPER privilege. The statement\n          cannot be used if the\n          binlog_encryption system\n          variable is set to OFF. To perform this\n          action, a keyring plugin must be installed and configured. For\n          instructions, see Section\u00a08.4.4, \u201cThe MySQL Keyring\u201d.\n        \nALTER INSTANCE ROTATE BINLOG MASTER KEY\n          actions are not written to the binary log and are not executed\n          on replicas. Binary log master key rotation can therefore be\n          carried out in replication environments including a mix of\n          MySQL versions. To schedule regular rotation of the binary log\n          master key on all applicable source and replica servers, you\n          can enable the MySQL Event Scheduler on each server and issue\n          the ALTER INSTANCE ROTATE BINLOG MASTER KEY\n          statement using a CREATE EVENT\n          statement. If you rotate the binary log master key because you\n          suspect that the current or any of the previous binary log\n          master keys might have been compromised, issue the statement\n          on every applicable source and replica server, which enables\n          you to verify immediate compliance.\n        \n          For additional ALTER INSTANCE ROTATE BINLOG MASTER\n          KEY usage information, including what to do if the\n          process does not complete correctly or is interrupted by an\n          unexpected server halt, see\n          Section\u00a019.3.2, \u201cEncrypting Binary Log Files and Relay Log Files\u201d.\n        \nALTER INSTANCE RELOAD TLS\n\n          This action reconfigures a TLS context from the current values\n          of the system variables that define the context. It also\n          updates the status variables that reflect the active context\n          values. This action requires the\n          CONNECTION_ADMIN privilege. For\n          additional information about reconfiguring the TLS context,\n          including which system and status variables are\n          context-related, see\n          Server-Side Runtime Configuration and Monitoring for Encrypted\n        Connections.\n        \n          By default, the statement reloads the TLS context for the main\n          connection interface. If the FOR CHANNEL\n          clause is given, the statement reloads the TLS context for the\n          named channel: mysql_main for the main\n          connection interface, mysql_admin for the\n          administrative connection interface. For information about the\n          different interfaces, see\n          Section\u00a07.1.12.1, \u201cConnection Interfaces\u201d. The updated TLS\n          context properties are exposed in the Performance Schema\n          tls_channel_status table. See\n          Section\u00a029.12.22.9, \u201cThe tls_channel_status Table\u201d.\n        \n          Updating the TLS context for the main interface may also\n          affect the administrative interface because unless some\n          nondefault TLS value is configured for that interface, it uses\n          the same TLS context as the main interface.\n\n\n\nNote\n\n\n            When you reload the TLS context, OpenSSL reloads the file\n            containing the CRL (certificate revocation list) as part of\n            the process. If the CRL file is large, the server allocates\n            a large chunk of memory (ten times the file size), which is\n            doubled while the new instance is being loaded and the old\n            one has not yet been released. The process resident memory\n            is not immediately reduced after a large allocation is\n            freed, so if you issue the ALTER INSTANCE RELOAD\n            TLS statement repeatedly with a large CRL file,\n            the process resident memory usage may grow as a result of\n            this.\n\n\n\n          By default, the RELOAD TLS action rolls\n          back with an error and has no effect if the configuration\n          values do not permit creation of the new TLS context. The\n          previous context values continue to be used for new\n          connections. If the optional NO ROLLBACK ON\n          ERROR clause is given and the new context cannot be\n          created, rollback does not occur. Instead, a warning is\n          generated and encryption is disabled for new connections on\n          the interface to which the statement applies.\n        \nALTER INSTANCE RELOAD TLS statements are\n          not written to the binary log (and thus are not replicated).\n          TLS configuration is local and depends on local files not\n          necessarily present on all servers involved.\n        \nALTER INSTANCE RELOAD KEYRING\n\n          If a keyring component is installed, this action tells the\n          component to re-read its configuration file and reinitialize\n          any keyring in-memory data. If you modify the component\n          configuration at runtime, the new configuration does not take\n          effect until you perform this action. Keyring reloading\n          requires the\n          ENCRYPTION_KEY_ADMIN privilege.\n        \n          This action enables reconfiguring only the currently installed\n          keyring component. It does not enable changing which component\n          is installed. For example, if you change the configuration for\n          the installed keyring component, ALTER\n          INSTANCE RELOAD KEYRING causes the new configuration\n          to take effect. On the other hand, if you change the keyring\n          component named in the server manifest file,\n          ALTER INSTANCE RELOAD KEYRING\n          has no effect and the current component remains installed.\n        \nALTER INSTANCE RELOAD KEYRING statements\n          are not written to the binary log (and thus are not\n          replicated).\n\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-logfile-group.html"], "Title": ["15.1.6 ALTER LOGFILE GROUP Statement"], "Feature": ["ALTER LOGFILE GROUP logfile_group\n    ADD UNDOFILE 'file_name'\n    [INITIAL_SIZE [=] size]\n    [WAIT]\n    ENGINE [=] engine_name"], "Description": ["\n      This statement adds an UNDO file named\n      'file_name' to an existing log file\n      group logfile_group. An\n      ALTER LOGFILE GROUP statement has\n      one and only one ADD UNDOFILE clause. No\n      DROP UNDOFILE clause is currently supported.\n", "\n\nNote\n\n\n        All NDB Cluster Disk Data objects share the same namespace. This\n        means that each Disk Data object must be\n        uniquely named (and not merely each Disk Data object of a given\n        type). For example, you cannot have a tablespace and an undo log\n        file with the same name, or an undo log file and a data file\n        with the same name.\n\n", "\n      The optional INITIAL_SIZE parameter sets the\n      UNDO file's initial size in bytes; if not\n      specified, the initial size defaults to 134217728 (128 MB). You\n      may optionally follow size with a\n      one-letter abbreviation for an order of magnitude, similar to\n      those used in my.cnf. Generally, this is one\n      of the letters M (megabytes) or\n      G (gigabytes). (Bug #13116514, Bug #16104705,\n      Bug #62858)\n    ", "\n      On 32-bit systems, the maximum supported value for\n      INITIAL_SIZE is 4294967296 (4 GB). (Bug #29186)\n    ", "\n      The minimum allowed value for INITIAL_SIZE is\n      1048576 (1 MB). (Bug #29574)\n", "\n\nNote\n\n\nWAIT is parsed but otherwise ignored. This\n        keyword currently has no effect, and is intended for future\n        expansion.\n\n", "\n      The ENGINE clause (required) determines the\n      storage engine which is used by this log file group, with\n      engine_name being the name of the\n      storage engine. Currently, the only accepted values for\n      engine_name are\n      \u201cNDBCLUSTER\u201d and\n      \u201cNDB\u201d. The two values\n      are equivalent.\n    ", "\n      Here is an example, which assumes that the log file group\n      lg_3 has already been created using\n      CREATE LOGFILE GROUP (see\n      Section\u00a015.1.16, \u201cCREATE LOGFILE GROUP Statement\u201d):\n    ", "Press CTRL+C to copy ALTER LOGFILE GROUP lg_3\n    ADD UNDOFILE 'undo_10.dat'\n    INITIAL_SIZE=32M\n    ENGINE=NDBCLUSTER;", "\n      When ALTER LOGFILE GROUP is used\n      with ENGINE = NDBCLUSTER (alternatively,\n      ENGINE = NDB), an undo log file is created on\n      each NDB Cluster data node. You can verify that the undo files\n      were created and obtain information about them by querying the\n      Information Schema FILES table. For\n      example:\n    ", "Press CTRL+C to copy mysql> SELECT FILE_NAME, LOGFILE_GROUP_NUMBER, EXTRA\n    -> FROM INFORMATION_SCHEMA.FILES\n    -> WHERE LOGFILE_GROUP_NAME = 'lg_3';\n+-------------+----------------------+----------------+\n| FILE_NAME   | LOGFILE_GROUP_NUMBER | EXTRA          |\n+-------------+----------------------+----------------+\n| newdata.dat |                    0 | CLUSTER_NODE=3 |\n| newdata.dat |                    0 | CLUSTER_NODE=4 |\n| undo_10.dat |                   11 | CLUSTER_NODE=3 |\n| undo_10.dat |                   11 | CLUSTER_NODE=4 |\n+-------------+----------------------+----------------+\n4 rows in set (0.01 sec)", "\n      (See Section\u00a028.3.15, \u201cThe INFORMATION_SCHEMA FILES Table\u201d.)\n    ", "\n      Memory used for UNDO_BUFFER_SIZE comes from the\n      global pool whose size is determined by the value of the\n      SharedGlobalMemory data\n      node configuration parameter. This includes any default value\n      implied for this option by the setting of the\n      InitialLogFileGroup data\n      node configuration parameter.\n    ", "\nALTER LOGFILE GROUP is useful only\n      with Disk Data storage for NDB Cluster. For more information, see\n      Section\u00a025.6.11, \u201cNDB Cluster Disk Data Tables\u201d.\n"], "Examples": ["ALTER LOGFILE GROUP lg_3\n    ADD UNDOFILE 'undo_10.dat'\n    INITIAL_SIZE=32M\n    ENGINE=NDBCLUSTER;", "mysql> SELECT FILE_NAME, LOGFILE_GROUP_NUMBER, EXTRA\n    -> FROM INFORMATION_SCHEMA.FILES\n    -> WHERE LOGFILE_GROUP_NAME = 'lg_3';\n+-------------+----------------------+----------------+\n| FILE_NAME   | LOGFILE_GROUP_NUMBER | EXTRA          |\n+-------------+----------------------+----------------+\n| newdata.dat |                    0 | CLUSTER_NODE=3 |\n| newdata.dat |                    0 | CLUSTER_NODE=4 |\n| undo_10.dat |                   11 | CLUSTER_NODE=3 |\n| undo_10.dat |                   11 | CLUSTER_NODE=4 |\n+-------------+----------------------+----------------+\n4 rows in set (0.01 sec)"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-procedure.html"], "Title": ["15.1.7 ALTER PROCEDURE Statement"], "Feature": ["ALTER PROCEDURE proc_name [characteristic ...]\n\ncharacteristic: {\n    COMMENT 'string'\n  | LANGUAGE SQL\n  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }\n  | SQL SECURITY { DEFINER | INVOKER }\n}"], "Description": ["\n      This statement can be used to change the characteristics of a\n      stored procedure. More than one change may be specified in an\n      ALTER PROCEDURE statement. However,\n      you cannot change the parameters or body of a stored procedure\n      using this statement; to make such changes, you must drop and\n      re-create the procedure using DROP\n      PROCEDURE and CREATE\n      PROCEDURE.\n    ", "\n      You must have the ALTER ROUTINE\n      privilege for the procedure. By default, that privilege is granted\n      automatically to the procedure creator. This behavior can be\n      changed by disabling the\n      automatic_sp_privileges system\n      variable. See Section\u00a027.2.2, \u201cStored Routines and MySQL Privileges\u201d.\n"], "Examples": [], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-server.html"], "Title": ["15.1.8 ALTER SERVER Statement"], "Feature": ["ALTER SERVER  server_name\n    OPTIONS (option [, option] ...)"], "Description": ["\n      Alters the server information for\n      server_name,\n      adjusting any of the options permitted in the\n      CREATE SERVER statement. The\n      corresponding fields in the mysql.servers table\n      are updated accordingly. This statement requires the\n      SUPER privilege.\n    ", "\n      For example, to update the USER option:\n    ", "Press CTRL+C to copy ALTER SERVER s OPTIONS (USER 'sally');", "\nALTER SERVER causes an implicit commit. See\n      Section\u00a015.3.3, \u201cStatements That Cause an Implicit Commit\u201d.\n    ", "\nALTER SERVER is not written to the binary log,\n      regardless of the logging format that is in use.\n"], "Examples": ["ALTER SERVER s OPTIONS (USER 'sally');"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-table.html"], "Title": ["15.1.9 ALTER TABLE Statement"], "Feature": ["ALTER TABLE tbl_name\n    [alter_option [, alter_option] ...]\n    [partition_options]\n\nalter_option: {\n    table_options\n  | ADD [COLUMN] col_name column_definition\n        [FIRST | AFTER col_name]\n  | ADD [COLUMN] (col_name column_definition,...)\n  | ADD {INDEX | KEY} [index_name]\n        [index_type] (key_part,...) [index_option] ...\n  | ADD {FULLTEXT | SPATIAL} [INDEX | KEY] [index_name]\n        (key_part,...) [index_option] ...\n  | ADD [CONSTRAINT [symbol]] PRIMARY KEY\n        [index_type] (key_part,...)\n        [index_option] ...\n  | ADD [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY]\n        [index_name] [index_type] (key_part,...)\n        [index_option] ...\n  | ADD [CONSTRAINT [symbol]] FOREIGN KEY\n        [index_name] (col_name,...)\n        reference_definition\n  | ADD [CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED]\n  | DROP {CHECK | CONSTRAINT} symbol\n  | ALTER {CHECK | CONSTRAINT} symbol [NOT] ENFORCED\n  | ALGORITHM [=] {DEFAULT | INSTANT | INPLACE | COPY}\n  | ALTER [COLUMN] col_name {\n        SET DEFAULT {literal | (expr)}\n      | SET {VISIBLE | INVISIBLE}\n      | DROP DEFAULT\n    }\n  | ALTER INDEX index_name {VISIBLE | INVISIBLE}\n  | CHANGE [COLUMN] old_col_name new_col_name column_definition\n        [FIRST | AFTER col_name]\n  | [DEFAULT] CHARACTER SET [=] charset_name [COLLATE [=] collation_name]\n  | CONVERT TO CHARACTER SET charset_name [COLLATE collation_name]\n  | {DISABLE | ENABLE} KEYS\n  | {DISCARD | IMPORT} TABLESPACE\n  | DROP [COLUMN] col_name\n  | DROP {INDEX | KEY} index_name\n  | DROP PRIMARY KEY\n  | DROP FOREIGN KEY fk_symbol\n  | FORCE\n  | LOCK [=] {DEFAULT | NONE | SHARED | EXCLUSIVE}\n  | MODIFY [COLUMN] col_name column_definition\n        [FIRST | AFTER col_name]\n  | ORDER BY col_name [, col_name] ...\n  | RENAME COLUMN old_col_name TO new_col_name\n  | RENAME {INDEX | KEY} old_index_name TO new_index_name\n  | RENAME [TO | AS] new_tbl_name\n  | {WITHOUT | WITH} VALIDATION\n}\n\npartition_options:\n    partition_option [partition_option] ...\n\npartition_option: {\n    ADD PARTITION (partition_definition)\n  | DROP PARTITION partition_names\n  | DISCARD PARTITION {partition_names | ALL} TABLESPACE\n  | IMPORT PARTITION {partition_names | ALL} TABLESPACE\n  | TRUNCATE PARTITION {partition_names | ALL}\n  | COALESCE PARTITION number\n  | REORGANIZE PARTITION partition_names INTO (partition_definitions)\n  | EXCHANGE PARTITION partition_name WITH TABLE tbl_name [{WITH | WITHOUT} VALIDATION]\n  | ANALYZE PARTITION {partition_names | ALL}\n  | CHECK PARTITION {partition_names | ALL}\n  | OPTIMIZE PARTITION {partition_names | ALL}\n  | REBUILD PARTITION {partition_names | ALL}\n  | REPAIR PARTITION {partition_names | ALL}\n  | REMOVE PARTITIONING\n}\n\nkey_part: {col_name [(length)] | (expr)} [ASC | DESC]\n\nindex_type:\n    USING {BTREE | HASH}\n\nindex_option: {\n    KEY_BLOCK_SIZE [=] value\n  | index_type\n  | WITH PARSER parser_name\n  | COMMENT 'string'\n  | {VISIBLE | INVISIBLE}\n}\n\ntable_options:\n    table_option [[,] table_option] ...\n\ntable_option: {\n    AUTOEXTEND_SIZE [=] value\n  | AUTO_INCREMENT [=] value\n  | AVG_ROW_LENGTH [=] value\n  | [DEFAULT] CHARACTER SET [=] charset_name\n  | CHECKSUM [=] {0 | 1}\n  | [DEFAULT] COLLATE [=] collation_name\n  | COMMENT [=] 'string'\n  | COMPRESSION [=] {'ZLIB' | 'LZ4' | 'NONE'}\n  | CONNECTION [=] 'connect_string'\n  | {DATA | INDEX} DIRECTORY [=] 'absolute path to directory'\n  | DELAY_KEY_WRITE [=] {0 | 1}\n  | ENCRYPTION [=] {'Y' | 'N'}\n  | ENGINE [=] engine_name\n  | ENGINE_ATTRIBUTE [=] 'string'\n  | INSERT_METHOD [=] { NO | FIRST | LAST }\n  | KEY_BLOCK_SIZE [=] value\n  | MAX_ROWS [=] value\n  | MIN_ROWS [=] value\n  | PACK_KEYS [=] {0 | 1 | DEFAULT}\n  | PASSWORD [=] 'string'\n  | ROW_FORMAT [=] {DEFAULT | DYNAMIC | FIXED | COMPRESSED | REDUNDANT | COMPACT}\n  | SECONDARY_ENGINE_ATTRIBUTE [=] 'string'\n  | STATS_AUTO_RECALC [=] {DEFAULT | 0 | 1}\n  | STATS_PERSISTENT [=] {DEFAULT | 0 | 1}\n  | STATS_SAMPLE_PAGES [=] value\n  | TABLESPACE tablespace_name [STORAGE {DISK | MEMORY}]\n  | UNION [=] (tbl_name[,tbl_name]...)\n}\n\npartition_options:\n    (see CREATE TABLE options)", "ADD CONSTRAINT name FOREIGN KEY (....) ..."], "Description": ["\nALTER TABLE changes the structure\n      of a table. For example, you can add or delete columns, create or\n      destroy indexes, change the type of existing columns, or rename\n      columns or the table itself. You can also change characteristics\n      such as the storage engine used for the table or the table\n      comment.\n", "\n\n          To use ALTER TABLE, you need\n          ALTER,\n          CREATE, and\n          INSERT privileges for the\n          table. Renaming a table requires\n          ALTER and\n          DROP on the old table,\n          ALTER,\n          CREATE, and\n          INSERT on the new table.\n        \n          Following the table name, specify the alterations to be made.\n          If none are given, ALTER TABLE\n          does nothing.\n        \n          The syntax for many of the permissible alterations is similar\n          to clauses of the CREATE TABLE\n          statement. column_definition\n          clauses use the same syntax for ADD and\n          CHANGE as for CREATE\n          TABLE. For more information, see\n          Section\u00a015.1.20, \u201cCREATE TABLE Statement\u201d.\n        \n          The word COLUMN is optional and can be\n          omitted, except for RENAME COLUMN (to\n          distinguish a column-renaming operation from the\n          RENAME table-renaming operation).\n        \n          Multiple ADD, ALTER,\n          DROP, and CHANGE clauses\n          are permitted in a single ALTER\n          TABLE statement, separated by commas. This is a\n          MySQL extension to standard SQL, which permits only one of\n          each clause per ALTER TABLE\n          statement. For example, to drop multiple columns in a single\n          statement, do this:\n        Press CTRL+C to copy ALTER TABLE t2 DROP COLUMN c, DROP COLUMN d;\n          If a storage engine does not support an attempted\n          ALTER TABLE operation, a\n          warning may result. Such warnings can be displayed with\n          SHOW WARNINGS. See\n          Section\u00a015.7.7.41, \u201cSHOW WARNINGS Statement\u201d. For information on\n          troubleshooting ALTER TABLE,\n          see Section\u00a0B.3.6.1, \u201cProblems with ALTER TABLE\u201d.\n        \n          For information about generated columns, see\n          Section\u00a015.1.9.2, \u201cALTER TABLE and Generated Columns\u201d.\n        \n          For usage examples, see\n          Section\u00a015.1.9.3, \u201cALTER TABLE Examples\u201d.\n        \nInnoDB supports addition of\n          multi-valued indexes on JSON columns using a\n          key_part specification can take the\n          form (CAST json_path AS\n          type ARRAY). See\n          Multi-Valued Indexes, for detailed\n          information regarding multi-valued index creation and usage\n          of, as well as restrictions and limitations on multi-valued\n          indexes.\n        \n          With the mysql_info() C API\n          function, you can find out how many rows were copied by\n          ALTER TABLE. See\n          mysql_info().\n\n", "\n      There are several additional aspects to the ALTER\n      TABLE statement, described under the following topics in\n      this section:\n", "\nTable OptionsPerformance and Space RequirementsConcurrency ControlAdding and Dropping ColumnsRenaming, Redefining, and Reordering ColumnsPrimary Keys and IndexesForeign Keys and Other ConstraintsChanging the Character SetImporting InnoDB TablesRow Order for MyISAM TablesPartitioning Options\n", {"Sub-title": "Table Options", "Illustration": ["\ntable_options signifies table options\n      of the kind that can be used in the CREATE\n      TABLE statement, such as ENGINE,\n      AUTO_INCREMENT,\n      AVG_ROW_LENGTH, MAX_ROWS,\n      ROW_FORMAT, or TABLESPACE.\n    ", "\n      For descriptions of all table options, see\n      Section\u00a015.1.20, \u201cCREATE TABLE Statement\u201d. However,\n      ALTER TABLE ignores DATA\n      DIRECTORY and INDEX DIRECTORY when\n      given as table options. ALTER TABLE\n      permits them only as partitioning options, and requires that you\n      have the FILE privilege.\n    ", "\n      Use of table options with ALTER\n      TABLE provides a convenient way of altering single table\n      characteristics. For example:\n", "\n\n          If t1 is currently not an\n          InnoDB table, this statement changes its\n          storage engine to InnoDB:\n        Press CTRL+C to copy ALTER TABLE t1 ENGINE = InnoDB;\n\n\n              See Section\u00a017.6.1.5, \u201cConverting Tables from MyISAM to InnoDB\u201d for\n              considerations when switching tables to the\n              InnoDB storage engine.\n            \n              When you specify an ENGINE clause,\n              ALTER TABLE rebuilds the\n              table. This is true even if the table already has the\n              specified storage engine.\n            \n              Running ALTER\n              TABLE tbl_name\n              ENGINE=INNODB on an existing\n              InnoDB table performs a\n              \u201cnull\u201d ALTER\n              TABLE operation, which can be used to defragment\n              an InnoDB table, as described in\n              Section\u00a017.11.4, \u201cDefragmenting a Table\u201d. Running\n              ALTER TABLE\n              tbl_name FORCE on an\n              InnoDB table performs the same\n              function.\n            \nALTER TABLE\n              tbl_name\n              ENGINE=INNODB and\n              ALTER TABLE\n              tbl_name FORCE use\n              online DDL. For\n              more information, see Section\u00a017.12, \u201cInnoDB and Online DDL\u201d.\n            \n              The outcome of attempting to change the storage engine of\n              a table is affected by whether the desired storage engine\n              is available and the setting of the\n              NO_ENGINE_SUBSTITUTION\n              SQL mode, as described in Section\u00a07.1.11, \u201cServer SQL Modes\u201d.\n            \n              To prevent inadvertent loss of data,\n              ALTER TABLE cannot be used\n              to change the storage engine of a table to\n              MERGE or BLACKHOLE.\n\n\n\n          To change the InnoDB table to use\n          compressed row-storage format:\n        Press CTRL+C to copy ALTER TABLE t1 ROW_FORMAT = COMPRESSED;\n          The ENCRYPTION clause enables or disables\n          page-level data encryption for an InnoDB\n          table. A keyring plugin must be installed and configured to\n          enable encryption.\n        \n          If the\n          table_encryption_privilege_check\n          variable is enabled, the\n          TABLE_ENCRYPTION_ADMIN\n          privilege is required to use an ENCRYPTION\n          clause with a setting that differs from the default schema\n          encryption setting.\n        \nENCRYPTION is also supported for tables\n          residing in general tablespaces.\n        \n          For tables that reside in general tablespaces, table and\n          tablespace encryption must match.\n        \n          Altering table encryption by moving a table to a different\n          tablespace or changing the storage engine is not permitted\n          without explicitly specifying an ENCRYPTION\n          clause.\n        \n          Specifying an ENCRYPTION clause with a\n          value other than 'N' or\n          '' is not permitted if the table uses a\n          storage engine that does not support encryption. Attempting to\n          create a table without an ENCRYPTION clause\n          in an encryption-enabled schema using a storage engine that\n          does not support encryption is also not permitted.\n        \n          For more information, see\n          Section\u00a017.13, \u201cInnoDB Data-at-Rest Encryption\u201d.\n        \n          To reset the current auto-increment value:\n        Press CTRL+C to copy ALTER TABLE t1 AUTO_INCREMENT = 13;\n          You cannot reset the counter to a value less than or equal to\n          the value that is currently in use. For both\n          InnoDB and MyISAM, if\n          the value is less than or equal to the maximum value currently\n          in the AUTO_INCREMENT column, the value is\n          reset to the current maximum AUTO_INCREMENT\n          column value plus one.\n        \n          To change the default table character set:\n        Press CTRL+C to copy ALTER TABLE t1 CHARACTER SET = utf8mb4;\n          See also Changing the Character Set.\n        \n          To add (or change) a table comment:\n        Press CTRL+C to copy ALTER TABLE t1 COMMENT = 'New table comment';\n          Use ALTER TABLE with the\n          TABLESPACE option to move\n          InnoDB tables between existing\n          general\n          tablespaces,\n          file-per-table\n          tablespaces, and the\n          system\n          tablespace. See\n          Moving Tables Between Tablespaces Using ALTER TABLE.\n\n\n\nALTER TABLE ... TABLESPACE operations\n              always cause a full table rebuild, even if the\n              TABLESPACE attribute has not changed\n              from its previous value.\n            \nALTER TABLE ... TABLESPACE syntax does\n              not support moving a table from a temporary tablespace to\n              a persistent tablespace.\n            \n              The DATA DIRECTORY clause, which is\n              supported with\n              CREATE TABLE\n              ... TABLESPACE, is not supported with\n              ALTER TABLE ... TABLESPACE, and is\n              ignored if specified.\n            \n              For more information about the capabilities and\n              limitations of the TABLESPACE option,\n              see CREATE TABLE.\n\n\n\n          MySQL NDB Cluster 8.4 supports setting\n          NDB_TABLE options for controlling a\n          table's partition balance (fragment count type),\n          read-from-any-replica capability, full replication, or any\n          combination of these, as part of the table comment for an\n          ALTER TABLE statement in the same manner as\n          for CREATE TABLE, as shown in\n          this example:\n        Press CTRL+C to copy ALTER TABLE t1 COMMENT = \"NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RA_BY_NODE\";\n          It is also possible to set NDB_COMMENT\n          options for columns of NDB tables\n          as part of an ALTER TABLE statement, like\n          this one:\n        Press CTRL+C to copy ALTER TABLE t1 \n  CHANGE COLUMN c1 c1 BLOB \n    COMMENT = 'NDB_COLUMN=BLOB_INLINE_SIZE=4096,MAX_BLOB_PART_SIZE';\n          Bear in mind that ALTER TABLE ... COMMENT\n          ... discards any existing comment for the table. See\n          Setting NDB_TABLE options, for\n          additional information and examples.\n        \nENGINE_ATTRIBUTE and\n          SECONDARY_ENGINE_ATTRIBUTE options are used\n          to specify table, column, and index attributes for primary and\n          secondary storage engines. These options are reserved for\n          future use. Index attributes cannot be altered. An index must\n          be dropped and added back with the desired change, which can\n          be performed in a single ALTER\n          TABLE statement.\n\n", "\n      To verify that the table options were changed as intended, use\n      SHOW CREATE TABLE, or query the\n      Information Schema TABLES table.\n"]}, {"Sub-title": "Performance and Space Requirements", "Illustration": ["\nALTER TABLE operations are\n      processed using one of the following algorithms:\n", "\n\nCOPY: Operations are performed on a copy of\n          the original table, and table data is copied from the original\n          table to the new table row by row. Concurrent DML is not\n          permitted.\n        \nINPLACE: Operations avoid copying table\n          data but may rebuild the table in place. An exclusive metadata\n          lock on the table may be taken briefly during preparation and\n          execution phases of the operation. Typically, concurrent DML\n          is supported.\n        \nINSTANT: Operations only modify metadata in\n          the data dictionary. An exclusive metadata lock on the table\n          may be taken briefly during the execution phase of the\n          operation. Table data is unaffected, making operations\n          instantaneous. Concurrent DML is permitted.\n\n", "\n      For tables using the NDB storage\n      engine, these algorithms work as follows:\n", "\n\nCOPY: NDB creates a copy\n          of the table and alters it; the NDB Cluster handler then\n          copies the data between the old and new versions of the table.\n          Subsequently, NDB deletes the old table and\n          renames the new one.\n        \n          This is sometimes also referred to as a \u201ccopying\u201d\n          or \u201coffline\u201d ALTER TABLE.\n        \nINPLACE: The data nodes make the required\n          changes; the NDB Cluster handler does not copy data or\n          otherwise take part.\n        \n          This is sometimes also referred to as a\n          \u201cnon-copying\u201d or \u201conline\u201d\nALTER TABLE.\n        \nINSTANT: Not supported by\n          NDB.\n\n", "\n      See Section\u00a025.6.12, \u201cOnline Operations with ALTER TABLE in NDB Cluster\u201d, for more\n      information.\n    ", "\n      The ALGORITHM clause is optional. If the\n      ALGORITHM clause is omitted, MySQL uses\n      ALGORITHM=INSTANT for storage engines and\n      ALTER TABLE clauses that support\n      it. Otherwise, ALGORITHM=INPLACE is used. If\n      ALGORITHM=INPLACE is not supported,\n      ALGORITHM=COPY is used.\n", "\n\nNote\n\n\n        After adding a column to a partitioned table using\n        ALGORITHM=INSTANT, it is no longer possible\n        to perform\n        ALTER\n        TABLE ... EXCHANGE PARTITION on the table.\n\n", "\n      Specifying an ALGORITHM clause requires the\n      operation to use the specified algorithm for clauses and storage\n      engines that support it, or fail with an error otherwise.\n      Specifying ALGORITHM=DEFAULT is the same as\n      omitting the ALGORITHM clause.\n    ", "\nALTER TABLE operations that use the\n      COPY algorithm wait for other operations that\n      are modifying the table to complete. After alterations are applied\n      to the table copy, data is copied over, the original table is\n      deleted, and the table copy is renamed to the name of the original\n      table. While the ALTER TABLE\n      operation executes, the original table is readable by other\n      sessions (with the exception noted shortly). Updates and writes to\n      the table started after the ALTER\n      TABLE operation begins are stalled until the new table\n      is ready, then are automatically redirected to the new table. The\n      temporary copy of the table is created in the database directory\n      of the original table unless it is a RENAME TO\n      operation that moves the table to a database that resides in a\n      different directory.\n    ", "\n      The exception referred to earlier is that\n      ALTER TABLE blocks reads (not just\n      writes) at the point where it is ready to clear outdated table\n      structures from the table and table definition caches. At this\n      point, it must acquire an exclusive lock. To do so, it waits for\n      current readers to finish, and blocks new reads and writes.\n    ", "\n      An ALTER TABLE operation that uses\n      the COPY algorithm prevents concurrent DML\n      operations. Concurrent queries are still allowed. That is, a\n      table-copying operation always includes at least the concurrency\n      restrictions of LOCK=SHARED (allow queries but\n      not DML). You can further restrict concurrency for operations that\n      support the LOCK clause by specifying\n      LOCK=EXCLUSIVE, which prevents DML and queries.\n      For more information, see\n      Concurrency Control.\n    ", "\n      To force use of the COPY algorithm for an\n      ALTER TABLE operation that would\n      otherwise not use it, specify ALGORITHM=COPY or\n      enable the old_alter_table system\n      variable. If there is a conflict between the\n      old_alter_table setting and an\n      ALGORITHM clause with a value other than\n      DEFAULT, the ALGORITHM\n      clause takes precedence.\n    ", "\n      For InnoDB tables, an\n      ALTER TABLE operation that uses the\n      COPY algorithm on a table that resides in a\n      shared tablespace\n      can increase the amount of space used by the tablespace. Such\n      operations require as much additional space as the data in the\n      table plus indexes. For a table residing in a shared tablespace,\n      the additional space used during the operation is not released\n      back to the operating system as it is for a table that resides in\n      a file-per-table\n      tablespace.\n    ", "\n      For information about space requirements for online DDL\n      operations, see\n      Section\u00a017.12.3, \u201cOnline DDL Space Requirements\u201d.\n    ", "\nALTER TABLE operations that support\n      the INPLACE algorithm include:\n", "\n\nALTER TABLE operations supported by the\n          InnoDB\nonline DDL feature. See\n          Section\u00a017.12.1, \u201cOnline DDL Operations\u201d.\n        \n          Renaming a table. MySQL renames files that correspond to the\n          table tbl_name without making a\n          copy. (You can also use the RENAME\n          TABLE statement to rename tables. See\n          Section\u00a015.1.36, \u201cRENAME TABLE Statement\u201d.) Privileges granted\n          specifically for the renamed table are not migrated to the new\n          name. They must be changed manually.\n        \n          Operations that modify table metadata only. These operations\n          are immediate because the server does not touch table\n          contents. Metadata-only operations include:\n\n\n\n              Renaming a column. In NDB Cluster, this operation can also\n              be performed online.\n            \n              Changing the default value of a column (except for\n              NDB tables).\n            \n              Modifying the definition of an\n              ENUM or\n              SET column by adding new\n              enumeration or set members to the end\n              of the list of valid member values, as long as the storage\n              size of the data type does not change. For example, adding\n              a member to a SET column\n              that has 8 members changes the required storage per value\n              from 1 byte to 2 bytes; this requires a table copy. Adding\n              members in the middle of the list causes renumbering of\n              existing members, which requires a table copy.\n            \n              Changing the definition of a spatial column to remove the\n              SRID attribute. (Adding or changing an\n              SRID attribute requires a rebuild, and\n              cannot be done in place, because the server must verify\n              that all values have the specified SRID\n              value.)\n            \n              Changing a column character set, when these conditions\n              apply:\n\n\n\n                  The column data type is\n                  CHAR,\n                  VARCHAR, a\n                  TEXT type, or\n                  ENUM.\n                \n                  The character set change is from\n                  utf8mb3 to\n                  utf8mb4, or any character set to\n                  binary.\n                \n                  There is no index on the column.\n\n\n\n              Changing a generated column, when these conditions apply:\n\n\n\n                  For InnoDB tables, statements that\n                  modify generated stored columns but do not change\n                  their type, expression, or nullability.\n                \n                  For non-InnoDB tables, statements\n                  that modify generated stored or virtual columns but do\n                  not change their type, expression, or nullability.\n\n\n\n              An example of such a change is a change to the column\n              comment.\n\n\n\n          Renaming an index.\n        \n          Adding or dropping a secondary index, for\n          InnoDB and\n          NDB tables. See\n          Section\u00a017.12.1, \u201cOnline DDL Operations\u201d.\n        \n          For NDB tables, operations that\n          add and drop indexes on variable-width columns. These\n          operations occur online, without table copying and without\n          blocking concurrent DML actions for most of their duration.\n          See Section\u00a025.6.12, \u201cOnline Operations with ALTER TABLE in NDB Cluster\u201d.\n        \n          Modifying index visibility with an ALTER\n          INDEX operation.\n        \n          Column modifications of tables containing generated columns\n          that depend on columns with a DEFAULT value\n          if the modified columns are not involved in the generated\n          column expressions. For example, changing the\n          NULL property of a separate column can be\n          done in place without a table rebuild.\n\n", "\nALTER TABLE operations that support the\n      INSTANT algorithm include:\n", "\n\n          Adding a column. This feature is referred to as \u201cInstant\n          ADD COLUMN\u201d. Limitations apply. See\n          Section\u00a017.12.1, \u201cOnline DDL Operations\u201d.\n        \n          Dropping a column. This feature is referred to as\n          \u201cInstant DROP COLUMN\u201d.\n          Limitations apply. See\n          Section\u00a017.12.1, \u201cOnline DDL Operations\u201d.\n        \n          Adding or dropping a virtual column.\n        \n          Adding or dropping a column default value.\n        \n          Modifying the definition of an\n          ENUM or\n          SET column. The same\n          restrictions apply as described above for\n          ALGORITHM=INSTANT.\n        \n          Changing the index type.\n        \n          Renaming a table. The same restrictions apply as described\n          above for ALGORITHM=INSTANT.\n\n", "\n      For more information about operations that support\n      ALGORITHM=INSTANT, see\n      Section\u00a017.12.1, \u201cOnline DDL Operations\u201d.\n    ", "\nALTER TABLE upgrades MySQL 5.5\n      temporal columns to 5.6 format for ADD COLUMN,\n      CHANGE COLUMN, MODIFY\n      COLUMN, ADD INDEX, and\n      FORCE operations. This conversion cannot be\n      done using the INPLACE algorithm because the\n      table must be rebuilt, so specifying\n      ALGORITHM=INPLACE in these cases results in an\n      error. Specify ALGORITHM=COPY if necessary.\n    ", "\n      If an ALTER TABLE operation on a multicolumn\n      index used to partition a table by KEY changes\n      the order of the columns, it can only be performed using\n      ALGORITHM=COPY.\n    ", "\n      The WITHOUT VALIDATION and WITH\n      VALIDATION clauses affect whether\n      ALTER TABLE performs an in-place\n      operation for\n      virtual generated\n      column modifications. See\n      Section\u00a015.1.9.2, \u201cALTER TABLE and Generated Columns\u201d.\n    ", "\n      NDB Cluster 8.4 supports online operations using the\n      same ALGORITHM=INPLACE syntax used with the\n      standard MySQL Server. NDB does not allow\n      changing a tablespace online. See\n      Section\u00a025.6.12, \u201cOnline Operations with ALTER TABLE in NDB Cluster\u201d, for more\n      information.\n    ", "\n      When performing a copying ALTER TABLE,\n      NDB checks to ensure that no concurrent writes\n      have been made to the affected table. If it finds that any have\n      been made, NDB rejects the\n      ALTER TABLE statement and raises\n      ER_TABLE_DEF_CHANGED.\n    ", "\nALTER TABLE with DISCARD ... PARTITION\n      ... TABLESPACE or IMPORT ... PARTITION ...\n      TABLESPACE does not create any temporary tables or\n      temporary partition files.\n    ", "\nALTER TABLE with ADD\n      PARTITION, DROP PARTITION,\n      COALESCE PARTITION, REBUILD\n      PARTITION, or REORGANIZE PARTITION\n      does not create temporary tables (except when used with\n      NDB tables); however, these\n      operations can and do create temporary partition files.\n    ", "\nADD or DROP operations for\n      RANGE or LIST partitions are\n      immediate operations or nearly so. ADD or\n      COALESCE operations for HASH\n      or KEY partitions copy data between all\n      partitions, unless LINEAR HASH or\n      LINEAR KEY was used; this is effectively the\n      same as creating a new table, although the ADD\n      or COALESCE operation is performed partition by\n      partition. REORGANIZE operations copy only\n      changed partitions and do not touch unchanged ones.\n    ", "\n      For MyISAM tables, you can speed up index\n      re-creation (the slowest part of the alteration process) by\n      setting the\n      myisam_sort_buffer_size system\n      variable to a high value.\n"]}, {"Sub-title": "Concurrency Control", "Illustration": ["\n      For ALTER TABLE operations that\n      support it, you can use the LOCK clause to\n      control the level of concurrent reads and writes on a table while\n      it is being altered. Specifying a non-default value for this\n      clause enables you to require a certain amount of concurrent\n      access or exclusivity during the alter operation, and halts the\n      operation if the requested degree of locking is not available.\n    ", "\n      Only LOCK = DEFAULT is permitted for operations\n      that use ALGORITHM=INSTANT. The other\n      LOCK clause parameters are not applicable.\n    ", "\n      The parameters for the LOCK clause are:\n", "\n\nLOCK = DEFAULT\n\n          Maximum level of concurrency for the given\n          ALGORITHM clause (if any) and\n          ALTER TABLE operation: Permit concurrent\n          reads and writes if supported. If not, permit concurrent reads\n          if supported. If not, enforce exclusive access.\n        \nLOCK = NONE\n\n          If supported, permit concurrent reads and writes. Otherwise,\n          an error occurs.\n        \nLOCK = SHARED\n\n          If supported, permit concurrent reads but block writes. Writes\n          are blocked even if concurrent writes are supported by the\n          storage engine for the given ALGORITHM\n          clause (if any) and ALTER TABLE operation.\n          If concurrent reads are not supported, an error occurs.\n        \nLOCK = EXCLUSIVE\n\n          Enforce exclusive access. This is done even if concurrent\n          reads/writes are supported by the storage engine for the given\n          ALGORITHM clause (if any) and\n          ALTER TABLE operation.\n\n"]}, {"Sub-title": "Adding and Dropping Columns", "Illustration": ["\n      Use ADD to add new columns to a table, and\n      DROP to remove existing columns. DROP\n      col_name is a MySQL extension\n      to standard SQL.\n    ", "\n      To add a column at a specific position within a table row, use\n      FIRST or AFTER\n      col_name. The default is to\n      add the column last.\n    ", "\n      If a table contains only one column, the column cannot be dropped.\n      If what you intend is to remove the table, use the\n      DROP TABLE statement instead.\n    ", "\n      If columns are dropped from a table, the columns are also removed\n      from any index of which they are a part. If all columns that make\n      up an index are dropped, the index is dropped as well. If you use\n      CHANGE or MODIFY to shorten\n      a column for which an index exists on the column, and the\n      resulting column length is less than the index length, MySQL\n      shortens the index automatically.\n    ", "\n      For ALTER TABLE ... ADD, if the column has an\n      expression default value that uses a nondeterministic function,\n      the statement may produce a warning or error. For further\n      information, see Section\u00a013.6, \u201cData Type Default Values\u201d, and\n      Section\u00a019.1.3.7, \u201cRestrictions on Replication with GTIDs\u201d.\n"]}, {"Sub-title": "Renaming, Redefining, and Reordering Columns", "Illustration": ["\n      The CHANGE, MODIFY,\n      RENAME COLUMN, and ALTER\n      clauses enable the names and definitions of existing columns to be\n      altered. They have these comparative characteristics:\n", "\n\nCHANGE:\n\n\n\n              Can rename a column and change its definition, or both.\n            \n              Has more capability than MODIFY or\n              RENAME COLUMN, but at the expense of\n              convenience for some operations. CHANGE\n              requires naming the column twice if not renaming it, and\n              requires respecifying the column definition if only\n              renaming it.\n            \n              With FIRST or AFTER,\n              can reorder columns.\n\n\n\nMODIFY:\n\n\n\n              Can change a column definition but not its name.\n            \n              More convenient than CHANGE to change a\n              column definition without renaming it.\n            \n              With FIRST or AFTER,\n              can reorder columns.\n\n\n\nRENAME COLUMN:\n\n\n\n              Can change a column name but not its definition.\n            \n              More convenient than CHANGE to rename a\n              column without changing its definition.\n\n\n\nALTER: Used only to change a column default\n          value.\n\n", "\nCHANGE is a MySQL extension to standard SQL.\n      MODIFY and RENAME COLUMN are\n      MySQL extensions for Oracle compatibility.\n    ", "\n      To alter a column to change both its name and definition, use\n      CHANGE, specifying the old and new names and\n      the new definition. For example, to rename an INT NOT\n      NULL column from a to\n      b and change its definition to use the\n      BIGINT data type while retaining the\n      NOT NULL attribute, do this:\n    ", "Press CTRL+C to copy ALTER TABLE t1 CHANGE a b BIGINT NOT NULL;", "\n      To change a column definition but not its name, use\n      CHANGE or MODIFY. With\n      CHANGE, the syntax requires two column names,\n      so you must specify the same name twice to leave the name\n      unchanged. For example, to change the definition of column\n      b, do this:\n    ", "Press CTRL+C to copy ALTER TABLE t1 CHANGE b b INT NOT NULL;", "\nMODIFY is more convenient to change the\n      definition without changing the name because it requires the\n      column name only once:\n    ", "Press CTRL+C to copy ALTER TABLE t1 MODIFY b INT NOT NULL;", "\n      To change a column name but not its definition, use\n      CHANGE or RENAME COLUMN.\n      With CHANGE, the syntax requires a column\n      definition, so to leave the definition unchanged, you must\n      respecify the definition the column currently has. For example, to\n      rename an INT NOT NULL column from\n      b to a, do this:\n    ", "Press CTRL+C to copy ALTER TABLE t1 CHANGE b a INT NOT NULL;", "\nRENAME COLUMN is more convenient to change the\n      name without changing the definition because it requires only the\n      old and new names:\n    ", "Press CTRL+C to copy ALTER TABLE t1 RENAME COLUMN b TO a;", "\n      In general, you cannot rename a column to a name that already\n      exists in the table. However, this is sometimes not the case, such\n      as when you swap names or move them through a cycle. If a table\n      has columns named a, b, and\n      c, these are valid operations:\n    ", "Press CTRL+C to copy -- swap a and b\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO a;\n-- \"rotate\" a, b, c through a cycle\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO c,\n               RENAME COLUMN c TO a;", "\n      For column definition changes using CHANGE or\n      MODIFY, the definition must include the data\n      type and all attributes that should apply to the new column, other\n      than index attributes such as PRIMARY KEY or\n      UNIQUE. Attributes present in the original\n      definition but not specified for the new definition are not\n      carried forward. Suppose that a column col1 is\n      defined as INT UNSIGNED DEFAULT 1 COMMENT 'my\n      column' and you modify the column as follows, intending\n      to change only INT to\n      BIGINT:\n    ", "Press CTRL+C to copy ALTER TABLE t1 MODIFY col1 BIGINT;", "\n      That statement changes the data type from INT\n      to BIGINT, but it also drops the\n      UNSIGNED, DEFAULT, and\n      COMMENT attributes. To retain them, the\n      statement must include them explicitly:\n    ", "Press CTRL+C to copy ALTER TABLE t1 MODIFY col1 BIGINT UNSIGNED DEFAULT 1 COMMENT 'my column';", "\n      For data type changes using CHANGE or\n      MODIFY, MySQL tries to convert existing column\n      values to the new type as well as possible.\n", "\n\nWarning\n\n\n        This conversion may result in alteration of data. For example,\n        if you shorten a string column, values may be truncated. To\n        prevent the operation from succeeding if conversions to the new\n        data type would result in loss of data, enable strict SQL mode\n        before using ALTER TABLE (see\n        Section\u00a07.1.11, \u201cServer SQL Modes\u201d).\n\n", "\n      If you use CHANGE or MODIFY\n      to shorten a column for which an index exists on the column, and\n      the resulting column length is less than the index length, MySQL\n      shortens the index automatically.\n    ", "\n      For columns renamed by CHANGE or\n      RENAME COLUMN, MySQL automatically renames\n      these references to the renamed column:\n", "\n\n          Indexes that refer to the old column, including invisible\n          indexes and disabled MyISAM indexes.\n        \n          Foreign keys that refer to the old column.\n\n", "\n      For columns renamed by CHANGE or\n      RENAME COLUMN, MySQL does not automatically\n      rename these references to the renamed column:\n", "\n\n          Generated column and partition expressions that refer to the\n          renamed column. You must use CHANGE to\n          redefine such expressions in the same\n          ALTER TABLE statement as the\n          one that renames the column.\n        \n          Views and stored programs that refer to the renamed column.\n          You must manually alter the definition of these objects to\n          refer to the new column name.\n\n", "\n      To reorder columns within a table, use FIRST\n      and AFTER in CHANGE or\n      MODIFY operations.\n    ", "\nALTER ... SET DEFAULT or ALTER ...\n      DROP DEFAULT specify a new default value for a column or\n      remove the old default value, respectively. If the old default is\n      removed and the column can be NULL, the new\n      default is NULL. If the column cannot be\n      NULL, MySQL assigns a default value as\n      described in Section\u00a013.6, \u201cData Type Default Values\u201d.\n    ", "\nALTER ... SET VISIBLE and ALTER ...\n      SET INVISIBLE enable column visibility to be changed.\n      See Section\u00a015.1.20.10, \u201cInvisible Columns\u201d.\n"]}, {"Sub-title": "Primary Keys and Indexes", "Illustration": ["\nDROP PRIMARY KEY drops the\n      primary key. If there is\n      no primary key, an error occurs. For information about the\n      performance characteristics of primary keys, especially for\n      InnoDB tables, see\n      Section\u00a010.3.2, \u201cPrimary Key Optimization\u201d.\n    ", "\n      If the sql_require_primary_key\n      system variable is enabled, attempting to drop a primary key\n      produces an error.\n    ", "\n      If you add a UNIQUE INDEX or PRIMARY\n      KEY to a table, MySQL stores it before any nonunique\n      index to permit detection of duplicate keys as early as possible.\n    ", "\nDROP INDEX removes an index. This\n      is a MySQL extension to standard SQL. See\n      Section\u00a015.1.27, \u201cDROP INDEX Statement\u201d. To determine index names, use\n      SHOW INDEX FROM\n      tbl_name.\n    ", "\n      Some storage engines permit you to specify an index type when\n      creating an index. The syntax for the\n      index_type specifier is USING\n      type_name. For details about\n      USING, see Section\u00a015.1.15, \u201cCREATE INDEX Statement\u201d. The\n      preferred position is after the column list. Expect support for\n      use of the option before the column list to be removed in a future\n      MySQL release.\n    ", "\nindex_option values specify additional\n      options for an index. USING is one such option.\n      For details about permissible\n      index_option values, see\n      Section\u00a015.1.15, \u201cCREATE INDEX Statement\u201d.\n    ", "\nRENAME INDEX old_index_name TO\n      new_index_name renames an\n      index. This is a MySQL extension to standard SQL. The content of\n      the table remains unchanged.\n      old_index_name must be the name of an\n      existing index in the table that is not dropped by the same\n      ALTER TABLE statement.\n      new_index_name is the new index name,\n      which cannot duplicate the name of an index in the resulting table\n      after changes have been applied. Neither index name can be\n      PRIMARY.\n    ", "\n      If you use ALTER TABLE on a\n      MyISAM table, all nonunique indexes are created\n      in a separate batch (as for REPAIR\n      TABLE). This should make ALTER\n      TABLE much faster when you have many indexes.\n    ", "\n      For MyISAM tables, key updating can be\n      controlled explicitly. Use ALTER TABLE ... DISABLE\n      KEYS to tell MySQL to stop updating nonunique indexes.\n      Then use ALTER TABLE ... ENABLE KEYS to\n      re-create missing indexes. MyISAM does this\n      with a special algorithm that is much faster than inserting keys\n      one by one, so disabling keys before performing bulk insert\n      operations should give a considerable speedup. Using\n      ALTER TABLE ... DISABLE KEYS requires the\n      INDEX privilege in addition to the\n      privileges mentioned earlier.\n    ", "\n      While the nonunique indexes are disabled, they are ignored for\n      statements such as SELECT and\n      EXPLAIN that otherwise would use\n      them.\n    ", "\n      After an ALTER TABLE statement, it\n      may be necessary to run ANALYZE\n      TABLE to update index cardinality information. See\n      Section\u00a015.7.7.23, \u201cSHOW INDEX Statement\u201d.\n    ", "\n      The ALTER INDEX operation permits an index to\n      be made visible or invisible. An invisible index is not used by\n      the optimizer. Modification of index visibility applies to indexes\n      other than primary keys (either explicit or implicit), and cannot\n      be performed using ALGORITHM=INSTANT. This\n      feature is storage engine neutral (supported for any engine). For\n      more information, see Section\u00a010.3.12, \u201cInvisible Indexes\u201d.\n"]}, {"Sub-title": "Foreign Keys and Other Constraints", "Illustration": ["\n      The FOREIGN KEY and\n      REFERENCES clauses are supported by the\n      InnoDB and NDB storage\n      engines, which implement ADD [CONSTRAINT\n      [symbol]] FOREIGN KEY\n      [index_name] (...) REFERENCES ...\n      (...). See Section\u00a015.1.20.5, \u201cFOREIGN KEY Constraints\u201d.\n      For other storage engines, the clauses are parsed but ignored.\n    ", "\n      For ALTER TABLE, unlike\n      CREATE TABLE, ADD FOREIGN\n      KEY ignores index_name if\n      given and uses an automatically generated foreign key name. As a\n      workaround, include the CONSTRAINT clause to\n      specify the foreign key name:\n    ", "\n\nImportant\n\n\n        MySQL silently ignores inline REFERENCES\n        specifications, where the references are defined as part of the\n        column specification. MySQL accepts only\n        REFERENCES clauses defined as part of a\n        separate FOREIGN KEY specification.\n\n", "\n\nNote\n\n\n        Partitioned InnoDB tables do not support\n        foreign keys. This restriction does not apply to\n        NDB tables, including those explicitly\n        partitioned by [LINEAR] KEY. For more\n        information, see\n        Section\u00a026.6.2, \u201cPartitioning Limitations Relating to Storage Engines\u201d.\n\n", "\n      MySQL Server and NDB Cluster both support the use of\n      ALTER TABLE to drop foreign keys:\n    ", "Press CTRL+C to copy ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol;", "\n      Adding and dropping a foreign key in the same\n      ALTER TABLE statement is supported\n      for ALTER TABLE ...\n      ALGORITHM=INPLACE but not for\n      ALTER TABLE ...\n      ALGORITHM=COPY.\n    ", "\n      The server prohibits changes to foreign key columns that have the\n      potential to cause loss of referential integrity. A workaround is\n      to use ALTER TABLE\n      ... DROP FOREIGN KEY before changing the column\n      definition and ALTER\n      TABLE ... ADD FOREIGN KEY afterward. Examples of\n      prohibited changes include:\n", "\n\n          Changes to the data type of foreign key columns that may be\n          unsafe. For example, changing\n          VARCHAR(20) to\n          VARCHAR(30) is permitted, but\n          changing it to VARCHAR(1024) is\n          not because that alters the number of length bytes required to\n          store individual values.\n        \n          Changing a NULL column to NOT\n          NULL in non-strict mode is prohibited to prevent\n          converting NULL values to default\n          non-NULL values, for which there are no\n          corresponding values in the referenced table. The operation is\n          permitted in strict mode, but an error is returned if any such\n          conversion is required.\n\n", "\nALTER TABLE tbl_name RENAME\n      new_tbl_name changes\n      internally generated foreign key constraint names and user-defined\n      foreign key constraint names that begin with the string\n      \u201ctbl_name_ibfk_\u201d to\n      reflect the new table name. InnoDB interprets\n      foreign key constraint names that begin with the string\n      \u201ctbl_name_ibfk_\u201d as\n      internally generated names.\n    ", "\nALTER TABLE permits\n      CHECK constraints for existing tables to be\n      added, dropped, or altered:\n", "\n\n          Add a new CHECK constraint:\n        Press CTRL+C to copy ALTER TABLE tbl_name\n    ADD [CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED];\n          The meaning of constraint syntax elements is the same as for\n          CREATE TABLE. See\n          Section\u00a015.1.20.6, \u201cCHECK Constraints\u201d.\n        \n          Drop an existing CHECK constraint named\n          symbol:\n        Press CTRL+C to copy ALTER TABLE tbl_name\n    DROP CHECK symbol;\n          Alter whether an existing CHECK constraint\n          named symbol is enforced:\n        Press CTRL+C to copy ALTER TABLE tbl_name\n    ALTER CHECK symbol [NOT] ENFORCED;\n", "\n      The DROP CHECK and ALTER\n      CHECK clauses are MySQL extensions to standard SQL.\n    ", "\nALTER TABLE permits more general\n      (and SQL standard) syntax for dropping and altering existing\n      constraints of any type, where the constraint type is determined\n      from the constraint name:\n", "\n\n          Drop an existing constraint named\n          symbol:\n        Press CTRL+C to copy ALTER TABLE tbl_name\n    DROP CONSTRAINT symbol;\n          If the\n          sql_require_primary_key\n          system variable is enabled, attempting to drop a primary key\n          produces an error.\n        \n          Alter whether an existing constraint named\n          symbol is enforced:\n        Press CTRL+C to copy ALTER TABLE tbl_name\n    ALTER CONSTRAINT symbol [NOT] ENFORCED;\n          Only CHECK constraints can be altered to be\n          unenforced. All other constraint types are always enforced.\n\n", "\n      The SQL standard specifies that all types of constraints (primary\n      key, unique index, foreign key, check) belong to the same\n      namespace. In MySQL, each constraint type has its own namespace\n      per schema. Consequently, names for each type of constraint must\n      be unique per schema, but constraints of different types can have\n      the same name. When multiple constraints have the same name,\n      DROP CONSTRAINT and ADD\n      CONSTRAINT are ambiguous and an error occurs. In such\n      cases, constraint-specific syntax must be used to modify the\n      constraint. For example, use DROP PRIMARY KEY\n      or DROP FOREIGN KEY to drop a primary key or foreign key.\n    ", "\n      If a table alteration causes a violation of an enforced\n      CHECK constraint, an error occurs and the table\n      is not modified. Examples of operations for which an error occurs:\n", "\n\n          Attempts to add the AUTO_INCREMENT\n          attribute to a column that is used in a\n          CHECK constraint.\n        \n          Attempts to add an enforced CHECK\n          constraint or enforce a nonenforced CHECK\n          constraint for which existing rows violate the constraint\n          condition.\n        \n          Attempts to modify, rename, or drop a column that is used in a\n          CHECK constraint, unless that constraint is\n          also dropped in the same statement. Exception: If a\n          CHECK constraint refers only to a single\n          column, dropping the column automatically drops the\n          constraint.\n\n", "\nALTER TABLE tbl_name RENAME\n      new_tbl_name changes\n      internally generated and user-defined CHECK\n      constraint names that begin with the string\n      \u201ctbl_name_chk_\u201d to reflect\n      the new table name. MySQL interprets CHECK\n      constraint names that begin with the string\n      \u201ctbl_name_chk_\u201d as\n      internally generated names.\n"]}, {"Sub-title": "Changing the Character Set", "Illustration": ["\n\n\n      To change the table default character set and all character\n      columns (CHAR,\n      VARCHAR,\n      TEXT) to a new character set, use a\n      statement like this:\n    ", "Press CTRL+C to copy ALTER TABLE tbl_name CONVERT TO CHARACTER SET charset_name;", "\n      The statement also changes the collation of all character columns.\n      If you specify no COLLATE clause to indicate\n      which collation to use, the statement uses default collation for\n      the character set. If this collation is inappropriate for the\n      intended table use (for example, if it would change from a\n      case-sensitive collation to a case-insensitive collation), specify\n      a collation explicitly.\n    ", "\n      For a column that has a data type of\n      VARCHAR or one of the\n      TEXT types, CONVERT TO\n      CHARACTER SET changes the data type as necessary to\n      ensure that the new column is long enough to store as many\n      characters as the original column. For example, a\n      TEXT column has two length bytes,\n      which store the byte-length of values in the column, up to a\n      maximum of 65,535. For a latin1\nTEXT column, each character\n      requires a single byte, so the column can store up to 65,535\n      characters. If the column is converted to\n      utf8mb4, each character might require up to 4\n      bytes, for a maximum possible length of 4 \u00d7 65,535 = 262,140\n      bytes. That length does not fit in a\n      TEXT column's length bytes, so\n      MySQL converts the data type to\n      MEDIUMTEXT, which is the smallest\n      string type for which the length bytes can record a value of\n      262,140. Similarly, a VARCHAR\n      column might be converted to\n      MEDIUMTEXT.\n    ", "\n      To avoid data type changes of the type just described, do not use\n      CONVERT TO CHARACTER SET. Instead, use\n      MODIFY to change individual columns. For\n      example:\n    ", "Press CTRL+C to copy ALTER TABLE t MODIFY latin1_text_col TEXT CHARACTER SET utf8mb4;\nALTER TABLE t MODIFY latin1_varchar_col VARCHAR(M) CHARACTER SET utf8mb4;", "\n      If you specify CONVERT TO CHARACTER SET binary,\n      the CHAR,\n      VARCHAR, and\n      TEXT columns are converted to their\n      corresponding binary string types\n      (BINARY,\n      VARBINARY,\n      BLOB). This means that the columns\n      no longer have a character set and a subsequent CONVERT\n      TO operation does not apply to them.\n    ", "\n      If charset_name is\n      DEFAULT in a CONVERT TO CHARACTER\n      SET operation, the character set named by the\n      character_set_database system\n      variable is used.\n", "\n\nWarning\n\n\n        The CONVERT TO operation converts column\n        values between the original and named character sets. This is\n        not what you want if you have a column in\n        one character set (like latin1) but the\n        stored values actually use some other, incompatible character\n        set (like utf8mb4). In this case, you have to\n        do the following for each such column:\n      Press CTRL+C to copy ALTER TABLE t1 CHANGE c1 c1 BLOB;\nALTER TABLE t1 CHANGE c1 c1 TEXT CHARACTER SET utf8mb4;\n        The reason this works is that there is no conversion when you\n        convert to or from BLOB columns.\n\n", "\n      To change only the default character set for\n      a table, use this statement:\n    ", "Press CTRL+C to copy ALTER TABLE tbl_name DEFAULT CHARACTER SET charset_name;", "\n      The word DEFAULT is optional. The default\n      character set is the character set that is used if you do not\n      specify the character set for columns that you add to a table\n      later (for example, with ALTER TABLE ... ADD\n      column).\n    ", "\n      When the foreign_key_checks\n      system variable is enabled, which is the default setting,\n      character set conversion is not permitted on tables that include a\n      character string column used in a foreign key constraint. The\n      workaround is to disable\n      foreign_key_checks before\n      performing the character set conversion. You must perform the\n      conversion on both tables involved in the foreign key constraint\n      before re-enabling\n      foreign_key_checks. If you\n      re-enable foreign_key_checks\n      after converting only one of the tables, an ON DELETE\n      CASCADE or ON UPDATE CASCADE\n      operation could corrupt data in the referencing table due to\n      implicit conversion that occurs during these operations (Bug\n      #45290, Bug #74816).\n"]}, {"Sub-title": "Importing InnoDB Tables", "Illustration": ["\n      An InnoDB table created in its own\n      file-per-table\n      tablespace can be imported from a backup or from another MySQL\n      server instance using DISCARD TABLEPACE and\n      IMPORT TABLESPACE clauses. See\n      Section\u00a017.6.1.3, \u201cImporting InnoDB Tables\u201d.\n"]}, {"Sub-title": "Row Order for MyISAM Tables", "Illustration": ["\nORDER BY enables you to create the new table\n      with the rows in a specific order. This option is useful primarily\n      when you know that you query the rows in a certain order most of\n      the time. By using this option after major changes to the table,\n      you might be able to get higher performance. In some cases, it\n      might make sorting easier for MySQL if the table is in order by\n      the column that you want to order it by later.\n", "\n\nNote\n\n\n        The table does not remain in the specified order after inserts\n        and deletes.\n\n", "\nORDER BY syntax permits one or more column\n      names to be specified for sorting, each of which optionally can be\n      followed by ASC or DESC to\n      indicate ascending or descending sort order, respectively. The\n      default is ascending order. Only column names are permitted as\n      sort criteria; arbitrary expressions are not permitted. This\n      clause should be given last after any other clauses.\n    ", "\nORDER BY does not make sense for\n      InnoDB tables because InnoDB\n      always orders table rows according to the\n      clustered index.\n    ", "\n      When used on a partitioned table, ALTER TABLE ... ORDER\n      BY orders rows within each partition only.\n"]}, {"Sub-title": "Partitioning Options", "Illustration": ["\npartition_options signifies options\n      that can be used with partitioned tables for repartitioning, to\n      add, drop, discard, import, merge, and split partitions, and to\n      perform partitioning maintenance.\n    ", "\n      It is possible for an ALTER TABLE\n      statement to contain a PARTITION BY or\n      REMOVE PARTITIONING clause in an addition to\n      other alter specifications, but the PARTITION\n      BY or REMOVE PARTITIONING clause must\n      be specified last after any other specifications. The ADD\n      PARTITION, DROP PARTITION,\n      DISCARD PARTITION, IMPORT\n      PARTITION, COALESCE PARTITION,\n      REORGANIZE PARTITION, EXCHANGE\n      PARTITION, ANALYZE PARTITION,\n      CHECK PARTITION, and REPAIR\n      PARTITION options cannot be combined with other alter\n      specifications in a single ALTER TABLE, since\n      the options just listed act on individual partitions.\n    ", "\n      For more information about partition options, see\n      Section\u00a015.1.20, \u201cCREATE TABLE Statement\u201d, and\n      Section\u00a015.1.9.1, \u201cALTER TABLE Partition Operations\u201d. For\n      information about and examples of ALTER TABLE ...\n      EXCHANGE PARTITION statements, see\n      Section\u00a026.3.3, \u201cExchanging Partitions and Subpartitions with Tables\u201d.\n"]}], "Examples": ["ALTER TABLE t2 DROP COLUMN c, DROP COLUMN d;", "ALTER TABLE t1 ENGINE = InnoDB;", "ALTER TABLE t1 ROW_FORMAT = COMPRESSED;", "ALTER TABLE t1 AUTO_INCREMENT = 13;", "ALTER TABLE t1 CHARACTER SET = utf8mb4;", "ALTER TABLE t1 COMMENT = 'New table comment';", "ALTER TABLE t1 COMMENT = \"NDB_TABLE=READ_BACKUP=0,PARTITION_BALANCE=FOR_RA_BY_NODE\";", "ALTER TABLE t1 \n  CHANGE COLUMN c1 c1 BLOB \n    COMMENT = 'NDB_COLUMN=BLOB_INLINE_SIZE=4096,MAX_BLOB_PART_SIZE';", "ALTER TABLE t1 CHANGE a b BIGINT NOT NULL;", "ALTER TABLE t1 CHANGE b b INT NOT NULL;", "ALTER TABLE t1 MODIFY b INT NOT NULL;", "ALTER TABLE t1 CHANGE b a INT NOT NULL;", "ALTER TABLE t1 RENAME COLUMN b TO a;", "-- swap a and b\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO a;\n-- \"rotate\" a, b, c through a cycle\nALTER TABLE t1 RENAME COLUMN a TO b,\n               RENAME COLUMN b TO c,\n               RENAME COLUMN c TO a;", "ALTER TABLE t1 MODIFY col1 BIGINT;", "ALTER TABLE t1 MODIFY col1 BIGINT UNSIGNED DEFAULT 1 COMMENT 'my column';", "ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol;", "ALTER TABLE tbl_name\n    ADD [CONSTRAINT [symbol]] CHECK (expr) [[NOT] ENFORCED];", "ALTER TABLE tbl_name\n    DROP CHECK symbol;", "ALTER TABLE tbl_name\n    ALTER CHECK symbol [NOT] ENFORCED;", "ALTER TABLE tbl_name\n    DROP CONSTRAINT symbol;", "ALTER TABLE tbl_name\n    ALTER CONSTRAINT symbol [NOT] ENFORCED;", "ALTER TABLE tbl_name CONVERT TO CHARACTER SET charset_name;", "ALTER TABLE t MODIFY latin1_text_col TEXT CHARACTER SET utf8mb4;\nALTER TABLE t MODIFY latin1_varchar_col VARCHAR(M) CHARACTER SET utf8mb4;", "ALTER TABLE t1 CHANGE c1 c1 BLOB;\nALTER TABLE t1 CHANGE c1 c1 TEXT CHARACTER SET utf8mb4;", "ALTER TABLE tbl_name DEFAULT CHARACTER SET charset_name;"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-table-examples.html"], "Title": ["15.1.9.3 ALTER TABLE Examples"], "Feature": ["mysql> SHOW CREATE TABLE t3\\G\n*************************** 1. row ***************************\n       Table: t3\nCreate Table: CREATE TABLE `t3` (\n  `c1` int(11) DEFAULT NULL,\n  `c2` int(11) /*!50120 STORAGE MEMORY */ DEFAULT NULL\n) /*!50100 TABLESPACE ts_1 STORAGE DISK */ ENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.02 sec)"], "Description": ["\n        Begin with a table t1 created as shown here:\n      ", "Press CTRL+C to copy CREATE TABLE t1 (a INTEGER, b CHAR(10));", "\n        To rename the table from t1 to\n        t2:\n      ", "Press CTRL+C to copy ALTER TABLE t1 RENAME t2;", "\n        To change column a from\n        INTEGER to TINYINT NOT\n        NULL (leaving the name the same), and to change column\n        b from CHAR(10) to\n        CHAR(20) as well as renaming it from\n        b to c:\n      ", "Press CTRL+C to copy ALTER TABLE t2 MODIFY a TINYINT NOT NULL, CHANGE b c CHAR(20);", "\n        To add a new TIMESTAMP column\n        named d:\n      ", "Press CTRL+C to copy ALTER TABLE t2 ADD d TIMESTAMP;", "\n        To add an index on column d and a\n        UNIQUE index on column a:\n      ", "Press CTRL+C to copy ALTER TABLE t2 ADD INDEX (d), ADD UNIQUE (a);", "\n        To remove column c:\n      ", "Press CTRL+C to copy ALTER TABLE t2 DROP COLUMN c;", "\n        To add a new AUTO_INCREMENT integer column\n        named c:\n      ", "Press CTRL+C to copy ALTER TABLE t2 ADD c INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  ADD PRIMARY KEY (c);", "\n        We indexed c (as a PRIMARY\n        KEY) because AUTO_INCREMENT columns\n        must be indexed, and we declare c as\n        NOT NULL because primary key columns cannot\n        be NULL.\n      ", "\n        For NDB tables, it is also possible\n        to change the storage type used for a table or column. For\n        example, consider an NDB table\n        created as shown here:\n      ", "Press CTRL+C to copy mysql> CREATE TABLE t1 (c1 INT) TABLESPACE ts_1 ENGINE NDB;\nQuery OK, 0 rows affected (1.27 sec)", "\n        To convert this table to disk-based storage, you can use the\n        following ALTER TABLE statement:\n      ", "Press CTRL+C to copy mysql> ALTER TABLE t1 TABLESPACE ts_1 STORAGE DISK;\nQuery OK, 0 rows affected (2.99 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `c1` int(11) DEFAULT NULL\n) /*!50100 TABLESPACE ts_1 STORAGE DISK */\nENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)", "\n        It is not necessary that the tablespace was referenced when the\n        table was originally created; however, the tablespace must be\n        referenced by the ALTER TABLE:\n      ", "Press CTRL+C to copy mysql> CREATE TABLE t2 (c1 INT) ts_1 ENGINE NDB;\nQuery OK, 0 rows affected (1.00 sec)\n\nmysql> ALTER TABLE t2 STORAGE DISK;\nERROR 1005 (HY000): Can't create table 'c.#sql-1750_3' (errno: 140)\nmysql> ALTER TABLE t2 TABLESPACE ts_1 STORAGE DISK;\nQuery OK, 0 rows affected (3.42 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\nmysql> SHOW CREATE TABLE t2\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t2` (\n  `c1` int(11) DEFAULT NULL\n) /*!50100 TABLESPACE ts_1 STORAGE DISK */\nENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)", "\n        To change the storage type of an individual column, you can use\n        ALTER TABLE ... MODIFY [COLUMN]. For example,\n        suppose you create an NDB Cluster Disk Data table with two\n        columns, using this CREATE TABLE\n        statement:\n      ", "Press CTRL+C to copy mysql> CREATE TABLE t3 (c1 INT, c2 INT)\n    ->     TABLESPACE ts_1 STORAGE DISK ENGINE NDB;\nQuery OK, 0 rows affected (1.34 sec)", "\n        To change column c2 from disk-based to\n        in-memory storage, include a STORAGE MEMORY\n        clause in the column definition used by the ALTER\n        TABLE statement, as shown here:\n      ", "Press CTRL+C to copy mysql> ALTER TABLE t3 MODIFY c2 INT STORAGE MEMORY;\nQuery OK, 0 rows affected (3.14 sec)\nRecords: 0  Duplicates: 0  Warnings: 0", "\n        You can make an in-memory column into a disk-based column by\n        using STORAGE DISK in a similar fashion.\n      ", "\n        Column c1 uses disk-based storage, since this\n        is the default for the table (determined by the table-level\n        STORAGE DISK clause in the\n        CREATE TABLE statement). However,\n        column c2 uses in-memory storage, as can be\n        seen here in the output of SHOW CREATE\n        TABLE:\n      ", "\n        When you add an AUTO_INCREMENT column, column\n        values are filled in with sequence numbers automatically. For\n        MyISAM tables, you can set the first sequence\n        number by executing SET\n        INSERT_ID=value before\n        ALTER TABLE or by using the\n        AUTO_INCREMENT=value\n        table option.\n      ", "\n        With MyISAM tables, if you do not change the\n        AUTO_INCREMENT column, the sequence number is\n        not affected. If you drop an AUTO_INCREMENT\n        column and then add another AUTO_INCREMENT\n        column, the numbers are resequenced beginning with 1.\n      ", "\n        When replication is used, adding an\n        AUTO_INCREMENT column to a table might not\n        produce the same ordering of the rows on the replica and the\n        source. This occurs because the order in which the rows are\n        numbered depends on the specific storage engine used for the\n        table and the order in which the rows were inserted. If it is\n        important to have the same order on the source and replica, the\n        rows must be ordered before assigning an\n        AUTO_INCREMENT number. Assuming that you want\n        to add an AUTO_INCREMENT column to the table\n        t1, the following statements produce a new\n        table t2 identical to t1\n        but with an AUTO_INCREMENT column:\n      ", "Press CTRL+C to copy CREATE TABLE t2 (id INT AUTO_INCREMENT PRIMARY KEY)\nSELECT * FROM t1 ORDER BY col1, col2;", "\n        This assumes that the table t1 has columns\n        col1 and col2.\n      ", "\n        This set of statements also produces a new table\n        t2 identical to t1, with\n        the addition of an AUTO_INCREMENT column:\n      ", "Press CTRL+C to copy CREATE TABLE t2 LIKE t1;\nALTER TABLE t2 ADD id INT AUTO_INCREMENT PRIMARY KEY;\nINSERT INTO t2 SELECT * FROM t1 ORDER BY col1, col2;", "\n\nImportant\n\n\n          To guarantee the same ordering on both source and replica,\n          all columns of t1 must\n          be referenced in the ORDER BY clause.\n\n", "\n        Regardless of the method used to create and populate the copy\n        having the AUTO_INCREMENT column, the final\n        step is to drop the original table and then rename the copy:\n      ", "Press CTRL+C to copy DROP TABLE t1;\nALTER TABLE t2 RENAME t1;"], "Examples": ["CREATE TABLE t1 (a INTEGER, b CHAR(10));", "ALTER TABLE t1 RENAME t2;", "ALTER TABLE t2 MODIFY a TINYINT NOT NULL, CHANGE b c CHAR(20);", "ALTER TABLE t2 ADD d TIMESTAMP;", "ALTER TABLE t2 ADD INDEX (d), ADD UNIQUE (a);", "ALTER TABLE t2 DROP COLUMN c;", "ALTER TABLE t2 ADD c INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  ADD PRIMARY KEY (c);", "mysql> CREATE TABLE t1 (c1 INT) TABLESPACE ts_1 ENGINE NDB;\nQuery OK, 0 rows affected (1.27 sec)", "mysql> ALTER TABLE t1 TABLESPACE ts_1 STORAGE DISK;\nQuery OK, 0 rows affected (2.99 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `c1` int(11) DEFAULT NULL\n) /*!50100 TABLESPACE ts_1 STORAGE DISK */\nENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)", "mysql> CREATE TABLE t2 (c1 INT) ts_1 ENGINE NDB;\nQuery OK, 0 rows affected (1.00 sec)\n\nmysql> ALTER TABLE t2 STORAGE DISK;\nERROR 1005 (HY000): Can't create table 'c.#sql-1750_3' (errno: 140)\nmysql> ALTER TABLE t2 TABLESPACE ts_1 STORAGE DISK;\nQuery OK, 0 rows affected (3.42 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\nmysql> SHOW CREATE TABLE t2\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t2` (\n  `c1` int(11) DEFAULT NULL\n) /*!50100 TABLESPACE ts_1 STORAGE DISK */\nENGINE=ndbcluster DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.01 sec)", "mysql> CREATE TABLE t3 (c1 INT, c2 INT)\n    ->     TABLESPACE ts_1 STORAGE DISK ENGINE NDB;\nQuery OK, 0 rows affected (1.34 sec)", "mysql> ALTER TABLE t3 MODIFY c2 INT STORAGE MEMORY;\nQuery OK, 0 rows affected (3.14 sec)\nRecords: 0  Duplicates: 0  Warnings: 0", "CREATE TABLE t2 (id INT AUTO_INCREMENT PRIMARY KEY)\nSELECT * FROM t1 ORDER BY col1, col2;", "CREATE TABLE t2 LIKE t1;\nALTER TABLE t2 ADD id INT AUTO_INCREMENT PRIMARY KEY;\nINSERT INTO t2 SELECT * FROM t1 ORDER BY col1, col2;", "DROP TABLE t1;\nALTER TABLE t2 RENAME t1;"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/subquery-errors.html"], "Title": ["15.2.15.10 Subquery Errors"], "Feature": ["SELECT * FROM t1 WHERE s1 IN (SELECT s2 FROM t2 ORDER BY s1 LIMIT 1)"], "Description": ["\n        There are some errors that apply only to subqueries. This\n        section describes them.\n", "\n\n            Unsupported subquery syntax:\n          Press CTRL+C to copy ERROR 1235 (ER_NOT_SUPPORTED_YET)\nSQLSTATE = 42000\nMessage = \"This version of MySQL doesn't yet support\n'LIMIT & IN/ALL/ANY/SOME subquery'\"\n            This means that MySQL does not support statements like the\n            following:\n          Press CTRL+C to copy SELECT * FROM t1 WHERE s1 IN (SELECT s2 FROM t2 ORDER BY s1 LIMIT 1)\n            Incorrect number of columns from subquery:\n          Press CTRL+C to copy ERROR 1241 (ER_OPERAND_COL)\nSQLSTATE = 21000\nMessage = \"Operand should contain 1 column(s)\"\n            This error occurs in cases like this:\n          Press CTRL+C to copy SELECT (SELECT column1, column2 FROM t2) FROM t1;\n            You may use a subquery that returns multiple columns, if the\n            purpose is row comparison. In other contexts, the subquery\n            must be a scalar operand. See\n            Section\u00a015.2.15.5, \u201cRow Subqueries\u201d.\n          \n            Incorrect number of rows from subquery:\n          Press CTRL+C to copy ERROR 1242 (ER_SUBSELECT_NO_1_ROW)\nSQLSTATE = 21000\nMessage = \"Subquery returns more than 1 row\"\n            This error occurs for statements where the subquery must\n            return at most one row but returns multiple rows. Consider\n            the following example:\n          Press CTRL+C to copy SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);\n            If SELECT column1 FROM t2 returns just\n            one row, the previous query works. If the subquery returns\n            more than one row, error 1242 occurs. In that case, the\n            query should be rewritten as:\n          Press CTRL+C to copy SELECT * FROM t1 WHERE column1 = ANY (SELECT column1 FROM t2);\n            Incorrectly used table in subquery:\n          Press CTRL+C to copy Error 1093 (ER_UPDATE_TABLE_USED)\nSQLSTATE = HY000\nMessage = \"You can't specify target table 'x'\nfor update in FROM clause\"\n            This error occurs in cases such as the following, which\n            attempts to modify a table and select from the same table in\n            the subquery:\n          Press CTRL+C to copy UPDATE t1 SET column2 = (SELECT MAX(column1) FROM t1);\n            You can use a common table expression or derived table to\n            work around this. See\n            Section\u00a015.2.15.12, \u201cRestrictions on Subqueries\u201d.\n\n", "\n        All of the errors described in this section also apply when\n        using TABLE in subqueries.\n      ", "\n        For transactional storage engines, the failure of a subquery\n        causes the entire statement to fail. For nontransactional\n        storage engines, data modifications made before the error was\n        encountered are preserved.\n"], "Examples": ["SELECT (SELECT column1, column2 FROM t2) FROM t1;", "SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);", "SELECT * FROM t1 WHERE column1 = ANY (SELECT column1 FROM t2);", "UPDATE t1 SET column2 = (SELECT MAX(column1) FROM t1);"], "Category": ["Data Definition Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/subquery-restrictions.html"], "Title": ["15.2.15.12 Restrictions on Subqueries"], "Feature": ["(expr_1, ..., expr_n) [NOT] IN table_subquery", "(expr_1, ..., expr_n) op {ALL|ANY|SOME} subquery"], "Description": ["\n\n            In general, you cannot modify a table and select from the\n            same table in a subquery. For example, this limitation\n            applies to statements of the following forms:\n          Press CTRL+C to copy DELETE FROM t WHERE ... (SELECT ... FROM t ...);\nUPDATE t ... WHERE col = (SELECT ... FROM t ...);\n{INSERT|REPLACE} INTO t (SELECT ... FROM t ...);\n            Exception: The preceding prohibition does not apply if for\n            the modified table you are using a derived table and that\n            derived table is materialized rather than merged into the\n            outer query. (See\n            Section\u00a010.2.2.4, \u201cOptimizing Derived Tables, View References, and Common Table Expressions\n          with Merging or Materialization\u201d.) Example:\n          Press CTRL+C to copy UPDATE t ... WHERE col = (SELECT * FROM (SELECT ... FROM t...) AS dt ...);\n            Here the result from the derived table is materialized as a\n            temporary table, so the relevant rows in\n            t have already been selected by the time\n            the update to t takes place.\n          \n            In general, you may be able to influence the optimizer to\n            materialize a derived table by adding a\n            NO_MERGE optimizer hint.\n            See Section\u00a010.9.3, \u201cOptimizer Hints\u201d.\n          \n            Row comparison operations are only partially supported:\n\n\n\n                For expr [NOT] IN\n                subquery,\n                expr can be an\n                n-tuple (specified using row\n                constructor syntax) and the subquery can return rows of\n                n-tuples. The permitted\n                syntax is therefore more specifically expressed as\n                row_constructor\n                [NOT] IN\n                table_subquery\n\n                For expr\nop {ALL|ANY|SOME}\n                subquery,\n                expr must be a scalar value\n                and the subquery must be a column subquery; it cannot\n                return multiple-column rows.\n\n\n\n            In other words, for a subquery that returns rows of\n            n-tuples, this is supported:\n          Press CTRL+C to copy (expr_1, ..., expr_n) [NOT] IN table_subquery\n            But this is not supported:\n          Press CTRL+C to copy (expr_1, ..., expr_n) op {ALL|ANY|SOME} subquery\n            The reason for supporting row comparisons for\n            IN but not for the others is that\n            IN is implemented by rewriting it as a\n            sequence of =\n            comparisons and AND operations.\n            This approach cannot be used for ALL,\n            ANY, or SOME.\n          \n            MySQL does not support LIMIT in\n            subqueries for certain subquery operators:\n          Press CTRL+C to copy mysql> SELECT * FROM t1\n       WHERE s1 IN (SELECT s2 FROM t2 ORDER BY s1 LIMIT 1);\nERROR 1235 (42000): This version of MySQL doesn't yet support\n 'LIMIT & IN/ALL/ANY/SOME subquery'\n            See Section\u00a015.2.15.10, \u201cSubquery Errors\u201d.\n          \n            MySQL permits a subquery to refer to a stored function that\n            has data-modifying side effects such as inserting rows into\n            a table. For example, if f() inserts\n            rows, the following query can modify data:\n          Press CTRL+C to copy SELECT ... WHERE x IN (SELECT f() ...);\n            This behavior is an extension to the SQL standard. In MySQL,\n            it can produce nondeterministic results because\n            f() might be executed a different number\n            of times for different executions of a given query depending\n            on how the optimizer chooses to handle it.\n          \n            For statement-based or mixed-format replication, one\n            implication of this indeterminism is that such a query can\n            produce different results on the source and its replicas.\n\n"], "Examples": ["DELETE FROM t WHERE ... (SELECT ... FROM t ...);\nUPDATE t ... WHERE col = (SELECT ... FROM t ...);\n{INSERT|REPLACE} INTO t (SELECT ... FROM t ...);", "UPDATE t ... WHERE col = (SELECT * FROM (SELECT ... FROM t...) AS dt ...);", "mysql> SELECT * FROM t1\n       WHERE s1 IN (SELECT s2 FROM t2 ORDER BY s1 LIMIT 1);\nERROR 1235 (42000): This version of MySQL doesn't yet support\n 'LIMIT & IN/ALL/ANY/SOME subquery'", "SELECT ... WHERE x IN (SELECT f() ...);"], "Category": ["Data Definition Statements"]}
