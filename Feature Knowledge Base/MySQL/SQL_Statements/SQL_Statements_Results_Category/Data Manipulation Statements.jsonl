{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/call.html"], "Title": ["15.2.1 CALL Statement"], "Feature": ["CALL sp_name([parameter[,...]])\nCALL sp_name[()]"], "Description": ["\n      The CALL statement invokes a stored\n      procedure that was defined previously with\n      CREATE PROCEDURE.\n    ", "\n      Stored procedures that take no arguments can be invoked without\n      parentheses. That is, CALL p() and\n      CALL p are equivalent.\n    ", "\nCALL can pass back values to its\n      caller using parameters that are declared as\n      OUT or INOUT parameters.\n      When the procedure returns, a client program can also obtain the\n      number of rows affected for the final statement executed within\n      the routine: At the SQL level, call the\n      ROW_COUNT() function; from the C\n      API, call the\n      mysql_affected_rows() function.\n    ", "\n      For information about the effect of unhandled conditions on\n      procedure parameters, see\n      Section\u00a015.6.7.8, \u201cCondition Handling and OUT or INOUT Parameters\u201d.\n    ", "\n      To get back a value from a procedure using an\n      OUT or INOUT parameter, pass\n      the parameter by means of a user variable, and then check the\n      value of the variable after the procedure returns. (If you are\n      calling the procedure from within another stored procedure or\n      function, you can also pass a routine parameter or local routine\n      variable as an IN or INOUT\n      parameter.) For an INOUT parameter, initialize\n      its value before passing it to the procedure. The following\n      procedure has an OUT parameter that the\n      procedure sets to the current server version, and an\n      INOUT value that the procedure increments by\n      one from its current value:\n    ", "Press CTRL+C to copy DELIMITER //\n\nCREATE PROCEDURE p (OUT ver_param VARCHAR(25), INOUT incr_param INT)\nBEGIN\n  # Set value of OUT parameter\n  SELECT VERSION() INTO ver_param;\n  # Increment value of INOUT parameter\n  SET incr_param = incr_param + 1;\nEND //\n\nDELIMITER ;", "\n      Before calling the procedure, initialize the variable to be passed\n      as the INOUT parameter. After calling the\n      procedure, you can see that the values of the two variables are\n      set or modified:\n    ", "Press CTRL+C to copy mysql> SET @increment = 10;\nmysql> CALL p(@version, @increment);\nmysql> SELECT @version, @increment;\n+----------+------------+\n| @version | @increment |\n+----------+------------+\n| 8.4.0   |         11 |\n+----------+------------+", "\n      In prepared CALL statements used\n      with PREPARE and\n      EXECUTE, placeholders can be used\n      for IN parameters, OUT, and\n      INOUT parameters. These types of parameters can\n      be used as follows:\n    ", "Press CTRL+C to copy mysql> SET @increment = 10;\nmysql> PREPARE s FROM 'CALL p(?, ?)';\nmysql> EXECUTE s USING @version, @increment;\nmysql> SELECT @version, @increment;\n+----------+------------+\n| @version | @increment |\n+----------+------------+\n| 8.4.0   |         11 |\n+----------+------------+", "\n      To write C programs that use the\n      CALL SQL statement to execute\n      stored procedures that produce result sets, the\n      CLIENT_MULTI_RESULTS flag must be enabled. This\n      is because each CALL returns a\n      result to indicate the call status, in addition to any result sets\n      that might be returned by statements executed within the\n      procedure. CLIENT_MULTI_RESULTS must also be\n      enabled if CALL is used to execute\n      any stored procedure that contains prepared statements. It cannot\n      be determined when such a procedure is loaded whether those\n      statements produce result sets, so it is necessary to assume that\n      they do so.\n    ", "\nCLIENT_MULTI_RESULTS can be enabled when you\n      call mysql_real_connect(), either\n      explicitly by passing the CLIENT_MULTI_RESULTS\n      flag itself, or implicitly by passing\n      CLIENT_MULTI_STATEMENTS (which also enables\n      CLIENT_MULTI_RESULTS).\n      CLIENT_MULTI_RESULTS is enabled by default.\n    ", "\n      To process the result of a CALL\n      statement executed using\n      mysql_query() or\n      mysql_real_query(), use a loop\n      that calls mysql_next_result() to\n      determine whether there are more results. For an example, see\n      Multiple Statement Execution Support.\n    ", "\n      C programs can use the prepared-statement interface to execute\n      CALL statements and access\n      OUT and INOUT parameters.\n      This is done by processing the result of a\n      CALL statement using a loop that\n      calls mysql_stmt_next_result() to\n      determine whether there are more results. For an example, see\n      Prepared CALL Statement Support. Languages that\n      provide a MySQL interface can use prepared\n      CALL statements to directly\n      retrieve OUT and INOUT\n      procedure parameters.\n    ", "\n      Metadata changes to objects referred to by stored programs are\n      detected and cause automatic reparsing of the affected statements\n      when the program is next executed. For more information, see\n      Section\u00a010.10.3, \u201cCaching of Prepared Statements and Stored Programs\u201d.\n"], "Examples": ["DELIMITER //\n\nCREATE PROCEDURE p (OUT ver_param VARCHAR(25), INOUT incr_param INT)\nBEGIN\n  # Set value of OUT parameter\n  SELECT VERSION() INTO ver_param;\n  # Increment value of INOUT parameter\n  SET incr_param = incr_param + 1;\nEND //\n\nDELIMITER ;", "mysql> SET @increment = 10;\nmysql> CALL p(@version, @increment);\nmysql> SELECT @version, @increment;\n+----------+------------+\n| @version | @increment |\n+----------+------------+\n| 8.4.0   |         11 |\n+----------+------------+", "mysql> SET @increment = 10;\nmysql> PREPARE s FROM 'CALL p(?, ?)';\nmysql> EXECUTE s USING @version, @increment;\nmysql> SELECT @version, @increment;\n+----------+------------+\n| @version | @increment |\n+----------+------------+\n| 8.4.0   |         11 |\n+----------+------------+"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/load-xml.html"], "Title": ["15.2.10 LOAD XML Statement"], "Feature": ["LOAD XML\n    [LOW_PRIORITY | CONCURRENT] [LOCAL]\n    INFILE 'file_name'\n    [REPLACE | IGNORE]\n    INTO TABLE [db_name.]tbl_name\n    [CHARACTER SET charset_name]\n    [ROWS IDENTIFIED BY '<tagname>']\n    [IGNORE number {LINES | ROWS}]\n    [(field_name_or_user_var\n        [, field_name_or_user_var] ...)]\n    [SET col_name={expr | DEFAULT}\n        [, col_name={expr | DEFAULT}] ...]"], "Description": ["\n      The LOAD XML statement reads data\n      from an XML file into a table. The\n      file_name must be given as a literal\n      string. The tagname in the optional\n      ROWS IDENTIFIED BY clause must also be given as\n      a literal string, and must be surrounded by angle brackets\n      (< and >).\n    ", "\nLOAD XML acts as the complement of\n      running the mysql client in XML output mode\n      (that is, starting the client with the\n      --xml option). To write data from a\n      table to an XML file, you can invoke the mysql\n      client with the --xml and\n      -e options from\n      the system shell, as shown here:\n    ", "\n      To read the file back into a table, use LOAD\n      XML. By default, the <row>\n      element is considered to be the equivalent of a database table\n      row; this can be changed using the ROWS IDENTIFIED\n      BY clause.\n    ", "\n      This statement supports three different XML formats:\n", "\n\n          Column names as attributes and column values as attribute\n          values:\n        Press CTRL+C to copy <row column1=\"value1\" column2=\"value2\" .../>\n          Column names as tags and column values as the content of these\n          tags:\n        Press CTRL+C to copy <row>\n  <column1>value1</column1>\n  <column2>value2</column2>\n</row>\n          Column names are the name attributes of\n          <field> tags, and values are the\n          contents of these tags:\n        Press CTRL+C to copy <row>\n  <field name='column1'>value1</field>\n  <field name='column2'>value2</field>\n</row>\n          This is the format used by other MySQL tools, such as\n          mysqldump.\n\n", "\n      All three formats can be used in the same XML file; the import\n      routine automatically detects the format for each row and\n      interprets it correctly. Tags are matched based on the tag or\n      attribute name and the column name.\n    ", "\n      The following clauses work essentially the same way for\n      LOAD XML as they do for\n      LOAD DATA:\n", "\n\nLOW_PRIORITY or\n          CONCURRENT\n\nLOCAL\n\nREPLACE or IGNORE\n\nCHARACTER SET\n\nSET\n\n", "\n      See Section\u00a015.2.9, \u201cLOAD DATA Statement\u201d, for more information about these\n      clauses.\n    ", "\n(field_name_or_user_var,\n      ...) is a list of one or more comma-separated XML fields\n      or user variables. The name of a user variable used for this\n      purpose must match the name of a field from the XML file, prefixed\n      with @. You can use field names to select only\n      desired fields. User variables can be employed to store the\n      corresponding field values for subsequent re-use.\n    ", "\n      The IGNORE number\n      LINES or IGNORE\n      number ROWS clause causes the\n      first number rows in the XML file to be\n      skipped. It is analogous to the LOAD\n      DATA statement's IGNORE ... LINES\n      clause.\n    ", "\n      Suppose that we have a table named person,\n      created as shown here:\n    ", "Press CTRL+C to copy USE test;\n\nCREATE TABLE person (\n    person_id INT NOT NULL PRIMARY KEY,\n    fname VARCHAR(40) NULL,\n    lname VARCHAR(40) NULL,\n    created TIMESTAMP\n);", "\n      Suppose further that this table is initially empty.\n    ", "\n      Now suppose that we have a simple XML file\n      person.xml, whose contents are as shown here:\n    ", "\n      Each of the permissible XML formats discussed previously is\n      represented in this example file.\n    ", "\n      To import the data in person.xml into the\n      person table, you can use this statement:\n    ", "Press CTRL+C to copy mysql> LOAD XML LOCAL INFILE 'person.xml'\n    ->   INTO TABLE person\n    ->   ROWS IDENTIFIED BY '<person>';\n\nQuery OK, 8 rows affected (0.00 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0", "\n      Here, we assume that person.xml is located in\n      the MySQL data directory. If the file cannot be found, the\n      following error results:\n    ", "\n      The ROWS IDENTIFIED BY '<person>' clause\n      means that each <person> element in the\n      XML file is considered equivalent to a row in the table into which\n      the data is to be imported. In this case, this is the\n      person table in the test\n      database.\n    ", "\n      As can be seen by the response from the server, 8 rows were\n      imported into the test.person table. This can\n      be verified by a simple SELECT\n      statement:\n    ", "Press CTRL+C to copy mysql> SELECT * FROM person;\n+-----------+--------+------------+---------------------+\n| person_id | fname  | lname      | created             |\n+-----------+--------+------------+---------------------+\n|         1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|         2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|         3 | Likame | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|         4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|         5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|         6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|         7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|         8 | Sreraf | Encmelt    | 2007-07-13 16:18:47 |\n+-----------+--------+------------+---------------------+\n8 rows in set (0.00 sec)", "\n      This shows, as stated earlier in this section, that any or all of\n      the 3 permitted XML formats may appear in a single file and be\n      read using LOAD XML.\n    ", "\n      The inverse of the import operation just shown\u2014that is,\n      dumping MySQL table data into an XML file\u2014can be\n      accomplished using the mysql client from the\n      system shell, as shown here:\n    ", "\n\nNote\n\n\n        The --xml option causes the\n        mysql client to use XML formatting for its\n        output; the -e\n        option causes the client to execute the SQL statement\n        immediately following the option. See Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n\n", "\n      You can verify that the dump is valid by creating a copy of the\n      person table and importing the dump file into\n      the new table, like this:\n    ", "Press CTRL+C to copy mysql> USE test;\nmysql> CREATE TABLE person2 LIKE person;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> LOAD XML LOCAL INFILE 'person-dump.xml'\n    ->   INTO TABLE person2;\nQuery OK, 8 rows affected (0.01 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM person2;\n+-----------+--------+------------+---------------------+\n| person_id | fname  | lname      | created             |\n+-----------+--------+------------+---------------------+\n|         1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|         2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|         3 | Likema | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|         4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|         5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|         6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|         7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|         8 | Sreraf | Encmelt    | 2007-07-13 16:18:47 |\n+-----------+--------+------------+---------------------+\n8 rows in set (0.00 sec)", "\n      There is no requirement that every field in the XML file be\n      matched with a column in the corresponding table. Fields which\n      have no corresponding columns are skipped. You can see this by\n      first emptying the person2 table and dropping\n      the created column, then using the same\n      LOAD XML statement we just employed\n      previously, like this:\n    ", "Press CTRL+C to copy mysql> TRUNCATE person2;\nQuery OK, 8 rows affected (0.26 sec)\n\nmysql> ALTER TABLE person2 DROP COLUMN created;\nQuery OK, 0 rows affected (0.52 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE person2\\G\n*************************** 1. row ***************************\n       Table: person2\nCreate Table: CREATE TABLE `person2` (\n  `person_id` int NOT NULL,\n  `fname` varchar(40) DEFAULT NULL,\n  `lname` varchar(40) DEFAULT NULL,\n  PRIMARY KEY (`person_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)\n\nmysql> LOAD XML LOCAL INFILE 'person-dump.xml'\n    ->   INTO TABLE person2;\nQuery OK, 8 rows affected (0.01 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM person2;\n+-----------+--------+------------+\n| person_id | fname  | lname      |\n+-----------+--------+------------+\n|         1 | Kapek  | Sainnouine |\n|         2 | Sajon  | Rondela    |\n|         3 | Likema | \u00d6rrtmons   |\n|         4 | Slar   | Manlanth   |\n|         5 | Stoma  | Nilu       |\n|         6 | Nirtam | Skl\u00f6d      |\n|         7 | Sungam | Dulb\u00e5d     |\n|         8 | Sreraf | Encmelt    |\n+-----------+--------+------------+\n8 rows in set (0.00 sec)", "\n      The order in which the fields are given within each row of the XML\n      file does not affect the operation of LOAD\n      XML; the field order can vary from row to row, and is\n      not required to be in the same order as the corresponding columns\n      in the table.\n    ", "\n      As mentioned previously, you can use a\n      (field_name_or_user_var,\n      ...) list of one or more XML fields (to select desired\n      fields only) or user variables (to store the corresponding field\n      values for later use). User variables can be especially useful\n      when you want to insert data from an XML file into table columns\n      whose names do not match those of the XML fields. To see how this\n      works, we first create a table named individual\n      whose structure matches that of the person\n      table, but whose columns are named differently:\n    ", "Press CTRL+C to copy mysql> CREATE TABLE individual (\n    ->     individual_id INT NOT NULL PRIMARY KEY,\n    ->     name1 VARCHAR(40) NULL,\n    ->     name2 VARCHAR(40) NULL,\n    ->     made TIMESTAMP\n    -> );\nQuery OK, 0 rows affected (0.42 sec)", "\n      In this case, you cannot simply load the XML file directly into\n      the table, because the field and column names do not match:\n    ", "Press CTRL+C to copy mysql> LOAD XML INFILE '../bin/person-dump.xml' INTO TABLE test.individual;\nERROR 1263 (22004): Column set to default value; NULL supplied to NOT NULL column 'individual_id' at row 1", "\n      This happens because the MySQL server looks for field names\n      matching the column names of the target table. You can work around\n      this problem by selecting the field values into user variables,\n      then setting the target table's columns equal to the values\n      of those variables using SET. You can perform\n      both of these operations in a single statement, as shown here:\n    ", "Press CTRL+C to copy mysql> LOAD XML INFILE '../bin/person-dump.xml'\n    ->     INTO TABLE test.individual (@person_id, @fname, @lname, @created)\n    ->     SET individual_id=@person_id, name1=@fname, name2=@lname, made=@created;\nQuery OK, 8 rows affected (0.05 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM individual;\n+---------------+--------+------------+---------------------+\n| individual_id | name1  | name2      | made                |\n+---------------+--------+------------+---------------------+\n|             1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|             2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|             3 | Likema | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|             4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|             5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|             6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|             7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|             8 | Srraf  | Encmelt    | 2007-07-13 16:18:47 |\n+---------------+--------+------------+---------------------+\n8 rows in set (0.00 sec)", "\n      The names of the user variables must match\n      those of the corresponding fields from the XML file, with the\n      addition of the required @ prefix to indicate\n      that they are variables. The user variables need not be listed or\n      assigned in the same order as the corresponding fields.\n    ", "\n      Using a ROWS IDENTIFIED BY\n      '<tagname>' clause, it\n      is possible to import data from the same XML file into database\n      tables with different definitions. For this example, suppose that\n      you have a file named address.xml which\n      contains the following XML:\n    ", "\n      You can again use the test.person table as\n      defined previously in this section, after clearing all the\n      existing records from the table and then showing its structure as\n      shown here:\n    ", "Press CTRL+C to copy mysql< TRUNCATE person;\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql< SHOW CREATE TABLE person\\G\n*************************** 1. row ***************************\n       Table: person\nCreate Table: CREATE TABLE `person` (\n  `person_id` int(11) NOT NULL,\n  `fname` varchar(40) DEFAULT NULL,\n  `lname` varchar(40) DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`person_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)", "\n      Now create an address table in the\n      test database using the following\n      CREATE TABLE statement:\n    ", "Press CTRL+C to copy CREATE TABLE address (\n    address_id INT NOT NULL PRIMARY KEY,\n    person_id INT NULL,\n    street VARCHAR(40) NULL,\n    zip INT NULL,\n    city VARCHAR(40) NULL,\n    created TIMESTAMP\n);", "\n      To import the data from the XML file into the\n      person table, execute the following\n      LOAD XML statement, which specifies\n      that rows are to be specified by the\n      <person> element, as shown here;\n    ", "Press CTRL+C to copy mysql> LOAD XML LOCAL INFILE 'address.xml'\n    ->   INTO TABLE person\n    ->   ROWS IDENTIFIED BY '<person>';\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Deleted: 0  Skipped: 0  Warnings: 0", "\n      You can verify that the records were imported using a\n      SELECT statement:\n    ", "Press CTRL+C to copy mysql> SELECT * FROM person;\n+-----------+--------+-------+---------------------+\n| person_id | fname  | lname | created             |\n+-----------+--------+-------+---------------------+\n|         1 | Robert | Jones | 2007-07-24 17:37:06 |\n|         2 | Mary   | Smith | 2007-07-24 17:37:06 |\n+-----------+--------+-------+---------------------+\n2 rows in set (0.00 sec)", "\n      Since the <address> elements in the XML\n      file have no corresponding columns in the\n      person table, they are skipped.\n    ", "\n      To import the data from the <address>\n      elements into the address table, use the\n      LOAD XML statement shown here:\n    ", "Press CTRL+C to copy mysql> LOAD XML LOCAL INFILE 'address.xml'\n    ->   INTO TABLE address\n    ->   ROWS IDENTIFIED BY '<address>';\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Deleted: 0  Skipped: 0  Warnings: 0", "\n      You can see that the data was imported using a\n      SELECT statement such as this one:\n    ", "Press CTRL+C to copy mysql> SELECT * FROM address;\n+------------+-----------+-----------------+-------+--------------+---------------------+\n| address_id | person_id | street          | zip   | city         | created             |\n+------------+-----------+-----------------+-------+--------------+---------------------+\n|          1 |         1 | Mill Creek Road | 45365 | Sidney       | 2007-07-24 17:37:37 |\n|          2 |         1 | Main Street     | 28681 | Taylorsville | 2007-07-24 17:37:37 |\n|          3 |         2 | River Road      | 80239 | Denver       | 2007-07-24 17:37:37 |\n+------------+-----------+-----------------+-------+--------------+---------------------+\n3 rows in set (0.00 sec)", "\n      The data from the <address> element that\n      is enclosed in XML comments is not imported. However, since there\n      is a person_id column in the\n      address table, the value of the\n      person_id attribute from the parent\n      <person> element for each\n      <address> is\n      imported into the address table.\n    ", "Security Considerations.\u00a0\n        As with the LOAD DATA statement,\n        the transfer of the XML file from the client host to the server\n        host is initiated by the MySQL server. In theory, a patched\n        server could be built that would tell the client program to\n        transfer a file of the server's choosing rather than the file\n        named by the client in the LOAD\n        XML statement. Such a server could access any file on\n        the client host to which the client user has read access.\n      ", "\n      In a Web environment, clients usually connect to MySQL from a Web\n      server. A user that can run any command against the MySQL server\n      can use LOAD XML\n      LOCAL to read any files to which the Web server process\n      has read access. In this environment, the client with respect to\n      the MySQL server is actually the Web server, not the remote\n      program being run by the user who connects to the Web server.\n    ", "\n      You can disable loading of XML files from clients by starting the\n      server with --local-infile=0 or\n      --local-infile=OFF. This option\n      can also be used when starting the mysql client\n      to disable LOAD XML for the\n      duration of the client session.\n    ", "\n      To prevent a client from loading XML files from the server, do not\n      grant the FILE privilege to the\n      corresponding MySQL user account, or revoke this privilege if the\n      client user account already has it.\n", "\n\nImportant\n\n\n        Revoking the FILE privilege (or\n        not granting it in the first place) keeps the user only from\n        executing the LOAD XML statement\n        (as well as the LOAD_FILE()\n        function; it does not prevent the user from\n        executing LOAD XML\n        LOCAL. To disallow this statement, you must start the\n        server or the client with --local-infile=OFF.\n      \n        In other words, the FILE\n        privilege affects only whether the client can read files on the\n        server; it has no bearing on whether the client can read files\n        on the local file system.\n\n"], "Examples": ["USE test;\n\nCREATE TABLE person (\n    person_id INT NOT NULL PRIMARY KEY,\n    fname VARCHAR(40) NULL,\n    lname VARCHAR(40) NULL,\n    created TIMESTAMP\n);", "mysql> LOAD XML LOCAL INFILE 'person.xml'\n    ->   INTO TABLE person\n    ->   ROWS IDENTIFIED BY '<person>';\n\nQuery OK, 8 rows affected (0.00 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0", "mysql> SELECT * FROM person;\n+-----------+--------+------------+---------------------+\n| person_id | fname  | lname      | created             |\n+-----------+--------+------------+---------------------+\n|         1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|         2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|         3 | Likame | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|         4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|         5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|         6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|         7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|         8 | Sreraf | Encmelt    | 2007-07-13 16:18:47 |\n+-----------+--------+------------+---------------------+\n8 rows in set (0.00 sec)", "mysql> USE test;\nmysql> CREATE TABLE person2 LIKE person;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> LOAD XML LOCAL INFILE 'person-dump.xml'\n    ->   INTO TABLE person2;\nQuery OK, 8 rows affected (0.01 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM person2;\n+-----------+--------+------------+---------------------+\n| person_id | fname  | lname      | created             |\n+-----------+--------+------------+---------------------+\n|         1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|         2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|         3 | Likema | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|         4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|         5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|         6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|         7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|         8 | Sreraf | Encmelt    | 2007-07-13 16:18:47 |\n+-----------+--------+------------+---------------------+\n8 rows in set (0.00 sec)", "mysql> TRUNCATE person2;\nQuery OK, 8 rows affected (0.26 sec)\n\nmysql> ALTER TABLE person2 DROP COLUMN created;\nQuery OK, 0 rows affected (0.52 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> SHOW CREATE TABLE person2\\G\n*************************** 1. row ***************************\n       Table: person2\nCreate Table: CREATE TABLE `person2` (\n  `person_id` int NOT NULL,\n  `fname` varchar(40) DEFAULT NULL,\n  `lname` varchar(40) DEFAULT NULL,\n  PRIMARY KEY (`person_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)\n\nmysql> LOAD XML LOCAL INFILE 'person-dump.xml'\n    ->   INTO TABLE person2;\nQuery OK, 8 rows affected (0.01 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM person2;\n+-----------+--------+------------+\n| person_id | fname  | lname      |\n+-----------+--------+------------+\n|         1 | Kapek  | Sainnouine |\n|         2 | Sajon  | Rondela    |\n|         3 | Likema | \u00d6rrtmons   |\n|         4 | Slar   | Manlanth   |\n|         5 | Stoma  | Nilu       |\n|         6 | Nirtam | Skl\u00f6d      |\n|         7 | Sungam | Dulb\u00e5d     |\n|         8 | Sreraf | Encmelt    |\n+-----------+--------+------------+\n8 rows in set (0.00 sec)", "mysql> CREATE TABLE individual (\n    ->     individual_id INT NOT NULL PRIMARY KEY,\n    ->     name1 VARCHAR(40) NULL,\n    ->     name2 VARCHAR(40) NULL,\n    ->     made TIMESTAMP\n    -> );\nQuery OK, 0 rows affected (0.42 sec)", "mysql> LOAD XML INFILE '../bin/person-dump.xml' INTO TABLE test.individual;\nERROR 1263 (22004): Column set to default value; NULL supplied to NOT NULL column 'individual_id' at row 1", "mysql> LOAD XML INFILE '../bin/person-dump.xml'\n    ->     INTO TABLE test.individual (@person_id, @fname, @lname, @created)\n    ->     SET individual_id=@person_id, name1=@fname, name2=@lname, made=@created;\nQuery OK, 8 rows affected (0.05 sec)\nRecords: 8  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM individual;\n+---------------+--------+------------+---------------------+\n| individual_id | name1  | name2      | made                |\n+---------------+--------+------------+---------------------+\n|             1 | Kapek  | Sainnouine | 2007-07-13 16:18:47 |\n|             2 | Sajon  | Rondela    | 2007-07-13 16:18:47 |\n|             3 | Likema | \u00d6rrtmons   | 2007-07-13 16:18:47 |\n|             4 | Slar   | Manlanth   | 2007-07-13 16:18:47 |\n|             5 | Stoma  | Nilu       | 2007-07-13 16:18:47 |\n|             6 | Nirtam | Skl\u00f6d      | 2007-07-13 16:18:47 |\n|             7 | Sungam | Dulb\u00e5d     | 2007-07-13 16:18:47 |\n|             8 | Srraf  | Encmelt    | 2007-07-13 16:18:47 |\n+---------------+--------+------------+---------------------+\n8 rows in set (0.00 sec)", "mysql< TRUNCATE person;\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql< SHOW CREATE TABLE person\\G\n*************************** 1. row ***************************\n       Table: person\nCreate Table: CREATE TABLE `person` (\n  `person_id` int(11) NOT NULL,\n  `fname` varchar(40) DEFAULT NULL,\n  `lname` varchar(40) DEFAULT NULL,\n  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`person_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n1 row in set (0.00 sec)", "CREATE TABLE address (\n    address_id INT NOT NULL PRIMARY KEY,\n    person_id INT NULL,\n    street VARCHAR(40) NULL,\n    zip INT NULL,\n    city VARCHAR(40) NULL,\n    created TIMESTAMP\n);", "mysql> LOAD XML LOCAL INFILE 'address.xml'\n    ->   INTO TABLE person\n    ->   ROWS IDENTIFIED BY '<person>';\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Deleted: 0  Skipped: 0  Warnings: 0", "mysql> SELECT * FROM person;\n+-----------+--------+-------+---------------------+\n| person_id | fname  | lname | created             |\n+-----------+--------+-------+---------------------+\n|         1 | Robert | Jones | 2007-07-24 17:37:06 |\n|         2 | Mary   | Smith | 2007-07-24 17:37:06 |\n+-----------+--------+-------+---------------------+\n2 rows in set (0.00 sec)", "mysql> LOAD XML LOCAL INFILE 'address.xml'\n    ->   INTO TABLE address\n    ->   ROWS IDENTIFIED BY '<address>';\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Deleted: 0  Skipped: 0  Warnings: 0", "mysql> SELECT * FROM address;\n+------------+-----------+-----------------+-------+--------------+---------------------+\n| address_id | person_id | street          | zip   | city         | created             |\n+------------+-----------+-----------------+-------+--------------+---------------------+\n|          1 |         1 | Mill Creek Road | 45365 | Sidney       | 2007-07-24 17:37:37 |\n|          2 |         1 | Main Street     | 28681 | Taylorsville | 2007-07-24 17:37:37 |\n|          3 |         2 | River Road      | 80239 | Denver       | 2007-07-24 17:37:37 |\n+------------+-----------+-----------------+-------+--------------+---------------------+\n3 rows in set (0.00 sec)"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/parenthesized-query-expressions.html"], "Title": ["15.2.11 Parenthesized Query Expressions"], "Feature": ["parenthesized_query_expression:\n    ( query_expression [order_by_clause] [limit_clause] )\n      [order_by_clause]\n      [limit_clause]\n      [into_clause]\n\nquery_expression:\n    query_block [set_op query_block [set_op query_block ...]]\n      [order_by_clause]\n      [limit_clause]\n      [into_clause]\n\nquery_block:\n    SELECT ... | TABLE | VALUES\n\norder_by_clause:\n    ORDER BY as for SELECT\n\nlimit_clause:\n    LIMIT as for SELECT\n\ninto_clause:\n    INTO as for SELECT\n\nset_op:\n    UNION | INTERSECT | EXCEPT"], "Description": ["\n      MySQL 8.4 supports parenthesized query expressions\n      according to the preceding syntax. At its simplest, a\n      parenthesized query expression contains a single\n      SELECT or other statement returning\n      a result set and no following optional clauses:\n    ", "Press CTRL+C to copy (SELECT 1);\n(SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'mysql');\n\nTABLE t;\n\nVALUES ROW(2, 3, 4), ROW(1, -2, 3);", "\n      A parenthesized query expression can also contain queries linked\n      by one or more set operations such as\n      UNION, and end with any or all of\n      the optional clauses:\n    ", "Press CTRL+C to copy mysql> (SELECT 1 AS result UNION SELECT 2);\n+--------+\n| result |\n+--------+\n|      1 |\n|      2 |\n+--------+\nmysql> (SELECT 1 AS result UNION SELECT 2) LIMIT 1;\n+--------+\n| result |\n+--------+\n|      1 |\n+--------+\nmysql> (SELECT 1 AS result UNION SELECT 2) LIMIT 1 OFFSET 1;\n+--------+\n| result |\n+--------+\n|      2 |\n+--------+\nmysql> (SELECT 1 AS result UNION SELECT 2)\n       ORDER BY result DESC LIMIT 1;\n+--------+\n| result |\n+--------+\n|      2 |\n+--------+\nmysql> (SELECT 1 AS result UNION SELECT 2)\n       ORDER BY result DESC LIMIT 1 OFFSET 1;\n+--------+\n| result |\n+--------+\n|      1 |\n+--------+\nmysql> (SELECT 1 AS result UNION SELECT 3 UNION SELECT 2)\n       ORDER BY result LIMIT 1 OFFSET 1 INTO @var;\nmysql> SELECT @var;\n+------+\n| @var |\n+------+\n|    2 |\n+------+", "\nINTERSECT acts before UNION\n      and EXCEPT, so that the following two\n      statements are equivalent:\n    ", "Press CTRL+C to copy SELECT a FROM t1 EXCEPT SELECT b FROM t2 INTERSECT SELECT c FROM t3;\n\nSELECT a FROM t1 EXCEPT (SELECT b FROM t2 INTERSECT SELECT c FROM t3);", "\n      Parenthesized query expressions are also used as query\n      expressions, so a query expression, usually composed of query\n      blocks, may also consist of parenthesized query expressions:\n    ", "Press CTRL+C to copy (TABLE t1 ORDER BY a) UNION (TABLE t2 ORDER BY b) ORDER BY z;", "\n      Query blocks may have trailing ORDER BY and\n      LIMIT clauses, which are applied before the\n      outer set operation, ORDER BY, and\n      LIMIT.\n    ", "\n      You cannot have a query block with a trailing ORDER\n      BY or LIMIT without wrapping it in\n      parentheses but parentheses may be used for enforcement in various\n      ways:\n", "\n\n          To enforce LIMIT on each query block:\n        Press CTRL+C to copy (SELECT 1 LIMIT 1) UNION (VALUES ROW(2) LIMIT 1);\n\n(VALUES ROW(1), ROW(2) LIMIT 2) EXCEPT (SELECT 2 LIMIT 1);\n          To enforce LIMIT on both query blocks and\n          the entire query expression:\n        Press CTRL+C to copy (SELECT 1 LIMIT 1) UNION (SELECT 2 LIMIT 1) LIMIT 1;\n          To enforce LIMIT on the entire query\n          expression (with no parentheses):\n        Press CTRL+C to copy VALUES ROW(1), ROW(2) INTERSECT VALUES ROW(2), ROW(1) LIMIT 1;\n          Hybrid enforcement: LIMIT on the first\n          query block and on the entire query expression:\n        Press CTRL+C to copy (SELECT 1 LIMIT 1) UNION SELECT 2 LIMIT 1;\n", "\n      The syntax described in this section is subject to certain\n      restrictions:\n", "\n\n          A trailing INTO clause for a query\n          expression is not permitted if there is another\n          INTO clause inside parentheses.\n        \n          An ORDER BY or LIMIT\n          within a parenthesized query expression which is also applied\n          in the outer query is handled in accordance with the SQL\n          standard.\n        \n          Nested parenthesized query expressions are permitted. The\n          maximum level of nesting supported is 63; this is after any\n          simplifications or merges have been performed by the parser.\n        \n          An example of such a statement is shown here:\n        Press CTRL+C to copy mysql> (SELECT 'a' UNION SELECT 'b' LIMIT 2) LIMIT 3;\n+---+\n| a |\n+---+\n| a |\n| b |\n+---+\n2 rows in set (0.00 sec)\n          You should be aware that, when collapsing parenthesized\n          expression bodies, MySQL follows SQL standard semantics, so\n          that a higher outer limit cannot override an inner lower one.\n          For example, (SELECT ... LIMIT 5) LIMIT 10\n          can return no more than five rows.\n\n"], "Examples": ["(SELECT 1);\n(SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'mysql');\n\nTABLE t;\n\nVALUES ROW(2, 3, 4), ROW(1, -2, 3);", "mysql> (SELECT 1 AS result UNION SELECT 2);\n+--------+\n| result |\n+--------+\n|      1 |\n|      2 |\n+--------+\nmysql> (SELECT 1 AS result UNION SELECT 2) LIMIT 1;\n+--------+\n| result |\n+--------+\n|      1 |\n+--------+\nmysql> (SELECT 1 AS result UNION SELECT 2) LIMIT 1 OFFSET 1;\n+--------+\n| result |\n+--------+\n|      2 |\n+--------+\nmysql> (SELECT 1 AS result UNION SELECT 2)\n       ORDER BY result DESC LIMIT 1;\n+--------+\n| result |\n+--------+\n|      2 |\n+--------+\nmysql> (SELECT 1 AS result UNION SELECT 2)\n       ORDER BY result DESC LIMIT 1 OFFSET 1;\n+--------+\n| result |\n+--------+\n|      1 |\n+--------+\nmysql> (SELECT 1 AS result UNION SELECT 3 UNION SELECT 2)\n       ORDER BY result LIMIT 1 OFFSET 1 INTO @var;\nmysql> SELECT @var;\n+------+\n| @var |\n+------+\n|    2 |\n+------+", "SELECT a FROM t1 EXCEPT SELECT b FROM t2 INTERSECT SELECT c FROM t3;\n\nSELECT a FROM t1 EXCEPT (SELECT b FROM t2 INTERSECT SELECT c FROM t3);", "(TABLE t1 ORDER BY a) UNION (TABLE t2 ORDER BY b) ORDER BY z;", "(SELECT 1 LIMIT 1) UNION (VALUES ROW(2) LIMIT 1);\n\n(VALUES ROW(1), ROW(2) LIMIT 2) EXCEPT (SELECT 2 LIMIT 1);", "(SELECT 1 LIMIT 1) UNION (SELECT 2 LIMIT 1) LIMIT 1;", "VALUES ROW(1), ROW(2) INTERSECT VALUES ROW(2), ROW(1) LIMIT 1;", "(SELECT 1 LIMIT 1) UNION SELECT 2 LIMIT 1;", "mysql> (SELECT 'a' UNION SELECT 'b' LIMIT 2) LIMIT 3;\n+---+\n| a |\n+---+\n| a |\n| b |\n+---+\n2 rows in set (0.00 sec)"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/replace.html"], "Title": ["15.2.12 REPLACE Statement"], "Feature": ["REPLACE [LOW_PRIORITY | DELAYED]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    { {VALUES | VALUE} (value_list) [, (value_list)] ...\n      |\n      VALUES row_constructor_list\n    }\n\nREPLACE [LOW_PRIORITY | DELAYED]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    SET assignment_list\n\nREPLACE [LOW_PRIORITY | DELAYED]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    {SELECT ... | TABLE table_name}\n\nvalue:\n    {expr | DEFAULT}\n\nvalue_list:\n    value [, value] ...\n\nrow_constructor_list:\n    ROW(value_list)[, ROW(value_list)][, ...]\n\nassignment:\n    col_name = value\n\nassignment_list:\n    assignment [, assignment] ..."], "Description": ["\nREPLACE works exactly like\n      INSERT, except that if an old row\n      in the table has the same value as a new row for a\n      PRIMARY KEY or a UNIQUE\n      index, the old row is deleted before the new row is inserted. See\n      Section\u00a015.2.7, \u201cINSERT Statement\u201d.\n    ", "\nREPLACE is a MySQL extension to the\n      SQL standard. It either inserts, or deletes\n      and inserts. For another MySQL extension to standard\n      SQL\u2014that either inserts or\n      updates\u2014see\n      Section\u00a015.2.7.2, \u201cINSERT ... ON DUPLICATE KEY UPDATE Statement\u201d.\n    ", "\nDELAYED inserts and replaces were deprecated in\n      MySQL 5.6. In MySQL 8.4, DELAYED\n      is not supported. The server recognizes but ignores the\n      DELAYED keyword, handles the replace as a\n      nondelayed replace, and generates an\n      ER_WARN_LEGACY_SYNTAX_CONVERTED\n      warning: REPLACE DELAYED is no longer supported. The\n      statement was converted to REPLACE. The\n      DELAYED keyword is scheduled for removal in a\n      future release. release.\n", "\n\nNote\n\n\nREPLACE makes sense only if a\n        table has a PRIMARY KEY or\n        UNIQUE index. Otherwise, it becomes\n        equivalent to INSERT, because\n        there is no index to be used to determine whether a new row\n        duplicates another.\n\n", "\n      Values for all columns are taken from the values specified in the\n      REPLACE statement. Any missing\n      columns are set to their default values, just as happens for\n      INSERT. You cannot refer to values\n      from the current row and use them in the new row. If you use an\n      assignment such as SET\n      col_name =\n      col_name + 1, the reference\n      to the column name on the right hand side is treated as\n      DEFAULT(col_name),\n      so the assignment is equivalent to SET\n      col_name =\n      DEFAULT(col_name) + 1.\n    ", "\n      You can specify the column values that REPLACE\n      attempts to insert using\n      VALUES ROW().\n    ", "\n      To use REPLACE, you must have both\n      the INSERT and\n      DELETE privileges for the table.\n    ", "\n      If a generated column is replaced explicitly, the only permitted\n      value is DEFAULT. For information about\n      generated columns, see\n      Section\u00a015.1.20.8, \u201cCREATE TABLE and Generated Columns\u201d.\n    ", "\nREPLACE supports explicit partition selection\n      using the PARTITION clause with a list of\n      comma-separated names of partitions, subpartitions, or both. As\n      with INSERT, if it is not possible\n      to insert the new row into any of these partitions or\n      subpartitions, the REPLACE statement fails with\n      the error Found a row not matching the given partition\n      set. For more information and examples, see\n      Section\u00a026.5, \u201cPartition Selection\u201d.\n    ", "\n      The REPLACE statement returns a\n      count to indicate the number of rows affected. This is the sum of\n      the rows deleted and inserted. If the count is 1 for a single-row\n      REPLACE, a row was inserted and no\n      rows were deleted. If the count is greater than 1, one or more old\n      rows were deleted before the new row was inserted. It is possible\n      for a single row to replace more than one old row if the table\n      contains multiple unique indexes and the new row duplicates values\n      for different old rows in different unique indexes.\n    ", "\n      The affected-rows count makes it easy to determine whether\n      REPLACE only added a row or whether\n      it also replaced any rows: Check whether the count is 1 (added) or\n      greater (replaced).\n    ", "\n      If you are using the C API, the affected-rows count can be\n      obtained using the\n      mysql_affected_rows() function.\n    ", "\n      You cannot replace into a table and select from the same table in\n      a subquery.\n    ", "\n      MySQL uses the following algorithm for\n      REPLACE (and\n      LOAD DATA ...\n      REPLACE):\n", "\n\n          Try to insert the new row into the table\n        \n          While the insertion fails because a duplicate-key error occurs\n          for a primary key or unique index:\n\n\n\n              Delete from the table the conflicting row that has the\n              duplicate key value\n            \n              Try again to insert the new row into the table\n\n\n\n", "\n      It is possible that in the case of a duplicate-key error, a\n      storage engine may perform the REPLACE as an\n      update rather than a delete plus insert, but the semantics are the\n      same. There are no user-visible effects other than a possible\n      difference in how the storage engine increments\n      Handler_xxx status\n      variables.\n    ", "\n      Because the results of REPLACE ... SELECT\n      statements depend on the ordering of rows from the\n      SELECT and this order cannot always\n      be guaranteed, it is possible when logging these statements for\n      the source and the replica to diverge. For this reason,\n      REPLACE ... SELECT statements are flagged as\n      unsafe for statement-based replication. such statements produce a\n      warning in the error log when using statement-based mode and are\n      written to the binary log using the row-based format when using\n      MIXED mode. See also\n      Section\u00a019.2.1.1, \u201cAdvantages and Disadvantages of Statement-Based and Row-Based\n        Replication\u201d.\n    ", "\n      MySQL 8.4 supports\n      TABLE as well as\n      SELECT with\n      REPLACE, just as it does with\n      INSERT. See\n      Section\u00a015.2.7.1, \u201cINSERT ... SELECT Statement\u201d, for more information and\n      examples.\n    ", "\n      When modifying an existing table that is not partitioned to\n      accommodate partitioning, or, when modifying the partitioning of\n      an already partitioned table, you may consider altering the\n      table's primary key (see\n      Section\u00a026.6.1, \u201cPartitioning Keys, Primary Keys, and Unique Keys\u201d).\n      You should be aware that, if you do this, the results of\n      REPLACE statements may be affected, just as\n      they would be if you modified the primary key of a nonpartitioned\n      table. Consider the table created by the following\n      CREATE TABLE statement:\n    ", "Press CTRL+C to copy CREATE TABLE test (\n  id INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  data VARCHAR(64) DEFAULT NULL,\n  ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (id)\n);", "\n      When we create this table and run the statements shown in the\n      mysql client, the result is as follows:\n    ", "Press CTRL+C to copy mysql> REPLACE INTO test VALUES (1, 'Old', '2014-08-20 18:47:00');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> REPLACE INTO test VALUES (1, 'New', '2014-08-20 18:47:42');\nQuery OK, 2 rows affected (0.04 sec)\n\nmysql> SELECT * FROM test;\n+----+------+---------------------+\n| id | data | ts                  |\n+----+------+---------------------+\n|  1 | New  | 2014-08-20 18:47:42 |\n+----+------+---------------------+\n1 row in set (0.00 sec)", "\n      Now we create a second table almost identical to the first, except\n      that the primary key now covers 2 columns, as shown here\n      (emphasized text):\n    ", "Press CTRL+C to copy CREATE TABLE test2 (\n  id INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  data VARCHAR(64) DEFAULT NULL,\n  ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (id, ts)\n);", "\n      When we run on test2 the same two\n      REPLACE statements as we did on the original\n      test table, we obtain a different result:\n    ", "Press CTRL+C to copy mysql> REPLACE INTO test2 VALUES (1, 'Old', '2014-08-20 18:47:00');\nQuery OK, 1 row affected (0.05 sec)\n\nmysql> REPLACE INTO test2 VALUES (1, 'New', '2014-08-20 18:47:42');\nQuery OK, 1 row affected (0.06 sec)\n\nmysql> SELECT * FROM test2;\n+----+------+---------------------+\n| id | data | ts                  |\n+----+------+---------------------+\n|  1 | Old  | 2014-08-20 18:47:00 |\n|  1 | New  | 2014-08-20 18:47:42 |\n+----+------+---------------------+\n2 rows in set (0.00 sec)", "\n      This is due to the fact that, when run on\n      test2, both the id and\n      ts column values must match those of an\n      existing row for the row to be replaced; otherwise, a row is\n      inserted.\n"], "Examples": ["CREATE TABLE test (\n  id INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  data VARCHAR(64) DEFAULT NULL,\n  ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (id)\n);", "mysql> REPLACE INTO test VALUES (1, 'Old', '2014-08-20 18:47:00');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> REPLACE INTO test VALUES (1, 'New', '2014-08-20 18:47:42');\nQuery OK, 2 rows affected (0.04 sec)\n\nmysql> SELECT * FROM test;\n+----+------+---------------------+\n| id | data | ts                  |\n+----+------+---------------------+\n|  1 | New  | 2014-08-20 18:47:42 |\n+----+------+---------------------+\n1 row in set (0.00 sec)", "CREATE TABLE test2 (\n  id INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  data VARCHAR(64) DEFAULT NULL,\n  ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (id, ts)\n);", "mysql> REPLACE INTO test2 VALUES (1, 'Old', '2014-08-20 18:47:00');\nQuery OK, 1 row affected (0.05 sec)\n\nmysql> REPLACE INTO test2 VALUES (1, 'New', '2014-08-20 18:47:42');\nQuery OK, 1 row affected (0.06 sec)\n\nmysql> SELECT * FROM test2;\n+----+------+---------------------+\n| id | data | ts                  |\n+----+------+---------------------+\n|  1 | Old  | 2014-08-20 18:47:00 |\n|  1 | New  | 2014-08-20 18:47:42 |\n+----+------+---------------------+\n2 rows in set (0.00 sec)"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/select.html"], "Title": ["15.2.13 SELECT Statement"], "Feature": ["SELECT\n    [ALL | DISTINCT | DISTINCTROW ]\n    [HIGH_PRIORITY]\n    [STRAIGHT_JOIN]\n    [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]\n    [SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]\n    select_expr [, select_expr] ...\n    [into_option]\n    [FROM table_references\n      [PARTITION partition_list]]\n    [WHERE where_condition]\n    [GROUP BY {col_name | expr | position}, ... [WITH ROLLUP]]\n    [HAVING where_condition]\n    [WINDOW window_name AS (window_spec)\n        [, window_name AS (window_spec)] ...]\n    [ORDER BY {col_name | expr | position}\n      [ASC | DESC], ... [WITH ROLLUP]]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n    [into_option]\n    [FOR {UPDATE | SHARE}\n        [OF tbl_name [, tbl_name] ...]\n        [NOWAIT | SKIP LOCKED]\n      | LOCK IN SHARE MODE]\n    [into_option]\n\ninto_option: {\n    INTO OUTFILE 'file_name'\n        [CHARACTER SET charset_name]\n        export_options\n  | INTO DUMPFILE 'file_name'\n  | INTO var_name [, var_name] ...\n}", "SELECT * FROM t1 INNER JOIN t2 ...", "SELECT t1.*, t2.* FROM t1 INNER JOIN t2 ...", "SELECT id, * FROM t1", "SELECT id, t1.* FROM t1", "SELECT AVG(score), t1.* FROM t1 ...", "tbl_name [[AS] alias] [index_hint]"], "Description": ["\nSELECT is used to retrieve rows\n      selected from one or more tables, and can include\n      UNION operations and subqueries.\n      INTERSECT and\n      EXCEPT operations are also\n      supported. The UNION,\n      INTERSECT, and EXCEPT\n      operators are described in more detail later in this section. See\n      also Section\u00a015.2.15, \u201cSubqueries\u201d.\n    ", "\n      A SELECT statement can start with a\n      WITH clause to define common table\n      expressions accessible within the\n      SELECT. See Section\u00a015.2.20, \u201cWITH (Common Table Expressions)\u201d.\n    ", "\n      The most commonly used clauses of\n      SELECT statements are these:\n", "\n\n          Each select_expr indicates a column\n          that you want to retrieve. There must be at least one\n          select_expr.\n        \ntable_references indicates the\n          table or tables from which to retrieve rows. Its syntax is\n          described in Section\u00a015.2.13.2, \u201cJOIN Clause\u201d.\n        \nSELECT supports explicit partition\n          selection using the PARTITION clause with a\n          list of partitions or subpartitions (or both) following the\n          name of the table in a\n          table_reference (see\n          Section\u00a015.2.13.2, \u201cJOIN Clause\u201d). In this case, rows are selected only\n          from the partitions listed, and any other partitions of the\n          table are ignored. For more information and examples, see\n          Section\u00a026.5, \u201cPartition Selection\u201d.\n        \n          The WHERE clause, if given, indicates the\n          condition or conditions that rows must satisfy to be selected.\n          where_condition is an expression\n          that evaluates to true for each row to be selected. The\n          statement selects all rows if there is no\n          WHERE clause.\n        \n          In the WHERE expression, you can use any of\n          the functions and operators that MySQL supports, except for\n          aggregate (group) functions. See\n          Section\u00a011.5, \u201cExpressions\u201d, and\n          Chapter\u00a014, Functions and Operators.\n\n", "\nSELECT can also be used to retrieve\n      rows computed without reference to any table.\n    ", "\n      For example:\n    ", "Press CTRL+C to copy mysql> SELECT 1 + 1;\n        -> 2", "\n\n\n      You are permitted to specify DUAL as a dummy\n      table name in situations where no tables are referenced:\n    ", "Press CTRL+C to copy mysql> SELECT 1 + 1 FROM DUAL;\n        -> 2", "\nDUAL is purely for the convenience of people\n      who require that all SELECT\n      statements should have FROM and possibly other\n      clauses. MySQL may ignore the clauses. MySQL does not require\n      FROM DUAL if no tables are referenced.\n    ", "\n      In general, clauses used must be given in exactly the order shown\n      in the syntax description. For example, a\n      HAVING clause must come after any\n      GROUP BY clause and before any ORDER\n      BY clause. The INTO clause, if\n      present, can appear in any position indicated by the syntax\n      description, but within a given statement can appear only once,\n      not in multiple positions. For more information about\n      INTO, see Section\u00a015.2.13.1, \u201cSELECT ... INTO Statement\u201d.\n    ", "\n      The list of select_expr terms comprises\n      the select list that indicates which columns to retrieve. Terms\n      specify a column or expression or can use\n      *-shorthand:\n", "\n\n          A select list consisting only of a single unqualified\n          * can be used as shorthand to select all\n          columns from all tables:\n        Press CTRL+C to copy SELECT * FROM t1 INNER JOIN t2 ...\ntbl_name.* can\n          be used as a qualified shorthand to select all columns from\n          the named table:\n        Press CTRL+C to copy SELECT t1.*, t2.* FROM t1 INNER JOIN t2 ...\n          If a table has invisible columns, * and\n          tbl_name.* do\n          not include them. To be included, invisible columns must be\n          referenced explicitly.\n        \n          Use of an unqualified * with other items in\n          the select list may produce a parse error. For example:\n        Press CTRL+C to copy SELECT id, * FROM t1\n          To avoid this problem, use a qualified\n          tbl_name.*\n          reference:\n        Press CTRL+C to copy SELECT id, t1.* FROM t1\n          Use qualified\n          tbl_name.*\n          references for each table in the select list:\n        Press CTRL+C to copy SELECT AVG(score), t1.* FROM t1 ...\n", "\n      The following list provides additional information about other\n      SELECT clauses:\n", "\n\n\n\n\n          A select_expr can be given an alias\n          using AS\n          alias_name. The alias is\n          used as the expression's column name and can be used in\n          GROUP BY, ORDER BY, or\n          HAVING clauses. For example:\n        Press CTRL+C to copy SELECT CONCAT(last_name,', ',first_name) AS full_name\n  FROM mytable ORDER BY full_name;\n          The AS keyword is optional when aliasing a\n          select_expr with an identifier. The\n          preceding example could have been written like this:\n        Press CTRL+C to copy SELECT CONCAT(last_name,', ',first_name) full_name\n  FROM mytable ORDER BY full_name;\n          However, because the AS is optional, a\n          subtle problem can occur if you forget the comma between two\n          select_expr expressions: MySQL\n          interprets the second as an alias name. For example, in the\n          following statement, columnb is treated as\n          an alias name:\n        Press CTRL+C to copy SELECT columna columnb FROM mytable;\n          For this reason, it is good practice to be in the habit of\n          using AS explicitly when specifying column\n          aliases.\n        \n          It is not permissible to refer to a column alias in a\n          WHERE clause, because the column value\n          might not yet be determined when the WHERE\n          clause is executed. See Section\u00a0B.3.4.4, \u201cProblems with Column Aliases\u201d.\n        \n\n\n\n          The FROM\n          table_references clause\n          indicates the table or tables from which to retrieve rows. If\n          you name more than one table, you are performing a join. For\n          information on join syntax, see Section\u00a015.2.13.2, \u201cJOIN Clause\u201d. For\n          each table specified, you can optionally specify an alias.\n        Press CTRL+C to copy tbl_name [[AS] alias] [index_hint]\n          The use of index hints provides the optimizer with information\n          about how to choose indexes during query processing. For a\n          description of the syntax for specifying these hints, see\n          Section\u00a010.9.4, \u201cIndex Hints\u201d.\n        \n          You can use SET\n          max_seeks_for_key=value\n          as an alternative way to force MySQL to prefer key scans\n          instead of table scans. See\n          Section\u00a07.1.8, \u201cServer System Variables\u201d.\n        \n          You can refer to a table within the default database as\n          tbl_name, or as\n          db_name.tbl_name\n          to specify a database explicitly. You can refer to a column as\n          col_name,\n          tbl_name.col_name,\n          or\n          db_name.tbl_name.col_name.\n          You need not specify a tbl_name or\n          db_name.tbl_name\n          prefix for a column reference unless the reference would be\n          ambiguous. See Section\u00a011.2.2, \u201cIdentifier Qualifiers\u201d, for\n          examples of ambiguity that require the more explicit column\n          reference forms.\n        \n\n\n\n          A table reference can be aliased using\n          tbl_name AS\n          alias_name or\n          tbl_name alias_name. These\n          statements are equivalent:\n        Press CTRL+C to copy SELECT t1.name, t2.salary FROM employee AS t1, info AS t2\n  WHERE t1.name = t2.name;\n\nSELECT t1.name, t2.salary FROM employee t1, info t2\n  WHERE t1.name = t2.name;\n\n\n          Columns selected for output can be referred to in\n          ORDER BY and GROUP BY\n          clauses using column names, column aliases, or column\n          positions. Column positions are integers and begin with 1:\n        Press CTRL+C to copy SELECT college, region, seed FROM tournament\n  ORDER BY region, seed;\n\nSELECT college, region AS r, seed AS s FROM tournament\n  ORDER BY r, s;\n\nSELECT college, region, seed FROM tournament\n  ORDER BY 2, 3;\n          To sort in reverse order, add the DESC\n          (descending) keyword to the name of the column in the\n          ORDER BY clause that you are sorting by.\n          The default is ascending order; this can be specified\n          explicitly using the ASC keyword.\n        \n          If ORDER BY occurs within a parenthesized\n          query expression and also is applied in the outer query, the\n          results are undefined and may change in a future version of\n          MySQL.\n        \n          Use of column positions is deprecated because the syntax has\n          been removed from the SQL standard.\n        \n\n\n\n          When you use ORDER BY or GROUP\n          BY to sort a column in a\n          SELECT, the server sorts values\n          using only the initial number of bytes indicated by the\n          max_sort_length system\n          variable.\n        \n          MySQL extends the use of GROUP BY to permit\n          selecting fields that are not mentioned in the GROUP\n          BY clause. If you are not getting the results that\n          you expect from your query, please read the description of\n          GROUP BY found in\n          Section\u00a014.19, \u201cAggregate Functions\u201d.\n        \n          The HAVING clause, like the\n          WHERE clause, specifies selection\n          conditions. The WHERE clause specifies\n          conditions on columns in the select list, but cannot refer to\n          aggregate functions. The HAVING clause\n          specifies conditions on groups, typically formed by the\n          GROUP BY clause. The query result includes\n          only groups satisfying the HAVING\n          conditions. (If no GROUP BY is present, all\n          rows implicitly form a single aggregate group.)\n        \n          The HAVING clause is applied nearly last,\n          just before items are sent to the client, with no\n          optimization. (LIMIT is applied after\n          HAVING.)\n        \n          The SQL standard requires that HAVING must\n          reference only columns in the GROUP BY\n          clause or columns used in aggregate functions. However, MySQL\n          supports an extension to this behavior, and permits\n          HAVING to refer to columns in the\n          SELECT list and columns in\n          outer subqueries as well.\n        \n          If the HAVING clause refers to a column\n          that is ambiguous, a warning occurs. In the following\n          statement, col2 is ambiguous because it is\n          used as both an alias and a column name:\n        Press CTRL+C to copy SELECT COUNT(col1) AS col2 FROM t GROUP BY col2 HAVING col2 = 2;\n          Preference is given to standard SQL behavior, so if a\n          HAVING column name is used both in\n          GROUP BY and as an aliased column in the\n          select column list, preference is given to the column in the\n          GROUP BY column.\n        \n          Do not use HAVING for items that should be\n          in the WHERE clause. For example, do not\n          write the following:\n        Press CTRL+C to copy SELECT col_name FROM tbl_name HAVING col_name > 0;\n          Write this instead:\n        Press CTRL+C to copy SELECT col_name FROM tbl_name WHERE col_name > 0;\n          The HAVING clause can refer to aggregate\n          functions, which the WHERE clause cannot:\n        Press CTRL+C to copy SELECT user, MAX(salary) FROM users\n  GROUP BY user HAVING MAX(salary) > 10;\n          (This did not work in some older versions of MySQL.)\n        \n          MySQL permits duplicate column names. That is, there can be\n          more than one select_expr with the\n          same name. This is an extension to standard SQL. Because MySQL\n          also permits GROUP BY and\n          HAVING to refer to\n          select_expr values, this can result\n          in an ambiguity:\n        Press CTRL+C to copy SELECT 12 AS a, a FROM t GROUP BY a;\n          In that statement, both columns have the name\n          a. To ensure that the correct column is\n          used for grouping, use different names for each\n          select_expr.\n        \n          The WINDOW clause, if present, defines\n          named windows that can be referred to by window functions. For\n          details, see Section\u00a014.20.4, \u201cNamed Windows\u201d.\n        \n          MySQL resolves unqualified column or alias references in\n          ORDER BY clauses by searching in the\n          select_expr values, then in the\n          columns of the tables in the FROM clause.\n          For GROUP BY or HAVING\n          clauses, it searches the FROM clause before\n          searching in the select_expr\n          values. (For GROUP BY and\n          HAVING, this differs from the pre-MySQL 5.0\n          behavior that used the same rules as for ORDER\n          BY.)\n        \n\n\n          The LIMIT clause can be used to constrain\n          the number of rows returned by the\n          SELECT statement.\n          LIMIT takes one or two numeric arguments,\n          which must both be nonnegative integer constants, with these\n          exceptions:\n\n\n\n              Within prepared statements, LIMIT\n              parameters can be specified using ?\n              placeholder markers.\n            \n              Within stored programs, LIMIT\n              parameters can be specified using integer-valued routine\n              parameters or local variables.\n\n\n\n          With two arguments, the first argument specifies the offset of\n          the first row to return, and the second specifies the maximum\n          number of rows to return. The offset of the initial row is 0\n          (not 1):\n        Press CTRL+C to copy SELECT * FROM tbl LIMIT 5,10;  # Retrieve rows 6-15\n          To retrieve all rows from a certain offset up to the end of\n          the result set, you can use some large number for the second\n          parameter. This statement retrieves all rows from the 96th row\n          to the last:\n        Press CTRL+C to copy SELECT * FROM tbl LIMIT 95,18446744073709551615;\n          With one argument, the value specifies the number of rows to\n          return from the beginning of the result set:\n        Press CTRL+C to copy SELECT * FROM tbl LIMIT 5;     # Retrieve first 5 rows\n          In other words, LIMIT\n          row_count is equivalent\n          to LIMIT 0,\n          row_count.\n        \n          For prepared statements, you can use placeholders. The\n          following statements return one row from the\n          tbl table:\n        Press CTRL+C to copy SET @a=1;\nPREPARE STMT FROM 'SELECT * FROM tbl LIMIT ?';\nEXECUTE STMT USING @a;\n          The following statements return the second to sixth rows from\n          the tbl table:\n        Press CTRL+C to copy SET @skip=1; SET @numrows=5;\nPREPARE STMT FROM 'SELECT * FROM tbl LIMIT ?, ?';\nEXECUTE STMT USING @skip, @numrows;\n          For compatibility with PostgreSQL, MySQL also supports the\n          LIMIT row_count OFFSET\n          offset syntax.\n        \n          If LIMIT occurs within a parenthesized\n          query expression and also is applied in the outer query, the\n          results are undefined and may change in a future version of\n          MySQL.\n        \n          The SELECT ...\n          INTO form of SELECT\n          enables the query result to be written to a file or stored in\n          variables. For more information, see\n          Section\u00a015.2.13.1, \u201cSELECT ... INTO Statement\u201d.\n        \n\n\n\n\n\n\n          If you use FOR UPDATE with a storage engine\n          that uses page or row locks, rows examined by the query are\n          write-locked until the end of the current transaction.\n        \n          You cannot use FOR UPDATE as part of the\n          SELECT in a statement such as\n          CREATE\n          TABLE new_table SELECT ... FROM\n          old_table .... (If you\n          attempt to do so, the statement is rejected with the error\n          Can't update table\n          'old_table' while\n          'new_table' is being\n          created.)\n        \nFOR SHARE and LOCK IN SHARE\n          MODE set shared locks that permit other transactions\n          to read the examined rows but not to update or delete them.\n          FOR SHARE and LOCK IN SHARE\n          MODE are equivalent. However, FOR\n          SHARE, like FOR UPDATE, supports\n          NOWAIT, SKIP LOCKED, and\n          OF tbl_name\n          options. FOR SHARE is a replacement for\n          LOCK IN SHARE MODE, but LOCK IN\n          SHARE MODE remains available for backward\n          compatibility.\n        \nNOWAIT causes a FOR\n          UPDATE or FOR SHARE query to\n          execute immediately, returning an error if a row lock cannot\n          be obtained due to a lock held by another transaction.\n        \nSKIP LOCKED causes a FOR\n          UPDATE or FOR SHARE query to\n          execute immediately, excluding rows from the result set that\n          are locked by another transaction.\n        \nNOWAIT and SKIP LOCKED\n          options are unsafe for statement-based replication.\n\n\n\nNote\n\n\n            Queries that skip locked rows return an inconsistent view of\n            the data. SKIP LOCKED is therefore not\n            suitable for general transactional work. However, it may be\n            used to avoid lock contention when multiple sessions access\n            the same queue-like table.\n\n\n\nOF tbl_name\n          applies FOR UPDATE and FOR\n          SHARE queries to named tables. For example:\n        Press CTRL+C to copy SELECT * FROM t1, t2 FOR SHARE OF t1 FOR UPDATE OF t2;\n          All tables referenced by the query block are locked when\n          OF tbl_name is\n          omitted. Consequently, using a locking clause without\n          OF tbl_name in\n          combination with another locking clause returns an error.\n          Specifying the same table in multiple locking clauses returns\n          an error. If an alias is specified as the table name in the\n          SELECT statement, a locking clause may only\n          use the alias. If the SELECT statement does\n          not specify an alias explicitly, the locking clause may only\n          specify the actual table name.\n        \n          For more information about FOR UPDATE and\n          FOR SHARE, see\n          Section\u00a017.7.2.4, \u201cLocking Reads\u201d. For additional\n          information about NOWAIT and SKIP\n          LOCKED options, see\n          Locking Read Concurrency with NOWAIT and SKIP LOCKED.\n\n", "\n      Following the SELECT keyword, you\n      can use a number of modifiers that affect the operation of the\n      statement. HIGH_PRIORITY,\n      STRAIGHT_JOIN, and modifiers beginning with\n      SQL_ are MySQL extensions to standard SQL.\n", "\n\n          The ALL and DISTINCT\n          modifiers specify whether duplicate rows should be returned.\n          ALL (the default) specifies that all\n          matching rows should be returned, including duplicates.\n          DISTINCT specifies removal of duplicate\n          rows from the result set. It is an error to specify both\n          modifiers. DISTINCTROW is a synonym for\n          DISTINCT.\n        \nDISTINCT can be used with a query that also\n          uses WITH ROLLUP.\n        \nHIGH_PRIORITY gives the\n          SELECT higher priority than a\n          statement that updates a table. You should use this only for\n          queries that are very fast and must be done at once. A\n          SELECT HIGH_PRIORITY query that is issued\n          while the table is locked for reading runs even if there is an\n          update statement waiting for the table to be free. This\n          affects only storage engines that use only table-level locking\n          (such as MyISAM, MEMORY,\n          and MERGE).\n        \nHIGH_PRIORITY cannot be used with\n          SELECT statements that are part\n          of a UNION.\n        \nSTRAIGHT_JOIN forces the optimizer to join\n          the tables in the order in which they are listed in the\n          FROM clause. You can use this to speed up a\n          query if the optimizer joins the tables in nonoptimal order.\n          STRAIGHT_JOIN also can be used in the\n          table_references list. See\n          Section\u00a015.2.13.2, \u201cJOIN Clause\u201d.\n        \nSTRAIGHT_JOIN does not apply to any table\n          that the optimizer treats as a\n          const or\n          system table. Such a table\n          produces a single row, is read during the optimization phase\n          of query execution, and references to its columns are replaced\n          with the appropriate column values before query execution\n          proceeds. These tables appear first in the query plan\n          displayed by EXPLAIN. See\n          Section\u00a010.8.1, \u201cOptimizing Queries with EXPLAIN\u201d. This exception may not apply\n          to const or\n          system tables that are used\n          on the NULL-complemented side of an outer\n          join (that is, the right-side table of a LEFT\n          JOIN or the left-side table of a RIGHT\n          JOIN.\n        \nSQL_BIG_RESULT or\n          SQL_SMALL_RESULT can be used with\n          GROUP BY or DISTINCT to\n          tell the optimizer that the result set has many rows or is\n          small, respectively. For SQL_BIG_RESULT,\n          MySQL directly uses disk-based temporary tables if they are\n          created, and prefers sorting to using a temporary table with a\n          key on the GROUP BY elements. For\n          SQL_SMALL_RESULT, MySQL uses in-memory\n          temporary tables to store the resulting table instead of using\n          sorting. This should not normally be needed.\n        \nSQL_BUFFER_RESULT forces the result to be\n          put into a temporary table. This helps MySQL free the table\n          locks early and helps in cases where it takes a long time to\n          send the result set to the client. This modifier can be used\n          only for top-level SELECT\n          statements, not for subqueries or following\n          UNION.\n        \nSQL_CALC_FOUND_ROWS tells MySQL to\n          calculate how many rows there would be in the result set,\n          disregarding any LIMIT clause. The number\n          of rows can then be retrieved with SELECT\n          FOUND_ROWS(). See\n          Section\u00a014.15, \u201cInformation Functions\u201d.\n\n\n\nNote\n\n\n            The SQL_CALC_FOUND_ROWS query modifier\n            and accompanying FOUND_ROWS()\n            function are deprecated; expect them to be removed in a\n            future version of MySQL. See the description of\n            FOUND_ROWS() for information\n            about an alternative strategy.\n\n\n\n          The SQL_CACHE and\n          SQL_NO_CACHE modifiers were used with the\n          query cache prior to MySQL 8.4. The query cache\n          was removed in MySQL 8.4. The\n          SQL_CACHE modifier was removed as well.\n          SQL_NO_CACHE is deprecated, and has no\n          effect; expect it to be removed in a future MySQL release.\n\n"], "Examples": ["mysql> SELECT 1 + 1;\n        -> 2", "mysql> SELECT 1 + 1 FROM DUAL;\n        -> 2", "SELECT CONCAT(last_name,', ',first_name) AS full_name\n  FROM mytable ORDER BY full_name;", "SELECT CONCAT(last_name,', ',first_name) full_name\n  FROM mytable ORDER BY full_name;", "SELECT columna columnb FROM mytable;", "SELECT t1.name, t2.salary FROM employee AS t1, info AS t2\n  WHERE t1.name = t2.name;\n\nSELECT t1.name, t2.salary FROM employee t1, info t2\n  WHERE t1.name = t2.name;", "SELECT college, region, seed FROM tournament\n  ORDER BY region, seed;\n\nSELECT college, region AS r, seed AS s FROM tournament\n  ORDER BY r, s;\n\nSELECT college, region, seed FROM tournament\n  ORDER BY 2, 3;", "SELECT COUNT(col1) AS col2 FROM t GROUP BY col2 HAVING col2 = 2;", "SELECT col_name FROM tbl_name HAVING col_name > 0;", "SELECT col_name FROM tbl_name WHERE col_name > 0;", "SELECT user, MAX(salary) FROM users\n  GROUP BY user HAVING MAX(salary) > 10;", "SELECT 12 AS a, a FROM t GROUP BY a;", "SELECT * FROM tbl LIMIT 5,10;  # Retrieve rows 6-15", "SELECT * FROM tbl LIMIT 95,18446744073709551615;", "SELECT * FROM tbl LIMIT 5;     # Retrieve first 5 rows", "SET @a=1;\nPREPARE STMT FROM 'SELECT * FROM tbl LIMIT ?';\nEXECUTE STMT USING @a;", "SET @skip=1; SET @numrows=5;\nPREPARE STMT FROM 'SELECT * FROM tbl LIMIT ?, ?';\nEXECUTE STMT USING @skip, @numrows;", "SELECT * FROM t1, t2 FOR SHARE OF t1 FOR UPDATE OF t2;"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/join.html"], "Title": ["15.2.13.2 JOIN Clause"], "Feature": ["table_references:\n    escaped_table_reference [, escaped_table_reference] ...\n\nescaped_table_reference: {\n    table_reference\n  | { OJ table_reference }\n}\n\ntable_reference: {\n    table_factor\n  | joined_table\n}\n\ntable_factor: {\n    tbl_name [PARTITION (partition_names)]\n        [[AS] alias] [index_hint_list]\n  | [LATERAL] table_subquery [AS] alias [(col_list)]\n  | ( table_references )\n}\n\njoined_table: {\n    table_reference {[INNER | CROSS] JOIN | STRAIGHT_JOIN} table_factor [join_specification]\n  | table_reference {LEFT|RIGHT} [OUTER] JOIN table_reference join_specification\n  | table_reference NATURAL [INNER | {LEFT|RIGHT} [OUTER]] JOIN table_factor\n}\n\njoin_specification: {\n    ON search_condition\n  | USING (join_column_list)\n}\n\njoin_column_list:\n    column_name [, column_name] ...\n\nindex_hint_list:\n    index_hint [, index_hint] ...\n\nindex_hint: {\n    USE {INDEX|KEY}\n      [FOR {JOIN|ORDER BY|GROUP BY}] ([index_list])\n  | {IGNORE|FORCE} {INDEX|KEY}\n      [FOR {JOIN|ORDER BY|GROUP BY}] (index_list)\n}\n\nindex_list:\n    index_name [, index_name] ...", "SELECT * FROM t1 LEFT JOIN (t2, t3, t4)\n                 ON (t2.a = t1.a AND t3.b = t1.b AND t4.c = t1.c)", "SELECT * FROM t1 LEFT JOIN (t2 CROSS JOIN t3 CROSS JOIN t4)\n                 ON (t2.a = t1.a AND t3.b = t1.b AND t4.c = t1.c)", "a LEFT JOIN b USING (c1, c2, c3)", "COALESCE(x, y) = (CASE WHEN x IS NOT NULL THEN x ELSE y END)", "a LEFT JOIN b USING (c1, c2, c3)\na LEFT JOIN b ON a.c1 = b.c1 AND a.c2 = b.c2 AND a.c3 = b.c3", "COALESCE(a.c1, b.c1), COALESCE(a.c2, b.c2), COALESCE(a.c3, b.c3)"], "Description": ["\n        MySQL supports the following JOIN syntax for\n        the table_references part of\n        SELECT statements and\n        multiple-table DELETE and\n        UPDATE statements:\n      ", "\n        A table reference is also known as a join expression.\n      ", "\n        A table reference (when it refers to a partitioned table) may\n        contain a PARTITION clause, including a list\n        of comma-separated partitions, subpartitions, or both. This\n        option follows the name of the table and precedes any alias\n        declaration. The effect of this option is that rows are selected\n        only from the listed partitions or subpartitions. Any partitions\n        or subpartitions not named in the list are ignored. For more\n        information and examples, see\n        Section\u00a026.5, \u201cPartition Selection\u201d.\n      ", "\n        The syntax of table_factor is\n        extended in MySQL in comparison with standard SQL. The standard\n        accepts only table_reference, not a\n        list of them inside a pair of parentheses.\n      ", "\n        This is a conservative extension if each comma in a list of\n        table_reference items is considered\n        as equivalent to an inner join. For example:\n      ", "\n        is equivalent to:\n      ", "\n        In MySQL, JOIN, CROSS\n        JOIN, and INNER JOIN are syntactic\n        equivalents (they can replace each other). In standard SQL, they\n        are not equivalent. INNER JOIN is used with\n        an ON clause, CROSS JOIN\n        is used otherwise.\n      ", "\n        In general, parentheses can be ignored in join expressions\n        containing only inner join operations. MySQL also supports\n        nested joins. See Section\u00a010.2.1.8, \u201cNested Join Optimization\u201d.\n      ", "\n        Index hints can be specified to affect how the MySQL optimizer\n        makes use of indexes. For more information, see\n        Section\u00a010.9.4, \u201cIndex Hints\u201d. Optimizer hints and the\n        optimizer_switch system variable are other\n        ways to influence optimizer use of indexes. See\n        Section\u00a010.9.3, \u201cOptimizer Hints\u201d, and\n        Section\u00a010.9.2, \u201cSwitchable Optimizations\u201d.\n      ", "\n        The following list describes general factors to take into\n        account when writing joins:\n", "\n\n            A table reference can be aliased using\n            tbl_name AS\n            alias_name or\n            tbl_name alias_name:\n          Press CTRL+C to copy SELECT t1.name, t2.salary\n  FROM employee AS t1 INNER JOIN info AS t2 ON t1.name = t2.name;\n\nSELECT t1.name, t2.salary\n  FROM employee t1 INNER JOIN info t2 ON t1.name = t2.name;\n            A table_subquery is also known as\n            a derived table or subquery in the FROM\n            clause. See Section\u00a015.2.15.8, \u201cDerived Tables\u201d. Such\n            subqueries must include an alias to\n            give the subquery result a table name, and may optionally\n            include a list of table column names in parentheses. A\n            trivial example follows:\n          Press CTRL+C to copy SELECT * FROM (SELECT 1, 2, 3) AS t1;\n            The maximum number of tables that can be referenced in a\n            single join is 61. This includes a join handled by merging\n            derived tables and views in the FROM\n            clause into the outer query block (see\n            Section\u00a010.2.2.4, \u201cOptimizing Derived Tables, View References, and Common Table Expressions\n          with Merging or Materialization\u201d).\n          \nINNER JOIN and ,\n            (comma) are semantically equivalent in the absence of a join\n            condition: both produce a Cartesian product between the\n            specified tables (that is, each and every row in the first\n            table is joined to each and every row in the second table).\n          \n            However, the precedence of the comma operator is less than\n            that of INNER JOIN, CROSS\n            JOIN, LEFT JOIN, and so on. If\n            you mix comma joins with the other join types when there is\n            a join condition, an error of the form Unknown\n            column 'col_name' in 'on\n            clause' may occur. Information about dealing with\n            this problem is given later in this section.\n          \n            The search_condition used with\n            ON is any conditional expression of the\n            form that can be used in a WHERE clause.\n            Generally, the ON clause serves for\n            conditions that specify how to join tables, and the\n            WHERE clause restricts which rows to\n            include in the result set.\n          \n            If there is no matching row for the right table in the\n            ON or USING part in a\n            LEFT JOIN, a row with all columns set to\n            NULL is used for the right table. You can\n            use this fact to find rows in a table that have no\n            counterpart in another table:\n          Press CTRL+C to copy SELECT left_tbl.*\n  FROM left_tbl LEFT JOIN right_tbl ON left_tbl.id = right_tbl.id\n  WHERE right_tbl.id IS NULL;\n            This example finds all rows in left_tbl\n            with an id value that is not present in\n            right_tbl (that is, all rows in\n            left_tbl with no corresponding row in\n            right_tbl). See\n            Section\u00a010.2.1.9, \u201cOuter Join Optimization\u201d.\n          \n            The\n            USING(join_column_list)\n            clause names a list of columns that must exist in both\n            tables. If tables a and\n            b both contain columns\n            c1, c2, and\n            c3, the following join compares\n            corresponding columns from the two tables:\n          Press CTRL+C to copy a LEFT JOIN b USING (c1, c2, c3)\n            The NATURAL [LEFT] JOIN of two tables is\n            defined to be semantically equivalent to an INNER\n            JOIN or a LEFT JOIN with a\n            USING clause that names all columns that\n            exist in both tables.\n          \nRIGHT JOIN works analogously to\n            LEFT JOIN. To keep code portable across\n            databases, it is recommended that you use LEFT\n            JOIN instead of RIGHT JOIN.\n          \n\n\n\n            The { OJ ... } syntax shown in the join\n            syntax description exists only for compatibility with ODBC.\n            The curly braces in the syntax should be written literally;\n            they are not metasyntax as used elsewhere in syntax\n            descriptions.\n          Press CTRL+C to copy SELECT left_tbl.*\n    FROM { OJ left_tbl LEFT OUTER JOIN right_tbl\n           ON left_tbl.id = right_tbl.id }\n    WHERE right_tbl.id IS NULL;\n            You can use other types of joins within { OJ ...\n            }, such as INNER JOIN or\n            RIGHT OUTER JOIN. This helps with\n            compatibility with some third-party applications, but is not\n            official ODBC syntax.\n          \nSTRAIGHT_JOIN is similar to\n            JOIN, except that the left table is\n            always read before the right table. This can be used for\n            those (few) cases for which the join optimizer processes the\n            tables in a suboptimal order.\n\n", "\n        Some join examples:\n      ", "Press CTRL+C to copy SELECT * FROM table1, table2;\n\nSELECT * FROM table1 INNER JOIN table2 ON table1.id = table2.id;\n\nSELECT * FROM table1 LEFT JOIN table2 ON table1.id = table2.id;\n\nSELECT * FROM table1 LEFT JOIN table2 USING (id);\n\nSELECT * FROM table1 LEFT JOIN table2 ON table1.id = table2.id\n  LEFT JOIN table3 ON table2.id = table3.id;", "\n        Natural joins and joins with USING, including\n        outer join variants, are processed according to the SQL:2003\n        standard:\n", "\n\n            Redundant columns of a NATURAL join do\n            not appear. Consider this set of statements:\n          Press CTRL+C to copy CREATE TABLE t1 (i INT, j INT);\nCREATE TABLE t2 (k INT, j INT);\nINSERT INTO t1 VALUES(1, 1);\nINSERT INTO t2 VALUES(1, 1);\nSELECT * FROM t1 NATURAL JOIN t2;\nSELECT * FROM t1 JOIN t2 USING (j);\n            In the first SELECT\n            statement, column j appears in both\n            tables and thus becomes a join column, so, according to\n            standard SQL, it should appear only once in the output, not\n            twice. Similarly, in the second SELECT statement, column\n            j is named in the\n            USING clause and should appear only once\n            in the output, not twice.\n          \n            Thus, the statements produce this output:\n          Press CTRL+C to copy +------+------+------+\n| j    | i    | k    |\n+------+------+------+\n|    1 |    1 |    1 |\n+------+------+------+\n+------+------+------+\n| j    | i    | k    |\n+------+------+------+\n|    1 |    1 |    1 |\n+------+------+------+\n            Redundant column elimination and column ordering occurs\n            according to standard SQL, producing this display order:\n\n\n\n                First, coalesced common columns of the two joined\n                tables, in the order in which they occur in the first\n                table\n              \n                Second, columns unique to the first table, in order in\n                which they occur in that table\n              \n                Third, columns unique to the second table, in order in\n                which they occur in that table\n\n\n\n            The single result column that replaces two common columns is\n            defined using the coalesce operation. That is, for two\n            t1.a and t2.a the\n            resulting single join column a is defined\n            as a = COALESCE(t1.a, t2.a), where:\n          Press CTRL+C to copy COALESCE(x, y) = (CASE WHEN x IS NOT NULL THEN x ELSE y END)\n            If the join operation is any other join, the result columns\n            of the join consist of the concatenation of all columns of\n            the joined tables.\n          \n            A consequence of the definition of coalesced columns is\n            that, for outer joins, the coalesced column contains the\n            value of the non-NULL column if one of\n            the two columns is always NULL. If\n            neither or both columns are NULL, both\n            common columns have the same value, so it doesn't matter\n            which one is chosen as the value of the coalesced column. A\n            simple way to interpret this is to consider that a coalesced\n            column of an outer join is represented by the common column\n            of the inner table of a JOIN. Suppose\n            that the tables t1(a, b) and\n            t2(a, c) have the following contents:\n          Press CTRL+C to copy t1    t2\n----  ----\n1 x   2 z\n2 y   3 w\n            Then, for this join, column a contains\n            the values of t1.a:\n          Press CTRL+C to copy mysql> SELECT * FROM t1 NATURAL LEFT JOIN t2;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|    1 | x    | NULL |\n|    2 | y    | z    |\n+------+------+------+\n            By contrast, for this join, column a\n            contains the values of t2.a.\n          Press CTRL+C to copy mysql> SELECT * FROM t1 NATURAL RIGHT JOIN t2;\n+------+------+------+\n| a    | c    | b    |\n+------+------+------+\n|    2 | z    | y    |\n|    3 | w    | NULL |\n+------+------+------+\n            Compare those results to the otherwise equivalent queries\n            with JOIN ... ON:\n          Press CTRL+C to copy mysql> SELECT * FROM t1 LEFT JOIN t2 ON (t1.a = t2.a);\n+------+------+------+------+\n| a    | b    | a    | c    |\n+------+------+------+------+\n|    1 | x    | NULL | NULL |\n|    2 | y    |    2 | z    |\n+------+------+------+------+Press CTRL+C to copy mysql> SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a = t2.a);\n+------+------+------+------+\n| a    | b    | a    | c    |\n+------+------+------+------+\n|    2 | y    |    2 | z    |\n| NULL | NULL |    3 | w    |\n+------+------+------+------+\n            A USING clause can be rewritten as an\n            ON clause that compares corresponding\n            columns. However, although USING and\n            ON are similar, they are not quite the\n            same. Consider the following two queries:\n          Press CTRL+C to copy a LEFT JOIN b USING (c1, c2, c3)\na LEFT JOIN b ON a.c1 = b.c1 AND a.c2 = b.c2 AND a.c3 = b.c3\n            With respect to determining which rows satisfy the join\n            condition, both joins are semantically identical.\n          \n            With respect to determining which columns to display for\n            SELECT * expansion, the two joins are not\n            semantically identical. The USING join\n            selects the coalesced value of corresponding columns,\n            whereas the ON join selects all columns\n            from all tables. For the USING join,\n            SELECT * selects these values:\n          Press CTRL+C to copy COALESCE(a.c1, b.c1), COALESCE(a.c2, b.c2), COALESCE(a.c3, b.c3)\n            For the ON join, SELECT\n            * selects these values:\n          Press CTRL+C to copy a.c1, a.c2, a.c3, b.c1, b.c2, b.c3\n            With an inner join, COALESCE(a.c1,\n            b.c1) is the same as either\n            a.c1 or b.c1 because\n            both columns have the same value. With an outer join (such\n            as LEFT JOIN), one of the two columns can\n            be NULL. That column is omitted from the\n            result.\n          \n            An ON clause can refer only to its\n            operands.\n          \n            Example:\n          Press CTRL+C to copy CREATE TABLE t1 (i1 INT);\nCREATE TABLE t2 (i2 INT);\nCREATE TABLE t3 (i3 INT);\nSELECT * FROM t1 JOIN t2 ON (i1 = i3) JOIN t3;\n            The statement fails with an Unknown column 'i3' in\n            'on clause' error because i3 is\n            a column in t3, which is not an operand\n            of the ON clause. To enable the join to\n            be processed, rewrite the statement as follows:\n          Press CTRL+C to copy SELECT * FROM t1 JOIN t2 JOIN t3 ON (i1 = i3);\nJOIN has higher precedence than the comma\n            operator (,), so the join expression\n            t1, t2 JOIN t3 is interpreted as\n            (t1, (t2 JOIN t3)), not as ((t1,\n            t2) JOIN t3). This affects statements that use an\n            ON clause because that clause can refer\n            only to columns in the operands of the join, and the\n            precedence affects interpretation of what those operands\n            are.\n          \n            Example:\n          Press CTRL+C to copy CREATE TABLE t1 (i1 INT, j1 INT);\nCREATE TABLE t2 (i2 INT, j2 INT);\nCREATE TABLE t3 (i3 INT, j3 INT);\nINSERT INTO t1 VALUES(1, 1);\nINSERT INTO t2 VALUES(1, 1);\nINSERT INTO t3 VALUES(1, 1);\nSELECT * FROM t1, t2 JOIN t3 ON (t1.i1 = t3.i3);\n            The JOIN takes precedence over the comma\n            operator, so the operands for the ON\n            clause are t2 and t3.\n            Because t1.i1 is not a column in either\n            of the operands, the result is an Unknown column\n            't1.i1' in 'on clause' error.\n          \n            To enable the join to be processed, use either of these\n            strategies:\n\n\n\n                Group the first two tables explicitly with parentheses\n                so that the operands for the ON\n                clause are (t1, t2) and\n                t3:\n              Press CTRL+C to copy SELECT * FROM (t1, t2) JOIN t3 ON (t1.i1 = t3.i3);\n                Avoid the use of the comma operator and use\n                JOIN instead:\n              Press CTRL+C to copy SELECT * FROM t1 JOIN t2 JOIN t3 ON (t1.i1 = t3.i3);\n\n\n            The same precedence interpretation also applies to\n            statements that mix the comma operator with INNER\n            JOIN, CROSS JOIN, LEFT\n            JOIN, and RIGHT JOIN, all of\n            which have higher precedence than the comma operator.\n          \n            A MySQL extension compared to the SQL:2003 standard is that\n            MySQL permits you to qualify the common (coalesced) columns\n            of NATURAL or USING\n            joins, whereas the standard disallows that.\n\n"], "Examples": ["SELECT t1.name, t2.salary\n  FROM employee AS t1 INNER JOIN info AS t2 ON t1.name = t2.name;\n\nSELECT t1.name, t2.salary\n  FROM employee t1 INNER JOIN info t2 ON t1.name = t2.name;", "SELECT * FROM (SELECT 1, 2, 3) AS t1;", "SELECT left_tbl.*\n  FROM left_tbl LEFT JOIN right_tbl ON left_tbl.id = right_tbl.id\n  WHERE right_tbl.id IS NULL;", "SELECT left_tbl.*\n    FROM { OJ left_tbl LEFT OUTER JOIN right_tbl\n           ON left_tbl.id = right_tbl.id }\n    WHERE right_tbl.id IS NULL;", "SELECT * FROM table1, table2;\n\nSELECT * FROM table1 INNER JOIN table2 ON table1.id = table2.id;\n\nSELECT * FROM table1 LEFT JOIN table2 ON table1.id = table2.id;\n\nSELECT * FROM table1 LEFT JOIN table2 USING (id);\n\nSELECT * FROM table1 LEFT JOIN table2 ON table1.id = table2.id\n  LEFT JOIN table3 ON table2.id = table3.id;", "CREATE TABLE t1 (i INT, j INT);\nCREATE TABLE t2 (k INT, j INT);\nINSERT INTO t1 VALUES(1, 1);\nINSERT INTO t2 VALUES(1, 1);\nSELECT * FROM t1 NATURAL JOIN t2;\nSELECT * FROM t1 JOIN t2 USING (j);", "mysql> SELECT * FROM t1 NATURAL LEFT JOIN t2;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|    1 | x    | NULL |\n|    2 | y    | z    |\n+------+------+------+", "mysql> SELECT * FROM t1 NATURAL RIGHT JOIN t2;\n+------+------+------+\n| a    | c    | b    |\n+------+------+------+\n|    2 | z    | y    |\n|    3 | w    | NULL |\n+------+------+------+", "mysql> SELECT * FROM t1 LEFT JOIN t2 ON (t1.a = t2.a);\n+------+------+------+------+\n| a    | b    | a    | c    |\n+------+------+------+------+\n|    1 | x    | NULL | NULL |\n|    2 | y    |    2 | z    |\n+------+------+------+------+", "mysql> SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a = t2.a);\n+------+------+------+------+\n| a    | b    | a    | c    |\n+------+------+------+------+\n|    2 | y    |    2 | z    |\n| NULL | NULL |    3 | w    |\n+------+------+------+------+", "CREATE TABLE t1 (i1 INT);\nCREATE TABLE t2 (i2 INT);\nCREATE TABLE t3 (i3 INT);\nSELECT * FROM t1 JOIN t2 ON (i1 = i3) JOIN t3;", "SELECT * FROM t1 JOIN t2 JOIN t3 ON (i1 = i3);", "CREATE TABLE t1 (i1 INT, j1 INT);\nCREATE TABLE t2 (i2 INT, j2 INT);\nCREATE TABLE t3 (i3 INT, j3 INT);\nINSERT INTO t1 VALUES(1, 1);\nINSERT INTO t2 VALUES(1, 1);\nINSERT INTO t3 VALUES(1, 1);\nSELECT * FROM t1, t2 JOIN t3 ON (t1.i1 = t3.i3);", "SELECT * FROM (t1, t2) JOIN t3 ON (t1.i1 = t3.i3);", "SELECT * FROM t1 JOIN t2 JOIN t3 ON (t1.i1 = t3.i3);"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/set-operations.html"], "Title": ["15.2.14 Set Operations with UNION, INTERSECT, and EXCEPT"], "Feature": ["query_block [set_op query_block] [set_op query_block] ...\n\nquery_block:\n    SELECT | TABLE | VALUES\n\nset_op:\n    UNION | INTERSECT | EXCEPT", "query_expression:\n  [with_clause] /* WITH clause */ \n  query_expression_body\n  [order_by_clause] [limit_clause] [into_clause]\n\nquery_expression_body:\n    query_term\n |  query_expression_body UNION [ALL | DISTINCT] query_term\n |  query_expression_body EXCEPT [ALL | DISTINCT] query_term\n\nquery_term:\n    query_primary\n |  query_term INTERSECT [ALL | DISTINCT] query_primary\n\nquery_primary:\n    query_block\n |  '(' query_expression_body [order_by_clause] [limit_clause] [into_clause] ')'\n\nquery_block:   /* also known as a simple table */\n    query_specification                     /* SELECT statement */\n |  table_value_constructor                 /* VALUES statement */\n |  explicit_table                          /* TABLE statement  */"], "Description": ["\nResult Set Column Names and Data TypesSet Operations with TABLE and VALUES StatementsSet Operations using DISTINCT and ALLSet Operations with ORDER BY and LIMITLimitations of Set Operations\n", "\n      SQL set operations combine the results of multiple query blocks\n      into a single result. A query block,\n      sometimes also known as a simple table, is\n      any SQL statement that returns a result set, such as\n      SELECT. MySQL 8.4 also\n      supports TABLE and\n      VALUES statements. See the\n      individual descriptions of these statements elsewhere in this\n      chapter for additional information.\n    ", "\n      The SQL standard defines the following three set operations:\n", "\n\nUNION: Combine all results from\n          two query blocks into a single result, omitting any\n          duplicates.\n        \nINTERSECT: Combine only those\n          rows which the results of two query blocks have in common,\n          omitting any duplicates.\n        \nEXCEPT: For two query blocks\n          A and B,\n          return all results from A which are\n          not also present in B, omitting any\n          duplicates.\n        \n          (Some database systems, such as Oracle, use\n          MINUS for the name of this operator. This\n          is not supported in MySQL.)\n\n", "\n      MySQL supports UNION,\n      INTERSECT, and EXCEPT.\n    ", "\n      Each of these set operators supports an ALL\n      modifier. When the ALL keyword follows a set\n      operator, this causes duplicates to be included in the result. See\n      the following sections covering the individual operators for more\n      information and examples.\n    ", "\n      All three set operators also support a DISTINCT\n      keyword, which suppresses duplicates in the result. Since this is\n      the default behavior for set operators, it is usually not\n      necessary to specify DISTINCT explicitly.\n    ", "\n      In general, query blocks and set operations can be combined in any\n      number and order. A greatly simplified representation is shown\n      here:\n    ", "\n      This can be represented more accurately, and in greater detail,\n      like this:\n    ", "\n      You should be aware that INTERSECT is evaluated\n      before UNION or EXCEPT. This\n      means that, for example, TABLE x UNION TABLE y INTERSECT\n      TABLE z is always evaluated as TABLE x UNION\n      (TABLE y INTERSECT TABLE z). See\n      Section\u00a015.2.8, \u201cINTERSECT Clause\u201d, for more information.\n    ", "\n      In addition, you should keep in mind that, while the\n      UNION and INTERSECT set\n      operators are commutative (ordering is not significant),\n      EXCEPT is not (order of operands affects the\n      outcome). In other words, all of the following statements are\n      true:\n", "\n\nTABLE x UNION TABLE y and TABLE y\n          UNION TABLE x produce the same result, although the\n          ordering of the rows may differ. You can force them to be the\n          same using ORDER BY; see\n          Set Operations with ORDER BY and LIMIT.\n        \nTABLE x INTERSECT TABLE y and\n          TABLE y INTERSECT TABLE x return the same\n          result.\n        \nTABLE x EXCEPT TABLE y and TABLE y\n          EXCEPT TABLE x do not yield the\n          same result. See Section\u00a015.2.4, \u201cEXCEPT Clause\u201d, for an example.\n\n", "\n      More information and examples can be found in the sections that\n      follow.\n", "\n\n\n\nResult Set Column Names and Data Types\n\n\n\n\n        The column names for the result of a set operation are taken\n        from the column names of the first query block. Example:\n      Press CTRL+C to copy mysql> CREATE TABLE t1 (x INT, y INT);\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql> INSERT INTO t1 VALUES ROW(4,-2), ROW(5,9);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> CREATE TABLE t2 (a INT, b INT);\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql> INSERT INTO t2 VALUES ROW(1,2), ROW(3,4);\nQuery OK, 2 rows affected (0.01 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> TABLE t1 UNION TABLE t2;\n+------+------+\n| x    | y    |\n+------+------+\n|    4 |   -2 |\n|    5 |    9 |\n|    1 |    2 |\n|    3 |    4 |\n+------+------+\n4 rows in set (0.00 sec)\n\nmysql> TABLE t2 UNION TABLE t1;\n+------+------+\n| a    | b    |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n|    4 |   -2 |\n|    5 |    9 |\n+------+------+\n4 rows in set (0.00 sec)\n        This is true for UNION,\n        EXCEPT, and INTERSECT\n        queries.\n      \n        Selected columns listed in corresponding positions of each query\n        block should have the same data type. For example, the first\n        column selected by the first statement should have the same type\n        as the first column selected by the other statements. If the\n        data types of corresponding result columns do not match, the\n        types and lengths of the columns in the result take into account\n        the values retrieved by all of the query blocks. For example,\n        the column length in the result set is not constrained to the\n        length of the value from the first statement, as shown here:\n      Press CTRL+C to copy mysql> SELECT REPEAT('a',1) UNION SELECT REPEAT('b',20);\n+----------------------+\n| REPEAT('a',1)        |\n+----------------------+\n| a                    |\n| bbbbbbbbbbbbbbbbbbbb |\n+----------------------+\n", "\n\n\n\nSet Operations with TABLE and VALUES Statements\n\n\n\n\n        You can also use a TABLE\n        statement or VALUES statement\n        wherever you can employ the equivalent\n        SELECT statement. Assume that\n        tables t1 and t2 are\n        created and populated as shown here:\n      Press CTRL+C to copy CREATE TABLE t1 (x INT, y INT);\nINSERT INTO t1 VALUES ROW(4,-2),ROW(5,9);\n\nCREATE TABLE t2 (a INT, b INT);\nINSERT INTO t2 VALUES ROW(1,2),ROW(3,4);\n        The preceding being the case, and disregarding the column names\n        in the output of the queries beginning with\n        VALUES, all of the following\n        UNION queries yield the same result:\n      Press CTRL+C to copy SELECT * FROM t1 UNION SELECT * FROM t2;\nTABLE t1 UNION SELECT * FROM t2;\nVALUES ROW(4,-2), ROW(5,9) UNION SELECT * FROM t2;\nSELECT * FROM t1 UNION TABLE t2;\nTABLE t1 UNION TABLE t2;\nVALUES ROW(4,-2), ROW(5,9) UNION TABLE t2;\nSELECT * FROM t1 UNION VALUES ROW(4,-2),ROW(5,9);\nTABLE t1 UNION VALUES ROW(4,-2),ROW(5,9);\nVALUES ROW(4,-2), ROW(5,9) UNION VALUES ROW(4,-2),ROW(5,9);\n        To force the column names to be the same, wrap the query block\n        on the left-hand side in a SELECT statement,\n        and use aliases, like this:\n      Press CTRL+C to copy mysql> SELECT * FROM (TABLE t2) AS t(x,y) UNION TABLE t1;\n+------+------+\n| x    | y    |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n|    4 |   -2 |\n|    5 |    9 |\n+------+------+\n4 rows in set (0.00 sec)\n", "\n\n\n\nSet Operations using DISTINCT and ALL\n\n\n\n\n        By default, duplicate rows are removed from results of set\n        operations. The optional DISTINCT keyword has\n        the same effect but makes it explicit. With the optional\n        ALL keyword, duplicate-row removal does not\n        occur and the result includes all matching rows from all queries\n        in the union.\n      \n        You can mix ALL and\n        DISTINCT in the same query. Mixed types are\n        treated such that a set operation using\n        DISTINCT overrides any such operation using\n        ALL to its left. A\n        DISTINCT set can be produced explicitly by\n        using DISTINCT with\n        UNION,\n        INTERSECT, or\n        EXCEPT, or implicitly by using\n        the set operations with no following DISTINCT\n        or ALL keyword.\n      \n        Set operations work the same way when one or more\n        TABLE statements,\n        VALUES statements, or both, are\n        used to generate the set.\n\n", "\n\n\n\nSet Operations with ORDER BY and LIMIT\n\n\n\n\n        To apply an ORDER BY or\n        LIMIT clause to an individual query block\n        used as part of a union, intersection, or other set operation,\n        parenthesize the query block, placing the clause inside the\n        parentheses, like this:\n      Press CTRL+C to copy (SELECT a FROM t1 WHERE a=10 AND b=1 ORDER BY a LIMIT 10)\nUNION\n(SELECT a FROM t2 WHERE a=11 AND b=2 ORDER BY a LIMIT 10);\n\n(TABLE t1 ORDER BY x LIMIT 10) \nINTERSECT \n(TABLE t2 ORDER BY a LIMIT 10);\n        Use of ORDER BY for individual query blocks\n        or statements implies nothing about the order in which the rows\n        appear in the final result because the rows produced by a set\n        operation are by default unordered. Therefore, ORDER\n        BY in this context typically is used in conjunction\n        with LIMIT, to determine the subset of the\n        selected rows to retrieve, even though it does not necessarily\n        affect the order of those rows in the final result. If\n        ORDER BY appears without\n        LIMIT within a query block, it is optimized\n        away because it has no effect in any case.\n      \n        To use an ORDER BY or\n        LIMIT clause to sort or limit the entire\n        result of a set operation, place the ORDER BY\n        or LIMIT after the last statement:\n      Press CTRL+C to copy SELECT a FROM t1\nEXCEPT\nSELECT a FROM t2 WHERE a=11 AND b=2\nORDER BY a LIMIT 10;\n\nTABLE t1\nUNION \nTABLE t2\nORDER BY a LIMIT 10;\n        If one or more individual statements make use of ORDER\n        BY, LIMIT, or both, and, in\n        addition, you wish to apply an ORDER BY, LIMIT, or both to the\n        entire result, then each such individual statement must be\n        enclosed in parentheses.\n      Press CTRL+C to copy (SELECT a FROM t1 WHERE a=10 AND b=1)\nEXCEPT\n(SELECT a FROM t2 WHERE a=11 AND b=2)\nORDER BY a LIMIT 10;\n\n(TABLE t1 ORDER BY a LIMIT 10) \nUNION \nTABLE t2 \nORDER BY a LIMIT 10;\n        A statement with no ORDER BY or\n        LIMIT clause does need to be parenthesized;\n        replacing TABLE t2 with (TABLE\n        t2) in the second statement of the two just shown does\n        not alter the result of the UNION.\n      \n        You can also use ORDER BY and\n        LIMIT with\n        VALUES statements in set\n        operations, as shown in this example using the\n        mysql client:\n      Press CTRL+C to copy mysql> VALUES ROW(4,-2), ROW(5,9), ROW(-1,3) \n    -> UNION \n    -> VALUES ROW(1,2), ROW(3,4), ROW(-1,3) \n    -> ORDER BY column_0 DESC LIMIT 3;\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        5 |        9 |\n|        4 |       -2 |\n|        3 |        4 |\n+----------+----------+\n3 rows in set (0.00 sec)\n        (You should keep in mind that neither TABLE\n        statements nor VALUES statements accept a\n        WHERE clause.)\n      \n        This kind of ORDER BY cannot use column\n        references that include a table name (that is, names in\n        tbl_name.col_name\n        format). Instead, provide a column alias in the first query\n        block, and refer to the alias in the ORDER BY\n        clause. (You can also refer to the column in the ORDER\n        BY clause using its column position, but such use of\n        column positions is deprecated, and thus subject to eventual\n        removal in a future MySQL release.)\n      \n        If a column to be sorted is aliased, the ORDER\n        BY clause must refer to the\n        alias, not the column name. The first of the following\n        statements is permitted, but the second fails with an\n        Unknown column 'a' in 'order clause' error:\n      Press CTRL+C to copy (SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY b;\n(SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY a;\n        To cause rows in a UNION result\n        to consist of the sets of rows retrieved by each query block one\n        after the other, select an additional column in each query block\n        to use as a sort column and add an ORDER BY\n        clause that sorts on that column following the last query block:\n      Press CTRL+C to copy (SELECT 1 AS sort_col, col1a, col1b, ... FROM t1)\nUNION\n(SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col;\n        To maintain sort order within individual results, add a\n        secondary column to the ORDER BY clause:\n      Press CTRL+C to copy (SELECT 1 AS sort_col, col1a, col1b, ... FROM t1)\nUNION\n(SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col, col1a;\n        Use of an additional column also enables you to determine which\n        query block each row comes from. Extra columns can provide other\n        identifying information as well, such as a string that indicates\n        a table name.\n\n", "\n\n\n\nLimitations of Set Operations\n\n\n\n\n        Set operations in MySQL are subject to some limitations, which\n        are described in the next few paragraphs.\n      \n        Set operations including SELECT\n        statements have the following limitations:\n\n\n\nHIGH_PRIORITY in the first\n            SELECT has no effect.\n            HIGH_PRIORITY in any subsequent\n            SELECT produces a syntax error.\n          \n            Only the last SELECT statement can use an\n            INTO clause. However, the entire\n            UNION result is written to the\n            INTO output destination.\n\n\n\n        These two UNION variants containing\n        INTO are deprecated; you should expect\n        support for them to be removed in a future version of MySQL:\n\n\n\n            In the trailing query block of a query expression, use of\n            INTO before FROM\n            produces a warning. Example:\n          Press CTRL+C to copy ... UNION SELECT * INTO OUTFILE 'file_name' FROM table_name;\n            In a parenthesized trailing block of a query expression, use\n            of INTO (regardless of its position\n            relative to FROM) produces a warning.\n            Example:\n          Press CTRL+C to copy ... UNION (SELECT * INTO OUTFILE 'file_name' FROM table_name);\n            Those variants are deprecated because they are confusing, as\n            if they collect information from the named table rather than\n            the entire query expression (the UNION).\n\n\n\n        Set operations with an aggregate function in an ORDER\n        BY clause are rejected with\n        ER_AGGREGATE_ORDER_FOR_UNION.\n        Although the error name might suggest that this is exclusive to\n        UNION queries, the preceding is also true for\n        EXCEPT and INTERSECT\n        queries, as shown here:\n      Press CTRL+C to copy mysql> TABLE t1 INTERSECT TABLE t2 ORDER BY MAX(x);\nERROR 3028 (HY000): Expression #1 of ORDER BY contains aggregate function and applies to a UNION, EXCEPT or INTERSECT\n        A locking clause (such as FOR UPDATE or\n        LOCK IN SHARE MODE) applies to the query\n        block it follows. This means that, in a\n        SELECT statement used with set operations, a\n        locking clause can be used only if the query block and locking\n        clause are enclosed in parentheses.\n\n"], "Examples": ["mysql> CREATE TABLE t1 (x INT, y INT);\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql> INSERT INTO t1 VALUES ROW(4,-2), ROW(5,9);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> CREATE TABLE t2 (a INT, b INT);\nQuery OK, 0 rows affected (0.04 sec)\n\nmysql> INSERT INTO t2 VALUES ROW(1,2), ROW(3,4);\nQuery OK, 2 rows affected (0.01 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> TABLE t1 UNION TABLE t2;\n+------+------+\n| x    | y    |\n+------+------+\n|    4 |   -2 |\n|    5 |    9 |\n|    1 |    2 |\n|    3 |    4 |\n+------+------+\n4 rows in set (0.00 sec)\n\nmysql> TABLE t2 UNION TABLE t1;\n+------+------+\n| a    | b    |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n|    4 |   -2 |\n|    5 |    9 |\n+------+------+\n4 rows in set (0.00 sec)", "mysql> SELECT REPEAT('a',1) UNION SELECT REPEAT('b',20);\n+----------------------+\n| REPEAT('a',1)        |\n+----------------------+\n| a                    |\n| bbbbbbbbbbbbbbbbbbbb |\n+----------------------+", "CREATE TABLE t1 (x INT, y INT);\nINSERT INTO t1 VALUES ROW(4,-2),ROW(5,9);\n\nCREATE TABLE t2 (a INT, b INT);\nINSERT INTO t2 VALUES ROW(1,2),ROW(3,4);", "SELECT * FROM t1 UNION SELECT * FROM t2;\nTABLE t1 UNION SELECT * FROM t2;\nVALUES ROW(4,-2), ROW(5,9) UNION SELECT * FROM t2;\nSELECT * FROM t1 UNION TABLE t2;\nTABLE t1 UNION TABLE t2;\nVALUES ROW(4,-2), ROW(5,9) UNION TABLE t2;\nSELECT * FROM t1 UNION VALUES ROW(4,-2),ROW(5,9);\nTABLE t1 UNION VALUES ROW(4,-2),ROW(5,9);\nVALUES ROW(4,-2), ROW(5,9) UNION VALUES ROW(4,-2),ROW(5,9);", "mysql> SELECT * FROM (TABLE t2) AS t(x,y) UNION TABLE t1;\n+------+------+\n| x    | y    |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n|    4 |   -2 |\n|    5 |    9 |\n+------+------+\n4 rows in set (0.00 sec)", "(SELECT a FROM t1 WHERE a=10 AND b=1 ORDER BY a LIMIT 10)\nUNION\n(SELECT a FROM t2 WHERE a=11 AND b=2 ORDER BY a LIMIT 10);\n\n(TABLE t1 ORDER BY x LIMIT 10) \nINTERSECT \n(TABLE t2 ORDER BY a LIMIT 10);", "SELECT a FROM t1\nEXCEPT\nSELECT a FROM t2 WHERE a=11 AND b=2\nORDER BY a LIMIT 10;\n\nTABLE t1\nUNION \nTABLE t2\nORDER BY a LIMIT 10;", "(SELECT a FROM t1 WHERE a=10 AND b=1)\nEXCEPT\n(SELECT a FROM t2 WHERE a=11 AND b=2)\nORDER BY a LIMIT 10;\n\n(TABLE t1 ORDER BY a LIMIT 10) \nUNION \nTABLE t2 \nORDER BY a LIMIT 10;", "mysql> VALUES ROW(4,-2), ROW(5,9), ROW(-1,3) \n    -> UNION \n    -> VALUES ROW(1,2), ROW(3,4), ROW(-1,3) \n    -> ORDER BY column_0 DESC LIMIT 3;\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        5 |        9 |\n|        4 |       -2 |\n|        3 |        4 |\n+----------+----------+\n3 rows in set (0.00 sec)", "(SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY b;\n(SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY a;", "(SELECT 1 AS sort_col, col1a, col1b, ... FROM t1)\nUNION\n(SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col;", "(SELECT 1 AS sort_col, col1a, col1b, ... FROM t1)\nUNION\n(SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col, col1a;", "... UNION SELECT * INTO OUTFILE 'file_name' FROM table_name;", "... UNION (SELECT * INTO OUTFILE 'file_name' FROM table_name);", "mysql> TABLE t1 INTERSECT TABLE t2 ORDER BY MAX(x);\nERROR 3028 (HY000): Expression #1 of ORDER BY contains aggregate function and applies to a UNION, EXCEPT or INTERSECT"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/subquery-errors.html"], "Title": ["15.2.15.10 Subquery Errors"], "Feature": ["SELECT * FROM t1 WHERE s1 IN (SELECT s2 FROM t2 ORDER BY s1 LIMIT 1)"], "Description": ["\n        There are some errors that apply only to subqueries. This\n        section describes them.\n", "\n\n            Unsupported subquery syntax:\n          Press CTRL+C to copy ERROR 1235 (ER_NOT_SUPPORTED_YET)\nSQLSTATE = 42000\nMessage = \"This version of MySQL doesn't yet support\n'LIMIT & IN/ALL/ANY/SOME subquery'\"\n            This means that MySQL does not support statements like the\n            following:\n          Press CTRL+C to copy SELECT * FROM t1 WHERE s1 IN (SELECT s2 FROM t2 ORDER BY s1 LIMIT 1)\n            Incorrect number of columns from subquery:\n          Press CTRL+C to copy ERROR 1241 (ER_OPERAND_COL)\nSQLSTATE = 21000\nMessage = \"Operand should contain 1 column(s)\"\n            This error occurs in cases like this:\n          Press CTRL+C to copy SELECT (SELECT column1, column2 FROM t2) FROM t1;\n            You may use a subquery that returns multiple columns, if the\n            purpose is row comparison. In other contexts, the subquery\n            must be a scalar operand. See\n            Section\u00a015.2.15.5, \u201cRow Subqueries\u201d.\n          \n            Incorrect number of rows from subquery:\n          Press CTRL+C to copy ERROR 1242 (ER_SUBSELECT_NO_1_ROW)\nSQLSTATE = 21000\nMessage = \"Subquery returns more than 1 row\"\n            This error occurs for statements where the subquery must\n            return at most one row but returns multiple rows. Consider\n            the following example:\n          Press CTRL+C to copy SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);\n            If SELECT column1 FROM t2 returns just\n            one row, the previous query works. If the subquery returns\n            more than one row, error 1242 occurs. In that case, the\n            query should be rewritten as:\n          Press CTRL+C to copy SELECT * FROM t1 WHERE column1 = ANY (SELECT column1 FROM t2);\n            Incorrectly used table in subquery:\n          Press CTRL+C to copy Error 1093 (ER_UPDATE_TABLE_USED)\nSQLSTATE = HY000\nMessage = \"You can't specify target table 'x'\nfor update in FROM clause\"\n            This error occurs in cases such as the following, which\n            attempts to modify a table and select from the same table in\n            the subquery:\n          Press CTRL+C to copy UPDATE t1 SET column2 = (SELECT MAX(column1) FROM t1);\n            You can use a common table expression or derived table to\n            work around this. See\n            Section\u00a015.2.15.12, \u201cRestrictions on Subqueries\u201d.\n\n", "\n        All of the errors described in this section also apply when\n        using TABLE in subqueries.\n      ", "\n        For transactional storage engines, the failure of a subquery\n        causes the entire statement to fail. For nontransactional\n        storage engines, data modifications made before the error was\n        encountered are preserved.\n"], "Examples": ["SELECT (SELECT column1, column2 FROM t2) FROM t1;", "SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);", "SELECT * FROM t1 WHERE column1 = ANY (SELECT column1 FROM t2);", "UPDATE t1 SET column2 = (SELECT MAX(column1) FROM t1);"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/subquery-restrictions.html"], "Title": ["15.2.15.12 Restrictions on Subqueries"], "Feature": ["(expr_1, ..., expr_n) [NOT] IN table_subquery", "(expr_1, ..., expr_n) op {ALL|ANY|SOME} subquery"], "Description": ["\n\n            In general, you cannot modify a table and select from the\n            same table in a subquery. For example, this limitation\n            applies to statements of the following forms:\n          Press CTRL+C to copy DELETE FROM t WHERE ... (SELECT ... FROM t ...);\nUPDATE t ... WHERE col = (SELECT ... FROM t ...);\n{INSERT|REPLACE} INTO t (SELECT ... FROM t ...);\n            Exception: The preceding prohibition does not apply if for\n            the modified table you are using a derived table and that\n            derived table is materialized rather than merged into the\n            outer query. (See\n            Section\u00a010.2.2.4, \u201cOptimizing Derived Tables, View References, and Common Table Expressions\n          with Merging or Materialization\u201d.) Example:\n          Press CTRL+C to copy UPDATE t ... WHERE col = (SELECT * FROM (SELECT ... FROM t...) AS dt ...);\n            Here the result from the derived table is materialized as a\n            temporary table, so the relevant rows in\n            t have already been selected by the time\n            the update to t takes place.\n          \n            In general, you may be able to influence the optimizer to\n            materialize a derived table by adding a\n            NO_MERGE optimizer hint.\n            See Section\u00a010.9.3, \u201cOptimizer Hints\u201d.\n          \n            Row comparison operations are only partially supported:\n\n\n\n                For expr [NOT] IN\n                subquery,\n                expr can be an\n                n-tuple (specified using row\n                constructor syntax) and the subquery can return rows of\n                n-tuples. The permitted\n                syntax is therefore more specifically expressed as\n                row_constructor\n                [NOT] IN\n                table_subquery\n\n                For expr\nop {ALL|ANY|SOME}\n                subquery,\n                expr must be a scalar value\n                and the subquery must be a column subquery; it cannot\n                return multiple-column rows.\n\n\n\n            In other words, for a subquery that returns rows of\n            n-tuples, this is supported:\n          Press CTRL+C to copy (expr_1, ..., expr_n) [NOT] IN table_subquery\n            But this is not supported:\n          Press CTRL+C to copy (expr_1, ..., expr_n) op {ALL|ANY|SOME} subquery\n            The reason for supporting row comparisons for\n            IN but not for the others is that\n            IN is implemented by rewriting it as a\n            sequence of =\n            comparisons and AND operations.\n            This approach cannot be used for ALL,\n            ANY, or SOME.\n          \n            MySQL does not support LIMIT in\n            subqueries for certain subquery operators:\n          Press CTRL+C to copy mysql> SELECT * FROM t1\n       WHERE s1 IN (SELECT s2 FROM t2 ORDER BY s1 LIMIT 1);\nERROR 1235 (42000): This version of MySQL doesn't yet support\n 'LIMIT & IN/ALL/ANY/SOME subquery'\n            See Section\u00a015.2.15.10, \u201cSubquery Errors\u201d.\n          \n            MySQL permits a subquery to refer to a stored function that\n            has data-modifying side effects such as inserting rows into\n            a table. For example, if f() inserts\n            rows, the following query can modify data:\n          Press CTRL+C to copy SELECT ... WHERE x IN (SELECT f() ...);\n            This behavior is an extension to the SQL standard. In MySQL,\n            it can produce nondeterministic results because\n            f() might be executed a different number\n            of times for different executions of a given query depending\n            on how the optimizer chooses to handle it.\n          \n            For statement-based or mixed-format replication, one\n            implication of this indeterminism is that such a query can\n            produce different results on the source and its replicas.\n\n"], "Examples": ["DELETE FROM t WHERE ... (SELECT ... FROM t ...);\nUPDATE t ... WHERE col = (SELECT ... FROM t ...);\n{INSERT|REPLACE} INTO t (SELECT ... FROM t ...);", "UPDATE t ... WHERE col = (SELECT * FROM (SELECT ... FROM t...) AS dt ...);", "mysql> SELECT * FROM t1\n       WHERE s1 IN (SELECT s2 FROM t2 ORDER BY s1 LIMIT 1);\nERROR 1235 (42000): This version of MySQL doesn't yet support\n 'LIMIT & IN/ALL/ANY/SOME subquery'", "SELECT ... WHERE x IN (SELECT f() ...);"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparisons-using-subqueries.html"], "Title": ["15.2.15.2 Comparisons Using Subqueries"], "Feature": ["non_subquery_operand comparison_operator (subquery)", "=  >  <  >=  <=  <>  !=  <=>", "... WHERE 'a' = (SELECT column1 FROM t1)", "non_subquery_operand LIKE (subquery)"], "Description": ["\n        The most common use of a subquery is in the form:\n      ", "\n        Where comparison_operator is one of\n        these operators:\n      ", "\n        For example:\n      ", "\n        MySQL also permits this construct:\n      ", "\n        At one time the only legal place for a subquery was on the right\n        side of a comparison, and you might still find some old DBMSs\n        that insist on this.\n      ", "\n        Here is an example of a common-form subquery comparison that you\n        cannot do with a join. It finds all the rows in table\n        t1 for which the column1\n        value is equal to a maximum value in table\n        t2:\n      ", "Press CTRL+C to copy SELECT * FROM t1\n  WHERE column1 = (SELECT MAX(column2) FROM t2);", "\n        Here is another example, which again is impossible with a join\n        because it involves aggregating for one of the tables. It finds\n        all rows in table t1 containing a value that\n        occurs twice in a given column:\n      ", "Press CTRL+C to copy SELECT * FROM t1 AS t\n  WHERE 2 = (SELECT COUNT(*) FROM t1 WHERE t1.id = t.id);", "\n        For a comparison of the subquery to a scalar, the subquery must\n        return a scalar. For a comparison of the subquery to a row\n        constructor, the subquery must be a row subquery that returns a\n        row with the same number of values as the row constructor. See\n        Section\u00a015.2.15.5, \u201cRow Subqueries\u201d.\n"], "Examples": ["SELECT * FROM t1\n  WHERE column1 = (SELECT MAX(column2) FROM t2);", "SELECT * FROM t1 AS t\n  WHERE 2 = (SELECT COUNT(*) FROM t1 WHERE t1.id = t.id);"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/any-in-some-subqueries.html"], "Title": ["15.2.15.3 Subqueries with ANY, IN, or SOME"], "Feature": ["operand comparison_operator ANY (subquery)\noperand IN (subquery)\noperand comparison_operator SOME (subquery)", "=  >  <  >=  <=  <>  !="], "Description": ["\n        Syntax:\n      ", "\n        Where comparison_operator is one of\n        these operators:\n      ", "\n        The ANY keyword, which must follow a\n        comparison operator, means \u201creturn TRUE\n        if the comparison is TRUE for\n        ANY of the values in the column that the\n        subquery returns.\u201d For example:\n      ", "Press CTRL+C to copy SELECT s1 FROM t1 WHERE s1 > ANY (SELECT s1 FROM t2);", "\n        Suppose that there is a row in table t1\n        containing (10). The expression is\n        TRUE if table t2 contains\n        (21,14,7) because there is a value\n        7 in t2 that is less than\n        10. The expression is\n        FALSE if table t2 contains\n        (20,10), or if table t2 is\n        empty. The expression is unknown (that is,\n        NULL) if table t2 contains\n        (NULL,NULL,NULL).\n      ", "\n        When used with a subquery, the word IN is an\n        alias for = ANY. Thus, these two statements\n        are the same:\n      ", "Press CTRL+C to copy SELECT s1 FROM t1 WHERE s1 = ANY (SELECT s1 FROM t2);\nSELECT s1 FROM t1 WHERE s1 IN    (SELECT s1 FROM t2);", "\nIN and = ANY are not\n        synonyms when used with an expression list.\n        IN can take an expression list, but\n        = ANY cannot. See\n        Section\u00a014.4.2, \u201cComparison Functions and Operators\u201d.\n      ", "\nNOT IN is not an alias for <>\n        ANY, but for <> ALL. See\n        Section\u00a015.2.15.4, \u201cSubqueries with ALL\u201d.\n      ", "\n        The word SOME is an alias for\n        ANY. Thus, these two statements are the same:\n      ", "Press CTRL+C to copy SELECT s1 FROM t1 WHERE s1 <> ANY  (SELECT s1 FROM t2);\nSELECT s1 FROM t1 WHERE s1 <> SOME (SELECT s1 FROM t2);", "\n        Use of the word SOME is rare, but this\n        example shows why it might be useful. To most people, the\n        English phrase \u201ca is not equal to any b\u201d means\n        \u201cthere is no b which is equal to a,\u201d but that is\n        not what is meant by the SQL syntax. The syntax means\n        \u201cthere is some b to which a is not equal.\u201d Using\n        <> SOME instead helps ensure that\n        everyone understands the true meaning of the query.\n      ", "\n        You can use TABLE in a scalar\n        IN, ANY, or\n        SOME subquery provided the table contains\n        only a single column. If t2 has only one\n        column, the statements shown previously in this section can be\n        written as shown here, in each case substituting TABLE\n        t2 for SELECT s1 FROM t2:\n      ", "Press CTRL+C to copy SELECT s1 FROM t1 WHERE s1 > ANY (TABLE t2);\n\nSELECT s1 FROM t1 WHERE s1 = ANY (TABLE t2);\n\nSELECT s1 FROM t1 WHERE s1 IN (TABLE t2);\n\nSELECT s1 FROM t1 WHERE s1 <> ANY  (TABLE t2);\n\nSELECT s1 FROM t1 WHERE s1 <> SOME (TABLE t2);"], "Examples": ["SELECT s1 FROM t1 WHERE s1 > ANY (SELECT s1 FROM t2);", "SELECT s1 FROM t1 WHERE s1 = ANY (SELECT s1 FROM t2);\nSELECT s1 FROM t1 WHERE s1 IN    (SELECT s1 FROM t2);", "SELECT s1 FROM t1 WHERE s1 <> ANY  (SELECT s1 FROM t2);\nSELECT s1 FROM t1 WHERE s1 <> SOME (SELECT s1 FROM t2);", "SELECT s1 FROM t1 WHERE s1 > ANY (TABLE t2);\n\nSELECT s1 FROM t1 WHERE s1 = ANY (TABLE t2);\n\nSELECT s1 FROM t1 WHERE s1 IN (TABLE t2);\n\nSELECT s1 FROM t1 WHERE s1 <> ANY  (TABLE t2);\n\nSELECT s1 FROM t1 WHERE s1 <> SOME (TABLE t2);"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/all-subqueries.html"], "Title": ["15.2.15.4 Subqueries with ALL"], "Feature": ["operand comparison_operator ALL (subquery)"], "Description": ["\n        Syntax:\n      ", "\n        The word ALL, which must follow a comparison\n        operator, means \u201creturn TRUE if the\n        comparison is TRUE for ALL\n        of the values in the column that the subquery returns.\u201d\n        For example:\n      ", "Press CTRL+C to copy SELECT s1 FROM t1 WHERE s1 > ALL (SELECT s1 FROM t2);", "\n        Suppose that there is a row in table t1\n        containing (10). The expression is\n        TRUE if table t2 contains\n        (-5,0,+5) because 10 is\n        greater than all three values in t2. The\n        expression is FALSE if table\n        t2 contains\n        (12,6,NULL,-100) because there is a single\n        value 12 in table t2 that\n        is greater than 10. The expression is\n        unknown (that is, NULL)\n        if table t2 contains\n        (0,NULL,1).\n      ", "\n        Finally, the expression is TRUE if table\n        t2 is empty. So, the following expression is\n        TRUE when table t2 is\n        empty:\n      ", "Press CTRL+C to copy SELECT * FROM t1 WHERE 1 > ALL (SELECT s1 FROM t2);", "\n        But this expression is NULL when table\n        t2 is empty:\n      ", "Press CTRL+C to copy SELECT * FROM t1 WHERE 1 > (SELECT s1 FROM t2);", "\n        In addition, the following expression is NULL\n        when table t2 is empty:\n      ", "Press CTRL+C to copy SELECT * FROM t1 WHERE 1 > ALL (SELECT MAX(s1) FROM t2);", "\n        In general, tables containing NULL\n        values and empty tables are\n        \u201cedge cases.\u201d When writing subqueries, always\n        consider whether you have taken those two possibilities into\n        account.\n      ", "\nNOT IN is an alias for <>\n        ALL. Thus, these two statements are the same:\n      ", "Press CTRL+C to copy SELECT s1 FROM t1 WHERE s1 <> ALL (SELECT s1 FROM t2);\nSELECT s1 FROM t1 WHERE s1 NOT IN (SELECT s1 FROM t2);", "\n        As with IN, ANY, and\n        SOME, you can use\n        TABLE with ALL\n        and NOT IN provided that the following two\n        conditions are met:\n", "\n\n            The table in the subquery contains only one column\n          \n            The subquery does not depend on a column expression\n\n", "\n        For example, assuming that table t2 consists\n        of a single column, the last two statements shown previously can\n        be written using TABLE t2 like this:\n      ", "Press CTRL+C to copy SELECT s1 FROM t1 WHERE s1 <> ALL (TABLE t2);\nSELECT s1 FROM t1 WHERE s1 NOT IN (TABLE t2);", "\n        A query such as SELECT * FROM t1 WHERE 1 > ALL\n        (SELECT MAX(s1) FROM t2); cannot be written using\n        TABLE t2 because the subquery depends on a\n        column expression.\n"], "Examples": ["SELECT s1 FROM t1 WHERE s1 > ALL (SELECT s1 FROM t2);", "SELECT * FROM t1 WHERE 1 > ALL (SELECT s1 FROM t2);", "SELECT * FROM t1 WHERE 1 > (SELECT s1 FROM t2);", "SELECT * FROM t1 WHERE 1 > ALL (SELECT MAX(s1) FROM t2);", "SELECT s1 FROM t1 WHERE s1 <> ALL (SELECT s1 FROM t2);\nSELECT s1 FROM t1 WHERE s1 NOT IN (SELECT s1 FROM t2);", "SELECT s1 FROM t1 WHERE s1 <> ALL (TABLE t2);\nSELECT s1 FROM t1 WHERE s1 NOT IN (TABLE t2);"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/row-subqueries.html"], "Title": ["15.2.15.5 Row Subqueries"], "Feature": ["=  >  <  >=  <=  <>  !=  <=>", "SELECT * FROM t1 WHERE ROW(1) = (SELECT column1 FROM t2)"], "Description": ["\n        Scalar or column subqueries return a single value or a column of\n        values. A row subquery is a subquery\n        variant that returns a single row and can thus return more than\n        one column value. Legal operators for row subquery comparisons\n        are:\n      ", "\n        Here are two examples:\n      ", "Press CTRL+C to copy SELECT * FROM t1\n  WHERE (col1,col2) = (SELECT col3, col4 FROM t2 WHERE id = 10);\nSELECT * FROM t1\n  WHERE ROW(col1,col2) = (SELECT col3, col4 FROM t2 WHERE id = 10);", "\n        For both queries, if the table t2 contains a\n        single row with id = 10, the subquery returns\n        a single row. If this row has col3 and\n        col4 values equal to the\n        col1 and col2 values of\n        any rows in t1, the WHERE\n        expression is TRUE and each query returns\n        those t1 rows. If the t2\n        row col3 and col4 values\n        are not equal the col1 and\n        col2 values of any t1 row,\n        the expression is FALSE and the query returns\n        an empty result set. The expression is\n        unknown (that is, NULL)\n        if the subquery produces no rows. An error occurs if the\n        subquery produces multiple rows because a row subquery can\n        return at most one row.\n      ", "\n        For information about how each operator works for row\n        comparisons, see Section\u00a014.4.2, \u201cComparison Functions and Operators\u201d.\n      ", "\n        The expressions (1,2) and\n        ROW(1,2) are sometimes called\n        row constructors. The two\n        are equivalent. The row constructor and the row returned by the\n        subquery must contain the same number of values.\n      ", "\n        A row constructor is used for comparisons with subqueries that\n        return two or more columns. When a subquery returns a single\n        column, this is regarded as a scalar value and not as a row, so\n        a row constructor cannot be used with a subquery that does not\n        return at least two columns. Thus, the following query fails\n        with a syntax error:\n      ", "\n        Row constructors are legal in other contexts. For example, the\n        following two statements are semantically equivalent (and are\n        handled in the same way by the optimizer):\n      ", "Press CTRL+C to copy SELECT * FROM t1 WHERE (column1,column2) = (1,1);\nSELECT * FROM t1 WHERE column1 = 1 AND column2 = 1;", "\n        The following query answers the request, \u201cfind all rows in\n        table t1 that also exist in table\n        t2\u201d:\n      ", "Press CTRL+C to copy SELECT column1,column2,column3\n  FROM t1\n  WHERE (column1,column2,column3) IN\n         (SELECT column1,column2,column3 FROM t2);", "\n        For more information about the optimizer and row constructors,\n        see Section\u00a010.2.1.22, \u201cRow Constructor Expression Optimization\u201d\n"], "Examples": ["SELECT * FROM t1\n  WHERE (col1,col2) = (SELECT col3, col4 FROM t2 WHERE id = 10);\nSELECT * FROM t1\n  WHERE ROW(col1,col2) = (SELECT col3, col4 FROM t2 WHERE id = 10);", "SELECT * FROM t1 WHERE (column1,column2) = (1,1);\nSELECT * FROM t1 WHERE column1 = 1 AND column2 = 1;", "SELECT column1,column2,column3\n  FROM t1\n  WHERE (column1,column2,column3) IN\n         (SELECT column1,column2,column3 FROM t2);"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/derived-tables.html"], "Title": ["15.2.15.8 Derived Tables"], "Feature": ["SELECT ... FROM (subquery) [AS] tbl_name ...", "SELECT * FROM JSON_TABLE(arg_list) [AS] tbl_name ...", "SELECT ... FROM (subquery) [AS] tbl_name (col_list) ..."], "Description": ["\n        This section discusses general characteristics of derived\n        tables. For information about lateral derived tables preceded by\n        the LATERAL keyword, see\n        Section\u00a015.2.15.9, \u201cLateral Derived Tables\u201d.\n      ", "\n        A derived table is an expression that generates a table within\n        the scope of a query FROM clause. For\n        example, a subquery in a SELECT\n        statement FROM clause is a derived table:\n      ", "\n        The JSON_TABLE() function\n        generates a table and provides another way to create a derived\n        table:\n      ", "\n        The [AS] tbl_name\n        clause is mandatory because every table in a\n        FROM clause must have a name. Any columns in\n        the derived table must have unique names. Alternatively,\n        tbl_name may be followed by a\n        parenthesized list of names for the derived table columns:\n      ", "\n        The number of column names must be the same as the number of\n        table columns.\n      ", "\n        For the sake of illustration, assume that you have this table:\n      ", "Press CTRL+C to copy CREATE TABLE t1 (s1 INT, s2 CHAR(5), s3 FLOAT);", "\n        Here is how to use a subquery in the FROM\n        clause, using the example table:\n      ", "Press CTRL+C to copy INSERT INTO t1 VALUES (1,'1',1.0);\nINSERT INTO t1 VALUES (2,'2',2.0);\nSELECT sb1,sb2,sb3\n  FROM (SELECT s1 AS sb1, s2 AS sb2, s3*2 AS sb3 FROM t1) AS sb\n  WHERE sb1 > 1;", "\n        Result:\n      ", "\n        Here is another example: Suppose that you want to know the\n        average of a set of sums for a grouped table. This does not\n        work:\n      ", "Press CTRL+C to copy SELECT AVG(SUM(column1)) FROM t1 GROUP BY column1;", "\n        However, this query provides the desired information:\n      ", "Press CTRL+C to copy SELECT AVG(sum_column1)\n  FROM (SELECT SUM(column1) AS sum_column1\n        FROM t1 GROUP BY column1) AS t1;", "\n        Notice that the column name used within the subquery\n        (sum_column1) is recognized in the outer\n        query.\n      ", "\n        The column names for a derived table come from its select list:\n      ", "Press CTRL+C to copy mysql> SELECT * FROM (SELECT 1, 2, 3, 4) AS dt;\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+", "\n        To provide column names explicitly, follow the derived table\n        name with a parenthesized list of column names:\n      ", "Press CTRL+C to copy mysql> SELECT * FROM (SELECT 1, 2, 3, 4) AS dt (a, b, c, d);\n+---+---+---+---+\n| a | b | c | d |\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+", "\n        A derived table can return a scalar, column, row, or table.\n      ", "\n        Derived tables are subject to these restrictions:\n", "\n\n            A derived table cannot contain references to other tables of\n            the same SELECT (use a\n            LATERAL derived table for that; see\n            Section\u00a015.2.15.9, \u201cLateral Derived Tables\u201d).\n\n", "\n        The optimizer determines information about derived tables in\n        such a way that EXPLAIN does not\n        need to materialize them. See\n        Section\u00a010.2.2.4, \u201cOptimizing Derived Tables, View References, and Common Table Expressions\n          with Merging or Materialization\u201d.\n      ", "\n        It is possible under certain circumstances that using\n        EXPLAIN\n        SELECT modifies table data. This can occur if the\n        outer query accesses any tables and an inner query invokes a\n        stored function that changes one or more rows of a table.\n        Suppose that there are two tables t1 and\n        t2 in database d1, and a\n        stored function f1 that modifies\n        t2, created as shown here:\n      ", "Press CTRL+C to copy CREATE DATABASE d1;\nUSE d1;\nCREATE TABLE t1 (c1 INT);\nCREATE TABLE t2 (c1 INT);\nCREATE FUNCTION f1(p1 INT) RETURNS INT\n  BEGIN\n    INSERT INTO t2 VALUES (p1);\n    RETURN p1;\n  END;", "\n        Referencing the function directly in an\n        EXPLAIN\n        SELECT has no effect on t2, as\n        shown here:\n      ", "Press CTRL+C to copy mysql> SELECT * FROM t2;\nEmpty set (0.02 sec)\n\nmysql> EXPLAIN SELECT f1(5)\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: NULL\n   partitions: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n1 row in set (0.01 sec)\n\nmysql> SELECT * FROM t2;\nEmpty set (0.01 sec)", "\n        This is because the SELECT\n        statement did not reference any tables, as can be seen in the\n        table and Extra columns of\n        the output. This is also true of the following nested\n        SELECT:\n      ", "Press CTRL+C to copy mysql> EXPLAIN SELECT NOW() AS a1, (SELECT f1(5)) AS a2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+-------+------+------------------------------------------+\n| Level | Code | Message                                  |\n+-------+------+------------------------------------------+\n| Note  | 1249 | Select 2 was reduced during optimization |\n+-------+------+------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT * FROM t2;\nEmpty set (0.00 sec)", "\n        However, if the outer SELECT\n        references any tables, the optimizer executes the statement in\n        the subquery as well, with the result that t2\n        is modified:\n      ", "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t1 AS a1, (SELECT f1(5)) AS a2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: <derived2>\n   partitions: NULL\n         type: system\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n*************************** 2. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: a1\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n*************************** 3. row ***************************\n           id: 2\n  select_type: DERIVED\n        table: NULL\n   partitions: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n3 rows in set (0.00 sec)\n\nmysql> SELECT * FROM t2;\n+------+\n| c1   |\n+------+\n|    5 |\n+------+\n1 row in set (0.00 sec)", "\n        The derived table optimization can also be employed with many\n        correlated (scalar) subqueries. For more information and\n        examples, see Section\u00a015.2.15.7, \u201cCorrelated Subqueries\u201d.\n"], "Examples": ["CREATE TABLE t1 (s1 INT, s2 CHAR(5), s3 FLOAT);", "INSERT INTO t1 VALUES (1,'1',1.0);\nINSERT INTO t1 VALUES (2,'2',2.0);\nSELECT sb1,sb2,sb3\n  FROM (SELECT s1 AS sb1, s2 AS sb2, s3*2 AS sb3 FROM t1) AS sb\n  WHERE sb1 > 1;", "SELECT AVG(SUM(column1)) FROM t1 GROUP BY column1;", "SELECT AVG(sum_column1)\n  FROM (SELECT SUM(column1) AS sum_column1\n        FROM t1 GROUP BY column1) AS t1;", "mysql> SELECT * FROM (SELECT 1, 2, 3, 4) AS dt;\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+", "mysql> SELECT * FROM (SELECT 1, 2, 3, 4) AS dt (a, b, c, d);\n+---+---+---+---+\n| a | b | c | d |\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+", "CREATE DATABASE d1;\nUSE d1;\nCREATE TABLE t1 (c1 INT);\nCREATE TABLE t2 (c1 INT);\nCREATE FUNCTION f1(p1 INT) RETURNS INT\n  BEGIN\n    INSERT INTO t2 VALUES (p1);\n    RETURN p1;\n  END;", "mysql> SELECT * FROM t2;\nEmpty set (0.02 sec)\n\nmysql> EXPLAIN SELECT f1(5)\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: NULL\n   partitions: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n1 row in set (0.01 sec)\n\nmysql> SELECT * FROM t2;\nEmpty set (0.01 sec)", "mysql> EXPLAIN SELECT NOW() AS a1, (SELECT f1(5)) AS a2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+-------+------+------------------------------------------+\n| Level | Code | Message                                  |\n+-------+------+------------------------------------------+\n| Note  | 1249 | Select 2 was reduced during optimization |\n+-------+------+------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT * FROM t2;\nEmpty set (0.00 sec)", "mysql> EXPLAIN SELECT * FROM t1 AS a1, (SELECT f1(5)) AS a2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: <derived2>\n   partitions: NULL\n         type: system\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n*************************** 2. row ***************************\n           id: 1\n  select_type: PRIMARY\n        table: a1\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n*************************** 3. row ***************************\n           id: 2\n  select_type: DERIVED\n        table: NULL\n   partitions: NULL\n         type: NULL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: NULL\n     filtered: NULL\n        Extra: No tables used\n3 rows in set (0.00 sec)\n\nmysql> SELECT * FROM t2;\n+------+\n| c1   |\n+------+\n|    5 |\n+------+\n1 row in set (0.00 sec)"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/table.html"], "Title": ["15.2.16 TABLE Statement"], "Feature": ["TABLE table_name [ORDER BY column_name] [LIMIT number [OFFSET number]]"], "Description": ["\nTABLE is a DML statement which returns rows and\n      columns of the named table.\n    ", "\n      The TABLE statement in some ways acts like\n      SELECT. Given the existence of a\n      table named t, the following two statements\n      produce identical output:\n    ", "Press CTRL+C to copy TABLE t;\n\nSELECT * FROM t;", "\n      You can order and limit the number of rows produced by\n      TABLE using ORDER BY and\n      LIMIT clauses, respectively. These function\n      identically to the same clauses when used with\n      SELECT (including an optional\n      OFFSET clause with LIMIT),\n      as you can see here:\n    ", "Press CTRL+C to copy mysql> TABLE t;\n+----+----+\n| a  | b  |\n+----+----+\n|  1 |  2 |\n|  6 |  7 |\n|  9 |  5 |\n| 10 | -4 |\n| 11 | -1 |\n| 13 |  3 |\n| 14 |  6 |\n+----+----+\n7 rows in set (0.00 sec)\n\nmysql> TABLE t ORDER BY b;\n+----+----+\n| a  | b  |\n+----+----+\n| 10 | -4 |\n| 11 | -1 |\n|  1 |  2 |\n| 13 |  3 |\n|  9 |  5 |\n| 14 |  6 |\n|  6 |  7 |\n+----+----+\n7 rows in set (0.00 sec)\n\nmysql> TABLE t LIMIT 3;\n+---+---+\n| a | b |\n+---+---+\n| 1 | 2 |\n| 6 | 7 |\n| 9 | 5 |\n+---+---+\n3 rows in set (0.00 sec)\n\nmysql> TABLE t ORDER BY b LIMIT 3;\n+----+----+\n| a  | b  |\n+----+----+\n| 10 | -4 |\n| 11 | -1 |\n|  1 |  2 |\n+----+----+\n3 rows in set (0.00 sec)\n\nmysql> TABLE t ORDER BY b LIMIT 3 OFFSET 2;\n+----+----+\n| a  | b  |\n+----+----+\n|  1 |  2 |\n| 13 |  3 |\n|  9 |  5 |\n+----+----+\n3 rows in set (0.00 sec)", "\nTABLE differs from SELECT in\n      two key respects:\n", "\n\nTABLE always displays all columns of the\n          table.\n        \nException: The output of\n          TABLE does not include\n          invisible columns. See Section\u00a015.1.20.10, \u201cInvisible Columns\u201d.\n        \nTABLE does not allow for any arbitrary\n          filtering of rows; that is, TABLE does not\n          support any WHERE clause.\n\n", "\n      For limiting which table columns are returned, filtering rows\n      beyond what can be accomplished using ORDER BY\n      and LIMIT, or both, use\n      SELECT.\n    ", "\nTABLE can be used with temporary tables.\n    ", "\nTABLE can also be used in place of\n      SELECT in a number of other constructs,\n      including those listed here:\n", "\n\n          With set operators such as\n          UNION, as shown here:\n        Press CTRL+C to copy mysql> TABLE t1;\n+---+----+\n| a | b  |\n+---+----+\n| 2 | 10 |\n| 5 |  3 |\n| 7 |  8 |\n+---+----+\n3 rows in set (0.00 sec)\n\nmysql> TABLE t2;\n+---+---+\n| a | b |\n+---+---+\n| 1 | 2 |\n| 3 | 4 |\n| 6 | 7 |\n+---+---+\n3 rows in set (0.00 sec)\n\nmysql> TABLE t1 UNION TABLE t2;\n+---+----+\n| a | b  |\n+---+----+\n| 2 | 10 |\n| 5 |  3 |\n| 7 |  8 |\n| 1 |  2 |\n| 3 |  4 |\n| 6 |  7 |\n+---+----+\n6 rows in set (0.00 sec)\n          The UNION just shown is\n          equivalent to the following statement:\n        Press CTRL+C to copy mysql> SELECT * FROM t1 UNION SELECT * FROM t2;\n+---+----+\n| a | b  |\n+---+----+\n| 2 | 10 |\n| 5 |  3 |\n| 7 |  8 |\n| 1 |  2 |\n| 3 |  4 |\n| 6 |  7 |\n+---+----+\n6 rows in set (0.00 sec)\nTABLE can also be used together in set\n          operations with SELECT statements,\n          VALUES statements, or both. See\n          Section\u00a015.2.18, \u201cUNION Clause\u201d, Section\u00a015.2.4, \u201cEXCEPT Clause\u201d, and\n          Section\u00a015.2.8, \u201cINTERSECT Clause\u201d, for more information and\n          examples. See also Section\u00a015.2.14, \u201cSet Operations with UNION, INTERSECT, and EXCEPT\u201d.\n        \n          With INTO to populate user variables, and\n          with INTO OUTFILE or INTO\n          DUMPFILE to write table data to a file. See\n          Section\u00a015.2.13.1, \u201cSELECT ... INTO Statement\u201d, for more specific information\n          and examples.\n        \n          In many cases where you can employ subqueries. Given any table\n          t1 with a column named\n          a, and a second table t2\n          having a single column, statements such as the following are\n          possible:\n        Press CTRL+C to copy SELECT * FROM t1 WHERE a IN (TABLE t2);\n          Assuming that the single column of table t1\n          is named x, the preceding is equivalent to\n          each of the statements shown here (and produces exactly the\n          same result in either case):\n        Press CTRL+C to copy SELECT * FROM t1 WHERE a IN (SELECT x FROM t2);\n\nSELECT * FROM t1 WHERE a IN (SELECT * FROM t2);\n          See Section\u00a015.2.15, \u201cSubqueries\u201d, for more information.\n        \n          With INSERT and\n          REPLACE statements, where you\n          would otherwise use\n          SELECT *.\n          See Section\u00a015.2.7.1, \u201cINSERT ... SELECT Statement\u201d, for more information and\n          examples.\n        \nTABLE can also be used in many\n          cases in place of the SELECT in\n          CREATE\n          TABLE ... SELECT or\n          CREATE VIEW ...\n          SELECT. See the descriptions of these statements for\n          more information and examples.\n\n"], "Examples": ["TABLE t;\n\nSELECT * FROM t;", "mysql> TABLE t;\n+----+----+\n| a  | b  |\n+----+----+\n|  1 |  2 |\n|  6 |  7 |\n|  9 |  5 |\n| 10 | -4 |\n| 11 | -1 |\n| 13 |  3 |\n| 14 |  6 |\n+----+----+\n7 rows in set (0.00 sec)\n\nmysql> TABLE t ORDER BY b;\n+----+----+\n| a  | b  |\n+----+----+\n| 10 | -4 |\n| 11 | -1 |\n|  1 |  2 |\n| 13 |  3 |\n|  9 |  5 |\n| 14 |  6 |\n|  6 |  7 |\n+----+----+\n7 rows in set (0.00 sec)\n\nmysql> TABLE t LIMIT 3;\n+---+---+\n| a | b |\n+---+---+\n| 1 | 2 |\n| 6 | 7 |\n| 9 | 5 |\n+---+---+\n3 rows in set (0.00 sec)\n\nmysql> TABLE t ORDER BY b LIMIT 3;\n+----+----+\n| a  | b  |\n+----+----+\n| 10 | -4 |\n| 11 | -1 |\n|  1 |  2 |\n+----+----+\n3 rows in set (0.00 sec)\n\nmysql> TABLE t ORDER BY b LIMIT 3 OFFSET 2;\n+----+----+\n| a  | b  |\n+----+----+\n|  1 |  2 |\n| 13 |  3 |\n|  9 |  5 |\n+----+----+\n3 rows in set (0.00 sec)", "mysql> TABLE t1;\n+---+----+\n| a | b  |\n+---+----+\n| 2 | 10 |\n| 5 |  3 |\n| 7 |  8 |\n+---+----+\n3 rows in set (0.00 sec)\n\nmysql> TABLE t2;\n+---+---+\n| a | b |\n+---+---+\n| 1 | 2 |\n| 3 | 4 |\n| 6 | 7 |\n+---+---+\n3 rows in set (0.00 sec)\n\nmysql> TABLE t1 UNION TABLE t2;\n+---+----+\n| a | b  |\n+---+----+\n| 2 | 10 |\n| 5 |  3 |\n| 7 |  8 |\n| 1 |  2 |\n| 3 |  4 |\n| 6 |  7 |\n+---+----+\n6 rows in set (0.00 sec)", "mysql> SELECT * FROM t1 UNION SELECT * FROM t2;\n+---+----+\n| a | b  |\n+---+----+\n| 2 | 10 |\n| 5 |  3 |\n| 7 |  8 |\n| 1 |  2 |\n| 3 |  4 |\n| 6 |  7 |\n+---+----+\n6 rows in set (0.00 sec)", "SELECT * FROM t1 WHERE a IN (TABLE t2);", "SELECT * FROM t1 WHERE a IN (SELECT x FROM t2);\n\nSELECT * FROM t1 WHERE a IN (SELECT * FROM t2);"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/update.html"], "Title": ["15.2.17 UPDATE Statement"], "Feature": ["UPDATE [LOW_PRIORITY] [IGNORE] table_reference\n    SET assignment_list\n    [WHERE where_condition]\n    [ORDER BY ...]\n    [LIMIT row_count]\n\nvalue:\n    {expr | DEFAULT}\n\nassignment:\n    col_name = value\n\nassignment_list:\n    assignment [, assignment] ...", "UPDATE [LOW_PRIORITY] [IGNORE] table_references\n    SET assignment_list\n    [WHERE where_condition]"], "Description": ["\nUPDATE is a DML statement that\n      modifies rows in a table.\n    ", "\n      An UPDATE statement can start with\n      a WITH clause to define common\n      table expressions accessible within the\n      UPDATE. See Section\u00a015.2.20, \u201cWITH (Common Table Expressions)\u201d.\n    ", "\n      Single-table syntax:\n    ", "\n      Multiple-table syntax:\n    ", "\n      For the single-table syntax, the\n      UPDATE statement updates columns of\n      existing rows in the named table with new values. The\n      SET clause indicates which columns to modify\n      and the values they should be given. Each value can be given as an\n      expression, or the keyword DEFAULT to set a\n      column explicitly to its default value. The\n      WHERE clause, if given, specifies the\n      conditions that identify which rows to update. With no\n      WHERE clause, all rows are updated. If the\n      ORDER BY clause is specified, the rows are\n      updated in the order that is specified. The\n      LIMIT clause places a limit on the number of\n      rows that can be updated.\n    ", "\n      For the multiple-table syntax,\n      UPDATE updates rows in each table\n      named in table_references that satisfy\n      the conditions. Each matching row is updated once, even if it\n      matches the conditions multiple times. For multiple-table syntax,\n      ORDER BY and LIMIT cannot be\n      used.\n    ", "\n      For partitioned tables, both the single-single and multiple-table\n      forms of this statement support the use of a\n      PARTITION clause as part of a table reference.\n      This option takes a list of one or more partitions or\n      subpartitions (or both). Only the partitions (or subpartitions)\n      listed are checked for matches, and a row that is not in any of\n      these partitions or subpartitions is not updated, whether it\n      satisfies the where_condition or not.\n", "\n\nNote\n\n\n        Unlike the case when using PARTITION with an\n        INSERT or\n        REPLACE statement, an otherwise\n        valid UPDATE ... PARTITION statement is\n        considered successful even if no rows in the listed partitions\n        (or subpartitions) match the\n        where_condition.\n\n", "\n      For more information and examples, see\n      Section\u00a026.5, \u201cPartition Selection\u201d.\n    ", "\nwhere_condition is an expression that\n      evaluates to true for each row to be updated. For expression\n      syntax, see Section\u00a011.5, \u201cExpressions\u201d.\n    ", "\ntable_references and\n      where_condition are specified as\n      described in Section\u00a015.2.13, \u201cSELECT Statement\u201d.\n    ", "\n      You need the UPDATE privilege only\n      for columns referenced in an UPDATE\n      that are actually updated. You need only the\n      SELECT privilege for any columns\n      that are read but not modified.\n    ", "\n      The UPDATE statement supports the\n      following modifiers:\n", "\n\n          With the LOW_PRIORITY modifier, execution\n          of the UPDATE is delayed until\n          no other clients are reading from the table. This affects only\n          storage engines that use only table-level locking (such as\n          MyISAM, MEMORY, and\n          MERGE).\n        \n          With the IGNORE modifier, the update\n          statement does not abort even if errors occur during the\n          update. Rows for which duplicate-key conflicts occur on a\n          unique key value are not updated. Rows updated to values that\n          would cause data conversion errors are updated to the closest\n          valid values instead. For more information, see\n          The Effect of IGNORE on Statement Execution.\n\n", "\nUPDATE IGNORE\n      statements, including those having an ORDER BY\n      clause, are flagged as unsafe for statement-based replication.\n      (This is because the order in which the rows are updated\n      determines which rows are ignored.) Such statements produce a\n      warning in the error log when using statement-based mode and are\n      written to the binary log using the row-based format when using\n      MIXED mode. (Bug #11758262, Bug #50439) See\n      Section\u00a019.2.1.3, \u201cDetermination of Safe and Unsafe Statements in Binary Logging\u201d, for more\n      information.\n    ", "\n      If you access a column from the table to be updated in an\n      expression, UPDATE uses the current\n      value of the column. For example, the following statement sets\n      col1 to one more than its current value:\n    ", "Press CTRL+C to copy UPDATE t1 SET col1 = col1 + 1;", "\n      The second assignment in the following statement sets\n      col2 to the current (updated)\n      col1 value, not the original\n      col1 value. The result is that\n      col1 and col2 have the same\n      value. This behavior differs from standard SQL.\n    ", "Press CTRL+C to copy UPDATE t1 SET col1 = col1 + 1, col2 = col1;", "\n      Single-table UPDATE assignments are\n      generally evaluated from left to right. For multiple-table\n      updates, there is no guarantee that assignments are carried out in\n      any particular order.\n    ", "\n      If you set a column to the value it currently has, MySQL notices\n      this and does not update it.\n    ", "\n      If you update a column that has been declared NOT\n      NULL by setting to NULL, an error\n      occurs if strict SQL mode is enabled; otherwise, the column is set\n      to the implicit default value for the column data type and the\n      warning count is incremented. The implicit default value is\n      0 for numeric types, the empty string\n      ('') for string types, and the\n      \u201czero\u201d value for date and time types. See\n      Section\u00a013.6, \u201cData Type Default Values\u201d.\n    ", "\n      If a generated column is updated explicitly, the only permitted\n      value is DEFAULT. For information about\n      generated columns, see\n      Section\u00a015.1.20.8, \u201cCREATE TABLE and Generated Columns\u201d.\n    ", "\nUPDATE returns the number of rows\n      that were actually changed. The\n      mysql_info() C API function\n      returns the number of rows that were matched and updated and the\n      number of warnings that occurred during the\n      UPDATE.\n    ", "\n      You can use LIMIT\n      row_count to restrict the\n      scope of the UPDATE. A\n      LIMIT clause is a rows-matched restriction. The\n      statement stops as soon as it has found\n      row_count rows that satisfy the\n      WHERE clause, whether or not they actually were\n      changed.\n    ", "\n      If an UPDATE statement includes an\n      ORDER BY clause, the rows are updated in the\n      order specified by the clause. This can be useful in certain\n      situations that might otherwise result in an error. Suppose that a\n      table t contains a column id\n      that has a unique index. The following statement could fail with a\n      duplicate-key error, depending on the order in which rows are\n      updated:\n    ", "Press CTRL+C to copy UPDATE t SET id = id + 1;", "\n      For example, if the table contains 1 and 2 in the\n      id column and 1 is updated to 2 before 2 is\n      updated to 3, an error occurs. To avoid this problem, add an\n      ORDER BY clause to cause the rows with larger\n      id values to be updated before those with\n      smaller values:\n    ", "Press CTRL+C to copy UPDATE t SET id = id + 1 ORDER BY id DESC;", "\n      You can also perform UPDATE\n      operations covering multiple tables. However, you cannot use\n      ORDER BY or LIMIT with a\n      multiple-table UPDATE. The\n      table_references clause lists the\n      tables involved in the join. Its syntax is described in\n      Section\u00a015.2.13.2, \u201cJOIN Clause\u201d. Here is an example:\n    ", "Press CTRL+C to copy UPDATE items,month SET items.price=month.price\nWHERE items.id=month.id;", "\n      The preceding example shows an inner join that uses the comma\n      operator, but multiple-table UPDATE\n      statements can use any type of join permitted in\n      SELECT statements, such as\n      LEFT JOIN.\n    ", "\n      If you use a multiple-table UPDATE\n      statement involving InnoDB tables for which\n      there are foreign key constraints, the MySQL optimizer might\n      process tables in an order that differs from that of their\n      parent/child relationship. In this case, the statement fails and\n      rolls back. Instead, update a single table and rely on the\n      ON UPDATE capabilities that\n      InnoDB provides to cause the other tables to be\n      modified accordingly. See\n      Section\u00a015.1.20.5, \u201cFOREIGN KEY Constraints\u201d.\n    ", "\n      You cannot update a table and select directly from the same table\n      in a subquery. You can work around this by using a multi-table\n      update in which one of the tables is derived from the table that\n      you actually wish to update, and referring to the derived table\n      using an alias. Suppose you wish to update a table named\n      items which is defined using the statement\n      shown here:\n    ", "Press CTRL+C to copy CREATE TABLE items (\n    id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    wholesale DECIMAL(6,2) NOT NULL DEFAULT 0.00,\n    retail DECIMAL(6,2) NOT NULL DEFAULT 0.00,\n    quantity BIGINT NOT NULL DEFAULT 0\n);", "\n      To reduce the retail price of any items for which the markup is\n      30% or greater and of which you have fewer than one hundred in\n      stock, you might try to use an UPDATE statement\n      such as the one following, which uses a subquery in the\n      WHERE clause. As shown here, this statement\n      does not work:\n    ", "Press CTRL+C to copy mysql> UPDATE items\n     > SET retail = retail * 0.9\n     > WHERE id IN\n     >     (SELECT id FROM items\n     >         WHERE retail / wholesale >= 1.3 AND quantity > 100);\nERROR 1093 (HY000): You can't specify target table 'items' for update in FROM clause", "\n      Instead, you can employ a multi-table update in which the subquery\n      is moved into the list of tables to be updated, using an alias to\n      reference it in the outermost WHERE clause,\n      like this:\n    ", "Press CTRL+C to copy UPDATE items,\n       (SELECT id FROM items\n        WHERE id IN\n            (SELECT id FROM items\n             WHERE retail / wholesale >= 1.3 AND quantity < 100))\n        AS discounted\nSET items.retail = items.retail * 0.9\nWHERE items.id = discounted.id;", "\n      Because the optimizer tries by default to merge the derived table\n      discounted into the outermost query block, this\n      works only if you force materialization of the derived table. You\n      can do this by setting the\n      derived_merge flag of the\n      optimizer_switch system variable\n      to off before running the update, or by using\n      the NO_MERGE optimizer hint, as\n      shown here:\n    ", "Press CTRL+C to copy UPDATE /*+ NO_MERGE(discounted) */ items,\n       (SELECT id FROM items\n        WHERE retail / wholesale >= 1.3 AND quantity < 100)\n        AS discounted\n    SET items.retail = items.retail * 0.9\n    WHERE items.id = discounted.id;", "\n      The advantage of using the optimizer hint in such a case is that\n      it applies only within the query block where it is used, so that\n      it is not necessary to change the value of\n      optimizer_switch again after executing the\n      UPDATE.\n    ", "\n      Another possibility is to rewrite the subquery so that it does not\n      use IN or EXISTS, like this:\n    ", "Press CTRL+C to copy UPDATE items,\n       (SELECT id, retail / wholesale AS markup, quantity FROM items)\n       AS discounted\n    SET items.retail = items.retail * 0.9\n    WHERE discounted.markup >= 1.3\n    AND discounted.quantity < 100\n    AND items.id = discounted.id;", "\n      In this case, the subquery is materialized by default rather than\n      merged, so it is not necessary to disable merging of the derived\n      table.\n"], "Examples": ["UPDATE t1 SET col1 = col1 + 1;", "UPDATE t1 SET col1 = col1 + 1, col2 = col1;", "UPDATE t SET id = id + 1;", "UPDATE t SET id = id + 1 ORDER BY id DESC;", "UPDATE items,month SET items.price=month.price\nWHERE items.id=month.id;", "CREATE TABLE items (\n    id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    wholesale DECIMAL(6,2) NOT NULL DEFAULT 0.00,\n    retail DECIMAL(6,2) NOT NULL DEFAULT 0.00,\n    quantity BIGINT NOT NULL DEFAULT 0\n);", "mysql> UPDATE items\n     > SET retail = retail * 0.9\n     > WHERE id IN\n     >     (SELECT id FROM items\n     >         WHERE retail / wholesale >= 1.3 AND quantity > 100);\nERROR 1093 (HY000): You can't specify target table 'items' for update in FROM clause", "UPDATE items,\n       (SELECT id FROM items\n        WHERE id IN\n            (SELECT id FROM items\n             WHERE retail / wholesale >= 1.3 AND quantity < 100))\n        AS discounted\nSET items.retail = items.retail * 0.9\nWHERE items.id = discounted.id;", "UPDATE /*+ NO_MERGE(discounted) */ items,\n       (SELECT id FROM items\n        WHERE retail / wholesale >= 1.3 AND quantity < 100)\n        AS discounted\n    SET items.retail = items.retail * 0.9\n    WHERE items.id = discounted.id;", "UPDATE items,\n       (SELECT id, retail / wholesale AS markup, quantity FROM items)\n       AS discounted\n    SET items.retail = items.retail * 0.9\n    WHERE discounted.markup >= 1.3\n    AND discounted.quantity < 100\n    AND items.id = discounted.id;"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/union.html"], "Title": ["15.2.18 UNION Clause"], "Feature": ["query_expression_body UNION [ALL | DISTINCT] query_block\n    [UNION [ALL | DISTINCT] query_expression_body]\n    [...]\n\nquery_expression_body:\n    See Section 15.2.14, \u201cSet Operations with UNION, INTERSECT, and EXCEPT\u201d"], "Description": ["\nUNION combines the result from\n      multiple query blocks into a single result set. This example uses\n      SELECT statements:\n    ", "Press CTRL+C to copy mysql> SELECT 1, 2;\n+---+---+\n| 1 | 2 |\n+---+---+\n| 1 | 2 |\n+---+---+\nmysql> SELECT 'a', 'b';\n+---+---+\n| a | b |\n+---+---+\n| a | b |\n+---+---+\nmysql> SELECT 1, 2 UNION SELECT 'a', 'b';\n+---+---+\n| 1 | 2 |\n+---+---+\n| 1 | 2 |\n| a | b |\n+---+---+"], "Examples": ["mysql> SELECT 1, 2;\n+---+---+\n| 1 | 2 |\n+---+---+\n| 1 | 2 |\n+---+---+\nmysql> SELECT 'a', 'b';\n+---+---+\n| a | b |\n+---+---+\n| a | b |\n+---+---+\nmysql> SELECT 1, 2 UNION SELECT 'a', 'b';\n+---+---+\n| 1 | 2 |\n+---+---+\n| 1 | 2 |\n| a | b |\n+---+---+"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/values.html"], "Title": ["15.2.19 VALUES Statement"], "Feature": ["VALUES row_constructor_list [ORDER BY column_designator] [LIMIT number]\n\nrow_constructor_list:\n    ROW(value_list)[, ROW(value_list)][, ...]\n\nvalue_list:\n    value[, value][, ...]\n\ncolumn_designator:\n    column_index"], "Description": ["\nVALUES is a DML statement which\n      returns a set of one or more rows as a table. In other words, it\n      is a table value constructor which also functions as a standalone\n      SQL statement.\n    ", "\n      The VALUES statement consists of\n      the VALUES keyword followed by a list of one or\n      more row constructors, separated by commas. A row constructor\n      consists of the ROW() row constructor clause\n      with a value list of one or more scalar values enclosed in the\n      parentheses. A value can be a literal of any MySQL data type or an\n      expression that resolves to a scalar value.\n    ", "\nROW() cannot be empty (but each of the supplied\n      scalar values can be NULL). Each\n      ROW() in the same\n      VALUES statement must have the same\n      number of values in its value list.\n    ", "\n      The DEFAULT keyword is not supported by\n      VALUES and causes a syntax error, except when\n      it is used to supply values in an\n      INSERT statement.\n    ", "\n      The output of VALUES is a table:\n    ", "Press CTRL+C to copy mysql> VALUES ROW(1,-2,3), ROW(5,7,9), ROW(4,6,8);\n+----------+----------+----------+\n| column_0 | column_1 | column_2 |\n+----------+----------+----------+\n|        1 |       -2 |        3 |\n|        5 |        7 |        9 |\n|        4 |        6 |        8 |\n+----------+----------+----------+\n3 rows in set (0.00 sec)", "\n      The columns of the table output from\n      VALUES have the implicitly named\n      columns column_0, column_1,\n      column_2, and so on, always beginning with\n      0. This fact can be used to order the rows by\n      column using an optional ORDER BY clause in the\n      same way that this clause works with a\n      SELECT statement, as shown here:\n    ", "Press CTRL+C to copy mysql> VALUES ROW(1,-2,3), ROW(5,7,9), ROW(4,6,8) ORDER BY column_1;\n+----------+----------+----------+\n| column_0 | column_1 | column_2 |\n+----------+----------+----------+\n|        1 |       -2 |        3 |\n|        4 |        6 |        8 |\n|        5 |        7 |        9 |\n+----------+----------+----------+\n3 rows in set (0.00 sec)", "\nVALUES statement also supports a\n      LIMIT clause for limiting the number of rows in\n      the output.\n    ", "\n      The VALUES statement is permissive regarding\n      data types of column values; you can mix types within the same\n      column, as shown here:\n    ", "Press CTRL+C to copy mysql> VALUES ROW(\"q\", 42, '2019-12-18'),\n    ->     ROW(23, \"abc\", 98.6),\n    ->     ROW(27.0002, \"Mary Smith\", '{\"a\": 10, \"b\": 25}');\n+----------+------------+--------------------+\n| column_0 | column_1   | column_2           |\n+----------+------------+--------------------+\n| q        | 42         | 2019-12-18         |\n| 23       | abc        | 98.6               |\n| 27.0002  | Mary Smith | {\"a\": 10, \"b\": 25} |\n+----------+------------+--------------------+\n3 rows in set (0.00 sec)", "\n\nImportant\n\n\nVALUES with one or more instances of\n        ROW() acts as a table value constructor;\n        although it can be used to supply values in an\n        INSERT or\n        REPLACE statement, do not confuse\n        it with the VALUES keyword that is also used\n        for this purpose. You should also not confuse it with the\n        VALUES() function that refers to\n        column values in\n        INSERT ...\n        ON DUPLICATE KEY UPDATE.\n      \n        You should also bear in mind that ROW() is a\n        row value constructor (see Section\u00a015.2.15.5, \u201cRow Subqueries\u201d),\n        whereas VALUES ROW() is a table value\n        constructor; the two cannot be used interchangeably.\n\n", "\nVALUES can be used in many cases\n      where you could employ SELECT,\n      including those listed here:\n", "\n\n          With UNION, as shown here:\n        Press CTRL+C to copy mysql> SELECT 1,2 UNION SELECT 10,15;\n+----+----+\n| 1  | 2  |\n+----+----+\n|  1 |  2 |\n| 10 | 15 |\n+----+----+\n2 rows in set (0.00 sec)\n\nmysql> VALUES ROW(1,2) UNION VALUES ROW(10,15);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|       10 |       15 |\n+----------+----------+\n2 rows in set (0.00 sec)\n          You can union together constructed tables having more than one\n          row, like this:\n        Press CTRL+C to copy mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n     >     UNION VALUES ROW(10,15),ROW(20,25);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        3 |        4 |\n|        5 |        6 |\n|       10 |       15 |\n|       20 |       25 |\n+----------+----------+\n5 rows in set (0.00 sec)\n          You can also (and it is usually preferable to) omit\n          UNION altogether in such cases\n          and use a single VALUES statement, like\n          this:\n        Press CTRL+C to copy mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6), ROW(10,15), ROW(20,25);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        3 |        4 |\n|        5 |        6 |\n|       10 |       15 |\n|       20 |       25 |\n+----------+----------+\nVALUES can also be used in unions with\n          SELECT statements,\n          TABLE statements, or both.\n        \n          The constructed tables in the\n          UNION must contain the same\n          number of columns, just as if you were using\n          SELECT. See\n          Section\u00a015.2.18, \u201cUNION Clause\u201d, for further examples.\n        \n          You can use EXCEPT and\n          INTERSECT with\n          VALUES in much the same way as\n          UNION, as shown here:\n        Press CTRL+C to copy mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n    ->   INTERSECT \n    -> VALUES ROW(10,15), ROW(20,25), ROW(3,4);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        3 |        4 |\n+----------+----------+\n1 row in set (0.00 sec)\n \nmysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n    ->   EXCEPT \n    -> VALUES ROW(10,15), ROW(20,25), ROW(3,4);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        5 |        6 |\n+----------+----------+\n2 rows in set (0.00 sec)\n          See Section\u00a015.2.4, \u201cEXCEPT Clause\u201d, and Section\u00a015.2.8, \u201cINTERSECT Clause\u201d,\n          for more information.\n        \n          In joins. See Section\u00a015.2.13.2, \u201cJOIN Clause\u201d, for more information and\n          examples.\n        \n          In place of VALUES() in an\n          INSERT or\n          REPLACE statement, in which\n          case its semantics differ slightly from what is described\n          here. See Section\u00a015.2.7, \u201cINSERT Statement\u201d, for details.\n        \n          In place of the source table in\n          CREATE\n          TABLE ... SELECT and\n          CREATE VIEW ...\n          SELECT. See the descriptions of these statements for\n          more information and examples.\n\n"], "Examples": ["mysql> VALUES ROW(1,-2,3), ROW(5,7,9), ROW(4,6,8);\n+----------+----------+----------+\n| column_0 | column_1 | column_2 |\n+----------+----------+----------+\n|        1 |       -2 |        3 |\n|        5 |        7 |        9 |\n|        4 |        6 |        8 |\n+----------+----------+----------+\n3 rows in set (0.00 sec)", "mysql> VALUES ROW(1,-2,3), ROW(5,7,9), ROW(4,6,8) ORDER BY column_1;\n+----------+----------+----------+\n| column_0 | column_1 | column_2 |\n+----------+----------+----------+\n|        1 |       -2 |        3 |\n|        4 |        6 |        8 |\n|        5 |        7 |        9 |\n+----------+----------+----------+\n3 rows in set (0.00 sec)", "mysql> VALUES ROW(\"q\", 42, '2019-12-18'),\n    ->     ROW(23, \"abc\", 98.6),\n    ->     ROW(27.0002, \"Mary Smith\", '{\"a\": 10, \"b\": 25}');\n+----------+------------+--------------------+\n| column_0 | column_1   | column_2           |\n+----------+------------+--------------------+\n| q        | 42         | 2019-12-18         |\n| 23       | abc        | 98.6               |\n| 27.0002  | Mary Smith | {\"a\": 10, \"b\": 25} |\n+----------+------------+--------------------+\n3 rows in set (0.00 sec)", "mysql> SELECT 1,2 UNION SELECT 10,15;\n+----+----+\n| 1  | 2  |\n+----+----+\n|  1 |  2 |\n| 10 | 15 |\n+----+----+\n2 rows in set (0.00 sec)\n\nmysql> VALUES ROW(1,2) UNION VALUES ROW(10,15);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|       10 |       15 |\n+----------+----------+\n2 rows in set (0.00 sec)", "mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n     >     UNION VALUES ROW(10,15),ROW(20,25);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        3 |        4 |\n|        5 |        6 |\n|       10 |       15 |\n|       20 |       25 |\n+----------+----------+\n5 rows in set (0.00 sec)", "mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6), ROW(10,15), ROW(20,25);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        3 |        4 |\n|        5 |        6 |\n|       10 |       15 |\n|       20 |       25 |\n+----------+----------+", "mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n    ->   INTERSECT \n    -> VALUES ROW(10,15), ROW(20,25), ROW(3,4);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        3 |        4 |\n+----------+----------+\n1 row in set (0.00 sec)\n \nmysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6)\n    ->   EXCEPT \n    -> VALUES ROW(10,15), ROW(20,25), ROW(3,4);\n+----------+----------+\n| column_0 | column_1 |\n+----------+----------+\n|        1 |        2 |\n|        5 |        6 |\n+----------+----------+\n2 rows in set (0.00 sec)"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/delete.html"], "Title": ["15.2.2 DELETE Statement"], "Feature": ["DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name [[AS] tbl_alias]\n    [PARTITION (partition_name [, partition_name] ...)]\n    [WHERE where_condition]\n    [ORDER BY ...]\n    [LIMIT row_count]", "DELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n    tbl_name[.*] [, tbl_name[.*]] ...\n    FROM table_references\n    [WHERE where_condition]\n\nDELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n    FROM tbl_name[.*] [, tbl_name[.*]] ...\n    USING table_references\n    [WHERE where_condition]", "DELETE t1 FROM test AS t1, test2 WHERE ..."], "Description": ["\nDELETE is a DML statement that\n      removes rows from a table.\n    ", "\n      A DELETE statement can start with a\n      WITH clause to define common table\n      expressions accessible within the\n      DELETE. See Section\u00a015.2.20, \u201cWITH (Common Table Expressions)\u201d.\n", {"Sub-title": "Single-Table Syntax", "Illustration": ["\n      The DELETE statement deletes rows from\n      tbl_name and returns the number of\n      deleted rows. To check the number of deleted rows, call the\n      ROW_COUNT() function described in\n      Section\u00a014.15, \u201cInformation Functions\u201d.\n"]}, {"Sub-title": "Main Clauses", "Illustration": ["\n      The conditions in the optional WHERE clause\n      identify which rows to delete. With no WHERE\n      clause, all rows are deleted.\n    ", "\nwhere_condition is an expression that\n      evaluates to true for each row to be deleted. It is specified as\n      described in Section\u00a015.2.13, \u201cSELECT Statement\u201d.\n    ", "\n      If the ORDER BY clause is specified, the rows\n      are deleted in the order that is specified. The\n      LIMIT clause places a limit on the number of\n      rows that can be deleted. These clauses apply to single-table\n      deletes, but not multi-table deletes.\n"]}, {"Sub-title": "Multiple-Table Syntax", "Illustration": []}, {"Sub-title": "Privileges", "Illustration": ["\n      You need the DELETE privilege on a\n      table to delete rows from it. You need only the\n      SELECT privilege for any columns\n      that are only read, such as those named in the\n      WHERE clause.\n"]}, {"Sub-title": "Performance", "Illustration": ["\n      When you do not need to know the number of deleted rows, the\n      TRUNCATE TABLE statement is a\n      faster way to empty a table than a\n      DELETE statement with no\n      WHERE clause. Unlike\n      DELETE,\n      TRUNCATE TABLE cannot be used\n      within a transaction or if you have a lock on the table. See\n      Section\u00a015.1.37, \u201cTRUNCATE TABLE Statement\u201d and\n      Section\u00a015.3.6, \u201cLOCK TABLES and UNLOCK TABLES Statements\u201d.\n    ", "\n      The speed of delete operations may also be affected by factors\n      discussed in Section\u00a010.2.5.3, \u201cOptimizing DELETE Statements\u201d.\n    ", "\n      To ensure that a given DELETE\n      statement does not take too much time, the MySQL-specific\n      LIMIT row_count\n      clause for DELETE specifies the\n      maximum number of rows to be deleted. If the number of rows to\n      delete is larger than the limit, repeat the\n      DELETE statement until the number of affected\n      rows is less than the LIMIT value.\n"]}, {"Sub-title": "Subqueries", "Illustration": ["\n      You cannot delete from a table and select from the same table in a\n      subquery.\n"]}, {"Sub-title": "Partitioned Table Support", "Illustration": ["\nDELETE supports explicit partition selection\n      using the PARTITION clause, which takes a list\n      of the comma-separated names of one or more partitions or\n      subpartitions (or both) from which to select rows to be dropped.\n      Partitions not included in the list are ignored. Given a\n      partitioned table t with a partition named\n      p0, executing the statement DELETE\n      FROM t PARTITION (p0) has the same effect on the table\n      as executing ALTER\n      TABLE t TRUNCATE PARTITION (p0); in both cases, all rows\n      in partition p0 are dropped.\n    ", "\nPARTITION can be used along with a\n      WHERE condition, in which case the condition is\n      tested only on rows in the listed partitions. For example,\n      DELETE FROM t PARTITION (p0) WHERE c < 5\n      deletes rows only from partition p0 for which\n      the condition c < 5 is true; rows in any\n      other partitions are not checked and thus not affected by the\n      DELETE.\n    ", "\n      The PARTITION clause can also be used in\n      multiple-table DELETE statements. You can use\n      up to one such option per table named in the\n      FROM option.\n    ", "\n      For more information and examples, see\n      Section\u00a026.5, \u201cPartition Selection\u201d.\n"]}, {"Sub-title": "Auto-Increment Columns", "Illustration": ["\n      If you delete the row containing the maximum value for an\n      AUTO_INCREMENT column, the value is not reused\n      for a MyISAM or InnoDB\n      table. If you delete all rows in the table with DELETE\n      FROM tbl_name (without a\n      WHERE clause) in\n      autocommit mode, the sequence\n      starts over for all storage engines except\n      InnoDB and MyISAM. There are\n      some exceptions to this behavior for InnoDB\n      tables, as discussed in\n      Section\u00a017.6.1.6, \u201cAUTO_INCREMENT Handling in InnoDB\u201d.\n    ", "\n      For MyISAM tables, you can specify an\n      AUTO_INCREMENT secondary column in a\n      multiple-column key. In this case, reuse of values deleted from\n      the top of the sequence occurs even for MyISAM\n      tables. See Section\u00a05.6.9, \u201cUsing AUTO_INCREMENT\u201d.\n"]}, {"Sub-title": "Modifiers", "Illustration": ["\n      The DELETE statement supports the\n      following modifiers:\n", "\n\n          If you specify the LOW_PRIORITY modifier,\n          the server delays execution of the\n          DELETE until no other clients\n          are reading from the table. This affects only storage engines\n          that use only table-level locking (such as\n          MyISAM, MEMORY, and\n          MERGE).\n        \n          For MyISAM tables, if you use the\n          QUICK modifier, the storage engine does not\n          merge index leaves during delete, which may speed up some\n          kinds of delete operations.\n        \n          The IGNORE modifier causes MySQL to ignore\n          ignorable errors during the process of deleting rows. (Errors\n          encountered during the parsing stage are processed in the\n          usual manner.) Errors that are ignored due to the use of\n          IGNORE are returned as warnings. For more\n          information, see The Effect of IGNORE on Statement Execution.\n\n"]}, {"Sub-title": "Order of Deletion", "Illustration": ["\n      If the DELETE statement includes an\n      ORDER BY clause, rows are deleted in the order\n      specified by the clause. This is useful primarily in conjunction\n      with LIMIT. For example, the following\n      statement finds rows matching the WHERE clause,\n      sorts them by timestamp_column, and deletes the\n      first (oldest) one:\n    ", "Press CTRL+C to copy DELETE FROM somelog WHERE user = 'jcole'\nORDER BY timestamp_column LIMIT 1;", "\nORDER BY also helps to delete rows in an order\n      required to avoid referential integrity violations.\n"]}, {"Sub-title": "InnoDB Tables", "Illustration": ["\n      If you are deleting many rows from a large table, you may exceed\n      the lock table size for an InnoDB table. To\n      avoid this problem, or simply to minimize the time that the table\n      remains locked, the following strategy (which does not use\n      DELETE at all) might be helpful:\n", "\n\n          Select the rows not to be deleted into an\n          empty table that has the same structure as the original table:\n        Press CTRL+C to copy INSERT INTO t_copy SELECT * FROM t WHERE ... ;\n          Use RENAME TABLE to atomically\n          move the original table out of the way and rename the copy to\n          the original name:\n        Press CTRL+C to copy RENAME TABLE t TO t_old, t_copy TO t;\n          Drop the original table:\n        Press CTRL+C to copy DROP TABLE t_old;\n", "\n      No other sessions can access the tables involved while\n      RENAME TABLE executes, so the\n      rename operation is not subject to concurrency problems. See\n      Section\u00a015.1.36, \u201cRENAME TABLE Statement\u201d.\n"]}, {"Sub-title": "MyISAM Tables", "Illustration": ["\n      In MyISAM tables, deleted rows are maintained\n      in a linked list and subsequent\n      INSERT operations reuse old row\n      positions. To reclaim unused space and reduce file sizes, use the\n      OPTIMIZE TABLE statement or the\n      myisamchk utility to reorganize tables.\n      OPTIMIZE TABLE is easier to use,\n      but myisamchk is faster. See\n      Section\u00a015.7.3.4, \u201cOPTIMIZE TABLE Statement\u201d, and Section\u00a06.6.4, \u201cmyisamchk \u2014 MyISAM Table-Maintenance Utility\u201d.\n    ", "\n      The QUICK modifier affects whether index leaves\n      are merged for delete operations. DELETE QUICK\n      is most useful for applications where index values for deleted\n      rows are replaced by similar index values from rows inserted\n      later. In this case, the holes left by deleted values are reused.\n    ", "\nDELETE QUICK is not useful when deleted values\n      lead to underfilled index blocks spanning a range of index values\n      for which new inserts occur again. In this case, use of\n      QUICK can lead to wasted space in the index\n      that remains unreclaimed. Here is an example of such a scenario:\n", "\n\n          Create a table that contains an indexed\n          AUTO_INCREMENT column.\n        \n          Insert many rows into the table. Each insert results in an\n          index value that is added to the high end of the index.\n        \n          Delete a block of rows at the low end of the column range\n          using DELETE QUICK.\n\n", "\n      In this scenario, the index blocks associated with the deleted\n      index values become underfilled but are not merged with other\n      index blocks due to the use of QUICK. They\n      remain underfilled when new inserts occur, because new rows do not\n      have index values in the deleted range. Furthermore, they remain\n      underfilled even if you later use\n      DELETE without\n      QUICK, unless some of the deleted index values\n      happen to lie in index blocks within or adjacent to the\n      underfilled blocks. To reclaim unused index space under these\n      circumstances, use OPTIMIZE TABLE.\n    ", "\n      If you are going to delete many rows from a table, it might be\n      faster to use DELETE QUICK followed by\n      OPTIMIZE TABLE. This rebuilds the\n      index rather than performing many index block merge operations.\n"]}, {"Sub-title": "Multi-Table Deletes", "Illustration": ["\n      You can specify multiple tables in a\n      DELETE statement to delete rows\n      from one or more tables depending on the condition in the\n      WHERE clause. You cannot use ORDER\n      BY or LIMIT in a multiple-table\n      DELETE. The\n      table_references clause lists the\n      tables involved in the join, as described in\n      Section\u00a015.2.13.2, \u201cJOIN Clause\u201d.\n    ", "\n      For the first multiple-table syntax, only matching rows from the\n      tables listed before the FROM clause are\n      deleted. For the second multiple-table syntax, only matching rows\n      from the tables listed in the FROM clause\n      (before the USING clause) are deleted. The\n      effect is that you can delete rows from many tables at the same\n      time and have additional tables that are used only for searching:\n    ", "Press CTRL+C to copy DELETE t1, t2 FROM t1 INNER JOIN t2 INNER JOIN t3\nWHERE t1.id=t2.id AND t2.id=t3.id;", "\n      Or:\n    ", "Press CTRL+C to copy DELETE FROM t1, t2 USING t1 INNER JOIN t2 INNER JOIN t3\nWHERE t1.id=t2.id AND t2.id=t3.id;", "\n      These statements use all three tables when searching for rows to\n      delete, but delete matching rows only from tables\n      t1 and t2.\n    ", "\n      The preceding examples use INNER JOIN, but\n      multiple-table DELETE statements\n      can use other types of join permitted in\n      SELECT statements, such as\n      LEFT JOIN. For example, to delete rows that\n      exist in t1 that have no match in\n      t2, use a LEFT JOIN:\n    ", "Press CTRL+C to copy DELETE t1 FROM t1 LEFT JOIN t2 ON t1.id=t2.id WHERE t2.id IS NULL;", "\n      The syntax permits .* after each\n      tbl_name for compatibility with\n      Access.\n    ", "\n      If you use a multiple-table DELETE\n      statement involving InnoDB tables for which\n      there are foreign key constraints, the MySQL optimizer might\n      process tables in an order that differs from that of their\n      parent/child relationship. In this case, the statement fails and\n      rolls back. Instead, you should delete from a single table and\n      rely on the ON DELETE capabilities that\n      InnoDB provides to cause the other tables to be\n      modified accordingly.\n", "\n\nNote\n\n\n        If you declare an alias for a table, you must use the alias when\n        referring to the table:\n      Press CTRL+C to copy DELETE t1 FROM test AS t1, test2 WHERE ...\n", "\n      Table aliases in a multiple-table\n      DELETE should be declared only in\n      the table_references part of the\n      statement. Elsewhere, alias references are permitted but not alias\n      declarations.\n    ", "\n      Correct:\n    ", "Press CTRL+C to copy DELETE a1, a2 FROM t1 AS a1 INNER JOIN t2 AS a2\nWHERE a1.id=a2.id;\n\nDELETE FROM a1, a2 USING t1 AS a1 INNER JOIN t2 AS a2\nWHERE a1.id=a2.id;", "\n      Incorrect:\n    ", "Press CTRL+C to copy DELETE t1 AS a1, t2 AS a2 FROM t1 INNER JOIN t2\nWHERE a1.id=a2.id;\n\nDELETE FROM t1 AS a1, t2 AS a2 USING t1 INNER JOIN t2\nWHERE a1.id=a2.id;", "\n      Table aliases are also supported for single-table\n      DELETE statements.\n"]}], "Examples": ["DELETE FROM somelog WHERE user = 'jcole'\nORDER BY timestamp_column LIMIT 1;", "INSERT INTO t_copy SELECT * FROM t WHERE ... ;", "RENAME TABLE t TO t_old, t_copy TO t;", "DROP TABLE t_old;", "DELETE t1, t2 FROM t1 INNER JOIN t2 INNER JOIN t3\nWHERE t1.id=t2.id AND t2.id=t3.id;", "DELETE FROM t1, t2 USING t1 INNER JOIN t2 INNER JOIN t3\nWHERE t1.id=t2.id AND t2.id=t3.id;", "DELETE t1 FROM t1 LEFT JOIN t2 ON t1.id=t2.id WHERE t2.id IS NULL;", "DELETE a1, a2 FROM t1 AS a1 INNER JOIN t2 AS a2\nWHERE a1.id=a2.id;\n\nDELETE FROM a1, a2 USING t1 AS a1 INNER JOIN t2 AS a2\nWHERE a1.id=a2.id;", "DELETE t1 AS a1, t2 AS a2 FROM t1 INNER JOIN t2\nWHERE a1.id=a2.id;\n\nDELETE FROM t1 AS a1, t2 AS a2 USING t1 INNER JOIN t2\nWHERE a1.id=a2.id;"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/with.html"], "Title": ["15.2.20 WITH (Common Table Expressions)"], "Feature": ["with_clause:\n    WITH [RECURSIVE]\n        cte_name [(col_name [, col_name] ...)] AS (subquery)\n        [, cte_name [(col_name [, col_name] ...)] AS (subquery)] ...", "WITH ... SELECT ...\nWITH ... UPDATE ...\nWITH ... DELETE ...", "SELECT ... WHERE id IN (WITH ... SELECT ...) ...\nSELECT * FROM (WITH ... SELECT ...) AS dt ...", "INSERT ... WITH ... SELECT ...\nREPLACE ... WITH ... SELECT ...\nCREATE TABLE ... WITH ... SELECT ...\nCREATE VIEW ... WITH ... SELECT ...\nDECLARE CURSOR ... WITH ... SELECT ...\nEXPLAIN ... WITH ... SELECT ...", "WITH cte1 AS (...) WITH cte2 AS (...) SELECT ...", "WITH cte1 AS (...), cte2 AS (...) SELECT ...", "WITH cte1 AS (...), cte1 AS (...) SELECT ...", "WITH cte1 AS (...), cte2 AS (...) SELECT ...", "SELECT ...      -- return initial row set\nUNION ALL\nSELECT ...      -- return additional row sets", "SELECT 1", "SELECT n + 1 FROM cte WHERE n < 5"], "Description": ["\n      A common table expression (CTE) is a named temporary result set\n      that exists within the scope of a single statement and that can be\n      referred to later within that statement, possibly multiple times.\n      The following discussion describes how to write statements that\n      use CTEs.\n", "\nCommon Table ExpressionsRecursive Common Table ExpressionsLimiting Common Table Expression RecursionRecursive Common Table Expression ExamplesCommon Table Expressions Compared to Similar Constructs\n", "\n      For information about CTE optimization, see\n      Section\u00a010.2.2.4, \u201cOptimizing Derived Tables, View References, and Common Table Expressions\n          with Merging or Materialization\u201d.\n", "\n\n\n\nCommon Table Expressions\n\n\n\n\n        To specify common table expressions, use a\n        WITH clause that has one or more\n        comma-separated subclauses. Each subclause provides a subquery\n        that produces a result set, and associates a name with the\n        subquery. The following example defines CTEs named\n        cte1 and cte2 in the\n        WITH clause, and refers to them\n        in the top-level SELECT that\n        follows the WITH clause:\n      Press CTRL+C to copy WITH\n  cte1 AS (SELECT a, b FROM table1),\n  cte2 AS (SELECT c, d FROM table2)\nSELECT b, d FROM cte1 JOIN cte2\nWHERE cte1.a = cte2.c;\n        In the statement containing the\n        WITH clause, each CTE name can be\n        referenced to access the corresponding CTE result set.\n      \n        A CTE name can be referenced in other CTEs, enabling CTEs to be\n        defined based on other CTEs.\n      \n        A CTE can refer to itself to define a recursive CTE. Common\n        applications of recursive CTEs include series generation and\n        traversal of hierarchical or tree-structured data.\n      \n        Common table expressions are an optional part of the syntax for\n        DML statements. They are defined using a\n        WITH clause:\n      Press CTRL+C to copy with_clause:\n    WITH [RECURSIVE]\n        cte_name [(col_name [, col_name] ...)] AS (subquery)\n        [, cte_name [(col_name [, col_name] ...)] AS (subquery)] ...\ncte_name names a single common table\n        expression and can be used as a table reference in the statement\n        containing the WITH clause.\n      \n        The subquery part of AS\n        (subquery) is called the\n        \u201csubquery of the CTE\u201d and is what produces the CTE\n        result set. The parentheses following AS are\n        required.\n      \n        A common table expression is recursive if its subquery refers to\n        its own name. The RECURSIVE keyword must be\n        included if any CTE in the WITH\n        clause is recursive. For more information, see\n        Recursive Common Table Expressions.\n      \n        Determination of column names for a given CTE occurs as follows:\n\n\n\n            If a parenthesized list of names follows the CTE name, those\n            names are the column names:\n          Press CTRL+C to copy WITH cte (col1, col2) AS\n(\n  SELECT 1, 2\n  UNION ALL\n  SELECT 3, 4\n)\nSELECT col1, col2 FROM cte;\n            The number of names in the list must be the same as the\n            number of columns in the result set.\n          \n            Otherwise, the column names come from the select list of the\n            first SELECT within the\n            AS (subquery)\n            part:\n          Press CTRL+C to copy WITH cte AS\n(\n  SELECT 1 AS col1, 2 AS col2\n  UNION ALL\n  SELECT 3, 4\n)\nSELECT col1, col2 FROM cte;\n\n\n        A WITH clause is permitted in\n        these contexts:\n\n\n\n            At the beginning of SELECT,\n            UPDATE, and\n            DELETE statements.\n          Press CTRL+C to copy WITH ... SELECT ...\nWITH ... UPDATE ...\nWITH ... DELETE ...\n            At the beginning of subqueries (including derived table\n            subqueries):\n          Press CTRL+C to copy SELECT ... WHERE id IN (WITH ... SELECT ...) ...\nSELECT * FROM (WITH ... SELECT ...) AS dt ...\n            Immediately preceding SELECT\n            for statements that include a\n            SELECT statement:\n          Press CTRL+C to copy INSERT ... WITH ... SELECT ...\nREPLACE ... WITH ... SELECT ...\nCREATE TABLE ... WITH ... SELECT ...\nCREATE VIEW ... WITH ... SELECT ...\nDECLARE CURSOR ... WITH ... SELECT ...\nEXPLAIN ... WITH ... SELECT ...\n\n\n        Only one WITH clause is permitted\n        at the same level. WITH followed\n        by WITH at the same level is not\n        permitted, so this is illegal:\n      Press CTRL+C to copy WITH cte1 AS (...) WITH cte2 AS (...) SELECT ...\n        To make the statement legal, use a single\n        WITH clause that separates the\n        subclauses by a comma:\n      Press CTRL+C to copy WITH cte1 AS (...), cte2 AS (...) SELECT ...\n        However, a statement can contain multiple\n        WITH clauses if they occur at\n        different levels:\n      Press CTRL+C to copy WITH cte1 AS (SELECT 1)\nSELECT * FROM (WITH cte2 AS (SELECT 2) SELECT * FROM cte2 JOIN cte1) AS dt;\n        A WITH clause can define one or\n        more common table expressions, but each CTE name must be unique\n        to the clause. This is illegal:\n      Press CTRL+C to copy WITH cte1 AS (...), cte1 AS (...) SELECT ...\n        To make the statement legal, define the CTEs with unique names:\n      Press CTRL+C to copy WITH cte1 AS (...), cte2 AS (...) SELECT ...\n        A CTE can refer to itself or to other CTEs:\n\n\n\n            A self-referencing CTE is recursive.\n          \n            A CTE can refer to CTEs defined earlier in the same\n            WITH clause, but not those\n            defined later.\n          \n            This constraint rules out mutually-recursive CTEs, where\n            cte1 references cte2\n            and cte2 references\n            cte1. One of those references must be to\n            a CTE defined later, which is not permitted.\n          \n            A CTE in a given query block can refer to CTEs defined in\n            query blocks at a more outer level, but not CTEs defined in\n            query blocks at a more inner level.\n\n\n\n        For resolving references to objects with the same names, derived\n        tables hide CTEs; and CTEs hide base tables,\n        TEMPORARY tables, and views. Name resolution\n        occurs by searching for objects in the same query block, then\n        proceeding to outer blocks in turn while no object with the name\n        is found.\n      \n        For additional syntax considerations specific to recursive CTEs,\n        see Recursive Common Table Expressions.\n\n", "\n\n\n\nRecursive Common Table Expressions\n\n\n\n\n        A recursive common table expression is one having a subquery\n        that refers to its own name. For example:\n      Press CTRL+C to copy WITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte WHERE n < 5\n)\nSELECT * FROM cte;\n        When executed, the statement produces this result, a single\n        column containing a simple linear sequence:\n      Press CTRL+C to copy +------+\n| n    |\n+------+\n|    1 |\n|    2 |\n|    3 |\n|    4 |\n|    5 |\n+------+\n        A recursive CTE has this structure:\n\n\n\n            The WITH clause must begin with\n            WITH RECURSIVE if any CTE in the\n            WITH clause refers to itself. (If no CTE\n            refers to itself, RECURSIVE is permitted\n            but not required.)\n          \n            If you forget RECURSIVE for a recursive\n            CTE, this error is a likely result:\n          Press CTRL+C to copy ERROR 1146 (42S02): Table 'cte_name' doesn't exist\n            The recursive CTE subquery has two parts, separated by\n            UNION ALL\n            or UNION\n            [DISTINCT]:\n          Press CTRL+C to copy SELECT ...      -- return initial row set\nUNION ALL\nSELECT ...      -- return additional row sets\n            The first SELECT produces the\n            initial row or rows for the CTE and does not refer to the\n            CTE name. The second SELECT\n            produces additional rows and recurses by referring to the\n            CTE name in its FROM clause. Recursion\n            ends when this part produces no new rows. Thus, a recursive\n            CTE consists of a nonrecursive\n            SELECT part followed by a\n            recursive SELECT part.\n          \n            Each SELECT part can itself\n            be a union of multiple SELECT\n            statements.\n          \n            The types of the CTE result columns are inferred from the\n            column types of the nonrecursive\n            SELECT part only, and the\n            columns are all nullable. For type determination, the\n            recursive SELECT part is\n            ignored.\n          \n            If the nonrecursive and recursive parts are separated by\n            UNION\n            DISTINCT, duplicate rows are eliminated. This is\n            useful for queries that perform transitive closures, to\n            avoid infinite loops.\n          \n            Each iteration of the recursive part operates only on the\n            rows produced by the previous iteration. If the recursive\n            part has multiple query blocks, iterations of each query\n            block are scheduled in unspecified order, and each query\n            block operates on rows that have been produced either by its\n            previous iteration or by other query blocks since that\n            previous iteration's end.\n\n\n\n        The recursive CTE subquery shown earlier has this nonrecursive\n        part that retrieves a single row to produce the initial row set:\n      Press CTRL+C to copy SELECT 1\n        The CTE subquery also has this recursive part:\n      Press CTRL+C to copy SELECT n + 1 FROM cte WHERE n < 5\n        At each iteration, that SELECT\n        produces a row with a new value one greater than the value of\n        n from the previous row set. The first\n        iteration operates on the initial row set (1)\n        and produces 1+1=2; the second iteration\n        operates on the first iteration's row set (2)\n        and produces 2+1=3; and so forth. This\n        continues until recursion ends, which occurs when\n        n is no longer less than 5.\n      \n        If the recursive part of a CTE produces wider values for a\n        column than the nonrecursive part, it may be necessary to widen\n        the column in the nonrecursive part to avoid data truncation.\n        Consider this statement:\n      Press CTRL+C to copy WITH RECURSIVE cte AS\n(\n  SELECT 1 AS n, 'abc' AS str\n  UNION ALL\n  SELECT n + 1, CONCAT(str, str) FROM cte WHERE n < 3\n)\nSELECT * FROM cte;\n        In nonstrict SQL mode, the statement produces this output:\n      Press CTRL+C to copy +------+------+\n| n    | str  |\n+------+------+\n|    1 | abc  |\n|    2 | abc  |\n|    3 | abc  |\n+------+------+\n        The str column values are all\n        'abc' because the nonrecursive\n        SELECT determines the column\n        widths. Consequently, the wider str values\n        produced by the recursive SELECT\n        are truncated.\n      \n        In strict SQL mode, the statement produces an error:\n      Press CTRL+C to copy ERROR 1406 (22001): Data too long for column 'str' at row 1\n        To address this issue, so that the statement does not produce\n        truncation or errors, use CAST()\n        in the nonrecursive SELECT to\n        make the str column wider:\n      Press CTRL+C to copy WITH RECURSIVE cte AS\n(\n  SELECT 1 AS n, CAST('abc' AS CHAR(20)) AS str\n  UNION ALL\n  SELECT n + 1, CONCAT(str, str) FROM cte WHERE n < 3\n)\nSELECT * FROM cte;\n        Now the statement produces this result, without truncation:\n      Press CTRL+C to copy +------+--------------+\n| n    | str          |\n+------+--------------+\n|    1 | abc          |\n|    2 | abcabc       |\n|    3 | abcabcabcabc |\n+------+--------------+\n        Columns are accessed by name, not position, which means that\n        columns in the recursive part can access columns in the\n        nonrecursive part that have a different position, as this CTE\n        illustrates:\n      Press CTRL+C to copy WITH RECURSIVE cte AS\n(\n  SELECT 1 AS n, 1 AS p, -1 AS q\n  UNION ALL\n  SELECT n + 1, q * 2, p * 2 FROM cte WHERE n < 5\n)\nSELECT * FROM cte;\n        Because p in one row is derived from\n        q in the previous row, and vice versa, the\n        positive and negative values swap positions in each successive\n        row of the output:\n      Press CTRL+C to copy +------+------+------+\n| n    | p    | q    |\n+------+------+------+\n|    1 |    1 |   -1 |\n|    2 |   -2 |    2 |\n|    3 |    4 |   -4 |\n|    4 |   -8 |    8 |\n|    5 |   16 |  -16 |\n+------+------+------+\n        Some syntax constraints apply within recursive CTE subqueries:\n\n\n\n            The recursive SELECT part\n            must not contain these constructs:\n\n\n\n                Aggregate functions such as SUM()\n\n                Window functions\n              \nGROUP BY\n\nORDER BY\n\nDISTINCT\n\n\n\n            The recursive SELECT part of\n            a recursive CTE can also use a LIMIT\n            clause, along with an optional OFFSET\n            clause. The effect on the result set is the same as when\n            using LIMIT in the outermost\n            SELECT, but is also more efficient, since\n            using it with the recursive SELECT stops\n            the generation of rows as soon as the requested number of\n            them has been produced.\n          \n            The prohibition on DISTINCT applies only\n            to UNION members;\n            UNION DISTINCT is permitted.\n          \n            The recursive SELECT part\n            must reference the CTE only once and only in its\n            FROM clause, not in any subquery. It can\n            reference tables other than the CTE and join them with the\n            CTE. If used in a join like this, the CTE must not be on the\n            right side of a LEFT JOIN.\n\n\n\n        These constraints come from the SQL standard, other than the\n        MySQL-specific exclusions mentioned previously.\n      \n        For recursive CTEs, EXPLAIN\n        output rows for recursive SELECT\n        parts display Recursive in the\n        Extra column.\n      \n        Cost estimates displayed by\n        EXPLAIN represent cost per\n        iteration, which might differ considerably from total cost. The\n        optimizer cannot predict the number of iterations because it\n        cannot predict at what point the WHERE clause\n        becomes false.\n      \n        CTE actual cost may also be affected by result set size. A CTE\n        that produces many rows may require an internal temporary table\n        large enough to be converted from in-memory to on-disk format\n        and may suffer a performance penalty. If so, increasing the\n        permitted in-memory temporary table size may improve\n        performance; see Section\u00a010.4.4, \u201cInternal Temporary Table Use in MySQL\u201d.\n\n", "\n\n\n\nLimiting Common Table Expression Recursion\n\n\n\n\n        It is important for recursive CTEs that the recursive\n        SELECT part include a condition\n        to terminate recursion. As a development technique to guard\n        against a runaway recursive CTE, you can force termination by\n        placing a limit on execution time:\n\n\n\n            The cte_max_recursion_depth\n            system variable enforces a limit on the number of recursion\n            levels for CTEs. The server terminates execution of any CTE\n            that recurses more levels than the value of this variable.\n          \n            The max_execution_time\n            system variable enforces an execution timeout for\n            SELECT statements executed\n            within the current session.\n          \n            The MAX_EXECUTION_TIME\n            optimizer hint enforces a per-query execution timeout for\n            the SELECT statement in which\n            it appears.\n\n\n\n        Suppose that a recursive CTE is mistakenly written with no\n        recursion execution termination condition:\n      Press CTRL+C to copy WITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte\n)\nSELECT * FROM cte;\n        By default,\n        cte_max_recursion_depth has a\n        value of 1000, causing the CTE to terminate when it recurses\n        past 1000 levels. Applications can change the session value to\n        adjust for their requirements:\n      Press CTRL+C to copy SET SESSION cte_max_recursion_depth = 10;      -- permit only shallow recursion\nSET SESSION cte_max_recursion_depth = 1000000; -- permit deeper recursion\n        You can also set the global\n        cte_max_recursion_depth value\n        to affect all sessions that begin subsequently.\n      \n        For queries that execute and thus recurse slowly or in contexts\n        for which there is reason to set the\n        cte_max_recursion_depth value\n        very high, another way to guard against deep recursion is to set\n        a per-session timeout. To do so, execute a statement like this\n        prior to executing the CTE statement:\n      Press CTRL+C to copy SET max_execution_time = 1000; -- impose one second timeout\n        Alternatively, include an optimizer hint within the CTE\n        statement itself:\n      Press CTRL+C to copy WITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte\n)\nSELECT /*+ SET_VAR(cte_max_recursion_depth = 1M) */ * FROM cte;\n\nWITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte\n)\nSELECT /*+ MAX_EXECUTION_TIME(1000) */ * FROM cte;\n        You can also use LIMIT within the recursive\n        query to impose a maximum number of rows to be returned to the\n        outermost SELECT, for example:\n      Press CTRL+C to copy WITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte LIMIT 10000\n)\nSELECT * FROM cte;\n        You can do this in addition to or instead of setting a time\n        limit. Thus, the following CTE terminates after returning ten\n        thousand rows or running for one second (1000 milliseconds),\n        whichever occurs first:\n      Press CTRL+C to copy WITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte LIMIT 10000\n)\nSELECT /*+ MAX_EXECUTION_TIME(1000) */ * FROM cte;\n        If a recursive query without an execution time limit enters an\n        infinite loop, you can terminate it from another session using\n        KILL QUERY.\n        Within the session itself, the client program used to run the\n        query might provide a way to kill the query. For example, in\n        mysql, typing Control+C\n        interrupts the current statement.\n\n", "\n\n\n\nRecursive Common Table Expression Examples\n\n\n\n\n        As mentioned previously, recursive common table expressions\n        (CTEs) are frequently used for series generation and traversing\n        hierarchical or tree-structured data. This section shows some\n        simple examples of these techniques.\n\n\nFibonacci Series GenerationDate Series GenerationHierarchical Data Traversal\n\nFibonacci Series Generation\n\n        A Fibonacci series begins with the two numbers 0 and 1 (or 1 and\n        1) and each number after that is the sum of the previous two\n        numbers. A recursive common table expression can generate a\n        Fibonacci series if each row produced by the recursive\n        SELECT has access to the two\n        previous numbers from the series. The following CTE generates a\n        10-number series using 0 and 1 as the first two numbers:\n      Press CTRL+C to copy WITH RECURSIVE fibonacci (n, fib_n, next_fib_n) AS\n(\n  SELECT 1, 0, 1\n  UNION ALL\n  SELECT n + 1, next_fib_n, fib_n + next_fib_n\n    FROM fibonacci WHERE n < 10\n)\nSELECT * FROM fibonacci;\n        The CTE produces this result:\n      Press CTRL+C to copy +------+-------+------------+\n| n    | fib_n | next_fib_n |\n+------+-------+------------+\n|    1 |     0 |          1 |\n|    2 |     1 |          1 |\n|    3 |     1 |          2 |\n|    4 |     2 |          3 |\n|    5 |     3 |          5 |\n|    6 |     5 |          8 |\n|    7 |     8 |         13 |\n|    8 |    13 |         21 |\n|    9 |    21 |         34 |\n|   10 |    34 |         55 |\n+------+-------+------------+\n        How the CTE works:\n\n\n\nn is a display column to indicate that\n            the row contains the n-th Fibonacci\n            number. For example, the 8th Fibonacci number is 13.\n          \n            The fib_n column displays Fibonacci\n            number n.\n          \n            The next_fib_n column displays the next\n            Fibonacci number after number n. This\n            column provides the next series value to the next row, so\n            that row can produce the sum of the two previous series\n            values in its fib_n column.\n          \n            Recursion ends when n reaches 10. This is\n            an arbitrary choice, to limit the output to a small set of\n            rows.\n\n\n\n        The preceding output shows the entire CTE result. To select just\n        part of it, add an appropriate WHERE clause\n        to the top-level SELECT. For\n        example, to select the 8th Fibonacci number, do this:\n      Press CTRL+C to copy mysql> WITH RECURSIVE fibonacci ...\n       ...\n       SELECT fib_n FROM fibonacci WHERE n = 8;\n+-------+\n| fib_n |\n+-------+\n|    13 |\n+-------+\nDate Series Generation\n\n        A common table expression can generate a series of successive\n        dates, which is useful for generating summaries that include a\n        row for all dates in the series, including dates not represented\n        in the summarized data.\n      \n        Suppose that a table of sales numbers contains these rows:\n      Press CTRL+C to copy mysql> SELECT * FROM sales ORDER BY date, price;\n+------------+--------+\n| date       | price  |\n+------------+--------+\n| 2017-01-03 | 100.00 |\n| 2017-01-03 | 200.00 |\n| 2017-01-06 |  50.00 |\n| 2017-01-08 |  10.00 |\n| 2017-01-08 |  20.00 |\n| 2017-01-08 | 150.00 |\n| 2017-01-10 |   5.00 |\n+------------+--------+\n        This query summarizes the sales per day:\n      Press CTRL+C to copy mysql> SELECT date, SUM(price) AS sum_price\n       FROM sales\n       GROUP BY date\n       ORDER BY date;\n+------------+-----------+\n| date       | sum_price |\n+------------+-----------+\n| 2017-01-03 |    300.00 |\n| 2017-01-06 |     50.00 |\n| 2017-01-08 |    180.00 |\n| 2017-01-10 |      5.00 |\n+------------+-----------+\n        However, that result contains \u201choles\u201d for dates not\n        represented in the range of dates spanned by the table. A result\n        that represents all dates in the range can be produced using a\n        recursive CTE to generate that set of dates, joined with a\n        LEFT JOIN to the sales data.\n      \n        Here is the CTE to generate the date range series:\n      Press CTRL+C to copy WITH RECURSIVE dates (date) AS\n(\n  SELECT MIN(date) FROM sales\n  UNION ALL\n  SELECT date + INTERVAL 1 DAY FROM dates\n  WHERE date + INTERVAL 1 DAY <= (SELECT MAX(date) FROM sales)\n)\nSELECT * FROM dates;\n        The CTE produces this result:\n      Press CTRL+C to copy +------------+\n| date       |\n+------------+\n| 2017-01-03 |\n| 2017-01-04 |\n| 2017-01-05 |\n| 2017-01-06 |\n| 2017-01-07 |\n| 2017-01-08 |\n| 2017-01-09 |\n| 2017-01-10 |\n+------------+\n        How the CTE works:\n\n\n\n            The nonrecursive SELECT\n            produces the lowest date in the date range spanned by the\n            sales table.\n          \n            Each row produced by the recursive\n            SELECT adds one day to the\n            date produced by the previous row.\n          \n            Recursion ends after the dates reach the highest date in the\n            date range spanned by the sales table.\n\n\n\n        Joining the CTE with a LEFT JOIN against the\n        sales table produces the sales summary with a\n        row for each date in the range:\n      Press CTRL+C to copy WITH RECURSIVE dates (date) AS\n(\n  SELECT MIN(date) FROM sales\n  UNION ALL\n  SELECT date + INTERVAL 1 DAY FROM dates\n  WHERE date + INTERVAL 1 DAY <= (SELECT MAX(date) FROM sales)\n)\nSELECT dates.date, COALESCE(SUM(price), 0) AS sum_price\nFROM dates LEFT JOIN sales ON dates.date = sales.date\nGROUP BY dates.date\nORDER BY dates.date;\n        The output looks like this:\n      Press CTRL+C to copy +------------+-----------+\n| date       | sum_price |\n+------------+-----------+\n| 2017-01-03 |    300.00 |\n| 2017-01-04 |      0.00 |\n| 2017-01-05 |      0.00 |\n| 2017-01-06 |     50.00 |\n| 2017-01-07 |      0.00 |\n| 2017-01-08 |    180.00 |\n| 2017-01-09 |      0.00 |\n| 2017-01-10 |      5.00 |\n+------------+-----------+\n        Some points to note:\n\n\n\n            Are the queries inefficient, particularly the one with the\n            MAX() subquery executed for\n            each row in the recursive\n            SELECT?\n            EXPLAIN shows that the\n            subquery containing MAX() is\n            evaluated only once and the result is cached.\n          \n            The use of COALESCE() avoids\n            displaying NULL in the\n            sum_price column on days for which no\n            sales data occur in the sales table.\n\n\nHierarchical Data Traversal\n\n        Recursive common table expressions are useful for traversing\n        data that forms a hierarchy. Consider these statements that\n        create a small data set that shows, for each employee in a\n        company, the employee name and ID number, and the ID of the\n        employee's manager. The top-level employee (the CEO), has a\n        manager ID of NULL (no manager).\n      Press CTRL+C to copy CREATE TABLE employees (\n  id         INT PRIMARY KEY NOT NULL,\n  name       VARCHAR(100) NOT NULL,\n  manager_id INT NULL,\n  INDEX (manager_id),\nFOREIGN KEY (manager_id) REFERENCES employees (id)\n);\nINSERT INTO employees VALUES\n(333, \"Yasmina\", NULL),  # Yasmina is the CEO (manager_id is NULL)\n(198, \"John\", 333),      # John has ID 198 and reports to 333 (Yasmina)\n(692, \"Tarek\", 333),\n(29, \"Pedro\", 198),\n(4610, \"Sarah\", 29),\n(72, \"Pierre\", 29),\n(123, \"Adil\", 692);\n        The resulting data set looks like this:\n      Press CTRL+C to copy mysql> SELECT * FROM employees ORDER BY id;\n+------+---------+------------+\n| id   | name    | manager_id |\n+------+---------+------------+\n|   29 | Pedro   |        198 |\n|   72 | Pierre  |         29 |\n|  123 | Adil    |        692 |\n|  198 | John    |        333 |\n|  333 | Yasmina |       NULL |\n|  692 | Tarek   |        333 |\n| 4610 | Sarah   |         29 |\n+------+---------+------------+\n        To produce the organizational chart with the management chain\n        for each employee (that is, the path from CEO to employee), use\n        a recursive CTE:\n      Press CTRL+C to copy WITH RECURSIVE employee_paths (id, name, path) AS\n(\n  SELECT id, name, CAST(id AS CHAR(200))\n    FROM employees\n    WHERE manager_id IS NULL\n  UNION ALL\n  SELECT e.id, e.name, CONCAT(ep.path, ',', e.id)\n    FROM employee_paths AS ep JOIN employees AS e\n      ON ep.id = e.manager_id\n)\nSELECT * FROM employee_paths ORDER BY path;\n        The CTE produces this output:\n      Press CTRL+C to copy +------+---------+-----------------+\n| id   | name    | path            |\n+------+---------+-----------------+\n|  333 | Yasmina | 333             |\n|  198 | John    | 333,198         |\n|   29 | Pedro   | 333,198,29      |\n| 4610 | Sarah   | 333,198,29,4610 |\n|   72 | Pierre  | 333,198,29,72   |\n|  692 | Tarek   | 333,692         |\n|  123 | Adil    | 333,692,123     |\n+------+---------+-----------------+\n        How the CTE works:\n\n\n\n            The nonrecursive SELECT\n            produces the row for the CEO (the row with a\n            NULL manager ID).\n          \n            The path column is widened to\n            CHAR(200) to ensure that there is room\n            for the longer path values produced by\n            the recursive SELECT.\n          \n            Each row produced by the recursive\n            SELECT finds all employees\n            who report directly to an employee produced by a previous\n            row. For each such employee, the row includes the employee\n            ID and name, and the employee management chain. The chain is\n            the manager's chain, with the employee ID added to the end.\n          \n            Recursion ends when employees have no others who report to\n            them.\n\n\n\n        To find the path for a specific employee or employees, add a\n        WHERE clause to the top-level\n        SELECT. For example, to display\n        the results for Tarek and Sarah, modify that\n        SELECT like this:\n      Press CTRL+C to copy mysql> WITH RECURSIVE ...\n       ...\n       SELECT * FROM employees_extended\n       WHERE id IN (692, 4610)\n       ORDER BY path;\n+------+-------+-----------------+\n| id   | name  | path            |\n+------+-------+-----------------+\n| 4610 | Sarah | 333,198,29,4610 |\n|  692 | Tarek | 333,692         |\n+------+-------+-----------------+\n", "\n\n\n\nCommon Table Expressions Compared to Similar Constructs\n\n\n\n\n        Common table expressions (CTEs) are similar to derived tables in\n        some ways:\n\n\n\n            Both constructs are named.\n          \n            Both constructs exist for the scope of a single statement.\n\n\n\n        Because of these similarities, CTEs and derived tables often can\n        be used interchangeably. As a trivial example, these statements\n        are equivalent:\n      Press CTRL+C to copy WITH cte AS (SELECT 1) SELECT * FROM cte;\nSELECT * FROM (SELECT 1) AS dt;\n        However, CTEs have some advantages over derived tables:\n\n\n\n            A derived table can be referenced only a single time within\n            a query. A CTE can be referenced multiple times. To use\n            multiple instances of a derived table result, you must\n            derive the result multiple times.\n          \n            A CTE can be self-referencing (recursive).\n          \n            One CTE can refer to another.\n          \n            A CTE may be easier to read when its definition appears at\n            the beginning of the statement rather than embedded within\n            it.\n\n\n\n        CTEs are similar to tables created with\n        CREATE [TEMPORARY]\n        TABLE but need not be defined or dropped explicitly.\n        For a CTE, you need no privileges to create tables.\n\n"], "Examples": ["WITH\n  cte1 AS (SELECT a, b FROM table1),\n  cte2 AS (SELECT c, d FROM table2)\nSELECT b, d FROM cte1 JOIN cte2\nWHERE cte1.a = cte2.c;", "WITH cte (col1, col2) AS\n(\n  SELECT 1, 2\n  UNION ALL\n  SELECT 3, 4\n)\nSELECT col1, col2 FROM cte;", "WITH cte AS\n(\n  SELECT 1 AS col1, 2 AS col2\n  UNION ALL\n  SELECT 3, 4\n)\nSELECT col1, col2 FROM cte;", "WITH cte1 AS (SELECT 1)\nSELECT * FROM (WITH cte2 AS (SELECT 2) SELECT * FROM cte2 JOIN cte1) AS dt;", "WITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte WHERE n < 5\n)\nSELECT * FROM cte;", "WITH RECURSIVE cte AS\n(\n  SELECT 1 AS n, 'abc' AS str\n  UNION ALL\n  SELECT n + 1, CONCAT(str, str) FROM cte WHERE n < 3\n)\nSELECT * FROM cte;", "WITH RECURSIVE cte AS\n(\n  SELECT 1 AS n, CAST('abc' AS CHAR(20)) AS str\n  UNION ALL\n  SELECT n + 1, CONCAT(str, str) FROM cte WHERE n < 3\n)\nSELECT * FROM cte;", "WITH RECURSIVE cte AS\n(\n  SELECT 1 AS n, 1 AS p, -1 AS q\n  UNION ALL\n  SELECT n + 1, q * 2, p * 2 FROM cte WHERE n < 5\n)\nSELECT * FROM cte;", "WITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte\n)\nSELECT * FROM cte;", "SET SESSION cte_max_recursion_depth = 10;      -- permit only shallow recursion\nSET SESSION cte_max_recursion_depth = 1000000; -- permit deeper recursion", "SET max_execution_time = 1000; -- impose one second timeout", "WITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte\n)\nSELECT /*+ SET_VAR(cte_max_recursion_depth = 1M) */ * FROM cte;\n\nWITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte\n)\nSELECT /*+ MAX_EXECUTION_TIME(1000) */ * FROM cte;", "WITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte LIMIT 10000\n)\nSELECT * FROM cte;", "WITH RECURSIVE cte (n) AS\n(\n  SELECT 1\n  UNION ALL\n  SELECT n + 1 FROM cte LIMIT 10000\n)\nSELECT /*+ MAX_EXECUTION_TIME(1000) */ * FROM cte;", "WITH RECURSIVE fibonacci (n, fib_n, next_fib_n) AS\n(\n  SELECT 1, 0, 1\n  UNION ALL\n  SELECT n + 1, next_fib_n, fib_n + next_fib_n\n    FROM fibonacci WHERE n < 10\n)\nSELECT * FROM fibonacci;", "mysql> WITH RECURSIVE fibonacci ...\n       ...\n       SELECT fib_n FROM fibonacci WHERE n = 8;\n+-------+\n| fib_n |\n+-------+\n|    13 |\n+-------+", "mysql> SELECT * FROM sales ORDER BY date, price;\n+------------+--------+\n| date       | price  |\n+------------+--------+\n| 2017-01-03 | 100.00 |\n| 2017-01-03 | 200.00 |\n| 2017-01-06 |  50.00 |\n| 2017-01-08 |  10.00 |\n| 2017-01-08 |  20.00 |\n| 2017-01-08 | 150.00 |\n| 2017-01-10 |   5.00 |\n+------------+--------+", "mysql> SELECT date, SUM(price) AS sum_price\n       FROM sales\n       GROUP BY date\n       ORDER BY date;\n+------------+-----------+\n| date       | sum_price |\n+------------+-----------+\n| 2017-01-03 |    300.00 |\n| 2017-01-06 |     50.00 |\n| 2017-01-08 |    180.00 |\n| 2017-01-10 |      5.00 |\n+------------+-----------+", "WITH RECURSIVE dates (date) AS\n(\n  SELECT MIN(date) FROM sales\n  UNION ALL\n  SELECT date + INTERVAL 1 DAY FROM dates\n  WHERE date + INTERVAL 1 DAY <= (SELECT MAX(date) FROM sales)\n)\nSELECT * FROM dates;", "WITH RECURSIVE dates (date) AS\n(\n  SELECT MIN(date) FROM sales\n  UNION ALL\n  SELECT date + INTERVAL 1 DAY FROM dates\n  WHERE date + INTERVAL 1 DAY <= (SELECT MAX(date) FROM sales)\n)\nSELECT dates.date, COALESCE(SUM(price), 0) AS sum_price\nFROM dates LEFT JOIN sales ON dates.date = sales.date\nGROUP BY dates.date\nORDER BY dates.date;", "CREATE TABLE employees (\n  id         INT PRIMARY KEY NOT NULL,\n  name       VARCHAR(100) NOT NULL,\n  manager_id INT NULL,\n  INDEX (manager_id),\nFOREIGN KEY (manager_id) REFERENCES employees (id)\n);\nINSERT INTO employees VALUES\n(333, \"Yasmina\", NULL),  # Yasmina is the CEO (manager_id is NULL)\n(198, \"John\", 333),      # John has ID 198 and reports to 333 (Yasmina)\n(692, \"Tarek\", 333),\n(29, \"Pedro\", 198),\n(4610, \"Sarah\", 29),\n(72, \"Pierre\", 29),\n(123, \"Adil\", 692);", "mysql> SELECT * FROM employees ORDER BY id;\n+------+---------+------------+\n| id   | name    | manager_id |\n+------+---------+------------+\n|   29 | Pedro   |        198 |\n|   72 | Pierre  |         29 |\n|  123 | Adil    |        692 |\n|  198 | John    |        333 |\n|  333 | Yasmina |       NULL |\n|  692 | Tarek   |        333 |\n| 4610 | Sarah   |         29 |\n+------+---------+------------+", "WITH RECURSIVE employee_paths (id, name, path) AS\n(\n  SELECT id, name, CAST(id AS CHAR(200))\n    FROM employees\n    WHERE manager_id IS NULL\n  UNION ALL\n  SELECT e.id, e.name, CONCAT(ep.path, ',', e.id)\n    FROM employee_paths AS ep JOIN employees AS e\n      ON ep.id = e.manager_id\n)\nSELECT * FROM employee_paths ORDER BY path;", "mysql> WITH RECURSIVE ...\n       ...\n       SELECT * FROM employees_extended\n       WHERE id IN (692, 4610)\n       ORDER BY path;\n+------+-------+-----------------+\n| id   | name  | path            |\n+------+-------+-----------------+\n| 4610 | Sarah | 333,198,29,4610 |\n|  692 | Tarek | 333,692         |\n+------+-------+-----------------+", "WITH cte AS (SELECT 1) SELECT * FROM cte;\nSELECT * FROM (SELECT 1) AS dt;"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/do.html"], "Title": ["15.2.3 DO Statement"], "Feature": ["DO expr [, expr] ..."], "Description": ["\nDO executes the expressions but\n      does not return any results. In most respects,\n      DO is shorthand for SELECT\n      expr, ..., but has the\n      advantage that it is slightly faster when you do not care about\n      the result.\n    ", "\nDO is useful primarily with\n      functions that have side effects, such as\n      RELEASE_LOCK().\n    ", "\n      Example: This SELECT statement\n      pauses, but also produces a result set:\n    ", "Press CTRL+C to copy mysql> SELECT SLEEP(5);\n+----------+\n| SLEEP(5) |\n+----------+\n|        0 |\n+----------+\n1 row in set (5.02 sec)", "\nDO, on the other hand, pauses\n      without producing a result set.:\n    ", "Press CTRL+C to copy mysql> DO SLEEP(5);\nQuery OK, 0 rows affected (4.99 sec)", "\n      This could be useful, for example in a stored function or trigger,\n      which prohibit statements that produce result sets.\n    ", "\nDO only executes expressions. It\n      cannot be used in all cases where SELECT can be\n      used. For example, DO id FROM t1 is invalid\n      because it references a table.\n"], "Examples": ["mysql> SELECT SLEEP(5);\n+----------+\n| SLEEP(5) |\n+----------+\n|        0 |\n+----------+\n1 row in set (5.02 sec)", "mysql> DO SLEEP(5);\nQuery OK, 0 rows affected (4.99 sec)"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/except.html"], "Title": ["15.2.4 EXCEPT Clause"], "Feature": ["query_expression_body EXCEPT [ALL | DISTINCT] query_expression_body\n    [EXCEPT [ALL | DISTINCT] query_expression_body]\n    [...]\n\nquery_expression_body:\n    See Section 15.2.14, \u201cSet Operations with UNION, INTERSECT, and EXCEPT\u201d"], "Description": ["\nEXCEPT limits the result from the\n      first query block to those rows which are (also) not found in the\n      second. As with UNION and\n      INTERSECT, either query block can\n      make use of any of SELECT,\n      TABLE, or\n      VALUES. An example using the tables\n      a, b, and\n      c defined in Section\u00a015.2.8, \u201cINTERSECT Clause\u201d, is\n      shown here:\n    ", "Press CTRL+C to copy mysql> TABLE a EXCEPT TABLE b;\n+------+------+\n| m    | n    |\n+------+------+\n|    2 |    3 |\n+------+------+\n1 row in set (0.00 sec)\n\nmysql> TABLE a EXCEPT TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n|    2 |    3 |\n+------+------+\n2 rows in set (0.00 sec)\n\nmysql> TABLE b EXCEPT TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n+------+------+\n1 row in set (0.00 sec)", "\n      As with UNION and\n      INTERSECT, if neither\n      DISTINCT nor ALL is\n      specified, the default is DISTINCT.\n    ", "\nDISTINCT removes duplicates found on either\n      side of the relation, as shown here:\n    ", "Press CTRL+C to copy mysql> TABLE c EXCEPT DISTINCT TABLE a;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n+------+------+\n1 row in set (0.00 sec)\n\nmysql> TABLE c EXCEPT ALL TABLE a;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n|    1 |    3 |\n+------+------+\n2 rows in set (0.00 sec)", "\n      (The first statement has the same effect as TABLE c\n      EXCEPT TABLE a.)\n    ", "\n      Unlike UNION or INTERSECT,\n      EXCEPT is not\n      commutative\u2014that is, the result depends on the order of the\n      operands, as shown here:\n    ", "Press CTRL+C to copy mysql> TABLE a EXCEPT TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n|    2 |    3 |\n+------+------+\n2 rows in set (0.00 sec)\n\nmysql> TABLE c EXCEPT TABLE a;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n+------+------+\n1 row in set (0.00 sec)", "\n      As with UNION, the result sets to be compared\n      must have the same number of columns. Result set column types are\n      also determined as for UNION.\n"], "Examples": ["mysql> TABLE a EXCEPT TABLE b;\n+------+------+\n| m    | n    |\n+------+------+\n|    2 |    3 |\n+------+------+\n1 row in set (0.00 sec)\n\nmysql> TABLE a EXCEPT TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n|    2 |    3 |\n+------+------+\n2 rows in set (0.00 sec)\n\nmysql> TABLE b EXCEPT TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n+------+------+\n1 row in set (0.00 sec)", "mysql> TABLE c EXCEPT DISTINCT TABLE a;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n+------+------+\n1 row in set (0.00 sec)\n\nmysql> TABLE c EXCEPT ALL TABLE a;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n|    1 |    3 |\n+------+------+\n2 rows in set (0.00 sec)", "mysql> TABLE a EXCEPT TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n|    2 |    3 |\n+------+------+\n2 rows in set (0.00 sec)\n\nmysql> TABLE c EXCEPT TABLE a;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n+------+------+\n1 row in set (0.00 sec)"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/handler.html"], "Title": ["15.2.5 HANDLER Statement"], "Feature": ["HANDLER tbl_name OPEN [ [AS] alias]\n\nHANDLER tbl_name READ index_name { = | <= | >= | < | > } (value1,value2,...)\n    [ WHERE where_condition ] [LIMIT ... ]\nHANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST }\n    [ WHERE where_condition ] [LIMIT ... ]\nHANDLER tbl_name READ { FIRST | NEXT }\n    [ WHERE where_condition ] [LIMIT ... ]\n\nHANDLER tbl_name CLOSE", "HANDLER ... READ my_idx = (col_a_val,col_b_val,col_c_val) ...\nHANDLER ... READ my_idx = (col_a_val,col_b_val) ...\nHANDLER ... READ my_idx = (col_a_val) ...", "HANDLER tbl_name READ `PRIMARY` ..."], "Description": ["\n      The HANDLER statement provides direct access to\n      table storage engine interfaces. It is available for\n      InnoDB and MyISAM tables.\n    ", "\n      The HANDLER ... OPEN statement opens a table,\n      making it accessible using subsequent HANDLER ...\n      READ statements. This table object is not shared by\n      other sessions and is not closed until the session calls\n      HANDLER ... CLOSE or the session terminates.\n    ", "\n      If you open the table using an alias, further references to the\n      open table with other HANDLER statements must\n      use the alias rather than the table name. If you do not use an\n      alias, but open the table using a table name qualified by the\n      database name, further references must use the unqualified table\n      name. For example, for a table opened using\n      mydb.mytable, further references must use\n      mytable.\n    ", "\n      The first HANDLER ... READ syntax fetches a row\n      where the index specified satisfies the given values and the\n      WHERE condition is met. If you have a\n      multiple-column index, specify the index column values as a\n      comma-separated list. Either specify values for all the columns in\n      the index, or specify values for a leftmost prefix of the index\n      columns. Suppose that an index my_idx includes\n      three columns named col_a,\n      col_b, and col_c, in that\n      order. The HANDLER statement can specify values\n      for all three columns in the index, or for the columns in a\n      leftmost prefix. For example:\n    ", "\n      To employ the HANDLER interface to refer to a\n      table's PRIMARY KEY, use the quoted identifier\n      `PRIMARY`:\n    ", "\n      The second HANDLER ... READ syntax fetches a\n      row from the table in index order that matches the\n      WHERE condition.\n    ", "\n      The third HANDLER ... READ syntax fetches a row\n      from the table in natural row order that matches the\n      WHERE condition. It is faster than\n      HANDLER tbl_name READ\n      index_name when a full table\n      scan is desired. Natural row order is the order in which rows are\n      stored in a MyISAM table data file. This\n      statement works for InnoDB tables as well, but\n      there is no such concept because there is no separate data file.\n    ", "\n      Without a LIMIT clause, all forms of\n      HANDLER ... READ fetch a single row if one is\n      available. To return a specific number of rows, include a\n      LIMIT clause. It has the same syntax as for the\n      SELECT statement. See\n      Section\u00a015.2.13, \u201cSELECT Statement\u201d.\n    ", "\nHANDLER ... CLOSE closes a table that was\n      opened with HANDLER ... OPEN.\n    ", "\n      There are several reasons to use the HANDLER\n      interface instead of normal SELECT\n      statements:\n", "\n\nHANDLER is faster than\n          SELECT:\n\n\n\n              A designated storage engine handler object is allocated\n              for the HANDLER ... OPEN. The object is\n              reused for subsequent HANDLER\n              statements for that table; it need not be reinitialized\n              for each one.\n            \n              There is less parsing involved.\n            \n              There is no optimizer or query-checking overhead.\n            \n              The handler interface does not have to provide a\n              consistent look of the data (for example,\n              dirty reads are\n              permitted), so the storage engine can use optimizations\n              that SELECT does not\n              normally permit.\n\n\n\nHANDLER makes it easier to port to MySQL\n          applications that use a low-level ISAM-like\n          interface.\n        \nHANDLER enables you to traverse a database\n          in a manner that is difficult (or even impossible) to\n          accomplish with SELECT. The\n          HANDLER interface is a more natural way to\n          look at data when working with applications that provide an\n          interactive user interface to the database.\n\n", "\nHANDLER is a somewhat low-level statement. For\n      example, it does not provide consistency. That is,\n      HANDLER ... OPEN does not\n      take a snapshot of the table, and does not\n      lock the table. This means that after a HANDLER ...\n      OPEN statement is issued, table data can be modified (by\n      the current session or other sessions) and these modifications\n      might be only partially visible to HANDLER ...\n      NEXT or HANDLER ... PREV scans.\n    ", "\n      An open handler can be closed and marked for reopen, in which case\n      the handler loses its position in the table. This occurs when both\n      of the following circumstances are true:\n", "\n\n          Any session executes FLUSH\n          TABLES or DDL statements on the handler's table.\n        \n          The session in which the handler is open executes\n          non-HANDLER statements that use tables.\n\n", "\nTRUNCATE TABLE for a table closes\n      all handlers for the table that were opened with\n      HANDLER OPEN.\n    ", "\n      If a table is flushed with\n      FLUSH\n      TABLES tbl_name WITH READ\n      LOCK was opened with HANDLER, the\n      handler is implicitly flushed and loses its position.\n"], "Examples": [], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/import-table.html"], "Title": ["15.2.6 IMPORT TABLE Statement"], "Feature": ["IMPORT TABLE FROM sdi_file [, sdi_file] ..."], "Description": ["\n      The IMPORT TABLE statement imports\n      MyISAM tables based on information contained in\n      .sdi (serialized dictionary information)\n      metadata files. IMPORT TABLE\n      requires the FILE privilege to read\n      the .sdi and table content files, and the\n      CREATE privilege for the table to\n      be created.\n    ", "\n      Tables can be exported from one server using\n      mysqldump to write a file of SQL statements and\n      imported into another server using mysql to\n      process the dump file. IMPORT TABLE\n      provides a faster alternative using the \u201craw\u201d table\n      files.\n    ", "\n      Prior to import, the files that provide the table content must be\n      placed in the appropriate schema directory for the import server,\n      and the .sdi file must be located in a\n      directory accessible to the server. For example, the\n      .sdi file can be placed in the directory\n      named by the secure_file_priv\n      system variable, or (if\n      secure_file_priv is empty) in a\n      directory under the server data directory.\n    ", "\n      The following example describes how to export\n      MyISAM tables named\n      employees and managers from\n      the hr schema of one server and import them\n      into the hr schema of another server. The\n      example uses these assumptions (to perform a similar operation on\n      your own system, modify the path names as appropriate):\n", "\n\n          For the export server,\n          export_basedir represents its base\n          directory, and its data directory is\n          export_basedir/data.\n        \n          For the import server,\n          import_basedir represents its base\n          directory, and its data directory is\n          import_basedir/data.\n        \n          Table files are exported from the export server into the\n          /tmp/export directory and this directory\n          is secure (not accessible to other users).\n        \n          The import server uses /tmp/mysql-files\n          as the directory named by its\n          secure_file_priv system\n          variable.\n\n", "\n      To export tables from the export server, use this procedure:\n", "\n\n          Ensure a consistent snapshot by executing this statement to\n          lock the tables so that they cannot be modified during export:\n        Press CTRL+C to copy mysql> FLUSH TABLES hr.employees, hr.managers WITH READ LOCK;\n          While the lock is in effect, the tables can still be used, but\n          only for read access.\n        \n          At the file system level, copy the .sdi\n          and table content files from the hr schema\n          directory to the secure export directory:\n\n\n\n              The .sdi file is located in the\n              hr schema directory, but might not have\n              exactly the same basename as the table name. For example,\n              the .sdi files for the\n              employees and\n              managers tables might be named\n              employees_125.sdi and\n              managers_238.sdi.\n            \n              For a MyISAM table, the content files\n              are its .MYD data file and\n              .MYI index file.\n\n\n\n          Given those file names, the copy commands look like this:\n        Press CTRL+C to copy $> cd export_basedir/data/hr\n$> cp employees_125.sdi /tmp/export\n$> cp managers_238.sdi /tmp/export\n$> cp employees.{MYD,MYI} /tmp/export\n$> cp managers.{MYD,MYI} /tmp/export\n          Unlock the tables:\n        Press CTRL+C to copy mysql> UNLOCK TABLES;\n", "\n      To import tables into the import server, use this procedure:\n", "\n\n          The import schema must exist. If necessary, execute this\n          statement to create it:\n        Press CTRL+C to copy mysql> CREATE SCHEMA hr;\n          At the file system level, copy the .sdi\n          files to the import server\n          secure_file_priv directory,\n          /tmp/mysql-files. Also, copy the table\n          content files to the hr schema directory:\n        Press CTRL+C to copy $> cd /tmp/export\n$> cp employees_125.sdi /tmp/mysql-files\n$> cp managers_238.sdi /tmp/mysql-files\n$> cp employees.{MYD,MYI} import_basedir/data/hr\n$> cp managers.{MYD,MYI} import_basedir/data/hr\n          Import the tables by executing an IMPORT\n          TABLE statement that names the\n          .sdi files:\n        Press CTRL+C to copy mysql> IMPORT TABLE FROM\n       '/tmp/mysql-files/employees.sdi',\n       '/tmp/mysql-files/managers.sdi';\n", "\n      The .sdi file need not be placed in the\n      import server directory named by the\n      secure_file_priv system variable\n      if that variable is empty; it can be in any directory accessible\n      to the server, including the schema directory for the imported\n      table. If the .sdi file is placed in that\n      directory, however, it may be rewritten; the import operation\n      creates a new .sdi file for the table, which\n      overwrites the old .sdi file if the operation\n      uses the same file name for the new file.\n    ", "\n      Each sdi_file value must be a string\n      literal that names the .sdi file for a table\n      or is a pattern that matches .sdi files. If\n      the string is a pattern, any leading directory path and the\n      .sdi file name suffix must be given\n      literally. Pattern characters are permitted only in the base name\n      part of the file name:\n", "\n\n? matches any single character\n        \n* matches any sequence of characters,\n          including no characters\n\n", "\n      Using a pattern, the previous IMPORT\n      TABLE statement could have been written like this\n      (assuming that the /tmp/mysql-files directory\n      contains no other .sdi files matching the\n      pattern):\n    ", "Press CTRL+C to copy IMPORT TABLE FROM '/tmp/mysql-files/*.sdi';", "\n      To interpret the location of .sdi file path\n      names, the server uses the same rules for\n      IMPORT TABLE as the server-side\n      rules for LOAD DATA (that is, the\n      non-LOCAL rules). See\n      Section\u00a015.2.9, \u201cLOAD DATA Statement\u201d, paying particular attention to the\n      rules used to interpret relative path names.\n    ", "\nIMPORT TABLE fails if the\n      .sdi or table files cannot be located. After\n      importing a table, the server attempts to open it and reports as\n      warnings any problems detected. To attempt a repair to correct any\n      reported issues, use REPAIR TABLE.\n    ", "\nIMPORT TABLE is not written to the\n      binary log.\n", "\n\n\n\nRestrictions and Limitations\n\n\n\n\nIMPORT TABLE applies only to\n        non-TEMPORARY MyISAM\n        tables. It does not apply to tables created with a transactional\n        storage engine, tables created with\n        CREATE TEMPORARY\n        TABLE, or views.\n      \n        An .sdi file used in an import operation\n        must be generated on a server with the same data dictionary\n        version and sdi version as the import server. The version\n        information of the generating server is found in the\n        .sdi file:\n      Press CTRL+C to copy {\n   \"mysqld_version_id\":80019,\n   \"dd_version\":80017,\n   \"sdi_version\":80016,\n   ...\n}\n        To determine the data dictionary and sdi version of the import\n        server, you can check the .sdi file of a\n        recently created table on the import server.\n      \n        The table data and index files must be placed in the schema\n        directory for the import server prior to the import operation,\n        unless the table as defined on the export server uses the\n        DATA DIRECTORY or INDEX\n        DIRECTORY table options. In that case, modify the\n        import procedure using one of these alternatives before\n        executing the IMPORT TABLE\n        statement:\n\n\n\n            Put the data and index files into the same directory on the\n            import server host as on the export server host, and create\n            symlinks in the import server schema directory to those\n            files.\n          \n            Put the data and index files into an import server host\n            directory different from that on the export server host, and\n            create symlinks in the import server schema directory to\n            those files. In addition, modify the\n            .sdi file to reflect the different file\n            locations.\n          \n            Put the data and index files into the schema directory on\n            the import server host, and modify the\n            .sdi file to remove the data and index\n            directory table options.\n\n\n\n        Any collation IDs stored in the .sdi file\n        must refer to the same collations on the export and import\n        servers.\n      \n        Trigger information for a table is not serialized into the table\n        .sdi file, so triggers are not restored by\n        the import operation.\n      \n        Some edits to an .sdi file are permissible\n        prior to executing the IMPORT\n        TABLE statement, whereas others are problematic or may\n        even cause the import operation to fail:\n\n\n\n            Changing the data directory and index directory table\n            options is required if the locations of the data and index\n            files differ between the export and import servers.\n          \n            Changing the schema name is required to import the table\n            into a different schema on the import server than on the\n            export server.\n          \n            Changing schema and table names may be required to\n            accommodate differences between file system case-sensitivity\n            semantics on the export and import servers or differences in\n            lower_case_table_names\n            settings. Changing the table names in the\n            .sdi file may require renaming the\n            table files as well.\n          \n            In some cases, changes to column definitions are permitted.\n            Changing data types is likely to cause problems.\n\n\n"], "Examples": ["mysql> FLUSH TABLES hr.employees, hr.managers WITH READ LOCK;", "mysql> UNLOCK TABLES;", "mysql> CREATE SCHEMA hr;", "mysql> IMPORT TABLE FROM\n       '/tmp/mysql-files/employees.sdi',\n       '/tmp/mysql-files/managers.sdi';", "IMPORT TABLE FROM '/tmp/mysql-files/*.sdi';"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/insert.html"], "Title": ["15.2.7 INSERT Statement"], "Feature": ["INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    { {VALUES | VALUE} (value_list) [, (value_list)] ... }\n    [AS row_alias[(col_alias [, col_alias] ...)]]\n    [ON DUPLICATE KEY UPDATE assignment_list]\n\nINSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    SET assignment_list\n    [AS row_alias[(col_alias [, col_alias] ...)]]\n    [ON DUPLICATE KEY UPDATE assignment_list]\n\nINSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]\n    [INTO] tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [(col_name [, col_name] ...)]\n    { SELECT ... \n      | TABLE table_name \n      | VALUES row_constructor_list\n    }\n    [ON DUPLICATE KEY UPDATE assignment_list]\n\nvalue:\n    {expr | DEFAULT}\n\nvalue_list:\n    value [, value] ...\n\nrow_constructor_list:\n    ROW(value_list)[, ROW(value_list)][, ...]\n\nassignment:\n    col_name = \n          value\n        | [row_alias.]col_name\n        | [tbl_name.]col_name\n        | [row_alias.]col_alias\n\nassignment_list:\n    assignment [, assignment] ..."], "Description": ["\nINSERT inserts new rows into an\n      existing table. The INSERT\n      ... VALUES,\n      INSERT ... VALUES\n      ROW(), and\n      INSERT ... SET\n      forms of the statement insert rows based on explicitly specified\n      values. The INSERT\n      ... SELECT form inserts rows selected from another table\n      or tables. You can also use\n      INSERT ... TABLE\n      to insert rows from a single table.\n      INSERT with an ON\n      DUPLICATE KEY UPDATE clause enables existing rows to be\n      updated if a row to be inserted would cause a duplicate value in a\n      UNIQUE index or PRIMARY KEY.\n      A row alias with one or more optional column aliases can be used\n      with ON DUPLICATE KEY UPDATE to refer to the\n      row to be inserted.\n    ", "\n      For additional information about\n      INSERT ...\n      SELECT and\n      INSERT ... ON\n      DUPLICATE KEY UPDATE, see\n      Section\u00a015.2.7.1, \u201cINSERT ... SELECT Statement\u201d, and\n      Section\u00a015.2.7.2, \u201cINSERT ... ON DUPLICATE KEY UPDATE Statement\u201d.\n    ", "\n      In MySQL 8.4, the DELAYED keyword\n      is accepted but ignored by the server. For the reasons for this,\n      see Section\u00a015.2.7.3, \u201cINSERT DELAYED Statement\u201d,\n    ", "\n      Inserting into a table requires the\n      INSERT privilege for the table. If\n      the ON DUPLICATE KEY UPDATE clause is used and\n      a duplicate key causes an UPDATE to\n      be performed instead, the statement requires the\n      UPDATE privilege for the columns to\n      be updated. For columns that are read but not modified you need\n      only the SELECT privilege (such as\n      for a column referenced only on the right hand side of an\n      col_name=expr\n      assignment in an ON DUPLICATE KEY UPDATE\n      clause).\n    ", "\n      When inserting into a partitioned table, you can control which\n      partitions and subpartitions accept new rows. The\n      PARTITION clause takes a list of the\n      comma-separated names of one or more partitions or subpartitions\n      (or both) of the table. If any of the rows to be inserted by a\n      given INSERT statement do not match\n      one of the partitions listed, the\n      INSERT statement fails with the\n      error Found a row not matching the given partition\n      set. For more information and examples, see\n      Section\u00a026.5, \u201cPartition Selection\u201d.\n    ", "\ntbl_name is the table into which rows\n      should be inserted. Specify the columns for which the statement\n      provides values as follows:\n", "\n\n          Provide a parenthesized list of comma-separated column names\n          following the table name. In this case, a value for each named\n          column must be provided by the VALUES list,\n          VALUES ROW()\n          list, or SELECT statement. For\n          the INSERT TABLE form, the number of\n          columns in the source table must match the number of columns\n          to be inserted.\n        \n          If you do not specify a list of column names for\n          INSERT ...\n          VALUES or\n          INSERT ...\n          SELECT, values for every column in the table must be\n          provided by the VALUES list,\n          SELECT statement, or\n          TABLE statement. If you do not\n          know the order of the columns in the table, use\n          DESCRIBE\n          tbl_name to find out.\n        \n          A SET clause indicates columns explicitly\n          by name, together with the value to assign each one.\n\n", "\n      Column values can be given in several ways:\n", "\n\n          If strict SQL mode is not enabled, any column not explicitly\n          given a value is set to its default (explicit or implicit)\n          value. For example, if you specify a column list that does not\n          name all the columns in the table, unnamed columns are set to\n          their default values. Default value assignment is described in\n          Section\u00a013.6, \u201cData Type Default Values\u201d.\n        \n          If strict SQL mode is enabled, an\n          INSERT statement generates an\n          error if it does not specify an explicit value for every\n          column that has no default value. See\n          Section\u00a07.1.11, \u201cServer SQL Modes\u201d.\n        \n          If both the column list and the VALUES list\n          are empty, INSERT creates a row\n          with each column set to its default value:\n        Press CTRL+C to copy INSERT INTO tbl_name () VALUES();\n          If strict mode is not enabled, MySQL uses the implicit default\n          value for any column that has no explicitly defined default.\n          If strict mode is enabled, an error occurs if any column has\n          no default value.\n        \n          Use the keyword DEFAULT to set a column\n          explicitly to its default value. This makes it easier to write\n          INSERT statements that assign\n          values to all but a few columns, because it enables you to\n          avoid writing an incomplete VALUES list\n          that does not include a value for each column in the table.\n          Otherwise, you must provide the list of column names\n          corresponding to each value in the VALUES\n          list.\n        \n          If a generated column is inserted into explicitly, the only\n          permitted value is DEFAULT. For information\n          about generated columns, see\n          Section\u00a015.1.20.8, \u201cCREATE TABLE and Generated Columns\u201d.\n        \n          In expressions, you can use\n          DEFAULT(col_name)\n          to produce the default value for column\n          col_name.\n        \n          Type conversion of an expression\n          expr that provides a column value\n          might occur if the expression data type does not match the\n          column data type. Conversion of a given value can result in\n          different inserted values depending on the column type. For\n          example, inserting the string '1999.0e-2'\n          into an INT,\n          FLOAT,\n          DECIMAL(10,6), or\n          YEAR column inserts the value\n          1999, 19.9921,\n          19.992100, or 1999,\n          respectively. The value stored in the\n          INT and\n          YEAR columns is\n          1999 because the string-to-number\n          conversion looks only at as much of the initial part of the\n          string as may be considered a valid integer or year. For the\n          FLOAT and\n          DECIMAL columns, the\n          string-to-number conversion considers the entire string a\n          valid numeric value.\n        \n          An expression expr can refer to any\n          column that was set earlier in a value list. For example, you\n          can do this because the value for col2\n          refers to col1, which has previously been\n          assigned:\n        Press CTRL+C to copy INSERT INTO tbl_name (col1,col2) VALUES(15,col1*2);\n          But the following is not legal, because the value for\n          col1 refers to col2,\n          which is assigned after col1:\n        Press CTRL+C to copy INSERT INTO tbl_name (col1,col2) VALUES(col2*2,15);\n          An exception occurs for columns that contain\n          AUTO_INCREMENT values. Because\n          AUTO_INCREMENT values are generated after\n          other value assignments, any reference to an\n          AUTO_INCREMENT column in the assignment\n          returns a 0.\n\n", "\nINSERT statements that use\n      VALUES syntax can insert multiple rows. To do\n      this, include multiple lists of comma-separated column values,\n      with lists enclosed within parentheses and separated by commas.\n      Example:\n    ", "Press CTRL+C to copy INSERT INTO tbl_name (a,b,c)\n    VALUES(1,2,3), (4,5,6), (7,8,9);", "\n      Each values list must contain exactly as many values as are to be\n      inserted per row. The following statement is invalid because it\n      contains one list of nine values, rather than three lists of three\n      values each:\n    ", "Press CTRL+C to copy INSERT INTO tbl_name (a,b,c) VALUES(1,2,3,4,5,6,7,8,9);", "\nVALUE is a synonym for\n      VALUES in this context. Neither implies\n      anything about the number of values lists, nor about the number of\n      values per list. Either may be used whether there is a single\n      values list or multiple lists, and regardless of the number of\n      values per list.\n    ", "\nINSERT statements using\n      VALUES ROW()\n      syntax can also insert multiple rows. In this case, each value\n      list must be contained within a ROW() (row\n      constructor), like this:\n    ", "Press CTRL+C to copy INSERT INTO tbl_name (a,b,c)\n    VALUES ROW(1,2,3), ROW(4,5,6), ROW(7,8,9);", "\n      The affected-rows value for an\n      INSERT can be obtained using the\n      ROW_COUNT() SQL function or the\n      mysql_affected_rows() C API\n      function. See Section\u00a014.15, \u201cInformation Functions\u201d, and\n      mysql_affected_rows().\n    ", "\n      If you use INSERT ...\n      VALUES or INSERT ... VALUES ROW()\n      with multiple value lists, or\n      INSERT ...\n      SELECT or INSERT ... TABLE, the\n      statement returns an information string in this format:\n    ", "\n      If you are using the C API, the information string can be obtained\n      by invoking the mysql_info()\n      function. See mysql_info().\n    ", "\nRecords indicates the number of rows processed\n      by the statement. (This is not necessarily the number of rows\n      actually inserted because Duplicates can be\n      nonzero.) Duplicates indicates the number of\n      rows that could not be inserted because they would duplicate some\n      existing unique index value. Warnings indicates\n      the number of attempts to insert column values that were\n      problematic in some way. Warnings can occur under any of the\n      following conditions:\n", "\n\n          Inserting NULL into a column that has been\n          declared NOT NULL. For multiple-row\n          INSERT statements or\n          INSERT INTO ...\n          SELECT statements, the column is set to the implicit\n          default value for the column data type. This is\n          0 for numeric types, the empty string\n          ('') for string types, and the\n          \u201czero\u201d value for date and time types.\n          INSERT INTO ...\n          SELECT statements are handled the same way as\n          multiple-row inserts because the server does not examine the\n          result set from the SELECT to\n          see whether it returns a single row. (For a single-row\n          INSERT, no warning occurs when\n          NULL is inserted into a NOT\n          NULL column. Instead, the statement fails with an\n          error.)\n        \n          Setting a numeric column to a value that lies outside the\n          column range. The value is clipped to the closest endpoint of\n          the range.\n        \n          Assigning a value such as '10.34 a' to a\n          numeric column. The trailing nonnumeric text is stripped off\n          and the remaining numeric part is inserted. If the string\n          value has no leading numeric part, the column is set to\n          0.\n        \n          Inserting a string into a string column\n          (CHAR,\n          VARCHAR,\n          TEXT, or\n          BLOB) that exceeds the column\n          maximum length. The value is truncated to the column maximum\n          length.\n        \n          Inserting a value into a date or time column that is illegal\n          for the data type. The column is set to the appropriate zero\n          value for the type.\n        \n          For INSERT examples involving\n          AUTO_INCREMENT column values, see\n          Section\u00a05.6.9, \u201cUsing AUTO_INCREMENT\u201d.\n        \n          If INSERT inserts a row into a\n          table that has an AUTO_INCREMENT column,\n          you can find the value used for that column by using the\n          LAST_INSERT_ID() SQL function\n          or the mysql_insert_id() C API\n          function.\n\n\n\nNote\n\n\n            These two functions do not always behave identically. The\n            behavior of INSERT statements\n            with respect to AUTO_INCREMENT columns is\n            discussed further in\n            Section\u00a014.15, \u201cInformation Functions\u201d, and\n            mysql_insert_id().\n\n\n\n", "\n      The INSERT statement supports the\n      following modifiers:\n", "\n\n          If you use the LOW_PRIORITY modifier,\n          execution of the INSERT is\n          delayed until no other clients are reading from the table.\n          This includes other clients that began reading while existing\n          clients are reading, and while the INSERT\n          LOW_PRIORITY statement is waiting. It is possible,\n          therefore, for a client that issues an INSERT\n          LOW_PRIORITY statement to wait for a very long time.\n        \nLOW_PRIORITY affects only storage engines\n          that use only table-level locking (such as\n          MyISAM, MEMORY, and\n          MERGE).\n\n\n\nNote\n\n\nLOW_PRIORITY should normally not be used\n            with MyISAM tables because doing so\n            disables concurrent inserts. See\n            Section\u00a010.11.3, \u201cConcurrent Inserts\u201d.\n\n\n\n          If you specify HIGH_PRIORITY, it overrides\n          the effect of the\n          --low-priority-updates option\n          if the server was started with that option. It also causes\n          concurrent inserts not to be used. See\n          Section\u00a010.11.3, \u201cConcurrent Inserts\u201d.\n        \nHIGH_PRIORITY affects only storage engines\n          that use only table-level locking (such as\n          MyISAM, MEMORY, and\n          MERGE).\n        \n          If you use the IGNORE modifier, ignorable\n          errors that occur while executing the\n          INSERT statement are ignored.\n          For example, without IGNORE, a row that\n          duplicates an existing UNIQUE index or\n          PRIMARY KEY value in the table causes a\n          duplicate-key error and the statement is aborted. With\n          IGNORE, the row is discarded and no error\n          occurs. Ignored errors generate warnings instead.\n        \n\nIGNORE has a similar effect on inserts into\n          partitioned tables where no partition matching a given value\n          is found. Without IGNORE, such\n          INSERT statements are aborted\n          with an error. When\n          INSERT\n          IGNORE is used, the insert operation fails silently\n          for rows containing the unmatched value, but inserts rows that\n          are matched. For an example, see\n          Section\u00a026.2.2, \u201cLIST Partitioning\u201d.\n        \n          Data conversions that would trigger errors abort the statement\n          if IGNORE is not specified. With\n          IGNORE, invalid values are adjusted to the\n          closest values and inserted; warnings are produced but the\n          statement does not abort. You can determine with the\n          mysql_info() C API function\n          how many rows were actually inserted into the table.\n        \n          For more information, see\n          The Effect of IGNORE on Statement Execution.\n        \n          You can use REPLACE instead of\n          INSERT to overwrite old rows.\n          REPLACE is the counterpart to\n          INSERT\n          IGNORE in the treatment of new rows that contain\n          unique key values that duplicate old rows: The new rows\n          replace the old rows rather than being discarded. See\n          Section\u00a015.2.12, \u201cREPLACE Statement\u201d.\n        \n          If you specify ON DUPLICATE KEY UPDATE, and\n          a row is inserted that would cause a duplicate value in a\n          UNIQUE index or PRIMARY\n          KEY, an UPDATE of the\n          old row occurs. The affected-rows value per row is 1 if the\n          row is inserted as a new row, 2 if an existing row is updated,\n          and 0 if an existing row is set to its current values. If you\n          specify the CLIENT_FOUND_ROWS flag to the\n          mysql_real_connect() C API\n          function when connecting to mysqld, the\n          affected-rows value is 1 (not 0) if an existing row is set to\n          its current values. See Section\u00a015.2.7.2, \u201cINSERT ... ON DUPLICATE KEY UPDATE Statement\u201d.\n        \nINSERT DELAYED was deprecated\n          in MySQL 5.6, and is scheduled for eventual removal. In MySQL\n          8.4, the DELAYED modifier is\n          accepted but ignored. Use INSERT (without\n          DELAYED) instead. See\n          Section\u00a015.2.7.3, \u201cINSERT DELAYED Statement\u201d.\n\n"], "Examples": ["INSERT INTO tbl_name () VALUES();", "INSERT INTO tbl_name (col1,col2) VALUES(15,col1*2);", "INSERT INTO tbl_name (col1,col2) VALUES(col2*2,15);", "INSERT INTO tbl_name (a,b,c)\n    VALUES(1,2,3), (4,5,6), (7,8,9);", "INSERT INTO tbl_name (a,b,c) VALUES(1,2,3,4,5,6,7,8,9);", "INSERT INTO tbl_name (a,b,c)\n    VALUES ROW(1,2,3), ROW(4,5,6), ROW(7,8,9);"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/insert-delayed.html"], "Title": ["15.2.7.3 INSERT DELAYED Statement"], "Feature": ["INSERT DELAYED ..."], "Description": ["\n        The DELAYED option for the\n        INSERT statement is a MySQL\n        extension to standard SQL. In previous versions of MySQL, it can\n        be used for certain kinds of tables (such as\n        MyISAM), such that when a client uses\n        INSERT DELAYED, it gets an okay\n        from the server at once, and the row is queued to be inserted\n        when the table is not in use by any other thread.\n      ", "\nDELAYED inserts and replaces were deprecated\n        in MySQL 5.6. In MySQL 8.4,\n        DELAYED is not supported. The server\n        recognizes but ignores the DELAYED keyword,\n        handles the insert as a nondelayed insert, and generates an\n        ER_WARN_LEGACY_SYNTAX_CONVERTED\n        warning: INSERT DELAYED is no longer supported. The\n        statement was converted to INSERT. The\n        DELAYED keyword is scheduled for removal in a\n        future release.\n"], "Examples": [], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/intersect.html"], "Title": ["15.2.8 INTERSECT Clause"], "Feature": ["query_expression_body INTERSECT [ALL | DISTINCT] query_expression_body\n    [INTERSECT [ALL | DISTINCT] query_expression_body]\n    [...]\n\nquery_expression_body:\n    See Section 15.2.14, \u201cSet Operations with UNION, INTERSECT, and EXCEPT\u201d"], "Description": ["\nINTERSECT limits the result from multiple query\n      blocks to those rows which are common to all. Example:\n    ", "Press CTRL+C to copy mysql> TABLE a;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n|    2 |    3 |\n|    3 |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> TABLE b;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n|    1 |    3 |\n|    3 |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n|    1 |    3 |\n|    3 |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> TABLE a INTERSECT TABLE b;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n+------+------+\n2 rows in set (0.00 sec)\n\nmysql> TABLE a INTERSECT TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    3 |    4 |\n+------+------+\n1 row in set (0.00 sec)", "\n      As with UNION and\n      EXCEPT, if neither\n      DISTINCT nor ALL is\n      specified, the default is DISTINCT.\n    ", "\nDISTINCT can remove duplicates from either side\n      of the intersection, as shown here:\n    ", "Press CTRL+C to copy mysql> TABLE c INTERSECT DISTINCT TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n|    3 |    4 |\n+------+------+\n2 rows in set (0.00 sec)\n\nmysql> TABLE c INTERSECT ALL TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n|    1 |    3 |\n|    3 |    4 |\n+------+------+\n3 rows in set (0.00 sec)", "\n      (TABLE c INTERSECT TABLE c is the equivalent of\n      the first of the two statements just shown.)\n    ", "\n      As with UNION, the operands must have the same\n      number of columns. Result set column types are also determined as\n      for UNION.\n    ", "\nINTERSECT has greater precedence than and is\n      evaluated before UNION and\n      EXCEPT, so that the two statements shown here\n      are equivalent:\n    ", "Press CTRL+C to copy TABLE r EXCEPT TABLE s INTERSECT TABLE t;\n\nTABLE r EXCEPT (TABLE s INTERSECT TABLE t);", "\n      For INTERSECT ALL, the maximum supported number\n      of duplicates of any unique row in the left hand table is\n      4294967295.\n"], "Examples": ["mysql> TABLE a;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n|    2 |    3 |\n|    3 |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> TABLE b;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n|    1 |    3 |\n|    3 |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n|    1 |    3 |\n|    3 |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> TABLE a INTERSECT TABLE b;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    2 |\n|    3 |    4 |\n+------+------+\n2 rows in set (0.00 sec)\n\nmysql> TABLE a INTERSECT TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    3 |    4 |\n+------+------+\n1 row in set (0.00 sec)", "mysql> TABLE c INTERSECT DISTINCT TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n|    3 |    4 |\n+------+------+\n2 rows in set (0.00 sec)\n\nmysql> TABLE c INTERSECT ALL TABLE c;\n+------+------+\n| m    | n    |\n+------+------+\n|    1 |    3 |\n|    1 |    3 |\n|    3 |    4 |\n+------+------+\n3 rows in set (0.00 sec)"], "Category": ["Data Manipulation Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/load-data.html"], "Title": ["15.2.9 LOAD DATA Statement"], "Feature": ["LOAD DATA\n    [LOW_PRIORITY | CONCURRENT] [LOCAL]\n    INFILE 'file_name'\n    [REPLACE | IGNORE]\n    INTO TABLE tbl_name\n    [PARTITION (partition_name [, partition_name] ...)]\n    [CHARACTER SET charset_name]\n    [{FIELDS | COLUMNS}\n        [TERMINATED BY 'string']\n        [[OPTIONALLY] ENCLOSED BY 'char']\n        [ESCAPED BY 'char']\n    ]\n    [LINES\n        [STARTING BY 'string']\n        [TERMINATED BY 'string']\n    ]\n    [IGNORE number {LINES | ROWS}]\n    [(col_name_or_user_var\n        [, col_name_or_user_var] ...)]\n    [SET col_name={expr | DEFAULT}\n        [, col_name={expr | DEFAULT}] ...]", "FIELDS TERMINATED BY '\\t' ENCLOSED BY '' ESCAPED BY '\\\\'\nLINES TERMINATED BY '\\n' STARTING BY ''", "FIELDS TERMINATED BY '\"' ENCLOSED BY '\"'", "SET b = CAST(CONV(MID(@var1, 3, LENGTH(@var1)-2), 2, 10) AS UNSIGNED)"], "Description": ["\n      The LOAD DATA statement reads rows\n      from a text file into a table at a very high speed. The file can\n      be read from the server host or the client host, depending on\n      whether the LOCAL modifier is given.\n      LOCAL also affects data interpretation and\n      error handling.\n    ", "\nLOAD DATA is the complement of\n      SELECT ... INTO\n      OUTFILE. (See Section\u00a015.2.13.1, \u201cSELECT ... INTO Statement\u201d.) To write\n      data from a table to a file, use\n      SELECT ... INTO\n      OUTFILE. To read the file back into a table, use\n      LOAD DATA. The syntax of the\n      FIELDS and LINES clauses is\n      the same for both statements.\n    ", "\n      The mysqlimport utility provides another way to\n      load data files; it operates by sending a\n      LOAD DATA statement to the server.\n      See Section\u00a06.5.5, \u201cmysqlimport \u2014 A Data Import Program\u201d.\n    ", "\n      For information about the efficiency of\n      INSERT versus\n      LOAD DATA and speeding up\n      LOAD DATA, see\n      Section\u00a010.2.5.1, \u201cOptimizing INSERT Statements\u201d.\n", "\nNon-LOCAL Versus LOCAL OperationInput File Character SetInput File LocationSecurity RequirementsDuplicate-Key and Error HandlingIndex HandlingField and Line HandlingColumn List SpecificationInput PreprocessingColumn Value AssignmentPartitioned Table SupportConcurrency ConsiderationsStatement Result InformationReplication ConsiderationsMiscellaneous Topics\n", "\n\n\n\nNon-LOCAL Versus LOCAL Operation\n\n\n\n\n        The LOCAL modifier affects these aspects of\n        LOAD DATA, compared to\n        non-LOCAL operation:\n\n\n\n            It changes the expected location of the input file; see\n            Input File Location.\n          \n            It changes the statement security requirements; see\n            Security Requirements.\n          \n            It has the same effect as the IGNORE\n            modifier on the interpretation of input file contents and\n            error handling; see\n            Duplicate-Key and Error Handling, and\n            Column Value Assignment.\n\n\n\nLOCAL works only if the server and your\n        client both have been configured to permit it. For example, if\n        mysqld was started with the\n        local_infile system variable\n        disabled, LOCAL produces an error. See\n        Section\u00a08.1.6, \u201cSecurity Considerations for LOAD DATA LOCAL\u201d.\n\n", "\n\n\n\nInput File Character Set\n\n\n\n\n        The file name must be given as a literal string. On Windows,\n        specify backslashes in path names as forward slashes or doubled\n        backslashes. The server interprets the file name using the\n        character set indicated by the\n        character_set_filesystem system\n        variable.\n      \n        By default, the server interprets the file contents using the\n        character set indicated by the\n        character_set_database system\n        variable. If the file contents use a character set different\n        from this default, it is a good idea to specify that character\n        set by using the CHARACTER SET clause. A\n        character set of binary specifies \u201cno\n        conversion.\u201d\n\nSET NAMES and the setting of\n        character_set_client do not\n        affect interpretation of file contents.\n      \nLOAD DATA interprets all fields\n        in the file as having the same character set, regardless of the\n        data types of the columns into which field values are loaded.\n        For proper interpretation of the file, you must ensure that it\n        was written with the correct character set. For example, if you\n        write a data file with mysqldump -T or by\n        issuing a SELECT\n        ... INTO OUTFILE statement in\n        mysql, be sure to use a\n        --default-character-set option to\n        write output in the character set to be used when the file is\n        loaded with LOAD DATA.\n\n\n\nNote\n\n\n          It is not possible to load data files that use the\n          ucs2, utf16,\n          utf16le, or utf32\n          character set.\n\n\n", "\n\n\n\nInput File Location\n\n\n\n\n        These rules determine the LOAD\n        DATA input file location:\n\n\n\n            If LOCAL is not specified, the file must\n            be located on the server host. The server reads the file\n            directly, locating it as follows:\n\n\n\n                If the file name is an absolute path name, the server\n                uses it as given.\n              \n                If the file name is a relative path name with leading\n                components, the server looks for the file relative to\n                its data directory.\n              \n                If the file name has no leading components, the server\n                looks for the file in the database directory of the\n                default database.\n\n\n\n            If LOCAL is specified, the file must be\n            located on the client host. The client program reads the\n            file, locating it as follows:\n\n\n\n                If the file name is an absolute path name, the client\n                program uses it as given.\n              \n                If the file name is a relative path name, the client\n                program looks for the file relative to its invocation\n                directory.\n\n\n\n            When LOCAL is used, the client program\n            reads the file and sends its contents to the server. The\n            server creates a copy of the file in the directory where it\n            stores temporary files. See\n            Section\u00a0B.3.3.5, \u201cWhere MySQL Stores Temporary Files\u201d. Lack of sufficient space\n            for the copy in this directory can cause the\n            LOAD DATA\n            LOCAL statement to fail.\n\n\n\n        The non-LOCAL rules mean that the server\n        reads a file named as ./myfile.txt relative\n        to its data directory, whereas it reads a file named as\n        myfile.txt from the database directory of\n        the default database. For example, if the following\n        LOAD DATA statement is executed\n        while db1 is the default database, the server\n        reads the file data.txt from the database\n        directory for db1, even though the statement\n        explicitly loads the file into a table in the\n        db2 database:\n      Press CTRL+C to copy LOAD DATA INFILE 'data.txt' INTO TABLE db2.my_table;\n\n\nNote\n\n\n          The server also uses the non-LOCAL rules to\n          locate .sdi files for the\n          IMPORT TABLE statement.\n\n\n", "\n\n\n\nSecurity Requirements\n\n\n\n\n        For a non-LOCAL load operation, the server\n        reads a text file located on the server host, so these security\n        requirements must be satisfied:\n\n\n\n            You must have the FILE\n            privilege. See Section\u00a08.2.2, \u201cPrivileges Provided by MySQL\u201d.\n          \n            The operation is subject to the\n            secure_file_priv system\n            variable setting:\n\n\n\n                If the variable value is a nonempty directory name, the\n                file must be located in that directory.\n              \n                If the variable value is empty (which is insecure), the\n                file need only be readable by the server.\n\n\n\n\n\n        For a LOCAL load operation, the client\n        program reads a text file located on the client host. Because\n        the file contents are sent over the connection by the client to\n        the server, using LOCAL is a bit slower than\n        when the server accesses the file directly. On the other hand,\n        you do not need the FILE\n        privilege, and the file can be located in any directory the\n        client program can access.\n\n", "\n\n\n\nDuplicate-Key and Error Handling\n\n\n\n\n        The REPLACE and IGNORE\n        modifiers control handling of new (input) rows that duplicate\n        existing table rows on unique key values (PRIMARY\n        KEY or UNIQUE index values):\n\n\n\n            With REPLACE, new rows that have the same\n            value as a unique key value in an existing row replace the\n            existing row. See Section\u00a015.2.12, \u201cREPLACE Statement\u201d.\n          \n            With IGNORE, new rows that duplicate an\n            existing row on a unique key value are discarded. For more\n            information, see\n            The Effect of IGNORE on Statement Execution.\n\n\n\n        The LOCAL modifier has the same effect as\n        IGNORE. This occurs because the server has no\n        way to stop transmission of the file in the middle of the\n        operation.\n      \n        If none of REPLACE,\n        IGNORE, or LOCAL is\n        specified, an error occurs when a duplicate key value is found,\n        and the rest of the text file is ignored.\n      \n        In addition to affecting duplicate-key handling as just\n        described, IGNORE and\n        LOCAL also affect error handling:\n\n\n\n            With neither IGNORE nor\n            LOCAL, data-interpretation errors\n            terminate the operation.\n          \n            With IGNORE or LOCAL,\n            data-interpretation errors become warnings and the load\n            operation continues, even if the SQL mode is restrictive.\n            For examples, see\n            Column Value Assignment.\n\n\n", "\n\n\n\nIndex Handling\n\n\n\n\n        To ignore foreign key constraints during the load operation,\n        execute a SET foreign_key_checks = 0\n        statement before executing LOAD\n        DATA.\n      \n        If you use LOAD DATA on an empty\n        MyISAM table, all nonunique indexes are\n        created in a separate batch (as for REPAIR\n        TABLE). Normally, this makes LOAD\n        DATA much faster when you have many indexes. In some\n        extreme cases, you can create the indexes even faster by turning\n        them off with ALTER\n        TABLE ... DISABLE KEYS before loading the file into\n        the table and re-creating the indexes with\n        ALTER TABLE ...\n        ENABLE KEYS after loading the file. See\n        Section\u00a010.2.5.1, \u201cOptimizing INSERT Statements\u201d.\n\n", "\n\n\n\nField and Line Handling\n\n\n\n\n        For both the LOAD DATA and\n        SELECT ... INTO\n        OUTFILE statements, the syntax of the\n        FIELDS and LINES clauses\n        is the same. Both clauses are optional, but\n        FIELDS must precede LINES\n        if both are specified.\n      \n        If you specify a FIELDS clause, each of its\n        subclauses (TERMINATED BY,\n        [OPTIONALLY] ENCLOSED BY, and\n        ESCAPED BY) is also optional, except that you\n        must specify at least one of them. Arguments to these clauses\n        are permitted to contain only ASCII characters.\n      \n        If you specify no FIELDS or\n        LINES clause, the defaults are the same as if\n        you had written this:\n      Press CTRL+C to copy FIELDS TERMINATED BY '\\t' ENCLOSED BY '' ESCAPED BY '\\\\'\nLINES TERMINATED BY '\\n' STARTING BY ''\n        Backslash is the MySQL escape character within strings in SQL\n        statements. Thus, to specify a literal backslash, you must\n        specify two backslashes for the value to be interpreted as a\n        single backslash. The escape sequences '\\t'\n        and '\\n' specify tab and newline characters,\n        respectively.\n      \n        In other words, the defaults cause LOAD\n        DATA to act as follows when reading input:\n\n\n\n            Look for line boundaries at newlines.\n          \n            Do not skip any line prefix.\n          \n            Break lines into fields at tabs.\n          \n            Do not expect fields to be enclosed within any quoting\n            characters.\n          \n            Interpret characters preceded by the escape character\n            \\ as escape sequences. For example,\n            \\t, \\n, and\n            \\\\ signify tab, newline, and backslash,\n            respectively. See the discussion of FIELDS ESCAPED\n            BY later for the full list of escape sequences.\n\n\n\n        Conversely, the defaults cause\n        SELECT ... INTO\n        OUTFILE to act as follows when writing output:\n\n\n\n            Write tabs between fields.\n          \n            Do not enclose fields within any quoting characters.\n          \n            Use \\ to escape instances of tab,\n            newline, or \\ that occur within field\n            values.\n          \n            Write newlines at the ends of lines.\n\n\n\n\nNote\n\n\n          For a text file generated on a Windows system, proper file\n          reading might require LINES TERMINATED BY\n          '\\r\\n' because Windows programs typically use two\n          characters as a line terminator. Some programs, such as\n          WordPad, might use \\r as\n          a line terminator when writing files. To read such files, use\n          LINES TERMINATED BY '\\r'.\n\n\n\n        If all the input lines have a common prefix that you want to\n        ignore, you can use LINES STARTING BY\n        'prefix_string' to skip the\n        prefix and anything before it. If a line\n        does not include the prefix, the entire line is skipped. Suppose\n        that you issue the following statement:\n      Press CTRL+C to copy LOAD DATA INFILE '/tmp/test.txt' INTO TABLE test\n  FIELDS TERMINATED BY ','  LINES STARTING BY 'xxx';\n        If the data file looks like this:\n      Press CTRL+C to copy xxx\"abc\",1\nsomething xxx\"def\",2\n\"ghi\",3\n        The resulting rows are (\"abc\",1) and\n        (\"def\",2). The third row in the file is\n        skipped because it does not contain the prefix.\n      \n        The IGNORE number\n        LINES clause can be used to ignore lines at the start\n        of the file. For example, you can use IGNORE 1\n        LINES to skip an initial header line containing column\n        names:\n      Press CTRL+C to copy LOAD DATA INFILE '/tmp/test.txt' INTO TABLE test IGNORE 1 LINES;\n        When you use SELECT\n        ... INTO OUTFILE in tandem with\n        LOAD DATA to write data from a\n        database into a file and then read the file back into the\n        database later, the field- and line-handling options for both\n        statements must match. Otherwise, LOAD\n        DATA does not interpret the contents of the file\n        properly. Suppose that you use\n        SELECT ... INTO\n        OUTFILE to write a file with fields delimited by\n        commas:\n      Press CTRL+C to copy SELECT * INTO OUTFILE 'data.txt'\n  FIELDS TERMINATED BY ','\n  FROM table2;\n        To read the comma-delimited file, the correct statement is:\n      Press CTRL+C to copy LOAD DATA INFILE 'data.txt' INTO TABLE table2\n  FIELDS TERMINATED BY ',';\n        If instead you tried to read the file with the statement shown\n        following, it would not work because it instructs\n        LOAD DATA to look for tabs\n        between fields:\n      Press CTRL+C to copy LOAD DATA INFILE 'data.txt' INTO TABLE table2\n  FIELDS TERMINATED BY '\\t';\n        The likely result is that each input line would be interpreted\n        as a single field.\n      \nLOAD DATA can be used to read\n        files obtained from external sources. For example, many programs\n        can export data in comma-separated values (CSV) format, such\n        that lines have fields separated by commas and enclosed within\n        double quotation marks, with an initial line of column names. If\n        the lines in such a file are terminated by carriage\n        return/newline pairs, the statement shown here illustrates the\n        field- and line-handling options you would use to load the file:\n      Press CTRL+C to copy LOAD DATA INFILE 'data.txt' INTO TABLE tbl_name\n  FIELDS TERMINATED BY ',' ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\r\\n'\n  IGNORE 1 LINES;\n        If the input values are not necessarily enclosed within\n        quotation marks, use OPTIONALLY before the\n        ENCLOSED BY option.\n      \n        Any of the field- or line-handling options can specify an empty\n        string (''). If not empty, the\n        FIELDS [OPTIONALLY] ENCLOSED BY and\n        FIELDS ESCAPED BY values must be a single\n        character. The FIELDS TERMINATED BY,\n        LINES STARTING BY, and LINES\n        TERMINATED BY values can be more than one character.\n        For example, to write lines that are terminated by carriage\n        return/linefeed pairs, or to read a file containing such lines,\n        specify a LINES TERMINATED BY '\\r\\n' clause.\n      \n        To read a file containing jokes that are separated by lines\n        consisting of %%, you can do this\n      Press CTRL+C to copy CREATE TABLE jokes\n  (a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  joke TEXT NOT NULL);\nLOAD DATA INFILE '/tmp/jokes.txt' INTO TABLE jokes\n  FIELDS TERMINATED BY ''\n  LINES TERMINATED BY '\\n%%\\n' (joke);\nFIELDS [OPTIONALLY] ENCLOSED BY controls\n        quoting of fields. For output\n        (SELECT ... INTO\n        OUTFILE), if you omit the word\n        OPTIONALLY, all fields are enclosed by the\n        ENCLOSED BY character. An example of such\n        output (using a comma as the field delimiter) is shown here:\n      Press CTRL+C to copy \"1\",\"a string\",\"100.20\"\n\"2\",\"a string containing a , comma\",\"102.20\"\n\"3\",\"a string containing a \\\" quote\",\"102.20\"\n\"4\",\"a string containing a \\\", quote and comma\",\"102.20\"\n        If you specify OPTIONALLY, the\n        ENCLOSED BY character is used only to enclose\n        values from columns that have a string data type (such as\n        CHAR,\n        BINARY,\n        TEXT, or\n        ENUM):\n      Press CTRL+C to copy 1,\"a string\",100.20\n2,\"a string containing a , comma\",102.20\n3,\"a string containing a \\\" quote\",102.20\n4,\"a string containing a \\\", quote and comma\",102.20\n        Occurrences of the ENCLOSED BY character\n        within a field value are escaped by prefixing them with the\n        ESCAPED BY character. Also, if you specify an\n        empty ESCAPED BY value, it is possible to\n        inadvertently generate output that cannot be read properly by\n        LOAD DATA. For example, the\n        preceding output just shown would appear as follows if the\n        escape character is empty. Observe that the second field in the\n        fourth line contains a comma following the quote, which\n        (erroneously) appears to terminate the field:\n      Press CTRL+C to copy 1,\"a string\",100.20\n2,\"a string containing a , comma\",102.20\n3,\"a string containing a \" quote\",102.20\n4,\"a string containing a \", quote and comma\",102.20\n        For input, the ENCLOSED BY character, if\n        present, is stripped from the ends of field values. (This is\n        true regardless of whether OPTIONALLY is\n        specified; OPTIONALLY has no effect on input\n        interpretation.) Occurrences of the ENCLOSED\n        BY character preceded by the ESCAPED\n        BY character are interpreted as part of the current\n        field value.\n      \n        If the field begins with the ENCLOSED BY\n        character, instances of that character are recognized as\n        terminating a field value only if followed by the field or line\n        TERMINATED BY sequence. To avoid ambiguity,\n        occurrences of the ENCLOSED BY character\n        within a field value can be doubled and are interpreted as a\n        single instance of the character. For example, if\n        ENCLOSED BY '\"' is specified, quotation marks\n        are handled as shown here:\n      Press CTRL+C to copy \"The \"\"BIG\"\" boss\"  -> The \"BIG\" boss\nThe \"BIG\" boss      -> The \"BIG\" boss\nThe \"\"BIG\"\" boss    -> The \"\"BIG\"\" boss\nFIELDS ESCAPED BY controls how to read or\n        write special characters:\n\n\n\n            For input, if the FIELDS ESCAPED BY\n            character is not empty, occurrences of that character are\n            stripped and the following character is taken literally as\n            part of a field value. Some two-character sequences that are\n            exceptions, where the first character is the escape\n            character. These sequences are shown in the following table\n            (using \\ for the escape character). The\n            rules for NULL handling are described\n            later in this section.\n\n\n\nCharacter\nEscape Sequence\n\n\\0\nAn ASCII NUL (X'00') character\n\n\\b\nA backspace character\n\n\\n\nA newline (linefeed) character\n\n\\r\nA carriage return character\n\n\\t\nA tab character.\n\n\\Z\nASCII 26 (Control+Z)\n\n\\N\nNULL\n\n\n\n            For more information about \\-escape\n            syntax, see Section\u00a011.1.1, \u201cString Literals\u201d.\n          \n            If the FIELDS ESCAPED BY character is\n            empty, escape-sequence interpretation does not occur.\n          \n            For output, if the FIELDS ESCAPED BY\n            character is not empty, it is used to prefix the following\n            characters on output:\n\n\n\n                The FIELDS ESCAPED BY character.\n              \n                The FIELDS [OPTIONALLY] ENCLOSED BY\n                character.\n              \n                The first character of the FIELDS TERMINATED\n                BY and LINES TERMINATED BY\n                values, if the ENCLOSED BY character\n                is empty or unspecified.\n              \n                ASCII 0 (what is actually written\n                following the escape character is ASCII\n                0, not a zero-valued byte).\n\n\n\n            If the FIELDS ESCAPED BY character is\n            empty, no characters are escaped and NULL\n            is output as NULL, not\n            \\N. It is probably not a good idea to\n            specify an empty escape character, particularly if field\n            values in your data contain any of the characters in the\n            list just given.\n\n\n\n        In certain cases, field- and line-handling options interact:\n\n\n\n            If LINES TERMINATED BY is an empty string\n            and FIELDS TERMINATED BY is nonempty,\n            lines are also terminated with FIELDS TERMINATED\n            BY.\n          \n            If the FIELDS TERMINATED BY and\n            FIELDS ENCLOSED BY values are both empty\n            (''), a fixed-row (nondelimited) format\n            is used. With fixed-row format, no delimiters are used\n            between fields (but you can still have a line terminator).\n            Instead, column values are read and written using a field\n            width wide enough to hold all values in the field. For\n            TINYINT,\n            SMALLINT,\n            MEDIUMINT,\n            INT, and\n            BIGINT, the field widths are\n            4, 6, 8, 11, and 20, respectively, no matter what the\n            declared display width is.\n          \nLINES TERMINATED BY is still used to\n            separate lines. If a line does not contain all fields, the\n            rest of the columns are set to their default values. If you\n            do not have a line terminator, you should set this to\n            ''. In this case, the text file must\n            contain all fields for each row.\n          \n            Fixed-row format also affects handling of\n            NULL values, as described later.\n\n\n\nNote\n\n\n              Fixed-size format does not work if you are using a\n              multibyte character set.\n\n\n\n\n\n        Handling of NULL values varies according to\n        the FIELDS and LINES\n        options in use:\n\n\n\n            For the default FIELDS and\n            LINES values, NULL is\n            written as a field value of \\N for\n            output, and a field value of \\N is read\n            as NULL for input (assuming that the\n            ESCAPED BY character is\n            \\).\n          \n            If FIELDS ENCLOSED BY is not empty, a\n            field containing the literal word NULL as\n            its value is read as a NULL value. This\n            differs from the word NULL enclosed\n            within FIELDS ENCLOSED BY characters,\n            which is read as the string 'NULL'.\n          \n            If FIELDS ESCAPED BY is empty,\n            NULL is written as the word\n            NULL.\n          \n            With fixed-row format (which is used when FIELDS\n            TERMINATED BY and FIELDS ENCLOSED\n            BY are both empty), NULL is\n            written as an empty string. This causes both\n            NULL values and empty strings in the\n            table to be indistinguishable when written to the file\n            because both are written as empty strings. If you need to be\n            able to tell the two apart when reading the file back in,\n            you should not use fixed-row format.\n\n\n\n        An attempt to load NULL into a NOT\n        NULL column produces either a warning or an error\n        according to the rules described in\n        Column Value Assignment.\n      \n        Some cases are not supported by LOAD\n        DATA:\n\n\n\n            Fixed-size rows (FIELDS TERMINATED BY and\n            FIELDS ENCLOSED BY both empty) and\n            BLOB or\n            TEXT columns.\n          \n            If you specify one separator that is the same as or a prefix\n            of another, LOAD DATA cannot\n            interpret the input properly. For example, the following\n            FIELDS clause would cause problems:\n          Press CTRL+C to copy FIELDS TERMINATED BY '\"' ENCLOSED BY '\"'\n            If FIELDS ESCAPED BY is empty, a field\n            value that contains an occurrence of FIELDS\n            ENCLOSED BY or LINES TERMINATED\n            BY followed by the FIELDS TERMINATED\n            BY value causes LOAD\n            DATA to stop reading a field or line too early.\n            This happens because LOAD\n            DATA cannot properly determine where the field or\n            line value ends.\n\n\n", "\n\n\n\nColumn List Specification\n\n\n\n\n        The following example loads all columns of the\n        persondata table:\n      Press CTRL+C to copy LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata;\n        By default, when no column list is provided at the end of the\n        LOAD DATA statement, input lines\n        are expected to contain a field for each table column. If you\n        want to load only some of a table's columns, specify a column\n        list:\n      Press CTRL+C to copy LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata\n(col_name_or_user_var [, col_name_or_user_var] ...);\n        You must also specify a column list if the order of the fields\n        in the input file differs from the order of the columns in the\n        table. Otherwise, MySQL cannot tell how to match input fields\n        with table columns.\n\n", "\n\n\n\nInput Preprocessing\n\n\n\n\n        Each instance of col_name_or_user_var\n        in LOAD DATA syntax is either a\n        column name or a user variable. With user variables, the\n        SET clause enables you to perform\n        preprocessing transformations on their values before assigning\n        the result to columns.\n      \n        User variables in the SET clause can be used\n        in several ways. The following example uses the first input\n        column directly for the value of t1.column1,\n        and assigns the second input column to a user variable that is\n        subjected to a division operation before being used for the\n        value of t1.column2:\n      Press CTRL+C to copy LOAD DATA INFILE 'file.txt'\n  INTO TABLE t1\n  (column1, @var1)\n  SET column2 = @var1/100;\n        The SET clause can be used to supply values\n        not derived from the input file. The following statement sets\n        column3 to the current date and time:\n      Press CTRL+C to copy LOAD DATA INFILE 'file.txt'\n  INTO TABLE t1\n  (column1, column2)\n  SET column3 = CURRENT_TIMESTAMP;\n        You can also discard an input value by assigning it to a user\n        variable and not assigning the variable to any table column:\n      Press CTRL+C to copy LOAD DATA INFILE 'file.txt'\n  INTO TABLE t1\n  (column1, @dummy, column2, @dummy, column3);\n        Use of the column/variable list and SET\n        clause is subject to the following restrictions:\n\n\n\n            Assignments in the SET clause should have\n            only column names on the left hand side of assignment\n            operators.\n          \n            You can use subqueries in the right hand side of\n            SET assignments. A subquery that returns\n            a value to be assigned to a column may be a scalar subquery\n            only. Also, you cannot use a subquery to select from the\n            table that is being loaded.\n          \n            Lines ignored by an IGNORE\n            number LINES clause are\n            not processed for the column/variable list or\n            SET clause.\n          \n            User variables cannot be used when loading data with\n            fixed-row format because user variables do not have a\n            display width.\n\n\n", "\n\n\n\nColumn Value Assignment\n\n\n\n\n        To process an input line, LOAD\n        DATA splits it into fields and uses the values\n        according to the column/variable list and the\n        SET clause, if they are present. Then the\n        resulting row is inserted into the table. If there are\n        BEFORE INSERT or AFTER\n        INSERT triggers for the table, they are activated\n        before or after inserting the row, respectively.\n      \n        Interpretation of field values and assignment to table columns\n        depends on these factors:\n\n\n\n            The SQL mode (the value of the\n            sql_mode system variable).\n            The mode can be nonrestrictive, or restrictive in various\n            ways. For example, strict SQL mode can be enabled, or the\n            mode can include values such as\n            NO_ZERO_DATE or\n            NO_ZERO_IN_DATE.\n          \n            Presence or absence of the IGNORE and\n            LOCAL modifiers.\n\n\n\n        Those factors combine to produce restrictive or nonrestrictive\n        data interpretation by LOAD DATA:\n\n\n\n            Data interpretation is restrictive if the SQL mode is\n            restrictive and neither the IGNORE nor\n            the LOCAL modifier is specified. Errors\n            terminate the load operation.\n          \n            Data interpretation is nonrestrictive if the SQL mode is\n            nonrestrictive or the IGNORE or\n            LOCAL modifier is specified. (In\n            particular, either modifier if specified\n            overrides a restrictive SQL mode when\n            the REPLACE modifier is omitted.) Errors\n            become warnings and the load operation continues.\n\n\n\n        Restrictive data interpretation uses these rules:\n\n\n\n            Too many or too few fields results an error.\n          \n            Assigning NULL (that is,\n            \\N) to a non-NULL\n            column results in an error.\n          \n            A value that is out of range for the column data type\n            results in an error.\n          \n            Invalid values produce errors. For example, a value such as\n            'x' for a numeric column results in an\n            error, not conversion to 0.\n\n\n\n        By contrast, nonrestrictive data interpretation uses these\n        rules:\n\n\n\n            If an input line has too many fields, the extra fields are\n            ignored and the number of warnings is incremented.\n          \n            If an input line has too few fields, the columns for which\n            input fields are missing are assigned their default values.\n            Default value assignment is described in\n            Section\u00a013.6, \u201cData Type Default Values\u201d.\n          \n            Assigning NULL (that is,\n            \\N) to a non-NULL\n            column results in assignment of the implicit default value\n            for the column data type. Implicit default values are\n            described in Section\u00a013.6, \u201cData Type Default Values\u201d.\n          \n            Invalid values produce warnings rather than errors, and are\n            converted to the \u201cclosest\u201d valid value for the\n            column data type. Examples:\n\n\n\n                A value such as 'x' for a numeric\n                column results in conversion to 0.\n              \n                An out-of-range numeric or temporal value is clipped to\n                the closest endpoint of the range for the column data\n                type.\n              \n                An invalid value for a DATETIME,\n                DATE, or TIME\n                column is inserted as the implicit default value,\n                regardless of the SQL mode\n                NO_ZERO_DATE setting.\n                The implicit default is the appropriate\n                \u201czero\u201d value for the type\n                ('0000-00-00 00:00:00',\n                '0000-00-00', or\n                '00:00:00'). See\n                Section\u00a013.2, \u201cDate and Time Data Types\u201d.\n\n\n\nLOAD DATA interprets an empty\n            field value differently from a missing field:\n\n\n\n                For string types, the column is set to the empty string.\n              \n                For numeric types, the column is set to\n                0.\n              \n                For date and time types, the column is set to the\n                appropriate \u201czero\u201d value for the type. See\n                Section\u00a013.2, \u201cDate and Time Data Types\u201d.\n\n\n\n            These are the same values that result if you assign an empty\n            string explicitly to a string, numeric, or date or time type\n            explicitly in an INSERT or\n            UPDATE statement.\n\n\n\nTIMESTAMP columns are set to the\n        current date and time only if there is a NULL\n        value for the column (that is, \\N) and the\n        column is not declared to permit NULL values,\n        or if the TIMESTAMP column\n        default value is the current timestamp and it is omitted from\n        the field list when a field list is specified.\n      \nLOAD DATA regards all input as\n        strings, so you cannot use numeric values for\n        ENUM or\n        SET columns the way you can with\n        INSERT statements. All\n        ENUM and\n        SET values must be specified as\n        strings.\n      \nBIT values cannot be loaded\n        directly using binary notation (for example,\n        b'011010'). To work around this, use the\n        SET clause to strip off the leading\n        b' and trailing ' and\n        perform a base-2 to base-10 conversion so that MySQL loads the\n        values into the BIT column\n        properly:\n      Press CTRL+C to copy $> cat /tmp/bit_test.txt\nb'10'\nb'1111111'\n$> mysql test\nmysql> LOAD DATA INFILE '/tmp/bit_test.txt'\n       INTO TABLE bit_test (@var1)\n       SET b = CAST(CONV(MID(@var1, 3, LENGTH(@var1)-3), 2, 10) AS UNSIGNED);\nQuery OK, 2 rows affected (0.00 sec)\nRecords: 2  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT BIN(b+0) FROM bit_test;\n+----------+\n| BIN(b+0) |\n+----------+\n| 10       |\n| 1111111  |\n+----------+\n2 rows in set (0.00 sec)\n        For BIT values in\n        0b binary notation (for example,\n        0b011010), use this SET\n        clause instead to strip off the leading 0b:\n      Press CTRL+C to copy SET b = CAST(CONV(MID(@var1, 3, LENGTH(@var1)-2), 2, 10) AS UNSIGNED)\n", "\n\n\n\nPartitioned Table Support\n\n\n\n\nLOAD DATA supports explicit\n        partition selection using the PARTITION\n        clause with a list of one or more comma-separated names of\n        partitions, subpartitions, or both. When this clause is used, if\n        any rows from the file cannot be inserted into any of the\n        partitions or subpartitions named in the list, the statement\n        fails with the error Found a row not matching the\n        given partition set. For more information and\n        examples, see Section\u00a026.5, \u201cPartition Selection\u201d.\n\n", "\n\n\n\nConcurrency Considerations\n\n\n\n\n        With the LOW_PRIORITY modifier, execution of\n        the LOAD DATA statement is\n        delayed until no other clients are reading from the table. This\n        affects only storage engines that use only table-level locking\n        (such as MyISAM, MEMORY,\n        and MERGE).\n      \n        With the CONCURRENT modifier and a\n        MyISAM table that satisfies the condition for\n        concurrent inserts (that is, it contains no free blocks in the\n        middle), other threads can retrieve data from the table while\n        LOAD DATA is executing. This\n        modifier affects the performance of LOAD\n        DATA a bit, even if no other thread is using the table\n        at the same time.\n\n", "\n\n\n\nStatement Result Information\n\n\n\n\n        When the LOAD DATA statement\n        finishes, it returns an information string in the following\n        format:\n      Press CTRL+C to copy Records: 1  Deleted: 0  Skipped: 0  Warnings: 0\n        Warnings occur under the same circumstances as when values are\n        inserted using the INSERT\n        statement (see Section\u00a015.2.7, \u201cINSERT Statement\u201d), except that\n        LOAD DATA also generates warnings\n        when there are too few or too many fields in the input row.\n      \n        You can use SHOW WARNINGS to get\n        a list of the first\n        max_error_count warnings as\n        information about what went wrong. See\n        Section\u00a015.7.7.41, \u201cSHOW WARNINGS Statement\u201d.\n      \n        If you are using the C API, you can get information about the\n        statement by calling the\n        mysql_info() function. See\n        mysql_info().\n\n", "\n\n\n\nReplication Considerations\n\n\n\n\nLOAD DATA is considered unsafe\n        for statement-based replication. If you use\n        LOAD DATA with\n        binlog_format=STATEMENT, each\n        replica on which the changes are to be applied creates a\n        temporary file containing the data. This temporary file is not\n        encrypted, even if binary log encryption is active on the\n        source, If encryption is required, use row-based or mixed binary\n        logging format instead, for which replicas do not create the\n        temporary file. For more information on the interaction between\n        LOAD DATA and replication, see\n        Section\u00a019.5.1.19, \u201cReplication and LOAD DATA\u201d.\n\n", "\n\n\n\nMiscellaneous Topics\n\n\n\n\n        On Unix, if you need LOAD DATA to\n        read from a pipe, you can use the following technique (the\n        example loads a listing of the / directory\n        into the table db1.t1):\n      Press CTRL+C to copy mkfifo /mysql/data/db1/ls.dat\nchmod 666 /mysql/data/db1/ls.dat\nfind / -ls > /mysql/data/db1/ls.dat &\nmysql -e \"LOAD DATA INFILE 'ls.dat' INTO TABLE t1\" db1\n        Here you must run the command that generates the data to be\n        loaded and the mysql commands either on\n        separate terminals, or run the data generation process in the\n        background (as shown in the preceding example). If you do not do\n        this, the pipe blocks until data is read by the\n        mysql process.\n\n"], "Examples": ["LOAD DATA INFILE 'data.txt' INTO TABLE db2.my_table;", "LOAD DATA INFILE '/tmp/test.txt' INTO TABLE test\n  FIELDS TERMINATED BY ','  LINES STARTING BY 'xxx';", "LOAD DATA INFILE '/tmp/test.txt' INTO TABLE test IGNORE 1 LINES;", "SELECT * INTO OUTFILE 'data.txt'\n  FIELDS TERMINATED BY ','\n  FROM table2;", "LOAD DATA INFILE 'data.txt' INTO TABLE table2\n  FIELDS TERMINATED BY ',';", "LOAD DATA INFILE 'data.txt' INTO TABLE table2\n  FIELDS TERMINATED BY '\\t';", "LOAD DATA INFILE 'data.txt' INTO TABLE tbl_name\n  FIELDS TERMINATED BY ',' ENCLOSED BY '\"'\n  LINES TERMINATED BY '\\r\\n'\n  IGNORE 1 LINES;", "CREATE TABLE jokes\n  (a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  joke TEXT NOT NULL);\nLOAD DATA INFILE '/tmp/jokes.txt' INTO TABLE jokes\n  FIELDS TERMINATED BY ''\n  LINES TERMINATED BY '\\n%%\\n' (joke);", "LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata;", "LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata\n(col_name_or_user_var [, col_name_or_user_var] ...);", "LOAD DATA INFILE 'file.txt'\n  INTO TABLE t1\n  (column1, @var1)\n  SET column2 = @var1/100;", "LOAD DATA INFILE 'file.txt'\n  INTO TABLE t1\n  (column1, column2)\n  SET column3 = CURRENT_TIMESTAMP;", "LOAD DATA INFILE 'file.txt'\n  INTO TABLE t1\n  (column1, @dummy, column2, @dummy, column3);"], "Category": ["Data Manipulation Statements"]}
