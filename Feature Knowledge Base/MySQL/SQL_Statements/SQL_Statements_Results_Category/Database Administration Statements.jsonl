{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/set-default-role.html"], "Title": ["15.7.1.9 SET DEFAULT ROLE Statement"], "Feature": ["SET DEFAULT ROLE\n    {NONE | ALL | role [, role ] ...}\n    TO user [, user ] ..."], "Description": ["\n        For each user named immediately after\n        the TO keyword, this statement defines which\n        roles become active when the user connects to the server and\n        authenticates, or when the user executes the\n        SET ROLE\n        DEFAULT statement during a session.\n      ", "\nSET DEFAULT ROLE is alternative\n        syntax for ALTER\n        USER ... DEFAULT ROLE (see\n        Section\u00a015.7.1.1, \u201cALTER USER Statement\u201d). However,\n        ALTER USER can set the default\n        for only a single user, whereas SET DEFAULT\n        ROLE can set the default for multiple users. On the\n        other hand, you can specify CURRENT_USER as\n        the user name for the ALTER USER\n        statement, whereas you cannot for SET\n        DEFAULT ROLE.\n      ", "\nSET DEFAULT ROLE requires these\n        privileges:\n", "\n\n            Setting the default roles for another user requires the\n            global CREATE USER privilege,\n            or the UPDATE privilege for\n            the mysql.default_roles system table.\n          \n            Setting the default roles for yourself requires no special\n            privileges, as long as the roles you want as the default\n            have been granted to you.\n\n", "\n        Each role name uses the format described in\n        Section\u00a08.2.5, \u201cSpecifying Role Names\u201d. For example:\n      ", "Press CTRL+C to copy SET DEFAULT ROLE 'admin', 'developer' TO 'joe'@'10.0.0.1';", "\n        The host name part of the role name, if omitted, defaults to\n        '%'.\n      ", "\n        The clause following the DEFAULT ROLE\n        keywords permits these values:\n", "\n\nNONE: Set the default to\n            NONE (no roles).\n          \nALL: Set the default to all roles granted\n            to the account.\n          \nrole [,\n            role ] ...: Set the\n            default to the named roles, which must exist and be granted\n            to the account at the time SET DEFAULT\n            ROLE is executed.\n\n", "\n\nNote\n\n\nSET DEFAULT ROLE and\n          SET ROLE\n          DEFAULT are different statements:\n\n\n\nSET DEFAULT ROLE defines\n              which account roles to activate by default within account\n              sessions.\n            \nSET ROLE\n              DEFAULT sets the active roles within the current\n              session to the current account default roles.\n\n\n", "\n        For role usage examples, see Section\u00a08.2.10, \u201cUsing Roles\u201d.\n"], "Examples": ["SET DEFAULT ROLE 'admin', 'developer' TO 'joe'@'10.0.0.1';"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-resource-group.html"], "Title": ["15.7.2.1 ALTER RESOURCE GROUP Statement"], "Feature": ["ALTER RESOURCE GROUP group_name\n    [VCPU [=] vcpu_spec [, vcpu_spec] ...]\n    [THREAD_PRIORITY [=] N]\n    [ENABLE|DISABLE [FORCE]]\n\nvcpu_spec: {N | M - N}"], "Description": ["\nALTER RESOURCE GROUP is used for\n        resource group management (see\n        Section\u00a07.1.16, \u201cResource Groups\u201d). This statement alters\n        modifiable attributes of an existing resource group. It requires\n        the RESOURCE_GROUP_ADMIN\n        privilege.\n      ", "\ngroup_name identifies which resource\n        group to alter. If the group does not exist, an error occurs.\n      ", "\n        The attributes for CPU affinity, priority, and whether the group\n        is enabled can be modified with ALTER\n        RESOURCE GROUP. These attributes are specified the\n        same way as described for CREATE RESOURCE\n        GROUP (see Section\u00a015.7.2.2, \u201cCREATE RESOURCE GROUP Statement\u201d).\n        Only the attributes specified are altered. Unspecified\n        attributes retain their current values.\n      ", "\n        The FORCE modifier is used with\n        DISABLE. It determines statement behavior if\n        the resource group has any threads assigned to it:\n", "\n\n            If FORCE is not given, existing threads\n            in the group continue to run until they terminate, but new\n            threads cannot be assigned to the group.\n          \n            If FORCE is given, existing threads in\n            the group are moved to their respective default group\n            (system threads to SYS_default, user\n            threads to USR_default).\n\n", "\n        The name and type attributes are set at group creation time and\n        cannot be modified thereafter with ALTER\n        RESOURCE GROUP.\n      ", "\n        Examples:\n", "\n\n            Alter a group CPU affinity:\n          Press CTRL+C to copy ALTER RESOURCE GROUP rg1 VCPU = 0-63;\n            Alter a group thread priority:\n          Press CTRL+C to copy ALTER RESOURCE GROUP rg2 THREAD_PRIORITY = 5;\n            Disable a group, moving any threads assigned to it to the\n            default groups:\n          Press CTRL+C to copy ALTER RESOURCE GROUP rg3 DISABLE FORCE;\n", "\n        Resource group management is local to the server on which it\n        occurs. ALTER RESOURCE GROUP\n        statements are not written to the binary log and are not\n        replicated.\n"], "Examples": ["ALTER RESOURCE GROUP rg1 VCPU = 0-63;", "ALTER RESOURCE GROUP rg2 THREAD_PRIORITY = 5;", "ALTER RESOURCE GROUP rg3 DISABLE FORCE;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-resource-group.html"], "Title": ["15.7.2.2 CREATE RESOURCE GROUP Statement"], "Feature": ["CREATE RESOURCE GROUP group_name\n    TYPE = {SYSTEM|USER}\n    [VCPU [=] vcpu_spec [, vcpu_spec] ...]\n    [THREAD_PRIORITY [=] N]\n    [ENABLE|DISABLE]\n\nvcpu_spec: {N | M - N}", "VCPU = 0,1,2,3,9,10\nVCPU = 0-3,9-10\nVCPU = 9,10,0-3\nVCPU = 0,10,1,9,3,2"], "Description": ["\nCREATE RESOURCE GROUP is used for\n        resource group management (see\n        Section\u00a07.1.16, \u201cResource Groups\u201d). This statement creates a new\n        resource group and assigns its initial attribute values. It\n        requires the RESOURCE_GROUP_ADMIN\n        privilege.\n      ", "\ngroup_name identifies which resource\n        group to create. If the group already exists, an error occurs.\n      ", "\n        The TYPE attribute is required. It should be\n        SYSTEM for a system resource group,\n        USER for a user resource group. The group\n        type affects permitted THREAD_PRIORITY\n        values, as described later.\n      ", "\n        The VCPU attribute indicates the CPU\n        affinity; that is, the set of virtual CPUs the group can use:\n", "\n\n            If VCPU is not given, the resource group\n            has no CPU affinity and can use all available CPUs.\n          \n            If VCPU is given, the attribute value is\n            a list of comma-separated CPU numbers or ranges:\n\n\n\n                Each number must be an integer in the range from 0 to\n                the number of CPUs \u2212 1. For example, on a system\n                with 64 CPUs, the number can range from 0 to 63.\n              \n                A range is given in the form\n                M \u2212\n                N, where\n                M is less than or equal to\n                N and both numbers are in the\n                CPU range.\n              \n                If a CPU number is an integer outside the permitted\n                range or is not an integer, an error occurs.\n\n\n\n", "\n        Example VCPU specifiers (these are all\n        equivalent):\n      ", "\n        The THREAD_PRIORITY attribute indicates the\n        priority for threads assigned to the group:\n", "\n\n            If THREAD_PRIORITY is not given, the\n            default priority is 0.\n          \n            If THREAD_PRIORITY is given, the\n            attribute value must be in the range from -20 (highest\n            priority) to 19 (lowest priority). The priority for system\n            resource groups must be in the range from -20 to 0. The\n            priority for user resource groups must be in the range from\n            0 to 19. Use of different ranges for system and user groups\n            ensures that user threads never have a higher priority than\n            system threads.\n\n", "\nENABLE and DISABLE specify\n        that the resource group is initially enabled or disabled. If\n        neither is specified, the group is enabled by default. A\n        disabled group cannot have threads assigned to it.\n      ", "\n        Examples:\n", "\n\n            Create an enabled user group that has a single CPU and the\n            lowest priority:\n          Press CTRL+C to copy CREATE RESOURCE GROUP rg1\n  TYPE = USER\n  VCPU = 0\n  THREAD_PRIORITY = 19;\n            Create a disabled system group that has no CPU affinity (can\n            use all CPUs) and the highest priority:\n          Press CTRL+C to copy CREATE RESOURCE GROUP rg2\n  TYPE = SYSTEM\n  THREAD_PRIORITY = -20\n  DISABLE;\n", "\n        Resource group management is local to the server on which it\n        occurs. CREATE RESOURCE GROUP\n        statements are not written to the binary log and are not\n        replicated.\n"], "Examples": ["CREATE RESOURCE GROUP rg1\n  TYPE = USER\n  VCPU = 0\n  THREAD_PRIORITY = 19;", "CREATE RESOURCE GROUP rg2\n  TYPE = SYSTEM\n  THREAD_PRIORITY = -20\n  DISABLE;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-resource-group.html"], "Title": ["15.7.2.3 DROP RESOURCE GROUP Statement"], "Feature": ["DROP RESOURCE GROUP group_name [FORCE]"], "Description": ["\nDROP RESOURCE GROUP is used for\n        resource group management (see\n        Section\u00a07.1.16, \u201cResource Groups\u201d). This statement drops a\n        resource group. It requires the\n        RESOURCE_GROUP_ADMIN privilege.\n      ", "\ngroup_name identifies which resource\n        group to drop. If the group does not exist, an error occurs.\n      ", "\n        The FORCE modifier determines statement\n        behavior if the resource group has any threads assigned to it:\n", "\n\n            If FORCE is not given and any threads are\n            assigned to the group, an error occurs.\n          \n            If FORCE is given, existing threads in\n            the group are moved to their respective default group\n            (system threads to SYS_default, user\n            threads to USR_default).\n\n", "\n        Examples:\n", "\n\n            Drop a group, failing if the group contains any threads:\n          Press CTRL+C to copy DROP RESOURCE GROUP rg1;\n            Drop a group and move existing threads to the default\n            groups:\n          Press CTRL+C to copy DROP RESOURCE GROUP rg2 FORCE;\n", "\n        Resource group management is local to the server on which it\n        occurs. DROP RESOURCE GROUP\n        statements are not written to the binary log and are not\n        replicated.\n"], "Examples": ["DROP RESOURCE GROUP rg1;", "DROP RESOURCE GROUP rg2 FORCE;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/set-resource-group.html"], "Title": ["15.7.2.4 SET RESOURCE GROUP Statement"], "Feature": ["SET RESOURCE GROUP group_name\n    [FOR thread_id [, thread_id] ...]"], "Description": ["\nSET RESOURCE GROUP is used for\n        resource group management (see\n        Section\u00a07.1.16, \u201cResource Groups\u201d). This statement assigns\n        threads to a resource group. It requires the\n        RESOURCE_GROUP_ADMIN or\n        RESOURCE_GROUP_USER privilege.\n      ", "\ngroup_name identifies which resource\n        group to be assigned. Any thread_id\n        values indicate threads to assign to the group. Thread IDs can\n        be determined from the Performance Schema\n        threads table. If the resource\n        group or any named thread ID does not exist, an error occurs.\n      ", "\n        With no FOR clause, the statement assigns the\n        current thread for the session to the resource group.\n      ", "\n        With a FOR clause that names thread IDs, the\n        statement assigns those threads to the resource group.\n      ", "\n        For attempts to assign a system thread to a user resource group\n        or a user thread to a system resource group, a warning occurs.\n      ", "\n        Examples:\n", "\n\n            Assign the current session thread to a group:\n          Press CTRL+C to copy SET RESOURCE GROUP rg1;\n            Assign the named threads to a group:\n          Press CTRL+C to copy SET RESOURCE GROUP rg2 FOR 14, 78, 4;\n", "\n        Resource group management is local to the server on which it\n        occurs. SET RESOURCE GROUP\n        statements are not written to the binary log and are not\n        replicated.\n      ", "\n        An alternative to SET RESOURCE\n        GROUP is the\n        RESOURCE_GROUP optimizer hint,\n        which assigns individual statements to a resource group. See\n        Section\u00a010.9.3, \u201cOptimizer Hints\u201d.\n"], "Examples": ["SET RESOURCE GROUP rg1;", "SET RESOURCE GROUP rg2 FOR 14, 78, 4;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/analyze-table.html"], "Title": ["15.7.3.1 ANALYZE TABLE Statement"], "Feature": ["ANALYZE [NO_WRITE_TO_BINLOG | LOCAL]\n    TABLE tbl_name [, tbl_name] ...\n\nANALYZE [NO_WRITE_TO_BINLOG | LOCAL]\n    TABLE tbl_name\n    UPDATE HISTOGRAM ON col_name [, col_name] ...\n        [WITH N BUCKETS]\n    [{MANUAL | AUTO} UPDATE]\n\nANALYZE [NO_WRITE_TO_BINLOG | LOCAL] \n    TABLE tbl_name\n    UPDATE HISTOGRAM ON col_name [USING DATA 'json_data']\n\nANALYZE [NO_WRITE_TO_BINLOG | LOCAL]\n    TABLE tbl_name\n    DROP HISTOGRAM ON col_name [, col_name] ...", "mysql> TABLE information_schema.column_statistics\\G\n*************************** 1. row ***************************\nSCHEMA_NAME: h\n TABLE_NAME: t\nCOLUMN_NAME: c1\n  HISTOGRAM: {\"buckets\": [], \"data-type\": \"int\", \"auto-update\": false,\n\"null-values\": 0.0, \"collation-id\": 8, \"last-updated\": \"2024-03-26\n16:54:43.674995\", \"sampling-rate\": 1.0, \"histogram-type\": \"singleton\",\n\"number-of-buckets-specified\": 100}   \n1 row in set (0.00 sec)"], "Description": ["\nANALYZE TABLE generates table\n        statistics:\n", "\n\nANALYZE TABLE without any\n            HISTOGRAM clause performs a key\n            distribution analysis and stores the distribution for the\n            named table or tables. For MyISAM tables,\n            ANALYZE TABLE for key\n            distribution analysis is equivalent to using\n            myisamchk --analyze.\n          \nANALYZE TABLE with the\n            UPDATE HISTOGRAM clause generates\n            histogram statistics for the named table columns and stores\n            them in the data dictionary. Only one table name is\n            permitted with this syntax. MySQL also supports setting the\n            histogram of a single column to a user-defined JSON value.\n          \nANALYZE TABLE with the\n            DROP HISTOGRAM clause removes histogram\n            statistics for the named table columns from the data\n            dictionary. Only one table name is permitted for this\n            syntax.\n\n", "\n        This statement requires SELECT\n        and INSERT privileges for the\n        table.\n      ", "\nANALYZE TABLE works with\n        InnoDB, NDB, and\n        MyISAM tables. It does not work with views.\n      ", "\n        If the innodb_read_only system\n        variable is enabled, ANALYZE\n        TABLE may fail because it cannot update statistics\n        tables in the data dictionary, which use\n        InnoDB. For ANALYZE\n        TABLE operations that update the key distribution,\n        failure may occur even if the operation updates the table itself\n        (for example, if it is a MyISAM table). To\n        obtain the updated distribution statistics, set\n        information_schema_stats_expiry=0.\n      ", "\nANALYZE TABLE is supported for\n        partitioned tables, and you can use ALTER TABLE ...\n        ANALYZE PARTITION to analyze one or more partitions;\n        for more information, see Section\u00a015.1.9, \u201cALTER TABLE Statement\u201d, and\n        Section\u00a026.3.4, \u201cMaintenance of Partitions\u201d.\n      ", "\n        During the analysis, the table is locked with a read lock for\n        InnoDB and MyISAM.\n      ", "\n        By default, the server writes ANALYZE\n        TABLE statements to the binary log so that they\n        replicate to replicas. To suppress logging, specify the optional\n        NO_WRITE_TO_BINLOG keyword or its alias\n        LOCAL.\n", "\nANALYZE TABLE OutputKey Distribution AnalysisHistogram Statistics AnalysisOther Considerations\n", "\n\n\n\nANALYZE TABLE Output\n\n\n\n\nANALYZE TABLE returns a result\n          set with the columns shown in the following table.\n\n\n\nColumn\nValue\n\nTable\nThe table name\n\nOp\nanalyze or histogram\n\nMsg_type\nstatus, error,\n                info, note, or\n                warning\n\nMsg_text\nAn informational message\n\n\n", "\n\n\n\nKey Distribution Analysis\n\n\n\n\nANALYZE TABLE without either\n          HISTOGRAM clause performs a key\n          distribution analysis and stores the distribution for the\n          table or tables. Any existing histogram statistics remain\n          unaffected.\n        \n          If the table has not changed since the last key distribution\n          analysis, the table is not analyzed again.\n        \n          MySQL uses the stored key distribution to decide the order in\n          which tables should be joined for joins on something other\n          than a constant. In addition, key distributions can be used\n          when deciding which indexes to use for a specific table within\n          a query.\n        \n          To check the stored key distribution cardinality, use the\n          SHOW INDEX statement or the\n          INFORMATION_SCHEMA\nSTATISTICS table. See\n          Section\u00a015.7.7.23, \u201cSHOW INDEX Statement\u201d, and\n          Section\u00a028.3.34, \u201cThe INFORMATION_SCHEMA STATISTICS Table\u201d.\n        \n          For InnoDB tables,\n          ANALYZE TABLE determines index\n          cardinality by performing random dives on each of the index\n          trees and updating index cardinality estimates accordingly.\n          Because these are only estimates, repeated runs of\n          ANALYZE TABLE could produce\n          different numbers. This makes ANALYZE\n          TABLE fast on InnoDB tables but\n          not 100% accurate because it does not take all rows into\n          account.\n        \n          You can make the\n          statistics collected by\n          ANALYZE TABLE more precise and\n          more stable by enabling\n          innodb_stats_persistent, as\n          explained in Section\u00a017.8.10.1, \u201cConfiguring Persistent Optimizer Statistics Parameters\u201d. When\n          innodb_stats_persistent is\n          enabled, it is important to run ANALYZE\n          TABLE after major changes to index column data, as\n          statistics are not recalculated periodically (such as after a\n          server restart).\n        \n          If innodb_stats_persistent is\n          enabled, you can change the number of random dives by\n          modifying the\n          innodb_stats_persistent_sample_pages\n          system variable. If\n          innodb_stats_persistent is\n          disabled, modify\n          innodb_stats_transient_sample_pages\n          instead.\n        \n          For more information about key distribution analysis in\n          InnoDB, see\n          Section\u00a017.8.10.1, \u201cConfiguring Persistent Optimizer Statistics Parameters\u201d, and\n          Section\u00a017.8.10.3, \u201cEstimating ANALYZE TABLE Complexity for InnoDB Tables\u201d.\n        \n          MySQL uses index cardinality estimates in join optimization.\n          If a join is not optimized in the right way, try running\n          ANALYZE TABLE. In the few cases\n          that ANALYZE TABLE does not\n          produce values good enough for your particular tables, you can\n          use FORCE INDEX with your queries to force\n          the use of a particular index, or set the\n          max_seeks_for_key system\n          variable to ensure that MySQL prefers index lookups over table\n          scans. See Section\u00a0B.3.5, \u201cOptimizer-Related Issues\u201d.\n\n", "\n\n\n\nHistogram Statistics Analysis\n\n\n\n\nANALYZE TABLE with the\n          HISTOGRAM clause enables management of\n          histogram statistics for table column values. For information\n          about histogram statistics, see\n          Section\u00a010.9.6, \u201cOptimizer Statistics\u201d.\n        \n          These histogram operations are available:\n\n\n\nANALYZE TABLE with an\n              UPDATE HISTOGRAM clause generates\n              histogram statistics for the named table columns and\n              stores them in the data dictionary. Only one table name is\n              permitted for this syntax.\n            \n              The optional WITH N\n              BUCKETS clause specifies the number of buckets\n              for the histogram. The value of\n              N must be an integer in the\n              range from 1 to 1024. If this clause is omitted, the\n              number of buckets is 100.\n            \n              The optional AUTO UPDATE clause enables\n              automatic updates of histograms on the table. When\n              enabled, an ANALYZE TABLE statement on\n              this table automatically updates the histogram, using the\n              same number of buckets as last specified by WITH\n              ... BUCKETS if this was previously set for this\n              table. In addition, when recalculating persistent\n              statistics for the table (see\n              Section\u00a017.8.10.1, \u201cConfiguring Persistent Optimizer Statistics Parameters\u201d), the\n              InnoDB background statistics\n              thread also updates the histogram. MANUAL\n              UPDATE disables automatic updates, and is the\n              default setting if not specified.\n            \nANALYZE TABLE with a\n              DROP HISTOGRAM clause removes histogram\n              statistics for the named table columns from the data\n              dictionary. Only one table name is permitted for this\n              syntax.\n\n\n\n          Stored histogram management statements affect only the named\n          columns. Consider these statements:\n        Press CTRL+C to copy ANALYZE TABLE t UPDATE HISTOGRAM ON c1, c2, c3 WITH 10 BUCKETS;\nANALYZE TABLE t UPDATE HISTOGRAM ON c1, c3 WITH 10 BUCKETS;\nANALYZE TABLE t DROP HISTOGRAM ON c2;\n          The first statement updates the histograms for columns\n          c1, c2, and\n          c3, replacing any existing histograms for\n          those columns. The second statement updates the histograms for\n          c1 and c3, leaving the\n          c2 histogram unaffected. The third\n          statement removes the histogram for c2,\n          leaving those for c1 and\n          c3 unaffected.\n        \n          When sampling user data as part of building a histogram, not\n          all values are read; this may lead to missing some values\n          considered important. In such cases, it might be useful to\n          modify the histogram, or to set your own histogram explicitly\n          based on your own criteria, such as the complete data set.\n          ANALYZE TABLE tbl_name\n          UPDATE HISTOGRAM ON col_name USING\n          DATA 'json_data' updates\n          a column of the histogram table with data supplied in the same\n          JSON format used to display HISTOGRAM\n          column values from the Information Schema\n          COLUMN_STATISTICS table. Only one\n          column can be modified when updating the histogram with JSON\n          data.\n        \n          We can illustrate the use of USING DATA by\n          first generating a histogram on column c1\n          of table t, like this:\n        Press CTRL+C to copy mysql> ANALYZE TABLE t UPDATE HISTOGRAM ON c1;\n+-------+-----------+----------+-----------------------------------------------+\n| Table | Op        | Msg_type | Msg_text                                      |\n+-------+-----------+----------+-----------------------------------------------+\n| h.t   | histogram | status   | Histogram statistics created for column 'c1'. |\n+-------+-----------+----------+-----------------------------------------------+\n1 row in set (0.00 sec)\n          We can see the histogram generated in the\n          COLUMN_STATISTICS table:\n        Press CTRL+C to copy mysql> TABLE information_schema.column_statistics\\G\n*************************** 1. row ***************************\nSCHEMA_NAME: h\n TABLE_NAME: t\nCOLUMN_NAME: c1\n  HISTOGRAM: {\"buckets\": [], \"data-type\": \"int\", \"auto-update\": false,\n\"null-values\": 0.0, \"collation-id\": 8, \"last-updated\": \"2024-03-26\n16:54:43.674995\", \"sampling-rate\": 1.0, \"histogram-type\": \"singleton\",\n\"number-of-buckets-specified\": 100}   \n1 row in set (0.00 sec)\n          Now we drop the histogram, and when we check\n          COLUMN_STATISTICS, it is empty:\n        Press CTRL+C to copy mysql> ANALYZE TABLE t DROP HISTOGRAM ON c1;\n+-------+-----------+----------+-----------------------------------------------+\n| Table | Op        | Msg_type | Msg_text                                      |\n+-------+-----------+----------+-----------------------------------------------+\n| h.t   | histogram | status   | Histogram statistics removed for column 'c1'. |\n+-------+-----------+----------+-----------------------------------------------+\n1 row in set (0.01 sec)\n\nmysql> TABLE information_schema.column_statistics\\G\nEmpty set (0.00 sec)\n          We can restore the dropped histogram by inserting its JSON\n          representation obtained previously from the\n          HISTOGRAM column of the\n          COLUMN_STATISTICS table, and when we query\n          that table again, we can see that the histogram has been\n          restored to its previous state:\n        Press CTRL+C to copy mysql> ANALYZE TABLE t UPDATE HISTOGRAM ON c1 \n    ->     USING DATA '{\"buckets\": [], \"data-type\": \"int\", \"auto-update\": false,\n    ->               \"null-values\": 0.0, \"collation-id\": 8, \"last-updated\": \"2024-03-26\n    ->               16:54:43.674995\", \"sampling-rate\": 1.0, \"histogram-type\": \"singleton\",\n    ->               \"number-of-buckets-specified\": 100}';   \n+-------+-----------+----------+-----------------------------------------------+\n| Table | Op        | Msg_type | Msg_text                                      |\n+-------+-----------+----------+-----------------------------------------------+\n| h.t   | histogram | status   | Histogram statistics created for column 'c1'. |\n+-------+-----------+----------+-----------------------------------------------+\n\nmysql> TABLE information_schema.column_statistics\\G\n*************************** 1. row ***************************\nSCHEMA_NAME: h\n TABLE_NAME: t\nCOLUMN_NAME: c1\n  HISTOGRAM: {\"buckets\": [], \"data-type\": \"int\", \"auto-update\": false,\n\"null-values\": 0.0, \"collation-id\": 8, \"last-updated\": \"2024-03-26\n16:54:43.674995\", \"sampling-rate\": 1.0, \"histogram-type\": \"singleton\",\n\"number-of-buckets-specified\": 100}\n          Histogram generation is not supported for encrypted tables (to\n          avoid exposing data in the statistics) or\n          TEMPORARY tables.\n        \n          Histogram generation applies to columns of all data types\n          except geometry types (spatial data) and\n          JSON.\n        \n          Histograms can be generated for stored and virtual generated\n          columns.\n        \n          Histograms cannot be generated for columns that are covered by\n          single-column unique indexes.\n        \n          Histogram management statements attempt to perform as much of\n          the requested operation as possible, and report diagnostic\n          messages for the remainder. For example, if an UPDATE\n          HISTOGRAM statement names multiple columns, but some\n          of them do not exist or have an unsupported data type,\n          histograms are generated for the other columns, and messages\n          are produced for the invalid columns.\n        \n          Histograms are affected by these DDL statements:\n\n\n\nDROP TABLE removes\n              histograms for columns in the dropped table.\n            \nDROP DATABASE removes\n              histograms for any table in the dropped database because\n              the statement drops all tables in the database.\n            \nRENAME TABLE does not\n              remove histograms. Instead, it renames histograms for the\n              renamed table to be associated with the new table name.\n            \nALTER TABLE statements that\n              remove or modify a column remove histograms for that\n              column.\n            \nALTER TABLE\n              ... CONVERT TO CHARACTER SET removes histograms\n              for character columns because they are affected by the\n              change of character set. Histograms for noncharacter\n              columns remain unaffected.\n\n\n\n          The\n          histogram_generation_max_mem_size\n          system variable controls the maximum amount of memory\n          available for histogram generation. The global and session\n          values may be set at runtime.\n        \n          Changing the global\n          histogram_generation_max_mem_size\n          value requires privileges sufficient to set global system\n          variables. Changing the session\n          histogram_generation_max_mem_size\n          value requires privileges sufficient to set restricted session\n          system variables. See\n          Section\u00a07.1.9.1, \u201cSystem Variable Privileges\u201d.\n        \n          If the estimated amount of data to be read into memory for\n          histogram generation exceeds the limit defined by\n          histogram_generation_max_mem_size,\n          MySQL samples the data rather than reading all of it into\n          memory. Sampling is evenly distributed over the entire table.\n          MySQL uses SYSTEM sampling, which is a\n          page-level sampling method.\n        \n          The sampling-rate value in the\n          HISTOGRAM column of the Information Schema\n          COLUMN_STATISTICS table can be\n          queried to determine the fraction of data that was sampled to\n          create the histogram. The sampling-rate is\n          a number between 0.0 and 1.0. A value of 1 means that all of\n          the data was read (no sampling).\n        \n          The following example demonstrates sampling. To ensure that\n          the amount of data exceeds the\n          histogram_generation_max_mem_size\n          limit for the purpose of the example, the limit is set to a\n          low value (2000000 bytes) prior to generating histogram\n          statistics for the birth_date column of the\n          employees table.\n        Press CTRL+C to copy mysql> SET histogram_generation_max_mem_size = 2000000;\n\nmysql> USE employees;\n\nmysql> ANALYZE TABLE employees UPDATE HISTOGRAM ON birth_date WITH 16 BUCKETS\\G\n*************************** 1. row ***************************\n   Table: employees.employees\n      Op: histogram\nMsg_type: status\nMsg_text: Histogram statistics created for column 'birth_date'.\n\nmysql> SELECT HISTOGRAM->>'$.\"sampling-rate\"'\n       FROM INFORMATION_SCHEMA.COLUMN_STATISTICS\n       WHERE TABLE_NAME = \"employees\"\n       AND COLUMN_NAME = \"birth_date\";\n+---------------------------------+\n| HISTOGRAM->>'$.\"sampling-rate\"' |\n+---------------------------------+\n| 0.0491431208869665              |\n+---------------------------------+\n          A sampling-rate value of 0.0491431208869665\n          means that approximately 4.9% of the data from the\n          birth_date column was read into memory for\n          generating histogram statistics.\n        \n          The InnoDB storage engine\n          provides its own sampling implementation for data stored in\n          InnoDB tables. The default sampling\n          implementation used by MySQL when storage engines do not\n          provide their own requires a full table scan, which is costly\n          for large tables. The InnoDB sampling\n          implementation improves sampling performance by avoiding full\n          table scans.\n        \n          The sampled_pages_read and\n          sampled_pages_skipped\nINNODB_METRICS counters can be\n          used to monitor sampling of InnoDB data\n          pages. (For general\n          INNODB_METRICS counter usage\n          information, see\n          Section\u00a028.4.21, \u201cThe INFORMATION_SCHEMA INNODB_METRICS Table\u201d.)\n        \n          The following example demonstrates sampling counter usage,\n          which requires enabling the counters prior to generating\n          histogram statistics.\n        Press CTRL+C to copy mysql> SET GLOBAL innodb_monitor_enable = 'sampled%';\n\nmysql> USE employees;\n\nmysql> ANALYZE TABLE employees UPDATE HISTOGRAM ON birth_date WITH 16 BUCKETS\\G\n*************************** 1. row ***************************\n   Table: employees.employees\n      Op: histogram\nMsg_type: status\nMsg_text: Histogram statistics created for column 'birth_date'.\n\nmysql> USE INFORMATION_SCHEMA;\n\nmysql> SELECT NAME, COUNT FROM INNODB_METRICS WHERE NAME LIKE 'sampled%'\\G\n*************************** 1. row ***************************\n NAME: sampled_pages_read\nCOUNT: 43\n*************************** 2. row ***************************\n NAME: sampled_pages_skipped\nCOUNT: 843\n          This formula approximates a sampling rate based on the\n          sampling counter data:\n        Press CTRL+C to copy sampling rate = sampled_page_read/(sampled_pages_read + sampled_pages_skipped)\n          A sampling rate based on sampling counter data is roughly the\n          same as the sampling-rate value in the\n          HISTOGRAM column of the Information Schema\n          COLUMN_STATISTICS table.\n        \n          For information about memory allocations performed for\n          histogram generation, monitor the Performance Schema\n          memory/sql/histograms instrument. See\n          Section\u00a029.12.20.10, \u201cMemory Summary Tables\u201d.\n\n", "\n\n\n\nOther Considerations\n\n\n\n\nANALYZE TABLE clears table statistics from\n          the Information Schema\n          INNODB_TABLESTATS table and sets\n          the STATS_INITIALIZED column to\n          Uninitialized. Statistics are collected\n          again the next time the table is accessed.\n\n"], "Examples": ["ANALYZE TABLE t UPDATE HISTOGRAM ON c1, c2, c3 WITH 10 BUCKETS;\nANALYZE TABLE t UPDATE HISTOGRAM ON c1, c3 WITH 10 BUCKETS;\nANALYZE TABLE t DROP HISTOGRAM ON c2;", "mysql> ANALYZE TABLE t UPDATE HISTOGRAM ON c1;\n+-------+-----------+----------+-----------------------------------------------+\n| Table | Op        | Msg_type | Msg_text                                      |\n+-------+-----------+----------+-----------------------------------------------+\n| h.t   | histogram | status   | Histogram statistics created for column 'c1'. |\n+-------+-----------+----------+-----------------------------------------------+\n1 row in set (0.00 sec)", "mysql> ANALYZE TABLE t DROP HISTOGRAM ON c1;\n+-------+-----------+----------+-----------------------------------------------+\n| Table | Op        | Msg_type | Msg_text                                      |\n+-------+-----------+----------+-----------------------------------------------+\n| h.t   | histogram | status   | Histogram statistics removed for column 'c1'. |\n+-------+-----------+----------+-----------------------------------------------+\n1 row in set (0.01 sec)\n\nmysql> TABLE information_schema.column_statistics\\G\nEmpty set (0.00 sec)", "mysql> ANALYZE TABLE t UPDATE HISTOGRAM ON c1 \n    ->     USING DATA '{\"buckets\": [], \"data-type\": \"int\", \"auto-update\": false,\n    ->               \"null-values\": 0.0, \"collation-id\": 8, \"last-updated\": \"2024-03-26\n    ->               16:54:43.674995\", \"sampling-rate\": 1.0, \"histogram-type\": \"singleton\",\n    ->               \"number-of-buckets-specified\": 100}';   \n+-------+-----------+----------+-----------------------------------------------+\n| Table | Op        | Msg_type | Msg_text                                      |\n+-------+-----------+----------+-----------------------------------------------+\n| h.t   | histogram | status   | Histogram statistics created for column 'c1'. |\n+-------+-----------+----------+-----------------------------------------------+\n\nmysql> TABLE information_schema.column_statistics\\G\n*************************** 1. row ***************************\nSCHEMA_NAME: h\n TABLE_NAME: t\nCOLUMN_NAME: c1\n  HISTOGRAM: {\"buckets\": [], \"data-type\": \"int\", \"auto-update\": false,\n\"null-values\": 0.0, \"collation-id\": 8, \"last-updated\": \"2024-03-26\n16:54:43.674995\", \"sampling-rate\": 1.0, \"histogram-type\": \"singleton\",\n\"number-of-buckets-specified\": 100}", "mysql> SET histogram_generation_max_mem_size = 2000000;\n\nmysql> USE employees;\n\nmysql> ANALYZE TABLE employees UPDATE HISTOGRAM ON birth_date WITH 16 BUCKETS\\G\n*************************** 1. row ***************************\n   Table: employees.employees\n      Op: histogram\nMsg_type: status\nMsg_text: Histogram statistics created for column 'birth_date'.\n\nmysql> SELECT HISTOGRAM->>'$.\"sampling-rate\"'\n       FROM INFORMATION_SCHEMA.COLUMN_STATISTICS\n       WHERE TABLE_NAME = \"employees\"\n       AND COLUMN_NAME = \"birth_date\";\n+---------------------------------+\n| HISTOGRAM->>'$.\"sampling-rate\"' |\n+---------------------------------+\n| 0.0491431208869665              |\n+---------------------------------+", "mysql> SET GLOBAL innodb_monitor_enable = 'sampled%';\n\nmysql> USE employees;\n\nmysql> ANALYZE TABLE employees UPDATE HISTOGRAM ON birth_date WITH 16 BUCKETS\\G\n*************************** 1. row ***************************\n   Table: employees.employees\n      Op: histogram\nMsg_type: status\nMsg_text: Histogram statistics created for column 'birth_date'.\n\nmysql> USE INFORMATION_SCHEMA;\n\nmysql> SELECT NAME, COUNT FROM INNODB_METRICS WHERE NAME LIKE 'sampled%'\\G\n*************************** 1. row ***************************\n NAME: sampled_pages_read\nCOUNT: 43\n*************************** 2. row ***************************\n NAME: sampled_pages_skipped\nCOUNT: 843"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/check-table.html"], "Title": ["15.7.3.2 CHECK TABLE Statement"], "Feature": ["CHECK TABLE tbl_name [, tbl_name] ... [option] ...\n\noption: {\n    FOR UPGRADE\n  | QUICK\n  | FAST\n  | MEDIUM\n  | EXTENDED\n  | CHANGED\n}"], "Description": ["\nCHECK TABLE checks a table or\n        tables for errors. CHECK TABLE\n        can also check views for problems, such as tables that are\n        referenced in the view definition that no longer exist.\n      ", "\n        To check a table, you must have some privilege for it.\n      ", "\nCHECK TABLE works for\n        InnoDB,\n        MyISAM,\n        ARCHIVE, and\n        CSV tables.\n      ", "\n        Before running CHECK TABLE on\n        InnoDB tables, see\n        CHECK TABLE Usage Notes for InnoDB Tables.\n      ", "\nCHECK TABLE is supported for\n        partitioned tables, and you can use ALTER TABLE ...\n        CHECK PARTITION to check one or more partitions; for\n        more information, see Section\u00a015.1.9, \u201cALTER TABLE Statement\u201d, and\n        Section\u00a026.3.4, \u201cMaintenance of Partitions\u201d.\n      ", "\nCHECK TABLE ignores virtual\n        generated columns that are not indexed.\n", "\nCHECK TABLE OutputChecking Version CompatibilityChecking Data ConsistencyCHECK TABLE Usage Notes for InnoDB TablesCHECK TABLE Usage Notes for MyISAM Tables\n", "\n\n\n\nCHECK TABLE Output\n\n\n\n\nCHECK TABLE returns a result\n          set with the columns shown in the following table.\n\n\n\nColumn\nValue\n\nTable\nThe table name\n\nOp\nAlways check\n\nMsg_type\nstatus, error,\n                info, note, or\n                warning\n\nMsg_text\nAn informational message\n\n\n\n          The statement might produce many rows of information for each\n          checked table. The last row has a Msg_type\n          value of status and the\n          Msg_text normally should be\n          OK. Table is already up to\n          date means that the storage engine for the table\n          indicated that there was no need to check the table.\n\n", "\n\n\n\nChecking Version Compatibility\n\n\n\n\n          The FOR UPGRADE option checks whether the\n          named tables are compatible with the current version of MySQL.\n          With FOR UPGRADE, the server checks each\n          table to determine whether there have been any incompatible\n          changes in any of the table's data types or indexes since the\n          table was created. If not, the check succeeds. Otherwise, if\n          there is a possible incompatibility, the server runs a full\n          check on the table (which might take some time).\n        \n          Incompatibilities might occur because the storage format for a\n          data type has changed or because its sort order has changed.\n          Our aim is to avoid these changes, but occasionally they are\n          necessary to correct problems that would be worse than an\n          incompatibility between releases.\n        \nFOR UPGRADE discovers these\n          incompatibilities:\n\n\n\n              The indexing order for end-space in\n              TEXT columns for\n              InnoDB and MyISAM\n              tables changed between MySQL 4.1 and 5.0.\n            \n              The storage method of the new\n              DECIMAL data type changed\n              between MySQL 5.0.3 and 5.0.5.\n            \n              Changes are sometimes made to character sets or collations\n              that require table indexes to be rebuilt. For details\n              about such changes, see\n              Section\u00a03.5, \u201cChanges in MySQL 8.4\u201d. For\n              information about rebuilding tables, see\n              Section\u00a03.14, \u201cRebuilding or Repairing Tables or Indexes\u201d.\n            \n              MySQL 8.4 does not support the 2-digit\n              YEAR(2) data type permitted\n              in older versions of MySQL. For tables containing\n              YEAR(2) columns,\n              CHECK TABLE recommends\n              REPAIR TABLE, which\n              converts 2-digit YEAR(2)\n              columns to 4-digit YEAR\n              columns.\n            \n              Trigger creation time is maintained.\n            \n              A table is reported as needing a rebuild if it contains\n              old temporal columns in pre-5.6.4 format\n              (TIME,\n              DATETIME, and\n              TIMESTAMP columns without\n              support for fractional seconds precision). This helps the\n              MySQL upgrade procedure detect and upgrade tables\n              containing old temporal columns.\n            \n              Warnings are issued for tables that use nonnative\n              partitioning because nonnative partitioning is removed in\n              MySQL 8.4. See\n              Chapter\u00a026, Partitioning.\n\n\n", "\n\n\n\nChecking Data Consistency\n\n\n\n\n          The following table shows the other check options that can be\n          given. These options are passed to the storage engine, which\n          may use or ignore them.\n\n\n\nType\nMeaning\n\nQUICK\nDo not scan the rows to check for incorrect links. Applies to\n                InnoDB and MyISAM\n                tables and views.\n\nFAST\nCheck only tables that have not been closed properly. Ignored for\n                InnoDB; applies only to\n                MyISAM tables and views.\n\nCHANGED\nCheck only tables that have been changed since the last check or that\n                have not been closed properly. Ignored for\n                InnoDB; applies only to\n                MyISAM tables and views.\n\nMEDIUM\nScan rows to verify that deleted links are valid. This also calculates a\n                key checksum for the rows and verifies this with a\n                calculated checksum for the keys. Ignored for\n                InnoDB; applies only to\n                MyISAM tables and views.\n\nEXTENDED\nDo a full key lookup for all keys for each row. This ensures that the\n                table is 100% consistent, but takes a long time. Ignored\n                for InnoDB; applies only to\n                MyISAM tables and views.\n\n\n\n          You can combine check options, as in the following example\n          that does a quick check on the table to determine whether it\n          was closed properly:\n        Press CTRL+C to copy CHECK TABLE test_table FAST QUICK;\n\n\nNote\n\n\n            If CHECK TABLE finds no\n            problems with a table that is marked as\n            \u201ccorrupted\u201d or \u201cnot closed\n            properly\u201d, CHECK TABLE\n            may remove the mark.\n\n\n\n          If a table is corrupted, the problem is most likely in the\n          indexes and not in the data part. All of the preceding check\n          types check the indexes thoroughly and should thus find most\n          errors.\n        \n          To check a table that you assume is okay, use no check options\n          or the QUICK option. The latter should be\n          used when you are in a hurry and can take the very small risk\n          that QUICK does not find an error in the\n          data file. (In most cases, under normal usage, MySQL should\n          find any error in the data file. If this happens, the table is\n          marked as \u201ccorrupted\u201d and cannot be used until it\n          is repaired.)\n        \nFAST and CHANGED are\n          mostly intended to be used from a script (for example, to be\n          executed from cron) to check tables\n          periodically. In most cases, FAST is to be\n          preferred over CHANGED. (The only case when\n          it is not preferred is when you suspect that you have found a\n          bug in the MyISAM code.)\n        \nEXTENDED is to be used only after you have\n          run a normal check but still get errors from a table when\n          MySQL tries to update a row or find a row by key. This is very\n          unlikely if a normal check has succeeded.\n        \n          Use of CHECK\n          TABLE ... EXTENDED might influence execution plans\n          generated by the query optimizer.\n        \n          Some problems reported by CHECK\n          TABLE cannot be corrected automatically:\n\n\n\nFound row where the auto_increment column has the\n              value 0.\n            \n              This means that you have a row in the table where the\n              AUTO_INCREMENT index column contains\n              the value 0. (It is possible to create a row where the\n              AUTO_INCREMENT column is 0 by\n              explicitly setting the column to 0 with an\n              UPDATE statement.)\n            \n              This is not an error in itself, but could cause trouble if\n              you decide to dump the table and restore it or do an\n              ALTER TABLE on the table.\n              In this case, the AUTO_INCREMENT column\n              changes value according to the rules of\n              AUTO_INCREMENT columns, which could\n              cause problems such as a duplicate-key error.\n            \n              To get rid of the warning, execute an\n              UPDATE statement to set the\n              column to some value other than 0.\n\n\n", "\n\n\n\nCHECK TABLE Usage Notes for InnoDB Tables\n\n\n\n\n          The following notes apply to\n          InnoDB tables:\n\n\n\n              If CHECK TABLE encounters a\n              corrupt page, the server exits to prevent error\n              propagation (Bug #10132). If the corruption occurs in a\n              secondary index but table data is readable, running\n              CHECK TABLE can still cause\n              a server exit.\n            \n              If CHECK TABLE encounters a\n              corrupted DB_TRX_ID or\n              DB_ROLL_PTR field in a clustered index,\n              CHECK TABLE can cause\n              InnoDB to access an invalid undo log\n              record, resulting in an\n              MVCC-related server exit.\n            \n              If CHECK TABLE encounters\n              errors in InnoDB tables or indexes, it\n              reports an error, and usually marks the index and\n              sometimes marks the table as corrupted, preventing further\n              use of the index or table. Such errors include an\n              incorrect number of entries in a secondary index or\n              incorrect links.\n            \n              If CHECK TABLE finds an\n              incorrect number of entries in a secondary index, it\n              reports an error but does not cause a server exit or\n              prevent access to the file.\n            \nCHECK TABLE surveys the\n              index page structure, then surveys each key entry. It does\n              not validate the key pointer to a clustered record or\n              follow the path for BLOB\n              pointers.\n            \n              When an InnoDB table is stored in its\n              own\n              .ibd\n              file, the first 3\n              pages of the\n              .ibd file contain header information\n              rather than table or index data. The\n              CHECK TABLE statement does\n              not detect inconsistencies that affect only the header\n              data. To verify the entire contents of an\n              InnoDB .ibd file,\n              use the innochecksum command.\n            \n              When running CHECK TABLE on\n              large InnoDB tables, other threads may\n              be blocked during CHECK\n              TABLE execution. To avoid timeouts, the\n              semaphore wait threshold (600 seconds) is extended by 2\n              hours (7200 seconds) for CHECK\n              TABLE operations. If InnoDB\n              detects semaphore waits of 240 seconds or more, it starts\n              printing InnoDB monitor output to the\n              error log. If a lock request extends beyond the semaphore\n              wait threshold, InnoDB aborts the\n              process. To avoid the possibility of a semaphore wait\n              timeout entirely, run\n              CHECK TABLE\n              QUICK instead of CHECK\n              TABLE.\n            \nCHECK TABLE functionality\n              for InnoDB SPATIAL\n              indexes includes an R-tree validity check and a check to\n              ensure that the R-tree row count matches the clustered\n              index.\n            \nCHECK TABLE supports\n              secondary indexes on virtual generated columns, which are\n              supported by InnoDB.\n            \nInnoDB supports parallel\n              clustered index reads, which can improve\n              CHECK TABLE performance.\n              InnoDB reads the clustered index twice\n              during a CHECK TABLE\n              operation. The second read can be performed in parallel.\n              The\n              innodb_parallel_read_threads\n              session variable must be set to a value greater than 1 for\n              parallel clustered index reads to occur. The actual number\n              of threads used to perform a parallel clustered index read\n              is determined by the\n              innodb_parallel_read_threads\n              setting or the number of index subtrees to scan, whichever\n              is smaller.\n\n\n", "\n\n\n\nCHECK TABLE Usage Notes for MyISAM Tables\n\n\n\n\n          The following notes apply to\n          MyISAM tables:\n\n\n\nCHECK TABLE updates key\n              statistics for MyISAM tables.\n            \n              If CHECK TABLE output does\n              not return OK or Table is\n              already up to date, you should normally run a\n              repair of the table. See\n              Section\u00a09.6, \u201cMyISAM Table Maintenance and Crash Recovery\u201d.\n            \n              If none of the CHECK TABLE\n              options QUICK,\n              MEDIUM, or EXTENDED\n              are specified, the default check type for dynamic-format\n              MyISAM tables is\n              MEDIUM. This has the same result as\n              running myisamchk --medium-check\n              tbl_name on the\n              table. The default check type also is\n              MEDIUM for static-format\n              MyISAM tables, unless\n              CHANGED or FAST is\n              specified. In that case, the default is\n              QUICK. The row scan is skipped for\n              CHANGED and FAST\n              because the rows are very seldom corrupted.\n\n\n"], "Examples": ["CHECK TABLE test_table FAST QUICK;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/checksum-table.html"], "Title": ["15.7.3.3 CHECKSUM TABLE Statement"], "Feature": ["CHECKSUM TABLE tbl_name [, tbl_name] ... [QUICK | EXTENDED]"], "Description": ["\nCHECKSUM TABLE reports a\n        checksum for the contents\n        of a table. You can use this statement to verify that the\n        contents are the same before and after a backup, rollback, or\n        other operation that is intended to put the data back to a known\n        state.\n      ", "\n        This statement requires the\n        SELECT privilege for the table.\n      ", "\n        This statement is not supported for views. If you run\n        CHECKSUM TABLE against a view,\n        the Checksum value is always\n        NULL, and a warning is returned.\n      ", "\n        For a nonexistent table, CHECKSUM\n        TABLE returns NULL and generates a\n        warning.\n      ", "\n        During the checksum operation, the table is locked with a read\n        lock for InnoDB and\n        MyISAM.\n", "\n\n\n\nPerformance Considerations\n\n\n\n\n          By default, the entire table is read row by row and the\n          checksum is calculated. For large tables, this could take a\n          long time, thus you would only perform this operation\n          occasionally. This row-by-row calculation is what you get with\n          the EXTENDED clause, with\n          InnoDB and all other storage engines other\n          than MyISAM, and with\n          MyISAM tables not created with the\n          CHECKSUM=1 clause.\n        \n          For MyISAM tables created with the\n          CHECKSUM=1 clause,\n          CHECKSUM TABLE or\n          CHECKSUM TABLE\n          ... QUICK returns the \u201clive\u201d table\n          checksum that can be returned very fast. If the table does not\n          meet all these conditions, the QUICK method\n          returns NULL. The QUICK\n          method is not supported with InnoDB tables.\n          See Section\u00a015.1.20, \u201cCREATE TABLE Statement\u201d for the syntax of the\n          CHECKSUM clause.\n        \n          The checksum value depends on the table row format. If the row\n          format changes, the checksum also changes. For example, the\n          storage format for temporal types such as\n          TIME,\n          DATETIME, and\n          TIMESTAMP changed in MySQL 5.6\n          prior to MySQL 5.6.5, so if a 5.5 table is upgraded to MySQL\n          5.6, the checksum value may change.\n\n\n\nImportant\n\n\n            If the checksums for two tables are different, then it is\n            almost certain that the tables are different in some way.\n            However, because the hashing function used by\n            CHECKSUM TABLE is not\n            guaranteed to be collision-free, there is a slight chance\n            that two tables which are not identical can produce the same\n            checksum.\n\n\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/optimize-table.html"], "Title": ["15.7.3.4 OPTIMIZE TABLE Statement"], "Feature": ["OPTIMIZE [NO_WRITE_TO_BINLOG | LOCAL]\n    TABLE tbl_name [, tbl_name] ..."], "Description": ["\nOPTIMIZE TABLE reorganizes the\n        physical storage of table data and associated index data, to\n        reduce storage space and improve I/O efficiency when accessing\n        the table. The exact changes made to each table depend on the\n        storage engine used\n        by that table.\n      ", "\n        Use OPTIMIZE TABLE in these\n        cases, depending on the type of table:\n", "\n\n            After doing substantial insert, update, or delete operations\n            on an InnoDB table that has its own\n            .ibd file because it\n            was created with the\n            innodb_file_per_table\n            option enabled. The table and indexes are reorganized, and\n            disk space can be reclaimed for use by the operating system.\n          \n            After doing substantial insert, update, or delete operations\n            on columns that are part of a FULLTEXT\n            index in an InnoDB table. Set the\n            configuration option\n            innodb_optimize_fulltext_only=1\n            first. To keep the index maintenance period to a reasonable\n            time, set the\n            innodb_ft_num_word_optimize\n            option to specify how many words to update in the search\n            index, and run a sequence of OPTIMIZE\n            TABLE statements until the search index is fully\n            updated.\n          \n            After deleting a large part of a MyISAM\n            or ARCHIVE table, or making many changes\n            to a MyISAM or ARCHIVE\n            table with variable-length rows (tables that have\n            VARCHAR,\n            VARBINARY,\n            BLOB, or\n            TEXT columns). Deleted rows\n            are maintained in a linked list and subsequent\n            INSERT operations reuse old\n            row positions. You can use OPTIMIZE\n            TABLE to reclaim the unused space and to\n            defragment the data file. After extensive changes to a\n            table, this statement may also improve performance of\n            statements that use the table, sometimes significantly.\n\n", "\n        This statement requires SELECT\n        and INSERT privileges for the\n        table.\n      ", "\nOPTIMIZE TABLE works for\n        InnoDB,\n        MyISAM, and\n        ARCHIVE tables.\n        OPTIMIZE TABLE is also supported\n        for dynamic columns of in-memory\n        NDB tables. It does not work for\n        fixed-width columns of in-memory tables, nor does it work for\n        Disk Data tables. The performance of OPTIMIZE\n        on NDB Cluster tables can be tuned using\n        --ndb-optimization-delay, which\n        controls the length of time to wait between processing batches\n        of rows by OPTIMIZE TABLE. For\n        more information, see\n        Section\u00a025.2.7.11, \u201cPrevious NDB Cluster Issues Resolved in NDB Cluster 8.4\u201d.\n      ", "\n        For NDB Cluster tables, OPTIMIZE\n        TABLE can be interrupted by (for example) killing the\n        SQL thread performing the OPTIMIZE operation.\n      ", "\n        By default, OPTIMIZE TABLE does\n        not work for tables created using any other\n        storage engine and returns a result indicating this lack of\n        support. You can make OPTIMIZE\n        TABLE work for other storage engines by starting\n        mysqld with the\n        --skip-new option. In this case,\n        OPTIMIZE TABLE is just mapped to\n        ALTER TABLE.\n      ", "\n        This statement does not work with views.\n      ", "\nOPTIMIZE TABLE is supported for\n        partitioned tables. For information about using this statement\n        with partitioned tables and table partitions, see\n        Section\u00a026.3.4, \u201cMaintenance of Partitions\u201d.\n      ", "\n        By default, the server writes OPTIMIZE\n        TABLE statements to the binary log so that they\n        replicate to replicas. To suppress logging, specify the optional\n        NO_WRITE_TO_BINLOG keyword or its alias\n        LOCAL. You must have the\n        OPTIMIZE_LOCAL_TABLE privilege to\n        use this option.\n", "\nOPTIMIZE TABLE OutputInnoDB DetailsMyISAM DetailsOther Considerations\n", "\n\n\n\nOPTIMIZE TABLE Output\n\n\n\n\nOPTIMIZE TABLE returns a result\n          set with the columns shown in the following table.\n\n\n\nColumn\nValue\n\nTable\nThe table name\n\nOp\nAlways optimize\n\nMsg_type\nstatus, error,\n                info, note, or\n                warning\n\nMsg_text\nAn informational message\n\n\n\nOPTIMIZE TABLE table catches\n          and throws any errors that occur while copying table\n          statistics from the old file to the newly created file. For\n          example. if the user ID of the owner of the\n          .MYD or .MYI file is\n          different from the user ID of the mysqld\n          process, OPTIMIZE TABLE\n          generates a \"cannot change ownership of the file\" error unless\n          mysqld is started by the\n          root user.\n\n", "\n\n\n\nInnoDB Details\n\n\n\n\n          For InnoDB tables,\n          OPTIMIZE TABLE is mapped to\n          ALTER TABLE ...\n          FORCE, which rebuilds the table to update index\n          statistics and free unused space in the clustered index. This\n          is displayed in the output of OPTIMIZE\n          TABLE when you run it on an\n          InnoDB table, as shown here:\n        Press CTRL+C to copy mysql> OPTIMIZE TABLE foo;\n+----------+----------+----------+-------------------------------------------------------------------+\n| Table    | Op       | Msg_type | Msg_text                                                          |\n+----------+----------+----------+-------------------------------------------------------------------+\n| test.foo | optimize | note     | Table does not support optimize, doing recreate + analyze instead |\n| test.foo | optimize | status   | OK                                                                |\n+----------+----------+----------+-------------------------------------------------------------------+\nOPTIMIZE TABLE uses\n          online DDL for\n          regular and partitioned InnoDB tables,\n          which reduces downtime for concurrent DML operations. The\n          table rebuild triggered by OPTIMIZE\n          TABLE is completed in place. An exclusive table lock\n          is only taken briefly during the prepare phase and the commit\n          phase of the operation. During the prepare phase, metadata is\n          updated and an intermediate table is created. During the\n          commit phase, table metadata changes are committed.\n        \nOPTIMIZE TABLE rebuilds the\n          table using the table copy method under the following\n          conditions:\n\n\n\n              When the old_alter_table\n              system variable is enabled.\n            \n              When the server is started with the\n              --skip-new option.\n\n\n\nOPTIMIZE TABLE using\n          online DDL is not\n          supported for InnoDB tables that contain\n          FULLTEXT indexes. The table copy method is\n          used instead.\n        \nInnoDB stores data using a page-allocation\n          method and does not suffer from fragmentation in the same way\n          that legacy storage engines (such as\n          MyISAM) do. When considering whether or not\n          to run optimize, consider the workload of transactions that\n          your server is expected to process:\n\n\n\n\n                Some level of fragmentation is expected.\n                InnoDB only fills\n                pages 93% full, to\n                leave room for updates without having to split pages.\n              \n                Delete operations might leave gaps that leave pages less\n                filled than desired, which could make it worthwhile to\n                optimize the table.\n              \n                Updates to rows usually rewrite the data within the same\n                page, depending on the data type and row format, when\n                sufficient space is available. See\n                Section\u00a017.9.1.5, \u201cHow Compression Works for InnoDB Tables\u201d and\n                Section\u00a017.10, \u201cInnoDB Row Formats\u201d.\n              \n                High-concurrency workloads might leave gaps in indexes\n                over time, as InnoDB retains multiple\n                versions of the same data due through its\n                MVCC mechanism. See\n                Section\u00a017.3, \u201cInnoDB Multi-Versioning\u201d.\n\n\n\n\n", "\n\n\n\nMyISAM Details\n\n\n\n\n          For MyISAM tables,\n          OPTIMIZE TABLE works as\n          follows:\n\n\n\n              If the table has deleted or split rows, repair the table.\n            \n              If the index pages are not sorted, sort them.\n            \n              If the table's statistics are not up to date (and the\n              repair could not be accomplished by sorting the index),\n              update them.\n\n\n", "\n\n\n\nOther Considerations\n\n\n\n\nOPTIMIZE TABLE is performed\n          online for regular and partitioned InnoDB\n          tables. Otherwise, MySQL locks\n          the table during the time OPTIMIZE\n          TABLE is running.\n        \nOPTIMIZE TABLE does not sort\n          R-tree indexes, such as spatial indexes on\n          POINT columns. (Bug #23578)\n\n"], "Examples": ["mysql> OPTIMIZE TABLE foo;\n+----------+----------+----------+-------------------------------------------------------------------+\n| Table    | Op       | Msg_type | Msg_text                                                          |\n+----------+----------+----------+-------------------------------------------------------------------+\n| test.foo | optimize | note     | Table does not support optimize, doing recreate + analyze instead |\n| test.foo | optimize | status   | OK                                                                |\n+----------+----------+----------+-------------------------------------------------------------------+"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/repair-table.html"], "Title": ["15.7.3.5 REPAIR TABLE Statement"], "Feature": ["REPAIR [NO_WRITE_TO_BINLOG | LOCAL]\n    TABLE tbl_name [, tbl_name] ...\n    [QUICK] [EXTENDED] [USE_FRM]"], "Description": ["\nREPAIR TABLE repairs a possibly\n        corrupted table, for certain storage engines only.\n      ", "\n        This statement requires SELECT\n        and INSERT privileges for the\n        table.\n      ", "\n        Although normally you should never have to run\n        REPAIR TABLE, if disaster\n        strikes, this statement is very likely to get back all your data\n        from a MyISAM table. If your tables become\n        corrupted often, try to find the reason for it, to eliminate the\n        need to use REPAIR TABLE. See\n        Section\u00a0B.3.3.3, \u201cWhat to Do If MySQL Keeps Crashing\u201d, and\n        Section\u00a018.2.4, \u201cMyISAM Table Problems\u201d.\n      ", "\nREPAIR TABLE checks the table to\n        see whether an upgrade is required. If so, it performs the\n        upgrade, following the same rules as\n        CHECK TABLE ... FOR\n        UPGRADE. See Section\u00a015.7.3.2, \u201cCHECK TABLE Statement\u201d, for more\n        information.\n", "\n\nImportant\n\n\n\n              Make a backup of a table before performing a table repair\n              operation; under some circumstances the operation might\n              cause data loss. Possible causes include but are not\n              limited to file system errors. See\n              Chapter\u00a09, Backup and Recovery.\n            \n              If the server exits during a REPAIR\n              TABLE operation, it is essential after\n              restarting it that you immediately execute another\n              REPAIR TABLE statement for\n              the table before performing any other operations on it. In\n              the worst case, you might have a new clean index file\n              without information about the data file, and then the next\n              operation you perform could overwrite the data file. This\n              is an unlikely but possible scenario that underscores the\n              value of making a backup first.\n            \n              In the event that a table on the source becomes corrupted\n              and you run REPAIR TABLE on\n              it, any resulting changes to the original table are\n              not propagated to replicas.\n\n\n", "\nREPAIR TABLE Storage Engine and Partitioning SupportREPAIR TABLE OptionsREPAIR TABLE OutputTable Repair Considerations\n", "\n\n\n\nREPAIR TABLE Storage Engine and Partitioning Support\n\n\n\n\nREPAIR TABLE works for\n          MyISAM,\n          ARCHIVE, and\n          CSV tables. For\n          MyISAM tables, it has the same\n          effect as myisamchk --recover\n          tbl_name by default. This\n          statement does not work with views.\n        \nREPAIR TABLE is supported for\n          partitioned tables. However, the USE_FRM\n          option cannot be used with this statement on a partitioned\n          table.\n        \n          You can use ALTER TABLE ... REPAIR\n          PARTITION to repair one or more partitions; for more\n          information, see Section\u00a015.1.9, \u201cALTER TABLE Statement\u201d, and\n          Section\u00a026.3.4, \u201cMaintenance of Partitions\u201d.\n\n", "\n\n\n\nREPAIR TABLE Options\n\n\n\n\n\n\nNO_WRITE_TO_BINLOG or\n              LOCAL\n\n              By default, the server writes REPAIR\n              TABLE statements to the binary log so that they\n              replicate to replicas. To suppress logging, specify the\n              optional NO_WRITE_TO_BINLOG keyword or\n              its alias LOCAL.\n            \nQUICK\n\n              If you use the QUICK option,\n              REPAIR TABLE tries to\n              repair only the index file, and not the data file. This\n              type of repair is like that done by myisamchk\n              --recover --quick.\n            \nEXTENDED\n\n              If you use the EXTENDED option, MySQL\n              creates the index row by row instead of creating one index\n              at a time with sorting. This type of repair is like that\n              done by myisamchk --safe-recover.\n            \nUSE_FRM\n\n              The USE_FRM option is available for use\n              if the .MYI index file is missing or\n              if its header is corrupted. This option tells MySQL not to\n              trust the information in the .MYI\n              file header and to re-create it using information from the\n              data dictionary. This kind of repair cannot be done with\n              myisamchk.\n\n\n\nCaution\n\n\n                Use the USE_FRM option\n                only if you cannot use regular\n                REPAIR modes. Telling the server to\n                ignore the .MYI file makes\n                important table metadata stored in the\n                .MYI unavailable to the repair\n                process, which can have deleterious consequences:\n\n\n\n                    The current AUTO_INCREMENT value\n                    is lost.\n                  \n                    The link to deleted records in the table is lost,\n                    which means that free space for deleted records\n                    remains unoccupied thereafter.\n                  \n                    The .MYI header indicates\n                    whether the table is compressed. If the server\n                    ignores this information, it cannot tell that a\n                    table is compressed and repair can cause change or\n                    loss of table contents. This means that\n                    USE_FRM should not be used with\n                    compressed tables. That should not be necessary,\n                    anyway: Compressed tables are read only, so they\n                    should not become corrupt.\n\n\n\n                If you use USE_FRM for a table that\n                was created by a different version of the MySQL server\n                than the one you are currently running,\n                REPAIR TABLE does not\n                attempt to repair the table. In this case, the result\n                set returned by REPAIR\n                TABLE contains a line with a\n                Msg_type value of\n                error and a\n                Msg_text value of Failed\n                repairing incompatible .FRM file.\n              \n                If USE_FRM is used,\n                REPAIR TABLE does not\n                check the table to see whether an upgrade is required.\n\n\n\n\n", "\n\n\n\nREPAIR TABLE Output\n\n\n\n\nREPAIR TABLE returns a result\n          set with the columns shown in the following table.\n\n\n\nColumn\nValue\n\nTable\nThe table name\n\nOp\nAlways repair\n\nMsg_type\nstatus, error,\n                info, note, or\n                warning\n\nMsg_text\nAn informational message\n\n\n\n          The REPAIR TABLE statement\n          might produce many rows of information for each repaired\n          table. The last row has a Msg_type value of\n          status and Msg_test\n          normally should be OK. For a\n          MyISAM table, if you do not get\n          OK, you should try repairing it with\n          myisamchk --safe-recover.\n          (REPAIR TABLE does not\n          implement all the options of myisamchk.\n          With myisamchk --safe-recover, you can also\n          use options that REPAIR TABLE\n          does not support, such as\n          --max-record-length.)\n        \nREPAIR TABLE table catches and\n          throws any errors that occur while copying table statistics\n          from the old corrupted file to the newly created file. For\n          example. if the user ID of the owner of the\n          .MYD or .MYI file is\n          different from the user ID of the mysqld\n          process, REPAIR TABLE generates\n          a \"cannot change ownership of the file\" error unless\n          mysqld is started by the\n          root user.\n\n", "\n\n\n\nTable Repair Considerations\n\n\n\n\n          You may be able to increase REPAIR\n          TABLE performance by setting certain system\n          variables. See Section\u00a010.6.3, \u201cOptimizing REPAIR TABLE Statements\u201d.\n        \nREPAIR TABLE upgrades a table\n          if it contains old temporal columns in pre-5.6.4 format;\n          namely, the TIME,\n          DATETIME, and\n          TIMESTAMP columns that lacked\n          support for fractional seconds precision.\n\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-function-loadable.html"], "Title": ["15.7.4.1 CREATE FUNCTION Statement for Loadable Functions"], "Feature": ["CREATE [AGGREGATE] FUNCTION [IF NOT EXISTS] function_name\n    RETURNS {STRING|INTEGER|REAL|DECIMAL}\n    SONAME shared_library_name"], "Description": ["\n        This statement loads the loadable function named\n        function_name. (CREATE\n        FUNCTION is also used to created stored functions; see\n        Section\u00a015.1.17, \u201cCREATE PROCEDURE and CREATE FUNCTION Statements\u201d.)\n      ", "\n        A loadable function is a way to extend MySQL with a new function\n        that works like a native (built-in) MySQL function such as\n        ABS() or\n        CONCAT(). See\n        Adding a Loadable Function.\n      ", "\nfunction_name is the name that should\n        be used in SQL statements to invoke the function. The\n        RETURNS clause indicates the type of the\n        function's return value. DECIMAL is a legal\n        value after RETURNS, but currently\n        DECIMAL functions return string values and\n        should be written like STRING functions.\n      ", "\nIF NOT EXISTS prevents an error from\n        occurring if there already exists a loadable function with the\n        same name. It does not prevent an error\n        from occurring if there already exists a built-in function\n        having the same name. IF NOT EXISTS is also\n        supported for CREATE FUNCTION statements. See\n        Function Name Resolution.\n      ", "\n        The AGGREGATE keyword, if given, signifies\n        that the function is an aggregate (group) function. An aggregate\n        function works exactly like a native MySQL aggregate function\n        such as SUM() or\n        COUNT().\n      ", "\nshared_library_name is the base name\n        of the shared library file containing the code that implements\n        the function. The file must be located in the plugin directory.\n        This directory is given by the value of the\n        plugin_dir system variable. For\n        more information, see Section\u00a07.7.1, \u201cInstalling and Uninstalling Loadable Functions\u201d.\n      ", "\nCREATE\n        FUNCTION requires the\n        INSERT privilege for the\n        mysql system schema because it adds a row to\n        the mysql.func system table to register the\n        function.\n      ", "\nCREATE\n        FUNCTION also adds the function to the Performance\n        Schema user_defined_functions table\n        that provides runtime information about installed loadable\n        functions. See\n        Section\u00a029.12.22.10, \u201cThe user_defined_functions Table\u201d.\n", "\n\nNote\n\n\n          Like the mysql.func system table, the\n          Performance Schema\n          user_defined_functions table\n          lists loadable functions installed using\n          CREATE\n          FUNCTION. Unlike the mysql.func\n          table, the user_defined_functions\n          table also lists loadable functions installed automatically by\n          server components or plugins. This difference makes\n          user_defined_functions preferable\n          to mysql.func for checking which loadable\n          functions are installed.\n\n", "\n        During the normal startup sequence, the server loads functions\n        registered in the mysql.func table. If the\n        server is started with the\n        --skip-grant-tables option,\n        functions registered in the table are not loaded and are\n        unavailable.\n", "\n\nNote\n\n\n          To upgrade the shared library associated with a loadable\n          function, issue a\n          DROP\n          FUNCTION statement, upgrade the shared library, and\n          then issue a\n          CREATE\n          FUNCTION statement. If you upgrade the shared\n          library first and then use\n          DROP\n          FUNCTION, the server may unexpectedly shut down.\n\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-function-loadable.html"], "Title": ["15.7.4.2 DROP FUNCTION Statement for Loadable Functions"], "Feature": ["DROP FUNCTION [IF EXISTS] function_name"], "Description": ["\n        This statement drops the loadable function named\n        function_name. (DROP\n        FUNCTION is also used to drop stored functions; see\n        Section\u00a015.1.29, \u201cDROP PROCEDURE and DROP FUNCTION Statements\u201d.)\n      ", "\nDROP\n        FUNCTION is the complement of\n        CREATE\n        FUNCTION. It requires the\n        DELETE privilege for the\n        mysql system schema because it removes the\n        row from the mysql.func system table that\n        registers the function.\n      ", "\nDROP\n        FUNCTION also removes the function from the\n        Performance Schema\n        user_defined_functions table that\n        provides runtime information about installed loadable functions.\n        See\n        Section\u00a029.12.22.10, \u201cThe user_defined_functions Table\u201d.\n      ", "\n        During the normal startup sequence, the server loads functions\n        registered in the mysql.func table. Because\n        DROP\n        FUNCTION removes the mysql.func row\n        for the dropped function, the server does not load the function\n        during subsequent restarts.\n      ", "\nDROP\n        FUNCTION cannot be used to drop a loadable function\n        that is installed automatically by components or plugins rather\n        than by using\n        CREATE\n        FUNCTION. Such a function is also dropped\n        automatically, when the component or plugin that installed it is\n        uninstalled.\n", "\n\nNote\n\n\n          To upgrade the shared library associated with a loadable\n          function, issue a\n          DROP\n          FUNCTION statement, upgrade the shared library, and\n          then issue a\n          CREATE\n          FUNCTION statement. If you upgrade the shared\n          library first and then use\n          DROP\n          FUNCTION, the server may unexpectedly shut down.\n\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/install-component.html"], "Title": ["15.7.4.3 INSTALL COMPONENT Statement"], "Feature": ["INSTALL COMPONENT component_name  [, component_name ...\n     [SET variable = expr [, variable = expr] ...] \n  \n  variable: {\n    {GLOBAL | @@GLOBAL.} [component_prefix.]system_var_name\n  | {PERSIST | @@PERSIST.} [component_prefix.]system_var_name\n}"], "Description": ["\n        This statement installs one or more components, which become\n        active immediately. A component provides services that are\n        available to the server and other components; see\n        Section\u00a07.5, \u201cMySQL Components\u201d. INSTALL\n        COMPONENT requires the\n        INSERT privilege for the\n        mysql.component system table because it adds\n        a row to that table to register the component.\n      ", "\n        Example:\n      ", "Press CTRL+C to copy INSTALL COMPONENT 'file://component1', 'file://component2';", "\n        A component is named using a URN that begins with\n        file:// and indicates the base name of the\n        library file that implements the component, located in the\n        directory named by the\n        plugin_dir system variable.\n        Component names do not include any platform-dependent file name\n        suffix such as .so or\n        .dll. (These naming details are subject to\n        change because component name interpretation is itself performed\n        by a service and the component infrastructure makes it possible\n        to replace the default service implementation with alternative\n        implementations.)\n      ", "\nINSTALL COMPONENT permits setting\n        the values of component system variables when you install one or\n        more components. The SET clause enables you\n        to specify variable values precisely when they are needed,\n        without the inconvenience or limitations associated with other\n        forms of assignment. Specifically, you can also set component\n        variables with these alternatives:\n", "\n\n            At server startup using options on the command line or in an\n            option file, but doing so involves a server restart. The\n            values do not take effect until you install the component.\n            You can specify an invalid variable name for a component on\n            the command line without triggering an error.\n          \n            Dynamically while the server is running by means of the\n            SET statement, which enables\n            you to modify operation of the server without having to stop\n            and restart it. Setting a read-only variable is not\n            permitted.\n\n", "\n        The optional SET clause applies a value, or\n        values, only to the component specified in the\n        INSTALL COMPONENT statement,\n        rather than to all subsequent installations of that component.\n        SET GLOBAL|PERSIST works for all types of\n        variables, including read-only variables, without having to\n        restart the server. A component system variable that you set\n        using INSTALL COMPONENT takes\n        precedence over any conflicting value coming from the command\n        line or an option file.\n      ", "\n        Example:\n      ", "Press CTRL+C to copy INSTALL COMPONENT 'file://component1', 'file://component2' \n    SET GLOBAL component1.var1 = 12 + 3, PERSIST component2.var2 = 'strings';", "\n        Omitting PERSIST or GLOBAL\n        is equivalent to specifying GLOBAL.\n      ", "\n        Specifying PERSIST for any variable in\n        SET silently executes SET\n        PERSIST_ONLY immediately after\n        INSTALL COMPONENT loads the\n        components, but before updating the\n        mysql.component table. If SET\n        PERSIST_ONLY fails, then the server unloads all of the\n        previously loaded new components without persisting anything to\n        mysql.component.\n      ", "\n        The SET clause accepts only valid variable\n        names of the component being installed and emits an error\n        message for all invalid names. Subqueries, stored functions, and\n        aggregate functions are not permitted as part of the value\n        expression. If you install a single component, it is not\n        necessary to prefix the variable name with the component name.\n", "\n\nNote\n\n\n          While specifying a variable value using the\n          SET clause is similar to that of the\n          command line\u2014it is available immediately at variable\n          registration\u2014there is a distinct difference in how the\n          SET clause handles invalid\n          numerical values for boolean variables. For\n          example, if you set a boolean variable to 11\n          (component1.boolvar = 11), you see the\n          following behavior:\n\n\n\nSET clause yields true\n            \n              Command line yields false (11 is neither ON nor 1)\n\n\n", "\n        If any error occurs, the statement fails and has no effect. For\n        example, this happens if a component name is erroneous, a named\n        component does not exist or is already installed, or component\n        initialization fails.\n      ", "\n        A loader service handles component loading, which includes\n        adding installed components to the\n        mysql.component system table that serves as a\n        registry. For subsequent server restarts, any components listed\n        in mysql.component are loaded by the loader\n        service during the startup sequence. This occurs even if the\n        server is started with the\n        --skip-grant-tables option.\n      ", "\n        If a component depends on services not present in the registry\n        and you attempt to install the component without also installing\n        the component or components that provide the services on which\n        it depends, an error occurs:\n      ", "\n        To avoid this problem, either install all components in the same\n        statement, or install the dependent component after installing\n        any components on which it depends.\n", "\n\nNote\n\n\n          For keyring components, do not use\n          INSTALL COMPONENT. Instead,\n          configure keyring component loading using a manifest file. See\n          Section\u00a08.4.4.2, \u201cKeyring Component Installation\u201d.\n\n"], "Examples": ["INSTALL COMPONENT 'file://component1', 'file://component2';", "INSTALL COMPONENT 'file://component1', 'file://component2' \n    SET GLOBAL component1.var1 = 12 + 3, PERSIST component2.var2 = 'strings';"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/install-plugin.html"], "Title": ["15.7.4.4 INSTALL PLUGIN Statement"], "Feature": ["INSTALL PLUGIN plugin_name SONAME 'shared_library_name'"], "Description": ["\n        This statement installs a server plugin. It requires the\n        INSERT privilege for the\n        mysql.plugin system table because it adds a\n        row to that table to register the plugin.\n      ", "\nplugin_name is the name of the plugin\n        as defined in the plugin descriptor structure contained in the\n        library file (see Plugin Data Structures).\n        Plugin names are not case-sensitive. For maximal compatibility,\n        plugin names should be limited to ASCII letters, digits, and\n        underscore because they are used in C source files, shell\n        command lines, M4 and Bourne shell scripts, and SQL\n        environments.\n      ", "\nshared_library_name is the name of\n        the shared library that contains the plugin code. The name\n        includes the file name extension (for example,\n        libmyplugin.so,\n        libmyplugin.dll, or\n        libmyplugin.dylib).\n      ", "\n        The shared library must be located in the plugin directory (the\n        directory named by the\n        plugin_dir system variable).\n        The library must be in the plugin directory itself, not in a\n        subdirectory. By default,\n        plugin_dir is the\n        plugin directory under the directory named\n        by the pkglibdir configuration variable, but\n        it can be changed by setting the value of\n        plugin_dir at server startup.\n        For example, set its value in a my.cnf\n        file:\n      ", "\n        If the value of plugin_dir is a\n        relative path name, it is taken to be relative to the MySQL base\n        directory (the value of the\n        basedir system variable).\n      ", "\nINSTALL PLUGIN loads and\n        initializes the plugin code to make the plugin available for\n        use. A plugin is initialized by executing its initialization\n        function, which handles any setup that the plugin must perform\n        before it can be used. When the server shuts down, it executes\n        the deinitialization function for each plugin that is loaded so\n        that the plugin has a chance to perform any final cleanup.\n      ", "\nINSTALL PLUGIN also registers the\n        plugin by adding a line that indicates the plugin name and\n        library file name to the mysql.plugin system\n        table. During the normal startup sequence, the server loads and\n        initializes plugins registered in\n        mysql.plugin. This means that a plugin is\n        installed with INSTALL PLUGIN\n        only once, not every time the server starts. If the server is\n        started with the\n        --skip-grant-tables option,\n        plugins registered in the mysql.plugin table\n        are not loaded and are unavailable.\n      ", "\n        A plugin library can contain multiple plugins. For each of them\n        to be installed, use a separate INSTALL\n        PLUGIN statement. Each statement names a different\n        plugin, but all of them specify the same library name.\n      ", "\nINSTALL PLUGIN causes the server\n        to read option (my.cnf) files just as\n        during server startup. This enables the plugin to pick up any\n        relevant options from those files. It is possible to add plugin\n        options to an option file even before loading a plugin (if the\n        loose prefix is used). It is also possible to\n        uninstall a plugin, edit my.cnf, and\n        install the plugin again. Restarting the plugin this way enables\n        it to the new option values without a server restart.\n      ", "\n        For options that control individual plugin loading at server\n        startup, see Section\u00a07.6.1, \u201cInstalling and Uninstalling Plugins\u201d. If you need to\n        load plugins for a single server startup when the\n        --skip-grant-tables option is\n        given (which tells the server not to read system tables), use\n        the --plugin-load option. See\n        Section\u00a07.1.7, \u201cServer Command Options\u201d.\n      ", "\n        To remove a plugin, use the UNINSTALL\n        PLUGIN statement.\n      ", "\n        For additional information about plugin loading, see\n        Section\u00a07.6.1, \u201cInstalling and Uninstalling Plugins\u201d.\n      ", "\n        To see what plugins are installed, use the\n        SHOW PLUGINS statement or query\n        the INFORMATION_SCHEMA the\n        PLUGINS table.\n      ", "\n        If you recompile a plugin library and need to reinstall it, you\n        can use either of the following methods:\n", "\n\n            Use UNINSTALL PLUGIN to\n            uninstall all plugins in the library, install the new plugin\n            library file in the plugin directory, and then use\n            INSTALL PLUGIN to install all\n            plugins in the library. This procedure has the advantage\n            that it can be used without stopping the server. However, if\n            the plugin library contains many plugins, you must issue\n            many INSTALL PLUGIN and\n            UNINSTALL PLUGIN statements.\n          \n            Stop the server, install the new plugin library file in the\n            plugin directory, and restart the server.\n\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/uninstall-component.html"], "Title": ["15.7.4.5 UNINSTALL COMPONENT Statement"], "Feature": ["UNINSTALL COMPONENT component_name [, component_name ] ..."], "Description": ["\n        This statement deactivates and uninstalls one or more\n        components. A component provides services that are available to\n        the server and other components; see\n        Section\u00a07.5, \u201cMySQL Components\u201d. UNINSTALL\n        COMPONENT is the complement of\n        INSTALL COMPONENT. It requires\n        the DELETE privilege for the\n        mysql.component system table because it\n        removes the row from that table that registers the component.\n        UNINSTALL COMPONENT does not undo\n        persisted variables, including the variables persisted using\n        INSTALL COMPONENT ... SET PERSIST.\n      ", "\n        Example:\n      ", "Press CTRL+C to copy UNINSTALL COMPONENT 'file://component1', 'file://component2';", "\n        For information about component naming, see\n        Section\u00a015.7.4.3, \u201cINSTALL COMPONENT Statement\u201d.\n      ", "\n        If any error occurs, the statement fails and has no effect. For\n        example, this happens if a component name is erroneous, a named\n        component is not installed, or cannot be uninstalled because\n        other installed components depend on it.\n      ", "\n        A loader service handles component unloading, which includes\n        removing uninstalled components from the\n        mysql.component system table that serves as a\n        registry. As a result, unloaded components are not loaded during\n        the startup sequence for subsequent server restarts.\n", "\n\nNote\n\n\n          This statement has no effect for keyring components, which are\n          loaded using a manifest file and cannot be uninstalled. See\n          Section\u00a08.4.4.2, \u201cKeyring Component Installation\u201d.\n\n"], "Examples": ["UNINSTALL COMPONENT 'file://component1', 'file://component2';"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/uninstall-plugin.html"], "Title": ["15.7.4.6 UNINSTALL PLUGIN Statement"], "Feature": ["UNINSTALL PLUGIN plugin_name"], "Description": ["\n        This statement removes an installed server plugin.\n        UNINSTALL PLUGIN is the\n        complement of INSTALL PLUGIN. It\n        requires the DELETE privilege for\n        the mysql.plugin system table because it\n        removes the row from that table that registers the plugin.\n      ", "\nplugin_name must be the name of some\n        plugin that is listed in the mysql.plugin\n        table. The server executes the plugin's deinitialization\n        function and removes the row for the plugin from the\n        mysql.plugin system table, so that subsequent\n        server restarts do not load and initialize the plugin.\n        UNINSTALL PLUGIN does not remove\n        the plugin's shared library file.\n      ", "\n        You cannot uninstall a plugin if any table that uses it is open.\n      ", "\n        Plugin removal has implications for the use of associated\n        tables. For example, if a full-text parser plugin is associated\n        with a FULLTEXT index on the table,\n        uninstalling the plugin makes the table unusable. Any attempt to\n        access the table results in an error. The table cannot even be\n        opened, so you cannot drop an index for which the plugin is\n        used. This means that uninstalling a plugin is something to do\n        with care unless you do not care about the table contents. If\n        you are uninstalling a plugin with no intention of reinstalling\n        it later and you care about the table contents, you should dump\n        the table with mysqldump and remove the\n        WITH PARSER clause from the dumped\n        CREATE TABLE statement so that\n        you can reload the table later. If you do not care about the\n        table, DROP TABLE can be used\n        even if any plugins associated with the table are missing.\n      ", "\n        For additional information about plugin loading, see\n        Section\u00a07.6.1, \u201cInstalling and Uninstalling Plugins\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/set-variable.html"], "Title": ["15.7.6.1 SET Syntax for Variable Assignment"], "Feature": ["SET variable = expr [, variable = expr] ...\n\nvariable: {\n    user_var_name\n  | param_name\n  | local_var_name\n  | {GLOBAL | @@GLOBAL.} system_var_name\n  | {PERSIST | @@PERSIST.} system_var_name\n  | {PERSIST_ONLY | @@PERSIST_ONLY.} system_var_name\n  | [SESSION | @@SESSION. | @@] system_var_name\n}"], "Description": ["\nSET\n        syntax for variable assignment enables you to assign values to\n        different types of variables that affect the operation of the\n        server or clients:\n", "\n\n            User-defined variables. See\n            Section\u00a011.4, \u201cUser-Defined Variables\u201d.\n          \n            Stored procedure and function parameters, and stored program\n            local variables. See\n            Section\u00a015.6.4, \u201cVariables in Stored Programs\u201d.\n          \n            System variables. See\n            Section\u00a07.1.8, \u201cServer System Variables\u201d. System variables\n            also can be set at server startup, as described in\n            Section\u00a07.1.9, \u201cUsing System Variables\u201d.\n\n", "\n        A SET\n        statement that assigns variable values is not written to the\n        binary log, so in replication scenarios it affects only the host\n        on which you execute it. To affect all replication hosts,\n        execute the statement on each host.\n      ", "\n        The following sections describe\n        SET\n        syntax for setting variables. They use the\n        =\n        assignment operator, but the\n        :=\n        assignment operator is also permitted for this purpose.\n", "\nUser-Defined Variable AssignmentParameter and Local Variable AssignmentSystem Variable AssignmentSET Error HandlingMultiple Variable AssignmentSystem Variable References in Expressions\n", "\n\n\n\nUser-Defined Variable Assignment\n\n\n\n\n          User-defined variables are created locally within a session\n          and exist only within the context of that session; see\n          Section\u00a011.4, \u201cUser-Defined Variables\u201d.\n        \n          A user-defined variable is written as\n          @var_name and is\n          assigned an expression value as follows:\n        Press CTRL+C to copy SET @var_name = expr;\n          Examples:\n        Press CTRL+C to copy SET @name = 43;\nSET @total_tax = (SELECT SUM(tax) FROM taxable_transactions);\n          As demonstrated by those statements,\n          expr can range from simple (a\n          literal value) to more complex (the value returned by a scalar\n          subquery).\n        \n          The Performance Schema\n          user_variables_by_thread table\n          contains information about user-defined variables. See\n          Section\u00a029.12.10, \u201cPerformance Schema User-Defined Variable Tables\u201d.\n\n", "\n\n\n\nParameter and Local Variable Assignment\n\n\n\n\nSET\n          applies to parameters and local variables in the context of\n          the stored object within which they are defined. The following\n          procedure uses the increment procedure\n          parameter and counter local variable:\n        Press CTRL+C to copy CREATE PROCEDURE p(increment INT)\nBEGIN\n  DECLARE counter INT DEFAULT 0;\n  WHILE counter < 10 DO\n    -- ... do work ...\n    SET counter = counter + increment;\n  END WHILE;\nEND;\n", "\n\n\n\nSystem Variable Assignment\n\n\n\n\n          The MySQL server maintains system variables that configure its\n          operation. A system variable can have a global value that\n          affects server operation as a whole, a session value that\n          affects the current session, or both. Many system variables\n          are dynamic and can be changed at runtime using the\n          SET\n          statement to affect operation of the current server instance.\n          SET\n          can also be used to persist certain system variables to the\n          mysqld-auto.cnf file in the data\n          directory, to affect server operation for subsequent startups.\n        \n          If a SET statement is issued for a\n          sensitive system variable, the query is rewritten to replace\n          the value with \u201c<redacted>\u201d\n          before it is logged to the general log and audit log. This\n          takes place even if secure storage through a keyring component\n          is not available on the server instance.\n        \n          If you change a session system variable, the value remains in\n          effect within your session until you change the variable to a\n          different value or the session ends. The change has no effect\n          on other sessions.\n        \n          If you change a global system variable, the value is\n          remembered and used to initialize the session value for new\n          sessions until you change the variable to a different value or\n          the server exits. The change is visible to any client that\n          accesses the global value. However, the change affects the\n          corresponding session value only for clients that connect\n          after the change. The global variable change does not affect\n          the session value for any current client sessions (not even\n          the session within which the global value change occurs).\n        \n          To make a global system variable setting permanent so that it\n          applies across server restarts, you can persist it to the\n          mysqld-auto.cnf file in the data\n          directory. It is also possible to make persistent\n          configuration changes by manually modifying a\n          my.cnf option file, but that is more\n          cumbersome, and an error in a manually entered setting might\n          not be discovered until much later.\n          SET\n          statements that persist system variables are more convenient\n          and avoid the possibility of malformed settings because\n          settings with syntax errors do not succeed and do not change\n          server configuration. For more information about persisting\n          system variables and the mysqld-auto.cnf\n          file, see Section\u00a07.1.9.3, \u201cPersisted System Variables\u201d.\n\n\n\nNote\n\n\n            Setting or persisting a global system variable value always\n            requires special privileges. Setting a session system\n            variable value normally requires no special privileges and\n            can be done by any user, although there are exceptions. For\n            more information, see\n            Section\u00a07.1.9.1, \u201cSystem Variable Privileges\u201d.\n\n\n\n          The following discussion describes the syntax options for\n          setting and persisting system variables:\n\n\n\n              To assign a value to a global system variable, precede the\n              variable name by the GLOBAL keyword or\n              the @@GLOBAL. qualifier:\n            Press CTRL+C to copy SET GLOBAL max_connections = 1000;\nSET @@GLOBAL.max_connections = 1000;\n              To assign a value to a session system variable, precede\n              the variable name by the SESSION or\n              LOCAL keyword, by the\n              @@SESSION.,\n              @@LOCAL., or @@\n              qualifier, or by no keyword or no modifier at all:\n            Press CTRL+C to copy SET SESSION sql_mode = 'TRADITIONAL';\nSET LOCAL sql_mode = 'TRADITIONAL';\nSET @@SESSION.sql_mode = 'TRADITIONAL';\nSET @@LOCAL.sql_mode = 'TRADITIONAL';\nSET @@sql_mode = 'TRADITIONAL';\nSET sql_mode = 'TRADITIONAL';\n              A client can change its own session variables, but not\n              those of any other client.\n            \n              To persist a global system variable to the\n              mysqld-auto.cnf option file in the\n              data directory, precede the variable name by the\n              PERSIST keyword or the\n              @@PERSIST. qualifier:\n            Press CTRL+C to copy SET PERSIST max_connections = 1000;\nSET @@PERSIST.max_connections = 1000;\n              This\n              SET\n              syntax enables you to make configuration changes at\n              runtime that also persist across server restarts. Like\n              SET\n              GLOBAL,\n              SET\n              PERSIST sets the global variable runtime value,\n              but also writes the variable setting to the\n              mysqld-auto.cnf file (replacing any\n              existing variable setting if there is one).\n            \n              To persist a global system variable to the\n              mysqld-auto.cnf file without setting\n              the global variable runtime value, precede the variable\n              name by the PERSIST_ONLY keyword or the\n              @@PERSIST_ONLY. qualifier:\n            Press CTRL+C to copy SET PERSIST_ONLY back_log = 100;\nSET @@PERSIST_ONLY.back_log = 100;\n              Like PERSIST,\n              PERSIST_ONLY writes the variable\n              setting to mysqld-auto.cnf. However,\n              unlike PERSIST,\n              PERSIST_ONLY does not modify the global\n              variable runtime value. This makes\n              PERSIST_ONLY suitable for configuring\n              read-only system variables that can be set only at server\n              startup.\n\n\n\n          To set a global system variable value to the compiled-in MySQL\n          default value or a session system variable to the current\n          corresponding global value, set the variable to the value\n          DEFAULT. For example, the following two\n          statements are identical in setting the session value of\n          max_join_size to the current\n          global value:\n        Press CTRL+C to copy SET @@SESSION.max_join_size = DEFAULT;\nSET @@SESSION.max_join_size = @@GLOBAL.max_join_size;\n          Using\n          SET to\n          persist a global system variable to a value of\n          DEFAULT or to its literal default value\n          assigns the variable its default value and adds a setting for\n          the variable to mysqld-auto.cnf. To\n          remove the variable from the file, use\n          RESET PERSIST.\n        \n          Some system variables cannot be persisted or are\n          persist-restricted. See\n          Section\u00a07.1.9.4, \u201cNonpersistible and Persist-Restricted System Variables\u201d.\n        \n          A system variable implemented by a plugin can be persisted if\n          the plugin is installed when the\n          SET\n          statement is executed. Assignment of the persisted plugin\n          variable takes effect for subsequent server restarts if the\n          plugin is still installed. If the plugin is no longer\n          installed, the plugin variable no longer exists when the\n          server reads the mysqld-auto.cnf file. In\n          this case, the server writes a warning to the error log and\n          continues:\n        Press CTRL+C to copy currently unknown variable 'var_name'\nwas read from the persisted config file\n          To display system variable names and values:\n\n\n\n              Use the SHOW VARIABLES\n              statement; see Section\u00a015.7.7.40, \u201cSHOW VARIABLES Statement\u201d.\n            \n              Several Performance Schema tables provide system variable\n              information. See\n              Section\u00a029.12.14, \u201cPerformance Schema System Variable Tables\u201d.\n            \n              The Performance Schema\n              variables_info table contains\n              information showing when and by which user each system\n              variable was most recently set. See\n              Section\u00a029.12.14.2, \u201cPerformance Schema variables_info Table\u201d.\n            \n              The Performance Schema\n              persisted_variables table\n              provides an SQL interface to the\n              mysqld-auto.cnf file, enabling its\n              contents to be inspected at runtime using\n              SELECT statements. See\n              Section\u00a029.12.14.1, \u201cPerformance Schema persisted_variables Table\u201d.\n\n\n", "\n\n\n\nSET Error Handling\n\n\n\n\n          If any variable assignment in a\n          SET\n          statement fails, the entire statement fails and no variables\n          are changed, nor is the mysqld-auto.cnf\n          file changed.\n        \nSET\n          produces an error under the circumstances described here. Most\n          of the examples show\n          SET\n          statements that use keyword syntax (for example,\n          GLOBAL or SESSION), but\n          the principles are also true for statements that use the\n          corresponding modifiers (for example,\n          @@GLOBAL. or\n          @@SESSION.).\n\n\n\n              Use of\n              SET\n              (any variant) to set a read-only variable:\n            Press CTRL+C to copy mysql> SET GLOBAL version = 'abc';\nERROR 1238 (HY000): Variable 'version' is a read only variable\n              Use of GLOBAL,\n              PERSIST, or\n              PERSIST_ONLY to set a variable that has\n              only a session value:\n            Press CTRL+C to copy mysql> SET GLOBAL sql_log_bin = ON;\nERROR 1228 (HY000): Variable 'sql_log_bin' is a SESSION\nvariable and can't be used with SET GLOBAL\n              Use of SESSION to set a variable that\n              has only a global value:\n            Press CTRL+C to copy mysql> SET SESSION max_connections = 1000;\nERROR 1229 (HY000): Variable 'max_connections' is a\nGLOBAL variable and should be set with SET GLOBAL\n              Omission of GLOBAL,\n              PERSIST, or\n              PERSIST_ONLY to set a variable that has\n              only a global value:\n            Press CTRL+C to copy mysql> SET max_connections = 1000;\nERROR 1229 (HY000): Variable 'max_connections' is a\nGLOBAL variable and should be set with SET GLOBAL\n              Use of PERSIST or\n              PERSIST_ONLY to set a variable that\n              cannot be persisted:\n            Press CTRL+C to copy mysql> SET PERSIST port = 3307;\nERROR 1238 (HY000): Variable 'port' is a read only variable\nmysql> SET PERSIST_ONLY port = 3307;\nERROR 1238 (HY000): Variable 'port' is a non persistent read only variable\n              The @@GLOBAL.,\n              @@PERSIST.,\n              @@PERSIST_ONLY.,\n              @@SESSION., and @@\n              modifiers apply only to system variables. An error occurs\n              for attempts to apply them to user-defined variables,\n              stored procedure or function parameters, or stored program\n              local variables.\n            \n              Not all system variables can be set to\n              DEFAULT. In such cases, assigning\n              DEFAULT results in an error.\n            \n              An error occurs for attempts to assign\n              DEFAULT to user-defined variables,\n              stored procedure or function parameters, or stored program\n              local variables.\n\n\n", "\n\n\n\nMultiple Variable Assignment\n\n\n\n\n          A SET\n          statement can contain multiple variable assignments, separated\n          by commas. This statement assigns values to a user-defined\n          variable and a system variable:\n        Press CTRL+C to copy SET @x = 1, SESSION sql_mode = '';\n          If you set multiple system variables in a single statement,\n          the most recent GLOBAL,\n          PERSIST, PERSIST_ONLY,\n          or SESSION keyword in the statement is used\n          for following assignments that have no keyword specified.\n        \n          Examples of multiple-variable assignment:\n        Press CTRL+C to copy SET GLOBAL sort_buffer_size = 1000000, SESSION sort_buffer_size = 1000000;\nSET @@GLOBAL.sort_buffer_size = 1000000, @@LOCAL.sort_buffer_size = 1000000;\nSET GLOBAL max_connections = 1000, sort_buffer_size = 1000000;\n          The @@GLOBAL.,\n          @@PERSIST.,\n          @@PERSIST_ONLY.,\n          @@SESSION., and @@\n          modifiers apply only to the immediately following system\n          variable, not any remaining system variables. This statement\n          sets the sort_buffer_size\n          global value to 50000 and the session value to 1000000:\n        Press CTRL+C to copy SET @@GLOBAL.sort_buffer_size = 50000, sort_buffer_size = 1000000;\n", "\n\n\n\nSystem Variable References in Expressions\n\n\n\n\n          To refer to the value of a system variable in expressions, use\n          one of the @@-modifiers (except\n          @@PERSIST. and\n          @@PERSIST_ONLY., which are not permitted in\n          expressions). For example, you can retrieve system variable\n          values in a SELECT statement\n          like this:\n        Press CTRL+C to copy SELECT @@GLOBAL.sql_mode, @@SESSION.sql_mode, @@sql_mode;\n\n\nNote\n\n\n            A reference to a system variable in an expression as\n            @@var_name\n            (with @@ rather than\n            @@GLOBAL. or\n            @@SESSION.) returns the session value if\n            it exists and the global value otherwise. This differs from\n            SET @@var_name =\n            expr, which always\n            refers to the session value.\n\n\n"], "Examples": ["SET @var_name = expr;", "SET @name = 43;\nSET @total_tax = (SELECT SUM(tax) FROM taxable_transactions);", "CREATE PROCEDURE p(increment INT)\nBEGIN\n  DECLARE counter INT DEFAULT 0;\n  WHILE counter < 10 DO\n    -- ... do work ...\n    SET counter = counter + increment;\n  END WHILE;\nEND;", "SET GLOBAL max_connections = 1000;\nSET @@GLOBAL.max_connections = 1000;", "SET SESSION sql_mode = 'TRADITIONAL';\nSET LOCAL sql_mode = 'TRADITIONAL';\nSET @@SESSION.sql_mode = 'TRADITIONAL';\nSET @@LOCAL.sql_mode = 'TRADITIONAL';\nSET @@sql_mode = 'TRADITIONAL';\nSET sql_mode = 'TRADITIONAL';", "SET PERSIST max_connections = 1000;\nSET @@PERSIST.max_connections = 1000;", "SET PERSIST_ONLY back_log = 100;\nSET @@PERSIST_ONLY.back_log = 100;", "SET @@SESSION.max_join_size = DEFAULT;\nSET @@SESSION.max_join_size = @@GLOBAL.max_join_size;", "mysql> SET GLOBAL version = 'abc';\nERROR 1238 (HY000): Variable 'version' is a read only variable", "mysql> SET GLOBAL sql_log_bin = ON;\nERROR 1228 (HY000): Variable 'sql_log_bin' is a SESSION\nvariable and can't be used with SET GLOBAL", "mysql> SET SESSION max_connections = 1000;\nERROR 1229 (HY000): Variable 'max_connections' is a\nGLOBAL variable and should be set with SET GLOBAL", "mysql> SET max_connections = 1000;\nERROR 1229 (HY000): Variable 'max_connections' is a\nGLOBAL variable and should be set with SET GLOBAL", "mysql> SET PERSIST port = 3307;\nERROR 1238 (HY000): Variable 'port' is a read only variable\nmysql> SET PERSIST_ONLY port = 3307;\nERROR 1238 (HY000): Variable 'port' is a non persistent read only variable", "SET @x = 1, SESSION sql_mode = '';", "SET GLOBAL sort_buffer_size = 1000000, SESSION sort_buffer_size = 1000000;\nSET @@GLOBAL.sort_buffer_size = 1000000, @@LOCAL.sort_buffer_size = 1000000;\nSET GLOBAL max_connections = 1000, sort_buffer_size = 1000000;", "SET @@GLOBAL.sort_buffer_size = 50000, sort_buffer_size = 1000000;", "SELECT @@GLOBAL.sql_mode, @@SESSION.sql_mode, @@sql_mode;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/set-character-set.html"], "Title": ["15.7.6.2 SET CHARACTER SET Statement"], "Feature": ["SET {CHARACTER SET | CHARSET}\n    {'charset_name' | DEFAULT}"], "Description": ["\n        This statement maps all strings sent between the server and the\n        current client with the given mapping. SET CHARACTER\n        SET sets three session system variables:\n        character_set_client and\n        character_set_results are set\n        to the given character set, and\n        character_set_connection to the\n        value of\n        character_set_database. See\n        Section\u00a012.4, \u201cConnection Character Sets and Collations\u201d.\n      ", "\ncharset_name may be quoted or\n        unquoted.\n      ", "\n        The default character set mapping can be restored by using the\n        value DEFAULT. The default depends on the\n        server configuration.\n      ", "\n        Some character sets cannot be used as the client character set.\n        Attempting to use them with SET CHARACTER\n        SET produces an error. See\n        Impermissible Client Character Sets.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/set-names.html"], "Title": ["15.7.6.3 SET NAMES Statement"], "Feature": ["SET NAMES {'charset_name'\n    [COLLATE 'collation_name'] | DEFAULT}"], "Description": ["\n        This statement sets the three session system variables\n        character_set_client,\n        character_set_connection, and\n        character_set_results to the\n        given character set. Setting\n        character_set_connection to\n        charset_name also sets\n        collation_connection to the\n        default collation for charset_name. See\n        Section\u00a012.4, \u201cConnection Character Sets and Collations\u201d.\n      ", "\n        The optional COLLATE clause may be used to\n        specify a collation explicitly. If given, the collation must one\n        of the permitted collations for\n        charset_name.\n      ", "\ncharset_name and\n        collation_name may be quoted or\n        unquoted.\n      ", "\n        The default mapping can be restored by using a value of\n        DEFAULT. The default depends on the server\n        configuration.\n      ", "\n        Some character sets cannot be used as the client character set.\n        Attempting to use them with SET\n        NAMES produces an error. See\n        Impermissible Client Character Sets.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show.html"], "Title": ["15.7.7 SHOW Statements"], "Feature": ["SHOW BINARY LOG STATUS\nSHOW BINARY LOGS\nSHOW BINLOG EVENTS [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]\nSHOW {CHARACTER SET | CHARSET} [like_or_where]\nSHOW COLLATION [like_or_where]\nSHOW [FULL] COLUMNS FROM tbl_name [FROM db_name] [like_or_where]\nSHOW CREATE DATABASE db_name\nSHOW CREATE EVENT event_name\nSHOW CREATE FUNCTION func_name\nSHOW CREATE PROCEDURE proc_name\nSHOW CREATE TABLE tbl_name\nSHOW CREATE TRIGGER trigger_name\nSHOW CREATE VIEW view_name\nSHOW DATABASES [like_or_where]\nSHOW ENGINE engine_name {STATUS | MUTEX}\nSHOW [STORAGE] ENGINES\nSHOW ERRORS [LIMIT [offset,] row_count]\nSHOW EVENTS\nSHOW FUNCTION CODE func_name\nSHOW FUNCTION STATUS [like_or_where]\nSHOW GRANTS FOR user\nSHOW INDEX FROM tbl_name [FROM db_name]\nSHOW OPEN TABLES [FROM db_name] [like_or_where]\nSHOW PLUGINS\nSHOW PROCEDURE CODE proc_name\nSHOW PROCEDURE STATUS [like_or_where]\nSHOW PRIVILEGES\nSHOW [FULL] PROCESSLIST\nSHOW PROFILE [types] [FOR QUERY n] [OFFSET n] [LIMIT n]\nSHOW PROFILES\nSHOW RELAYLOG EVENTS [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]\nSHOW REPLICA STATUS [FOR CHANNEL channel]\nSHOW REPLICAS\nSHOW [GLOBAL | SESSION] STATUS [like_or_where]\nSHOW TABLE STATUS [FROM db_name] [like_or_where]\nSHOW [FULL] TABLES [FROM db_name] [like_or_where]\nSHOW TRIGGERS [FROM db_name] [like_or_where]\nSHOW [GLOBAL | SESSION] VARIABLES [like_or_where]\nSHOW WARNINGS [LIMIT [offset,] row_count]\n\nlike_or_where: {\n    LIKE 'pattern'\n  | WHERE expr\n}"], "Description": ["\nSHOW has many forms that provide\n      information about databases, tables, columns, or status\n      information about the server. This section describes those\n      following:\n    ", "\n      If the syntax for a given SHOW\n      statement includes a LIKE\n      'pattern' part,\n      'pattern' is a\n      string that can contain the SQL % and\n      _ wildcard characters. The pattern is useful\n      for restricting statement output to matching values.\n    ", "\n      Several SHOW statements also accept\n      a WHERE clause that provides more flexibility\n      in specifying which rows to display. See\n      Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n    ", "\n      In SHOW statement results, user\n      names and host names are quoted using backticks (`).\n    ", "\n      Many MySQL APIs (such as PHP) enable you to treat the result\n      returned from a SHOW statement as\n      you would a result set from a\n      SELECT; see\n      Chapter\u00a031, Connectors and APIs, or your API documentation for\n      more information. In addition, you can work in SQL with results\n      from queries on tables in the\n      INFORMATION_SCHEMA database, which you cannot\n      easily do with results from SHOW\n      statements. See Chapter\u00a028, INFORMATION_SCHEMA Tables.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-binary-log-status.html"], "Title": ["15.7.7.1 SHOW BINARY LOG STATUS Statement"], "Feature": ["SHOW BINARY LOG STATUS", "mysql> SHOW BINARY LOG STATUS\\G\n*************************** 1. row ***************************\n             File: source-bin.000002\n         Position: 1307\n     Binlog_Do_DB: test\n Binlog_Ignore_DB: manual, mysql\nExecuted_Gtid_Set: 3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5\n1 row in set (0.00 sec)"], "Description": ["\n        This statement provides status information about binary log\n        files on the source server, and requires the\n        REPLICATION CLIENT privilege (or\n        the deprecated SUPER privilege).\n      ", "\n        Example:\n      ", "\n        When global transaction IDs are in use,\n        Executed_Gtid_Set shows the set of GTIDs for\n        transactions that have been executed on the source. This is the\n        same as the value for the\n        gtid_executed system variable\n        on this server, as well as the value for\n        Executed_Gtid_Set in the output of\n        SHOW REPLICA STATUS on this\n        server.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-create-procedure.html"], "Title": ["15.7.7.10 SHOW CREATE PROCEDURE Statement"], "Feature": ["SHOW CREATE PROCEDURE proc_name"], "Description": ["\n        This statement is a MySQL extension. It returns the exact string\n        that can be used to re-create the named stored procedure. A\n        similar statement, SHOW CREATE\n        FUNCTION, displays information about stored functions\n        (see Section\u00a015.7.7.9, \u201cSHOW CREATE FUNCTION Statement\u201d).\n      ", "\n        To use either statement, you must be the user named as the\n        routine DEFINER, have the\n        SHOW_ROUTINE privilege, have the\n        SELECT privilege at the global\n        level, or have the CREATE\n        ROUTINE, ALTER ROUTINE,\n        or EXECUTE privilege granted at a\n        scope that includes the routine. The value displayed for the\n        Create Procedure or Create\n        Function field is NULL if you have\n        only CREATE ROUTINE,\n        ALTER ROUTINE, or\n        EXECUTE.\n      ", "Press CTRL+C to copy mysql> SHOW CREATE PROCEDURE test.citycount\\G\n*************************** 1. row ***************************\n           Procedure: citycount\n            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,\n                      NO_ZERO_IN_DATE,NO_ZERO_DATE,\n                      ERROR_FOR_DIVISION_BY_ZERO,\n                      NO_ENGINE_SUBSTITUTION\n    Create Procedure: CREATE DEFINER=`me`@`localhost`\n                      PROCEDURE `citycount`(IN country CHAR(3), OUT cities INT)\n                      BEGIN\n                        SELECT COUNT(*) INTO cities FROM world.city\n                        WHERE CountryCode = country;\n                      END\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci\n  Database Collation: utf8mb4_0900_ai_ci\n\nmysql> SHOW CREATE FUNCTION test.hello\\G\n*************************** 1. row ***************************\n            Function: hello\n            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,\n                      NO_ZERO_IN_DATE,NO_ZERO_DATE,\n                      ERROR_FOR_DIVISION_BY_ZERO,\n                      NO_ENGINE_SUBSTITUTION\n     Create Function: CREATE DEFINER=`me`@`localhost`\n                      FUNCTION `hello`(s CHAR(20))\n                      RETURNS char(50) CHARSET utf8mb4\n                      DETERMINISTIC\n                      RETURN CONCAT('Hello, ',s,'!')\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci\n  Database Collation: utf8mb4_0900_ai_ci", "\ncharacter_set_client is the session value of\n        the character_set_client system\n        variable when the routine was created.\n        collation_connection is the session value of\n        the collation_connection system\n        variable when the routine was created. Database\n        Collation is the collation of the database with which\n        the routine is associated.\n"], "Examples": ["mysql> SHOW CREATE PROCEDURE test.citycount\\G\n*************************** 1. row ***************************\n           Procedure: citycount\n            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,\n                      NO_ZERO_IN_DATE,NO_ZERO_DATE,\n                      ERROR_FOR_DIVISION_BY_ZERO,\n                      NO_ENGINE_SUBSTITUTION\n    Create Procedure: CREATE DEFINER=`me`@`localhost`\n                      PROCEDURE `citycount`(IN country CHAR(3), OUT cities INT)\n                      BEGIN\n                        SELECT COUNT(*) INTO cities FROM world.city\n                        WHERE CountryCode = country;\n                      END\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci\n  Database Collation: utf8mb4_0900_ai_ci\n\nmysql> SHOW CREATE FUNCTION test.hello\\G\n*************************** 1. row ***************************\n            Function: hello\n            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,\n                      NO_ZERO_IN_DATE,NO_ZERO_DATE,\n                      ERROR_FOR_DIVISION_BY_ZERO,\n                      NO_ENGINE_SUBSTITUTION\n     Create Function: CREATE DEFINER=`me`@`localhost`\n                      FUNCTION `hello`(s CHAR(20))\n                      RETURNS char(50) CHARSET utf8mb4\n                      DETERMINISTIC\n                      RETURN CONCAT('Hello, ',s,'!')\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci\n  Database Collation: utf8mb4_0900_ai_ci"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-create-table.html"], "Title": ["15.7.7.11 SHOW CREATE TABLE Statement"], "Feature": ["SHOW CREATE TABLE tbl_name", "mysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `s` char(60) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci"], "Description": ["\n        Shows the CREATE TABLE statement\n        that creates the named table. To use this statement, you must\n        have some privilege for the table. This statement also works\n        with views.\n      ", "\nSHOW CREATE TABLE displays all\n        CHECK constraints as table constraints. That\n        is, a CHECK constraint originally specified\n        as part of a column definition displays as a separate clause not\n        part of the column definition. Example:\n      ", "Press CTRL+C to copy mysql> CREATE TABLE t1 (\n         i1 INT CHECK (i1 <> 0),      -- column constraint\n         i2 INT,\n         CHECK (i2 > i1),             -- table constraint\n         CHECK (i2 <> 0) NOT ENFORCED -- table constraint, not enforced\n       );\n\nmysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `i1` int DEFAULT NULL,\n  `i2` int DEFAULT NULL,\n  CONSTRAINT `t1_chk_1` CHECK ((`i1` <> 0)),\n  CONSTRAINT `t1_chk_2` CHECK ((`i2` > `i1`)),\n  CONSTRAINT `t1_chk_3` CHECK ((`i2` <> 0)) /*!80016 NOT ENFORCED */\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "\nSHOW CREATE TABLE quotes table\n        and column names according to the value of the\n        sql_quote_show_create option.\n        See Section\u00a07.1.8, \u201cServer System Variables\u201d.\n      ", "\n        When altering the storage engine of a table, table options that\n        are not applicable to the new storage engine are retained in the\n        table definition to enable reverting the table with its\n        previously defined options to the original storage engine, if\n        necessary. For example, when changing the storage engine from\n        InnoDB to MyISAM, options\n        specific to InnoDB, such as\n        ROW_FORMAT=COMPACT, are retained, as shown\n        here:\n      ", "Press CTRL+C to copy mysql> CREATE TABLE t1 (c1 INT PRIMARY KEY) ROW_FORMAT=COMPACT ENGINE=InnoDB;\nmysql> ALTER TABLE t1 ENGINE=MyISAM;\nmysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `c1` int NOT NULL,\n  PRIMARY KEY (`c1`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=COMPACT", "\n        When creating a table with\n        strict mode disabled,\n        the storage engine's default row format is used if the\n        specified row format is not supported. The actual row format of\n        the table is reported in the Row_format\n        column in response to SHOW TABLE\n        STATUS. SHOW CREATE\n        TABLE shows the row format that was specified in the\n        CREATE TABLE statement.\n      ", "\nSHOW CREATE TABLE also includes the\n        definition of the table's generated invisible primary key,\n        if it has such a key, by default. You can cause this information\n        to be suppressed in the statement's output by setting\n        show_gipk_in_create_table_and_information_schema\n        = OFF. For more information, see\n        Section\u00a015.1.20.11, \u201cGenerated Invisible Primary Keys\u201d.\n"], "Examples": ["mysql> CREATE TABLE t1 (\n         i1 INT CHECK (i1 <> 0),      -- column constraint\n         i2 INT,\n         CHECK (i2 > i1),             -- table constraint\n         CHECK (i2 <> 0) NOT ENFORCED -- table constraint, not enforced\n       );\n\nmysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `i1` int DEFAULT NULL,\n  `i2` int DEFAULT NULL,\n  CONSTRAINT `t1_chk_1` CHECK ((`i1` <> 0)),\n  CONSTRAINT `t1_chk_2` CHECK ((`i2` > `i1`)),\n  CONSTRAINT `t1_chk_3` CHECK ((`i2` <> 0)) /*!80016 NOT ENFORCED */\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci", "mysql> CREATE TABLE t1 (c1 INT PRIMARY KEY) ROW_FORMAT=COMPACT ENGINE=InnoDB;\nmysql> ALTER TABLE t1 ENGINE=MyISAM;\nmysql> SHOW CREATE TABLE t1\\G\n*************************** 1. row ***************************\n       Table: t1\nCreate Table: CREATE TABLE `t1` (\n  `c1` int NOT NULL,\n  PRIMARY KEY (`c1`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=COMPACT"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-create-trigger.html"], "Title": ["15.7.7.12 SHOW CREATE TRIGGER Statement"], "Feature": ["SHOW CREATE TRIGGER trigger_name", "mysql> SHOW CREATE TRIGGER ins_sum\\G\n*************************** 1. row ***************************\n               Trigger: ins_sum\n              sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,\n                        NO_ZERO_IN_DATE,NO_ZERO_DATE,\n                        ERROR_FOR_DIVISION_BY_ZERO,\n                        NO_ENGINE_SUBSTITUTION\nSQL Original Statement: CREATE DEFINER=`me`@`localhost` TRIGGER `ins_sum`\n                        BEFORE INSERT ON `account`\n                        FOR EACH ROW SET @sum = @sum + NEW.amount\n  character_set_client: utf8mb4\n  collation_connection: utf8mb4_0900_ai_ci\n    Database Collation: utf8mb4_0900_ai_ci\n               Created: 2018-08-08 10:10:12.61"], "Description": ["\n        This statement shows the CREATE\n        TRIGGER statement that creates the named trigger. This\n        statement requires the TRIGGER\n        privilege for the table associated with the trigger.\n      ", "\nSHOW CREATE TRIGGER output has\n        these columns:\n", "\n\nTrigger: The trigger name.\n          \nsql_mode: The SQL mode in effect when the\n            trigger executes.\n          \nSQL Original Statement: The\n            CREATE TRIGGER statement that\n            defines the trigger.\n          \ncharacter_set_client: The session value\n            of the character_set_client\n            system variable when the trigger was created.\n          \ncollation_connection: The session value\n            of the collation_connection\n            system variable when the trigger was created.\n          \nDatabase Collation: The collation of the\n            database with which the trigger is associated.\n          \nCreated: The date and time when the\n            trigger was created. This is a\n            TIMESTAMP(2) value (with a fractional\n            part in hundredths of seconds) for triggers.\n\n", "\n        Trigger information is also available from the\n        INFORMATION_SCHEMA\nTRIGGERS table. See\n        Section\u00a028.3.44, \u201cThe INFORMATION_SCHEMA TRIGGERS Table\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-create-user.html"], "Title": ["15.7.7.13 SHOW CREATE USER Statement"], "Feature": ["SHOW CREATE USER user"], "Description": ["\n        This statement shows the CREATE\n        USER statement that creates the named user. An error\n        occurs if the user does not exist. The statement requires the\n        SELECT privilege for the\n        mysql system schema, except to see\n        information for the current user. For the current user, the\n        SELECT privilege for the\n        mysql.user system table is required for\n        display of the password hash in the IDENTIFIED\n        AS clause; otherwise, the hash displays as\n        <secret>.\n      ", "\n        To name the account, use the format described in\n        Section\u00a08.2.4, \u201cSpecifying Account Names\u201d. The host name part of the\n        account name, if omitted, defaults to '%'. It\n        is also possible to specify\n        CURRENT_USER or\n        CURRENT_USER() to refer to the\n        account associated with the current session.\n      ", "\n        Password hash values displayed in the IDENTIFIED\n        WITH clause of output from SHOW\n        CREATE USER may contain unprintable characters that\n        have adverse effects on terminal displays and in other\n        environments. Enabling the\n        print_identified_with_as_hex\n        system variable causes SHOW CREATE\n        USER to display such hash values as hexadecimal\n        strings rather than as regular string literals. Hash values that\n        do not contain unprintable characters still display as regular\n        string literals, even with this variable enabled.\n      ", "Press CTRL+C to copy mysql> CREATE USER 'u1'@'localhost' IDENTIFIED BY 'secret';\nmysql> SET print_identified_with_as_hex = ON;\nmysql> SHOW CREATE USER 'u1'@'localhost'\\G\n*************************** 1. row ***************************\nCREATE USER for u1@localhost: CREATE USER `u1`@`localhost`\nIDENTIFIED WITH 'caching_sha2_password'\nAS 0x244124303035240C7745603626313D613C4C10633E0A104B1E14135A544A7871567245614F4872344643546336546F624F6C7861326932752F45622F4F473273597557627139\nREQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK\nPASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT\nPASSWORD REQUIRE CURRENT DEFAULT", "\n        To display the privileges granted to an account, use the\n        SHOW GRANTS statement. See\n        Section\u00a015.7.7.22, \u201cSHOW GRANTS Statement\u201d.\n"], "Examples": ["mysql> CREATE USER 'u1'@'localhost' IDENTIFIED BY 'secret';\nmysql> SET print_identified_with_as_hex = ON;\nmysql> SHOW CREATE USER 'u1'@'localhost'\\G\n*************************** 1. row ***************************\nCREATE USER for u1@localhost: CREATE USER `u1`@`localhost`\nIDENTIFIED WITH 'caching_sha2_password'\nAS 0x244124303035240C7745603626313D613C4C10633E0A104B1E14135A544A7871567245614F4872344643546336546F624F6C7861326932752F45622F4F473273597557627139\nREQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK\nPASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT\nPASSWORD REQUIRE CURRENT DEFAULT"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-create-view.html"], "Title": ["15.7.7.14 SHOW CREATE VIEW Statement"], "Feature": ["SHOW CREATE VIEW view_name", "mysql> SHOW CREATE VIEW v\\G\n*************************** 1. row ***************************\n                View: v\n         Create View: CREATE ALGORITHM=UNDEFINED\n                      DEFINER=`bob`@`localhost`\n                      SQL SECURITY DEFINER VIEW\n                      `v` AS select 1 AS `a`,2 AS `b`\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci"], "Description": ["\n        This statement shows the CREATE\n        VIEW statement that creates the named view.\n      ", "\ncharacter_set_client is the session value of\n        the character_set_client system\n        variable when the view was created.\n        collation_connection is the session value of\n        the collation_connection system\n        variable when the view was created.\n      ", "\n        Use of SHOW CREATE VIEW requires\n        the SHOW VIEW privilege, and the\n        SELECT privilege for the view in\n        question.\n      ", "\n        View information is also available from the\n        INFORMATION_SCHEMA\nVIEWS table. See\n        Section\u00a028.3.47, \u201cThe INFORMATION_SCHEMA VIEWS Table\u201d.\n      ", "\n        MySQL lets you use different\n        sql_mode settings to tell the\n        server the type of SQL syntax to support. For example, you might\n        use the ANSI SQL mode to\n        ensure MySQL correctly interprets the standard SQL concatenation\n        operator, the double bar (||), in your\n        queries. If you then create a view that concatenates items, you\n        might worry that changing the\n        sql_mode setting to a value\n        different from ANSI could\n        cause the view to become invalid. But this is not the case. No\n        matter how you write out a view definition, MySQL always stores\n        it the same way, in a canonical form. Here is an example that\n        shows how the server changes a double bar concatenation operator\n        to a CONCAT() function:\n      ", "Press CTRL+C to copy mysql> SET sql_mode = 'ANSI';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CREATE VIEW test.v AS SELECT 'a' || 'b' as col1;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SHOW CREATE VIEW test.v\\G\n*************************** 1. row ***************************\n                View: v\n         Create View: CREATE VIEW \"v\" AS select concat('a','b') AS \"col1\"\n...\n1 row in set (0.00 sec)", "\n        The advantage of storing a view definition in canonical form is\n        that changes made later to the value of\n        sql_mode do not affect the\n        results from the view. However an additional consequence is that\n        comments prior to SELECT are\n        stripped from the definition by the server.\n"], "Examples": ["mysql> SET sql_mode = 'ANSI';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> CREATE VIEW test.v AS SELECT 'a' || 'b' as col1;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SHOW CREATE VIEW test.v\\G\n*************************** 1. row ***************************\n                View: v\n         Create View: CREATE VIEW \"v\" AS select concat('a','b') AS \"col1\"\n...\n1 row in set (0.00 sec)"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-databases.html"], "Title": ["15.7.7.15 SHOW DATABASES Statement"], "Feature": ["SHOW {DATABASES | SCHEMAS}\n    [LIKE 'pattern' | WHERE expr]"], "Description": ["\nSHOW DATABASES lists the\n        databases on the MySQL server host.\n        SHOW\n        SCHEMAS is a synonym for SHOW\n        DATABASES. The LIKE\n        clause, if present, indicates which database names to match. The\n        WHERE clause can be given to select rows\n        using more general conditions, as discussed in\n        Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ", "\n        You see only those databases for which you have some kind of\n        privilege, unless you have the global SHOW\n        DATABASES privilege. You can also get this list using\n        the mysqlshow command.\n      ", "\n        If the server was started with the\n        --skip-show-database option, you\n        cannot use this statement at all unless you have the\n        SHOW DATABASES privilege.\n      ", "\n        MySQL implements databases as directories in the data directory,\n        so this statement simply lists directories in that location.\n        However, the output may include names of directories that do not\n        correspond to actual databases.\n      ", "\n        Database information is also available from the\n        INFORMATION_SCHEMA\nSCHEMATA table. See\n        Section\u00a028.3.31, \u201cThe INFORMATION_SCHEMA SCHEMATA Table\u201d.\n", "\n\nCaution\n\n\n          Because any static global privilege is considered a privilege\n          for all databases, any static global privilege enables a user\n          to see all database names with SHOW\n          DATABASES or by examining the\n          SCHEMATA table of\n          INFORMATION_SCHEMA, except databases that\n          have been restricted at the database level by partial revokes.\n\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-engine.html"], "Title": ["15.7.7.16 SHOW ENGINE Statement"], "Feature": ["SHOW ENGINE engine_name {STATUS | MUTEX}", "SHOW ENGINE INNODB STATUS\nSHOW ENGINE INNODB MUTEX\nSHOW ENGINE PERFORMANCE_SCHEMA STATUS", "mysql> SHOW ENGINE PERFORMANCE_SCHEMA STATUS\\G\n...\n*************************** 3. row ***************************\n  Type: performance_schema\n  Name: events_waits_history.size\nStatus: 76\n*************************** 4. row ***************************\n  Type: performance_schema\n  Name: events_waits_history.count\nStatus: 10000\n*************************** 5. row ***************************\n  Type: performance_schema\n  Name: events_waits_history.memory\nStatus: 760000\n...\n*************************** 57. row ***************************\n  Type: performance_schema\n  Name: performance_schema.memory\nStatus: 26459600\n..."], "Description": ["\nSHOW ENGINE displays operational\n        information about a storage engine. It requires the\n        PROCESS privilege. The statement\n        has these variants:\n      ", "\nSHOW ENGINE INNODB STATUS displays extensive\n        information from the standard InnoDB Monitor\n        about the state of the InnoDB storage engine.\n        For information about the standard monitor and other\n        InnoDB Monitors that provide information\n        about InnoDB processing, see\n        Section\u00a017.17, \u201cInnoDB Monitors\u201d.\n      ", "\nSHOW ENGINE INNODB MUTEX displays\n        InnoDB\nmutex and\n        rw-lock statistics.\n", "\n\nNote\n\n\nInnoDB mutexes and rwlocks can also be\n          monitored using Performance\n          Schema tables. See\n          Section\u00a017.16.2, \u201cMonitoring InnoDB Mutex Waits Using Performance Schema\u201d.\n\n", "\n        Mutex statistics collection is configured dynamically using the\n        following options:\n", "\n\n            To enable the collection of mutex statistics, run:\n          Press CTRL+C to copy SET GLOBAL innodb_monitor_enable='latch';\n            To reset mutex statistics, run:\n          Press CTRL+C to copy SET GLOBAL innodb_monitor_reset='latch';\n            To disable the collection of mutex statistics, run:\nPress CTRL+C to copy SET GLOBAL innodb_monitor_disable='latch';\n", "\n        Collection of mutex statistics for SHOW ENGINE INNODB\n        MUTEX can also be enabled by setting\n        innodb_monitor_enable='all', or\n        disabled by setting\n        innodb_monitor_disable='all'.\n      ", "\nSHOW ENGINE INNODB MUTEX output has these\n        columns:\n", "\n\nType\n\n            Always InnoDB.\n          \nName\n\n            For mutexes, the Name field reports only\n            the mutex name. For rwlocks, the Name\n            field reports the source file where the rwlock is\n            implemented, and the line number in the file where the\n            rwlock is created. The line number is specific to your\n            version of MySQL.\n          \nStatus\n\n            The mutex status. This field reports the number of spins,\n            waits, and calls. Statistics for low-level operating system\n            mutexes, which are implemented outside of\n            InnoDB, are not reported.\n\n\n\nspins indicates the number of spins.\n              \nwaits indicates the number of mutex\n                waits.\n              \ncalls indicates how many times the\n                mutex was requested.\n\n\n\n", "\nSHOW ENGINE INNODB MUTEX does not list\n        mutexes and rw-locks for each buffer pool block, as the amount\n        of output would be overwhelming on systems with a large buffer\n        pool. SHOW ENGINE INNODB MUTEX does, however,\n        print aggregate BUF_BLOCK_MUTEX spin, wait,\n        and call values for buffer pool block mutexes and rw-locks.\n        SHOW ENGINE INNODB MUTEX also does not list\n        any mutexes or rw-locks that have never been waited on\n        (os_waits=0). Thus, SHOW ENGINE\n        INNODB MUTEX only displays information about mutexes\n        and rw-locks outside of the buffer pool that have caused at\n        least one OS-level wait.\n      ", "\n        Use SHOW ENGINE PERFORMANCE_SCHEMA STATUS to\n        inspect the internal operation of the Performance Schema code:\n      ", "\n        This statement is intended to help the DBA understand the\n        effects that different Performance Schema options have on memory\n        requirements.\n      ", "\nName values consist of two parts, which name\n        an internal buffer and a buffer attribute, respectively.\n        Interpret buffer names as follows:\n", "\n\n            An internal buffer that is not exposed as a table is named\n            within parentheses. Examples:\n            (pfs_cond_class).size,\n            (pfs_mutex_class).memory.\n          \n            An internal buffer that is exposed as a table in the\n            performance_schema database is named\n            after the table, without parentheses. Examples:\n            events_waits_history.size,\n            mutex_instances.count.\n          \n            A value that applies to the Performance Schema as a whole\n            begins with performance_schema. Example:\n            performance_schema.memory.\n\n", "\n        Buffer attributes have these meanings:\n", "\n\nsize is the size of the internal record\n            used by the implementation, such as the size of a row in a\n            table. size values cannot be changed.\n          \ncount is the number of internal records,\n            such as the number of rows in a table.\n            count values can be changed using\n            Performance Schema configuration options.\n          \n            For a table,\n            tbl_name.memory\n            is the product of size and\n            count. For the Performance Schema as a\n            whole, performance_schema.memory is the\n            sum of all the memory used (the sum of all other\n            memory values).\n\n", "\n        In some cases, there is a direct relationship between a\n        Performance Schema configuration parameter and a SHOW\n        ENGINE value. For example,\n        events_waits_history_long.count corresponds\n        to\n        performance_schema_events_waits_history_long_size.\n        In other cases, the relationship is more complex. For example,\n        events_waits_history.count corresponds to\n        performance_schema_events_waits_history_size\n        (the number of rows per thread) multiplied by\n        performance_schema_max_thread_instances\n        (the number of threads).\n      ", "SHOW ENGINE NDB STATUS.\u00a0\n          If the server has the NDB storage\n          engine enabled, SHOW ENGINE NDB STATUS\n          displays cluster status information such as the number of\n          connected data nodes, the cluster connectstring, and cluster\n          binary log epochs, as well as counts of various Cluster API\n          objects created by the MySQL Server when connected to the\n          cluster. Sample output from this statement is shown here:\n        ", "Press CTRL+C to copy mysql> SHOW ENGINE NDB STATUS;\n+------------+-----------------------+--------------------------------------------------+\n| Type       | Name                  | Status                                           |\n+------------+-----------------------+--------------------------------------------------+\n| ndbcluster | connection            | cluster_node_id=7,\n  connected_host=198.51.100.103, connected_port=1186, number_of_data_nodes=4,\n  number_of_ready_data_nodes=3, connect_count=0                                         |\n| ndbcluster | NdbTransaction        | created=6, free=0, sizeof=212                    |\n| ndbcluster | NdbOperation          | created=8, free=8, sizeof=660                    |\n| ndbcluster | NdbIndexScanOperation | created=1, free=1, sizeof=744                    |\n| ndbcluster | NdbIndexOperation     | created=0, free=0, sizeof=664                    |\n| ndbcluster | NdbRecAttr            | created=1285, free=1285, sizeof=60               |\n| ndbcluster | NdbApiSignal          | created=16, free=16, sizeof=136                  |\n| ndbcluster | NdbLabel              | created=0, free=0, sizeof=196                    |\n| ndbcluster | NdbBranch             | created=0, free=0, sizeof=24                     |\n| ndbcluster | NdbSubroutine         | created=0, free=0, sizeof=68                     |\n| ndbcluster | NdbCall               | created=0, free=0, sizeof=16                     |\n| ndbcluster | NdbBlob               | created=1, free=1, sizeof=264                    |\n| ndbcluster | NdbReceiver           | created=4, free=0, sizeof=68                     |\n| ndbcluster | binlog                | latest_epoch=155467, latest_trans_epoch=148126,\n  latest_received_binlog_epoch=0, latest_handled_binlog_epoch=0,\n  latest_applied_binlog_epoch=0                                                         |\n+------------+-----------------------+--------------------------------------------------+", "\n        The Status column in each of these rows\n        provides information about the MySQL server's connection to\n        the cluster and about the cluster binary log's status,\n        respectively. The Status information is in\n        the form of comma-delimited set of name-value pairs.\n      ", "\n        The connection row's\n        Status column contains the name-value pairs\n        described in the following table.\n", "\n\nName\nValue\n\ncluster_node_id\nThe node ID of the MySQL server in the cluster\n\nconnected_host\nThe host name or IP address of the cluster management server to which\n              the MySQL server is connected\n\nconnected_port\nThe port used by the MySQL server to connect to the management server\n              (connected_host)\n\nnumber_of_data_nodes\nThe number of data nodes configured for the cluster (that is, the number\n              of [ndbd] sections in the cluster\n              config.ini file)\n\nnumber_of_ready_data_nodes\nThe number of data nodes in the cluster that are actually running\n\nconnect_count\nThe number of times this mysqld has connected or\n              reconnected to cluster data nodes\n\n", "\n        The binlog row's\n        Status column contains information relating\n        to NDB Cluster Replication. The name-value pairs it contains are\n        described in the following table.\n", "\n\nName\nValue\n\nlatest_epoch\nThe most recent epoch most recently run on this MySQL server (that is,\n              the sequence number of the most recent transaction run on\n              the server)\n\nlatest_trans_epoch\nThe most recent epoch processed by the cluster's data nodes\n\nlatest_received_binlog_epoch\nThe most recent epoch received by the binary log thread\n\nlatest_handled_binlog_epoch\nThe most recent epoch processed by the binary log thread (for writing to\n              the binary log)\n\nlatest_applied_binlog_epoch\nThe most recent epoch actually written to the binary log\n\n", "\n        See Section\u00a025.7, \u201cNDB Cluster Replication\u201d, for more\n        information.\n      ", "\n        The remaining rows from the output of SHOW ENGINE NDB\n        STATUS which are most likely to prove useful in\n        monitoring the cluster are listed here by\n        Name:\n", "\n\nNdbTransaction: The number and size of\n            NdbTransaction objects that have been\n            created. An NdbTransaction is created\n            each time a table schema operation (such as\n            CREATE TABLE or\n            ALTER TABLE) is performed on\n            an NDB table.\n          \nNdbOperation: The number and size of\n            NdbOperation objects that have been\n            created.\n          \nNdbIndexScanOperation: The number and\n            size of NdbIndexScanOperation objects\n            that have been created.\n          \nNdbIndexOperation: The number and size of\n            NdbIndexOperation objects that have been\n            created.\n          \nNdbRecAttr: The number and size of\n            NdbRecAttr objects that have been\n            created. In general, one of these is created each time a\n            data manipulation statement is performed by an SQL node.\n          \nNdbBlob: The number and size of\n            NdbBlob objects that have been created.\n            An NdbBlob is created for each new\n            operation involving a BLOB\n            column in an NDB table.\n          \nNdbReceiver: The number and size of any\n            NdbReceiver object that have been\n            created. The number in the created column\n            is the same as the number of data nodes in the cluster to\n            which the MySQL server has connected.\n\n", "\n\nNote\n\n\nSHOW ENGINE NDB STATUS returns an empty\n          result if no operations involving\n          NDB tables have been performed\n          during the current session by the MySQL client accessing the\n          SQL node on which this statement is run.\n\n"], "Examples": ["SET GLOBAL innodb_monitor_enable='latch';", "SET GLOBAL innodb_monitor_reset='latch';", "SET GLOBAL innodb_monitor_disable='latch';", "mysql> SHOW ENGINE NDB STATUS;\n+------------+-----------------------+--------------------------------------------------+\n| Type       | Name                  | Status                                           |\n+------------+-----------------------+--------------------------------------------------+\n| ndbcluster | connection            | cluster_node_id=7,\n  connected_host=198.51.100.103, connected_port=1186, number_of_data_nodes=4,\n  number_of_ready_data_nodes=3, connect_count=0                                         |\n| ndbcluster | NdbTransaction        | created=6, free=0, sizeof=212                    |\n| ndbcluster | NdbOperation          | created=8, free=8, sizeof=660                    |\n| ndbcluster | NdbIndexScanOperation | created=1, free=1, sizeof=744                    |\n| ndbcluster | NdbIndexOperation     | created=0, free=0, sizeof=664                    |\n| ndbcluster | NdbRecAttr            | created=1285, free=1285, sizeof=60               |\n| ndbcluster | NdbApiSignal          | created=16, free=16, sizeof=136                  |\n| ndbcluster | NdbLabel              | created=0, free=0, sizeof=196                    |\n| ndbcluster | NdbBranch             | created=0, free=0, sizeof=24                     |\n| ndbcluster | NdbSubroutine         | created=0, free=0, sizeof=68                     |\n| ndbcluster | NdbCall               | created=0, free=0, sizeof=16                     |\n| ndbcluster | NdbBlob               | created=1, free=1, sizeof=264                    |\n| ndbcluster | NdbReceiver           | created=4, free=0, sizeof=68                     |\n| ndbcluster | binlog                | latest_epoch=155467, latest_trans_epoch=148126,\n  latest_received_binlog_epoch=0, latest_handled_binlog_epoch=0,\n  latest_applied_binlog_epoch=0                                                         |\n+------------+-----------------------+--------------------------------------------------+"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-engines.html"], "Title": ["15.7.7.17 SHOW ENGINES Statement"], "Feature": ["SHOW [STORAGE] ENGINES", "mysql> SHOW ENGINES\\G\n*************************** 1. row ***************************\n      Engine: MEMORY\n     Support: YES\n     Comment: Hash based, stored in memory, useful for temporary tables\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 2. row ***************************\n      Engine: InnoDB\n     Support: DEFAULT\n     Comment: Supports transactions, row-level locking, and foreign keys\nTransactions: YES\n          XA: YES\n  Savepoints: YES\n*************************** 3. row ***************************\n      Engine: PERFORMANCE_SCHEMA\n     Support: YES\n     Comment: Performance Schema\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 4. row ***************************\n      Engine: MyISAM\n     Support: YES\n     Comment: MyISAM storage engine\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 5. row ***************************\n      Engine: MRG_MYISAM\n     Support: YES\n     Comment: Collection of identical MyISAM tables\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 6. row ***************************\n      Engine: BLACKHOLE\n     Support: YES\n     Comment: /dev/null storage engine (anything you write to it disappears)\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 7. row ***************************\n      Engine: CSV\n     Support: YES\n     Comment: CSV storage engine\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 8. row ***************************\n      Engine: ARCHIVE\n     Support: YES\n     Comment: Archive storage engine\nTransactions: NO\n          XA: NO\n  Savepoints: NO"], "Description": ["\nSHOW ENGINES displays status\n        information about the server's storage engines. This is\n        particularly useful for checking whether a storage engine is\n        supported, or to see what the default engine is.\n      ", "\n        For information about MySQL storage engines, see\n        Chapter\u00a017, The InnoDB Storage Engine, and\n        Chapter\u00a018, Alternative Storage Engines.\n      ", "\n        The output from SHOW ENGINES may vary\n        according to the MySQL version used and other factors.\n      ", "\nSHOW ENGINES output has these columns:\n", "\n\nEngine\n\n            The name of the storage engine.\n          \nSupport\n\n            The server's level of support for the storage engine,\n            as shown in the following table.\n\n\n\nValue\nMeaning\n\nYES\nThe engine is supported and is active\n\nDEFAULT\nLike YES, plus this is the default engine\n\nNO\nThe engine is not supported\n\nDISABLED\nThe engine is supported but has been disabled\n\n\n\n            A value of NO means that the server was\n            compiled without support for the engine, so it cannot be\n            enabled at runtime.\n          \n            A value of DISABLED occurs either because\n            the server was started with an option that disables the\n            engine, or because not all options required to enable it\n            were given. In the latter case, the error log should contain\n            a reason indicating why the option is disabled. See\n            Section\u00a07.4.2, \u201cThe Error Log\u201d.\n          \n            You might also see DISABLED for a storage\n            engine if the server was compiled to support it, but was\n            started with a\n            --skip-engine_name\n            option. For the NDB storage\n            engine, DISABLED means the server was\n            compiled with support for NDB Cluster, but was not started\n            with the --ndbcluster option.\n          \n            All MySQL servers support MyISAM tables.\n            It is not possible to disable MyISAM.\n          \nComment\n\n            A brief description of the storage engine.\n          \nTransactions\n\n            Whether the storage engine supports transactions.\n          \nXA\n\n            Whether the storage engine supports XA transactions.\n          \nSavepoints\n\n            Whether the storage engine supports savepoints.\n\n", "\n        Storage engine information is also available from the\n        INFORMATION_SCHEMA\nENGINES table. See\n        Section\u00a028.3.13, \u201cThe INFORMATION_SCHEMA ENGINES Table\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-errors.html"], "Title": ["15.7.7.18 SHOW ERRORS Statement"], "Feature": ["SHOW ERRORS [LIMIT [offset,] row_count]\nSHOW COUNT(*) ERRORS"], "Description": ["\nSHOW ERRORS is a diagnostic\n        statement that is similar to SHOW\n        WARNINGS, except that it displays information only for\n        errors, rather than for errors, warnings, and notes.\n      ", "\n        The LIMIT clause has the same syntax as for\n        the SELECT statement. See\n        Section\u00a015.2.13, \u201cSELECT Statement\u201d.\n      ", "\n        The SHOW COUNT(*)\n        ERRORS statement displays the number of errors. You\n        can also retrieve this number from the\n        error_count variable:\n      ", "Press CTRL+C to copy SHOW COUNT(*) ERRORS;\nSELECT @@error_count;", "\nSHOW ERRORS and\n        error_count apply only to\n        errors, not warnings or notes. In other respects, they are\n        similar to SHOW WARNINGS and\n        warning_count. In particular,\n        SHOW ERRORS cannot display\n        information for more than\n        max_error_count messages, and\n        error_count can exceed the\n        value of max_error_count if the\n        number of errors exceeds\n        max_error_count.\n      ", "\n        For more information, see Section\u00a015.7.7.41, \u201cSHOW WARNINGS Statement\u201d.\n"], "Examples": ["SHOW COUNT(*) ERRORS;\nSELECT @@error_count;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-events.html"], "Title": ["15.7.7.19 SHOW EVENTS Statement"], "Feature": ["SHOW EVENTS\n    [{FROM | IN} schema_name]\n    [LIKE 'pattern' | WHERE expr]"], "Description": ["\n        This statement displays information about Event Manager events,\n        which are discussed in Section\u00a027.4, \u201cUsing the Event Scheduler\u201d. It\n        requires the EVENT privilege for\n        the database from which the events are to be shown.\n      ", "\n        In its simplest form, SHOW EVENTS\n        lists all of the events in the current schema:\n      ", "Press CTRL+C to copy mysql> SELECT CURRENT_USER(), SCHEMA();\n+----------------+----------+\n| CURRENT_USER() | SCHEMA() |\n+----------------+----------+\n| jon@ghidora    | myschema |\n+----------------+----------+\n1 row in set (0.00 sec)\n\nmysql> SHOW EVENTS\\G\n*************************** 1. row ***************************\n                  Db: myschema\n                Name: e_daily\n             Definer: jon@ghidora\n           Time zone: SYSTEM\n                Type: RECURRING\n          Execute at: NULL\n      Interval value: 1\n      Interval field: DAY\n              Starts: 2018-08-08 11:06:34\n                Ends: NULL\n              Status: ENABLED\n          Originator: 1\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci\n  Database Collation: utf8mb4_0900_ai_ci", "\n        To see events for a specific schema, use the\n        FROM clause. For example, to see events for\n        the test schema, use the following statement:\n      ", "Press CTRL+C to copy SHOW EVENTS FROM test;", "\n        The LIKE clause, if present,\n        indicates which event names to match. The\n        WHERE clause can be given to select rows\n        using more general conditions, as discussed in\n        Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ", "\nSHOW EVENTS output has these\n        columns:\n", "\n\nDb\n\n            The name of the schema (database) to which the event\n            belongs.\n          \nName\n\n            The name of the event.\n          \nDefiner\n\n            The account of the user who created the event, in\n            'user_name'@'host_name'\n            format.\n          \nTime zone\n\n            The event time zone, which is the time zone used for\n            scheduling the event and that is in effect within the event\n            as it executes. The default value is\n            SYSTEM.\n          \nType\n\n            The event repetition type, either ONE\n            TIME (transient) or RECURRING\n            (repeating).\n          \nExecute At\n\n            For a one-time event, this is the\n            DATETIME value specified in\n            the AT clause of the\n            CREATE EVENT statement used\n            to create the event, or of the last\n            ALTER EVENT statement that\n            modified the event. The value shown in this column reflects\n            the addition or subtraction of any\n            INTERVAL value included in the event's\n            AT clause. For example, if an event is\n            created using ON SCHEDULE AT CURRENT_TIMESTAMP +\n            '1:6' DAY_HOUR, and the event was created at\n            2018-02-09 14:05:30, the value shown in this column would be\n            '2018-02-10 20:05:30'. If the event's\n            timing is determined by an EVERY clause\n            instead of an AT clause (that is, if the\n            event is recurring), the value of this column is\n            NULL.\n          \nInterval Value\n\n            For a recurring event, the number of intervals to wait\n            between event executions. For a transient event, the value\n            of this column is always NULL.\n          \nInterval Field\n\n            The time units used for the interval which a recurring event\n            waits before repeating. For a transient event, the value of\n            this column is always NULL.\n          \nStarts\n\n            The start date and time for a recurring event. This is\n            displayed as a DATETIME\n            value, and is NULL if no start date and\n            time are defined for the event. For a transient event, this\n            column is always NULL. For a recurring\n            event whose definition includes a STARTS\n            clause, this column contains the corresponding\n            DATETIME value. As with the\n            Execute At column, this value resolves\n            any expressions used. If there is no\n            STARTS clause affecting the timing of the\n            event, this column is NULL\n\nEnds\n\n            For a recurring event whose definition includes a\n            ENDS clause, this column contains the\n            corresponding DATETIME value.\n            As with the Execute At column, this value\n            resolves any expressions used. If there is no\n            ENDS clause affecting the timing of the\n            event, this column is NULL.\n          \nStatus\n\n            The event status. One of ENABLED,\n            DISABLED, or\n            REPLICA_SIDE_DISABLED.\n            REPLICA_SIDE_DISABLED indicates that the\n            creation of the event occurred on another MySQL server\n            acting as a replication source and replicated to the current\n            MySQL server which is acting as a replica, but the event is\n            not presently being executed on the replica. For more\n            information, see\n            Section\u00a019.5.1.16, \u201cReplication of Invoked Features\u201d. information.\n          \nREPLICA_SIDE_DISABLED replaces\n            SLAVESIDE_DISABLED, which is now\n            deprecated and subject to removal in a future version of\n            MySQL.\n          \nOriginator\n\n            The server ID of the MySQL server on which the event was\n            created; used in replication. This value may be updated by\n            ALTER EVENT to the server ID\n            of the server on which that statement occurs, if executed on\n            a source server. The default value is 0.\n          \ncharacter_set_client\n\n            The session value of the\n            character_set_client system\n            variable when the event was created.\n          \ncollation_connection\n\n            The session value of the\n            collation_connection system\n            variable when the event was created.\n          \nDatabase Collation\n\n            The collation of the database with which the event is\n            associated.\n\n", "\n        For more information about\n        REPLICA_SIDE_DISABLED and the\n        Originator column, see\n        Section\u00a019.5.1.16, \u201cReplication of Invoked Features\u201d.\n      ", "\n        Times displayed by SHOW EVENTS\n        are given in the event time zone, as discussed in\n        Section\u00a027.4.4, \u201cEvent Metadata\u201d.\n      ", "\n        Event information is also available from the\n        INFORMATION_SCHEMA\nEVENTS table. See\n        Section\u00a028.3.14, \u201cThe INFORMATION_SCHEMA EVENTS Table\u201d.\n      ", "\n        The event action statement is not shown in the output of\n        SHOW EVENTS. Use\n        SHOW CREATE EVENT or the\n        INFORMATION_SCHEMA\nEVENTS table.\n"], "Examples": ["mysql> SELECT CURRENT_USER(), SCHEMA();\n+----------------+----------+\n| CURRENT_USER() | SCHEMA() |\n+----------------+----------+\n| jon@ghidora    | myschema |\n+----------------+----------+\n1 row in set (0.00 sec)\n\nmysql> SHOW EVENTS\\G\n*************************** 1. row ***************************\n                  Db: myschema\n                Name: e_daily\n             Definer: jon@ghidora\n           Time zone: SYSTEM\n                Type: RECURRING\n          Execute at: NULL\n      Interval value: 1\n      Interval field: DAY\n              Starts: 2018-08-08 11:06:34\n                Ends: NULL\n              Status: ENABLED\n          Originator: 1\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci\n  Database Collation: utf8mb4_0900_ai_ci", "SHOW EVENTS FROM test;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-binary-logs.html"], "Title": ["15.7.7.2 SHOW BINARY LOGS Statement"], "Feature": ["SHOW BINARY LOGS"], "Description": ["\n        Lists the binary log files on the server. This statement is used\n        as part of the procedure described in\n        Section\u00a015.4.1.1, \u201cPURGE BINARY LOGS Statement\u201d, that shows how to determine\n        which logs can be purged. SHOW BINARY\n        LOGS requires the REPLICATION\n        CLIENT privilege (or the deprecated\n        SUPER privilege).\n      ", "\n        Encrypted binary log files have a 512-byte file header that\n        stores information required for encryption and decryption of the\n        file. This is included in the file size displayed by\n        SHOW BINARY LOGS. The\n        Encrypted column shows whether or not the\n        binary log file is encrypted. Binary log encryption is active if\n        binlog_encryption=ON is set for\n        the server. Existing binary log files are not encrypted or\n        decrypted if binary log encryption is activated or deactivated\n        while the server is running.\n      ", "Press CTRL+C to copy mysql> SHOW BINARY LOGS;\n+---------------+-----------+-----------+\n| Log_name      | File_size | Encrypted |\n+---------------+-----------+-----------+\n| binlog.000015 |    724935 |       Yes |\n| binlog.000016 |    733481 |       Yes |\n+---------------+-----------+-----------+"], "Examples": ["mysql> SHOW BINARY LOGS;\n+---------------+-----------+-----------+\n| Log_name      | File_size | Encrypted |\n+---------------+-----------+-----------+\n| binlog.000015 |    724935 |       Yes |\n| binlog.000016 |    733481 |       Yes |\n+---------------+-----------+-----------+"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-function-code.html"], "Title": ["15.7.7.20 SHOW FUNCTION CODE Statement"], "Feature": ["SHOW FUNCTION CODE func_name"], "Description": ["\n        This statement is similar to SHOW PROCEDURE\n        CODE but for stored functions. See\n        Section\u00a015.7.7.28, \u201cSHOW PROCEDURE CODE Statement\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-function-status.html"], "Title": ["15.7.7.21 SHOW FUNCTION STATUS Statement"], "Feature": ["SHOW FUNCTION STATUS\n    [LIKE 'pattern' | WHERE expr]"], "Description": ["\n        This statement is similar to SHOW PROCEDURE\n        STATUS but for stored functions. See\n        Section\u00a015.7.7.29, \u201cSHOW PROCEDURE STATUS Statement\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-grants.html"], "Title": ["15.7.7.22 SHOW GRANTS Statement"], "Feature": ["SHOW GRANTS\n    [FOR user_or_role\n        [USING role [, role] ...]]\n\nuser_or_role: {\n    user (see Section 8.2.4, \u201cSpecifying Account Names\u201d)\n  | role (see Section 8.2.5, \u201cSpecifying Role Names\u201d.\n}"], "Description": ["\n        This statement displays the privileges and roles that are\n        assigned to a MySQL user account or role, in the form of\n        GRANT statements that must be\n        executed to duplicate the privilege and role assignments.\n", "\n\nNote\n\n\n          To display nonprivilege information for MySQL accounts, use\n          the SHOW CREATE USER statement.\n          See Section\u00a015.7.7.13, \u201cSHOW CREATE USER Statement\u201d.\n\n", "\nSHOW GRANTS requires the\n        SELECT privilege for the\n        mysql system schema, except to display\n        privileges and roles for the current user.\n      ", "\n        To name the account or role for SHOW\n        GRANTS, use the same format as for the\n        GRANT statement (for example,\n        'jeffrey'@'localhost'):\n      ", "Press CTRL+C to copy mysql> SHOW GRANTS FOR 'jeffrey'@'localhost';\n+------------------------------------------------------------------+\n| Grants for jeffrey@localhost                                     |\n+------------------------------------------------------------------+\n| GRANT USAGE ON *.* TO `jeffrey`@`localhost`                      |\n| GRANT SELECT, INSERT, UPDATE ON `db1`.* TO `jeffrey`@`localhost` |\n+------------------------------------------------------------------+", "\n        The host part, if omitted, defaults to '%'.\n        For additional information about specifying account and role\n        names, see Section\u00a08.2.4, \u201cSpecifying Account Names\u201d, and\n        Section\u00a08.2.5, \u201cSpecifying Role Names\u201d.\n      ", "\n        To display the privileges granted to the current user (the\n        account you are using to connect to the server), you can use any\n        of the following statements:\n      ", "Press CTRL+C to copy SHOW GRANTS;\nSHOW GRANTS FOR CURRENT_USER;\nSHOW GRANTS FOR CURRENT_USER();", "\n        If SHOW GRANTS FOR CURRENT_USER (or any\n        equivalent syntax) is used in definer context, such as within a\n        stored procedure that executes with definer rather than invoker\n        privileges, the grants displayed are those of the definer and\n        not the invoker.\n      ", "\n        In MySQL 8.4 compared to previous series,\n        SHOW GRANTS no longer displays\n        ALL PRIVILEGES in\n        its global-privileges output because the meaning of\n        ALL PRIVILEGES at\n        the global level varies depending on which dynamic privileges\n        are defined. Instead, SHOW GRANTS\n        explicitly lists each granted global privilege:\n      ", "Press CTRL+C to copy mysql> SHOW GRANTS FOR 'root'@'localhost';\n+---------------------------------------------------------------------+\n| Grants for root@localhost                                           |\n+---------------------------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD,         |\n| SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES,  |\n| SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION   |\n| SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE,  |\n| ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE,      |\n| CREATE ROLE, DROP ROLE ON *.* TO `root`@`localhost` WITH GRANT      |\n| OPTION                                                              |\n| GRANT PROXY ON ''@'' TO `root`@`localhost` WITH GRANT OPTION        |\n+---------------------------------------------------------------------+", "\n        Applications that process SHOW\n        GRANTS output should be adjusted accordingly.\n      ", "\n        At the global level, GRANT OPTION\n        applies to all granted static global privileges if granted for\n        any of them, but applies individually to granted dynamic\n        privileges. SHOW GRANTS displays\n        global privileges this way:\n", "\n\n            One line listing all granted static privileges, if there are\n            any, including WITH GRANT OPTION if\n            appropriate.\n          \n            One line listing all granted dynamic privileges for which\n            GRANT OPTION is granted, if\n            there are any, including WITH GRANT\n            OPTION.\n          \n            One line listing all granted dynamic privileges for which\n            GRANT OPTION is not granted,\n            if there are any, without WITH GRANT\n            OPTION.\n\n", "\n        With the optional USING clause,\n        SHOW GRANTS enables you to\n        examine the privileges associated with roles for the user. Each\n        role named in the USING clause must be\n        granted to the user.\n      ", "\n        Suppose that user u1 is assigned roles\n        r1 and r2, as follows:\n      ", "Press CTRL+C to copy CREATE ROLE 'r1', 'r2';\nGRANT SELECT ON db1.* TO 'r1';\nGRANT INSERT, UPDATE, DELETE ON db1.* TO 'r2';\nCREATE USER 'u1'@'localhost' IDENTIFIED BY 'u1pass';\nGRANT 'r1', 'r2' TO 'u1'@'localhost';", "\nSHOW GRANTS without\n        USING shows the granted roles:\n      ", "Press CTRL+C to copy mysql> SHOW GRANTS FOR 'u1'@'localhost';\n+---------------------------------------------+\n| Grants for u1@localhost                     |\n+---------------------------------------------+\n| GRANT USAGE ON *.* TO `u1`@`localhost`      |\n| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost` |\n+---------------------------------------------+", "\n        Adding a USING clause causes the statement to\n        also display the privileges associated with each role named in\n        the clause:\n      ", "Press CTRL+C to copy mysql> SHOW GRANTS FOR 'u1'@'localhost' USING 'r1';\n+---------------------------------------------+\n| Grants for u1@localhost                     |\n+---------------------------------------------+\n| GRANT USAGE ON *.* TO `u1`@`localhost`      |\n| GRANT SELECT ON `db1`.* TO `u1`@`localhost` |\n| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost` |\n+---------------------------------------------+\nmysql> SHOW GRANTS FOR 'u1'@'localhost' USING 'r2';\n+-------------------------------------------------------------+\n| Grants for u1@localhost                                     |\n+-------------------------------------------------------------+\n| GRANT USAGE ON *.* TO `u1`@`localhost`                      |\n| GRANT INSERT, UPDATE, DELETE ON `db1`.* TO `u1`@`localhost` |\n| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost`                 |\n+-------------------------------------------------------------+\nmysql> SHOW GRANTS FOR 'u1'@'localhost' USING 'r1', 'r2';\n+---------------------------------------------------------------------+\n| Grants for u1@localhost                                             |\n+---------------------------------------------------------------------+\n| GRANT USAGE ON *.* TO `u1`@`localhost`                              |\n| GRANT SELECT, INSERT, UPDATE, DELETE ON `db1`.* TO `u1`@`localhost` |\n| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost`                         |\n+---------------------------------------------------------------------+", "\n\nNote\n\n\n          A privilege granted to an account is always in effect, but a\n          role is not. The active roles for an account can differ across\n          and within sessions, depending on the value of the\n          activate_all_roles_on_login\n          system variable, the account default roles, and whether\n          SET ROLE has been executed\n          within a session.\n\n", "\n        MySQL supports partial revocation of global privileges, such\n        that a global privilege can be restricted from applying to\n        particular schemas (see Section\u00a08.2.12, \u201cPrivilege Restriction Using Partial Revokes\u201d). To\n        indicate which global schema privileges have been revoked for\n        particular schemas, SHOW GRANTS output\n        includes REVOKE statements:\n      ", "Press CTRL+C to copy mysql> SET PERSIST partial_revokes = ON;\nmysql> CREATE USER u1;\nmysql> GRANT SELECT, INSERT, DELETE ON *.* TO u1;\nmysql> REVOKE SELECT, INSERT ON mysql.* FROM u1;\nmysql> REVOKE DELETE ON world.* FROM u1;\nmysql> SHOW GRANTS FOR u1;\n+--------------------------------------------------+\n| Grants for u1@%                                  |\n+--------------------------------------------------+\n| GRANT SELECT, INSERT, DELETE ON *.* TO `u1`@`%`  |\n| REVOKE SELECT, INSERT ON `mysql`.* FROM `u1`@`%` |\n| REVOKE DELETE ON `world`.* FROM `u1`@`%`         |\n+--------------------------------------------------+", "\nSHOW GRANTS does not display\n        privileges that are available to the named account but are\n        granted to a different account. For example, if an anonymous\n        account exists, the named account might be able to use its\n        privileges, but SHOW GRANTS does\n        not display them.\n      ", "\nSHOW GRANTS displays mandatory\n        roles named in the\n        mandatory_roles system variable\n        value as follows:\n", "\n\nSHOW GRANTS without a\n            FOR clause displays privileges for the\n            current user, and includes mandatory roles.\n          \nSHOW GRANTS FOR\n            user displays\n            privileges for the named user, and does not include\n            mandatory roles.\n\n", "\n        This behavior is for the benefit of applications that use the\n        output of SHOW\n        GRANTS FOR user to\n        determine which privileges are granted explicitly to the named\n        user. Were that output to include mandatory roles, it would be\n        difficult to distinguish roles granted explicitly to the user\n        from mandatory roles.\n      ", "\n        For the current user, applications can determine privileges with\n        or without mandatory roles by using SHOW\n        GRANTS or\n        SHOW GRANTS FOR\n        CURRENT_USER, respectively.\n"], "Examples": ["mysql> SHOW GRANTS FOR 'jeffrey'@'localhost';\n+------------------------------------------------------------------+\n| Grants for jeffrey@localhost                                     |\n+------------------------------------------------------------------+\n| GRANT USAGE ON *.* TO `jeffrey`@`localhost`                      |\n| GRANT SELECT, INSERT, UPDATE ON `db1`.* TO `jeffrey`@`localhost` |\n+------------------------------------------------------------------+", "SHOW GRANTS;\nSHOW GRANTS FOR CURRENT_USER;\nSHOW GRANTS FOR CURRENT_USER();", "mysql> SHOW GRANTS FOR 'root'@'localhost';\n+---------------------------------------------------------------------+\n| Grants for root@localhost                                           |\n+---------------------------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD,         |\n| SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES,  |\n| SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION   |\n| SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE,  |\n| ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE,      |\n| CREATE ROLE, DROP ROLE ON *.* TO `root`@`localhost` WITH GRANT      |\n| OPTION                                                              |\n| GRANT PROXY ON ''@'' TO `root`@`localhost` WITH GRANT OPTION        |\n+---------------------------------------------------------------------+", "CREATE ROLE 'r1', 'r2';\nGRANT SELECT ON db1.* TO 'r1';\nGRANT INSERT, UPDATE, DELETE ON db1.* TO 'r2';\nCREATE USER 'u1'@'localhost' IDENTIFIED BY 'u1pass';\nGRANT 'r1', 'r2' TO 'u1'@'localhost';", "mysql> SHOW GRANTS FOR 'u1'@'localhost';\n+---------------------------------------------+\n| Grants for u1@localhost                     |\n+---------------------------------------------+\n| GRANT USAGE ON *.* TO `u1`@`localhost`      |\n| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost` |\n+---------------------------------------------+", "mysql> SHOW GRANTS FOR 'u1'@'localhost' USING 'r1';\n+---------------------------------------------+\n| Grants for u1@localhost                     |\n+---------------------------------------------+\n| GRANT USAGE ON *.* TO `u1`@`localhost`      |\n| GRANT SELECT ON `db1`.* TO `u1`@`localhost` |\n| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost` |\n+---------------------------------------------+\nmysql> SHOW GRANTS FOR 'u1'@'localhost' USING 'r2';\n+-------------------------------------------------------------+\n| Grants for u1@localhost                                     |\n+-------------------------------------------------------------+\n| GRANT USAGE ON *.* TO `u1`@`localhost`                      |\n| GRANT INSERT, UPDATE, DELETE ON `db1`.* TO `u1`@`localhost` |\n| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost`                 |\n+-------------------------------------------------------------+\nmysql> SHOW GRANTS FOR 'u1'@'localhost' USING 'r1', 'r2';\n+---------------------------------------------------------------------+\n| Grants for u1@localhost                                             |\n+---------------------------------------------------------------------+\n| GRANT USAGE ON *.* TO `u1`@`localhost`                              |\n| GRANT SELECT, INSERT, UPDATE, DELETE ON `db1`.* TO `u1`@`localhost` |\n| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost`                         |\n+---------------------------------------------------------------------+", "mysql> SET PERSIST partial_revokes = ON;\nmysql> CREATE USER u1;\nmysql> GRANT SELECT, INSERT, DELETE ON *.* TO u1;\nmysql> REVOKE SELECT, INSERT ON mysql.* FROM u1;\nmysql> REVOKE DELETE ON world.* FROM u1;\nmysql> SHOW GRANTS FOR u1;\n+--------------------------------------------------+\n| Grants for u1@%                                  |\n+--------------------------------------------------+\n| GRANT SELECT, INSERT, DELETE ON *.* TO `u1`@`%`  |\n| REVOKE SELECT, INSERT ON `mysql`.* FROM `u1`@`%` |\n| REVOKE DELETE ON `world`.* FROM `u1`@`%`         |\n+--------------------------------------------------+"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-index.html"], "Title": ["15.7.7.23 SHOW INDEX Statement"], "Feature": ["SHOW [EXTENDED] {INDEX | INDEXES | KEYS}\n    {FROM | IN} tbl_name\n    [{FROM | IN} db_name]\n    [WHERE expr]", "mysql> SHOW INDEX FROM City\\G\n*************************** 1. row ***************************\n        Table: city\n   Non_unique: 0\n     Key_name: PRIMARY\n Seq_in_index: 1\n  Column_name: ID\n    Collation: A\n  Cardinality: 4188\n     Sub_part: NULL\n       Packed: NULL\n         Null:\n   Index_type: BTREE\n      Comment:\nIndex_comment:\n      Visible: YES\n   Expression: NULL\n*************************** 2. row ***************************\n        Table: city\n   Non_unique: 1\n     Key_name: CountryCode\n Seq_in_index: 1\n  Column_name: CountryCode\n    Collation: A\n  Cardinality: 232\n     Sub_part: NULL\n       Packed: NULL\n         Null:\n   Index_type: BTREE\n      Comment:\nIndex_comment:\n      Visible: YES\n   Expression: NULL"], "Description": ["\nSHOW INDEX returns table index\n        information. The format resembles that of the\n        SQLStatistics call in ODBC. This statement\n        requires some privilege for any column in the table.\n      ", "\n        An alternative to tbl_name\n        FROM db_name syntax is\n        db_name.tbl_name.\n        These two statements are equivalent:\n      ", "Press CTRL+C to copy SHOW INDEX FROM mytable FROM mydb;\nSHOW INDEX FROM mydb.mytable;", "\n        The optional EXTENDED keyword causes the\n        output to include information about hidden indexes that MySQL\n        uses internally and are not accessible by users.\n      ", "\n        The WHERE clause can be given to select rows\n        using more general conditions, as discussed in\n        Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ", "\nSHOW INDEX returns the following\n        fields:\n", "\n\nTable\n\n            The name of the table.\n          \nNon_unique\n\n            0 if the index cannot contain duplicates, 1 if it can.\n          \nKey_name\n\n            The name of the index. If the index is the primary key, the\n            name is always PRIMARY.\n          \nSeq_in_index\n\n            The column sequence number in the index, starting with 1.\n          \nColumn_name\n\n            The column name. See also the description for the\n            Expression column.\n          \nCollation\n\n            How the column is sorted in the index. This can have values\n            A (ascending), D\n            (descending), or NULL (not sorted).\n          \nCardinality\n\n            An estimate of the number of unique values in the index. To\n            update this number, run ANALYZE\n            TABLE or (for MyISAM tables)\n            myisamchk -a.\n          \nCardinality is counted based on\n            statistics stored as integers, so the value is not\n            necessarily exact even for small tables. The higher the\n            cardinality, the greater the chance that MySQL uses the\n            index when doing joins.\n          \nSub_part\n\n            The index prefix. That is, the number of indexed characters\n            if the column is only partly indexed,\n            NULL if the entire column is indexed.\n\n\n\nNote\n\n\n              Prefix limits are measured in bytes.\n              However, prefix lengths for index\n              specifications in CREATE\n              TABLE, ALTER\n              TABLE, and CREATE\n              INDEX statements are interpreted as number of\n              characters for nonbinary string types\n              (CHAR,\n              VARCHAR,\n              TEXT) and number of bytes\n              for binary string types\n              (BINARY,\n              VARBINARY,\n              BLOB). Take this into\n              account when specifying a prefix length for a nonbinary\n              string column that uses a multibyte character set.\n\n\n\n            For additional information about index prefixes, see\n            Section\u00a010.3.5, \u201cColumn Indexes\u201d, and\n            Section\u00a015.1.15, \u201cCREATE INDEX Statement\u201d.\n          \nPacked\n\n            Indicates how the key is packed. NULL if\n            it is not.\n          \nNull\n\n            Contains YES if the column may contain\n            NULL values and '' if\n            not.\n          \nIndex_type\n\n            The index method used (BTREE,\n            FULLTEXT, HASH,\n            RTREE).\n          \nComment\n\n            Information about the index not described in its own column,\n            such as disabled if the index is\n            disabled.\n          \nIndex_comment\n\n            Any comment provided for the index with a\n            COMMENT attribute when the index was\n            created.\n          \nVisible\n\n            Whether the index is visible to the optimizer. See\n            Section\u00a010.3.12, \u201cInvisible Indexes\u201d.\n          \nExpression\n\n            MySQL supports functional key parts (see\n            Functional Key Parts); this\n            affects both the Column_name and\n            Expression columns:\n\n\n\n                For a nonfunctional key part,\n                Column_name indicates the column\n                indexed by the key part and\n                Expression is\n                NULL.\n              \n                For a functional key part,\n                Column_name column is\n                NULL and\n                Expression indicates the expression\n                for the key part.\n\n\n\n", "\n        Information about table indexes is also available from the\n        INFORMATION_SCHEMA\nSTATISTICS table. See\n        Section\u00a028.3.34, \u201cThe INFORMATION_SCHEMA STATISTICS Table\u201d. The\n        extended information about hidden indexes is available only\n        using SHOW EXTENDED INDEX; it cannot be\n        obtained from the STATISTICS table.\n      ", "\n        You can list a table's indexes with the mysqlshow -k\n        db_name\ntbl_name command.\n      ", "\nSHOW INDEX includes the table's\n        generated invisible key, if it has one, by default. You can\n        cause this information to be suppressed in the statement's\n        output by setting\n        show_gipk_in_create_table_and_information_schema\n        = OFF. For more information, see\n        Section\u00a015.1.20.11, \u201cGenerated Invisible Primary Keys\u201d.\n"], "Examples": ["SHOW INDEX FROM mytable FROM mydb;\nSHOW INDEX FROM mydb.mytable;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-open-tables.html"], "Title": ["15.7.7.24 SHOW OPEN TABLES Statement"], "Feature": ["SHOW OPEN TABLES\n    [{FROM | IN} db_name]\n    [LIKE 'pattern' | WHERE expr]"], "Description": ["\nSHOW OPEN TABLES lists the\n        non-TEMPORARY tables that are currently open\n        in the table cache. See Section\u00a010.4.3.1, \u201cHow MySQL Opens and Closes Tables\u201d. The\n        FROM clause, if present, restricts the tables\n        shown to those present in the db_name\n        database. The LIKE clause, if\n        present, indicates which table names to match. The\n        WHERE clause can be given to select rows\n        using more general conditions, as discussed in\n        Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ", "\nSHOW OPEN TABLES output has these\n        columns:\n", "\n\nDatabase\n\n            The database containing the table.\n          \nTable\n\n            The table name.\n          \nIn_use\n\n            The number of table locks or lock requests there are for the\n            table. For example, if one client acquires a lock for a\n            table using LOCK TABLE t1 WRITE,\n            In_use is 1. If another client issues\n            LOCK TABLE t1 WRITE while the table\n            remains locked, the client blocks, waiting for the lock, but\n            the lock request causes In_use to be 2.\n            If the count is zero, the table is open but not currently\n            being used. In_use is also increased by\n            the HANDLER ...\n            OPEN statement and decreased by\n            HANDLER ...\n            CLOSE.\n          \nName_locked\n\n            Whether the table name is locked. Name locking is used for\n            operations such as dropping or renaming tables.\n\n", "\n        If you have no privileges for a table, it does not show up in\n        the output from SHOW OPEN TABLES.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-parse-tree.html"], "Title": ["15.7.7.25 SHOW PARSE_TREE Statement"], "Feature": ["SHOW PARSE_TREE select_statement", "mysql> SHOW PARSE_TREE SELECT * FROM t3 WHERE o_id > 2\\G\n*************************** 1. row ***************************\nShow_parse_tree: {\n  \"text\": \"SELECT * FROM t3 WHERE o_id > 2\",\n  \"type\": \"PT_select_stmt\",\n  \"components\": [\n    {\n      \"text\": \"SELECT * FROM t3 WHERE o_id > 2\",\n      \"type\": \"PT_query_expression\",\n      \"components\": [\n        {\n          \"text\": \"SELECT * FROM t3 WHERE o_id > 2\",\n          \"type\": \"PT_query_specification\",\n          \"components\": [\n            {\n              \"text\": \"*\",\n              \"type\": \"PT_select_item_list\",\n              \"components\": [\n                {\n                  \"text\": \"*\",\n                  \"type\": \"Item_asterisk\"\n                }\n              ]\n            },\n            {\n              \"text\": \"t3\",\n              \"type\": \"PT_table_factor_table_ident\",\n              \"table_ident\": \"`t3`\"\n            },\n            {\n              \"text\": \"o_id > 2\",\n              \"type\": \"PTI_where\",\n              \"components\": [\n                {\n                  \"text\": \"o_id > 2\",\n                  \"type\": \"PTI_comp_op\",\n                  \"operator\": \">\",\n                  \"components\": [\n                    {\n                      \"text\": \"o_id\",\n                      \"type\": \"PTI_simple_ident_ident\"\n                    },\n                    {\n                      \"text\": \"2\",\n                      \"type\": \"Item_int\"\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n1 row in set (0.01 sec)"], "Description": ["\nSHOW PARSE_TREE displays a\n        representation of the parse tree for the input\n        SELECT statement, in JSON format.\n", "\n\nNote\n\n\n          This statement is available only in debug builds, or if the\n          MySQL server was built using\n          -DWITH_SHOW_PARSE_TREE. It is\n          intended for use in testing and development only, and not in\n          production.\n\n", "\n        Example:\n      "], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-plugins.html"], "Title": ["15.7.7.26 SHOW PLUGINS Statement"], "Feature": ["SHOW PLUGINS", "mysql> SHOW PLUGINS\\G\n*************************** 1. row ***************************\n   Name: binlog\n Status: ACTIVE\n   Type: STORAGE ENGINE\nLibrary: NULL\nLicense: GPL\n*************************** 2. row ***************************\n   Name: CSV\n Status: ACTIVE\n   Type: STORAGE ENGINE\nLibrary: NULL\nLicense: GPL\n*************************** 3. row ***************************\n   Name: MEMORY\n Status: ACTIVE\n   Type: STORAGE ENGINE\nLibrary: NULL\nLicense: GPL\n*************************** 4. row ***************************\n   Name: MyISAM\n Status: ACTIVE\n   Type: STORAGE ENGINE\nLibrary: NULL\nLicense: GPL\n..."], "Description": ["\nSHOW PLUGINS displays information\n        about server plugins.\n      ", "\n        Example of SHOW PLUGINS output:\n      ", "\nSHOW PLUGINS output has these\n        columns:\n", "\n\nName\n\n            The name used to refer to the plugin in statements such as\n            INSTALL PLUGIN and\n            UNINSTALL PLUGIN.\n          \nStatus\n\n            The plugin status, one of ACTIVE,\n            INACTIVE, DISABLED,\n            DELETING, or DELETED.\n          \nType\n\n            The type of plugin, such as STORAGE\n            ENGINE, INFORMATION_SCHEMA, or\n            AUTHENTICATION.\n          \nLibrary\n\n            The name of the plugin shared library file. This is the name\n            used to refer to the plugin file in statements such as\n            INSTALL PLUGIN and\n            UNINSTALL PLUGIN. This file\n            is located in the directory named by the\n            plugin_dir system variable.\n            If the library name is NULL, the plugin\n            is compiled in and cannot be uninstalled with\n            UNINSTALL PLUGIN.\n          \nLicense\n\n            How the plugin is licensed (for example,\n            GPL).\n\n", "\n        For plugins installed with INSTALL\n        PLUGIN, the Name and\n        Library values are also registered in the\n        mysql.plugin system table.\n      ", "\n        For information about plugin data structures that form the basis\n        of the information displayed by SHOW\n        PLUGINS, see The MySQL Plugin API.\n      ", "\n        Plugin information is also available from the\n        INFORMATION_SCHEMA\n.PLUGINS table. See\n        Section\u00a028.3.22, \u201cThe INFORMATION_SCHEMA PLUGINS Table\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-privileges.html"], "Title": ["15.7.7.27 SHOW PRIVILEGES Statement"], "Feature": ["SHOW PRIVILEGES", "mysql> SHOW PRIVILEGES\\G\n*************************** 1. row ***************************\nPrivilege: Alter\n  Context: Tables\n  Comment: To alter the table\n*************************** 2. row ***************************\nPrivilege: Alter routine\n  Context: Functions,Procedures\n  Comment: To alter or drop stored functions/procedures\n*************************** 3. row ***************************\nPrivilege: Create\n  Context: Databases,Tables,Indexes\n  Comment: To create new databases and tables\n*************************** 4. row ***************************\nPrivilege: Create routine\n  Context: Databases\n  Comment: To use CREATE FUNCTION/PROCEDURE\n*************************** 5. row ***************************\nPrivilege: Create role\n  Context: Server Admin\n  Comment: To create new roles\n..."], "Description": ["\nSHOW PRIVILEGES shows the list of\n        system privileges that the MySQL server supports. The privileges\n        displayed include all static privileges, and all currently\n        registered dynamic privileges.\n      ", "\n        Privileges belonging to a specific user are displayed by the\n        SHOW GRANTS statement. See\n        Section\u00a015.7.7.22, \u201cSHOW GRANTS Statement\u201d, for more information.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-procedure-code.html"], "Title": ["15.7.7.28 SHOW PROCEDURE CODE Statement"], "Feature": ["SHOW PROCEDURE CODE proc_name"], "Description": ["\n        This statement is a MySQL extension that is available only for\n        servers that have been built with debugging support. It displays\n        a representation of the internal implementation of the named\n        stored procedure. A similar statement, SHOW\n        FUNCTION CODE, displays information about stored\n        functions (see Section\u00a015.7.7.20, \u201cSHOW FUNCTION CODE Statement\u201d).\n      ", "\n        To use either statement, you must be the user named as the\n        routine DEFINER, have the\n        SHOW_ROUTINE privilege, or have\n        the SELECT privilege at the\n        global level.\n      ", "\n        If the named routine is available, each statement produces a\n        result set. Each row in the result set corresponds to one\n        \u201cinstruction\u201d in the routine. The first column is\n        Pos, which is an ordinal number beginning\n        with 0. The second column is Instruction,\n        which contains an SQL statement (usually changed from the\n        original source), or a directive which has meaning only to the\n        stored-routine handler.\n      ", "Press CTRL+C to copy mysql> DELIMITER //\nmysql> CREATE PROCEDURE p1 ()\n       BEGIN\n         DECLARE fanta INT DEFAULT 55;\n         DROP TABLE t2;\n         LOOP\n           INSERT INTO t3 VALUES (fanta);\n           END LOOP;\n         END//\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SHOW PROCEDURE CODE p1//\n+-----+----------------------------------------+\n| Pos | Instruction                            |\n+-----+----------------------------------------+\n|   0 | set fanta@0 55                         |\n|   1 | stmt 9 \"DROP TABLE t2\"                 |\n|   2 | stmt 5 \"INSERT INTO t3 VALUES (fanta)\" |\n|   3 | jump 2                                 |\n+-----+----------------------------------------+\n4 rows in set (0.00 sec)\n\nmysql> CREATE FUNCTION test.hello (s CHAR(20))\n       RETURNS CHAR(50) DETERMINISTIC\n       RETURN CONCAT('Hello, ',s,'!');\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SHOW FUNCTION CODE test.hello;\n+-----+---------------------------------------+\n| Pos | Instruction                           |\n+-----+---------------------------------------+\n|   0 | freturn 254 concat('Hello, ',s@0,'!') |\n+-----+---------------------------------------+\n1 row in set (0.00 sec)", "\n        In this example, the nonexecutable BEGIN and\n        END statements have disappeared, and for the\n        DECLARE\n        variable_name statement,\n        only the executable part appears (the part where the default is\n        assigned). For each statement that is taken from source, there\n        is a code word stmt followed by a type (9\n        means DROP, 5 means\n        INSERT, and so on). The final row\n        contains an instruction jump 2, meaning\n        GOTO instruction #2.\n"], "Examples": ["mysql> DELIMITER //\nmysql> CREATE PROCEDURE p1 ()\n       BEGIN\n         DECLARE fanta INT DEFAULT 55;\n         DROP TABLE t2;\n         LOOP\n           INSERT INTO t3 VALUES (fanta);\n           END LOOP;\n         END//\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SHOW PROCEDURE CODE p1//\n+-----+----------------------------------------+\n| Pos | Instruction                            |\n+-----+----------------------------------------+\n|   0 | set fanta@0 55                         |\n|   1 | stmt 9 \"DROP TABLE t2\"                 |\n|   2 | stmt 5 \"INSERT INTO t3 VALUES (fanta)\" |\n|   3 | jump 2                                 |\n+-----+----------------------------------------+\n4 rows in set (0.00 sec)\n\nmysql> CREATE FUNCTION test.hello (s CHAR(20))\n       RETURNS CHAR(50) DETERMINISTIC\n       RETURN CONCAT('Hello, ',s,'!');\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SHOW FUNCTION CODE test.hello;\n+-----+---------------------------------------+\n| Pos | Instruction                           |\n+-----+---------------------------------------+\n|   0 | freturn 254 concat('Hello, ',s@0,'!') |\n+-----+---------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-procedure-status.html"], "Title": ["15.7.7.29 SHOW PROCEDURE STATUS Statement"], "Feature": ["SHOW PROCEDURE STATUS\n    [LIKE 'pattern' | WHERE expr]", "mysql> SHOW PROCEDURE STATUS LIKE 'sp1'\\G\n*************************** 1. row ***************************\n                  Db: test\n                Name: sp1\n                Type: PROCEDURE\n             Definer: testuser@localhost\n            Modified: 2018-08-08 13:54:11\n             Created: 2018-08-08 13:54:11\n       Security_type: DEFINER\n             Comment:\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci\n  Database Collation: utf8mb4_0900_ai_ci\n\nmysql> SHOW FUNCTION STATUS LIKE 'hello'\\G\n*************************** 1. row ***************************\n                  Db: test\n                Name: hello\n                Type: FUNCTION\n             Definer: testuser@localhost\n            Modified: 2020-03-10 11:10:03\n             Created: 2020-03-10 11:10:03\n       Security_type: DEFINER\n             Comment:\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci\n  Database Collation: utf8mb4_0900_ai_ci"], "Description": ["\n        This statement is a MySQL extension. It returns characteristics\n        of a stored procedure, such as the database, name, type,\n        creator, creation and modification dates, and character set\n        information. A similar statement, SHOW\n        FUNCTION STATUS, displays information about stored\n        functions (see Section\u00a015.7.7.21, \u201cSHOW FUNCTION STATUS Statement\u201d).\n      ", "\n        To use either statement, you must be the user named as the\n        routine DEFINER, have the\n        SHOW_ROUTINE privilege, have the\n        SELECT privilege at the global\n        level, or have the CREATE\n        ROUTINE, ALTER ROUTINE,\n        or EXECUTE privilege granted at a\n        scope that includes the routine.\n      ", "\n        The LIKE clause, if present,\n        indicates which procedure or function names to match. The\n        WHERE clause can be given to select rows\n        using more general conditions, as discussed in\n        Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ", "\ncharacter_set_client is the session value of\n        the character_set_client system\n        variable when the routine was created.\n        collation_connection is the session value of\n        the collation_connection system\n        variable when the routine was created. Database\n        Collation is the collation of the database with which\n        the routine is associated.\n      ", "\n        Stored routine information is also available from the\n        INFORMATION_SCHEMA\nPARAMETERS and\n        ROUTINES tables. See\n        Section\u00a028.3.20, \u201cThe INFORMATION_SCHEMA PARAMETERS Table\u201d, and\n        Section\u00a028.3.30, \u201cThe INFORMATION_SCHEMA ROUTINES Table\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-binlog-events.html"], "Title": ["15.7.7.3 SHOW BINLOG EVENTS Statement"], "Feature": ["SHOW BINLOG EVENTS\n   [IN 'log_name']\n   [FROM pos]\n   [LIMIT [offset,] row_count]"], "Description": ["\n        Shows the events in the binary log. If you do not specify\n        'log_name', the\n        first binary log is displayed. SHOW BINLOG\n        EVENTS requires the REPLICATION\n        SLAVE privilege.\n      ", "\n        The LIMIT clause has the same syntax as for\n        the SELECT statement. See\n        Section\u00a015.2.13, \u201cSELECT Statement\u201d.\n", "\n\nNote\n\n\n          Issuing a SHOW BINLOG EVENTS\n          with no LIMIT clause could start a very\n          time- and resource-consuming process because the server\n          returns to the client the complete contents of the binary log\n          (which includes all statements executed by the server that\n          modify data). As an alternative to SHOW\n          BINLOG EVENTS, use the\n          mysqlbinlog utility to save the binary log\n          to a text file for later examination and analysis. See\n          Section\u00a06.6.9, \u201cmysqlbinlog \u2014 Utility for Processing Binary Log Files\u201d.\n\n", "\nSHOW BINLOG EVENTS displays the\n        following fields for each event in the binary log:\n", "\n\nLog_name\n\n            The name of the file that is being listed.\n          \nPos\n\n            The position at which the event occurs.\n          \nEvent_type\n\n            An identifier that describes the event type.\n          \nServer_id\n\n            The server ID of the server on which the event originated.\n          \nEnd_log_pos\n\n            The position at which the next event begins, which is equal\n            to Pos plus the size of the event.\n          \nInfo\n\n            More detailed information about the event type. The format\n            of this information depends on the event type.\n\n", "\n        For compressed transaction payloads, the\n        Transaction_payload_event is first printed as\n        a single unit, then it is unpacked and each event inside it is\n        printed.\n      ", "\n        Some events relating to the setting of user and system variables\n        are not included in the output from SHOW\n        BINLOG EVENTS. To get complete coverage of events\n        within a binary log, use mysqlbinlog.\n      ", "\nSHOW BINLOG EVENTS does\n        not work with relay log files. You can use\n        SHOW RELAYLOG EVENTS for this\n        purpose.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-processlist.html"], "Title": ["15.7.7.30 SHOW PROCESSLIST Statement"], "Feature": ["SHOW [FULL] PROCESSLIST"], "Description": ["\n\nImportant\n\n\n          The INFORMATION SCHEMA implementation of\n          SHOW PROCESSLIST is deprecated\n          and subject to removal in a future MySQL release. It is\n          recommended to use the Performance Schema implementation of\n          SHOW PROCESSLIST instead.\n\n", "\n        The MySQL process list indicates the operations currently being\n        performed by the set of threads executing within the server. The\n        SHOW PROCESSLIST statement is one\n        source of process information. For a comparison of this\n        statement with other sources, see\n        Sources of Process Information.\n", "\n\nNote\n\n\n          An alternative implementation for SHOW\n          PROCESSLIST is available based on the Performance\n          Schema processlist table, which,\n          unlike the default SHOW\n          PROCESSLIST implementation, does not require a mutex\n          and has better performance characteristics. For details, see\n          Section\u00a029.12.22.7, \u201cThe processlist Table\u201d.\n\n", "\n        If you have the PROCESS\n        privilege, you can see all threads, even those belonging to\n        other users. Otherwise (without the\n        PROCESS privilege), nonanonymous\n        users have access to information about their own threads but not\n        threads for other users, and anonymous users have no access to\n        thread information.\n      ", "\n        Without the FULL keyword,\n        SHOW PROCESSLIST displays only\n        the first 100 characters of each statement in the\n        Info field.\n      ", "\n        The SHOW PROCESSLIST statement is\n        very useful if you get the \u201ctoo many connections\u201d\n        error message and want to find out what is going on. MySQL\n        reserves one extra connection to be used by accounts that have\n        the CONNECTION_ADMIN privilege\n        (or the deprecated SUPER\n        privilege), to ensure that administrators should always be able\n        to connect and check the system (assuming that you are not\n        giving this privilege to all your users).\n      ", "\n        Threads can be killed with the\n        KILL statement. See\n        Section\u00a015.7.8.4, \u201cKILL Statement\u201d.\n      ", "\n        Example of SHOW PROCESSLIST\n        output:\n      ", "Press CTRL+C to copy mysql> SHOW FULL PROCESSLIST\\G\n*************************** 1. row ***************************\n     Id: 1\n   User: system user\n   Host:\n     db: NULL\nCommand: Connect\n   Time: 1030455\n  State: Waiting for source to send event\n   Info: NULL\n*************************** 2. row ***************************\n     Id: 2\n   User: system user\n   Host:\n     db: NULL\nCommand: Connect\n   Time: 1004\n  State: Has read all relay log; waiting for the replica\n         I/O thread to update it\n   Info: NULL\n*************************** 3. row ***************************\n     Id: 3112\n   User: replikator\n   Host: artemis:2204\n     db: NULL\nCommand: Binlog Dump\n   Time: 2144\n  State: Has sent all binlog to replica; waiting for binlog to be updated\n   Info: NULL\n*************************** 4. row ***************************\n     Id: 3113\n   User: replikator\n   Host: iconnect2:45781\n     db: NULL\nCommand: Binlog Dump\n   Time: 2086\n  State: Has sent all binlog to replica; waiting for binlog to be updated\n   Info: NULL\n*************************** 5. row ***************************\n     Id: 3123\n   User: stefan\n   Host: localhost\n     db: apollon\nCommand: Query\n   Time: 0\n  State: NULL\n   Info: SHOW FULL PROCESSLIST", "\nSHOW PROCESSLIST output has these\n        columns:\n", "\n\nId\n\n            The connection identifier. This is the same value displayed\n            in the ID column of the\n            INFORMATION_SCHEMA\nPROCESSLIST table, displayed in\n            the PROCESSLIST_ID column of the\n            Performance Schema threads\n            table, and returned by the\n            CONNECTION_ID() function\n            within the thread.\n          \nUser\n\n            The MySQL user who issued the statement. A value of\n            system user refers to a nonclient thread\n            spawned by the server to handle tasks internally, for\n            example, a delayed-row handler thread or an I/O (receiver)\n            or SQL (applier) thread used on replica hosts. For\n            system user, there is no host specified\n            in the Host column.\n            unauthenticated user refers to a thread\n            that has become associated with a client connection but for\n            which authentication of the client user has not yet\n            occurred. event_scheduler refers to the\n            thread that monitors scheduled events (see\n            Section\u00a027.4, \u201cUsing the Event Scheduler\u201d).\n\n\n\nNote\n\n\n              A User value of system\n              user is distinct from the\n              SYSTEM_USER privilege. The\n              former designates internal threads. The latter\n              distinguishes the system user and regular user account\n              categories (see Section\u00a08.2.11, \u201cAccount Categories\u201d).\n\n\n\nHost\n\n            The host name of the client issuing the statement (except\n            for system user, for which there is no\n            host). The host name for TCP/IP connections is reported in\n            host_name:client_port\n            format to make it easier to determine which client is doing\n            what.\n          \ndb\n\n            The default database for the thread, or\n            NULL if none has been selected.\n          \nCommand\n\n            The type of command the thread is executing on behalf of the\n            client, or Sleep if the session is idle.\n            For descriptions of thread commands, see\n            Section\u00a010.14, \u201cExamining Server Thread (Process) Information\u201d. The value of this\n            column corresponds to the\n            COM_xxx\n            commands of the client/server protocol and\n            Com_xxx status\n            variables. See Section\u00a07.1.10, \u201cServer Status Variables\u201d.\n          \nTime\n\n            The time in seconds that the thread has been in its current\n            state. For a replica SQL thread, the value is the number of\n            seconds between the timestamp of the last replicated event\n            and the real time of the replica host. See\n            Section\u00a019.2.3, \u201cReplication Threads\u201d.\n          \nState\n\n            An action, event, or state that indicates what the thread is\n            doing. For descriptions of State values,\n            see Section\u00a010.14, \u201cExamining Server Thread (Process) Information\u201d.\n          \n            Most states correspond to very quick operations. If a thread\n            stays in a given state for many seconds, there might be a\n            problem that needs to be investigated.\n          \nInfo\n\n            The statement the thread is executing, or\n            NULL if it is executing no statement. The\n            statement might be the one sent to the server, or an\n            innermost statement if the statement executes other\n            statements. For example, if a CALL\n            statement executes a stored procedure that is executing a\n            SELECT statement, the\n            Info value shows the\n            SELECT statement.\n\n"], "Examples": ["mysql> SHOW FULL PROCESSLIST\\G\n*************************** 1. row ***************************\n     Id: 1\n   User: system user\n   Host:\n     db: NULL\nCommand: Connect\n   Time: 1030455\n  State: Waiting for source to send event\n   Info: NULL\n*************************** 2. row ***************************\n     Id: 2\n   User: system user\n   Host:\n     db: NULL\nCommand: Connect\n   Time: 1004\n  State: Has read all relay log; waiting for the replica\n         I/O thread to update it\n   Info: NULL\n*************************** 3. row ***************************\n     Id: 3112\n   User: replikator\n   Host: artemis:2204\n     db: NULL\nCommand: Binlog Dump\n   Time: 2144\n  State: Has sent all binlog to replica; waiting for binlog to be updated\n   Info: NULL\n*************************** 4. row ***************************\n     Id: 3113\n   User: replikator\n   Host: iconnect2:45781\n     db: NULL\nCommand: Binlog Dump\n   Time: 2086\n  State: Has sent all binlog to replica; waiting for binlog to be updated\n   Info: NULL\n*************************** 5. row ***************************\n     Id: 3123\n   User: stefan\n   Host: localhost\n     db: apollon\nCommand: Query\n   Time: 0\n  State: NULL\n   Info: SHOW FULL PROCESSLIST"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-profile.html"], "Title": ["15.7.7.31 SHOW PROFILE Statement"], "Feature": ["SHOW PROFILE [type [, type] ... ]\n    [FOR QUERY n]\n    [LIMIT row_count [OFFSET offset]]\n\ntype: {\n    ALL\n  | BLOCK IO\n  | CONTEXT SWITCHES\n  | CPU\n  | IPC\n  | MEMORY\n  | PAGE FAULTS\n  | SOURCE\n  | SWAPS\n}"], "Description": ["\n        The SHOW PROFILE and\n        SHOW PROFILES statements display\n        profiling information that indicates resource usage for\n        statements executed during the course of the current session.\n", "\n\nNote\n\n\n          The SHOW PROFILE and\n          SHOW PROFILES statements are\n          deprecated; expect them to be removed in a future MySQL\n          release. Use the\n          Performance Schema\n          instead; see\n          Section\u00a029.19.1, \u201cQuery Profiling Using Performance Schema\u201d.\n\n", "\n        To control profiling, use the\n        profiling session variable,\n        which has a default value of 0 (OFF). Enable\n        profiling by setting profiling\n        to 1 or ON:\n      ", "Press CTRL+C to copy mysql> SET profiling = 1;", "\nSHOW PROFILES displays a list of\n        the most recent statements sent to the server. The size of the\n        list is controlled by the\n        profiling_history_size session\n        variable, which has a default value of 15. The maximum value is\n        100. Setting the value to 0 has the practical effect of\n        disabling profiling.\n      ", "\n        All statements are profiled except SHOW\n        PROFILE and SHOW\n        PROFILES, so neither of those statements appears in\n        the profile list. Malformed statements are profiled. For\n        example, SHOW PROFILING is an illegal\n        statement, and a syntax error occurs if you try to execute it,\n        but it shows up in the profiling list.\n      ", "\nSHOW PROFILE displays detailed\n        information about a single statement. Without the FOR\n        QUERY n clause, the output\n        pertains to the most recently executed statement. If\n        FOR QUERY n is\n        included, SHOW PROFILE displays\n        information for statement n. The\n        values of n correspond to the\n        Query_ID values displayed by\n        SHOW PROFILES.\n      ", "\n        The LIMIT\n        row_count clause may be\n        given to limit the output to\n        row_count rows. If\n        LIMIT is given, OFFSET\n        offset may be added to\n        begin the output offset rows into the\n        full set of rows.\n      ", "\n        By default, SHOW PROFILE displays\n        Status and Duration\n        columns. The Status values are like the\n        State values displayed by\n        SHOW PROCESSLIST, although there\n        might be some minor differences in interpretation for the two\n        statements for some status values (see\n        Section\u00a010.14, \u201cExamining Server Thread (Process) Information\u201d).\n      ", "\n        Optional type values may be specified\n        to display specific additional types of information:\n", "\n\nALL displays all information\n          \nBLOCK IO displays counts for block input\n            and output operations\n          \nCONTEXT SWITCHES displays counts for\n            voluntary and involuntary context switches\n          \nCPU displays user and system CPU usage\n            times\n          \nIPC displays counts for messages sent and\n            received\n          \nMEMORY is not currently implemented\n          \nPAGE FAULTS displays counts for major and\n            minor page faults\n          \nSOURCE displays the names of functions\n            from the source code, together with the name and line number\n            of the file in which the function occurs\n          \nSWAPS displays swap counts\n\n", "\n        Profiling is enabled per session. When a session ends, its\n        profiling information is lost.\n      ", "Press CTRL+C to copy mysql> SELECT @@profiling;\n+-------------+\n| @@profiling |\n+-------------+\n|           0 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> SET profiling = 1;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> DROP TABLE IF EXISTS t1;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> CREATE TABLE T1 (id INT);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SHOW PROFILES;\n+----------+----------+--------------------------+\n| Query_ID | Duration | Query                    |\n+----------+----------+--------------------------+\n|        0 | 0.000088 | SET PROFILING = 1        |\n|        1 | 0.000136 | DROP TABLE IF EXISTS t1  |\n|        2 | 0.011947 | CREATE TABLE t1 (id INT) |\n+----------+----------+--------------------------+\n3 rows in set (0.00 sec)\n\nmysql> SHOW PROFILE;\n+----------------------+----------+\n| Status               | Duration |\n+----------------------+----------+\n| checking permissions | 0.000040 |\n| creating table       | 0.000056 |\n| After create         | 0.011363 |\n| query end            | 0.000375 |\n| freeing items        | 0.000089 |\n| logging slow query   | 0.000019 |\n| cleaning up          | 0.000005 |\n+----------------------+----------+\n7 rows in set (0.00 sec)\n\nmysql> SHOW PROFILE FOR QUERY 1;\n+--------------------+----------+\n| Status             | Duration |\n+--------------------+----------+\n| query end          | 0.000107 |\n| freeing items      | 0.000008 |\n| logging slow query | 0.000015 |\n| cleaning up        | 0.000006 |\n+--------------------+----------+\n4 rows in set (0.00 sec)\n\nmysql> SHOW PROFILE CPU FOR QUERY 2;\n+----------------------+----------+----------+------------+\n| Status               | Duration | CPU_user | CPU_system |\n+----------------------+----------+----------+------------+\n| checking permissions | 0.000040 | 0.000038 |   0.000002 |\n| creating table       | 0.000056 | 0.000028 |   0.000028 |\n| After create         | 0.011363 | 0.000217 |   0.001571 |\n| query end            | 0.000375 | 0.000013 |   0.000028 |\n| freeing items        | 0.000089 | 0.000010 |   0.000014 |\n| logging slow query   | 0.000019 | 0.000009 |   0.000010 |\n| cleaning up          | 0.000005 | 0.000003 |   0.000002 |\n+----------------------+----------+----------+------------+\n7 rows in set (0.00 sec)", "\n\nNote\n\n\n          Profiling is only partially functional on some architectures.\n          For values that depend on the getrusage()\n          system call, NULL is returned on systems\n          such as Windows that do not support the call. In addition,\n          profiling is per process and not per thread. This means that\n          activity on threads within the server other than your own may\n          affect the timing information that you see.\n\n", "\n        Profiling information is also available from the\n        INFORMATION_SCHEMA\nPROFILING table. See\n        Section\u00a028.3.24, \u201cThe INFORMATION_SCHEMA PROFILING Table\u201d. For\n        example, the following queries are equivalent:\n      ", "Press CTRL+C to copy SHOW PROFILE FOR QUERY 2;\n\nSELECT STATE, FORMAT(DURATION, 6) AS DURATION\nFROM INFORMATION_SCHEMA.PROFILING\nWHERE QUERY_ID = 2 ORDER BY SEQ;"], "Examples": ["mysql> SET profiling = 1;", "mysql> SELECT @@profiling;\n+-------------+\n| @@profiling |\n+-------------+\n|           0 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> SET profiling = 1;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> DROP TABLE IF EXISTS t1;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> CREATE TABLE T1 (id INT);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SHOW PROFILES;\n+----------+----------+--------------------------+\n| Query_ID | Duration | Query                    |\n+----------+----------+--------------------------+\n|        0 | 0.000088 | SET PROFILING = 1        |\n|        1 | 0.000136 | DROP TABLE IF EXISTS t1  |\n|        2 | 0.011947 | CREATE TABLE t1 (id INT) |\n+----------+----------+--------------------------+\n3 rows in set (0.00 sec)\n\nmysql> SHOW PROFILE;\n+----------------------+----------+\n| Status               | Duration |\n+----------------------+----------+\n| checking permissions | 0.000040 |\n| creating table       | 0.000056 |\n| After create         | 0.011363 |\n| query end            | 0.000375 |\n| freeing items        | 0.000089 |\n| logging slow query   | 0.000019 |\n| cleaning up          | 0.000005 |\n+----------------------+----------+\n7 rows in set (0.00 sec)\n\nmysql> SHOW PROFILE FOR QUERY 1;\n+--------------------+----------+\n| Status             | Duration |\n+--------------------+----------+\n| query end          | 0.000107 |\n| freeing items      | 0.000008 |\n| logging slow query | 0.000015 |\n| cleaning up        | 0.000006 |\n+--------------------+----------+\n4 rows in set (0.00 sec)\n\nmysql> SHOW PROFILE CPU FOR QUERY 2;\n+----------------------+----------+----------+------------+\n| Status               | Duration | CPU_user | CPU_system |\n+----------------------+----------+----------+------------+\n| checking permissions | 0.000040 | 0.000038 |   0.000002 |\n| creating table       | 0.000056 | 0.000028 |   0.000028 |\n| After create         | 0.011363 | 0.000217 |   0.001571 |\n| query end            | 0.000375 | 0.000013 |   0.000028 |\n| freeing items        | 0.000089 | 0.000010 |   0.000014 |\n| logging slow query   | 0.000019 | 0.000009 |   0.000010 |\n| cleaning up          | 0.000005 | 0.000003 |   0.000002 |\n+----------------------+----------+----------+------------+\n7 rows in set (0.00 sec)", "SHOW PROFILE FOR QUERY 2;\n\nSELECT STATE, FORMAT(DURATION, 6) AS DURATION\nFROM INFORMATION_SCHEMA.PROFILING\nWHERE QUERY_ID = 2 ORDER BY SEQ;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-profiles.html"], "Title": ["15.7.7.32 SHOW PROFILES Statement"], "Feature": ["SHOW PROFILES"], "Description": ["\n        The SHOW PROFILES statement,\n        together with SHOW PROFILE,\n        displays profiling information that indicates resource usage for\n        statements executed during the course of the current session.\n        For more information, see Section\u00a015.7.7.31, \u201cSHOW PROFILE Statement\u201d.\n", "\n\nNote\n\n\n          The SHOW PROFILE and\n          SHOW PROFILES statements are\n          deprecated; expect it to be removed in a future MySQL release.\n          Use the Performance\n          Schema instead; see\n          Section\u00a029.19.1, \u201cQuery Profiling Using Performance Schema\u201d.\n\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-relaylog-events.html"], "Title": ["15.7.7.33 SHOW RELAYLOG EVENTS Statement"], "Feature": ["SHOW RELAYLOG EVENTS\n    [IN 'log_name']\n    [FROM pos]\n    [LIMIT [offset,] row_count]\n    [channel_option]\n\nchannel_option:\n    FOR CHANNEL channel"], "Description": ["\n        Shows the events in the relay log of a replica. If you do not\n        specify\n        'log_name', the\n        first relay log is displayed. This statement has no effect on\n        the source. SHOW RELAYLOG EVENTS requires the\n        REPLICATION SLAVE privilege.\n      ", "\n        The LIMIT clause has the same syntax as for\n        the SELECT statement. See\n        Section\u00a015.2.13, \u201cSELECT Statement\u201d.\n", "\n\nNote\n\n\n          Issuing a SHOW RELAYLOG EVENTS\n          with no LIMIT clause could start a very\n          time- and resource-consuming process because the server\n          returns to the client the complete contents of the relay log\n          (including all statements modifying data that have been\n          received by the replica).\n\n", "\n        The optional FOR CHANNEL\n        channel clause enables you\n        to name which replication channel the statement applies to.\n        Providing a FOR CHANNEL\n        channel clause applies the\n        statement to a specific replication channel. If no channel is\n        named and no extra channels exist, the statement applies to the\n        default channel.\n      ", "\n        When using multiple replication channels, if a\n        SHOW RELAYLOG EVENTS statement\n        does not have a channel defined using a FOR CHANNEL\n        channel clause an error is\n        generated. See Section\u00a019.2.2, \u201cReplication Channels\u201d for more\n        information.\n      ", "\nSHOW RELAYLOG EVENTS displays the\n        following fields for each event in the relay log:\n", "\n\nLog_name\n\n            The name of the file that is being listed.\n          \nPos\n\n            The position at which the event occurs.\n          \nEvent_type\n\n            An identifier that describes the event type.\n          \nServer_id\n\n            The server ID of the server on which the event originated.\n          \nEnd_log_pos\n\n            The value of End_log_pos for this event\n            in the source's binary log.\n          \nInfo\n\n            More detailed information about the event type. The format\n            of this information depends on the event type.\n\n", "\n        For compressed transaction payloads, the\n        Transaction_payload_event is first printed as\n        a single unit, then it is unpacked and each event inside it is\n        printed.\n      ", "\n        Some events relating to the setting of user and system variables\n        are not included in the output from SHOW\n        RELAYLOG EVENTS. To get complete coverage of events\n        within a relay log, use mysqlbinlog.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-replica-status.html"], "Title": ["15.7.7.34 SHOW REPLICA STATUS Statement"], "Feature": ["SHOW REPLICA STATUS [FOR CHANNEL channel]"], "Description": ["\n        This statement provides status information on essential\n        parameters of the replica threads. The statement requires the\n        REPLICATION CLIENT privilege (or\n        the deprecated SUPER privilege).\n      ", "\nSHOW REPLICA STATUS is nonblocking. When run\n        concurrently with\n        STOP\n        REPLICA, SHOW REPLICA STATUS\n        returns without waiting for STOP\n        REPLICA to finish shutting down the replication SQL\n        (applier) thread or replication I/O (receiver) thread (or both).\n        This permits use in monitoring and other applications where\n        getting an immediate response from SHOW REPLICA\n        STATUS is more important than ensuring that it\n        returned the latest data.\n      ", "\n        If you issue this statement using the mysql\n        client, you can use a \\G statement terminator\n        rather than a semicolon to obtain a more readable vertical\n        layout:\n      ", "Press CTRL+C to copy mysql> SHOW REPLICA STATUS\\G\n*************************** 1. row ***************************\n             Replica_IO_State: Waiting for source to send event\n                  Source_Host: 127.0.0.1\n                  Source_User: root\n                  Source_Port: 13000\n                Connect_Retry: 1\n              Source_Log_File: master-bin.000001\n          Read_Source_Log_Pos: 927\n               Relay_Log_File: slave-relay-bin.000002\n                Relay_Log_Pos: 1145\n        Relay_Source_Log_File: master-bin.000001\n           Replica_IO_Running: Yes\n          Replica_SQL_Running: Yes\n              Replicate_Do_DB:\n          Replicate_Ignore_DB:\n           Replicate_Do_Table:\n       Replicate_Ignore_Table:\n      Replicate_Wild_Do_Table:\n  Replicate_Wild_Ignore_Table:\n                   Last_Errno: 0\n                   Last_Error:\n                 Skip_Counter: 0\n          Exec_Source_Log_Pos: 927\n              Relay_Log_Space: 1355\n              Until_Condition: None\n               Until_Log_File:\n                Until_Log_Pos: 0\n           Source_SSL_Allowed: No\n           Source_SSL_CA_File:\n           Source_SSL_CA_Path:\n              Source_SSL_Cert:\n            Source_SSL_Cipher:\n               Source_SSL_Key:\n        Seconds_Behind_Source: 0\nSource_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error:\n               Last_SQL_Errno: 0\n               Last_SQL_Error:\n  Replicate_Ignore_Server_Ids:\n             Source_Server_Id: 1\n                  Source_UUID: 73f86016-978b-11ee-ade5-8d2a2a562feb\n             Source_Info_File: mysql.slave_master_info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n    Replica_SQL_Running_State: Replica has read all relay log; waiting for more updates\n           Source_Retry_Count: 10\n                  Source_Bind:\n      Last_IO_Error_Timestamp:\n     Last_SQL_Error_Timestamp:\n               Source_SSL_Crl:\n           Source_SSL_Crlpath:\n           Retrieved_Gtid_Set: 73f86016-978b-11ee-ade5-8d2a2a562feb:1-3\n            Executed_Gtid_Set: 73f86016-978b-11ee-ade5-8d2a2a562feb:1-3\n                Auto_Position: 1\n         Replicate_Rewrite_DB:\n                 Channel_Name:\n           Source_TLS_Version:\n       Source_public_key_path:\n        Get_Source_public_key: 0\n            Network_Namespace:", "\n        The Performance Schema provides tables that expose replication\n        information. This is similar to the information available from\n        the SHOW REPLICA STATUS\n        statement, but represented in table form. For details, see\n        Section\u00a029.12.11, \u201cPerformance Schema Replication Tables\u201d.\n      ", "\n        You can set the GTID_ONLY option for the\n        CHANGE REPLICATION SOURCE TO\n        statement to stop a replication channel from persisting file\n        names and file positions in the replication metadata\n        repositories. With this setting, file positions for the source\n        binary log file and the relay log file are tracked in memory.\n        The SHOW REPLICA STATUS statement\n        still displays file positions in normal use. However, because\n        the file positions are not being regularly updated in the\n        connection metadata repository and the applier metadata\n        repository except in a few situations, they are likely to be out\n        of date if the server is restarted.\n      ", "\n        For a replication channel with the GTID_ONLY\n        setting after a server start, the read and applied file\n        positions for the source binary log file\n        (Read_Source_Log_Pos and\n        Exec_Source_Log_Pos) are set to zero, and the\n        file names (Source_Log_File and\n        Relay_Source_Log_File) are set to\n        INVALID. The relay log file name\n        (Relay_Log_File) is set according to the\n        relay_log_recovery setting, either a new file that was created\n        at server start or the first relay log file present. The file\n        position (Relay_Log_Pos) is set to position\n        4, and GTID auto-skip is used to skip any transactions in the\n        file that were already applied.\n      ", "\n        When the receiver thread contacts the source and gets valid\n        position information, the read position\n        (Read_Source_Log_Pos) and file name\n        (Source_Log_File) are updated with the\n        correct data and become valid. When the applier thread applies a\n        transaction from the source, or skips an already executed\n        transaction, the executed position\n        (Exec_Source_Log_Pos) and file name\n        (Relay_Source_Log_File) are updated with the\n        correct data and become valid. The relay log file position\n        (Relay_Log_Pos) is also updated at that time.\n      ", "\n        The following list describes the fields returned by\n        SHOW\n        REPLICA STATUS. For additional information about\n        interpreting their meanings, see\n        Section\u00a019.1.7.1, \u201cChecking Replication Status\u201d.\n", "\n\nReplica_IO_State\n\n            A copy of the State field of the\n            SHOW PROCESSLIST output for\n            the replica I/O (receiver) thread. This tells you what the\n            thread is doing: trying to connect to the source, waiting\n            for events from the source, reconnecting to the source, and\n            so on. For a listing of possible states, see\n            Section\u00a010.14.5, \u201cReplication I/O (Receiver) Thread States\u201d.\n          \nSource_Host\n\n            The source host that the replica is connected to.\n          \nSource_User\n\n            The user name of the account used to connect to the source.\n          \nSource_Port\n\n            The port used to connect to the source.\n          \nConnect_Retry\n\n            The number of seconds between connect retries (default 60).\n            This can be set with a CHANGE\n            REPLICATION SOURCE TO statement.\n          \nSource_Log_File\n\n            The name of the source binary log file from which the I/O\n            (receiver) thread is currently reading. This is set to\n            INVALID for a replication channel with\n            the GTID_ONLY setting after a server\n            start. It will be updated when the replica contacts the\n            source.\n          \nRead_Source_Log_Pos\n\n            The position in the current source binary log file up to\n            which the I/O (receiver) thread has read. This is set to\n            zero for a replication channel with the\n            GTID_ONLY setting after a server start.\n            It will be updated when the replica contacts the source.\n          \nRelay_Log_File\n\n            The name of the relay log file from which the SQL (applier)\n            thread is currently reading and executing.\n          \nRelay_Log_Pos\n\n            The position in the current relay log file up to which the\n            SQL (applier) thread has read and executed.\n          \nRelay_Source_Log_File\n\n            The name of the source binary log file containing the most\n            recent event executed by the SQL (applier) thread. This is\n            set to INVALID for a replication channel\n            with the GTID_ONLY setting after a server\n            start. It will be updated when a transaction is executed or\n            skipped.\n          \nReplica_IO_Running\n\n            Whether the replication I/O (receiver) thread is started and\n            has connected successfully to the source. Internally, the\n            state of this thread is represented by one of the following\n            three values:\n\n\nMYSQL_REPLICA_NOT_RUN.\u00a0\n                  The replication I/O (receiver) thread is not running.\n                  For this state, Replica_IO_Running\n                  is No.\n                MYSQL_REPLICA_RUN_NOT_CONNECT.\u00a0\n                  The replication I/O (receiver) thread is running, but\n                  is not connected to a replication source. For this\n                  state, Replica_IO_Running is\n                  Connecting.\n                MYSQL_REPLICA_RUN_CONNECT.\u00a0\n                  The replication I/O (receiver) thread is running, and\n                  is connected to a replication source. For this state,\n                  Replica_IO_Running is\n                  Yes.\n\n\n\nReplica_SQL_Running\n\n            Whether the replication SQL (applier) thread is started.\n          \nReplicate_Do_DB,\n            Replicate_Ignore_DB\n\n            The names of any databases that were specified with the\n            --replicate-do-db and\n            --replicate-ignore-db\n            options, or the CHANGE REPLICATION\n            FILTER statement. If the FOR\n            CHANNEL clause was used, the channel specific\n            replication filters are shown. Otherwise, the replication\n            filters for every replication channel are shown.\n          \nReplicate_Do_Table,\n            Replicate_Ignore_Table,\n            Replicate_Wild_Do_Table,\n            Replicate_Wild_Ignore_Table\n\n            The names of any tables that were specified with the\n            --replicate-do-table,\n            --replicate-ignore-table,\n            --replicate-wild-do-table,\n            and\n            --replicate-wild-ignore-table\n            options, or the CHANGE REPLICATION\n            FILTER statement. If the FOR\n            CHANNEL clause was used, the channel specific\n            replication filters are shown. Otherwise, the replication\n            filters for every replication channel are shown.\n          \nLast_Errno, Last_Error\n\n            These columns are aliases for\n            Last_SQL_Errno and\n            Last_SQL_Error.\n          \n            Issuing RESET BINARY LOGS AND\n            GTIDS or\n            RESET\n            REPLICA resets the values shown in these columns.\n\n\n\nNote\n\n\n              When the replication SQL thread receives an error, it\n              reports the error first, then stops the SQL thread. This\n              means that there is a small window of time during which\n              SHOW REPLICA STATUS shows a nonzero\n              value for Last_SQL_Errno even though\n              Replica_SQL_Running still displays\n              Yes.\n\n\n\nSkip_Counter\n\n            The current value of the\n            sql_replica_skip_counter\n            system variable.\n          \nExec_Source_Log_Pos\n\n            The position in the current source binary log file to which\n            the replication SQL thread has read and executed, marking\n            the start of the next transaction or event to be processed.\n            This is set to zero for a replication channel with the\n            GTID_ONLY setting after a server start.\n            It will be updated when a transaction is executed or\n            skipped.\n          \n            You can use this value with the CHANGE\n            REPLICATION SOURCE TO statement's\n            SOURCE_LOG_POS option when starting a new\n            replica from an existing replica, so that the new replica\n            reads from this point. The coordinates given by\n            (Relay_Source_Log_File,\n            Exec_Source_Log_Pos) in the source's\n            binary log correspond to the coordinates given by\n            (Relay_Log_File,\n            Relay_Log_Pos) in the relay log.\n          \n            Inconsistencies in the sequence of transactions from the\n            relay log which have been executed can cause this value to\n            be a \u201clow-water mark\u201d. In other words,\n            transactions appearing before the position are guaranteed to\n            have committed, but transactions after the position may have\n            committed or not. If these gaps need to be corrected, use\n            START REPLICA\n            UNTIL SQL_AFTER_MTS_GAPS. See\n            Section\u00a019.5.1.34, \u201cReplication and Transaction Inconsistencies\u201d\n            for more information.\n          \nRelay_Log_Space\n\n            The total combined size of all existing relay log files.\n          \nUntil_Condition,\n            Until_Log_File,\n            Until_Log_Pos\n\n            The values specified in the UNTIL clause\n            of the START\n            REPLICA statement.\n          \nUntil_Condition has these values:\n\n\n\nNone if no UNTIL\n                clause was specified.\n              \nSource if the replica is reading\n                until a given position in the source's binary log.\n              \nRelay if the replica is reading until\n                a given position in its relay log.\n              \nSQL_BEFORE_GTIDS if the replication\n                SQL thread is processing transactions until it has\n                reached the first transaction whose GTID is listed in\n                the gtid_set.\n              \nSQL_AFTER_GTIDS if the replication\n                threads are processing all transactions until the last\n                transaction in the gtid_set has been\n                processed by both threads.\n              \nSQL_AFTER_MTS_GAPS if a multithreaded\n                replica's SQL threads are running until no more gaps are\n                found in the relay log.\n\n\n\nUntil_Log_File and\n            Until_Log_Pos indicate the log file name\n            and position that define the coordinates at which the\n            replication SQL thread stops executing.\n          \n            For more information on UNTIL clauses,\n            see Section\u00a015.4.2.4, \u201cSTART REPLICA Statement\u201d.\n          \nSource_SSL_Allowed,\n            Source_SSL_CA_File,\n            Source_SSL_CA_Path,\n            Source_SSL_Cert,\n            Source_SSL_Cipher,\n            Source_SSL_CRL_File,\n            Source_SSL_CRL_Path,\n            Source_SSL_Key,\n            Source_SSL_Verify_Server_Cert\n\n            These fields show the SSL parameters used by the replica to\n            connect to the source, if any.\n          \nSource_SSL_Allowed has these values:\n\n\n\nYes if an SSL connection to the\n                source is permitted.\n              \nNo if an SSL connection to the source\n                is not permitted.\n              \nIgnored if an SSL connection is\n                permitted but the replica server does not have SSL\n                support enabled.\n\n\n\n            The values of the other SSL-related fields correspond to the\n            values of the SOURCE_SSL_* options of the\n            CHANGE REPLICATION SOURCE TO\n            statement.\n          \nSeconds_Behind_Source\n\n            This field is an indication of how \u201clate\u201d the\n            replica is:\n\n\n\n                When the replica is actively processing updates, this\n                field shows the difference between the current timestamp\n                on the replica and the original timestamp logged on the\n                source for the event currently being processed on the\n                replica.\n              \n                When no event is currently being processed on the\n                replica, this value is 0.\n\n\n\n            In essence, this field measures the time difference in\n            seconds between the replication SQL (applier) thread and the\n            replication I/O (receiver) thread. If the network connection\n            between source and replica is fast, the replication receiver\n            thread is very close to the source, so this field is a good\n            approximation of how late the replication applier thread is\n            compared to the source. If the network is slow, this is\n            not a good approximation; the\n            replication applier thread may quite often be caught up with\n            the slow-reading replication receiver thread, so\n            Seconds_Behind_Source often shows a value\n            of 0, even if the replication receiver thread is late\n            compared to the source. In other words, this\n            column is useful only for fast networks.\n          \n            This time difference computation works even if the source\n            and replica do not have identical clock times, provided that\n            the difference, computed when the replica receiver thread\n            starts, remains constant from then on. Any changes,\n            including NTP updates, can lead to clock skews that can make\n            calculation of Seconds_Behind_Source less\n            reliable.\n          \n            In MySQL 8.4, this field is\n            NULL (undefined or unknown) if the\n            replication applier thread is not running, or if the applier\n            thread has consumed all of the relay log and the replication\n            receiver thread is not running. (In older versions of MySQL,\n            this field was NULL if the replication\n            applier thread or the replication receiver thread was not\n            running or was not connected to the source.) If the\n            replication receiver thread is running but the relay log is\n            exhausted, Seconds_Behind_Source is set\n            to 0.\n          \n            The value of Seconds_Behind_Source is\n            based on the timestamps stored in events, which are\n            preserved through replication. This means that if a source\n            M1 is itself a replica of M0, any event from M1's binary log\n            that originates from M0's binary log has M0's timestamp for\n            that event. This enables MySQL to replicate\n            TIMESTAMP successfully.\n            However, the problem for\n            Seconds_Behind_Source is that if M1 also\n            receives direct updates from clients, the\n            Seconds_Behind_Source value randomly\n            fluctuates because sometimes the last event from M1\n            originates from M0 and sometimes is the result of a direct\n            update on M1.\n          \n            When using a multithreaded replica, you should keep in mind\n            that this value is based on\n            Exec_Source_Log_Pos, and so may not\n            reflect the position of the most recently committed\n            transaction.\n          \nLast_IO_Errno,\n            Last_IO_Error\n\n            The error number and error message of the most recent error\n            that caused the replication I/O (receiver) thread to stop.\n            An error number of 0 and message of the empty string mean\n            \u201cno error.\u201d If the\n            Last_IO_Error value is not empty, the\n            error values also appear in the replica's error log.\n          \n            I/O error information includes a timestamp showing when the\n            most recent I/O (receiver)thread error occurred. This\n            timestamp uses the format YYMMDD\n            hh:mm:ss, and appears in the\n            Last_IO_Error_Timestamp column.\n          \n            Issuing RESET BINARY LOGS AND\n            GTIDS or\n            RESET\n            REPLICA resets the values shown in these columns.\n          \nLast_SQL_Errno,\n            Last_SQL_Error\n\n            The error number and error message of the most recent error\n            that caused the replication SQL (applier) thread to stop. An\n            error number of 0 and message of the empty string mean\n            \u201cno error.\u201d If the\n            Last_SQL_Error value is not empty, the\n            error values also appear in the replica's error log.\n          \n            If the replica is multithreaded, the replication SQL thread\n            is the coordinator for worker threads. In this case, the\n            Last_SQL_Error field shows exactly what\n            the Last_Error_Message column in the\n            Performance Schema\n            replication_applier_status_by_coordinator\n            table shows. The field value is modified to suggest that\n            there may be more failures in the other worker threads which\n            can be seen in the\n            replication_applier_status_by_worker\n            table that shows each worker thread's status. If that table\n            is not available, the replica error log can be used. The log\n            or the\n            replication_applier_status_by_worker\n            table should also be used to learn more about the failure\n            shown by\n            SHOW\n            REPLICA STATUS or the coordinator table.\n          \n            SQL error information includes a timestamp showing when the\n            most recent SQL (applier) thread error occurred. This\n            timestamp uses the format YYMMDD\n            hh:mm:ss, and appears in the\n            Last_SQL_Error_Timestamp column.\n          \n            Issuing RESET BINARY LOGS AND\n            GTIDS or\n            RESET\n            REPLICA resets the values shown in these columns.\n          \n            In MySQL 8.4, all error codes and messages\n            displayed in the Last_SQL_Errno and\n            Last_SQL_Error columns correspond to\n            error values listed in\n            Server Error Message Reference. This was not\n            always true in previous versions. (Bug #11760365, Bug\n            #52768)\n          \nReplicate_Ignore_Server_Ids\n\n            Any server IDs that have been specified using the\n            IGNORE_SERVER_IDS option of the\n            CHANGE REPLICATION SOURCE TO\n            statement, so that the replica ignores events from these\n            servers. This option is used in a circular or other\n            multi-source replication setup when one of the servers is\n            removed. If any server IDs have been set in this way, a\n            comma-delimited list of one or more numbers is shown. If no\n            server IDs have been set, the field is blank.\n\n\n\nNote\n\n\n              The Ignored_server_ids value in the\n              slave_master_info table also shows the\n              server IDs to be ignored, but as a space-delimited list,\n              preceded by the total number of server IDs to be ignored.\n              For example, if a CHANGE REPLICATION\n              SOURCE TO statement containing the\n              IGNORE_SERVER_IDS = (2,6,9) option has\n              been issued to tell a replica to ignore sources having the\n              server ID 2, 6, or 9, that information appears as shown\n              here:\n            Press CTRL+C to copy \tReplicate_Ignore_Server_Ids: 2, 6, 9Press CTRL+C to copy \tIgnored_server_ids: 3, 2, 6, 9\n\n\nReplicate_Ignore_Server_Ids filtering is\n            performed by the I/O (receiver) thread, rather than by the\n            SQL (applier) thread, which means that events which are\n            filtered out are not written to the relay log. This differs\n            from the filtering actions taken by server options such\n            --replicate-do-table, which\n            apply to the applier thread.\n          \n            If SET gtid_mode=ON is issued when any\n            channel has existing server IDs set with\n            IGNORE_SERVER_IDS, the\n            statement is rejected with an error. Before starting\n            GTID-based replication, use SHOW\n            REPLICA STATUS to check for and clear all ignored\n            server ID lists on the servers involved. You can clear a\n            list by issuing a CHANGE REPLICATION\n            SOURCE TO statement using\n            IGNORE_SERVER_IDS=()\u2014that is, with\n            an empty list of server IDs.\n          \nSource_Server_Id\n\n            The server_id value from\n            the source.\n          \nSource_UUID\n\n            The server_uuid value from\n            the source.\n          \nSource_Info_File\n\n            The location of the master.info file,\n            the use of which is now deprecated. By default, a table is\n            used instead for the replica's connection metadata\n            repository.\n          \nSQL_Delay\n\n            The number of seconds that the replica must lag the source.\n          \nSQL_Remaining_Delay\n\n            When Replica_SQL_Running_State is\n            Waiting until SOURCE_DELAY seconds after source\n            executed event, this field contains the number of\n            delay seconds remaining. At other times, this field is\n            NULL.\n          \nReplica_SQL_Running_State\n\n            The state of the SQL thread (analogous to\n            Replica_IO_State). The value is identical\n            to the State value of the SQL thread as\n            displayed by SHOW\n            PROCESSLIST.\n            Section\u00a010.14.6, \u201cReplication SQL Thread States\u201d, provides a\n            listing of possible states.\n          \nSource_Retry_Count\n\n            The number of times the replica can attempt to reconnect to\n            the source in the event of a lost connection. This value can\n            be set using the SOURCE_RETRY_COUNT\n            option of the CHANGE REPLICATION SOURCE\n            TO statement.\n          \nSource_Bind\n\n            The network interface that the replica is bound to, if any.\n            This is set using the SOURCE_BIND option\n            for the CHANGE REPLICATION SOURCE\n            TO statement.\n          \nLast_IO_Error_Timestamp\n\n            A timestamp in YYMMDD hh:mm:ss\n            format that shows when the most recent I/O error took place.\n          \nLast_SQL_Error_Timestamp\n\n            A timestamp in YYMMDD hh:mm:ss\n            format that shows when the most recent SQL error occurred.\n          \nRetrieved_Gtid_Set\n\n            The set of global transaction IDs corresponding to all\n            transactions received by this replica. Empty if GTIDs are\n            not in use. See\n            GTID Sets for\n            more information.\n          \n            This is the set of all GTIDs that exist or have existed in\n            the relay logs. Each GTID is added as soon as the\n            Gtid_log_event is received. This can\n            cause partially transmitted transactions to have their GTIDs\n            included in the set.\n          \n            When all relay logs are lost due to executing\n            RESET REPLICA or\n            CHANGE REPLICATION SOURCE TO,\n            or due to the effects of the\n            --relay-log-recovery option,\n            the set is cleared. When\n            relay_log_purge = 1, the\n            newest relay log is always kept, and the set is not cleared.\n          \nExecuted_Gtid_Set\n\n            The set of global transaction IDs written in the binary log.\n            This is the same as the value for the global\n            gtid_executed system\n            variable on this server, as well as the value for\n            Executed_Gtid_Set in the output of\n            SHOW BINARY LOG STATUS on\n            this server. Empty if GTIDs are not in use. See\n            GTID Sets for\n            more information.\n          \nAuto_Position\n\n            1 if GTID auto-positioning is in use for the channel,\n            otherwise 0.\n          \nReplicate_Rewrite_DB\n\n            The Replicate_Rewrite_DB value displays\n            any replication filtering rules that were specified. For\n            example, if the following replication filter rule was set:\n          Press CTRL+C to copy CHANGE REPLICATION FILTER REPLICATE_REWRITE_DB=((db1,db2), (db3,db4));\n            the Replicate_Rewrite_DB value displays:\n          Press CTRL+C to copy Replicate_Rewrite_DB: (db1,db2),(db3,db4)\n            For more information, see\n            Section\u00a015.4.2.1, \u201cCHANGE REPLICATION FILTER Statement\u201d.\n          \nChannel_name\n\n            The replication channel which is being displayed. There is\n            always a default replication channel, and more replication\n            channels can be added. See\n            Section\u00a019.2.2, \u201cReplication Channels\u201d for more information.\n          \nMaster_TLS_Version\n\n            The TLS version used on the source. For TLS version\n            information, see\n            Section\u00a08.3.2, \u201cEncrypted Connection TLS Protocols and Ciphers\u201d.\n          \nSource_public_key_path\n\n            The path name to a file containing a replica-side copy of\n            the public key required by the source for RSA key pair-based\n            password exchange. The file must be in PEM format. This\n            column applies to replicas that authenticate with the\n            sha256_password (deprecated) or\n            caching_sha2_password authentication\n            plugin.\n          \n            If Source_public_key_path is given and\n            specifies a valid public key file, it takes precedence over\n            Get_source_public_key.\n          \nGet_source_public_key\n\n            Whether to request from the source the public key required\n            for RSA key pair-based password exchange. This column\n            applies to replicas that authenticate with the\n            caching_sha2_password authentication\n            plugin. For that plugin, the source does not send the public\n            key unless requested.\n          \n            If Source_public_key_path is given and\n            specifies a valid public key file, it takes precedence over\n            Get_source_public_key.\n          \nNetwork_Namespace\n\n            The network namespace name; empty if the connection uses the\n            default (global) namespace. For information about network\n            namespaces, see Section\u00a07.1.14, \u201cNetwork Namespace Support\u201d.\n\n"], "Examples": ["mysql> SHOW REPLICA STATUS\\G\n*************************** 1. row ***************************\n             Replica_IO_State: Waiting for source to send event\n                  Source_Host: 127.0.0.1\n                  Source_User: root\n                  Source_Port: 13000\n                Connect_Retry: 1\n              Source_Log_File: master-bin.000001\n          Read_Source_Log_Pos: 927\n               Relay_Log_File: slave-relay-bin.000002\n                Relay_Log_Pos: 1145\n        Relay_Source_Log_File: master-bin.000001\n           Replica_IO_Running: Yes\n          Replica_SQL_Running: Yes\n              Replicate_Do_DB:\n          Replicate_Ignore_DB:\n           Replicate_Do_Table:\n       Replicate_Ignore_Table:\n      Replicate_Wild_Do_Table:\n  Replicate_Wild_Ignore_Table:\n                   Last_Errno: 0\n                   Last_Error:\n                 Skip_Counter: 0\n          Exec_Source_Log_Pos: 927\n              Relay_Log_Space: 1355\n              Until_Condition: None\n               Until_Log_File:\n                Until_Log_Pos: 0\n           Source_SSL_Allowed: No\n           Source_SSL_CA_File:\n           Source_SSL_CA_Path:\n              Source_SSL_Cert:\n            Source_SSL_Cipher:\n               Source_SSL_Key:\n        Seconds_Behind_Source: 0\nSource_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error:\n               Last_SQL_Errno: 0\n               Last_SQL_Error:\n  Replicate_Ignore_Server_Ids:\n             Source_Server_Id: 1\n                  Source_UUID: 73f86016-978b-11ee-ade5-8d2a2a562feb\n             Source_Info_File: mysql.slave_master_info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n    Replica_SQL_Running_State: Replica has read all relay log; waiting for more updates\n           Source_Retry_Count: 10\n                  Source_Bind:\n      Last_IO_Error_Timestamp:\n     Last_SQL_Error_Timestamp:\n               Source_SSL_Crl:\n           Source_SSL_Crlpath:\n           Retrieved_Gtid_Set: 73f86016-978b-11ee-ade5-8d2a2a562feb:1-3\n            Executed_Gtid_Set: 73f86016-978b-11ee-ade5-8d2a2a562feb:1-3\n                Auto_Position: 1\n         Replicate_Rewrite_DB:\n                 Channel_Name:\n           Source_TLS_Version:\n       Source_public_key_path:\n        Get_Source_public_key: 0\n            Network_Namespace:", "CHANGE REPLICATION FILTER REPLICATE_REWRITE_DB=((db1,db2), (db3,db4));"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-replicas.html"], "Title": ["15.7.7.35 SHOW REPLICAS Statement"], "Feature": ["SHOW REPLICAS"], "Description": ["\n        Displays a list of replicas currently registered with the\n        source. SHOW REPLICAS requires the\n        REPLICATION SLAVE privilege.\n      ", "\nSHOW REPLICAS should be executed on a server\n        that acts as a replication source. The statement displays\n        information about servers that are or have been connected as\n        replicas, with each row of the result corresponding to one\n        replica server, as shown here:\n      ", "Press CTRL+C to copy mysql> SHOW REPLICAS;\n+------------+-----------+------+-----------+--------------------------------------+\n| Server_id  | Host      | Port | Source_id | Replica_UUID                         |\n+------------+-----------+------+-----------+--------------------------------------+\n|         10 | iconnect2 | 3306 |         3 | 14cb6624-7f93-11e0-b2c0-c80aa9429562 |\n|         21 | athena    | 3306 |         3 | 07af4990-f41f-11df-a566-7ac56fdaf645 |\n+------------+-----------+------+-----------+--------------------------------------+", "\n\nServer_id: The unique server ID of the\n            replica server, as configured in the replica server's\n            option file, or on the command line with\n            --server-id=value.\n          \nHost: The host name of the replica\n            server, as specified on the replica with the\n            --report-host option. This\n            can differ from the machine name as configured in the\n            operating system.\n          \nUser: The replica server user name, as\n            specified on the replica with the\n            --report-user option.\n            Statement output includes this column only if the source\n            server is started with the\n            --show-replica-auth-info\n            option.\n          \nPassword: The replica server password, as\n            specified on the replica with the\n            --report-password option.\n            Statement output includes this column only if the source\n            server is started with the\n            --show-replica-auth-info\n            option.\n          \nPort: The port on the source to which the\n            replica server is listening, as specified on the replica\n            with the --report-port\n            option.\n          \n            A zero in this column means that the replica port\n            (--report-port) was not set.\n          \nSource_id: The unique server ID of the\n            source server that the replica server is replicating from.\n            This is the server ID of the server on which SHOW\n            REPLICAS is executed, so this same value is listed\n            for each row in the result.\n          \n\nReplica_UUID: The globally unique ID of\n            this replica, as generated on the replica and found in the\n            replica's auto.cnf file.\n\n"], "Examples": ["mysql> SHOW REPLICAS;\n+------------+-----------+------+-----------+--------------------------------------+\n| Server_id  | Host      | Port | Source_id | Replica_UUID                         |\n+------------+-----------+------+-----------+--------------------------------------+\n|         10 | iconnect2 | 3306 |         3 | 14cb6624-7f93-11e0-b2c0-c80aa9429562 |\n|         21 | athena    | 3306 |         3 | 07af4990-f41f-11df-a566-7ac56fdaf645 |\n+------------+-----------+------+-----------+--------------------------------------+"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-status.html"], "Title": ["15.7.7.36 SHOW STATUS Statement"], "Feature": ["SHOW [GLOBAL | SESSION] STATUS\n    [LIKE 'pattern' | WHERE expr]"], "Description": ["\nSHOW STATUS provides server\n        status information (see\n        Section\u00a07.1.10, \u201cServer Status Variables\u201d). This statement does\n        not require any privilege. It requires only the ability to\n        connect to the server.\n      ", "\n        Status variable information is also available from these\n        sources:\n", "\n\n            Performance Schema tables. See\n            Section\u00a029.12.15, \u201cPerformance Schema Status Variable Tables\u201d.\n          \n            The mysqladmin extended-status command.\n            See Section\u00a06.5.2, \u201cmysqladmin \u2014 A MySQL Server Administration Program\u201d.\n\n", "\n        For SHOW STATUS, a\n        LIKE clause, if present, indicates\n        which variable names to match. A WHERE clause\n        can be given to select rows using more general conditions, as\n        discussed in Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ", "\nSHOW STATUS accepts an optional\n        GLOBAL or SESSION variable\n        scope modifier:\n", "\n\n            With a GLOBAL modifier, the statement\n            displays the global status values. A global status variable\n            may represent status for some aspect of the server itself\n            (for example, Aborted_connects), or the\n            aggregated status over all connections to MySQL (for\n            example, Bytes_received and\n            Bytes_sent). If a variable has no global\n            value, the session value is displayed.\n          \n            With a SESSION modifier, the statement\n            displays the status variable values for the current\n            connection. If a variable has no session value, the global\n            value is displayed. LOCAL is a synonym\n            for SESSION.\n          \n            If no modifier is present, the default is\n            SESSION.\n\n", "\n        The scope for each status variable is listed at\n        Section\u00a07.1.10, \u201cServer Status Variables\u201d.\n      ", "\n        Each invocation of the SHOW\n        STATUS statement uses an internal temporary table and\n        increments the global\n        Created_tmp_tables value.\n      ", "\n        Partial output is shown here. The list of names and values may\n        differ for your server. The meaning of each variable is given in\n        Section\u00a07.1.10, \u201cServer Status Variables\u201d.\n      ", "Press CTRL+C to copy mysql> SHOW STATUS;\n+--------------------------+------------+\n| Variable_name            | Value      |\n+--------------------------+------------+\n| Aborted_clients          | 0          |\n| Aborted_connects         | 0          |\n| Bytes_received           | 155372598  |\n| Bytes_sent               | 1176560426 |\n| Connections              | 30023      |\n| Created_tmp_disk_tables  | 0          |\n| Created_tmp_tables       | 8340       |\n| Created_tmp_files        | 60         |\n...\n| Open_tables              | 1          |\n| Open_files               | 2          |\n| Open_streams             | 0          |\n| Opened_tables            | 44600      |\n| Questions                | 2026873    |\n...\n| Table_locks_immediate    | 1920382    |\n| Table_locks_waited       | 0          |\n| Threads_cached           | 0          |\n| Threads_created          | 30022      |\n| Threads_connected        | 1          |\n| Threads_running          | 1          |\n| Uptime                   | 80380      |\n+--------------------------+------------+", "\n        With a LIKE clause, the statement\n        displays only rows for those variables with names that match the\n        pattern:\n      ", "Press CTRL+C to copy mysql> SHOW STATUS LIKE 'Key%';\n+--------------------+----------+\n| Variable_name      | Value    |\n+--------------------+----------+\n| Key_blocks_used    | 14955    |\n| Key_read_requests  | 96854827 |\n| Key_reads          | 162040   |\n| Key_write_requests | 7589728  |\n| Key_writes         | 3813196  |\n+--------------------+----------+"], "Examples": ["mysql> SHOW STATUS;\n+--------------------------+------------+\n| Variable_name            | Value      |\n+--------------------------+------------+\n| Aborted_clients          | 0          |\n| Aborted_connects         | 0          |\n| Bytes_received           | 155372598  |\n| Bytes_sent               | 1176560426 |\n| Connections              | 30023      |\n| Created_tmp_disk_tables  | 0          |\n| Created_tmp_tables       | 8340       |\n| Created_tmp_files        | 60         |\n...\n| Open_tables              | 1          |\n| Open_files               | 2          |\n| Open_streams             | 0          |\n| Opened_tables            | 44600      |\n| Questions                | 2026873    |\n...\n| Table_locks_immediate    | 1920382    |\n| Table_locks_waited       | 0          |\n| Threads_cached           | 0          |\n| Threads_created          | 30022      |\n| Threads_connected        | 1          |\n| Threads_running          | 1          |\n| Uptime                   | 80380      |\n+--------------------------+------------+", "mysql> SHOW STATUS LIKE 'Key%';\n+--------------------+----------+\n| Variable_name      | Value    |\n+--------------------+----------+\n| Key_blocks_used    | 14955    |\n| Key_read_requests  | 96854827 |\n| Key_reads          | 162040   |\n| Key_write_requests | 7589728  |\n| Key_writes         | 3813196  |\n+--------------------+----------+"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-table-status.html"], "Title": ["15.7.7.37 SHOW TABLE STATUS Statement"], "Feature": ["SHOW TABLE STATUS\n    [{FROM | IN} db_name]\n    [LIKE 'pattern' | WHERE expr]"], "Description": ["\nSHOW TABLE STATUS works like\n        SHOW TABLES, but provides a lot\n        of information about each non-TEMPORARY\n        table. You can also get this list using the mysqlshow\n        --status db_name command.\n        The LIKE clause, if present,\n        indicates which table names to match. The\n        WHERE clause can be given to select rows\n        using more general conditions, as discussed in\n        Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ", "\n        This statement also displays information about views.\n      ", "\nSHOW TABLE STATUS output has\n        these columns:\n", "\n\nName\n\n            The name of the table.\n          \nEngine\n\n            The storage engine for the table. See\n            Chapter\u00a017, The InnoDB Storage Engine, and\n            Chapter\u00a018, Alternative Storage Engines.\n          \n            For partitioned tables, Engine shows the\n            name of the storage engine used by all partitions.\n          \nVersion\n\n            This column is unused. With the removal of\n            .frm files in MySQL 8.0, this column\n            now reports a hardcoded value of 10,\n            which was the last .frm file version\n            used in MySQL 5.7.\n          \nRow_format\n\n            The row-storage format (Fixed,\n            Dynamic, Compressed,\n            Redundant, Compact).\n            For MyISAM tables,\n            Dynamic corresponds to what\n            myisamchk -dvv reports as\n            Packed.\n          \nRows\n\n            The number of rows. Some storage engines, such as\n            MyISAM, store the exact count. For other\n            storage engines, such as InnoDB, this\n            value is an approximation, and may vary from the actual\n            value by as much as 40% to 50%. In such cases, use\n            SELECT COUNT(*) to obtain an accurate\n            count.\n          \n            The Rows value is NULL\n            for INFORMATION_SCHEMA tables.\n          \n            For InnoDB tables, the row\n            count is only a rough estimate used in SQL optimization.\n            (This is also true if the\n            InnoDB table is partitioned.)\n          \nAvg_row_length\n\n            The average row length.\n          \nData_length\n\n            For MyISAM,\n            Data_length is the length of the data\n            file, in bytes.\n          \n            For InnoDB,\n            Data_length is the approximate amount of\n            space allocated for the clustered index, in bytes.\n            Specifically, it is the clustered index size, in pages,\n            multiplied by the InnoDB page size.\n          \n            Refer to the notes at the end of this section for\n            information regarding other storage engines.\n          \nMax_data_length\n\n            For MyISAM,\n            Max_data_length is maximum length of the\n            data file. This is the total number of bytes of data that\n            can be stored in the table, given the data pointer size\n            used.\n          \n            Unused for InnoDB.\n          \n            Refer to the notes at the end of this section for\n            information regarding other storage engines.\n          \nIndex_length\n\n            For MyISAM,\n            Index_length is the length of the index\n            file, in bytes.\n          \n            For InnoDB,\n            Index_length is the approximate amount of\n            space allocated for non-clustered indexes, in bytes.\n            Specifically, it is the sum of non-clustered index sizes, in\n            pages, multiplied by the InnoDB page\n            size.\n          \n            Refer to the notes at the end of this section for\n            information regarding other storage engines.\n          \nData_free\n\n            The number of allocated but unused bytes.\n          \nInnoDB tables report the free space of\n            the tablespace to which the table belongs. For a table\n            located in the shared tablespace, this is the free space of\n            the shared tablespace. If you are using multiple tablespaces\n            and the table has its own tablespace, the free space is for\n            only that table. Free space means the number of bytes in\n            completely free extents minus a safety margin. Even if free\n            space displays as 0, it may be possible to insert rows as\n            long as new extents need not be allocated.\n          \n            For NDB Cluster, Data_free shows the\n            space allocated on disk for, but not used by, a Disk Data\n            table or fragment on disk. (In-memory data resource usage is\n            reported by the Data_length column.)\n          \n            For partitioned tables, this value is only an estimate and\n            may not be absolutely correct. A more accurate method of\n            obtaining this information in such cases is to query the\n            INFORMATION_SCHEMA\nPARTITIONS table, as shown in\n            this example:\n          Press CTRL+C to copy SELECT SUM(DATA_FREE)\n    FROM  INFORMATION_SCHEMA.PARTITIONS\n    WHERE TABLE_SCHEMA = 'mydb'\n    AND   TABLE_NAME   = 'mytable';\n            For more information, see\n            Section\u00a028.3.21, \u201cThe INFORMATION_SCHEMA PARTITIONS Table\u201d.\n          \nAuto_increment\n\n            The next AUTO_INCREMENT value.\n          \nCreate_time\n\n            When the table was created.\n          \nUpdate_time\n\n            When the data file was last updated. For some storage\n            engines, this value is NULL. For example,\n            InnoDB stores multiple tables in its\n            system\n            tablespace and the data file timestamp does not\n            apply. Even with\n            file-per-table\n            mode with each InnoDB table in a separate\n            .ibd file,\n            change\n            buffering can delay the write to the data file, so\n            the file modification time is different from the time of the\n            last insert, update, or delete. For\n            MyISAM, the data file timestamp is used;\n            however, on Windows the timestamp is not updated by updates,\n            so the value is inaccurate.\n          \nUpdate_time displays a timestamp value\n            for the last UPDATE,\n            INSERT, or\n            DELETE performed on\n            InnoDB tables that are not partitioned.\n            For MVCC, the timestamp value reflects the\n            COMMIT time, which is\n            considered the last update time. Timestamps are not\n            persisted when the server is restarted or when the table is\n            evicted from the InnoDB data dictionary\n            cache.\n          \nCheck_time\n\n            When the table was last checked. Not all storage engines\n            update this time, in which case, the value is always\n            NULL.\n          \n            For partitioned InnoDB tables,\n            Check_time is always\n            NULL.\n          \nCollation\n\n            The table default collation. The output does not explicitly\n            list the table default character set, but the collation name\n            begins with the character set name.\n          \nChecksum\n\n            The live checksum value, if any.\n          \nCreate_options\n\n            Extra options used with CREATE\n            TABLE.\n          \nCreate_options shows\n            partitioned for a partitioned table.\n          \nCreate_options shows the\n            ENCRYPTION clause for file-per-table\n            tablespaces if the table is encrypted or if the specified\n            encryption differs from the schema encryption. The\n            encryption clause is not shown for tables created in general\n            tablespaces. To identify encrypted file-per-table and\n            general tablespaces, query the\n            INNODB_TABLESPACES\nENCRYPTION column.\n          \n            When creating a table with\n            strict mode\n            disabled, the storage engine's default row format is\n            used if the specified row format is not supported. The\n            actual row format of the table is reported in the\n            Row_format column.\n            Create_options shows the row format that\n            was specified in the CREATE\n            TABLE statement.\n          \n            When altering the storage engine of a table, table options\n            that are not applicable to the new storage engine are\n            retained in the table definition to enable reverting the\n            table with its previously defined options to the original\n            storage engine, if necessary.\n            Create_options may show retained options.\n          \nComment\n\n            The comment used when creating the table (or information as\n            to why MySQL could not access the table information).\n\n", "Notes", "\n\n            For InnoDB tables,\n            SHOW TABLE STATUS does not\n            give accurate statistics except for the physical size\n            reserved by the table. The row count is only a rough\n            estimate used in SQL optimization.\n          \n            For NDB tables, the output of\n            this statement shows appropriate values for the\n            Avg_row_length and\n            Data_length columns, with the exception\n            that BLOB columns are not\n            taken into account.\n          \n            For NDB tables,\n            Data_length includes data stored in main\n            memory only; the Max_data_length and\n            Data_free columns apply to Disk Data.\n          \n            For NDB Cluster Disk Data tables,\n            Max_data_length shows the space allocated\n            for the disk part of a Disk Data table or fragment.\n            (In-memory data resource usage is reported by the\n            Data_length column.)\n          \n            For MEMORY tables, the\n            Data_length,\n            Max_data_length, and\n            Index_length values approximate the\n            actual amount of allocated memory. The allocation algorithm\n            reserves memory in large amounts to reduce the number of\n            allocation operations.\n          \n            For views, most columns displayed by\n            SHOW TABLE STATUS are 0 or\n            NULL except that Name\n            indicates the view name, Create_time\n            indicates the creation time, and Comment\n            says VIEW.\n\n", "\n        Table information is also available from the\n        INFORMATION_SCHEMA\nTABLES table. See\n        Section\u00a028.3.38, \u201cThe INFORMATION_SCHEMA TABLES Table\u201d.\n"], "Examples": ["SELECT SUM(DATA_FREE)\n    FROM  INFORMATION_SCHEMA.PARTITIONS\n    WHERE TABLE_SCHEMA = 'mydb'\n    AND   TABLE_NAME   = 'mytable';"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-tables.html"], "Title": ["15.7.7.38 SHOW TABLES Statement"], "Feature": ["SHOW [EXTENDED] [FULL] TABLES\n    [{FROM | IN} db_name]\n    [LIKE 'pattern' | WHERE expr]"], "Description": ["\nSHOW TABLES lists the\n        non-TEMPORARY tables in a given database. You\n        can also get this list using the mysqlshow\n        db_name command. The\n        LIKE clause, if present, indicates\n        which table names to match. The WHERE clause\n        can be given to select rows using more general conditions, as\n        discussed in Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ", "\n        Matching performed by the LIKE clause is\n        dependent on the setting of the\n        lower_case_table_names system\n        variable.\n      ", "\n        The optional EXTENDED modifier causes\n        SHOW TABLES to list hidden tables\n        created by failed ALTER TABLE\n        statements. These temporary tables have names beginning with\n        #sql and can be dropped using\n        DROP TABLE.\n      ", "\n        This statement also lists any views in the database. The\n        optional FULL modifier causes\n        SHOW TABLES to display a second\n        output column with values of BASE TABLE for a\n        table, VIEW for a view, or SYSTEM\n        VIEW for an INFORMATION_SCHEMA\n        table.\n      ", "\n        If you have no privileges for a base table or view, it does not\n        show up in the output from SHOW\n        TABLES or mysqlshow db_name.\n      ", "\n        Table information is also available from the\n        INFORMATION_SCHEMA\nTABLES table. See\n        Section\u00a028.3.38, \u201cThe INFORMATION_SCHEMA TABLES Table\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-triggers.html"], "Title": ["15.7.7.39 SHOW TRIGGERS Statement"], "Feature": ["SHOW TRIGGERS\n    [{FROM | IN} db_name]\n    [LIKE 'pattern' | WHERE expr]", "mysql> SHOW TRIGGERS LIKE 'acc%'\\G\n*************************** 1. row ***************************\n             Trigger: ins_sum\n               Event: INSERT\n               Table: account\n           Statement: SET @sum = @sum + NEW.amount\n              Timing: BEFORE\n             Created: 2018-08-08 10:10:12.61\n            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,\n                      NO_ZERO_IN_DATE,NO_ZERO_DATE,\n                      ERROR_FOR_DIVISION_BY_ZERO,\n                      NO_ENGINE_SUBSTITUTION\n             Definer: me@localhost\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci\n  Database Collation: utf8mb4_0900_ai_ci"], "Description": ["\nSHOW TRIGGERS lists the triggers\n        currently defined for tables in a database (the default database\n        unless a FROM clause is given). This\n        statement returns results only for databases and tables for\n        which you have the TRIGGER\n        privilege. The LIKE clause, if\n        present, indicates which table names (not trigger names) to\n        match and causes the statement to display triggers for those\n        tables. The WHERE clause can be given to\n        select rows using more general conditions, as discussed in\n        Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ", "\n        For the ins_sum trigger defined in\n        Section\u00a027.3, \u201cUsing Triggers\u201d, the output of\n        SHOW TRIGGERS is as shown here:\n      ", "\nSHOW TRIGGERS output has these\n        columns:\n", "\n\nTrigger\n\n            The name of the trigger.\n          \nEvent\n\n            The trigger event. This is the type of operation on the\n            associated table for which the trigger activates. The value\n            is INSERT (a row was inserted),\n            DELETE (a row was deleted), or\n            UPDATE (a row was modified).\n          \nTable\n\n            The table for which the trigger is defined.\n          \nStatement\n\n            The trigger body; that is, the statement executed when the\n            trigger activates.\n          \nTiming\n\n            Whether the trigger activates before or after the triggering\n            event. The value is BEFORE or\n            AFTER.\n          \nCreated\n\n            The date and time when the trigger was created. This is a\n            TIMESTAMP(2) value (with a fractional\n            part in hundredths of seconds) for triggers.\n          \nsql_mode\n\n            The SQL mode in effect when the trigger was created, and\n            under which the trigger executes. For the permitted values,\n            see Section\u00a07.1.11, \u201cServer SQL Modes\u201d.\n          \nDefiner\n\n            The account of the user who created the trigger, in\n            'user_name'@'host_name'\n            format.\n          \ncharacter_set_client\n\n            The session value of the\n            character_set_client system\n            variable when the trigger was created.\n          \ncollation_connection\n\n            The session value of the\n            collation_connection system\n            variable when the trigger was created.\n          \nDatabase Collation\n\n            The collation of the database with which the trigger is\n            associated.\n\n", "\n        Trigger information is also available from the\n        INFORMATION_SCHEMA\nTRIGGERS table. See\n        Section\u00a028.3.44, \u201cThe INFORMATION_SCHEMA TRIGGERS Table\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-character-set.html"], "Title": ["15.7.7.4 SHOW CHARACTER SET Statement"], "Feature": ["SHOW {CHARACTER SET | CHARSET}\n    [LIKE 'pattern' | WHERE expr]"], "Description": ["\n        The SHOW CHARACTER SET statement\n        shows all available character sets. The\n        LIKE clause, if present, indicates\n        which character set names to match. The WHERE\n        clause can be given to select rows using more general\n        conditions, as discussed in Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d. For\n        example:\n      ", "Press CTRL+C to copy mysql> SHOW CHARACTER SET LIKE 'latin%';\n+---------+-----------------------------+-------------------+--------+\n| Charset | Description                 | Default collation | Maxlen |\n+---------+-----------------------------+-------------------+--------+\n| latin1  | cp1252 West European        | latin1_swedish_ci |      1 |\n| latin2  | ISO 8859-2 Central European | latin2_general_ci |      1 |\n| latin5  | ISO 8859-9 Turkish          | latin5_turkish_ci |      1 |\n| latin7  | ISO 8859-13 Baltic          | latin7_general_ci |      1 |\n+---------+-----------------------------+-------------------+--------+", "\nSHOW CHARACTER SET output has\n        these columns:\n", "\n\nCharset\n\n            The character set name.\n          \nDescription\n\n            A description of the character set.\n          \nDefault collation\n\n            The default collation for the character set.\n          \nMaxlen\n\n            The maximum number of bytes required to store one character.\n\n", "\n        The filename character set is for internal\n        use only; consequently, SHOW CHARACTER\n        SET does not display it.\n      ", "\n        Character set information is also available from the\n        INFORMATION_SCHEMA\nCHARACTER_SETS table.\n"], "Examples": ["mysql> SHOW CHARACTER SET LIKE 'latin%';\n+---------+-----------------------------+-------------------+--------+\n| Charset | Description                 | Default collation | Maxlen |\n+---------+-----------------------------+-------------------+--------+\n| latin1  | cp1252 West European        | latin1_swedish_ci |      1 |\n| latin2  | ISO 8859-2 Central European | latin2_general_ci |      1 |\n| latin5  | ISO 8859-9 Turkish          | latin5_turkish_ci |      1 |\n| latin7  | ISO 8859-13 Baltic          | latin7_general_ci |      1 |\n+---------+-----------------------------+-------------------+--------+"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-variables.html"], "Title": ["15.7.7.40 SHOW VARIABLES Statement"], "Feature": ["SHOW [GLOBAL | SESSION] VARIABLES\n    [LIKE 'pattern' | WHERE expr]"], "Description": ["\nSHOW VARIABLES shows the values\n        of MySQL system variables (see\n        Section\u00a07.1.8, \u201cServer System Variables\u201d). This statement does\n        not require any privilege. It requires only the ability to\n        connect to the server.\n      ", "\n        System variable information is also available from these\n        sources:\n", "\n\n            Performance Schema tables. See\n            Section\u00a029.12.14, \u201cPerformance Schema System Variable Tables\u201d.\n          \n            The mysqladmin variables command. See\n            Section\u00a06.5.2, \u201cmysqladmin \u2014 A MySQL Server Administration Program\u201d.\n\n", "\n        For SHOW VARIABLES, a\n        LIKE clause, if present, indicates\n        which variable names to match. A WHERE clause\n        can be given to select rows using more general conditions, as\n        discussed in Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ", "\nSHOW VARIABLES accepts an\n        optional GLOBAL or SESSION\n        variable scope modifier:\n", "\n\n            With a GLOBAL modifier, the statement\n            displays global system variable values. These are the values\n            used to initialize the corresponding session variables for\n            new connections to MySQL. If a variable has no global value,\n            no value is displayed.\n          \n            With a SESSION modifier, the statement\n            displays the system variable values that are in effect for\n            the current connection. If a variable has no session value,\n            the global value is displayed. LOCAL is a\n            synonym for SESSION.\n          \n            If no modifier is present, the default is\n            SESSION.\n\n", "\n        The scope for each system variable is listed at\n        Section\u00a07.1.8, \u201cServer System Variables\u201d.\n      ", "\nSHOW VARIABLES is subject to a\n        version-dependent display-width limit. For variables with very\n        long values that are not completely displayed, use\n        SELECT as a workaround. For\n        example:\n      ", "Press CTRL+C to copy SELECT @@GLOBAL.innodb_data_file_path;", "\n        Most system variables can be set at server startup (read-only\n        variables such as\n        version_comment are\n        exceptions). Many can be changed at runtime with the\n        SET\n        statement. See Section\u00a07.1.9, \u201cUsing System Variables\u201d, and\n        Section\u00a015.7.6.1, \u201cSET Syntax for Variable Assignment\u201d.\n      ", "\n        Partial output is shown here. The list of names and values may\n        differ for your server.\n        Section\u00a07.1.8, \u201cServer System Variables\u201d, describes the meaning\n        of each variable, and Section\u00a07.1.1, \u201cConfiguring the Server\u201d,\n        provides information about tuning them.\n      ", "Press CTRL+C to copy mysql> SHOW VARIABLES;\n+-------------------------------------------------------+-----------------------+\n| Variable_name                                         | Value                 |\n+-------------------------------------------------------+-----------------------+\n| activate_all_roles_on_login                           | OFF                   |\n| admin_address                                         |                       |\n| admin_port                                            | 33062                 |\n| admin_ssl_ca                                          |                       |\n| admin_ssl_capath                                      |                       |\n| admin_ssl_cert                                        |                       |\n| admin_ssl_cipher                                      |                       |\n| admin_ssl_crl                                         |                       |\n| admin_ssl_crlpath                                     |                       |\n| admin_ssl_key                                         |                       |\n| admin_tls_ciphersuites                                |                       |\n| admin_tls_version                                     | TLSv1.2,TLSv1.3       |\n| authentication_policy                                 | *,,                   |\n| auto_generate_certs                                   | ON                    |\n| auto_increment_increment                              | 1                     |\n| auto_increment_offset                                 | 1                     |\n| autocommit                                            | ON                    |\n| automatic_sp_privileges                               | ON                    |\n| avoid_temporal_upgrade                                | OFF                   |\n| back_log                                              | 151                   |\n| basedir                                               | /local/mysql-8.4/     |\n| big_tables                                            | OFF                   |\n| bind_address                                          | 127.0.0.1             |\n| binlog_cache_size                                     | 32768                 |\n| binlog_checksum                                       | CRC32                 |\n| binlog_direct_non_transactional_updates               | OFF                   |\n| binlog_encryption                                     | OFF                   |\n| binlog_error_action                                   | ABORT_SERVER          |\n| binlog_expire_logs_auto_purge                         | ON                    |\n| binlog_expire_logs_seconds                            | 2592000               |\n        \n...        \n        \n| max_error_count                                       | 1024                  |\n| max_execution_time                                    | 0                     |\n| max_heap_table_size                                   | 16777216              |\n| max_insert_delayed_threads                            | 20                    |\n| max_join_size                                         | 18446744073709551615  |\n| max_length_for_sort_data                              | 4096                  |\n| max_points_in_geometry                                | 65536                 |\n| max_prepared_stmt_count                               | 16382                 |\n| max_relay_log_size                                    | 0                     |\n| max_seeks_for_key                                     | 18446744073709551615  |\n| max_sort_length                                       | 1024                  |\n| max_sp_recursion_depth                                | 0                     |\n| max_user_connections                                  | 0                     |\n| max_write_lock_count                                  | 18446744073709551615  |\n\n...\n\n| time_zone                                             | SYSTEM                |\n| timestamp                                             | 1682684938.710453     |\n| tls_certificates_enforced_validation                  | OFF                   |\n| tls_ciphersuites                                      |                       |\n| tls_version                                           | TLSv1.2,TLSv1.3       |\n| tmp_table_size                                        | 16777216              |\n| tmpdir                                                | /tmp                  |\n| transaction_alloc_block_size                          | 8192                  |\n| transaction_allow_batching                            | OFF                   |\n| transaction_isolation                                 | REPEATABLE-READ       |\n| transaction_prealloc_size                             | 4096                  |\n| transaction_read_only                                 | OFF                   |\n| unique_checks                                         | ON                    |\n| updatable_views_with_limit                            | YES                   |\n| use_secondary_engine                                  | ON                    |\n| version                                               | 8.4.0                 |\n| version_comment                                       | Source distribution   |\n| version_compile_machine                               | x86_64                |\n| version_compile_os                                    | Linux                 |\n| version_compile_zlib                                  | 1.2.13                |\n| wait_timeout                                          | 28800                 |\n| warning_count                                         | 0                     |\n| windowing_use_high_precision                          | ON                    |\n| xa_detach_on_prepare                                  | ON                    |\n+-------------------------------------------------------+-----------------------+", "\n        With a LIKE clause, the statement\n        displays only rows for those variables with names that match the\n        pattern. To obtain the row for a specific variable, use a\n        LIKE clause as shown:\n      ", "Press CTRL+C to copy SHOW VARIABLES LIKE 'max_join_size';\nSHOW SESSION VARIABLES LIKE 'max_join_size';", "\n        To get a list of variables whose name match a pattern, use the\n        % wildcard character in a\n        LIKE clause:\n      ", "Press CTRL+C to copy SHOW VARIABLES LIKE '%size%';\nSHOW GLOBAL VARIABLES LIKE '%size%';", "\n        Wildcard characters can be used in any position within the\n        pattern to be matched. Strictly speaking, because\n        _ is a wildcard that matches any single\n        character, you should escape it as \\_ to\n        match it literally. In practice, this is rarely necessary.\n"], "Examples": ["SELECT @@GLOBAL.innodb_data_file_path;", "mysql> SHOW VARIABLES;\n+-------------------------------------------------------+-----------------------+\n| Variable_name                                         | Value                 |\n+-------------------------------------------------------+-----------------------+\n| activate_all_roles_on_login                           | OFF                   |\n| admin_address                                         |                       |\n| admin_port                                            | 33062                 |\n| admin_ssl_ca                                          |                       |\n| admin_ssl_capath                                      |                       |\n| admin_ssl_cert                                        |                       |\n| admin_ssl_cipher                                      |                       |\n| admin_ssl_crl                                         |                       |\n| admin_ssl_crlpath                                     |                       |\n| admin_ssl_key                                         |                       |\n| admin_tls_ciphersuites                                |                       |\n| admin_tls_version                                     | TLSv1.2,TLSv1.3       |\n| authentication_policy                                 | *,,                   |\n| auto_generate_certs                                   | ON                    |\n| auto_increment_increment                              | 1                     |\n| auto_increment_offset                                 | 1                     |\n| autocommit                                            | ON                    |\n| automatic_sp_privileges                               | ON                    |\n| avoid_temporal_upgrade                                | OFF                   |\n| back_log                                              | 151                   |\n| basedir                                               | /local/mysql-8.4/     |\n| big_tables                                            | OFF                   |\n| bind_address                                          | 127.0.0.1             |\n| binlog_cache_size                                     | 32768                 |\n| binlog_checksum                                       | CRC32                 |\n| binlog_direct_non_transactional_updates               | OFF                   |\n| binlog_encryption                                     | OFF                   |\n| binlog_error_action                                   | ABORT_SERVER          |\n| binlog_expire_logs_auto_purge                         | ON                    |\n| binlog_expire_logs_seconds                            | 2592000               |\n        \n...        \n        \n| max_error_count                                       | 1024                  |\n| max_execution_time                                    | 0                     |\n| max_heap_table_size                                   | 16777216              |\n| max_insert_delayed_threads                            | 20                    |\n| max_join_size                                         | 18446744073709551615  |\n| max_length_for_sort_data                              | 4096                  |\n| max_points_in_geometry                                | 65536                 |\n| max_prepared_stmt_count                               | 16382                 |\n| max_relay_log_size                                    | 0                     |\n| max_seeks_for_key                                     | 18446744073709551615  |\n| max_sort_length                                       | 1024                  |\n| max_sp_recursion_depth                                | 0                     |\n| max_user_connections                                  | 0                     |\n| max_write_lock_count                                  | 18446744073709551615  |\n\n...\n\n| time_zone                                             | SYSTEM                |\n| timestamp                                             | 1682684938.710453     |\n| tls_certificates_enforced_validation                  | OFF                   |\n| tls_ciphersuites                                      |                       |\n| tls_version                                           | TLSv1.2,TLSv1.3       |\n| tmp_table_size                                        | 16777216              |\n| tmpdir                                                | /tmp                  |\n| transaction_alloc_block_size                          | 8192                  |\n| transaction_allow_batching                            | OFF                   |\n| transaction_isolation                                 | REPEATABLE-READ       |\n| transaction_prealloc_size                             | 4096                  |\n| transaction_read_only                                 | OFF                   |\n| unique_checks                                         | ON                    |\n| updatable_views_with_limit                            | YES                   |\n| use_secondary_engine                                  | ON                    |\n| version                                               | 8.4.0                 |\n| version_comment                                       | Source distribution   |\n| version_compile_machine                               | x86_64                |\n| version_compile_os                                    | Linux                 |\n| version_compile_zlib                                  | 1.2.13                |\n| wait_timeout                                          | 28800                 |\n| warning_count                                         | 0                     |\n| windowing_use_high_precision                          | ON                    |\n| xa_detach_on_prepare                                  | ON                    |\n+-------------------------------------------------------+-----------------------+", "SHOW VARIABLES LIKE 'max_join_size';\nSHOW SESSION VARIABLES LIKE 'max_join_size';", "SHOW VARIABLES LIKE '%size%';\nSHOW GLOBAL VARIABLES LIKE '%size%';"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-warnings.html"], "Title": ["15.7.7.41 SHOW WARNINGS Statement"], "Feature": ["SHOW WARNINGS [LIMIT [offset,] row_count]\nSHOW COUNT(*) WARNINGS"], "Description": ["\nSHOW WARNINGS is a diagnostic\n        statement that displays information about the conditions\n        (errors, warnings, and notes) resulting from executing a\n        statement in the current session. Warnings are generated for DML\n        statements such as INSERT,\n        UPDATE, and\n        LOAD DATA as well as DDL\n        statements such as CREATE TABLE\n        and ALTER TABLE.\n      ", "\n        The LIMIT clause has the same syntax as for\n        the SELECT statement. See\n        Section\u00a015.2.13, \u201cSELECT Statement\u201d.\n      ", "\nSHOW WARNINGS is also used\n        following EXPLAIN, to display the\n        extended information generated by\n        EXPLAIN. See\n        Section\u00a010.8.3, \u201cExtended EXPLAIN Output Format\u201d.\n      ", "\nSHOW WARNINGS displays\n        information about the conditions resulting from execution of the\n        most recent nondiagnostic statement in the current session. If\n        the most recent statement resulted in an error during parsing,\n        SHOW WARNINGS shows the resulting\n        conditions, regardless of statement type (diagnostic or\n        nondiagnostic).\n      ", "\n        The SHOW COUNT(*)\n        WARNINGS diagnostic statement displays the total\n        number of errors, warnings, and notes. You can also retrieve\n        this number from the\n        warning_count system variable:\n      ", "Press CTRL+C to copy SHOW COUNT(*) WARNINGS;\nSELECT @@warning_count;", "\n        A difference in these statements is that the first is a\n        diagnostic statement that does not clear the message list. The\n        second, because it is a SELECT\n        statement is considered nondiagnostic and does clear the message\n        list.\n      ", "\n        A related diagnostic statement, SHOW\n        ERRORS, shows only error conditions (it excludes\n        warnings and notes), and\n        SHOW COUNT(*)\n        ERRORS statement displays the total number of errors.\n        See Section\u00a015.7.7.18, \u201cSHOW ERRORS Statement\u201d. GET\n        DIAGNOSTICS can be used to examine information for\n        individual conditions. See Section\u00a015.6.7.3, \u201cGET DIAGNOSTICS Statement\u201d.\n      ", "\n        Here is a simple example that shows data-conversion warnings for\n        INSERT. The example assumes that\n        strict SQL mode is disabled. With strict mode enabled, the\n        warnings would become errors and terminate the\n        INSERT.\n      ", "Press CTRL+C to copy mysql> CREATE TABLE t1 (a TINYINT NOT NULL, b CHAR(4));\nQuery OK, 0 rows affected (0.05 sec)\n\nmysql> INSERT INTO t1 VALUES(10,'mysql'), (NULL,'test'), (300,'xyz');\nQuery OK, 3 rows affected, 3 warnings (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 3\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1265\nMessage: Data truncated for column 'b' at row 1\n*************************** 2. row ***************************\n  Level: Warning\n   Code: 1048\nMessage: Column 'a' cannot be null\n*************************** 3. row ***************************\n  Level: Warning\n   Code: 1264\nMessage: Out of range value for column 'a' at row 3\n3 rows in set (0.00 sec)", "\n        The max_error_count system\n        variable controls the maximum number of error, warning, and note\n        messages for which the server stores information, and thus the\n        number of messages that SHOW\n        WARNINGS displays. To change the number of messages\n        the server can store, change the value of\n        max_error_count.\n      ", "\nmax_error_count controls only\n        how many messages are stored, not how many are counted. The\n        value of warning_count is not\n        limited by max_error_count,\n        even if the number of messages generated exceeds\n        max_error_count. The following\n        example demonstrates this. The ALTER\n        TABLE statement produces three warning messages\n        (strict SQL mode is disabled for the example to prevent an error\n        from occurring after a single conversion issue). Only one\n        message is stored and displayed because\n        max_error_count has been set to\n        1, but all three are counted (as shown by the value of\n        warning_count):\n      ", "Press CTRL+C to copy mysql> SHOW VARIABLES LIKE 'max_error_count';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| max_error_count | 1024  |\n+-----------------+-------+\n1 row in set (0.00 sec)\n\nmysql> SET max_error_count=1, sql_mode = '';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> ALTER TABLE t1 MODIFY b CHAR;\nQuery OK, 3 rows affected, 3 warnings (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 3\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1263 | Data truncated for column 'b' at row 1 |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT @@warning_count;\n+-----------------+\n| @@warning_count |\n+-----------------+\n|               3 |\n+-----------------+\n1 row in set (0.01 sec)", "\n        To disable message storage, set\n        max_error_count to 0. In this\n        case, warning_count still\n        indicates how many warnings occurred, but messages are not\n        stored and cannot be displayed.\n      ", "\n        The sql_notes system variable\n        controls whether note messages increment\n        warning_count and whether the\n        server stores them. By default,\n        sql_notes is 1, but if set to\n        0, notes do not increment\n        warning_count and the server\n        does not store them:\n      ", "Press CTRL+C to copy mysql> SET sql_notes = 1;\nmysql> DROP TABLE IF EXISTS test.no_such_table;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\nmysql> SHOW WARNINGS;\n+-------+------+------------------------------------+\n| Level | Code | Message                            |\n+-------+------+------------------------------------+\n| Note  | 1051 | Unknown table 'test.no_such_table' |\n+-------+------+------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SET sql_notes = 0;\nmysql> DROP TABLE IF EXISTS test.no_such_table;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SHOW WARNINGS;\nEmpty set (0.00 sec)", "\n        The MySQL server sends to each client a count indicating the\n        total number of errors, warnings, and notes resulting from the\n        most recent statement executed by that client. From the C API,\n        this value can be obtained by calling\n        mysql_warning_count(). See\n        mysql_warning_count().\n      ", "\n        In the mysql client, you can enable and\n        disable automatic warnings display using the\n        warnings and nowarning\n        commands, respectively, or their shortcuts,\n        \\W and \\w (see\n        Section\u00a06.5.1.2, \u201cmysql Client Commands\u201d). For example:\n      ", "Press CTRL+C to copy mysql> \\W\nShow warnings enabled.\nmysql> SELECT 1/0;\n+------+\n| 1/0  |\n+------+\n| NULL |\n+------+\n1 row in set, 1 warning (0.03 sec)\n\nWarning (Code 1365): Division by 0\nmysql> \\w\nShow warnings disabled."], "Examples": ["SHOW COUNT(*) WARNINGS;\nSELECT @@warning_count;", "mysql> CREATE TABLE t1 (a TINYINT NOT NULL, b CHAR(4));\nQuery OK, 0 rows affected (0.05 sec)\n\nmysql> INSERT INTO t1 VALUES(10,'mysql'), (NULL,'test'), (300,'xyz');\nQuery OK, 3 rows affected, 3 warnings (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 3\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1265\nMessage: Data truncated for column 'b' at row 1\n*************************** 2. row ***************************\n  Level: Warning\n   Code: 1048\nMessage: Column 'a' cannot be null\n*************************** 3. row ***************************\n  Level: Warning\n   Code: 1264\nMessage: Out of range value for column 'a' at row 3\n3 rows in set (0.00 sec)", "mysql> SHOW VARIABLES LIKE 'max_error_count';\n+-----------------+-------+\n| Variable_name   | Value |\n+-----------------+-------+\n| max_error_count | 1024  |\n+-----------------+-------+\n1 row in set (0.00 sec)\n\nmysql> SET max_error_count=1, sql_mode = '';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> ALTER TABLE t1 MODIFY b CHAR;\nQuery OK, 3 rows affected, 3 warnings (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 3\n\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level   | Code | Message                                |\n+---------+------+----------------------------------------+\n| Warning | 1263 | Data truncated for column 'b' at row 1 |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT @@warning_count;\n+-----------------+\n| @@warning_count |\n+-----------------+\n|               3 |\n+-----------------+\n1 row in set (0.01 sec)", "mysql> SET sql_notes = 1;\nmysql> DROP TABLE IF EXISTS test.no_such_table;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\nmysql> SHOW WARNINGS;\n+-------+------+------------------------------------+\n| Level | Code | Message                            |\n+-------+------+------------------------------------+\n| Note  | 1051 | Unknown table 'test.no_such_table' |\n+-------+------+------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SET sql_notes = 0;\nmysql> DROP TABLE IF EXISTS test.no_such_table;\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SHOW WARNINGS;\nEmpty set (0.00 sec)", "mysql> \\W\nShow warnings enabled.\nmysql> SELECT 1/0;\n+------+\n| 1/0  |\n+------+\n| NULL |\n+------+\n1 row in set, 1 warning (0.03 sec)\n\nWarning (Code 1365): Division by 0\nmysql> \\w\nShow warnings disabled."], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-collation.html"], "Title": ["15.7.7.5 SHOW COLLATION Statement"], "Feature": ["SHOW COLLATION\n    [LIKE 'pattern' | WHERE expr]"], "Description": ["\n        This statement lists collations supported by the server. By\n        default, the output from SHOW\n        COLLATION includes all available collations. The\n        LIKE clause, if present, indicates\n        which collation names to match. The WHERE\n        clause can be given to select rows using more general\n        conditions, as discussed in Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d. For\n        example:\n      ", "Press CTRL+C to copy mysql> SHOW COLLATION WHERE Charset = 'latin1';\n+-------------------+---------+----+---------+----------+---------+\n| Collation         | Charset | Id | Default | Compiled | Sortlen |\n+-------------------+---------+----+---------+----------+---------+\n| latin1_german1_ci | latin1  |  5 |         | Yes      |       1 |\n| latin1_swedish_ci | latin1  |  8 | Yes     | Yes      |       1 |\n| latin1_danish_ci  | latin1  | 15 |         | Yes      |       1 |\n| latin1_german2_ci | latin1  | 31 |         | Yes      |       2 |\n| latin1_bin        | latin1  | 47 |         | Yes      |       1 |\n| latin1_general_ci | latin1  | 48 |         | Yes      |       1 |\n| latin1_general_cs | latin1  | 49 |         | Yes      |       1 |\n| latin1_spanish_ci | latin1  | 94 |         | Yes      |       1 |\n+-------------------+---------+----+---------+----------+---------+", "\nSHOW COLLATION output has these\n        columns:\n", "\n\nCollation\n\n            The collation name.\n          \nCharset\n\n            The name of the character set with which the collation is\n            associated.\n          \nId\n\n            The collation ID.\n          \nDefault\n\n            Whether the collation is the default for its character set.\n          \nCompiled\n\n            Whether the character set is compiled into the server.\n          \nSortlen\n\n            This is related to the amount of memory required to sort\n            strings expressed in the character set.\n\n", "\n        To see the default collation for each character set, use the\n        following statement. Default is a reserved\n        word, so to use it as an identifier, it must be quoted as such:\n      ", "Press CTRL+C to copy mysql> SHOW COLLATION WHERE `Default` = 'Yes';\n+---------------------+----------+----+---------+----------+---------+\n| Collation           | Charset  | Id | Default | Compiled | Sortlen |\n+---------------------+----------+----+---------+----------+---------+\n| big5_chinese_ci     | big5     |  1 | Yes     | Yes      |       1 |\n| dec8_swedish_ci     | dec8     |  3 | Yes     | Yes      |       1 |\n| cp850_general_ci    | cp850    |  4 | Yes     | Yes      |       1 |\n| hp8_english_ci      | hp8      |  6 | Yes     | Yes      |       1 |\n| koi8r_general_ci    | koi8r    |  7 | Yes     | Yes      |       1 |\n| latin1_swedish_ci   | latin1   |  8 | Yes     | Yes      |       1 |\n...", "\n        Collation information is also available from the\n        INFORMATION_SCHEMA\nCOLLATIONS table. See\n        Section\u00a028.3.6, \u201cThe INFORMATION_SCHEMA COLLATIONS Table\u201d.\n"], "Examples": ["mysql> SHOW COLLATION WHERE Charset = 'latin1';\n+-------------------+---------+----+---------+----------+---------+\n| Collation         | Charset | Id | Default | Compiled | Sortlen |\n+-------------------+---------+----+---------+----------+---------+\n| latin1_german1_ci | latin1  |  5 |         | Yes      |       1 |\n| latin1_swedish_ci | latin1  |  8 | Yes     | Yes      |       1 |\n| latin1_danish_ci  | latin1  | 15 |         | Yes      |       1 |\n| latin1_german2_ci | latin1  | 31 |         | Yes      |       2 |\n| latin1_bin        | latin1  | 47 |         | Yes      |       1 |\n| latin1_general_ci | latin1  | 48 |         | Yes      |       1 |\n| latin1_general_cs | latin1  | 49 |         | Yes      |       1 |\n| latin1_spanish_ci | latin1  | 94 |         | Yes      |       1 |\n+-------------------+---------+----+---------+----------+---------+", "mysql> SHOW COLLATION WHERE `Default` = 'Yes';\n+---------------------+----------+----+---------+----------+---------+\n| Collation           | Charset  | Id | Default | Compiled | Sortlen |\n+---------------------+----------+----+---------+----------+---------+\n| big5_chinese_ci     | big5     |  1 | Yes     | Yes      |       1 |\n| dec8_swedish_ci     | dec8     |  3 | Yes     | Yes      |       1 |\n| cp850_general_ci    | cp850    |  4 | Yes     | Yes      |       1 |\n| hp8_english_ci      | hp8      |  6 | Yes     | Yes      |       1 |\n| koi8r_general_ci    | koi8r    |  7 | Yes     | Yes      |       1 |\n| latin1_swedish_ci   | latin1   |  8 | Yes     | Yes      |       1 |\n..."], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-columns.html"], "Title": ["15.7.7.6 SHOW COLUMNS Statement"], "Feature": ["SHOW [EXTENDED] [FULL] {COLUMNS | FIELDS}\n    {FROM | IN} tbl_name\n    [{FROM | IN} db_name]\n    [LIKE 'pattern' | WHERE expr]"], "Description": ["\nSHOW COLUMNS displays information\n        about the columns in a given table. It also works for views.\n        SHOW COLUMNS displays information\n        only for those columns for which you have some privilege.\n      ", "Press CTRL+C to copy mysql> SHOW COLUMNS FROM City;\n+-------------+----------+------+-----+---------+----------------+\n| Field       | Type     | Null | Key | Default | Extra          |\n+-------------+----------+------+-----+---------+----------------+\n| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name        | char(35) | NO   |     |         |                |\n| CountryCode | char(3)  | NO   | MUL |         |                |\n| District    | char(20) | NO   |     |         |                |\n| Population  | int(11)  | NO   |     | 0       |                |\n+-------------+----------+------+-----+---------+----------------+", "\n        An alternative to tbl_name\n        FROM db_name syntax is\n        db_name.tbl_name. These two\n        statements are equivalent:\n      ", "Press CTRL+C to copy SHOW COLUMNS FROM mytable FROM mydb;\nSHOW COLUMNS FROM mydb.mytable;", "\n        The optional EXTENDED keyword causes the\n        output to include information about hidden columns that MySQL\n        uses internally and are not accessible by users.\n      ", "\n        The optional FULL keyword causes the output\n        to include the column collation and comments, as well as the\n        privileges you have for each column.\n      ", "\n        The LIKE clause, if present,\n        indicates which column names to match. The\n        WHERE clause can be given to select rows\n        using more general conditions, as discussed in\n        Section\u00a028.8, \u201cExtensions to SHOW Statements\u201d.\n      ", "\n        The data types may differ from what you expect them to be based\n        on a CREATE TABLE statement\n        because MySQL sometimes changes data types when you create or\n        alter a table. The conditions under which this occurs are\n        described in Section\u00a015.1.20.7, \u201cSilent Column Specification Changes\u201d.\n      ", "\nSHOW COLUMNS displays the\n        following values for each table column:\n", "\n\nField\n\n            The name of the column.\n          \nType\n\n            The column data type.\n          \nCollation\n\n            The collation for nonbinary string columns, or\n            NULL for other columns. This value is\n            displayed only if you use the FULL\n            keyword.\n          \nNull\n\n            The column nullability. The value is YES\n            if NULL values can be stored in the\n            column, NO if not.\n          \nKey\n\n            Whether the column is indexed:\n\n\n\n                If Key is empty, the column either is\n                not indexed or is indexed only as a secondary column in\n                a multiple-column, nonunique index.\n              \n                If Key is PRI, the\n                column is a PRIMARY KEY or is one of\n                the columns in a multiple-column PRIMARY\n                KEY.\n              \n                If Key is UNI, the\n                column is the first column of a\n                UNIQUE index. (A\n                UNIQUE index permits multiple\n                NULL values, but you can tell whether\n                the column permits NULL by checking\n                the Null field.)\n              \n                If Key is MUL, the\n                column is the first column of a nonunique index in which\n                multiple occurrences of a given value are permitted\n                within the column.\n\n\n\n            If more than one of the Key values\n            applies to a given column of a table, Key\n            displays the one with the highest priority, in the order\n            PRI, UNI,\n            MUL.\n          \n            A UNIQUE index may be displayed as\n            PRI if it cannot contain\n            NULL values and there is no\n            PRIMARY KEY in the table. A\n            UNIQUE index may display as\n            MUL if several columns form a composite\n            UNIQUE index; although the combination of\n            the columns is unique, each column can still hold multiple\n            occurrences of a given value.\n          \nDefault\n\n            The default value for the column. This is\n            NULL if the column has an explicit\n            default of NULL, or if the column\n            definition includes no DEFAULT clause.\n          \nExtra\n\n            Any additional information that is available about a given\n            column. The value is nonempty in these cases:\n\n\n\nauto_increment for columns that have\n                the AUTO_INCREMENT attribute.\n              \non update CURRENT_TIMESTAMP for\n                TIMESTAMP or\n                DATETIME columns that\n                have the ON UPDATE CURRENT_TIMESTAMP\n                attribute.\n              \nVIRTUAL GENERATED or STORED\n                GENERATED for generated columns.\n              \nDEFAULT_GENERATED for columns that\n                have an expression default value.\n\n\n\nPrivileges\n\n            The privileges you have for the column. This value is\n            displayed only if you use the FULL\n            keyword.\n          \nComment\n\n            Any comment included in the column definition. This value is\n            displayed only if you use the FULL\n            keyword.\n\n", "\n        Table column information is also available from the\n        INFORMATION_SCHEMA\nCOLUMNS table. See\n        Section\u00a028.3.8, \u201cThe INFORMATION_SCHEMA COLUMNS Table\u201d. The extended\n        information about hidden columns is available only using\n        SHOW EXTENDED COLUMNS; it cannot be obtained\n        from the COLUMNS table.\n      ", "\n        You can list a table's columns with the mysqlshow\n        db_name\ntbl_name command.\n      ", "\n        The DESCRIBE statement provides\n        information similar to SHOW\n        COLUMNS. See Section\u00a015.8.1, \u201cDESCRIBE Statement\u201d.\n      ", "\n        The SHOW CREATE TABLE,\n        SHOW TABLE STATUS, and\n        SHOW INDEX statements also\n        provide information about tables. See Section\u00a015.7.7, \u201cSHOW Statements\u201d.\n      ", "\nSHOW COLUMNS includes the table's\n        generated invisible primary key, if it has one, by default. You\n        can cause this information to be suppressed in the\n        statement's output by setting\n        show_gipk_in_create_table_and_information_schema\n        = OFF. For more information, see\n        Section\u00a015.1.20.11, \u201cGenerated Invisible Primary Keys\u201d.\n"], "Examples": ["mysql> SHOW COLUMNS FROM City;\n+-------------+----------+------+-----+---------+----------------+\n| Field       | Type     | Null | Key | Default | Extra          |\n+-------------+----------+------+-----+---------+----------------+\n| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |\n| Name        | char(35) | NO   |     |         |                |\n| CountryCode | char(3)  | NO   | MUL |         |                |\n| District    | char(20) | NO   |     |         |                |\n| Population  | int(11)  | NO   |     | 0       |                |\n+-------------+----------+------+-----+---------+----------------+", "SHOW COLUMNS FROM mytable FROM mydb;\nSHOW COLUMNS FROM mydb.mytable;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-create-database.html"], "Title": ["15.7.7.7 SHOW CREATE DATABASE Statement"], "Feature": ["SHOW CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name", "mysql> SHOW CREATE DATABASE test\\G\n*************************** 1. row ***************************\n       Database: test\nCreate Database: CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET utf8mb4\n                 COLLATE utf8mb4_0900_ai_ci */ /*!80014 DEFAULT ENCRYPTION='N' */\n\nmysql> SHOW CREATE SCHEMA test\\G\n*************************** 1. row ***************************\n       Database: test\nCreate Database: CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER SET utf8mb4\n                 COLLATE utf8mb4_0900_ai_ci */ /*!80014 DEFAULT ENCRYPTION='N' */"], "Description": ["\n        Shows the CREATE DATABASE\n        statement that creates the named database. If the\n        SHOW statement includes an IF NOT\n        EXISTS clause, the output too includes such a clause.\n        SHOW\n        CREATE SCHEMA is a synonym for\n        SHOW CREATE DATABASE.\n      ", "\nSHOW CREATE DATABASE quotes table\n        and column names according to the value of the\n        sql_quote_show_create option.\n        See Section\u00a07.1.8, \u201cServer System Variables\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-create-event.html"], "Title": ["15.7.7.8 SHOW CREATE EVENT Statement"], "Feature": ["SHOW CREATE EVENT event_name"], "Description": ["\n        This statement displays the CREATE\n        EVENT statement needed to re-create a given event. It\n        requires the EVENT privilege for\n        the database from which the event is to be shown. For example\n        (using the same event e_daily defined and\n        then altered in Section\u00a015.7.7.19, \u201cSHOW EVENTS Statement\u201d):\n      ", "Press CTRL+C to copy mysql> SHOW CREATE EVENT myschema.e_daily\\G\n*************************** 1. row ***************************\n               Event: e_daily\n            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,\n                      NO_ZERO_IN_DATE,NO_ZERO_DATE,\n                      ERROR_FOR_DIVISION_BY_ZERO,\n                      NO_ENGINE_SUBSTITUTION\n           time_zone: SYSTEM\n        Create Event: CREATE DEFINER=`jon`@`ghidora` EVENT `e_daily`\n                        ON SCHEDULE EVERY 1 DAY\n                        STARTS CURRENT_TIMESTAMP + INTERVAL 6 HOUR\n                        ON COMPLETION NOT PRESERVE\n                        ENABLE\n                        COMMENT 'Saves total number of sessions then\n                                clears the table each day'\n                        DO BEGIN\n                          INSERT INTO site_activity.totals (time, total)\n                            SELECT CURRENT_TIMESTAMP, COUNT(*)\n                              FROM site_activity.sessions;\n                          DELETE FROM site_activity.sessions;\n                        END\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci\n  Database Collation: utf8mb4_0900_ai_ci", "\ncharacter_set_client is the session value of\n        the character_set_client system\n        variable when the event was created.\n        collation_connection is the session value of\n        the collation_connection system\n        variable when the event was created. Database\n        Collation is the collation of the database with which\n        the event is associated.\n      ", "\n        The output reflects the current status of the event\n        (ENABLE) rather than the status with which it\n        was created.\n"], "Examples": ["mysql> SHOW CREATE EVENT myschema.e_daily\\G\n*************************** 1. row ***************************\n               Event: e_daily\n            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,\n                      NO_ZERO_IN_DATE,NO_ZERO_DATE,\n                      ERROR_FOR_DIVISION_BY_ZERO,\n                      NO_ENGINE_SUBSTITUTION\n           time_zone: SYSTEM\n        Create Event: CREATE DEFINER=`jon`@`ghidora` EVENT `e_daily`\n                        ON SCHEDULE EVERY 1 DAY\n                        STARTS CURRENT_TIMESTAMP + INTERVAL 6 HOUR\n                        ON COMPLETION NOT PRESERVE\n                        ENABLE\n                        COMMENT 'Saves total number of sessions then\n                                clears the table each day'\n                        DO BEGIN\n                          INSERT INTO site_activity.totals (time, total)\n                            SELECT CURRENT_TIMESTAMP, COUNT(*)\n                              FROM site_activity.sessions;\n                          DELETE FROM site_activity.sessions;\n                        END\ncharacter_set_client: utf8mb4\ncollation_connection: utf8mb4_0900_ai_ci\n  Database Collation: utf8mb4_0900_ai_ci"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/show-create-function.html"], "Title": ["15.7.7.9 SHOW CREATE FUNCTION Statement"], "Feature": ["SHOW CREATE FUNCTION func_name"], "Description": ["\n        This statement is similar to SHOW CREATE\n        PROCEDURE but for stored functions. See\n        Section\u00a015.7.7.10, \u201cSHOW CREATE PROCEDURE Statement\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/binlog.html"], "Title": ["15.7.8.1 BINLOG Statement"], "Feature": ["BINLOG 'str'"], "Description": ["\nBINLOG is an internal-use\n        statement. It is generated by the mysqlbinlog\n        program as the printable representation of certain events in\n        binary log files. (See Section\u00a06.6.9, \u201cmysqlbinlog \u2014 Utility for Processing Binary Log Files\u201d.) The\n        'str' value is a\n        base 64-encoded string the that server decodes to determine the\n        data change indicated by the corresponding event.\n      ", "\n        To execute BINLOG statements when\n        applying mysqlbinlog output, a user account\n        requires the BINLOG_ADMIN\n        privilege (or the deprecated\n        SUPER privilege), or the\n        REPLICATION_APPLIER privilege\n        plus the appropriate privileges to execute each log event.\n      ", "\n        This statement can execute only format description events and\n        row events.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/cache-index.html"], "Title": ["15.7.8.2 CACHE INDEX Statement"], "Feature": ["CACHE INDEX {\n      tbl_index_list [, tbl_index_list] ...\n    | tbl_name PARTITION (partition_list)\n  }\n  IN key_cache_name\n\ntbl_index_list:\n  tbl_name [{INDEX|KEY} (index_name[, index_name] ...)]\n\npartition_list: {\n    partition_name[, partition_name] ...\n  | ALL\n}"], "Description": ["\n        The CACHE INDEX statement assigns\n        table indexes to a specific key cache. It applies only to\n        MyISAM tables, including partitioned\n        MyISAM tables. After the indexes have been\n        assigned, they can be preloaded into the cache if desired with\n        LOAD INDEX INTO\n        CACHE.\n      ", "\n        The following statement assigns indexes from the tables\n        t1, t2, and\n        t3 to the key cache named\n        hot_cache:\n      ", "Press CTRL+C to copy mysql> CACHE INDEX t1, t2, t3 IN hot_cache;\n+---------+--------------------+----------+----------+\n| Table   | Op                 | Msg_type | Msg_text |\n+---------+--------------------+----------+----------+\n| test.t1 | assign_to_keycache | status   | OK       |\n| test.t2 | assign_to_keycache | status   | OK       |\n| test.t3 | assign_to_keycache | status   | OK       |\n+---------+--------------------+----------+----------+", "\n        The syntax of CACHE INDEX enables\n        you to specify that only particular indexes from a table should\n        be assigned to the cache. However, the implementation assigns\n        all the table's indexes to the cache, so there is no reason to\n        specify anything other than the table name.\n      ", "\n        The key cache referred to in a CACHE\n        INDEX statement can be created by setting its size\n        with a parameter setting statement or in the server parameter\n        settings. For example:\n      ", "Press CTRL+C to copy SET GLOBAL keycache1.key_buffer_size=128*1024;", "\n        Key cache parameters are accessed as members of a structured\n        system variable. See\n        Section\u00a07.1.9.5, \u201cStructured System Variables\u201d.\n      ", "\n        A key cache must exist before you assign indexes to it, or an\n        error occurs:\n      ", "Press CTRL+C to copy mysql> CACHE INDEX t1 IN non_existent_cache;\nERROR 1284 (HY000): Unknown key cache 'non_existent_cache'", "\n        By default, table indexes are assigned to the main (default) key\n        cache created at the server startup. When a key cache is\n        destroyed, all indexes assigned to it are reassigned to the\n        default key cache.\n      ", "\n        Index assignment affects the server globally: If one client\n        assigns an index to a given cache, this cache is used for all\n        queries involving the index, no matter which client issues the\n        queries.\n      ", "\nCACHE INDEX is supported for\n        partitioned MyISAM tables. You can assign one\n        or more indexes for one, several, or all partitions to a given\n        key cache. For example, you can do the following:\n      ", "Press CTRL+C to copy CREATE TABLE pt (c1 INT, c2 VARCHAR(50), INDEX i(c1))\n    ENGINE=MyISAM\n    PARTITION BY HASH(c1)\n    PARTITIONS 4;\n\nSET GLOBAL kc_fast.key_buffer_size = 128 * 1024;\nSET GLOBAL kc_slow.key_buffer_size = 128 * 1024;\n\nCACHE INDEX pt PARTITION (p0) IN kc_fast;\nCACHE INDEX pt PARTITION (p1, p3) IN kc_slow;", "\n        The previous set of statements performs the following actions:\n", "\n\n            Creates a partitioned table with 4 partitions; these\n            partitions are automatically named p0,\n            ..., p3; this table has an index named\n            i on column c1.\n          \n            Creates 2 key caches named kc_fast and\n            kc_slow\n\n            Assigns the index for partition p0 to the\n            kc_fast key cache and the index for\n            partitions p1 and p3\n            to the kc_slow key cache; the index for\n            the remaining partition (p2) uses the\n            server's default key cache.\n\n", "\n        If you wish instead to assign the indexes for all partitions in\n        table pt to a single key cache named\n        kc_all, you can use either of the following\n        two statements:\n      ", "Press CTRL+C to copy CACHE INDEX pt PARTITION (ALL) IN kc_all;\n\nCACHE INDEX pt IN kc_all;", "\n        The two statements just shown are equivalent, and issuing either\n        one has exactly the same effect. In other words, if you wish to\n        assign indexes for all partitions of a partitioned table to the\n        same key cache, the PARTITION (ALL) clause is\n        optional.\n      ", "\n        When assigning indexes for multiple partitions to a key cache,\n        the partitions need not be contiguous, and you need not list\n        their names in any particular order. Indexes for any partitions\n        not explicitly assigned to a key cache automatically use the\n        server default key cache.\n      ", "\n        Index preloading is also supported for partitioned\n        MyISAM tables. For more information, see\n        Section\u00a015.7.8.5, \u201cLOAD INDEX INTO CACHE Statement\u201d.\n"], "Examples": ["mysql> CACHE INDEX t1, t2, t3 IN hot_cache;\n+---------+--------------------+----------+----------+\n| Table   | Op                 | Msg_type | Msg_text |\n+---------+--------------------+----------+----------+\n| test.t1 | assign_to_keycache | status   | OK       |\n| test.t2 | assign_to_keycache | status   | OK       |\n| test.t3 | assign_to_keycache | status   | OK       |\n+---------+--------------------+----------+----------+", "SET GLOBAL keycache1.key_buffer_size=128*1024;", "mysql> CACHE INDEX t1 IN non_existent_cache;\nERROR 1284 (HY000): Unknown key cache 'non_existent_cache'", "CREATE TABLE pt (c1 INT, c2 VARCHAR(50), INDEX i(c1))\n    ENGINE=MyISAM\n    PARTITION BY HASH(c1)\n    PARTITIONS 4;\n\nSET GLOBAL kc_fast.key_buffer_size = 128 * 1024;\nSET GLOBAL kc_slow.key_buffer_size = 128 * 1024;\n\nCACHE INDEX pt PARTITION (p0) IN kc_fast;\nCACHE INDEX pt PARTITION (p1, p3) IN kc_slow;", "CACHE INDEX pt PARTITION (ALL) IN kc_all;\n\nCACHE INDEX pt IN kc_all;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/flush.html"], "Title": ["15.7.8.3 FLUSH Statement"], "Feature": ["FLUSH [NO_WRITE_TO_BINLOG | LOCAL] {\n    flush_option [, flush_option] ...\n  | tables_option\n}\n\nflush_option: {\n    BINARY LOGS\n  | ENGINE LOGS\n  | ERROR LOGS\n  | GENERAL LOGS\n  | LOGS\n  | PRIVILEGES\n  | OPTIMIZER_COSTS\n  | RELAY LOGS [FOR CHANNEL channel]\n  | SLOW LOGS\n  | STATUS\n  | USER_RESOURCES\n}\n\ntables_option: {\n    table_synonym\n  | table_synonym tbl_name [, tbl_name] ...\n  | table_synonym WITH READ LOCK\n  | table_synonym tbl_name [, tbl_name] ... WITH READ LOCK\n  | table_synonym tbl_name [, tbl_name] ... FOR EXPORT\n}\n\ntable_synonym: {\n    TABLE\n  | TABLES\n}", "FLUSH BINARY LOGS\nFLUSH ENGINE LOGS\nFLUSH ERROR LOGS\nFLUSH GENERAL LOGS\nFLUSH RELAY LOGS\nFLUSH SLOW LOGS", "FLUSH TABLES ... WITH READ LOCK\nFLUSH TABLES ... FOR EXPORT\nLOCK TABLES ... READ\nLOCK TABLES ... WRITE", "FLUSH TABLES WITH READ LOCK\nFLUSH TABLES ... WITH READ LOCK\nFLUSH TABLES ... FOR EXPORT"], "Description": ["\n        The FLUSH statement has several\n        variant forms that clear or reload various internal caches,\n        flush tables, or acquire locks. Each\n        FLUSH operation requires the\n        privileges indicated in its description.\n", "\n\nNote\n\n\n          It is not possible to issue\n          FLUSH statements within stored\n          functions or triggers. However, you may use\n          FLUSH in stored procedures, so\n          long as these are not called from stored functions or\n          triggers. See Section\u00a027.8, \u201cRestrictions on Stored Programs\u201d.\n\n", "\n        By default, the server writes\n        FLUSH statements to the binary\n        log so that they replicate to replicas. To suppress logging,\n        specify the optional NO_WRITE_TO_BINLOG\n        keyword or its alias LOCAL.\n", "\n\nNote\n\n\nFLUSH LOGS,\n          FLUSH BINARY LOGS,\n          FLUSH TABLES WITH READ LOCK\n          (with or without a table list), and\n          FLUSH\n          TABLES tbl_name ... FOR\n          EXPORT are not written to the binary log in any case\n          because they would cause problems if replicated to a replica.\n\n", "\n        The FLUSH statement causes an\n        implicit commit. See Section\u00a015.3.3, \u201cStatements That Cause an Implicit Commit\u201d.\n      ", "\n        The mysqladmin utility provides a\n        command-line interface to some flush operations, using commands\n        such as flush-logs,\n        flush-privileges,\n        flush-status, and\n        flush-tables. See\n        Section\u00a06.5.2, \u201cmysqladmin \u2014 A MySQL Server Administration Program\u201d.\n      ", "\n        Sending a SIGHUP or\n        SIGUSR1 signal to the server causes several\n        flush operations to occur that are similar to various forms of\n        the FLUSH statement. Signals can\n        be sent by the root system account or the\n        system account that owns the server process. This enables the\n        flush operations to be performed without having to connect to\n        the server, which requires a MySQL account that has privileges\n        sufficient for those operations. See\n        Section\u00a06.10, \u201cUnix Signal Handling in MySQL\u201d.\n      ", "\n        The RESET statement is similar to\n        FLUSH. See\n        Section\u00a015.7.8.6, \u201cRESET Statement\u201d, for information about using\n        RESET with replication.\n      ", "\n        The following list describes the permitted\n        FLUSH statement\n        flush_option values. For descriptions\n        of the permitted tables_option\n        values, see FLUSH TABLES Syntax.\n", "\n\nFLUSH BINARY LOGS\n\n            Closes and reopens any binary log file to which the server\n            is writing. If binary logging is enabled, the sequence\n            number of the binary log file is incremented by one relative\n            to the previous file.\n          \n            This operation requires the\n            RELOAD privilege.\n          \nFLUSH ENGINE LOGS\n\n            Closes and reopens any flushable logs for installed storage\n            engines. This causes InnoDB to flush its\n            logs to disk.\n          \n            This operation requires the\n            RELOAD privilege.\n          \nFLUSH ERROR LOGS\n\n            Closes and reopens any error log file to which the server is\n            writing.\n          \n            This operation requires the\n            RELOAD privilege.\n          \nFLUSH GENERAL LOGS\n\n            Closes and reopens any general query log file to which the\n            server is writing.\n          \n            This operation requires the\n            RELOAD privilege.\n          \n            This operation has no effect on tables used for the general\n            query log (see Section\u00a07.4.1, \u201cSelecting General Query Log and Slow Query Log Output Destinations\u201d).\n          \nFLUSH LOGS\n\n            Closes and reopens any log file to which the server is\n            writing.\n          \n            This operation requires the\n            RELOAD privilege.\n          \n            The effect of this operation is equivalent to the combined\n            effects of these operations:\n          Press CTRL+C to copy FLUSH BINARY LOGS\nFLUSH ENGINE LOGS\nFLUSH ERROR LOGS\nFLUSH GENERAL LOGS\nFLUSH RELAY LOGS\nFLUSH SLOW LOGS\nFLUSH OPTIMIZER_COSTS\n\n            Re-reads the cost model tables so that the optimizer starts\n            using the current cost estimates stored in them.\n          \n            This operation requires the\n            FLUSH_OPTIMIZER_COSTS or\n            RELOAD privilege.\n          \n            The server writes a warning to the error log for any\n            unrecognized cost model table entries. For information about\n            these tables, see Section\u00a010.9.5, \u201cThe Optimizer Cost Model\u201d. This\n            operation affects only sessions that begin subsequent to the\n            flush. Existing sessions continue to use the cost estimates\n            that were current when they began.\n          \nFLUSH PRIVILEGES\n\n            Re-reads the privileges from the grant tables in the\n            mysql system schema. As part of this\n            operation, the server reads the\n            global_grants table containing dynamic\n            privilege assignments and registers any unregistered\n            privileges found there.\n          \n            Reloading the grant tables is necessary to enable updates to\n            MySQL privileges and users only if you make such changes\n            directly to the grant tables; it is not needed for account\n            management statements such as\n            GRANT or\n            REVOKE, which take effect\n            immediately. See Section\u00a08.2.13, \u201cWhen Privilege Changes Take Effect\u201d, for\n            more information.\n          \n            This operation requires the\n            RELOAD or\n            FLUSH_PRIVILEGES privilege.\n          \n            If the --skip-grant-tables\n            option was specified at server startup to disable the MySQL\n            privilege system, FLUSH\n            PRIVILEGES provides a way to enable the privilege\n            system at runtime.\n          \n            Resets failed-login tracking (or enables it if the server\n            was started with\n            --skip-grant-tables) and\n            unlocks any temporarily locked accounts. See\n            Section\u00a08.2.15, \u201cPassword Management\u201d.\n          \n            Frees memory cached by the server as a result of\n            GRANT,\n            CREATE USER,\n            CREATE SERVER, and\n            INSTALL PLUGIN statements.\n            This memory is not released by the corresponding\n            REVOKE,\n            DROP USER,\n            DROP SERVER, and\n            UNINSTALL PLUGIN statements,\n            so for a server that executes many instances of the\n            statements that cause caching, there is an increase in\n            cached memory use unless it is freed with\n            FLUSH PRIVILEGES.\n          \n            Clears the in-memory cache used by the\n            caching_sha2_password authentication\n            plugin. See\n            Cache Operation for SHA-2 Pluggable Authentication.\n          \nFLUSH\n            RELAY LOGS [FOR CHANNEL\n            channel]\n\n            Closes and reopens any relay log file to which the server is\n            writing. If relay logging is enabled, the sequence number of\n            the relay log file is incremented by one relative to the\n            previous file.\n          \n            This operation requires the\n            RELOAD privilege.\n          \n            The FOR CHANNEL\n            channel clause enables\n            you to name which replication channel the operation applies\n            to. Execute\n            FLUSH\n            RELAY LOGS FOR CHANNEL\n            channel to flush the\n            relay log for a specific replication channel. If no channel\n            is named and no extra replication channels exist, the\n            operation applies to the default channel. If no channel is\n            named and multiple replication channels exist, the operation\n            applies to all replication channels. For more information,\n            see Section\u00a019.2.2, \u201cReplication Channels\u201d.\n          \nFLUSH SLOW LOGS\n\n            Closes and reopens any slow query log file to which the\n            server is writing.\n          \n            This operation requires the\n            RELOAD privilege.\n          \n            This operation has no effect on tables used for the slow\n            query log (see Section\u00a07.4.1, \u201cSelecting General Query Log and Slow Query Log Output Destinations\u201d).\n          \nFLUSH STATUS\n\n            Flushes status indicators.\n          \n            This operation adds the current thread's session status\n            variable values to the global values and resets the session\n            values to zero. Some global variables may be reset to zero\n            as well. It also resets the counters for key caches (default\n            and named) to zero and sets\n            Max_used_connections to\n            the current number of open connections. This information may\n            be of use when debugging a query. See\n            Section\u00a01.6, \u201cHow to Report Bugs or Problems\u201d.\n          \nFLUSH STATUS is unaffected by\n            read_only or\n            super_read_only, and is\n            always written to the binary log.\n          \n            This operation requires the\n            FLUSH_STATUS or\n            RELOAD privilege.\n          \nFLUSH USER_RESOURCES\n\n            Resets all per-hour user resource indicators to zero.\n          \n            This operation requires the\n            FLUSH_USER_RESOURCES or\n            RELOAD privilege.\n          \n            Resetting resource indicators enables clients that have\n            reached their hourly connection, query, or update limits to\n            resume activity immediately. FLUSH\n            USER_RESOURCES does not apply to the limit on\n            maximum simultaneous connections that is controlled by the\n            max_user_connections system\n            variable. See Section\u00a08.2.21, \u201cSetting Account Resource Limits\u201d.\n\n", "FLUSH TABLES Syntax", "\nFLUSH TABLES flushes tables, and,\n        depending on the variant used, acquires locks. Any\n        TABLES variant used in a\n        FLUSH statement must be the only\n        option used. FLUSH\n        TABLE is a synonym for FLUSH\n        TABLES.\n", "\n\nNote\n\n\n          The descriptions here that indicate tables are flushed by\n          closing them apply differently for InnoDB,\n          which flushes table contents to disk but leaves them open.\n          This still permits table files to be copied while the tables\n          are open, as long as other activity does not modify them.\n\n", "\n\nFLUSH TABLES\n\n            Closes all open tables, forces all tables in use to be\n            closed, and flushes the prepared statement cache.\n          \n            This operation requires the\n            FLUSH_TABLES or\n            RELOAD privilege.\n          \n            For information about prepared statement caching, see\n            Section\u00a010.10.3, \u201cCaching of Prepared Statements and Stored Programs\u201d.\n          \nFLUSH TABLES is not permitted\n            when there is an active\n            LOCK TABLES ...\n            READ. To flush and lock tables, use\n            FLUSH\n            TABLES tbl_name ... WITH READ\n            LOCK instead.\n          \nFLUSH\n            TABLES tbl_name [,\n            tbl_name] ...\n\n            With a list of one or more comma-separated table names, this\n            operation is like FLUSH\n            TABLES with no names except that the server\n            flushes only the named tables. If a named table does not\n            exist, no error occurs.\n          \n            This operation requires the\n            FLUSH_TABLES or\n            RELOAD privilege.\n          \nFLUSH\n            TABLES WITH READ LOCK\n\n            Closes all open tables and locks all tables for all\n            databases with a global read lock.\n          \n            This operation requires the\n            FLUSH_TABLES or\n            RELOAD privilege.\n          \n            This operation is a very convenient way to get backups if\n            you have a file system such as Veritas or ZFS that can take\n            snapshots in time. Use\n            UNLOCK\n            TABLES to release the lock.\n          \nFLUSH TABLES WITH READ LOCK\n            acquires a global read lock rather than table locks, so it\n            is not subject to the same behavior as\n            LOCK TABLES and\n            UNLOCK\n            TABLES with respect to table locking and implicit\n            commits:\n\n\n\nUNLOCK\n                TABLES implicitly commits any active\n                transaction only if any tables currently have been\n                locked with LOCK TABLES.\n                The commit does not occur for\n                UNLOCK\n                TABLES following FLUSH\n                TABLES WITH READ LOCK because the latter\n                statement does not acquire table locks.\n              \n                Beginning a transaction causes table locks acquired with\n                LOCK TABLES to be\n                released, as though you had executed\n                UNLOCK\n                TABLES. Beginning a transaction does not\n                release a global read lock acquired with\n                FLUSH TABLES WITH READ\n                LOCK.\n\n\n\nFLUSH TABLES WITH READ LOCK\n            does not prevent the server from inserting rows into the log\n            tables (see Section\u00a07.4.1, \u201cSelecting General Query Log and Slow Query Log Output Destinations\u201d).\n          \nFLUSH\n            TABLES tbl_name [,\n            tbl_name] ... WITH READ\n            LOCK\n\n            Flushes and acquires read locks for the named tables.\n          \n            This operation requires the\n            FLUSH_TABLES or\n            RELOAD privilege. Because it\n            acquires table locks, it also requires the\n            LOCK TABLES privilege for\n            each table.\n          \n            The operation first acquires exclusive metadata locks for\n            the tables, so it waits for transactions that have those\n            tables open to complete. Then the operation flushes the\n            tables from the table cache, reopens the tables, acquires\n            table locks (like\n            LOCK TABLES ...\n            READ), and downgrades the metadata locks from\n            exclusive to shared. After the operation acquires locks and\n            downgrades the metadata locks, other sessions can read but\n            not modify the tables.\n          \n            This operation applies only to existing base\n            (non-TEMPORARY) tables. If a name refers\n            to a base table, that table is used. If it refers to a\n            TEMPORARY table, it is ignored. If a name\n            applies to a view, an\n            ER_WRONG_OBJECT error\n            occurs. Otherwise, an\n            ER_NO_SUCH_TABLE error\n            occurs.\n          \n            Use UNLOCK\n            TABLES to release the locks,\n            LOCK TABLES to release the\n            locks and acquire other locks, or\n            START\n            TRANSACTION to release the locks and begin a new\n            transaction.\n          \n            This FLUSH TABLES variant\n            enables tables to be flushed and locked in a single\n            operation. It provides a workaround for the restriction that\n            FLUSH TABLES is not permitted\n            when there is an active\n            LOCK TABLES ...\n            READ.\n          \n            This operation does not perform an implicit\n            UNLOCK\n            TABLES, so an error results if you perform the\n            operation while there is any active\n            LOCK TABLES or use it a\n            second time without first releasing the locks acquired.\n          \n            If a flushed table was opened with\n            HANDLER, the handler is\n            implicitly flushed and loses its position.\n          \nFLUSH\n            TABLES tbl_name [,\n            tbl_name] ... FOR\n            EXPORT\n\n            This FLUSH TABLES variant\n            applies to InnoDB tables. It ensures that\n            changes to the named tables have been flushed to disk so\n            that binary table copies can be made while the server is\n            running.\n          \n            This operation requires the\n            FLUSH_TABLES or\n            RELOAD privilege. Because it\n            acquires locks on tables in preparation for exporting them,\n            it also requires the LOCK\n            TABLES and SELECT\n            privileges for each table.\n          \n            The operation works like this:\n\n\n\n                It acquires shared metadata locks for the named tables.\n                The operation blocks as long as other sessions have\n                active transactions that have modified those tables or\n                hold table locks for them. When the locks have been\n                acquired, the operation blocks transactions that attempt\n                to update the tables, while permitting read-only\n                operations to continue.\n              \n                It checks whether all storage engines for the tables\n                support FOR EXPORT. If any do not, an\n                ER_ILLEGAL_HA error\n                occurs and the operation fails.\n              \n                The operation notifies the storage engine for each table\n                to make the table ready for export. The storage engine\n                must ensure that any pending changes are written to\n                disk.\n              \n                The operation puts the session in lock-tables mode so\n                that the metadata locks acquired earlier are not\n                released when the FOR EXPORT\n                operation completes.\n\n\n\n            This operation applies only to existing base\n            (non-TEMPORARY) tables. If a name refers\n            to a base table, that table is used. If it refers to a\n            TEMPORARY table, it is ignored. If a name\n            applies to a view, an\n            ER_WRONG_OBJECT error\n            occurs. Otherwise, an\n            ER_NO_SUCH_TABLE error\n            occurs.\n          \nInnoDB supports FOR\n            EXPORT for tables that have their own\n            .ibd\n            file file (that is, tables created with the\n            innodb_file_per_table\n            setting enabled). InnoDB ensures when\n            notified by the FOR EXPORT operation that\n            any changes have been flushed to disk. This permits a binary\n            copy of table contents to be made while the FOR\n            EXPORT operation is in effect because the\n            .ibd file is transaction consistent and\n            can be copied while the server is running. FOR\n            EXPORT does not apply to InnoDB\n            system tablespace files, or to InnoDB\n            tables that have FULLTEXT indexes.\n          \nFLUSH\n            TABLES ...FOR EXPORT is supported for partitioned\n            InnoDB tables.\n          \n            When notified by FOR EXPORT,\n            InnoDB writes to disk certain kinds of\n            data that is normally held in memory or in separate disk\n            buffers outside the tablespace files. For each table,\n            InnoDB also produces a file named\n            table_name.cfg\n            in the same database directory as the table. The\n            .cfg file contains metadata needed to\n            reimport the tablespace files later, into the same or\n            different server.\n          \n            When the FOR EXPORT operation completes,\n            InnoDB has flushed all\n            dirty pages to the\n            table data files. Any\n            change buffer\n            entries are merged prior to flushing. At this point, the\n            tables are locked and quiescent: The tables are in a\n            transactionally consistent state on disk and you can copy\n            the .ibd tablespace files along with\n            the corresponding .cfg files to get a\n            consistent snapshot of those tables.\n          \n            For the procedure to reimport the copied table data into a\n            MySQL instance, see Section\u00a017.6.1.3, \u201cImporting InnoDB Tables\u201d.\n          \n            After you are done with the tables, use\n            UNLOCK\n            TABLES to release the locks,\n            LOCK TABLES to release the\n            locks and acquire other locks, or\n            START\n            TRANSACTION to release the locks and begin a new\n            transaction.\n          \n            While any of these statements is in effect within the\n            session, attempts to use\n            FLUSH\n            TABLES ... FOR EXPORT produce an error:\n          Press CTRL+C to copy FLUSH TABLES ... WITH READ LOCK\nFLUSH TABLES ... FOR EXPORT\nLOCK TABLES ... READ\nLOCK TABLES ... WRITE\n            While\n            FLUSH\n            TABLES ... FOR EXPORT is in effect within the\n            session, attempts to use any of these statements produce an\n            error:\n          Press CTRL+C to copy FLUSH TABLES WITH READ LOCK\nFLUSH TABLES ... WITH READ LOCK\nFLUSH TABLES ... FOR EXPORT\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/kill.html"], "Title": ["15.7.8.4 KILL Statement"], "Feature": ["KILL [CONNECTION | QUERY] processlist_id"], "Description": ["\n        Each connection to mysqld runs in a separate\n        thread. You can kill a thread with the KILL\n        processlist_id statement.\n      ", "\n        Thread processlist identifiers can be determined from the\n        ID column of the\n        INFORMATION_SCHEMA\nPROCESSLIST table, the\n        Id column of SHOW\n        PROCESSLIST output, and the\n        PROCESSLIST_ID column of the Performance\n        Schema threads table. The value for\n        the current thread is returned by the\n        CONNECTION_ID() function.\n      ", "\nKILL permits an optional\n        CONNECTION or QUERY\n        modifier:\n", "\n\nKILL\n            CONNECTION is the same as\n            KILL with no modifier: It\n            terminates the connection associated with the given\n            processlist_id, after terminating\n            any statement the connection is executing.\n          \nKILL QUERY\n            terminates the statement the connection is currently\n            executing, but leaves the connection itself intact.\n\n", "\n        The ability to see which threads are available to be killed\n        depends on the PROCESS privilege:\n", "\n\n            Without PROCESS, you can see\n            only your own threads.\n          \n            With PROCESS, you can see all\n            threads.\n\n", "\n        The ability to kill threads and statements depends on the\n        CONNECTION_ADMIN privilege and\n        the deprecated SUPER privilege:\n", "\n\n            Without CONNECTION_ADMIN or\n            SUPER, you can kill only your\n            own threads and statements.\n          \n            With CONNECTION_ADMIN or\n            SUPER, you can kill all\n            threads and statements, except that to affect a thread or\n            statement that is executing with the\n            SYSTEM_USER privilege, your\n            own session must additionally have the\n            SYSTEM_USER privilege.\n\n", "\n        You can also use the mysqladmin processlist\n        and mysqladmin kill commands to examine and\n        kill threads.\n      ", "\n        When you use KILL, a\n        thread-specific kill flag is set for the thread. In most cases,\n        it might take some time for the thread to die because the kill\n        flag is checked only at specific intervals:\n", "\n\n            During SELECT operations, for\n            ORDER BY and GROUP BY\n            loops, the flag is checked after reading a block of rows. If\n            the kill flag is set, the statement is aborted.\n          \nALTER TABLE operations that\n            make a table copy check the kill flag periodically for each\n            few copied rows read from the original table. If the kill\n            flag was set, the statement is aborted and the temporary\n            table is deleted.\n          \n            The KILL statement returns\n            without waiting for confirmation, but the kill flag check\n            aborts the operation within a reasonably small amount of\n            time. Aborting the operation to perform any necessary\n            cleanup also takes some time.\n          \n            During UPDATE or\n            DELETE operations, the kill\n            flag is checked after each block read and after each updated\n            or deleted row. If the kill flag is set, the statement is\n            aborted. If you are not using transactions, the changes are\n            not rolled back.\n          \nGET_LOCK() aborts and returns\n            NULL.\n          \n            If the thread is in the table lock handler (state:\n            Locked), the table lock is quickly\n            aborted.\n          \n            If the thread is waiting for free disk space in a write\n            call, the write is aborted with a \u201cdisk full\u201d\n            error message.\n          \nEXPLAIN ANALYZE aborts and\n            prints the first row of output.\n\n", "\n\nWarning\n\n\n          Killing a REPAIR TABLE or\n          OPTIMIZE TABLE operation on a\n          MyISAM table results in a table that is\n          corrupted and unusable. Any reads or writes to such a table\n          fail until you optimize or repair it again (without\n          interruption).\n\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/load-index.html"], "Title": ["15.7.8.5 LOAD INDEX INTO CACHE Statement"], "Feature": ["LOAD INDEX INTO CACHE\n  tbl_index_list [, tbl_index_list] ...\n\ntbl_index_list:\n  tbl_name\n    [PARTITION (partition_list)]\n    [{INDEX|KEY} (index_name[, index_name] ...)]\n    [IGNORE LEAVES]\n\npartition_list: {\n    partition_name[, partition_name] ...\n  | ALL\n}"], "Description": ["\n        The LOAD INDEX INTO\n        CACHE statement preloads a table index into the key\n        cache to which it has been assigned by an explicit\n        CACHE INDEX statement, or into\n        the default key cache otherwise.\n      ", "\nLOAD INDEX INTO\n        CACHE applies only to MyISAM\n        tables, including partitioned MyISAM tables.\n        In addition, indexes on partitioned tables can be preloaded for\n        one, several, or all partitions.\n      ", "\n        The IGNORE LEAVES modifier causes only blocks\n        for the nonleaf nodes of the index to be preloaded.\n      ", "\nIGNORE LEAVES is also supported for\n        partitioned MyISAM tables.\n      ", "\n        The following statement preloads nodes (index blocks) of indexes\n        for the tables t1 and t2:\n      ", "Press CTRL+C to copy mysql> LOAD INDEX INTO CACHE t1, t2 IGNORE LEAVES;\n+---------+--------------+----------+----------+\n| Table   | Op           | Msg_type | Msg_text |\n+---------+--------------+----------+----------+\n| test.t1 | preload_keys | status   | OK       |\n| test.t2 | preload_keys | status   | OK       |\n+---------+--------------+----------+----------+", "\n        This statement preloads all index blocks from\n        t1. It preloads only blocks for the nonleaf\n        nodes from t2.\n      ", "\n        The syntax of LOAD\n        INDEX INTO CACHE enables you to specify that only\n        particular indexes from a table should be preloaded. However,\n        the implementation preloads all the table's indexes into the\n        cache, so there is no reason to specify anything other than the\n        table name.\n      ", "\n        It is possible to preload indexes on specific partitions of\n        partitioned MyISAM tables. For example, of\n        the following 2 statements, the first preloads indexes for\n        partition p0 of a partitioned table\n        pt, while the second preloads the indexes for\n        partitions p1 and p3 of\n        the same table:\n      ", "Press CTRL+C to copy LOAD INDEX INTO CACHE pt PARTITION (p0);\nLOAD INDEX INTO CACHE pt PARTITION (p1, p3);", "\n        To preload the indexes for all partitions in table\n        pt, you can use either of the following two\n        statements:\n      ", "Press CTRL+C to copy LOAD INDEX INTO CACHE pt PARTITION (ALL);\n\nLOAD INDEX INTO CACHE pt;", "\n        The two statements just shown are equivalent, and issuing either\n        one has exactly the same effect. In other words, if you wish to\n        preload indexes for all partitions of a partitioned table, the\n        PARTITION (ALL) clause is optional.\n      ", "\n        When preloading indexes for multiple partitions, the partitions\n        need not be contiguous, and you need not list their names in any\n        particular order.\n      ", "\nLOAD INDEX INTO\n        CACHE ... IGNORE LEAVES fails unless all indexes in a\n        table have the same block size. To determine index block sizes\n        for a table, use myisamchk -dv and check the\n        Blocksize column.\n"], "Examples": ["mysql> LOAD INDEX INTO CACHE t1, t2 IGNORE LEAVES;\n+---------+--------------+----------+----------+\n| Table   | Op           | Msg_type | Msg_text |\n+---------+--------------+----------+----------+\n| test.t1 | preload_keys | status   | OK       |\n| test.t2 | preload_keys | status   | OK       |\n+---------+--------------+----------+----------+", "LOAD INDEX INTO CACHE pt PARTITION (p0);\nLOAD INDEX INTO CACHE pt PARTITION (p1, p3);", "LOAD INDEX INTO CACHE pt PARTITION (ALL);\n\nLOAD INDEX INTO CACHE pt;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/reset.html"], "Title": ["15.7.8.6 RESET Statement"], "Feature": ["RESET reset_option [, reset_option] ...\n\nreset_option: {\n    BINARY LOGS AND GTIDS\n  | REPLICA\n}"], "Description": ["\n        The RESET statement is used to\n        clear the state of various server operations. You must have the\n        RELOAD privilege to execute\n        RESET.\n      ", "\n        For information about the RESET\n        PERSIST statement that removes persisted global system\n        variables, see Section\u00a015.7.8.7, \u201cRESET PERSIST Statement\u201d.\n      ", "\nRESET acts as a stronger version\n        of the FLUSH statement. See\n        Section\u00a015.7.8.3, \u201cFLUSH Statement\u201d.\n      ", "\n        The RESET statement causes an\n        implicit commit. See Section\u00a015.3.3, \u201cStatements That Cause an Implicit Commit\u201d.\n      ", "\n        The following list describes the permitted\n        RESET statement\n        reset_option values:\n", "\n\nRESET BINARY LOGS AND GTIDS\n\n            Deletes all binary logs listed in the index file, resets the\n            binary log index file to be empty, and creates a new binary\n            log file.\n          \nRESET\n            REPLICA\n\n            Makes the replica forget its replication position in the\n            source binary logs. Also resets the relay log by deleting\n            any existing relay log files and beginning a new one.\n\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/reset-persist.html"], "Title": ["15.7.8.7 RESET PERSIST Statement"], "Feature": ["RESET PERSIST [[IF EXISTS] system_var_name]"], "Description": ["\nRESET PERSIST removes persisted\n        global system variable settings from the\n        mysqld-auto.cnf option file in the data\n        directory. Removing a persisted system variable causes the\n        variable no longer to be initialized from\n        mysqld-auto.cnf at server startup. For more\n        information about persisting system variables and the\n        mysqld-auto.cnf file, see\n        Section\u00a07.1.9.3, \u201cPersisted System Variables\u201d.\n      ", "\n        The privileges required for RESET\n        PERSIST depend on the type of system variable to be\n        removed:\n", "\n\n            For dynamic system variables, this statement requires the\n            SYSTEM_VARIABLES_ADMIN\n            privilege (or the deprecated\n            SUPER privilege).\n          \n            For read-only system variables, this statement requires the\n            SYSTEM_VARIABLES_ADMIN and\n            PERSIST_RO_VARIABLES_ADMIN\n            privileges.\n\n", "\n        See Section\u00a07.1.9.1, \u201cSystem Variable Privileges\u201d.\n      ", "\n        Depending on whether the variable name and IF\n        EXISTS clauses are present, the\n        RESET PERSIST statement has these\n        forms:\n", "\n\n            To remove all persisted variables from\n            mysqld-auto.cnf, use\n            RESET PERSIST without naming\n            any system variable:\n          Press CTRL+C to copy RESET PERSIST;\n            You must have privileges for removing both dynamic and\n            read-only system variables if\n            mysqld-auto.cnf contains both kinds of\n            variables.\n          \n            To remove a specific persisted variable from\n            mysqld-auto.cnf, name it in the\n            statement:\n          Press CTRL+C to copy RESET PERSIST system_var_name;\n            This includes plugin system variables, even if the plugin is\n            not currently installed. If the variable is not present in\n            the file, an error occurs.\n          \n            To remove a specific persisted variable from\n            mysqld-auto.cnf, but produce a warning\n            rather than an error if the variable is not present in the\n            file, add an IF EXISTS clause to the\n            previous syntax:\n          Press CTRL+C to copy RESET PERSIST IF EXISTS system_var_name;\n", "\nRESET PERSIST is not affected by\n        the value of the\n        persisted_globals_load system\n        variable.\n      ", "\nRESET PERSIST affects the\n        contents of the Performance Schema\n        persisted_variables table because\n        the table contents correspond to the contents of the\n        mysqld-auto.cnf file. On the other hand,\n        because RESET PERSIST does not\n        change variable values, it has no effect on the contents of the\n        Performance Schema variables_info\n        table until the server is restarted.\n      ", "\n        For information about RESET\n        statement variants that clear the state of other server\n        operations, see Section\u00a015.7.8.6, \u201cRESET Statement\u201d.\n"], "Examples": ["RESET PERSIST;", "RESET PERSIST system_var_name;", "RESET PERSIST IF EXISTS system_var_name;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/restart.html"], "Title": ["15.7.8.8 RESTART Statement"], "Feature": ["RESTART"], "Description": ["\n        This statement stops and restarts the MySQL server. It requires\n        the SHUTDOWN privilege.\n      ", "\n        One use for RESTART is when it is\n        not possible or convenient to gain command-line access to the\n        MySQL server on the server host to restart it. For example,\n        SET\n        PERSIST_ONLY can be used at runtime to make\n        configuration changes to system variables that can be set only\n        at server startup, but the server must still be restarted for\n        those changes to take effect. The\n        RESTART statement provides a way\n        to do so from within client sessions, without requiring\n        command-line access on the server host.\n", "\n\nNote\n\n\n          After executing a RESTART\n          statement, the client can expect the current connection to be\n          lost. If auto-reconnect is enabled, the connection is\n          reestablished after the server restarts. Otherwise, the\n          connection must be reestablished manually.\n\n", "\n        A successful RESTART operation\n        requires mysqld to be running in an\n        environment that has a monitoring process available to detect a\n        server shutdown performed for restart purposes:\n", "\n\n            In the presence of a monitoring process,\n            RESTART causes\n            mysqld to terminate such that the\n            monitoring process can determine that it should start a new\n            mysqld instance.\n          \n            If no monitoring process is present,\n            RESTART fails with an error.\n\n", "\n        These platforms provide the necessary monitoring support for the\n        RESTART statement:\n", "\n\n            Windows, when mysqld is started as a\n            Windows service or standalone. (mysqld\n            forks, and one process acts as a monitor to the other, which\n            acts as the server.)\n          \n            Unix and Unix-like systems that use systemd or\n            mysqld_safe to manage\n            mysqld.\n\n", "\n        To configure a monitoring environment such that\n        mysqld enables the\n        RESTART statement:\n", "\n\n            Set the MYSQLD_PARENT_PID environment\n            variable to the value of the process ID of the process that\n            starts mysqld, before starting\n            mysqld.\n          \n            When mysqld performs a shutdown due to\n            use of the RESTART statement,\n            it returns exit code 16.\n          \n            When the monitoring process detects an exit code of 16, it\n            starts mysqld again. Otherwise, it exits.\n\n", "\n        Here is a minimal example as implemented in the\n        bash shell:\n      ", "Press CTRL+C to copy #!/bin/bash\n\nexport MYSQLD_PARENT_PID=$$\n\nexport MYSQLD_RESTART_EXIT=16\n\nwhile true ; do\n  bin/mysqld mysqld options here\n  if [ $? -ne $MYSQLD_RESTART_EXIT ]; then\n    break\n  fi\ndone", "\n        On Windows, the forking used to implement\n        RESTART makes determining the\n        server process to attach to for debugging more difficult. To\n        alleviate this, starting the server with\n        --gdb suppresses forking, in\n        addition to its other actions done to set up a debugging\n        environment. In non-debug settings,\n        --no-monitor may be used for the\n        sole purpose of suppressing forking the monitor process. For a\n        server started with either --gdb\n        or --no-monitor, executing\n        RESTART causes the server to\n        simply exit without restarting.\n      ", "\n        The\n        Com_restart\n        status variable tracks the number of\n        RESTART statements. Because\n        status variables are initialized for each server startup and do\n        not persist across restarts, Com_restart\n        normally has a value of zero, but can be nonzero if\n        RESTART statements were executed\n        but failed.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/shutdown.html"], "Title": ["15.7.8.9 SHUTDOWN Statement"], "Feature": ["SHUTDOWN"], "Description": ["\n        This statement stops the MySQL server. It requires the\n        SHUTDOWN privilege.\n      ", "\nSHUTDOWN provides an SQL-level\n        interface to the same functionality available using the\n        mysqladmin shutdown command. A successful\n        SHUTDOWN sequence consists of\n        checking the privileges, validating the arguments, and sending\n        an OK packet to the client. Then the server is shut down.\n      ", "\n        The\n        Com_shutdown\n        status variable tracks the number of\n        SHUTDOWN statements. Because\n        status variables are initialized for each server startup and do\n        not persist across restarts, Com_shutdown\n        normally has a value of zero, but can be nonzero if\n        SHUTDOWN statements were executed\n        but failed.\n      ", "\n        Another way to stop the server is to send it a\n        SIGTERM signal, which can be done by\n        root or the account that owns the server\n        process. SIGTERM enables server shutdown to\n        be performed without having to connect to the server. See\n        Section\u00a06.10, \u201cUnix Signal Handling in MySQL\u201d.\n"], "Examples": [], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/alter-user.html"], "Title": ["15.7.1.1 ALTER USER Statement"], "Feature": ["ALTER USER [IF EXISTS]\n    user [auth_option] [, user [auth_option]] ...\n    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]\n    [WITH resource_option [resource_option] ...]\n    [password_option | lock_option] ...\n    [COMMENT 'comment_string' | ATTRIBUTE 'json_object']\n\nALTER USER [IF EXISTS]\n    USER() user_func_auth_option\n\nALTER USER [IF EXISTS]\n    user [registration_option]\n\nALTER USER [IF EXISTS]\n    USER() [registration_option]\n\nALTER USER [IF EXISTS]\n    user DEFAULT ROLE\n    {NONE | ALL | role [, role ] ...}\n\nuser:\n    (see Section 8.2.4, \u201cSpecifying Account Names\u201d)\n\nauth_option: {\n    IDENTIFIED BY 'auth_string'\n        [REPLACE 'current_auth_string']\n        [RETAIN CURRENT PASSWORD]\n  | IDENTIFIED BY RANDOM PASSWORD\n        [REPLACE 'current_auth_string']\n        [RETAIN CURRENT PASSWORD]\n  | IDENTIFIED WITH auth_plugin\n  | IDENTIFIED WITH auth_plugin BY 'auth_string'\n        [REPLACE 'current_auth_string']\n        [RETAIN CURRENT PASSWORD]\n  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD\n        [REPLACE 'current_auth_string']\n        [RETAIN CURRENT PASSWORD]\n  | IDENTIFIED WITH auth_plugin AS 'auth_string'\n  | DISCARD OLD PASSWORD\n  | ADD factor factor_auth_option [ADD factor factor_auth_option]\n  | MODIFY factor factor_auth_option [MODIFY factor factor_auth_option]\n  | DROP factor [DROP factor]\n}\n\nuser_func_auth_option: {\n    IDENTIFIED BY 'auth_string'\n        [REPLACE 'current_auth_string']\n        [RETAIN CURRENT PASSWORD]\n  | DISCARD OLD PASSWORD\n}\n\nfactor_auth_option: {\n    IDENTIFIED BY 'auth_string'\n  | IDENTIFIED BY RANDOM PASSWORD\n  | IDENTIFIED WITH auth_plugin BY 'auth_string'\n  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD\n  | IDENTIFIED WITH auth_plugin AS 'auth_string'\n}\n\nregistration_option: {\n    factor INITIATE REGISTRATION\n  | factor FINISH REGISTRATION SET CHALLENGE_RESPONSE AS 'auth_string'\n  | factor UNREGISTER\n}\n\nfactor: {2 | 3} FACTOR\n\ntls_option: {\n   SSL\n | X509\n | CIPHER 'cipher'\n | ISSUER 'issuer'\n | SUBJECT 'subject'\n}\n\nresource_option: {\n    MAX_QUERIES_PER_HOUR count\n  | MAX_UPDATES_PER_HOUR count\n  | MAX_CONNECTIONS_PER_HOUR count\n  | MAX_USER_CONNECTIONS count\n}\n\npassword_option: {\n    PASSWORD EXPIRE [DEFAULT | NEVER | INTERVAL N DAY]\n  | PASSWORD HISTORY {DEFAULT | N}\n  | PASSWORD REUSE INTERVAL {DEFAULT | N DAY}\n  | PASSWORD REQUIRE CURRENT [DEFAULT | OPTIONAL]\n  | FAILED_LOGIN_ATTEMPTS N\n  | PASSWORD_LOCK_TIME {N | UNBOUNDED}\n}\n\nlock_option: {\n    ACCOUNT LOCK\n  | ACCOUNT UNLOCK\n}"], "Description": ["\n        The ALTER USER statement modifies\n        MySQL accounts. It enables authentication, role, SSL/TLS,\n        resource-limit, password-management, comment, and attribute\n        properties to be modified for existing accounts. It can also be\n        used to lock and unlock accounts.\n      ", "\n        In most cases, ALTER USER\n        requires the global CREATE USER\n        privilege, or the UPDATE\n        privilege for the mysql system schema. The\n        exceptions are:\n", "\n\n            Any client who connects to the server using a nonanonymous\n            account can change the password for that account. (In\n            particular, you can change your own password.) To see which\n            account the server authenticated you as, invoke the\n            CURRENT_USER() function:\n          Press CTRL+C to copy SELECT CURRENT_USER();\n            For DEFAULT ROLE syntax,\n            ALTER USER requires these\n            privileges:\n\n\n\n                Setting the default roles for another user requires the\n                global CREATE USER\n                privilege, or the UPDATE\n                privilege for the mysql.default_roles\n                system table.\n              \n                Setting the default roles for yourself requires no\n                special privileges, as long as the roles you want as the\n                default have been granted to you.\n\n\n\n            Statements that modify secondary passwords require these\n            privileges:\n\n\n\n                The\n                APPLICATION_PASSWORD_ADMIN\n                privilege is required to use the RETAIN CURRENT\n                PASSWORD or DISCARD OLD\n                PASSWORD clause for ALTER\n                USER statements that apply to your own\n                account. The privilege is required to manipulate your\n                own secondary password because most users require only\n                one password.\n              \n                If an account is to be permitted to manipulate secondary\n                passwords for all accounts, it requires the\n                CREATE USER privilege\n                rather than\n                APPLICATION_PASSWORD_ADMIN.\n\n\n\n", "\n        When the read_only system\n        variable is enabled, ALTER USER\n        additionally requires the\n        CONNECTION_ADMIN privilege (or\n        the deprecated SUPER privilege).\n      ", "\n        These additional privilege considerations also apply:\n", "\n\n            The authentication_policy\n            system variable places certain constraints on how the\n            authentication-related clauses of ALTER\n            USER statements may be used; for details, see the\n            description of that variable. These constraints do not apply\n            if you have the\n            AUTHENTICATION_POLICY_ADMIN\n            privilege.\n          \n            To modify an account that uses passwordless authentication,\n            you must have the\n            PASSWORDLESS_USER_ADMIN\n            privilege.\n\n", "\n        By default, an error occurs if you try to modify a user that\n        does not exist. If the IF EXISTS clause is\n        given, the statement produces a warning for each named user that\n        does not exist, rather than an error.\n", "\n\nImportant\n\n\n          Under some circumstances, ALTER\n          USER may be recorded in server logs or on the client\n          side in a history file such as\n          ~/.mysql_history, which means that\n          cleartext passwords may be read by anyone having read access\n          to that information. For information about the conditions\n          under which this occurs for the server logs and how to control\n          it, see Section\u00a08.1.2.3, \u201cPasswords and Logging\u201d. For similar\n          information about client-side logging, see\n          Section\u00a06.5.1.3, \u201cmysql Client Logging\u201d.\n\n", "\n        There are several aspects to the ALTER\n        USER statement, described under the following topics:\n", "\nALTER USER OverviewALTER USER Authentication OptionsALTER USER Multifactor Authentication OptionsALTER USER Registration OptionsALTER USER Role OptionsALTER USER SSL/TLS OptionsALTER USER Resource-Limit OptionsALTER USER Password-Management OptionsALTER USER Comment and Attribute OptionsALTER USER Account-Locking OptionsALTER USER Binary Logging\n", "\n\n\n\nALTER USER Overview\n\n\n\n\n          For each affected account, ALTER\n          USER modifies the corresponding row in the\n          mysql.user system table to reflect the\n          properties specified in the statement. Unspecified properties\n          retain their current values.\n        \n          Each account name uses the format described in\n          Section\u00a08.2.4, \u201cSpecifying Account Names\u201d. The host name part of the\n          account name, if omitted, defaults to '%'.\n          It is also possible to specify\n          CURRENT_USER or\n          CURRENT_USER() to refer to the\n          account associated with the current session.\n        \n          In one case only, the account may be specified with the\n          USER() function:\n        Press CTRL+C to copy ALTER USER USER() IDENTIFIED BY 'auth_string';\n          This syntax enables changing your own password without naming\n          your account literally. (The syntax also supports the\n          REPLACE, RETAIN CURRENT\n          PASSWORD, and DISCARD OLD\n          PASSWORD clauses described at\n          ALTER USER Authentication Options.)\n        \n          For ALTER USER syntax that\n          permits an auth_option value to\n          follow a user value,\n          auth_option indicates how the\n          account authenticates by specifying an account authentication\n          plugin, credentials (for example, a password), or both. Each\n          auth_option value applies\n          only to the account named immediately\n          preceding it.\n        \n          Following the user specifications,\n          the statement may include options for SSL/TLS, resource-limit,\n          password-management, and locking properties. All such options\n          are global to the statement and apply to\n          all accounts named in the statement.\n        \n          Example: Change an account's password and expire it. As a\n          result, the user must connect with the named password and\n          choose a new one at the next connection:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password' PASSWORD EXPIRE;\n          Example: Modify an account to use the\n          caching_sha2_password authentication plugin\n          and the given password. Require that a new password be chosen\n          every 180 days, and enable failed-login tracking, such that\n          three consecutive incorrect passwords cause temporary account\n          locking for two days:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH caching_sha2_password BY 'new_password'\n  PASSWORD EXPIRE INTERVAL 180 DAY\n  FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 2;\n          Example: Lock or unlock an account:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' ACCOUNT LOCK;\nALTER USER 'jeffrey'@'localhost' ACCOUNT UNLOCK;\n          Example: Require an account to connect using SSL and establish\n          a limit of 20 connections per hour:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SSL WITH MAX_CONNECTIONS_PER_HOUR 20;\n          Example: Alter multiple accounts, specifying some per-account\n          properties and some global properties:\n        Press CTRL+C to copy ALTER USER\n  'jeffrey'@'localhost'\n    IDENTIFIED BY 'jeffrey_new_password',\n  'jeanne'@'localhost',\n  'josh'@'localhost'\n    IDENTIFIED BY 'josh_new_password'\n    REPLACE 'josh_current_password'\n    RETAIN CURRENT PASSWORD\n  REQUIRE SSL WITH MAX_USER_CONNECTIONS 2\n  PASSWORD HISTORY 5;\n          The IDENTIFIED BY value following\n          jeffrey applies only to its immediately\n          preceding account, so it changes the password to\n          'jeffrey_new_password'\n          only for jeffrey. For\n          jeanne, there is no per-account value (thus\n          leaving the password unchanged). For josh,\n          IDENTIFIED BY establishes a new password\n          ('josh_new_password'),\n          REPLACE is specified to verify that the\n          user issuing the ALTER USER\n          statement knows the current password\n          ('josh_current_password'),\n          and that current password is also retained as the account\n          secondary password. (As a result, josh can\n          connect with either the primary or secondary password.)\n        \n          The remaining properties apply globally to all accounts named\n          in the statement, so for both accounts:\n\n\n\n              Connections are required to use SSL.\n            \n              The account can be used for a maximum of two simultaneous\n              connections.\n            \n              Password changes cannot reuse any of the five most recent\n              passwords.\n\n\n\n          Example: Discard the secondary password for\n          josh, leaving the account with only its\n          primary password:\n        Press CTRL+C to copy ALTER USER 'josh'@'localhost' DISCARD OLD PASSWORD;\n          In the absence of a particular type of option, the account\n          remains unchanged in that respect. For example, with no\n          locking option, the locking state of the account is not\n          changed.\n\n", "\n\n\n\nALTER USER Authentication Options\n\n\n\n\n          An account name may be followed by an\n          auth_option authentication option\n          that specifies the account authentication plugin, credentials,\n          or both. It may also include a password-verification clause\n          that specifies the account current password to be replaced,\n          and clauses that manage whether an account has a secondary\n          password.\n\n\n\nNote\n\n\n            Clauses for random password generation, password\n            verification, and secondary passwords apply only to accounts\n            that use an authentication plugin that stores credentials\n            internally to MySQL. For accounts that use a plugin that\n            performs authentication against a credentials system that is\n            external to MySQL, password management must be handled\n            externally against that system as well. For more information\n            about internal credentials storage, see\n            Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n\n\n\nauth_plugin names an\n              authentication plugin. The plugin name can be a quoted\n              string literal or an unquoted name. Plugin names are\n              stored in the plugin column of the\n              mysql.user system table.\n            \n              For auth_option syntax that\n              does not specify an authentication plugin, the server\n              assigns the default plugin, determined as described in\n              The Default Authentication Plugin.\n              For descriptions of each plugin, see\n              Section\u00a08.4.1, \u201cAuthentication Plugins\u201d.\n            \n              Credentials that are stored internally are stored in the\n              mysql.user system table. An\n              'auth_string'\n              value or RANDOM PASSWORD specifies\n              account credentials, either as a cleartext (unencrypted)\n              string or hashed in the format expected by the\n              authentication plugin associated with the account,\n              respectively:\n\n\n\n                  For syntax that uses BY\n                  'auth_string',\n                  the string is cleartext and is passed to the\n                  authentication plugin for possible hashing. The result\n                  returned by the plugin is stored in the\n                  mysql.user table. A plugin may use\n                  the value as specified, in which case no hashing\n                  occurs.\n                \n                  For syntax that uses BY RANDOM\n                  PASSWORD, MySQL generates a random password\n                  and as cleartext and passes it to the authentication\n                  plugin for possible hashing. The result returned by\n                  the plugin is stored in the\n                  mysql.user table. A plugin may use\n                  the value as specified, in which case no hashing\n                  occurs.\n                \n                  Randomly generated passwords have the characteristics\n                  described in\n                  Random Password Generation.\n                \n                  For syntax that uses AS\n                  'auth_string',\n                  the string is assumed to be already in the format the\n                  authentication plugin requires, and is stored as is in\n                  the mysql.user table. If a plugin\n                  requires a hashed value, the value must be already\n                  hashed in a format appropriate for the plugin;\n                  otherwise, the value cannot be used by the plugin and\n                  correct authentication of client connections does not\n                  occur.\n                \n                  A hashed string can be either a string literal or a\n                  hexadecimal value. The latter corresponds to the type\n                  of value displayed by SHOW CREATE\n                  USER for password hashes containing\n                  unprintable characters when the\n                  print_identified_with_as_hex\n                  system variable is enabled.\n                \n                  If an authentication plugin performs no hashing of the\n                  authentication string, the BY\n                  'auth_string' and\n                  AS\n                  'auth_string'\n                  clauses have the same effect: The authentication\n                  string is stored as is in the\n                  mysql.user system table.\n\n\n\n              The REPLACE\n              'current_auth_string'\n              clause performs password verification. If given:\n\n\n\nREPLACE specifies the account\n                  current password to be replaced, as a cleartext\n                  (unencrypted) string.\n                \n                  The clause must be given if password changes for the\n                  account are required to specify the current password,\n                  as verification that the user attempting to make the\n                  change actually knows the current password.\n                \n                  The clause is optional if password changes for the\n                  account may but need not specify the current password.\n                \n                  The statement fails if the clause is given but does\n                  not match the current password, even if the clause is\n                  optional.\n                \nREPLACE can be specified only when\n                  changing the account password for the current user.\n\n\n\n              For more information about password verification by\n              specifying the current password, see\n              Section\u00a08.2.15, \u201cPassword Management\u201d.\n            \n              The RETAIN CURRENT PASSWORD and\n              DISCARD OLD PASSWORD clauses implement\n              dual-password capability. Both are optional, but if given,\n              have the following effects:\n\n\n\nRETAIN CURRENT PASSWORD retains an\n                  account current password as its secondary password,\n                  replacing any existing secondary password. The new\n                  password becomes the primary password, but clients can\n                  use the account to connect to the server using either\n                  the primary or secondary password. (Exception: If the\n                  new password specified by the\n                  ALTER USER statement is\n                  empty, the secondary password becomes empty as well,\n                  even if RETAIN CURRENT PASSWORD is\n                  given.)\n                \n                  If you specify RETAIN CURRENT\n                  PASSWORD for an account that has an empty\n                  primary password, the statement fails.\n                \n                  If an account has a secondary password and you change\n                  its primary password without specifying\n                  RETAIN CURRENT PASSWORD, the\n                  secondary password remains unchanged.\n                \n                  If you change the authentication plugin assigned to\n                  the account, the secondary password is discarded. If\n                  you change the authentication plugin and also specify\n                  RETAIN CURRENT PASSWORD, the\n                  statement fails.\n                \nDISCARD OLD PASSWORD discards the\n                  secondary password, if one exists. The account retains\n                  only its primary password, and clients can use the\n                  account to connect to the server only with the primary\n                  password.\n\n\n\n              For more information about use of dual passwords, see\n              Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n\n\nALTER USER permits these\n          auth_option syntaxes:\n\n\n\nIDENTIFIED BY\n              'auth_string' [REPLACE\n              'current_auth_string'] [RETAIN\n              CURRENT PASSWORD]\n\n              Sets the account authentication plugin to the default\n              plugin, passes the cleartext\n              'auth_string'\n              value to the plugin for possible hashing, and stores the\n              result in the account row in the\n              mysql.user system table.\n            \n              The REPLACE clause, if given, specifies\n              the account current password, as described previously in\n              this section.\n            \n              The RETAIN CURRENT PASSWORD clause, if\n              given, causes the account current password to be retained\n              as its secondary password, as described previously in this\n              section.\n            \nIDENTIFIED BY RANDOM PASSWORD [REPLACE\n              'current_auth_string'] [RETAIN\n              CURRENT PASSWORD]\n\n              Sets the account authentication plugin to the default\n              plugin, generates a random password, passes the cleartext\n              password value to the plugin for possible hashing, and\n              stores the result in the account row in the\n              mysql.user system table. The statement\n              also returns the cleartext password in a result set to\n              make it available to the user or application executing the\n              statement. For details about the result set and\n              characteristics of randomly generated passwords, see\n              Random Password Generation.\n            \n              The REPLACE clause, if given, specifies\n              the account current password, as described previously in\n              this section.\n            \n              The RETAIN CURRENT PASSWORD clause, if\n              given, causes the account current password to be retained\n              as its secondary password, as described previously in this\n              section.\n            \nIDENTIFIED WITH\n              auth_plugin\n\n              Sets the account authentication plugin to\n              auth_plugin, clears the\n              credentials to the empty string (the credentials are\n              associated with the old authentication plugin, not the new\n              one), and stores the result in the account row in the\n              mysql.user system table.\n            \n              In addition, the password is marked expired. The user must\n              choose a new one when next connecting.\n            \nIDENTIFIED WITH\n              auth_plugin BY\n              'auth_string' [REPLACE\n              'current_auth_string'] [RETAIN\n              CURRENT PASSWORD]\n\n              Sets the account authentication plugin to\n              auth_plugin, passes the\n              cleartext\n              'auth_string'\n              value to the plugin for possible hashing, and stores the\n              result in the account row in the\n              mysql.user system table.\n            \n              The REPLACE clause, if given, specifies\n              the account current password, as described previously in\n              this section.\n            \n              The RETAIN CURRENT PASSWORD clause, if\n              given, causes the account current password to be retained\n              as its secondary password, as described previously in this\n              section.\n            \nIDENTIFIED WITH\n              auth_plugin BY RANDOM PASSWORD\n              [REPLACE 'current_auth_string']\n              [RETAIN CURRENT PASSWORD]\n\n              Sets the account authentication plugin to\n              auth_plugin, generates a random\n              password, passes the cleartext password value to the\n              plugin for possible hashing, and stores the result in the\n              account row in the mysql.user system\n              table. The statement also returns the cleartext password\n              in a result set to make it available to the user or\n              application executing the statement. For details about the\n              result set and characteristics of randomly generated\n              passwords, see\n              Random Password Generation.\n            \n              The REPLACE clause, if given, specifies\n              the account current password, as described previously in\n              this section.\n            \n              The RETAIN CURRENT PASSWORD clause, if\n              given, causes the account current password to be retained\n              as its secondary password, as described previously in this\n              section.\n            \nIDENTIFIED WITH\n              auth_plugin AS\n              'auth_string'\n\n              Sets the account authentication plugin to\n              auth_plugin and stores the\n              'auth_string'\n              value as is in the mysql.user account\n              row. If the plugin requires a hashed string, the string is\n              assumed to be already hashed in the format the plugin\n              requires.\n            \nDISCARD OLD PASSWORD\n\n              Discards the account secondary password, if there is one,\n              as described previously in this section.\n\n\n\n          Example: Specify the password as cleartext; the default plugin\n          is used:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'password';\n          Example: Specify the authentication plugin, along with a\n          cleartext password value:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             BY 'password';\n          Example: Like the preceding example, but in addition, specify\n          the current password as a cleartext value to satisfy any\n          account requirement that the user making the change knows that\n          password:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             BY 'password'\n             REPLACE 'current_password';\n          The preceding statement fails unless the current user is\n          jeffrey because REPLACE\n          is permitted only for changes to the current user's password.\n        \n          Example: Establish a new primary password and retain the\n          existing password as the secondary password:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password'\n  RETAIN CURRENT PASSWORD;\n          Example: Discard the secondary password, leaving the account\n          with only its primary password:\n        Press CTRL+C to copy ALTER USER 'jeffery'@'localhost' DISCARD OLD PASSWORD;\n          Example: Specify the authentication plugin, along with a\n          hashed password value:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             AS '*6C8989366EAF75BB670AD8EA7A7FC1176A95CEF4';\n          For additional information about setting passwords and\n          authentication plugins, see\n          Section\u00a08.2.14, \u201cAssigning Account Passwords\u201d, and\n          Section\u00a08.2.17, \u201cPluggable Authentication\u201d.\n\n", "\n\n\n\nALTER USER Multifactor Authentication Options\n\n\n\n\nALTER USER has\n          ADD, MODIFY, and\n          DROP clauses that enable authentication\n          factors to be added, modified, or dropped. In each case, the\n          clause specifies an operation to perform on one authentication\n          factor, and optionally an operation on another authentication\n          factor. For each operation, the\n          factor item specifies the\n          FACTOR keyword preceded by the number 2 or\n          3 to indicate whether the operation applies to the second or\n          third authentication factor. (1 is not permitted in this\n          context. To act on the first authentication factor, use the\n          syntax described in\n          ALTER USER Authentication Options.)\n        \nALTER USER multifactor\n          authentication clause constraints are defined by the\n          authentication_policy system\n          variable. For example, the\n          authentication_policy setting\n          controls the number of authentication factors that accounts\n          may have, and for each factor, which authentication methods\n          are permitted. See\n          Configuring the Multifactor Authentication Policy.\n        \n          When ALTER USER adds, modifies,\n          or drops second and third factors in a single statement,\n          operations are executed sequentially, but if any operation in\n          the sequence fails the entire ALTER\n          USER statement fails.\n        \n          For ADD, each named factor must not already\n          exist or it cannot be added. For MODIFY and\n          DROP, each named factor must exist to be\n          modified or dropped. If a second and third factor are defined,\n          dropping the second factor causes the third factor to take its\n          place as the second factor.\n        \n          This statement drops authentication factors 2 and 3, which has\n          the effect of converting the account from 3FA to 1FA:\n        Press CTRL+C to copy ALTER USER 'user' DROP 2 FACTOR 3 FACTOR;\n          For additional ADD,\n          MODIFY, and DROP\n          examples, see\n          Getting Started with Multifactor Authentication.\n        \n          For information about factor-specific rules that determine the\n          default authentication plugin for authentication clauses that\n          do not name a plugin, see\n          The Default Authentication Plugin.\n\n", "\n\n\n\nALTER USER Registration Options\n\n\n\n\nALTER USER has clauses that\n          enable FIDO/FIDO2 devices to be registered and unregistered.\n          For more information, see\n          Using WebAuthn Authentication,\n          Device Unregistration for WebAuthn,\n          and the mysql client\n          --register-factor option\n          description.\n        \n          The mysql client\n          --register-factor option, used\n          for FIDO/FIDO2 device registration, causes the\n          mysql client to generate and execute\n          INITIATE REGISTRATION and FINISH\n          REGISTRATION statements. These statements are not\n          intended for manual execution.\n\n", "\n\n\n\nALTER USER Role Options\n\n\n\n\nALTER USER ...\n          DEFAULT ROLE defines which roles become active when\n          the user connects to the server and authenticates, or when the\n          user executes the\n          SET ROLE\n          DEFAULT statement during a session.\n        \nALTER USER ...\n          DEFAULT ROLE is alternative syntax for\n          SET DEFAULT ROLE (see\n          Section\u00a015.7.1.9, \u201cSET DEFAULT ROLE Statement\u201d). However,\n          ALTER USER can set the default\n          for only a single user, whereas SET\n          DEFAULT ROLE can set the default for multiple users.\n          On the other hand, you can specify\n          CURRENT_USER as the user name for the\n          ALTER USER statement, whereas\n          you cannot for SET DEFAULT\n          ROLE.\n        \n          Each user account name uses the format described previously.\n        \n          Each role name uses the format described in\n          Section\u00a08.2.5, \u201cSpecifying Role Names\u201d. For example:\n        Press CTRL+C to copy ALTER USER 'joe'@'10.0.0.1' DEFAULT ROLE administrator, developer;\n          The host name part of the role name, if omitted, defaults to\n          '%'.\n        \n          The clause following the DEFAULT ROLE\n          keywords permits these values:\n\n\n\nNONE: Set the default to\n              NONE (no roles).\n            \nALL: Set the default to all roles\n              granted to the account.\n            \nrole [,\n              role ] ...: Set the\n              default to the named roles, which must exist and be\n              granted to the account at the time\n              ALTER USER ...\n              DEFAULT ROLE is executed.\n\n\n", "\n\n\n\nALTER USER SSL/TLS Options\n\n\n\n\n          MySQL can check X.509 certificate attributes in addition to\n          the usual authentication that is based on the user name and\n          credentials. For background information on the use of SSL/TLS\n          with MySQL, see Section\u00a08.3, \u201cUsing Encrypted Connections\u201d.\n        \n          To specify SSL/TLS-related options for a MySQL account, use a\n          REQUIRE clause that specifies one or more\n          tls_option values.\n        \n          Order of REQUIRE options does not matter,\n          but no option can be specified twice. The\n          AND keyword is optional between\n          REQUIRE options.\n        \nALTER USER permits these\n          tls_option values:\n\n\n\nNONE\n\n              Indicates that all accounts named by the statement have no\n              SSL or X.509 requirements. Unencrypted connections are\n              permitted if the user name and password are valid.\n              Encrypted connections can be used, at the client's option,\n              if the client has the proper certificate and key files.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' REQUIRE NONE;\n              Clients attempt to establish a secure connection by\n              default. For clients that have REQUIRE\n              NONE, the connection attempt falls back to an\n              unencrypted connection if a secure connection cannot be\n              established. To require an encrypted connection, a client\n              need specify only the\n              --ssl-mode=REQUIRED\n              option; the connection attempt fails if a secure\n              connection cannot be established.\n            \nSSL\n\n              Tells the server to permit only encrypted connections for\n              all accounts named by the statement.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' REQUIRE SSL;\n              Clients attempt to establish a secure connection by\n              default. For accounts that have REQUIRE\n              SSL, the connection attempt fails if a secure\n              connection cannot be established.\n            \nX509\n\n              For all accounts named by the statement, requires that\n              clients present a valid certificate, but the exact\n              certificate, issuer, and subject do not matter. The only\n              requirement is that it should be possible to verify its\n              signature with one of the CA certificates. Use of X.509\n              certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' REQUIRE X509;\n              For accounts with REQUIRE X509, clients\n              must specify the --ssl-key\n              and --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.) This is true for ISSUER\n              and SUBJECT as well because those\n              REQUIRE options imply the requirements\n              of X509.\n            \nISSUER\n              'issuer'\n\n              For all accounts named by the statement, requires that\n              clients present a valid X.509 certificate issued by CA\n              'issuer'. If\n              a client presents a certificate that is valid but has a\n              different issuer, the server rejects the connection. Use\n              of X.509 certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com';\n              Because ISSUER implies the requirements\n              of X509, clients must specify the\n              --ssl-key and\n              --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.)\n            \nSUBJECT\n              'subject'\n\n              For all accounts named by the statement, requires that\n              clients present a valid X.509 certificate containing the\n              subject subject. If a client\n              presents a certificate that is valid but has a different\n              subject, the server rejects the connection. Use of X.509\n              certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com';\n              MySQL does a simple string comparison of the\n              'subject'\n              value to the value in the certificate, so lettercase and\n              component ordering must be given exactly as present in the\n              certificate.\n            \n              Because SUBJECT implies the\n              requirements of X509, clients must\n              specify the --ssl-key and\n              --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.)\n            \nCIPHER\n              'cipher'\n\n              For all accounts named by the statement, requires a\n              specific cipher method for encrypting connections. This\n              option is needed to ensure that ciphers and key lengths of\n              sufficient strength are used. Encryption can be weak if\n              old algorithms using short encryption keys are used.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  REQUIRE CIPHER 'EDH-RSA-DES-CBC3-SHA';\n\n\n          The SUBJECT, ISSUER, and\n          CIPHER options can be combined in the\n          REQUIRE clause:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com'\n  AND ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com'\n  AND CIPHER 'EDH-RSA-DES-CBC3-SHA';\n", "\n\n\n\nALTER USER Resource-Limit Options\n\n\n\n\n          It is possible to place limits on use of server resources by\n          an account, as discussed in Section\u00a08.2.21, \u201cSetting Account Resource Limits\u201d.\n          To do so, use a WITH clause that specifies\n          one or more resource_option values.\n        \n          Order of WITH options does not matter,\n          except that if a given resource limit is specified multiple\n          times, the last instance takes precedence.\n        \nALTER USER permits these\n          resource_option values:\n\n\n\nMAX_QUERIES_PER_HOUR\n              count,\n              MAX_UPDATES_PER_HOUR\n              count,\n              MAX_CONNECTIONS_PER_HOUR\n              count\n\n              For all accounts named by the statement, these options\n              restrict how many queries, updates, and connections to the\n              server are permitted to each account during any given\n              one-hour period. If count is\n              0 (the default), this means that there\n              is no limitation for the account.\n            \nMAX_USER_CONNECTIONS\n              count\n\n              For all accounts named by the statement, restricts the\n              maximum number of simultaneous connections to the server\n              by each account. A nonzero\n              count specifies the limit for\n              the account explicitly. If\n              count is 0\n              (the default), the server determines the number of\n              simultaneous connections for the account from the global\n              value of the\n              max_user_connections\n              system variable. If\n              max_user_connections is\n              also zero, there is no limit for the account.\n\n\n\n          Example:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100;\n", "\n\n\n\nALTER USER Password-Management Options\n\n\n\n\nALTER USER supports several\n          password_option values for password\n          management:\n\n\n\n              Password expiration options: You can expire an account\n              password manually and establish its password expiration\n              policy. Policy options do not expire the password.\n              Instead, they determine how the server applies automatic\n              expiration to the account based on password age, which is\n              assessed from the date and time of the most recent account\n              password change.\n            \n              Password reuse options: You can restrict password reuse\n              based on number of password changes, time elapsed, or\n              both.\n            \n              Password verification-required options: You can indicate\n              whether attempts to change an account password must\n              specify the current password, as verification that the\n              user attempting to make the change actually knows the\n              current password.\n            \n              Incorrect-password failed-login tracking options: You can\n              cause the server to track failed login attempts and\n              temporarily lock accounts for which too many consecutive\n              incorrect passwords are given. The required number of\n              failures and the lock time are configurable.\n\n\n\n          This section describes the syntax for password-management\n          options. For information about establishing policy for\n          password management, see\n          Section\u00a08.2.15, \u201cPassword Management\u201d.\n        \n          If multiple password-management options of a given type are\n          specified, the last one takes precedence. For example,\n          PASSWORD EXPIRE DEFAULT PASSWORD EXPIRE\n          NEVER is the same as PASSWORD EXPIRE\n          NEVER.\n\n\n\nNote\n\n\n            Except for the options that pertain to failed-login\n            tracking, password-management options apply only to accounts\n            that use an authentication plugin that stores credentials\n            internally to MySQL. For accounts that use a plugin that\n            performs authentication against a credentials system that is\n            external to MySQL, password management must be handled\n            externally against that system as well. For more information\n            about internal credentials storage, see\n            Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n\n\n          A client has an expired password if the account password was\n          expired manually or the password age is considered greater\n          than its permitted lifetime per the automatic expiration\n          policy. In this case, the server either disconnects the client\n          or restricts the operations permitted to it (see\n          Section\u00a08.2.16, \u201cServer Handling of Expired Passwords\u201d). Operations\n          performed by a restricted client result in an error until the\n          user establishes a new account password.\n\n\n\nNote\n\n\n            Although it is possible to \u201creset\u201d an expired\n            password by setting it to its current value, it is\n            preferable, as a matter of good policy, to choose a\n            different password. DBAs can enforce non-reuse by\n            establishing an appropriate password-reuse policy. See\n            Password Reuse Policy.\n\n\n\nALTER USER permits these\n          password_option values for\n          controlling password expiration:\n\n\n\nPASSWORD EXPIRE\n\n              Immediately marks the password expired for all accounts\n              named by the statement.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE;\nPASSWORD EXPIRE DEFAULT\n\n              Sets all accounts named by the statement so that the\n              global expiration policy applies, as specified by the\n              default_password_lifetime\n              system variable.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;\nPASSWORD EXPIRE NEVER\n\n              This expiration option overrides the global policy for all\n              accounts named by the statement. For each, it disables\n              password expiration so that the password never expires.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;\nPASSWORD EXPIRE INTERVAL\n              N DAY\n\n              This expiration option overrides the global policy for all\n              accounts named by the statement. For each, it sets the\n              password lifetime to N days.\n              The following statement requires the password to be\n              changed every 180 days:\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 180 DAY;\n\n\nALTER USER permits these\n          password_option values for\n          controlling reuse of previous passwords based on required\n          minimum number of password changes:\n\n\n\nPASSWORD HISTORY DEFAULT\n\n              Sets all accounts named by the statement so that the\n              global policy about password history length applies, to\n              prohibit reuse of passwords before the number of changes\n              specified by the\n              password_history system\n              variable.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD HISTORY DEFAULT;\nPASSWORD HISTORY\n              N\n\n              This history-length option overrides the global policy for\n              all accounts named by the statement. For each, it sets the\n              password history length to N\n              passwords, to prohibit reusing any of the\n              N most recently chosen\n              passwords. The following statement prohibits reuse of any\n              of the previous 6 passwords:\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD HISTORY 6;\n\n\nALTER USER permits these\n          password_option values for\n          controlling reuse of previous passwords based on time elapsed:\n\n\n\nPASSWORD REUSE INTERVAL DEFAULT\n\n              Sets all statements named by the account so that the\n              global policy about time elapsed applies, to prohibit\n              reuse of passwords newer than the number of days specified\n              by the\n              password_reuse_interval\n              system variable.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL DEFAULT;\nPASSWORD REUSE INTERVAL\n              N DAY\n\n              This time-elapsed option overrides the global policy for\n              all accounts named by the statement. For each, it sets the\n              password reuse interval to N\n              days, to prohibit reuse of passwords newer than that many\n              days. The following statement prohibits password reuse for\n              360 days:\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL 360 DAY;\n\n\nALTER USER permits these\n          password_option values for\n          controlling whether attempts to change an account password\n          must specify the current password, as verification that the\n          user attempting to make the change actually knows the current\n          password:\n\n\n\nPASSWORD REQUIRE CURRENT\n\n              This verification option overrides the global policy for\n              all accounts named by the statement. For each, it requires\n              that password changes specify the current password.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT;\nPASSWORD REQUIRE CURRENT OPTIONAL\n\n              This verification option overrides the global policy for\n              all accounts named by the statement. For each, it does not\n              require that password changes specify the current\n              password. (The current password may but need not be\n              given.)\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT OPTIONAL;\nPASSWORD REQUIRE CURRENT DEFAULT\n\n              Sets all statements named by the account so that the\n              global policy about password verification applies, as\n              specified by the\n              password_require_current\n              system variable.\n            Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT DEFAULT;\n\n\nALTER USER permits these\n          password_option values for\n          controlling failed-login tracking:\n\n\n\nFAILED_LOGIN_ATTEMPTS\n              N\n\n              Whether to track account login attempts that specify an\n              incorrect password. N must be a\n              number from 0 to 32767. A value of 0 disables failed-login\n              tracking. Values greater than 0 indicate how many\n              consecutive password failures cause temporary account\n              locking (if PASSWORD_LOCK_TIME is also\n              nonzero).\n            \nPASSWORD_LOCK_TIME {N\n              | UNBOUNDED}\n\n              How long to lock the account after too many consecutive\n              login attempts provide an incorrect password.\n              N must be a number from 0 to\n              32767, or UNBOUNDED. A value of 0\n              disables temporary account locking. Values greater than 0\n              indicate how long to lock the account in days. A value of\n              UNBOUNDED causes the account locking\n              duration to be unbounded; once locked, the account remains\n              in a locked state until unlocked. For information about\n              the conditions under which unlocking occurs, see\n              Failed-Login Tracking and Temporary Account Locking.\n\n\n\n          For failed-login tracking and temporary locking to occur, an\n          account's FAILED_LOGIN_ATTEMPTS and\n          PASSWORD_LOCK_TIME options both must be\n          nonzero. The following statement modifies an account such that\n          it remains locked for two days after four consecutive password\n          failures:\n        Press CTRL+C to copy ALTER USER 'jeffrey'@'localhost'\n  FAILED_LOGIN_ATTEMPTS 4 PASSWORD_LOCK_TIME 2;\n", "\n\n\n\nALTER USER Comment and Attribute Options\n\n\n\n\n          MySQL 8.4 supports user comments and user\n          attributes, as described in Section\u00a015.7.1.3, \u201cCREATE USER Statement\u201d.\n          These can be modified employing ALTER USER\n          by means of the COMMENT and\n          ATTRIBUTE options, respectively. You cannot\n          specify both options in the same ALTER USER\n          statement; attempting to do so results in a syntax error.\n        \n          The user comment and user attribute are stored in the\n          Information Schema\n          USER_ATTRIBUTES table as a JSON\n          object; the user comment is stored as the value for a\n          comment key in the ATTRIBUTE column of this\n          table, as shown later in this discussion. The\n          COMMENT text can be any arbitrary quoted\n          text, and replaces any existing user comment. The\n          ATTRIBUTE value must be the valid string\n          representation of a JSON object. This is merged with any\n          existing user attribute as if the\n          JSON_MERGE_PATCH() function had\n          been used on the existing user attribute and the new one; for\n          any keys that are re-used, the new value overwrites the old\n          one, as shown here:\n        Press CTRL+C to copy mysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"foo\": \"bar\"} |\n+------+-----------+----------------+\n1 row in set (0.11 sec)\n\nmysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"baz\": \"faz\", \"foo\": \"moo\"}';\nQuery OK, 0 rows affected (0.22 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+------------------------------+\n| USER | HOST      | ATTRIBUTE                    |\n+------+-----------+------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"foo\": \"moo\"} |\n+------+-----------+------------------------------+\n1 row in set (0.00 sec)\n          To remove a key and its value from the user attribute, set the\n          key to JSON null (must be lowercase and\n          unquoted), like this:\n        Press CTRL+C to copy mysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"foo\": null}';\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"baz\": \"faz\"} |\n+------+-----------+----------------+\n1 row in set (0.00 sec)\n          To set an existing user comment to an empty string, use\n          ALTER USER ... COMMENT ''. This leaves an\n          empty comment value in the\n          USER_ATTRIBUTES table; to remove\n          the user comment completely, use ALTER USER ...\n          ATTRIBUTE ... with the value for the column key set\n          to JSON null (unquoted, in lower case).\n          This is illustrated by the following sequence of SQL\n          statements:\n        Press CTRL+C to copy mysql> ALTER USER 'bill'@'localhost' COMMENT 'Something about Bill';\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+---------------------------------------------------+\n| USER | HOST      | ATTRIBUTE                                         |\n+------+-----------+---------------------------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"comment\": \"Something about Bill\"} |\n+------+-----------+---------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> ALTER USER 'bill'@'localhost' COMMENT '';\nQuery OK, 0 rows affected (0.09 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+-------------------------------+\n| USER | HOST      | ATTRIBUTE                     |\n+------+-----------+-------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"comment\": \"\"} |\n+------+-----------+-------------------------------+\n1 row in set (0.00 sec)\n\nmysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"comment\": null}';\nQuery OK, 0 rows affected (0.07 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"baz\": \"faz\"} |\n+------+-----------+----------------+\n1 row in set (0.00 sec)\n", "\n\n\n\nALTER USER Account-Locking Options\n\n\n\n\n          MySQL supports account locking and unlocking using the\n          ACCOUNT LOCK and ACCOUNT\n          UNLOCK options, which specify the locking state for\n          an account. For additional discussion, see\n          Section\u00a08.2.20, \u201cAccount Locking\u201d.\n        \n          If multiple account-locking options are specified, the last\n          one takes precedence.\n        \nALTER USER ...\n          ACCOUNT UNLOCK unlocks any account named by the\n          statement that is temporarily locked due to too many failed\n          logins. See Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n", "\n\n\n\nALTER USER Binary Logging\n\n\n\n\nALTER USER is written to the\n          binary log if it succeeds, but not if it fails; in that case,\n          rollback occurs and no changes are made. A statement written\n          to the binary log includes all named users. If the IF\n          EXISTS clause is given, this includes even users\n          that do not exist and were not altered.\n        \n          If the original statement changes the credentials for a user,\n          the statement written to the binary log specifies the\n          applicable authentication plugin for that user, determined as\n          follows:\n\n\n\n              The plugin named in the original statement, if one was\n              specified.\n            \n              Otherwise, the plugin associated with the user account if\n              the user exists, or the default authentication plugin if\n              the user does not exist. (If the statement written to the\n              binary log must specify a particular authentication plugin\n              for a user, include it in the original statement.)\n\n\n\n          If the server adds the default authentication plugin for any\n          users in the statement written to the binary log, it writes a\n          warning to the error log naming those users.\n        \n          If the original statement specifies the\n          FAILED_LOGIN_ATTEMPTS or\n          PASSWORD_LOCK_TIME option, the statement\n          written to the binary log includes the option.\n        \nALTER USER statements with\n          clauses that support multifactor authentication (MFA) are\n          written to the binary log with the exception of ALTER\n          USER user factor INITIATE\n          REGISTRATION statements.\n\n\n\nALTER USER user factor\n              FINISH REGISTRATION SET CHALLENGE_RESPONSE AS\n              'auth_string'\n              statements are written to the binary log as ALTER\n              USER user MODIFY\n              factor IDENTIFIED WITH\n              authentication_webauthn AS\n              webauthn_hash_string;\n            \n              In a replication context, the replication user requires\n              PASSWORDLESS_USER_ADMIN\n              privilege to execute ALTER USER ...\n              MODIFY operations on accounts configured for\n              passwordless authentication using the\n              authentication_webauthn plugin.\n\n\n"], "Examples": ["SELECT CURRENT_USER();", "ALTER USER USER() IDENTIFIED BY 'auth_string';", "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password' PASSWORD EXPIRE;", "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH caching_sha2_password BY 'new_password'\n  PASSWORD EXPIRE INTERVAL 180 DAY\n  FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 2;", "ALTER USER 'jeffrey'@'localhost' ACCOUNT LOCK;\nALTER USER 'jeffrey'@'localhost' ACCOUNT UNLOCK;", "ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SSL WITH MAX_CONNECTIONS_PER_HOUR 20;", "ALTER USER\n  'jeffrey'@'localhost'\n    IDENTIFIED BY 'jeffrey_new_password',\n  'jeanne'@'localhost',\n  'josh'@'localhost'\n    IDENTIFIED BY 'josh_new_password'\n    REPLACE 'josh_current_password'\n    RETAIN CURRENT PASSWORD\n  REQUIRE SSL WITH MAX_USER_CONNECTIONS 2\n  PASSWORD HISTORY 5;", "ALTER USER 'josh'@'localhost' DISCARD OLD PASSWORD;", "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'password';", "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             BY 'password';", "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             BY 'password'\n             REPLACE 'current_password';", "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password'\n  RETAIN CURRENT PASSWORD;", "ALTER USER 'jeffery'@'localhost' DISCARD OLD PASSWORD;", "ALTER USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password\n             AS '*6C8989366EAF75BB670AD8EA7A7FC1176A95CEF4';", "ALTER USER 'user' DROP 2 FACTOR 3 FACTOR;", "ALTER USER 'joe'@'10.0.0.1' DEFAULT ROLE administrator, developer;", "ALTER USER 'jeffrey'@'localhost' REQUIRE NONE;", "ALTER USER 'jeffrey'@'localhost' REQUIRE SSL;", "ALTER USER 'jeffrey'@'localhost' REQUIRE X509;", "ALTER USER 'jeffrey'@'localhost'\n  REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com';", "ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com';", "ALTER USER 'jeffrey'@'localhost'\n  REQUIRE CIPHER 'EDH-RSA-DES-CBC3-SHA';", "ALTER USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com'\n  AND ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com'\n  AND CIPHER 'EDH-RSA-DES-CBC3-SHA';", "ALTER USER 'jeffrey'@'localhost'\n  WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100;", "ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE;", "ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;", "ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;", "ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 180 DAY;", "ALTER USER 'jeffrey'@'localhost' PASSWORD HISTORY DEFAULT;", "ALTER USER 'jeffrey'@'localhost' PASSWORD HISTORY 6;", "ALTER USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL DEFAULT;", "ALTER USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL 360 DAY;", "ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT;", "ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT OPTIONAL;", "ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT DEFAULT;", "ALTER USER 'jeffrey'@'localhost'\n  FAILED_LOGIN_ATTEMPTS 4 PASSWORD_LOCK_TIME 2;", "mysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"foo\": \"bar\"} |\n+------+-----------+----------------+\n1 row in set (0.11 sec)\n\nmysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"baz\": \"faz\", \"foo\": \"moo\"}';\nQuery OK, 0 rows affected (0.22 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+------------------------------+\n| USER | HOST      | ATTRIBUTE                    |\n+------+-----------+------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"foo\": \"moo\"} |\n+------+-----------+------------------------------+\n1 row in set (0.00 sec)", "mysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"foo\": null}';\nQuery OK, 0 rows affected (0.08 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"baz\": \"faz\"} |\n+------+-----------+----------------+\n1 row in set (0.00 sec)", "mysql> ALTER USER 'bill'@'localhost' COMMENT 'Something about Bill';\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+---------------------------------------------------+\n| USER | HOST      | ATTRIBUTE                                         |\n+------+-----------+---------------------------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"comment\": \"Something about Bill\"} |\n+------+-----------+---------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> ALTER USER 'bill'@'localhost' COMMENT '';\nQuery OK, 0 rows affected (0.09 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+-------------------------------+\n| USER | HOST      | ATTRIBUTE                     |\n+------+-----------+-------------------------------+\n| bill | localhost | {\"baz\": \"faz\", \"comment\": \"\"} |\n+------+-----------+-------------------------------+\n1 row in set (0.00 sec)\n\nmysql> ALTER USER 'bill'@'localhost' ATTRIBUTE '{\"comment\": null}';\nQuery OK, 0 rows affected (0.07 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->     WHERE USER='bill' AND HOST='localhost';\n+------+-----------+----------------+\n| USER | HOST      | ATTRIBUTE      |\n+------+-----------+----------------+\n| bill | localhost | {\"baz\": \"faz\"} |\n+------+-----------+----------------+\n1 row in set (0.00 sec)"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/set-password.html"], "Title": ["15.7.1.10 SET PASSWORD Statement"], "Feature": ["SET PASSWORD [FOR user] auth_option\n    [REPLACE 'current_auth_string']\n    [RETAIN CURRENT PASSWORD]\n\nauth_option: {\n    = 'auth_string'\n  | TO RANDOM\n}"], "Description": ["\n        The SET PASSWORD statement\n        assigns a password to a MySQL user account. The password may be\n        either explicitly specified in the statement or randomly\n        generated by MySQL. The statement may also include a\n        password-verification clause that specifies the account current\n        password to be replaced, and a clause that manages whether an\n        account has a secondary password.\n        'auth_string' and\n        'current_auth_string'\n        each represent a cleartext (unencrypted) password.\n", "\n\nNote\n\n\n          Rather than using SET PASSWORD\n          to assign passwords, ALTER USER\n          is the preferred statement for account alterations, including\n          assigning passwords. For example:\n        Press CTRL+C to copy ALTER USER user IDENTIFIED BY 'auth_string';\n", "\n\nNote\n\n\n          Clauses for random password generation, password verification,\n          and secondary passwords apply only to accounts that use an\n          authentication plugin that stores credentials internally to\n          MySQL. For accounts that use a plugin that performs\n          authentication against a credentials system that is external\n          to MySQL, password management must be handled externally\n          against that system as well. For more information about\n          internal credentials storage, see\n          Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n", "\n        The REPLACE\n        'current_auth_string'\n        clause performs password verification. If given:\n", "\n\nREPLACE specifies the account current\n            password to be replaced, as a cleartext (unencrypted)\n            string.\n          \n            The clause must be given if password changes for the account\n            are required to specify the current password, as\n            verification that the user attempting to make the change\n            actually knows the current password.\n          \n            The clause is optional if password changes for the account\n            may but need not specify the current password.\n          \n            The statement fails if the clause is given but does not\n            match the current password, even if the clause is optional.\n          \nREPLACE can be specified only when\n            changing the account password for the current user.\n\n", "\n        For more information about password verification by specifying\n        the current password, see Section\u00a08.2.15, \u201cPassword Management\u201d.\n      ", "\n        The RETAIN CURRENT PASSWORD clause implements\n        dual-password capability. If given:\n", "\n\nRETAIN CURRENT PASSWORD retains an\n            account current password as its secondary password,\n            replacing any existing secondary password. The new password\n            becomes the primary password, but clients can use the\n            account to connect to the server using either the primary or\n            secondary password. (Exception: If the new password\n            specified by the SET PASSWORD\n            statement is empty, the secondary password becomes empty as\n            well, even if RETAIN CURRENT PASSWORD is\n            given.)\n          \n            If you specify RETAIN CURRENT PASSWORD\n            for an account that has an empty primary password, the\n            statement fails.\n          \n            If an account has a secondary password and you change its\n            primary password without specifying RETAIN CURRENT\n            PASSWORD, the secondary password remains\n            unchanged.\n\n", "\n        For more information about use of dual passwords, see\n        Section\u00a08.2.15, \u201cPassword Management\u201d.\n      ", "\nSET PASSWORD permits these\n        auth_option syntaxes:\n", "\n\n=\n            'auth_string'\n\n            Assigns the account the given literal password.\n          \nTO RANDOM\n\n            Assigns the account a password randomly generated by MySQL.\n            The statement also returns the cleartext password in a\n            result set to make it available to the user or application\n            executing the statement.\n          \n            For details about the result set and characteristics of\n            randomly generated passwords, see\n            Random Password Generation.\n\n", "\n\nImportant\n\n\n          Under some circumstances, SET\n          PASSWORD may be recorded in server logs or on the\n          client side in a history file such as\n          ~/.mysql_history, which means that\n          cleartext passwords may be read by anyone having read access\n          to that information. For information about the conditions\n          under which this occurs for the server logs and how to control\n          it, see Section\u00a08.1.2.3, \u201cPasswords and Logging\u201d. For similar\n          information about client-side logging, see\n          Section\u00a06.5.1.3, \u201cmysql Client Logging\u201d.\n\n", "\nSET PASSWORD can be used with or\n        without a FOR clause that explicitly names a\n        user account:\n", "\n\n            With a FOR\n            user clause, the\n            statement sets the password for the named account, which\n            must exist:\n          Press CTRL+C to copy SET PASSWORD FOR 'jeffrey'@'localhost' = 'auth_string';\n            With no FOR\n            user clause, the\n            statement sets the password for the current user:\n          Press CTRL+C to copy SET PASSWORD = 'auth_string';\n            Any client who connects to the server using a nonanonymous\n            account can change the password for that account. (In\n            particular, you can change your own password.) To see which\n            account the server authenticated you as, invoke the\n            CURRENT_USER() function:\n          Press CTRL+C to copy SELECT CURRENT_USER();\n", "\n        If a FOR user\n        clause is given, the account name uses the format described in\n        Section\u00a08.2.4, \u201cSpecifying Account Names\u201d. For example:\n      ", "Press CTRL+C to copy SET PASSWORD FOR 'bob'@'%.example.org' = 'auth_string';", "\n        The host name part of the account name, if omitted, defaults to\n        '%'.\n      ", "\nSET PASSWORD interprets the\n        string as a cleartext string, passes it to the authentication\n        plugin associated with the account, and stores the result\n        returned by the plugin in the account row in the\n        mysql.user system table. (The plugin is given\n        the opportunity to hash the value into the encryption format it\n        expects. The plugin may use the value as specified, in which\n        case no hashing occurs.)\n      ", "\n        Setting the password for a named account (with a\n        FOR clause) requires the\n        UPDATE privilege for the\n        mysql system schema. Setting the password for\n        yourself (for a nonanonymous account with no\n        FOR clause) requires no special privileges.\n      ", "\n        Statements that modify secondary passwords require these\n        privileges:\n", "\n\n            The\n            APPLICATION_PASSWORD_ADMIN\n            privilege is required to use the RETAIN CURRENT\n            PASSWORD clause for SET\n            PASSWORD statements that apply to your own\n            account. The privilege is required to manipulate your own\n            secondary password because most users require only one\n            password.\n          \n            If an account is to be permitted to manipulate secondary\n            passwords for all accounts, it should be granted the\n            CREATE USER privilege rather\n            than\n            APPLICATION_PASSWORD_ADMIN.\n\n", "\n        When the read_only system\n        variable is enabled, SET PASSWORD\n        requires the CONNECTION_ADMIN\n        privilege (or the deprecated\n        SUPER privilege), in addition to\n        any other required privileges.\n      ", "\n        For additional information about setting passwords and\n        authentication plugins, see\n        Section\u00a08.2.14, \u201cAssigning Account Passwords\u201d, and\n        Section\u00a08.2.17, \u201cPluggable Authentication\u201d.\n"], "Examples": ["ALTER USER user IDENTIFIED BY 'auth_string';", "SET PASSWORD FOR 'jeffrey'@'localhost' = 'auth_string';", "SET PASSWORD = 'auth_string';", "SELECT CURRENT_USER();", "SET PASSWORD FOR 'bob'@'%.example.org' = 'auth_string';"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/set-role.html"], "Title": ["15.7.1.11 SET ROLE Statement"], "Feature": ["SET ROLE {\n    DEFAULT\n  | NONE\n  | ALL\n  | ALL EXCEPT role [, role ] ...\n  | role [, role ] ...\n}"], "Description": ["\nSET ROLE modifies the current\n        user's effective privileges within the current session by\n        specifying which of its granted roles are active. Granted roles\n        include those granted explicitly to the user and those named in\n        the mandatory_roles system\n        variable value.\n      ", "\n        Examples:\n      ", "Press CTRL+C to copy SET ROLE DEFAULT;\nSET ROLE 'role1', 'role2';\nSET ROLE ALL;\nSET ROLE ALL EXCEPT 'role1', 'role2';", "\n        Each role name uses the format described in\n        Section\u00a08.2.5, \u201cSpecifying Role Names\u201d. The host name part of the role\n        name, if omitted, defaults to '%'.\n      ", "\n        Privileges that the user has been granted directly (rather than\n        through roles) remain unaffected by changes to the active roles.\n      ", "\n        The statement permits these role specifiers:\n", "\n\nDEFAULT: Activate the account default\n            roles. Default roles are those specified with\n            SET DEFAULT ROLE.\n          \n            When a user connects to the server and authenticates\n            successfully, the server determines which roles to activate\n            as the default roles. If the\n            activate_all_roles_on_login\n            system variable is enabled, the server activates all granted\n            roles. Otherwise, the server executes\n            SET ROLE\n            DEFAULT implicitly. The server activates only\n            default roles that can be activated. The server writes\n            warnings to its error log for default roles that cannot be\n            activated, but the client receives no warnings.\n          \n            If a user executes\n            SET ROLE\n            DEFAULT during a session, an error occurs if any\n            default role cannot be activated (for example, if it does\n            not exist or is not granted to the user). In this case, the\n            current active roles are not changed.\n          \nNONE: Set the active roles to\n            NONE (no active roles).\n          \nALL: Activate all roles granted to the\n            account.\n          \nALL EXCEPT role [,\n            role ] ...: Activate\n            all roles granted to the account except those named. The\n            named roles need not exist or be granted to the account.\n          \nrole [,\n            role ] ...: Activate\n            the named roles, which must be granted to the account.\n\n", "\n\nNote\n\n\nSET DEFAULT ROLE and\n          SET ROLE\n          DEFAULT are different statements:\n\n\n\nSET DEFAULT ROLE defines\n              which account roles to activate by default within account\n              sessions.\n            \nSET ROLE\n              DEFAULT sets the active roles within the current\n              session to the current account default roles.\n\n\n", "\n        For role usage examples, see Section\u00a08.2.10, \u201cUsing Roles\u201d.\n"], "Examples": ["SET ROLE DEFAULT;\nSET ROLE 'role1', 'role2';\nSET ROLE ALL;\nSET ROLE ALL EXCEPT 'role1', 'role2';"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-role.html"], "Title": ["15.7.1.2 CREATE ROLE Statement"], "Feature": ["CREATE ROLE [IF NOT EXISTS] role [, role ] ..."], "Description": ["\nCREATE ROLE creates one or more\n        roles, which are named collections of privileges. To use this\n        statement, you must have the global CREATE\n        ROLE or CREATE USER\n        privilege. When the read_only\n        system variable is enabled, CREATE\n        ROLE additionally requires the\n        CONNECTION_ADMIN privilege (or\n        the deprecated SUPER privilege).\n      ", "\n        A role when created is locked, has no password, and is assigned\n        the default authentication plugin. (These role attributes can be\n        changed later with the ALTER USER\n        statement, by users who have the global\n        CREATE USER privilege.)\n      ", "\nCREATE ROLE either succeeds for\n        all named roles or rolls back and has no effect if any error\n        occurs. By default, an error occurs if you try to create a role\n        that already exists. If the IF NOT EXISTS\n        clause is given, the statement produces a warning for each named\n        role that already exists, rather than an error.\n      ", "\n        The statement is written to the binary log if it succeeds, but\n        not if it fails; in that case, rollback occurs and no changes\n        are made. A statement written to the binary log includes all\n        named roles. If the IF NOT EXISTS clause is\n        given, this includes even roles that already exist and were not\n        created.\n      ", "\n        Each role name uses the format described in\n        Section\u00a08.2.5, \u201cSpecifying Role Names\u201d. For example:\n      ", "Press CTRL+C to copy CREATE ROLE 'admin', 'developer';\nCREATE ROLE 'webapp'@'localhost';", "\n        The host name part of the role name, if omitted, defaults to\n        '%'.\n      ", "\n        For role usage examples, see Section\u00a08.2.10, \u201cUsing Roles\u201d.\n"], "Examples": ["CREATE ROLE 'admin', 'developer';\nCREATE ROLE 'webapp'@'localhost';"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/create-user.html"], "Title": ["15.7.1.3 CREATE USER Statement"], "Feature": ["CREATE USER [IF NOT EXISTS]\n    user [auth_option] [, user [auth_option]] ...\n    DEFAULT ROLE role [, role ] ...\n    [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]\n    [WITH resource_option [resource_option] ...]\n    [password_option | lock_option] ...\n    [COMMENT 'comment_string' | ATTRIBUTE 'json_object']\n\nuser:\n    (see Section 8.2.4, \u201cSpecifying Account Names\u201d)\n\nauth_option: {\n    IDENTIFIED BY 'auth_string' [AND 2fa_auth_option]\n  | IDENTIFIED BY RANDOM PASSWORD [AND 2fa_auth_option]\n  | IDENTIFIED WITH auth_plugin [AND 2fa_auth_option]\n  | IDENTIFIED WITH auth_plugin BY 'auth_string' [AND 2fa_auth_option]\n  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD [AND 2fa_auth_option]\n  | IDENTIFIED WITH auth_plugin AS 'auth_string' [AND 2fa_auth_option]\n  | IDENTIFIED WITH auth_plugin [initial_auth_option]\n}\n\n2fa_auth_option: {\n    IDENTIFIED BY 'auth_string' [AND 3fa_auth_option]\n  | IDENTIFIED BY RANDOM PASSWORD [AND 3fa_auth_option]\n  | IDENTIFIED WITH auth_plugin [AND 3fa_auth_option]\n  | IDENTIFIED WITH auth_plugin BY 'auth_string' [AND 3fa_auth_option]\n  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD [AND 3fa_auth_option]\n  | IDENTIFIED WITH auth_plugin AS 'auth_string' [AND 3fa_auth_option]\n}\n\n3fa_auth_option: {\n    IDENTIFIED BY 'auth_string'\n  | IDENTIFIED BY RANDOM PASSWORD\n  | IDENTIFIED WITH auth_plugin\n  | IDENTIFIED WITH auth_plugin BY 'auth_string'\n  | IDENTIFIED WITH auth_plugin BY RANDOM PASSWORD\n  | IDENTIFIED WITH auth_plugin AS 'auth_string'\n}\n\ninitial_auth_option: {\n    INITIAL AUTHENTICATION IDENTIFIED BY {RANDOM PASSWORD | 'auth_string'}\n  | INITIAL AUTHENTICATION IDENTIFIED WITH auth_plugin AS 'auth_string'\n}\n\ntls_option: {\n   SSL\n | X509\n | CIPHER 'cipher'\n | ISSUER 'issuer'\n | SUBJECT 'subject'\n}\n\nresource_option: {\n    MAX_QUERIES_PER_HOUR count\n  | MAX_UPDATES_PER_HOUR count\n  | MAX_CONNECTIONS_PER_HOUR count\n  | MAX_USER_CONNECTIONS count\n}\n\npassword_option: {\n    PASSWORD EXPIRE [DEFAULT | NEVER | INTERVAL N DAY]\n  | PASSWORD HISTORY {DEFAULT | N}\n  | PASSWORD REUSE INTERVAL {DEFAULT | N DAY}\n  | PASSWORD REQUIRE CURRENT [DEFAULT | OPTIONAL]\n  | FAILED_LOGIN_ATTEMPTS N\n  | PASSWORD_LOCK_TIME {N | UNBOUNDED}\n}\n\nlock_option: {\n    ACCOUNT LOCK\n  | ACCOUNT UNLOCK\n}", "mysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->    WHERE USER = 'jim' AND HOST = 'localhost'\\G\n*************************** 1. row ***************************\n     USER: jim\n     HOST: localhost\nATTRIBUTE: {\"fname\": \"James\", \"lname\": \"Scott\", \"phone\": \"123-456-7890\"}\n1 row in set (0.00 sec)"], "Description": ["\n        The CREATE USER statement creates\n        new MySQL accounts. It enables authentication, role, SSL/TLS,\n        resource-limit, password-management, comment, and attribute\n        properties to be established for new accounts. It also controls\n        whether accounts are initially locked or unlocked.\n      ", "\n        To use CREATE USER, you must have\n        the global CREATE USER privilege,\n        or the INSERT privilege for the\n        mysql system schema. When the\n        read_only system variable is\n        enabled, CREATE USER additionally\n        requires the CONNECTION_ADMIN\n        privilege (or the deprecated\n        SUPER privilege).\n      ", "\n        These additional privilege considerations also apply:\n", "\n\n            The authentication_policy\n            system variable places certain constraints on how the\n            authentication-related clauses of\n            CREATE USER statements may be\n            used; for details, see the description of that variable.\n            These constraints do not apply if you have the\n            AUTHENTICATION_POLICY_ADMIN\n            privilege.\n          \n            To create an account that uses passwordless authentication,\n            you must have the\n            PASSWORDLESS_USER_ADMIN\n            privilege.\n\n", "\nCREATE USER fails with an error\n        if any account to be created is named as the\n        DEFINER attribute for any stored object.\n        (That is, the statement fails if creating an account would cause\n        the account to adopt a currently orphaned stored object.) To\n        perform the operation anyway, you must have the\n        SET_ANY_DEFINER or\n        ALLOW_NONEXISTENT_DEFINER\n        privilege; in this case, the statement succeeds with a warning\n        rather than failing with an error. To perform the user-creation\n        operation without either of these, drop the orphan objects,\n        create the account and grant its privileges, and then re-create\n        the dropped objects. For additional information, including how\n        to identify which objects name a given account as the\n        DEFINER attribute, see\n        Orphan Stored Objects.\n      ", "\nCREATE USER either succeeds for\n        all named users or rolls back and has no effect if any error\n        occurs. By default, an error occurs if you try to create a user\n        that already exists. If the IF NOT EXISTS\n        clause is given, the statement produces a warning for each named\n        user that already exists, rather than an error.\n", "\n\nImportant\n\n\n          Under some circumstances, CREATE\n          USER may be recorded in server logs or on the client\n          side in a history file such as\n          ~/.mysql_history, which means that\n          cleartext passwords may be read by anyone having read access\n          to that information. For information about the conditions\n          under which this occurs for the server logs and how to control\n          it, see Section\u00a08.1.2.3, \u201cPasswords and Logging\u201d. For similar\n          information about client-side logging, see\n          Section\u00a06.5.1.3, \u201cmysql Client Logging\u201d.\n\n", "\n        There are several aspects to the CREATE\n        USER statement, described under the following topics:\n", "\nCREATE USER OverviewCREATE USER Authentication OptionsCREATE USER Multifactor Authentication OptionsCREATE USER Role OptionsCREATE USER SSL/TLS OptionsCREATE USER Resource-Limit OptionsCREATE USER Password-Management OptionsCREATE USER Comment and Attribute OptionsCREATE USER Account-Locking OptionsCREATE USER Binary Logging\n", "\n\n\n\nCREATE USER Overview\n\n\n\n\n          For each account, CREATE USER\n          creates a new row in the mysql.user system\n          table. The account row reflects the properties specified in\n          the statement. Unspecified properties are set to their default\n          values:\n\n\n\n              Authentication: The default authentication plugin\n              (determined as described in\n              The Default Authentication Plugin),\n              and empty credentials\n            \n              Default role: NONE\n\n              SSL/TLS: NONE\n\n              Resource limits: Unlimited\n            \n              Password management: PASSWORD EXPIRE DEFAULT\n              PASSWORD HISTORY DEFAULT PASSWORD REUSE INTERVAL DEFAULT\n              PASSWORD REQUIRE CURRENT DEFAULT; failed-login\n              tracking and temporary account locking are disabled\n            \n              Account locking: ACCOUNT UNLOCK\n\n\n\n          An account when first created has no privileges and the\n          default role NONE. To assign privileges or\n          roles to this account, use one or more\n          GRANT statements.\n        \n          Each account name uses the format described in\n          Section\u00a08.2.4, \u201cSpecifying Account Names\u201d. For example:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'password';\n          The host name part of the account name, if omitted, defaults\n          to '%'. You should be aware that, while\n          MySQL 8.4 treats grants made to such a user as\n          though they had been granted to\n          'user'@'localhost',\n          this behavior is deprecated, and thus subject to removal in a\n          future version of MySQL.\n        \n          Each user value naming an account\n          may be followed by an optional\n          auth_option value that indicates\n          how the account authenticates. These values enable account\n          authentication plugins and credentials (for example, a\n          password) to be specified. Each\n          auth_option value applies\n          only to the account named immediately\n          preceding it.\n        \n          Following the user specifications,\n          the statement may include options for SSL/TLS, resource-limit,\n          password-management, and locking properties. All such options\n          are global to the statement and apply to\n          all accounts named in the statement.\n        \n          Example: Create an account that uses the default\n          authentication plugin and the given password. Mark the\n          password expired so that the user must choose a new one at the\n          first connection to the server:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password' PASSWORD EXPIRE;\n          Example: Create an account that uses the\n          caching_sha2_password authentication plugin\n          and the given password. Require that a new password be chosen\n          every 180 days, and enable failed-login tracking, such that\n          three consecutive incorrect passwords cause temporary account\n          locking for two days:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH caching_sha2_password BY 'new_password'\n  PASSWORD EXPIRE INTERVAL 180 DAY\n  FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 2;\n          Example: Create multiple accounts, specifying some per-account\n          properties and some global properties:\n        Press CTRL+C to copy CREATE USER\n  'jeffrey'@'localhost' IDENTIFIED WITH mysql_native_password\n                                   BY 'new_password1',\n  'jeanne'@'localhost' IDENTIFIED WITH caching_sha2_password\n                                  BY 'new_password2'\n  REQUIRE X509 WITH MAX_QUERIES_PER_HOUR 60\n  PASSWORD HISTORY 5\n  ACCOUNT LOCK;\n          Each auth_option value\n          (IDENTIFIED WITH ... BY in this case)\n          applies only to the account named immediately preceding it, so\n          each account uses the immediately following authentication\n          plugin and password.\n        \n          The remaining properties apply globally to all accounts named\n          in the statement, so for both accounts:\n\n\n\n              Connections must be made using a valid X.509 certificate.\n            \n              Up to 60 queries per hour are permitted.\n            \n              Password changes cannot reuse any of the five most recent\n              passwords.\n            \n              The account is locked initially, so effectively it is a\n              placeholder and cannot be used until an administrator\n              unlocks it.\n\n\n", "\n\n\n\nCREATE USER Authentication Options\n\n\n\n\n          An account name may be followed by an\n          auth_option authentication option\n          that specifies the account authentication plugin, credentials,\n          or both.\n\n\n\nNote\n\n\n            MySQL 8.4 supports multifactor authentication\n            (MFA), such that accounts can have up to three\n            authentication methods. That is, accounts can use two-factor\n            authentication (2FA) or three-factor authentication (3FA).\n            The syntax and semantics of\n            auth_option remain unchanged, but\n            auth_option may be followed by\n            specifications for additional authentication methods. This\n            section describes auth_option.\n            For details about the optional MFA-related following\n            clauses, see\n            CREATE USER Multifactor Authentication Options.\n\n\n\n\nNote\n\n\n            Clauses for random password generation apply only to\n            accounts that use an authentication plugin that stores\n            credentials internally to MySQL. For accounts that use a\n            plugin that performs authentication against a credentials\n            system that is external to MySQL, password management must\n            be handled externally against that system as well. For more\n            information about internal credentials storage, see\n            Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n\n\n\nauth_plugin names an\n              authentication plugin. The plugin name can be a quoted\n              string literal or an unquoted name. Plugin names are\n              stored in the plugin column of the\n              mysql.user system table.\n            \n              For auth_option syntax that\n              does not specify an authentication plugin, the server\n              assigns the default plugin, determined as described in\n              The Default Authentication Plugin.\n              For descriptions of each plugin, see\n              Section\u00a08.4.1, \u201cAuthentication Plugins\u201d.\n            \n              Credentials that are stored internally are stored in the\n              mysql.user system table. An\n              'auth_string'\n              value or RANDOM PASSWORD specifies\n              account credentials, either as a cleartext (unencrypted)\n              string or hashed in the format expected by the\n              authentication plugin associated with the account,\n              respectively:\n\n\n\n                  For syntax that uses BY\n                  'auth_string',\n                  the string is cleartext and is passed to the\n                  authentication plugin for possible hashing. The result\n                  returned by the plugin is stored in the\n                  mysql.user table. A plugin may use\n                  the value as specified, in which case no hashing\n                  occurs.\n                \n                  For syntax that uses BY RANDOM\n                  PASSWORD, MySQL generates a random password\n                  and as cleartext and passes it to the authentication\n                  plugin for possible hashing. The result returned by\n                  the plugin is stored in the\n                  mysql.user table. A plugin may use\n                  the value as specified, in which case no hashing\n                  occurs.\n                \n                  Randomly generated passwords have the characteristics\n                  described in\n                  Random Password Generation.\n                \n                  For syntax that uses AS\n                  'auth_string',\n                  the string is assumed to be already in the format the\n                  authentication plugin requires, and is stored as is in\n                  the mysql.user table. If a plugin\n                  requires a hashed value, the value must be already\n                  hashed in a format appropriate for the plugin;\n                  otherwise, the value cannot be used by the plugin and\n                  correct authentication of client connections does not\n                  occur.\n                \n                  A hashed string can be either a string literal or a\n                  hexadecimal value. The latter corresponds to the type\n                  of value displayed by SHOW CREATE\n                  USER for password hashes containing\n                  unprintable characters when the\n                  print_identified_with_as_hex\n                  system variable is enabled.\n\n\n\nImportant\n\n\n                    Although we show\n                    'auth_string'\n                    with quotation marks, a hexadecimal value used for\n                    this purpose must not be\n                    quoted.\n\n\n\n                  If an authentication plugin performs no hashing of the\n                  authentication string, the BY\n                  'auth_string' and\n                  AS\n                  'auth_string'\n                  clauses have the same effect: The authentication\n                  string is stored as is in the\n                  mysql.user system table.\n\n\n\n\n\nCREATE USER permits these\n          auth_option syntaxes:\n\n\n\nIDENTIFIED BY\n              'auth_string'\n\n              Sets the account authentication plugin to the default\n              plugin, passes the cleartext\n              'auth_string'\n              value to the plugin for possible hashing, and stores the\n              result in the account row in the\n              mysql.user system table.\n            \nIDENTIFIED BY RANDOM PASSWORD\n\n              Sets the account authentication plugin to the default\n              plugin, generates a random password, passes the cleartext\n              password value to the plugin for possible hashing, and\n              stores the result in the account row in the\n              mysql.user system table. The statement\n              also returns the cleartext password in a result set to\n              make it available to the user or application executing the\n              statement. For details about the result set and\n              characteristics of randomly generated passwords, see\n              Random Password Generation.\n            \nIDENTIFIED WITH\n              auth_plugin\n\n              Sets the account authentication plugin to\n              auth_plugin, clears the\n              credentials to the empty string, and stores the result in\n              the account row in the mysql.user\n              system table.\n            \nIDENTIFIED WITH\n              auth_plugin BY\n              'auth_string'\n\n              Sets the account authentication plugin to\n              auth_plugin, passes the\n              cleartext\n              'auth_string'\n              value to the plugin for possible hashing, and stores the\n              result in the account row in the\n              mysql.user system table.\n            \nIDENTIFIED WITH\n              auth_plugin BY RANDOM\n              PASSWORD\n\n              Sets the account authentication plugin to\n              auth_plugin, generates a random\n              password, passes the cleartext password value to the\n              plugin for possible hashing, and stores the result in the\n              account row in the mysql.user system\n              table. The statement also returns the cleartext password\n              in a result set to make it available to the user or\n              application executing the statement. For details about the\n              result set and characteristics of randomly generated\n              passwords, see\n              Random Password Generation.\n            \nIDENTIFIED WITH\n              auth_plugin AS\n              'auth_string'\n\n              Sets the account authentication plugin to\n              auth_plugin and stores the\n              'auth_string'\n              value as is in the mysql.user account\n              row. If the plugin requires a hashed string, the string is\n              assumed to be already hashed in the format the plugin\n              requires.\n\n\n\n          Example: Specify the password as cleartext; the default plugin\n          is used:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'password';\n          Example: Specify the authentication plugin, along with a\n          cleartext password value:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password BY 'password';\n          In each case, the password value stored in the account row is\n          the cleartext value\n          'password' after\n          it has been hashed by the authentication plugin associated\n          with the account.\n        \n          For additional information about setting passwords and\n          authentication plugins, see\n          Section\u00a08.2.14, \u201cAssigning Account Passwords\u201d, and\n          Section\u00a08.2.17, \u201cPluggable Authentication\u201d.\n\n", "\n\n\n\nCREATE USER Multifactor Authentication Options\n\n\n\n\n          The auth_option part of\n          CREATE USER defines an\n          authentication method for one-factor/single-factor\n          authentication (1FA/SFA). CREATE\n          USER also supports multifactor authentication (MFA),\n          such that accounts can have up to three authentication\n          methods. That is, accounts can use two-factor authentication\n          (2FA) or three-factor authentication (3FA).\n        \n          The authentication_policy\n          system variable defines constraints for\n          CREATE USER statements with\n          multifactor authentication (MFA) clauses. For example, the\n          authentication_policy setting\n          controls the number of authentication factors that accounts\n          may have, and for each factor, which authentication methods\n          are permitted. See\n          Configuring the Multifactor Authentication Policy.\n        \n          For information about factor-specific rules that determine the\n          default authentication plugin for authentication clauses that\n          name no plugin, see\n          The Default Authentication Plugin.\n        \n          Following auth_option, there may\n          appear different optional MFA clauses:\n\n\n\n2fa_auth_option: Specifies a\n              factor 2 authentication method. The following example\n              defines caching_sha2_password as the\n              factor 1 authentication method, and\n              authentication_ldap_sasl as the factor\n              2 authentication method.\n            Press CTRL+C to copy CREATE USER 'u1'@'localhost'\n  IDENTIFIED WITH caching_sha2_password\n    BY 'sha2_password'\n  AND IDENTIFIED WITH authentication_ldap_sasl\n    AS 'uid=u1_ldap,ou=People,dc=example,dc=com';\n3fa_auth_option: Following\n              2fa_auth_option, there may\n              appear a 3fa_auth_option clause\n              to specify a factor 3 authentication method. The following\n              example defines caching_sha2_password\n              as the factor 1 authentication method,\n              authentication_ldap_sasl as the factor\n              2 authentication method, and\n              authentication_webauthn as the factor 3\n              authentication method\n            Press CTRL+C to copy CREATE USER 'u1'@'localhost'\n  IDENTIFIED WITH caching_sha2_password\n    BY 'sha2_password'\n  AND IDENTIFIED WITH authentication_ldap_sasl\n    AS 'uid=u1_ldap,ou=People,dc=example,dc=com'\n  AND IDENTIFIED WITH authentication_webauthn;\ninitial_auth_option: Specifies\n              an initial authentication method for configuring\n              FIDO/FIDO2 passwordless authentication. As shown in the\n              following, temporary authentication using either a\n              generated random password or a user-specified\n              auth-string is required to\n              enable WebAuthn passwordless authentication.\n            Press CTRL+C to copy CREATE USER user\n  IDENTIFIED WITH authentication_webauthn\n  INITIAL AUTHENTICATION IDENTIFIED BY {RANDOM PASSWORD | 'auth_string'};\n              For information about configuring passwordless\n              authentication using WebAuthn pluggable authentication,\n              See\n              WebAuthn Passwordless Authentication.\n\n\n", "\n\n\n\nCREATE USER Role Options\n\n\n\n\n          The DEFAULT ROLE clause defines which roles\n          become active when the user connects to the server and\n          authenticates, or when the user executes the\n          SET ROLE\n          DEFAULT statement during a session.\n        \n          Each role name uses the format described in\n          Section\u00a08.2.5, \u201cSpecifying Role Names\u201d. For example:\n        Press CTRL+C to copy CREATE USER 'joe'@'10.0.0.1' DEFAULT ROLE administrator, developer;\n          The host name part of the role name, if omitted, defaults to\n          '%'.\n        \n          The DEFAULT ROLE clause permits a list of\n          one or more comma-separated role names. These roles must exist\n          at the time CREATE USER is\n          executed; otherwise the statement raises an error\n          (ER_USER_DOES_NOT_EXIST), and\n          the user is not created.\n\n", "\n\n\n\nCREATE USER SSL/TLS Options\n\n\n\n\n          MySQL can check X.509 certificate attributes in addition to\n          the usual authentication that is based on the user name and\n          credentials. For background information on the use of SSL/TLS\n          with MySQL, see Section\u00a08.3, \u201cUsing Encrypted Connections\u201d.\n        \n          To specify SSL/TLS-related options for a MySQL account, use a\n          REQUIRE clause that specifies one or more\n          tls_option values.\n        \n          Order of REQUIRE options does not matter,\n          but no option can be specified twice. The\n          AND keyword is optional between\n          REQUIRE options.\n        \nCREATE USER permits these\n          tls_option values:\n\n\n\nNONE\n\n              Indicates that all accounts named by the statement have no\n              SSL or X.509 requirements. Unencrypted connections are\n              permitted if the user name and password are valid.\n              Encrypted connections can be used, at the client's option,\n              if the client has the proper certificate and key files.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' REQUIRE NONE;\n              Clients attempt to establish a secure connection by\n              default. For clients that have REQUIRE\n              NONE, the connection attempt falls back to an\n              unencrypted connection if a secure connection cannot be\n              established. To require an encrypted connection, a client\n              need specify only the\n              --ssl-mode=REQUIRED\n              option; the connection attempt fails if a secure\n              connection cannot be established.\n            \nNONE is the default if no SSL-related\n              REQUIRE options are specified.\n            \nSSL\n\n              Tells the server to permit only encrypted connections for\n              all accounts named by the statement.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' REQUIRE SSL;\n              Clients attempt to establish a secure connection by\n              default. For accounts that have REQUIRE\n              SSL, the connection attempt fails if a secure\n              connection cannot be established.\n            \nX509\n\n              For all accounts named by the statement, requires that\n              clients present a valid certificate, but the exact\n              certificate, issuer, and subject do not matter. The only\n              requirement is that it should be possible to verify its\n              signature with one of the CA certificates. Use of X.509\n              certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' REQUIRE X509;\n              For accounts with REQUIRE X509, clients\n              must specify the --ssl-key\n              and --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.) This is true for ISSUER\n              and SUBJECT as well because those\n              REQUIRE options imply the requirements\n              of X509.\n            \nISSUER\n              'issuer'\n\n              For all accounts named by the statement, requires that\n              clients present a valid X.509 certificate issued by CA\n              'issuer'. If\n              a client presents a certificate that is valid but has a\n              different issuer, the server rejects the connection. Use\n              of X.509 certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com';\n              Because ISSUER implies the requirements\n              of X509, clients must specify the\n              --ssl-key and\n              --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.)\n            \nSUBJECT\n              'subject'\n\n              For all accounts named by the statement, requires that\n              clients present a valid X.509 certificate containing the\n              subject subject. If a client\n              presents a certificate that is valid but has a different\n              subject, the server rejects the connection. Use of X.509\n              certificates always implies encryption, so the\n              SSL option is unnecessary in this case.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com';\n              MySQL does a simple string comparison of the\n              'subject'\n              value to the value in the certificate, so lettercase and\n              component ordering must be given exactly as present in the\n              certificate.\n            \n              Because SUBJECT implies the\n              requirements of X509, clients must\n              specify the --ssl-key and\n              --ssl-cert options to\n              connect. (It is recommended but not required that\n              --ssl-ca also be specified\n              so that the public certificate provided by the server can\n              be verified.)\n            \nCIPHER\n              'cipher'\n\n              For all accounts named by the statement, requires a\n              specific cipher method for encrypting connections. This\n              option is needed to ensure that ciphers and key lengths of\n              sufficient strength are used. Encryption can be weak if\n              old algorithms using short encryption keys are used.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  REQUIRE CIPHER 'EDH-RSA-DES-CBC3-SHA';\n\n\n          The SUBJECT, ISSUER, and\n          CIPHER options can be combined in the\n          REQUIRE clause:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com'\n  AND ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com'\n  AND CIPHER 'EDH-RSA-DES-CBC3-SHA';\n", "\n\n\n\nCREATE USER Resource-Limit Options\n\n\n\n\n          It is possible to place limits on use of server resources by\n          an account, as discussed in Section\u00a08.2.21, \u201cSetting Account Resource Limits\u201d.\n          To do so, use a WITH clause that specifies\n          one or more resource_option values.\n        \n          Order of WITH options does not matter,\n          except that if a given resource limit is specified multiple\n          times, the last instance takes precedence.\n        \nCREATE USER permits these\n          resource_option values:\n\n\n\nMAX_QUERIES_PER_HOUR\n              count,\n              MAX_UPDATES_PER_HOUR\n              count,\n              MAX_CONNECTIONS_PER_HOUR\n              count\n\n              For all accounts named by the statement, these options\n              restrict how many queries, updates, and connections to the\n              server are permitted to each account during any given\n              one-hour period. If count is\n              0 (the default), this means that there\n              is no limitation for the account.\n            \nMAX_USER_CONNECTIONS\n              count\n\n              For all accounts named by the statement, restricts the\n              maximum number of simultaneous connections to the server\n              by each account. A nonzero\n              count specifies the limit for\n              the account explicitly. If\n              count is 0\n              (the default), the server determines the number of\n              simultaneous connections for the account from the global\n              value of the\n              max_user_connections\n              system variable. If\n              max_user_connections is\n              also zero, there is no limit for the account.\n\n\n\n          Example:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100;\n", "\n\n\n\nCREATE USER Password-Management Options\n\n\n\n\nCREATE USER supports several\n          password_option values for password\n          management:\n\n\n\n              Password expiration options: You can expire an account\n              password manually and establish its password expiration\n              policy. Policy options do not expire the password.\n              Instead, they determine how the server applies automatic\n              expiration to the account based on password age, which is\n              assessed from the date and time of the most recent account\n              password change.\n            \n              Password reuse options: You can restrict password reuse\n              based on number of password changes, time elapsed, or\n              both.\n            \n              Password verification-required options: You can indicate\n              whether attempts to change an account password must\n              specify the current password, as verification that the\n              user attempting to make the change actually knows the\n              current password.\n            \n              Incorrect-password failed-login tracking options: You can\n              cause the server to track failed login attempts and\n              temporarily lock accounts for which too many consecutive\n              incorrect passwords are given. The required number of\n              failures and the lock time are configurable.\n\n\n\n          This section describes the syntax for password-management\n          options. For information about establishing policy for\n          password management, see\n          Section\u00a08.2.15, \u201cPassword Management\u201d.\n        \n          If multiple password-management options of a given type are\n          specified, the last one takes precedence. For example,\n          PASSWORD EXPIRE DEFAULT PASSWORD EXPIRE\n          NEVER is the same as PASSWORD EXPIRE\n          NEVER.\n\n\n\nNote\n\n\n            Except for the options that pertain to failed-login\n            tracking, password-management options apply only to accounts\n            that use an authentication plugin that stores credentials\n            internally to MySQL. For accounts that use a plugin that\n            performs authentication against a credentials system that is\n            external to MySQL, password management must be handled\n            externally against that system as well. For more information\n            about internal credentials storage, see\n            Section\u00a08.2.15, \u201cPassword Management\u201d.\n\n\n\n          A client has an expired password if the account password was\n          expired manually or the password age is considered greater\n          than its permitted lifetime per the automatic expiration\n          policy. In this case, the server either disconnects the client\n          or restricts the operations permitted to it (see\n          Section\u00a08.2.16, \u201cServer Handling of Expired Passwords\u201d). Operations\n          performed by a restricted client result in an error until the\n          user establishes a new account password.\n        \nCREATE USER permits these\n          password_option values for\n          controlling password expiration:\n\n\n\nPASSWORD EXPIRE\n\n              Immediately marks the password expired for all accounts\n              named by the statement.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE;\nPASSWORD EXPIRE DEFAULT\n\n              Sets all accounts named by the statement so that the\n              global expiration policy applies, as specified by the\n              default_password_lifetime\n              system variable.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;\nPASSWORD EXPIRE NEVER\n\n              This expiration option overrides the global policy for all\n              accounts named by the statement. For each, it disables\n              password expiration so that the password never expires.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;\nPASSWORD EXPIRE INTERVAL\n              N DAY\n\n              This expiration option overrides the global policy for all\n              accounts named by the statement. For each, it sets the\n              password lifetime to N days.\n              The following statement requires the password to be\n              changed every 180 days:\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 180 DAY;\n\n\nCREATE USER permits these\n          password_option values for\n          controlling reuse of previous passwords based on required\n          minimum number of password changes:\n\n\n\nPASSWORD HISTORY DEFAULT\n\n              Sets all accounts named by the statement so that the\n              global policy about password history length applies, to\n              prohibit reuse of passwords before the number of changes\n              specified by the\n              password_history system\n              variable.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD HISTORY DEFAULT;\nPASSWORD HISTORY\n              N\n\n              This history-length option overrides the global policy for\n              all accounts named by the statement. For each, it sets the\n              password history length to N\n              passwords, to prohibit reusing any of the\n              N most recently chosen\n              passwords. The following statement prohibits reuse of any\n              of the previous 6 passwords:\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD HISTORY 6;\n\n\nCREATE USER permits these\n          password_option values for\n          controlling reuse of previous passwords based on time elapsed:\n\n\n\nPASSWORD REUSE INTERVAL DEFAULT\n\n              Sets all statements named by the account so that the\n              global policy about time elapsed applies, to prohibit\n              reuse of passwords newer than the number of days specified\n              by the\n              password_reuse_interval\n              system variable.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL DEFAULT;\nPASSWORD REUSE INTERVAL\n              N DAY\n\n              This time-elapsed option overrides the global policy for\n              all accounts named by the statement. For each, it sets the\n              password reuse interval to N\n              days, to prohibit reuse of passwords newer than that many\n              days. The following statement prohibits password reuse for\n              360 days:\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL 360 DAY;\n\n\nCREATE USER permits these\n          password_option values for\n          controlling whether attempts to change an account password\n          must specify the current password, as verification that the\n          user attempting to make the change actually knows the current\n          password:\n\n\n\nPASSWORD REQUIRE CURRENT\n\n              This verification option overrides the global policy for\n              all accounts named by the statement. For each, it requires\n              that password changes specify the current password.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT;\nPASSWORD REQUIRE CURRENT OPTIONAL\n\n              This verification option overrides the global policy for\n              all accounts named by the statement. For each, it does not\n              require that password changes specify the current\n              password. (The current password may but need not be\n              given.)\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT OPTIONAL;\nPASSWORD REQUIRE CURRENT DEFAULT\n\n              Sets all statements named by the account so that the\n              global policy about password verification applies, as\n              specified by the\n              password_require_current\n              system variable.\n            Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT DEFAULT;\n\n\nCREATE USER permits these\n          password_option values for\n          controlling failed-login tracking:\n\n\n\nFAILED_LOGIN_ATTEMPTS\n              N\n\n              Whether to track account login attempts that specify an\n              incorrect password. N must be a\n              number from 0 to 32767. A value of 0 disables failed-login\n              tracking. Values greater than 0 indicate how many\n              consecutive password failures cause temporary account\n              locking (if PASSWORD_LOCK_TIME is also\n              nonzero).\n            \nPASSWORD_LOCK_TIME {N\n              | UNBOUNDED}\n\n              How long to lock the account after too many consecutive\n              login attempts provide an incorrect password.\n              N must be a number from 0 to\n              32767, or UNBOUNDED. A value of 0\n              disables temporary account locking. Values greater than 0\n              indicate how long to lock the account in days. A value of\n              UNBOUNDED causes the account locking\n              duration to be unbounded; once locked, the account remains\n              in a locked state until unlocked. For information about\n              the conditions under which unlocking occurs, see\n              Failed-Login Tracking and Temporary Account Locking.\n\n\n\n          For failed-login tracking and temporary locking to occur, an\n          account's FAILED_LOGIN_ATTEMPTS and\n          PASSWORD_LOCK_TIME options both must be\n          nonzero. The following statement creates an account that\n          remains locked for two days after four consecutive password\n          failures:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost'\n  FAILED_LOGIN_ATTEMPTS 4 PASSWORD_LOCK_TIME 2;\n", "\n\n\n\nCREATE USER Comment and Attribute Options\n\n\n\n\n          You can also include an optional comment or attribute when\n          creating a user, as described here:\n\n\n\nUser comment\n\n              To set a user comment, add COMMENT\n              'user_comment' to the\n              CREATE USER statement, where\n              user_comment is the text of the\n              user comment.\n            \n              Example (omitting any other options):\n            Press CTRL+C to copy CREATE USER 'jon'@'localhost' COMMENT 'Some information about Jon';\nUser attribute\n\n              A user attribute is a JSON object made up of one or more\n              key-value pairs, and is set by including\n              ATTRIBUTE\n              'json_object' as part\n              of CREATE USER.\n              json_object must be a valid\n              JSON object.\n            \n              Example (omitting any other options):\n            Press CTRL+C to copy CREATE USER 'jim'@'localhost'\n    ATTRIBUTE '{\"fname\": \"James\", \"lname\": \"Scott\", \"phone\": \"123-456-7890\"}';\n\n\n          User comments and user attributes are stored together in the\n          ATTRIBUTE column of the Information Schema\n          USER_ATTRIBUTES table. This query\n          displays the row in this table inserted by the statement just\n          shown for creating the user jim@localhost:\n        Press CTRL+C to copy mysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->    WHERE USER = 'jim' AND HOST = 'localhost'\\G\n*************************** 1. row ***************************\n     USER: jim\n     HOST: localhost\nATTRIBUTE: {\"fname\": \"James\", \"lname\": \"Scott\", \"phone\": \"123-456-7890\"}\n1 row in set (0.00 sec)\n          The COMMENT option in actuality provides a\n          shortcut for setting a user attribute whose only element has\n          comment as its key and whose value is the\n          argument supplied for the option. You can see this by\n          executing the statement CREATE USER 'jon'@'localhost'\n          COMMENT 'Some information about Jon', and observing\n          the row which it inserts into the\n          USER_ATTRIBUTES table:\n        Press CTRL+C to copy mysql> CREATE USER 'jon'@'localhost' COMMENT 'Some information about Jon';\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->    WHERE USER = 'jon' AND HOST = 'localhost';\n+------+-----------+-------------------------------------------+\n| USER | HOST      | ATTRIBUTE                                 |\n+------+-----------+-------------------------------------------+\n| jon  | localhost | {\"comment\": \"Some information about Jon\"} |\n+------+-----------+-------------------------------------------+\n1 row in set (0.00 sec)\n          You cannot use COMMENT and\n          ATTRIBUTE together in the same\n          CREATE USER statement; attempting to do so\n          causes a syntax error. To set a user comment concurrently with\n          setting a user attribute, use ATTRIBUTE and\n          include in its argument a value with a\n          comment key, like this:\n        Press CTRL+C to copy mysql> CREATE USER 'bill'@'localhost'\n    ->        ATTRIBUTE '{\"fname\":\"William\", \"lname\":\"Schmidt\",\n    ->        \"comment\":\"Website developer\"}';\nQuery OK, 0 rows affected (0.16 sec)\n          Since the content of the ATTRIBUTE row is a\n          JSON object, you can employ any appropriate MySQL JSON\n          functions or operators to manipulate it, as shown here:\n        Press CTRL+C to copy mysql> SELECT\n    ->   USER AS User,\n    ->   HOST AS Host,\n    ->   CONCAT(ATTRIBUTE->>\"$.fname\",\" \",ATTRIBUTE->>\"$.lname\") AS 'Full Name',\n    ->   ATTRIBUTE->>\"$.comment\" AS Comment\n    -> FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    -> WHERE USER='bill' AND HOST='localhost';\n+------+-----------+-----------------+-------------------+\n| User | Host      | Full Name       | Comment           |\n+------+-----------+-----------------+-------------------+\n| bill | localhost | William Schmidt | Website developer |\n+------+-----------+-----------------+-------------------+\n1 row in set (0.00 sec)\n          To set or to make changes in the user comment or user\n          attribute for an existing user, you can use a\n          COMMENT or ATTRIBUTE\n          option with an ALTER USER\n          statement.\n        \n          Because the user comment and user attribute are stored\n          together internally in a single\n          JSON column, this sets an upper\n          limit on their maximum combined size; see\n          JSON Storage Requirements, for more\n          information.\n        \n          See also the description of the Information Schema\n          USER_ATTRIBUTES table for more\n          information and examples.\n\n", "\n\n\n\nCREATE USER Account-Locking Options\n\n\n\n\n          MySQL supports account locking and unlocking using the\n          ACCOUNT LOCK and ACCOUNT\n          UNLOCK options, which specify the locking state for\n          an account. For additional discussion, see\n          Section\u00a08.2.20, \u201cAccount Locking\u201d.\n        \n          If multiple account-locking options are specified, the last\n          one takes precedence.\n\n", "\n\n\n\nCREATE USER Binary Logging\n\n\n\n\nCREATE USER is written to the\n          binary log if it succeeds, but not if it fails; in that case,\n          rollback occurs and no changes are made. A statement written\n          to the binary log includes all named users. If the IF\n          NOT EXISTS clause is given, this includes even users\n          that already exist and were not created.\n        \n          The statement written to the binary log specifies an\n          authentication plugin for each user, determined as follows:\n\n\n\n              The plugin named in the original statement, if one was\n              specified.\n            \n              Otherwise, the default authentication plugin. In\n              particular, if a user u1 already exists\n              and uses a nondefault authentication plugin, the statement\n              written to the binary log for CREATE USER IF NOT\n              EXISTS u1 names the default authentication\n              plugin. (If the statement written to the binary log must\n              specify a nondefault authentication plugin for a user,\n              include it in the original statement.)\n\n\n\n          If the server adds the default authentication plugin for any\n          nonexisting users in the statement written to the binary log,\n          it writes a warning to the error log naming those users.\n        \n          If the original statement specifies the\n          FAILED_LOGIN_ATTEMPTS or\n          PASSWORD_LOCK_TIME option, the statement\n          written to the binary log includes the option.\n        \nCREATE USER statements with\n          clauses that support multifactor authentication (MFA) are\n          written to the binary log.\n\n\n\nCREATE USER ... IDENTIFIED WITH .. INITIAL\n              AUTHENTICATION IDENTIFIED WITH ... statements\n              are written to the binary log as CREATE USER ..\n              IDENTIFIED WITH .. INITIAL AUTHENTICATION IDENTIFIED WITH\n              .. AS\n              'password-hash',\n              where the password-hash is the\n              user-specified auth-string or\n              the random password generated by server when the\n              RANDOM PASSWORD clause is specified.\n\n\n"], "Examples": ["CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'password';", "CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'new_password' PASSWORD EXPIRE;", "CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH caching_sha2_password BY 'new_password'\n  PASSWORD EXPIRE INTERVAL 180 DAY\n  FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 2;", "CREATE USER\n  'jeffrey'@'localhost' IDENTIFIED WITH mysql_native_password\n                                   BY 'new_password1',\n  'jeanne'@'localhost' IDENTIFIED WITH caching_sha2_password\n                                  BY 'new_password2'\n  REQUIRE X509 WITH MAX_QUERIES_PER_HOUR 60\n  PASSWORD HISTORY 5\n  ACCOUNT LOCK;", "CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED BY 'password';", "CREATE USER 'jeffrey'@'localhost'\n  IDENTIFIED WITH mysql_native_password BY 'password';", "CREATE USER 'u1'@'localhost'\n  IDENTIFIED WITH caching_sha2_password\n    BY 'sha2_password'\n  AND IDENTIFIED WITH authentication_ldap_sasl\n    AS 'uid=u1_ldap,ou=People,dc=example,dc=com';", "CREATE USER 'u1'@'localhost'\n  IDENTIFIED WITH caching_sha2_password\n    BY 'sha2_password'\n  AND IDENTIFIED WITH authentication_ldap_sasl\n    AS 'uid=u1_ldap,ou=People,dc=example,dc=com'\n  AND IDENTIFIED WITH authentication_webauthn;", "CREATE USER user\n  IDENTIFIED WITH authentication_webauthn\n  INITIAL AUTHENTICATION IDENTIFIED BY {RANDOM PASSWORD | 'auth_string'};", "CREATE USER 'joe'@'10.0.0.1' DEFAULT ROLE administrator, developer;", "CREATE USER 'jeffrey'@'localhost' REQUIRE NONE;", "CREATE USER 'jeffrey'@'localhost' REQUIRE SSL;", "CREATE USER 'jeffrey'@'localhost' REQUIRE X509;", "CREATE USER 'jeffrey'@'localhost'\n  REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com';", "CREATE USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com';", "CREATE USER 'jeffrey'@'localhost'\n  REQUIRE CIPHER 'EDH-RSA-DES-CBC3-SHA';", "CREATE USER 'jeffrey'@'localhost'\n  REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL demo client certificate/\n    CN=client/emailAddress=client@example.com'\n  AND ISSUER '/C=SE/ST=Stockholm/L=Stockholm/\n    O=MySQL/CN=CA/emailAddress=ca@example.com'\n  AND CIPHER 'EDH-RSA-DES-CBC3-SHA';", "CREATE USER 'jeffrey'@'localhost'\n  WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100;", "CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE;", "CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;", "CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;", "CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 180 DAY;", "CREATE USER 'jeffrey'@'localhost' PASSWORD HISTORY DEFAULT;", "CREATE USER 'jeffrey'@'localhost' PASSWORD HISTORY 6;", "CREATE USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL DEFAULT;", "CREATE USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL 360 DAY;", "CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT;", "CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT OPTIONAL;", "CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT DEFAULT;", "CREATE USER 'jeffrey'@'localhost'\n  FAILED_LOGIN_ATTEMPTS 4 PASSWORD_LOCK_TIME 2;", "CREATE USER 'jon'@'localhost' COMMENT 'Some information about Jon';", "CREATE USER 'jim'@'localhost'\n    ATTRIBUTE '{\"fname\": \"James\", \"lname\": \"Scott\", \"phone\": \"123-456-7890\"}';", "mysql> CREATE USER 'jon'@'localhost' COMMENT 'Some information about Jon';\nQuery OK, 0 rows affected (0.06 sec)\n\nmysql> SELECT * FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    ->    WHERE USER = 'jon' AND HOST = 'localhost';\n+------+-----------+-------------------------------------------+\n| USER | HOST      | ATTRIBUTE                                 |\n+------+-----------+-------------------------------------------+\n| jon  | localhost | {\"comment\": \"Some information about Jon\"} |\n+------+-----------+-------------------------------------------+\n1 row in set (0.00 sec)", "mysql> CREATE USER 'bill'@'localhost'\n    ->        ATTRIBUTE '{\"fname\":\"William\", \"lname\":\"Schmidt\",\n    ->        \"comment\":\"Website developer\"}';\nQuery OK, 0 rows affected (0.16 sec)", "mysql> SELECT\n    ->   USER AS User,\n    ->   HOST AS Host,\n    ->   CONCAT(ATTRIBUTE->>\"$.fname\",\" \",ATTRIBUTE->>\"$.lname\") AS 'Full Name',\n    ->   ATTRIBUTE->>\"$.comment\" AS Comment\n    -> FROM INFORMATION_SCHEMA.USER_ATTRIBUTES\n    -> WHERE USER='bill' AND HOST='localhost';\n+------+-----------+-----------------+-------------------+\n| User | Host      | Full Name       | Comment           |\n+------+-----------+-----------------+-------------------+\n| bill | localhost | William Schmidt | Website developer |\n+------+-----------+-----------------+-------------------+\n1 row in set (0.00 sec)"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-role.html"], "Title": ["15.7.1.4 DROP ROLE Statement"], "Feature": ["DROP ROLE [IF EXISTS] role [, role ] ..."], "Description": ["\nDROP ROLE removes one or more\n        roles (named collections of privileges). To use this statement,\n        you must have the global DROP\n        ROLE or CREATE USER\n        privilege. When the read_only\n        system variable is enabled, DROP\n        ROLE additionally requires the\n        CONNECTION_ADMIN privilege (or\n        the deprecated SUPER privilege).\n      ", "\n        Users who have the CREATE USER\n        privilege can use this statement to drop accounts that are\n        locked or unlocked. Users who have the DROP\n        ROLE privilege can use this statement only to drop\n        accounts that are locked (unlocked accounts are presumably user\n        accounts used to log in to the server and not just as roles).\n      ", "\n        Roles named in the\n        mandatory_roles system variable\n        value cannot be dropped.\n      ", "\nDROP ROLE either succeeds for all\n        named roles or rolls back and has no effect if any error occurs.\n        By default, an error occurs if you try to drop a role that does\n        not exist. If the IF EXISTS clause is given,\n        the statement produces a warning for each named role that does\n        not exist, rather than an error.\n      ", "\n        The statement is written to the binary log if it succeeds, but\n        not if it fails; in that case, rollback occurs and no changes\n        are made. A statement written to the binary log includes all\n        named roles. If the IF EXISTS clause is\n        given, this includes even roles that do not exist and were not\n        dropped.\n      ", "\n        Each role name uses the format described in\n        Section\u00a08.2.5, \u201cSpecifying Role Names\u201d. For example:\n      ", "Press CTRL+C to copy DROP ROLE 'admin', 'developer';\nDROP ROLE 'webapp'@'localhost';", "\n        The host name part of the role name, if omitted, defaults to\n        '%'.\n      ", "\n        A dropped role is automatically revoked from any user account\n        (or role) to which the role was granted. Within any current\n        session for such an account, its adjusted privileges apply\n        beginning with the next statement executed.\n      ", "\n        For role usage examples, see Section\u00a08.2.10, \u201cUsing Roles\u201d.\n"], "Examples": ["DROP ROLE 'admin', 'developer';\nDROP ROLE 'webapp'@'localhost';"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/drop-user.html"], "Title": ["15.7.1.5 DROP USER Statement"], "Feature": ["DROP USER [IF EXISTS] user [, user] ..."], "Description": ["\n        The DROP USER statement removes\n        one or more MySQL accounts and their privileges. It removes\n        privilege rows for the account from all grant tables.\n      ", "\n        Roles named in the\n        mandatory_roles system variable\n        value cannot be dropped.\n      ", "\n        To use DROP USER, you must have\n        the global CREATE USER privilege,\n        or the DELETE privilege for the\n        mysql system schema. When the\n        read_only system variable is\n        enabled, DROP USER additionally\n        requires the CONNECTION_ADMIN\n        privilege (or the deprecated\n        SUPER privilege).\n      ", "\nDROP USER fails with an error if\n        any account to be dropped is named as the\n        DEFINER attribute for any stored object.\n        (That is, the statement fails if dropping an account would cause\n        a stored object to become orphaned.) To perform the operation\n        anyway, you must have the\n        SET_ANY_DEFINER or\n        ALLOW_NONEXISTENT_DEFINER\n        privilege; in this case, the statement succeeds with a warning\n        rather than failing with an error. For additional information,\n        including how to identify which objects name a given account as\n        the DEFINER attribute, see\n        Orphan Stored Objects.\n      ", "\nDROP USER either succeeds for all\n        named users or rolls back and has no effect if any error occurs.\n        By default, an error occurs if you try to drop a user that does\n        not exist. If the IF EXISTS clause is given,\n        the statement produces a warning for each named user that does\n        not exist, rather than an error.\n      ", "\n        The statement is written to the binary log if it succeeds, but\n        not if it fails; in that case, rollback occurs and no changes\n        are made. A statement written to the binary log includes all\n        named users. If the IF EXISTS clause is\n        given, this includes even users that do not exist and were not\n        dropped.\n      ", "\n        Each account name uses the format described in\n        Section\u00a08.2.4, \u201cSpecifying Account Names\u201d. For example:\n      ", "Press CTRL+C to copy DROP USER 'jeffrey'@'localhost';", "\n        The host name part of the account name, if omitted, defaults to\n        '%'.\n", "\n\nImportant\n\n\nDROP USER does not\n          automatically close any open user sessions. Rather, in the\n          event that a user with an open session is dropped, the\n          statement does not take effect until that user's session is\n          closed. Once the session is closed, the user is dropped, and\n          that user's next attempt to log in fails. This\n          is by design.\n\n", "\nDROP USER does not automatically\n        drop or invalidate databases or objects within them that the old\n        user created. This includes stored programs or views for which\n        the DEFINER attribute names the dropped user.\n        Attempts to access such objects may produce an error if they\n        execute in definer security context. (For information about\n        security context, see\n        Section\u00a027.6, \u201cStored Object Access Control\u201d.)\n"], "Examples": ["DROP USER 'jeffrey'@'localhost';"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/grant.html"], "Title": ["15.7.1.6 GRANT Statement"], "Feature": ["GRANT\n    priv_type [(column_list)]\n      [, priv_type [(column_list)]] ...\n    ON [object_type] priv_level\n    TO user_or_role [, user_or_role] ...\n    [WITH GRANT OPTION]\n    [AS user\n        [WITH ROLE\n            DEFAULT\n          | NONE\n          | ALL\n          | ALL EXCEPT role [, role ] ...\n          | role [, role ] ...\n        ]\n    ]\n}\n\nGRANT PROXY ON user_or_role\n    TO user_or_role [, user_or_role] ...\n    [WITH GRANT OPTION]\n\nGRANT role [, role] ...\n    TO user_or_role [, user_or_role] ...\n    [WITH ADMIN OPTION]\n\nobject_type: {\n    TABLE\n  | FUNCTION\n  | PROCEDURE\n}\n\npriv_level: {\n    *\n  | *.*\n  | db_name.*\n  | db_name.tbl_name\n  | tbl_name\n  | db_name.routine_name\n}\n\nuser_or_role: {\n    user (see Section 8.2.4, \u201cSpecifying Account Names\u201d)\n  | role (see Section 8.2.5, \u201cSpecifying Role Names\u201d)\n}"], "Description": ["\n        The GRANT statement assigns\n        privileges and roles to MySQL user accounts and roles. There are\n        several aspects to the GRANT\n        statement, described under the following topics:\n", "\nGRANT General OverviewObject Quoting GuidelinesAccount NamesPrivileges Supported by MySQLGlobal PrivilegesDatabase PrivilegesTable PrivilegesColumn PrivilegesStored Routine PrivilegesProxy User PrivilegesGranting RolesThe AS Clause and Privilege RestrictionsOther Account CharacteristicsMySQL and Standard SQL Versions of GRANT\n", "\n\n\n\nGRANT General Overview\n\n\n\n\n          The GRANT statement enables\n          system administrators to grant privileges and roles, which can\n          be granted to user accounts and roles. These syntax\n          restrictions apply:\n\n\n\nGRANT cannot mix granting\n              both privileges and roles in the same statement. A given\n              GRANT statement must grant\n              either privileges or roles.\n            \n              The ON clause distinguishes whether the\n              statement grants privileges or roles:\n\n\n\n                  With ON, the statement grants\n                  privileges.\n                \n                  Without ON, the statement grants\n                  roles.\n                \n                  It is permitted to assign both privileges and roles to\n                  an account, but you must use separate\n                  GRANT statements, each\n                  with syntax appropriate to what is to be granted.\n\n\n\n\n\n          For more information about roles, see Section\u00a08.2.10, \u201cUsing Roles\u201d.\n        \n          To grant a privilege with\n          GRANT, you must have the\n          GRANT OPTION privilege, and you\n          must have the privileges that you are granting.\n          (Alternatively, if you have the\n          UPDATE privilege for the grant\n          tables in the mysql system schema, you can\n          grant any account any privilege.) When the\n          read_only system variable is\n          enabled, GRANT additionally\n          requires the CONNECTION_ADMIN\n          privilege (or the deprecated\n          SUPER privilege).\n        \nGRANT either succeeds for all\n          named users and roles or rolls back and has no effect if any\n          error occurs. The statement is written to the binary log only\n          if it succeeds for all named users and roles.\n        \n          The REVOKE statement is related\n          to GRANT and enables\n          administrators to remove account privileges. See\n          Section\u00a015.7.1.8, \u201cREVOKE Statement\u201d.\n        \n          Each account name uses the format described in\n          Section\u00a08.2.4, \u201cSpecifying Account Names\u201d. Each role name uses the\n          format described in Section\u00a08.2.5, \u201cSpecifying Role Names\u201d. For example:\n        Press CTRL+C to copy GRANT ALL ON db1.* TO 'jeffrey'@'localhost';\nGRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';\nGRANT SELECT ON world.* TO 'role3';\n          The host name part of the account or role name, if omitted,\n          defaults to '%'.\n        \n          Normally, a database administrator first uses\n          CREATE USER to create an\n          account and define its nonprivilege characteristics such as\n          its password, whether it uses secure connections, and limits\n          on access to server resources, then uses\n          GRANT to define its privileges.\n          ALTER USER may be used to\n          change the nonprivilege characteristics of existing accounts.\n          For example:\n        Press CTRL+C to copy CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL ON db1.* TO 'jeffrey'@'localhost';\nGRANT SELECT ON db2.invoice TO 'jeffrey'@'localhost';\nALTER USER 'jeffrey'@'localhost' WITH MAX_QUERIES_PER_HOUR 90;\n          From the mysql program,\n          GRANT responds with\n          Query OK, 0 rows affected when executed\n          successfully. To determine what privileges result from the\n          operation, use SHOW GRANTS. See\n          Section\u00a015.7.7.22, \u201cSHOW GRANTS Statement\u201d.\n\n\n\nImportant\n\n\n            Under some circumstances,\n            GRANT may be recorded in\n            server logs or on the client side in a history file such as\n            ~/.mysql_history, which means that\n            cleartext passwords may be read by anyone having read access\n            to that information. For information about the conditions\n            under which this occurs for the server logs and how to\n            control it, see Section\u00a08.1.2.3, \u201cPasswords and Logging\u201d. For\n            similar information about client-side logging, see\n            Section\u00a06.5.1.3, \u201cmysql Client Logging\u201d.\n\n\n\nGRANT supports host names up to\n          255 characters long. User names can be up to 32 characters.\n          Database, table, column, and routine names can be up to 64\n          characters.\n\n\n\nWarning\n\n\nDo not attempt to change the permissible length\n            for user names by altering the mysql.user\n            system table. Doing so results in unpredictable behavior\n            which may even make it impossible for users to log in to the\n            MySQL server. Never alter the structure of tables\n            in the mysql system schema in any manner\n            except by means of the procedure described in\n            Chapter\u00a03, Upgrading MySQL.\n\n\n", "\n\n\n\nObject Quoting Guidelines\n\n\n\n\n          Several objects within GRANT\n          statements are subject to quoting, although quoting is\n          optional in many cases: Account, role, database, table,\n          column, and routine names. For example, if a\n          user_name or\n          host_name value in an account name\n          is legal as an unquoted identifier, you need not quote it.\n          However, quotation marks are necessary to specify a\n          user_name string containing special\n          characters (such as -), or a\n          host_name string containing special\n          characters or wildcard characters such as %\n          (for example, 'test-user'@'%.com'). Quote\n          the user name and host name separately.\n        \n          To specify quoted values:\n\n\n\n              Quote database, table, column, and routine names as\n              identifiers.\n            \n              Quote user names and host names as identifiers or as\n              strings.\n            \n              Quote passwords as strings.\n\n\n\n          For string-quoting and identifier-quoting guidelines, see\n          Section\u00a011.1.1, \u201cString Literals\u201d, and\n          Section\u00a011.2, \u201cSchema Object Names\u201d.\n\n\n\nImportant\n\n\n            The use of the wildcard characters % and\n            _ as described in the next few paragraphs\n            is deprecated, and thus subject to removal in a future\n            version of MySQL.\n\n\n\n          The _ and % wildcards\n          are permitted when specifying database names in\n          GRANT statements that grant\n          privileges at the database level (GRANT ... ON\n          db_name.*). This means,\n          for example, that to use a _ character as\n          part of a database name, specify it using the\n          \\ escape character as \\_\n          in the GRANT statement, to\n          prevent the user from being able to access additional\n          databases matching the wildcard pattern (for example,\n          GRANT ... ON `foo\\_bar`.* TO ...).\n        \n          Issuing multiple GRANT statements\n          containing wildcards may not have the expected effect on DML\n          statements; when resolving grants involving wildcards, MySQL\n          takes only the first matching grant into consideration. In\n          other words, if a user has two database-level grants using\n          wildcards that match the same database, the grant which was\n          created first is applied. Consider the database\n          db and table t created\n          using the statements shown here:\n        Press CTRL+C to copy mysql> CREATE DATABASE db;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> CREATE TABLE db.t (c INT);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> INSERT INTO db.t VALUES ROW(1);\nQuery OK, 1 row affected (0.00 sec)\n          Next (assuming that the current account is the MySQL\n          root account or another account having the\n          necessary privileges), we create a user u\n          then issue two GRANT statements containing\n          wildcards, like this:\n        Press CTRL+C to copy mysql> CREATE USER u;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> GRANT SELECT ON `d_`.* TO u;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> GRANT INSERT ON `d%`.* TO u;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> EXITPress CTRL+C to copy Bye\n          If we end the session and then log in again with the\n          mysql client, this time as\n          u, we see that this account has only the\n          privilege provided by the first matching grant, but not the\n          second:\n        Press CTRL+C to copy $> mysql -uu -hlocalhostPress CTRL+C to copy Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 10\nServer version: 8.4.0-tr Source distribution\n\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input\nstatement.\n\nmysql> TABLE db.t;\n+------+\n| c    |\n+------+\n|    1 |\n+------+\n1 row in set (0.00 sec)\n\nmysql> INSERT INTO db.t VALUES ROW(2);\nERROR 1142 (42000): INSERT command denied to user 'u'@'localhost' for table 't'\n          In privilege assignments, MySQL interprets occurrences of\n          unescaped _ and % SQL\n          wildcard characters in database names as literal characters\n          under these circumstances:\n\n\n\n              When a database name is not used to grant privileges at\n              the database level, but as a qualifier for granting\n              privileges to some other object such as a table or routine\n              (for example, GRANT ... ON\n              db_name.tbl_name).\n            \n              Enabling partial_revokes\n              causes MySQL to interpret unescaped _\n              and % wildcard characters in database\n              names as literal characters, just as if they had been\n              escaped as \\_ and\n              \\%. Because this changes how MySQL\n              interprets privileges, it may be advisable to avoid\n              unescaped wildcard characters in privilege assignments for\n              installations where\n              partial_revokes may be\n              enabled. For more information, see\n              Section\u00a08.2.12, \u201cPrivilege Restriction Using Partial Revokes\u201d.\n\n\n", "\n\n\n\nAccount Names\n\n\n\n\n          A user value in a\n          GRANT statement indicates a\n          MySQL account to which the statement applies. To accommodate\n          granting rights to users from arbitrary hosts, MySQL supports\n          specifying the user value in the\n          form\n          'user_name'@'host_name'.\n        \n          You can specify wildcards in the host name. For example,\n          'user_name'@'%.example.com'\n          applies to user_name for any host\n          in the example.com domain, and\n          'user_name'@'198.51.100.%'\n          applies to user_name for any host\n          in the 198.51.100 class C subnet.\n        \n          The simple form\n          'user_name' is a\n          synonym for\n          'user_name'@'%'.\n\n\n\nNote\n\n\n            MySQL automatically assigns all privileges granted to\n            'username'@'%'\n            to the\n            'username'@'localhost'\n            account as well. This behavior is deprecated, and is subject\n            to removal in a future version of MySQL.\n\n\n\nMySQL does not support wildcards in user\n          names. To refer to an anonymous user, specify an\n          account with an empty user name with the\n          GRANT statement:\n        Press CTRL+C to copy GRANT ALL ON test.* TO ''@'localhost' ...;\n          In this case, any user who connects from the local host with\n          the correct password for the anonymous user is permitted\n          access, with the privileges associated with the anonymous-user\n          account.\n        \n          For additional information about user name and host name\n          values in account names, see Section\u00a08.2.4, \u201cSpecifying Account Names\u201d.\n\n\n\nWarning\n\n\n            If you permit local anonymous users to connect to the MySQL\n            server, you should also grant privileges to all local users\n            as\n            'user_name'@'localhost'.\n            Otherwise, the anonymous user account for\n            localhost in the\n            mysql.user system table is used when\n            named users try to log in to the MySQL server from the local\n            machine. For details, see\n            Section\u00a08.2.6, \u201cAccess Control, Stage 1: Connection Verification\u201d.\n          \n            To determine whether this issue applies to you, execute the\n            following query, which lists any anonymous users:\n          Press CTRL+C to copy SELECT Host, User FROM mysql.user WHERE User='';\n            To avoid the problem just described, delete the local\n            anonymous user account using this statement:\n          Press CTRL+C to copy DROP USER ''@'localhost';\n\n", "\n\n\n\nPrivileges Supported by MySQL\n\n\n\n\n          The following tables summarize the permissible static and\n          dynamic priv_type privilege types\n          that can be specified for the\n          GRANT and\n          REVOKE statements, and the\n          levels at which each privilege can be granted. For additional\n          information about each privilege, see\n          Section\u00a08.2.2, \u201cPrivileges Provided by MySQL\u201d. For information about\n          the differences between static and dynamic privileges, see\n          Static Versus Dynamic Privileges.\n\n\nTable\u00a015.11\u00a0Permissible Static Privileges for GRANT and REVOKE\n\n\nPrivilege\nMeaning and Grantable Levels\n\nALL [PRIVILEGES]\nGrant all privileges at specified access level except\n                GRANT OPTION and\n                PROXY.\n\nALTER\nEnable use of ALTER TABLE. Levels:\n                Global, database, table.\n\nALTER ROUTINE\nEnable stored routines to be altered or dropped. Levels: Global,\n                database, routine.\n\nCREATE\nEnable database and table creation. Levels: Global, database, table.\n\nCREATE ROLE\nEnable role creation. Level: Global.\n\nCREATE ROUTINE\nEnable stored routine creation. Levels: Global, database.\n\nCREATE TABLESPACE\nEnable tablespaces and log file groups to be created, altered, or\n                dropped. Level: Global.\n\nCREATE TEMPORARY TABLES\nEnable use of CREATE\n                TEMPORARY TABLE. Levels: Global, database.\n\nCREATE USER\nEnable use of CREATE USER,\n                DROP USER,\n                RENAME USER, and\n                REVOKE ALL\n                PRIVILEGES. Level: Global.\n\nCREATE VIEW\nEnable views to be created or altered. Levels: Global, database, table.\n\nDELETE\nEnable use of DELETE. Level: Global,\n                database, table.\n\nDROP\nEnable databases, tables, and views to be dropped. Levels: Global,\n                database, table.\n\nDROP ROLE\nEnable roles to be dropped. Level: Global.\n\nEVENT\nEnable use of events for the Event Scheduler. Levels: Global, database.\n\nEXECUTE\nEnable the user to execute stored routines. Levels: Global, database,\n                routine.\n\nFILE\nEnable the user to cause the server to read or write files. Level:\n                Global.\n\nFLUSH_PRIVILEGES\nEnable the user to issue FLUSH\n                PRIVILEGES statements. Level: Global.\n\nGRANT OPTION\nEnable privileges to be granted to or removed from other accounts.\n                Levels: Global, database, table, routine, proxy.\n\nINDEX\nEnable indexes to be created or dropped. Levels: Global, database,\n                table.\n\nINSERT\nEnable use of INSERT. Levels: Global,\n                database, table, column.\n\nLOCK TABLES\nEnable use of LOCK TABLES on tables for\n                which you have the SELECT\n                privilege. Levels: Global, database.\n\nOPTIMIZE_LOCAL_TABLE\nEnable use of OPTIMIZE\n                LOCAL TABLE or OPTIMIZE\n                NO_WRITE_TO_BINLOG TABLE. Levels: Global,\n                database, table.\n\nPROCESS\nEnable the user to see all processes with SHOW\n                PROCESSLIST. Level: Global.\n\nPROXY\nEnable user proxying. Level: From user to user.\n\nREFERENCES\nEnable foreign key creation. Levels: Global, database, table, column.\n\nRELOAD\nEnable use of FLUSH operations. Level:\n                Global.\n\nREPLICATION CLIENT\nEnable the user to ask where source or replica servers are. Level:\n                Global.\n\nREPLICATION SLAVE\nEnable replicas to read binary log events from the source. Level:\n                Global.\n\nSELECT\nEnable use of SELECT. Levels: Global,\n                database, table, column.\n\nSHOW DATABASES\nEnable SHOW DATABASES to show all\n                databases. Level: Global.\n\nSHOW VIEW\nEnable use of SHOW CREATE VIEW. Levels:\n                Global, database, table.\n\nSHUTDOWN\nEnable use of mysqladmin shutdown. Level: Global.\n\nSUPER\nEnable use of other administrative operations such as\n                CHANGE REPLICATION SOURCE\n                TO, KILL,\n                PURGE BINARY LOGS,\n                SET\n                GLOBAL, and mysqladmin\n                debug command. Level: Global.\n\nTRIGGER\nEnable trigger operations. Levels: Global, database, table.\n\nUPDATE\nEnable use of UPDATE. Levels: Global,\n                database, table, column.\n\nUSAGE\nSynonym for \u201cno privileges\u201d\n\n\nPrivilege\nMeaning and Grantable Levels\n\n\n\n\nTable\u00a015.12\u00a0Permissible Dynamic Privileges for GRANT and REVOKE\n\n\nPrivilege\nMeaning and Grantable Levels\n\nAPPLICATION_PASSWORD_ADMIN\nEnable dual password administration. Level: Global.\n\nAUDIT_ABORT_EXEMPT\nAllow queries blocked by audit log filter. Level: Global.\n\nAUDIT_ADMIN\nEnable audit log configuration. Level: Global.\n\nAUTHENTICATION_POLICY_ADMIN\nEnable authentication policy administration. Level: Global.\n\nBACKUP_ADMIN\nEnable backup administration. Level: Global.\n\nBINLOG_ADMIN\nEnable binary log control. Level: Global.\n\nBINLOG_ENCRYPTION_ADMIN\nEnable activation and deactivation of binary log encryption. Level:\n                Global.\n\nCLONE_ADMIN\nEnable clone administration. Level: Global.\n\nCONNECTION_ADMIN\nEnable connection limit/restriction control. Level: Global.\n\nENCRYPTION_KEY_ADMIN\nEnable InnoDB key rotation. Level: Global.\n\nFIREWALL_ADMIN\nEnable firewall rule administration, any user. Level: Global.\n\nFIREWALL_EXEMPT\nExempt user from firewall restrictions. Level: Global.\n\nFIREWALL_USER\nEnable firewall rule administration, self. Level: Global.\n\nFLUSH_OPTIMIZER_COSTS\nEnable optimizer cost reloading. Level: Global.\n\nFLUSH_STATUS\nEnable status indicator flushing. Level: Global.\n\nFLUSH_TABLES\nEnable table flushing. Level: Global.\n\nFLUSH_USER_RESOURCES\nEnable user-resource flushing. Level: Global.\n\nGROUP_REPLICATION_ADMIN\nEnable Group Replication control. Level: Global.\n\nINNODB_REDO_LOG_ARCHIVE\nEnable redo log archiving administration. Level: Global.\n\nINNODB_REDO_LOG_ENABLE\nEnable or disable redo logging. Level: Global.\n\nNDB_STORED_USER\nEnable sharing of user or role between SQL nodes (NDB Cluster). Level:\n                Global.\n\nPASSWORDLESS_USER_ADMIN\nEnable passwordless user account administration. Level: Global.\n\nPERSIST_RO_VARIABLES_ADMIN\nEnable persisting read-only system variables. Level: Global.\n\nREPLICATION_APPLIER\nAct as the PRIVILEGE_CHECKS_USER for a replication\n                channel. Level: Global.\n\nREPLICATION_SLAVE_ADMIN\nEnable regular replication control. Level: Global.\n\nRESOURCE_GROUP_ADMIN\nEnable resource group administration. Level: Global.\n\nRESOURCE_GROUP_USER\nEnable resource group administration. Level: Global.\n\nROLE_ADMIN\nEnable roles to be granted or revoked, use of WITH ADMIN\n                OPTION. Level: Global.\n\nSESSION_VARIABLES_ADMIN\nEnable setting restricted session system variables. Level: Global.\n\nSHOW_ROUTINE\nEnable access to stored routine definitions. Level: Global.\n\nSKIP_QUERY_REWRITE\nDo not rewrite queries executed by this user. Level: Global.\n\nSYSTEM_USER\nDesignate account as system account. Level: Global.\n\nSYSTEM_VARIABLES_ADMIN\nEnable modifying or persisting global system variables. Level: Global.\n\nTABLE_ENCRYPTION_ADMIN\nEnable overriding default encryption settings. Level: Global.\n\nTELEMETRY_LOG_ADMIN\nEnable telemetry log configuration for HeatWave on AWS. Level: Global.\n\nTP_CONNECTION_ADMIN\nEnable thread pool connection administration. Level: Global.\n\nVERSION_TOKEN_ADMIN\nEnable use of Version Tokens functions. Level: Global.\n\nXA_RECOVER_ADMIN\nEnable XA\n                RECOVER execution. Level: Global.\n\n\nPrivilege\nMeaning and Grantable Levels\n\n\n\n          A trigger is associated with a table. To create or drop a\n          trigger, you must have the\n          TRIGGER privilege for the\n          table, not the trigger.\n        \n          In GRANT statements, the\n          ALL\n          [PRIVILEGES] or PROXY\n          privilege must be named by itself and cannot be specified\n          along with other privileges.\n          ALL\n          [PRIVILEGES] stands for all privileges available for\n          the level at which privileges are to be granted except for the\n          GRANT OPTION and\n          PROXY privileges.\n        \n          MySQL account information is stored in the tables of the\n          mysql system schema. For additional\n          details, consult Section\u00a08.2, \u201cAccess Control and Account Management\u201d, which\n          discusses the mysql system schema and the\n          access control system extensively.\n        \n          If the grant tables hold privilege rows that contain\n          mixed-case database or table names and the\n          lower_case_table_names system\n          variable is set to a nonzero value,\n          REVOKE cannot be used to revoke\n          these privileges. It is necessary in such cases to manipulate\n          the grant tables directly.\n          (GRANT does not create such\n          rows when\n          lower_case_table_names is\n          set, but such rows might have been created prior to setting\n          that variable. The\n          lower_case_table_names\n          setting can only be configured at server startup.)\n        \n          Privileges can be granted at several levels, depending on the\n          syntax used for the ON clause. For\n          REVOKE, the same\n          ON syntax specifies which privileges to\n          remove.\n        \n          For the global, database, table, and routine levels,\n          GRANT ALL\n          assigns only the privileges that exist at the level you are\n          granting. For example, GRANT ALL ON\n          db_name.* is a\n          database-level statement, so it does not grant any global-only\n          privileges such as FILE.\n          Granting ALL does not assign\n          the GRANT OPTION or\n          PROXY privilege.\n        \n          The object_type clause, if present,\n          should be specified as TABLE,\n          FUNCTION, or PROCEDURE\n          when the following object is a table, a stored function, or a\n          stored procedure.\n        \n          The privileges that a user holds for a database, table,\n          column, or routine are formed additively as the logical\n          OR of the account privileges at\n          each of the privilege levels, including the global level. It\n          is not possible to deny a privilege granted at a higher level\n          by absence of that privilege at a lower level. For example,\n          this statement grants the\n          SELECT and\n          INSERT privileges globally:\n        Press CTRL+C to copy GRANT SELECT, INSERT ON *.* TO u1;\n          The globally granted privileges apply to all databases,\n          tables, and columns, even though not granted at any of those\n          lower levels.\n        \n          It is possible to deny explicitly a privilege granted at the\n          global level by revoking it for particular databases, if the\n          partial_revokes system\n          variable is enabled:\n        Press CTRL+C to copy GRANT SELECT, INSERT, UPDATE ON *.* TO u1;\nREVOKE INSERT, UPDATE ON db1.* FROM u1;\n          The result of the preceding statements is that\n          SELECT applies globally to all\n          tables, whereas INSERT and\n          UPDATE apply globally except to\n          tables in db1. Account access to\n          db1 is read only.\n        \n          Details of the privilege-checking procedure are presented in\n          Section\u00a08.2.7, \u201cAccess Control, Stage 2: Request Verification\u201d.\n        \n          If you are using table, column, or routine privileges for even\n          one user, the server examines table, column, and routine\n          privileges for all users and this slows down MySQL a bit.\n          Similarly, if you limit the number of queries, updates, or\n          connections for any users, the server must monitor these\n          values.\n        \n          MySQL enables you to grant privileges on databases or tables\n          that do not exist. For tables, the privileges to be granted\n          must include the CREATE\n          privilege. This behavior is by design,\n          and is intended to enable the database administrator to\n          prepare user accounts and privileges for databases or tables\n          that are to be created at a later time.\n\n\n\nImportant\n\n\nMySQL does not automatically revoke any privileges\n            when you drop a database or table. However, if\n            you drop a routine, any routine-level privileges granted for\n            that routine are revoked.\n\n\n", "\n\n\n\nGlobal Privileges\n\n\n\n\n          Global privileges are administrative or apply to all databases\n          on a given server. To assign global privileges, use\n          ON *.* syntax:\n        Press CTRL+C to copy GRANT ALL ON *.* TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON *.* TO 'someuser'@'somehost';\n          The CREATE TABLESPACE,\n          CREATE USER,\n          FILE,\n          PROCESS,\n          RELOAD,\n          REPLICATION CLIENT,\n          REPLICATION SLAVE,\n          SHOW DATABASES,\n          SHUTDOWN, and\n          SUPER static privileges are\n          administrative and can only be granted globally.\n        \n          Dynamic privileges are all global and can only be granted\n          globally.\n        \n          Other privileges can be granted globally or at more specific\n          levels.\n        \n          The effect of GRANT OPTION\n          granted at the global level differs for static and dynamic\n          privileges:\n\n\n\nGRANT OPTION granted for\n              any static global privilege applies to all static global\n              privileges.\n            \nGRANT OPTION granted for\n              any dynamic privilege applies only to that dynamic\n              privilege.\n\n\n\nGRANT ALL at the global level grants all\n          static global privileges and all currently registered dynamic\n          privileges. A dynamic privilege registered subsequent to\n          execution of the GRANT statement is not\n          granted retroactively to any account.\n        \n          MySQL stores global privileges in the\n          mysql.user system table.\n\n", "\n\n\n\nDatabase Privileges\n\n\n\n\n          Database privileges apply to all objects in a given database.\n          To assign database-level privileges, use ON\n          db_name.* syntax:\n        Press CTRL+C to copy GRANT ALL ON mydb.* TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON mydb.* TO 'someuser'@'somehost';\n          If you use ON * syntax (rather than\n          ON *.*), privileges are assigned at the\n          database level for the default database. An error occurs if\n          there is no default database.\n        \n          The CREATE,\n          DROP,\n          EVENT,\n          GRANT OPTION,\n          LOCK TABLES, and\n          REFERENCES privileges can be\n          specified at the database level. Table or routine privileges\n          also can be specified at the database level, in which case\n          they apply to all tables or routines in the database.\n        \n          MySQL stores database privileges in the\n          mysql.db system table.\n\n", "\n\n\n\nTable Privileges\n\n\n\n\n          Table privileges apply to all columns in a given table. To\n          assign table-level privileges, use ON\n          db_name.tbl_name syntax:\n        Press CTRL+C to copy GRANT ALL ON mydb.mytbl TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON mydb.mytbl TO 'someuser'@'somehost';\n          If you specify tbl_name rather than\n          db_name.tbl_name, the statement\n          applies to tbl_name in the default\n          database. An error occurs if there is no default database.\n        \n          The permissible priv_type values at\n          the table level are ALTER,\n          CREATE VIEW,\n          CREATE,\n          DELETE,\n          DROP,\n          GRANT OPTION,\n          INDEX,\n          INSERT,\n          REFERENCES,\n          SELECT,\n          SHOW VIEW,\n          TRIGGER, and\n          UPDATE.\n        \n          Table-level privileges apply to base tables and views. They do\n          not apply to tables created with CREATE\n          TEMPORARY TABLE, even if the table names match. For\n          information about TEMPORARY table\n          privileges, see Section\u00a015.1.20.2, \u201cCREATE TEMPORARY TABLE Statement\u201d.\n        \n          MySQL stores table privileges in the\n          mysql.tables_priv system table.\n\n", "\n\n\n\nColumn Privileges\n\n\n\n\n          Column privileges apply to single columns in a given table.\n          Each privilege to be granted at the column level must be\n          followed by the column or columns, enclosed within\n          parentheses.\n        Press CTRL+C to copy GRANT SELECT (col1), INSERT (col1, col2) ON mydb.mytbl TO 'someuser'@'somehost';\n          The permissible priv_type values\n          for a column (that is, when you use a\n          column_list clause) are\n          INSERT,\n          REFERENCES,\n          SELECT, and\n          UPDATE.\n        \n          MySQL stores column privileges in the\n          mysql.columns_priv system table.\n\n", "\n\n\n\nStored Routine Privileges\n\n\n\n\n          The ALTER ROUTINE,\n          CREATE ROUTINE,\n          EXECUTE, and\n          GRANT OPTION privileges apply\n          to stored routines (procedures and functions). They can be\n          granted at the global and database levels. Except for\n          CREATE ROUTINE, these\n          privileges can be granted at the routine level for individual\n          routines.\n        Press CTRL+C to copy GRANT CREATE ROUTINE ON mydb.* TO 'someuser'@'somehost';\nGRANT EXECUTE ON PROCEDURE mydb.myproc TO 'someuser'@'somehost';\n          The permissible priv_type values at\n          the routine level are ALTER\n          ROUTINE, EXECUTE, and\n          GRANT OPTION.\n          CREATE ROUTINE is not a\n          routine-level privilege because you must have the privilege at\n          the global or database level to create a routine in the first\n          place.\n        \n          MySQL stores routine-level privileges in the\n          mysql.procs_priv system table.\n\n", "\n\n\n\nProxy User Privileges\n\n\n\n\n          The PROXY privilege enables one\n          user to be a proxy for another. The proxy user impersonates or\n          takes the identity of the proxied user; that is, it assumes\n          the privileges of the proxied user.\n        Press CTRL+C to copy GRANT PROXY ON 'localuser'@'localhost' TO 'externaluser'@'somehost';\n          When PROXY is granted, it must\n          be the only privilege named in the\n          GRANT statement, and the only\n          permitted WITH option is WITH\n          GRANT OPTION.\n        \n          Proxying requires that the proxy user authenticate through a\n          plugin that returns the name of the proxied user to the server\n          when the proxy user connects, and that the proxy user have the\n          PROXY privilege for the proxied user. For\n          details and examples, see Section\u00a08.2.19, \u201cProxy Users\u201d.\n        \n          MySQL stores proxy privileges in the\n          mysql.proxies_priv system table.\n\n", "\n\n\n\nGranting Roles\n\n\n\n\nGRANT syntax without an\n          ON clause grants roles rather than\n          individual privileges. A role is a named collection of\n          privileges; see Section\u00a08.2.10, \u201cUsing Roles\u201d. For example:\n        Press CTRL+C to copy GRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';\n          Each role to be granted must exist, as well as each user\n          account or role to which it is to be granted. Roles cannot be\n          granted to anonymous users.\n        \n          Granting a role does not automatically cause the role to be\n          active. For information about role activation and\n          inactivation, see Activating Roles.\n        \n          These privileges are required to grant roles:\n\n\n\n              If you have the ROLE_ADMIN\n              privilege (or the deprecated\n              SUPER privilege), you can\n              grant or revoke any role to users or roles.\n            \n              If you were granted a role with a\n              GRANT statement that\n              includes the WITH ADMIN OPTION clause,\n              you become able to grant that role to other users or\n              roles, or revoke it from other users or roles, as long as\n              the role is active at such time as you subsequently grant\n              or revoke it. This includes the ability to use\n              WITH ADMIN OPTION itself.\n            \n              To grant a role that has the\n              SYSTEM_USER privilege, you\n              must have the SYSTEM_USER\n              privilege.\n\n\n\n          It is possible to create circular references with\n          GRANT. For example:\n        Press CTRL+C to copy CREATE USER 'u1', 'u2';\nCREATE ROLE 'r1', 'r2';\n\nGRANT 'u1' TO 'u1';   -- simple loop: u1 => u1\nGRANT 'r1' TO 'r1';   -- simple loop: r1 => r1\n\nGRANT 'r2' TO 'u2';\nGRANT 'u2' TO 'r2';   -- mixed user/role loop: u2 => r2 => u2\n          Circular grant references are permitted but add no new\n          privileges or roles to the grantee because a user or role\n          already has its privileges and roles.\n\n", "\n\n\n\nThe AS Clause and Privilege Restrictions\n\n\n\n\nGRANT can specify additional\n          information about the privilege context to use for statement\n          execution by using an AS\n          user [WITH ROLE] clause.\n          This syntax is visible at the SQL level, although its primary\n          purpose is to enable uniform replication across all nodes of\n          grantor privilege restrictions imposed by partial revokes, by\n          causing those restrictions to appear in the binary log. For\n          information about partial revokes, see\n          Section\u00a08.2.12, \u201cPrivilege Restriction Using Partial Revokes\u201d.\n        \n          When the AS user\n          clause is specified, statement execution takes into account\n          any privilege restrictions associated with the named user,\n          including all roles specified by WITH ROLE,\n          if present. The result is that the privileges actually granted\n          by the statement may be reduced relative to those specified.\n        \n          These conditions apply to the AS\n          user clause:\n\n\n\nAS has an effect only when the named\n              user has privilege restrictions\n              (which implies that the\n              partial_revokes system\n              variable is enabled).\n            \n              If WITH ROLE is given, all roles named\n              must be granted to the named\n              user.\n            \n              The named user should be a\n              MySQL account specified as\n              'user_name'@'host_name',\n              CURRENT_USER, or\n              CURRENT_USER(). The current\n              user may be named together with WITH\n              ROLE for the case that the executing user wants\n              GRANT to execute with a set\n              of roles applied that may differ from the roles active\n              within the current session.\n            \nAS cannot be used to gain privileges\n              not possessed by the user who executes the\n              GRANT statement. The\n              executing user must have at least the privileges to be\n              granted, but the AS clause can only\n              restrict the privileges granted, not escalate them.\n            \n              With respect to the privileges to be granted,\n              AS cannot specify a user/role\n              combination that has more privileges (fewer restrictions)\n              than the user who executes the\n              GRANT statement. The\n              AS user/role combination is permitted\n              to have more privileges than the executing user, but only\n              if the statement does not grant those additional\n              privileges.\n            \nAS is supported only for granting\n              global privileges (ON *.*).\n            \nAS is not supported for\n              PROXY grants.\n\n\n\n          The following example illustrates the effect of the\n          AS clause. Create a user\n          u1 that has some global privileges, as well\n          as restrictions on those privileges:\n        Press CTRL+C to copy CREATE USER u1;\nGRANT SELECT, INSERT, UPDATE, DELETE ON *.* TO u1;\nREVOKE INSERT, UPDATE ON schema1.* FROM u1;\nREVOKE SELECT ON schema2.* FROM u1;\n          Also create a role r1 that lifts some of\n          the privilege restrictions and grant the role to\n          u1:\n        Press CTRL+C to copy CREATE ROLE r1;\nGRANT INSERT ON schema1.* TO r1;\nGRANT SELECT ON schema2.* TO r1;\nGRANT r1 TO u1;\n          Now, using an account that has no privilege restrictions of\n          its own, grant to multiple users the same set of global\n          privileges, but each with different restrictions imposed by\n          the AS clause, and check which privileges\n          are actually granted.\n\n\n\n              The GRANT statement here\n              has no AS clause, so the privileges\n              granted are exactly those specified:\n            Press CTRL+C to copy mysql> CREATE USER u2;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u2;\nmysql> SHOW GRANTS FOR u2;\n+-------------------------------------------------+\n| Grants for u2@%                                 |\n+-------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u2`@`%` |\n+-------------------------------------------------+\n              The GRANT statement here\n              has an AS clause, so the privileges\n              granted are those specified but with the restrictions from\n              u1 applied:\n            Press CTRL+C to copy mysql> CREATE USER u3;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u3 AS u1;\nmysql> SHOW GRANTS FOR u3;\n+----------------------------------------------------+\n| Grants for u3@%                                    |\n+----------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u3`@`%`    |\n| REVOKE INSERT, UPDATE ON `schema1`.* FROM `u3`@`%` |\n| REVOKE SELECT ON `schema2`.* FROM `u3`@`%`         |\n+----------------------------------------------------+\n              As mentioned previously, the AS clause\n              can only add privilege restrictions; it cannot escalate\n              privileges. Thus, although u1 has the\n              DELETE privilege, that is\n              not included in the privileges granted because the\n              statement does not specify granting\n              DELETE.\n            \n              The AS clause for the\n              GRANT statement here makes\n              the role r1 active for\n              u1. That role lifts some of the\n              restrictions on u1. Consequently, the\n              privileges granted have some restrictions, but not so many\n              as for the previous GRANT\n              statement:\n            Press CTRL+C to copy mysql> CREATE USER u4;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u4 AS u1 WITH ROLE r1;\nmysql> SHOW GRANTS FOR u4;\n+-------------------------------------------------+\n| Grants for u4@%                                 |\n+-------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u4`@`%` |\n| REVOKE UPDATE ON `schema1`.* FROM `u4`@`%`      |\n+-------------------------------------------------+\n\n\n          If a GRANT statement includes\n          an AS user\n          clause, privilege restrictions on the user who executes the\n          statement are ignored (rather than applied as they would be in\n          the absence of an AS clause).\n\n", "\n\n\n\nOther Account Characteristics\n\n\n\n\n          The optional WITH clause is used to enable\n          a user to grant privileges to other users. The WITH\n          GRANT OPTION clause gives the user the ability to\n          give to other users any privileges the user has at the\n          specified privilege level.\n        \n          To grant the GRANT OPTION\n          privilege to an account without otherwise changing its\n          privileges, do this:\n        Press CTRL+C to copy GRANT USAGE ON *.* TO 'someuser'@'somehost' WITH GRANT OPTION;\n          Be careful to whom you give the GRANT\n          OPTION privilege because two users with different\n          privileges may be able to combine privileges!\n        \n          You cannot grant another user a privilege which you yourself\n          do not have; the GRANT OPTION\n          privilege enables you to assign only those privileges which\n          you yourself possess.\n        \n          Be aware that when you grant a user the\n          GRANT OPTION privilege at a\n          particular privilege level, any privileges the user possesses\n          (or may be given in the future) at that level can also be\n          granted by that user to other users. Suppose that you grant a\n          user the INSERT privilege on a\n          database. If you then grant the\n          SELECT privilege on the\n          database and specify WITH GRANT OPTION,\n          that user can give to other users not only the\n          SELECT privilege, but also\n          INSERT. If you then grant the\n          UPDATE privilege to the user on\n          the database, the user can grant\n          INSERT,\n          SELECT, and\n          UPDATE.\n        \n          For a nonadministrative user, you should not grant the\n          ALTER privilege globally or for\n          the mysql system schema. If you do that,\n          the user can try to subvert the privilege system by renaming\n          tables!\n        \n          For additional information about security risks associated\n          with particular privileges, see\n          Section\u00a08.2.2, \u201cPrivileges Provided by MySQL\u201d.\n\n", "\n\n\n\nMySQL and Standard SQL Versions of GRANT\n\n\n\n\n          The biggest differences between the MySQL and standard SQL\n          versions of GRANT are:\n\n\n\n              MySQL associates privileges with the combination of a host\n              name and user name and not with only a user name.\n            \n              Standard SQL does not have global or database-level\n              privileges, nor does it support all the privilege types\n              that MySQL supports.\n            \n              MySQL does not support the standard SQL\n              UNDER privilege.\n            \n              Standard SQL privileges are structured in a hierarchical\n              manner. If you remove a user, all privileges the user has\n              been granted are revoked. This is also true in MySQL if\n              you use DROP USER. See\n              Section\u00a015.7.1.5, \u201cDROP USER Statement\u201d.\n            \n              In standard SQL, when you drop a table, all privileges for\n              the table are revoked. In standard SQL, when you revoke a\n              privilege, all privileges that were granted based on that\n              privilege are also revoked. In MySQL, privileges can be\n              dropped with DROP USER or\n              REVOKE statements.\n            \n              In MySQL, it is possible to have the\n              INSERT privilege for only\n              some of the columns in a table. In this case, you can\n              still execute INSERT\n              statements on the table, provided that you insert values\n              only for those columns for which you have the\n              INSERT privilege. The\n              omitted columns are set to their implicit default values\n              if strict SQL mode is not enabled. In strict mode, the\n              statement is rejected if any of the omitted columns have\n              no default value. (Standard SQL requires you to have the\n              INSERT privilege on all\n              columns.) For information about strict SQL mode and\n              implicit default values, see Section\u00a07.1.11, \u201cServer SQL Modes\u201d,\n              and Section\u00a013.6, \u201cData Type Default Values\u201d.\n\n\n"], "Examples": ["GRANT ALL ON db1.* TO 'jeffrey'@'localhost';\nGRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';\nGRANT SELECT ON world.* TO 'role3';", "CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL ON db1.* TO 'jeffrey'@'localhost';\nGRANT SELECT ON db2.invoice TO 'jeffrey'@'localhost';\nALTER USER 'jeffrey'@'localhost' WITH MAX_QUERIES_PER_HOUR 90;", "mysql> CREATE DATABASE db;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> CREATE TABLE db.t (c INT);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> INSERT INTO db.t VALUES ROW(1);\nQuery OK, 1 row affected (0.00 sec)", "mysql> CREATE USER u;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> GRANT SELECT ON `d_`.* TO u;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> GRANT INSERT ON `d%`.* TO u;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> EXIT", "Welcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 10\nServer version: 8.4.0-tr Source distribution\n\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input\nstatement.\n\nmysql> TABLE db.t;\n+------+\n| c    |\n+------+\n|    1 |\n+------+\n1 row in set (0.00 sec)\n\nmysql> INSERT INTO db.t VALUES ROW(2);\nERROR 1142 (42000): INSERT command denied to user 'u'@'localhost' for table 't'", "GRANT ALL ON test.* TO ''@'localhost' ...;", "SELECT Host, User FROM mysql.user WHERE User='';", "DROP USER ''@'localhost';", "GRANT SELECT, INSERT ON *.* TO u1;", "GRANT SELECT, INSERT, UPDATE ON *.* TO u1;\nREVOKE INSERT, UPDATE ON db1.* FROM u1;", "GRANT ALL ON *.* TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON *.* TO 'someuser'@'somehost';", "GRANT ALL ON mydb.* TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON mydb.* TO 'someuser'@'somehost';", "GRANT ALL ON mydb.mytbl TO 'someuser'@'somehost';\nGRANT SELECT, INSERT ON mydb.mytbl TO 'someuser'@'somehost';", "GRANT SELECT (col1), INSERT (col1, col2) ON mydb.mytbl TO 'someuser'@'somehost';", "GRANT CREATE ROUTINE ON mydb.* TO 'someuser'@'somehost';\nGRANT EXECUTE ON PROCEDURE mydb.myproc TO 'someuser'@'somehost';", "GRANT PROXY ON 'localuser'@'localhost' TO 'externaluser'@'somehost';", "GRANT 'role1', 'role2' TO 'user1'@'localhost', 'user2'@'localhost';", "CREATE USER 'u1', 'u2';\nCREATE ROLE 'r1', 'r2';\n\nGRANT 'u1' TO 'u1';   -- simple loop: u1 => u1\nGRANT 'r1' TO 'r1';   -- simple loop: r1 => r1\n\nGRANT 'r2' TO 'u2';\nGRANT 'u2' TO 'r2';   -- mixed user/role loop: u2 => r2 => u2", "CREATE USER u1;\nGRANT SELECT, INSERT, UPDATE, DELETE ON *.* TO u1;\nREVOKE INSERT, UPDATE ON schema1.* FROM u1;\nREVOKE SELECT ON schema2.* FROM u1;", "CREATE ROLE r1;\nGRANT INSERT ON schema1.* TO r1;\nGRANT SELECT ON schema2.* TO r1;\nGRANT r1 TO u1;", "mysql> CREATE USER u2;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u2;\nmysql> SHOW GRANTS FOR u2;\n+-------------------------------------------------+\n| Grants for u2@%                                 |\n+-------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u2`@`%` |\n+-------------------------------------------------+", "mysql> CREATE USER u3;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u3 AS u1;\nmysql> SHOW GRANTS FOR u3;\n+----------------------------------------------------+\n| Grants for u3@%                                    |\n+----------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u3`@`%`    |\n| REVOKE INSERT, UPDATE ON `schema1`.* FROM `u3`@`%` |\n| REVOKE SELECT ON `schema2`.* FROM `u3`@`%`         |\n+----------------------------------------------------+", "mysql> CREATE USER u4;\nmysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u4 AS u1 WITH ROLE r1;\nmysql> SHOW GRANTS FOR u4;\n+-------------------------------------------------+\n| Grants for u4@%                                 |\n+-------------------------------------------------+\n| GRANT SELECT, INSERT, UPDATE ON *.* TO `u4`@`%` |\n| REVOKE UPDATE ON `schema1`.* FROM `u4`@`%`      |\n+-------------------------------------------------+", "GRANT USAGE ON *.* TO 'someuser'@'somehost' WITH GRANT OPTION;"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/rename-user.html"], "Title": ["15.7.1.7 RENAME USER Statement"], "Feature": ["RENAME USER old_user TO new_user\n    [, old_user TO new_user] ..."], "Description": ["\n        The RENAME USER statement renames\n        existing MySQL accounts. An error occurs for old accounts that\n        do not exist or new accounts that already exist.\n      ", "\n        To use RENAME USER, you must have\n        the global CREATE USER privilege,\n        or the UPDATE privilege for the\n        mysql system schema. When the\n        read_only system variable is\n        enabled, RENAME USER additionally\n        requires the CONNECTION_ADMIN\n        privilege (or the deprecated\n        SUPER privilege).\n      ", "\nRENAME USER fails with an error\n        if any account to be renamed is named as the\n        DEFINER attribute for any stored object.\n        (That is, the statement fails if renaming an account would cause\n        a stored object to become orphaned.) To perform the operation\n        anyway, you must have the\n        SET_ANY_DEFINER or\n        ALLOW_NONEXISTENT_DEFINER\n        privilege; in this case, the statement succeeds with a warning\n        rather than failing with an error. For additional information,\n        including how to identify which objects name a given account as\n        the DEFINER attribute, see\n        Orphan Stored Objects.\n      ", "\n        Each account name uses the format described in\n        Section\u00a08.2.4, \u201cSpecifying Account Names\u201d. For example:\n      ", "Press CTRL+C to copy RENAME USER 'jeffrey'@'localhost' TO 'jeff'@'127.0.0.1';", "\n        The host name part of the account name, if omitted, defaults to\n        '%'.\n      ", "\nRENAME USER causes the privileges\n        held by the old user to be those held by the new user. However,\n        RENAME USER does not\n        automatically drop or invalidate databases or objects within\n        them that the old user created. This includes stored programs or\n        views for which the DEFINER attribute names\n        the old user. Attempts to access such objects may produce an\n        error if they execute in definer security context. (For\n        information about security context, see\n        Section\u00a027.6, \u201cStored Object Access Control\u201d.)\n      ", "\n        The privilege changes take effect as indicated in\n        Section\u00a08.2.13, \u201cWhen Privilege Changes Take Effect\u201d.\n"], "Examples": ["RENAME USER 'jeffrey'@'localhost' TO 'jeff'@'127.0.0.1';"], "Category": ["Database Administration Statements"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/revoke.html"], "Title": ["15.7.1.8 REVOKE Statement"], "Feature": ["REVOKE [IF EXISTS]\n    priv_type [(column_list)]\n      [, priv_type [(column_list)]] ...\n    ON [object_type] priv_level\n    FROM user_or_role [, user_or_role] ...\n    [IGNORE UNKNOWN USER]\n\nREVOKE [IF EXISTS] ALL [PRIVILEGES], GRANT OPTION\n    FROM user_or_role [, user_or_role] ...\n    [IGNORE UNKNOWN USER]\n\nREVOKE [IF EXISTS] PROXY ON user_or_role\n    FROM user_or_role [, user_or_role] ...\n    [IGNORE UNKNOWN USER]\n\nREVOKE [IF EXISTS] role [, role ] ...\n    FROM user_or_role [, user_or_role ] ...\n    [IGNORE UNKNOWN USER]\n\nuser_or_role: {\n    user (see Section 8.2.4, \u201cSpecifying Account Names\u201d)\n  | role (see Section 8.2.5, \u201cSpecifying Role Names\u201d\n}", "REVOKE ALL PRIVILEGES, GRANT OPTION\n  FROM user_or_role [, user_or_role] ..."], "Description": ["\n        The REVOKE statement enables\n        system administrators to revoke privileges and roles, which can\n        be revoked from user accounts and roles.\n      ", "\n        For details on the levels at which privileges exist, the\n        permissible priv_type,\n        priv_level, and\n        object_type values, and the syntax\n        for specifying users and passwords, see Section\u00a015.7.1.6, \u201cGRANT Statement\u201d.\n      ", "\n        For information about roles, see Section\u00a08.2.10, \u201cUsing Roles\u201d.\n      ", "\n        When the read_only system\n        variable is enabled, REVOKE\n        requires the CONNECTION_ADMIN or\n        privilege (or the deprecated\n        SUPER privilege), in addition to\n        any other required privileges described in the following\n        discussion.\n      ", "\n        All the forms shown for REVOKE support an\n        IF EXISTS option as well as an\n        IGNORE UNKNOWN USER option. With neither of\n        these modifications, REVOKE\n        either succeeds for all named users and roles, or rolls back and\n        has no effect if any error occurs; the statement is written to\n        the binary log only if it succeeds for all named users and\n        roles. The precise effects of IF EXISTS and\n        IGNORE UNKNOWN USER are discussed later in\n        this section.\n      ", "\n        Each account name uses the format described in\n        Section\u00a08.2.4, \u201cSpecifying Account Names\u201d. Each role name uses the format\n        described in Section\u00a08.2.5, \u201cSpecifying Role Names\u201d. For example:\n      ", "Press CTRL+C to copy REVOKE INSERT ON *.* FROM 'jeffrey'@'localhost';\nREVOKE 'role1', 'role2' FROM 'user1'@'localhost', 'user2'@'localhost';\nREVOKE SELECT ON world.* FROM 'role3';", "\n        The host name part of the account or role name, if omitted,\n        defaults to '%'.\n      ", "\n        To use the first REVOKE syntax,\n        you must have the GRANT OPTION\n        privilege, and you must have the privileges that you are\n        revoking.\n      ", "\n        To revoke all privileges, use the second syntax, which drops all\n        global, database, table, column, and routine privileges for the\n        named users or roles:\n      ", "\nREVOKE ALL PRIVILEGES, GRANT OPTION does not\n        revoke any roles.\n      ", "\n        To use this REVOKE syntax, you\n        must have the global CREATE USER\n        privilege, or the UPDATE\n        privilege for the mysql system schema.\n      ", "\n        The syntax for which the REVOKE\n        keyword is followed by one or more role names takes a\n        FROM clause indicating one or more users or\n        roles from which to revoke the roles.\n      ", "\n        The IF EXISTS and IGNORE UNKNOWN\n        USER options have the effects listed here:\n", "\n\nIF EXISTS means that, if the target user\n            or role exists but no such privilege or role is found\n            assigned to the target for any reason, a warning is raised,\n            instead of an error; if no privilege or role named by the\n            statement is assigned to the target, the statement has no\n            (other) effect. Otherwise, REVOKE\n            executes normally; if the user does not exist, the statement\n            raises an error.\n          \nExample: Given table\n            t1 in database test,\n            we execute the following statements, with the results shown.\n          Press CTRL+C to copy mysql> CREATE USER jerry@localhost;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> REVOKE SELECT ON test.t1 FROM jerry@localhost;\nERROR 1147 (42000): There is no such grant defined for user 'jerry' on host\n'localhost' on table 't1' \nmysql> REVOKE IF EXISTS SELECT ON test.t1 FROM jerry@localhost;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1147\nMessage: There is no such grant defined for user 'jerry' on host 'localhost' on\ntable 't1' \n1 row in set (0.00 sec)\nIF EXISTS causes an error to be demoted\n            to a warning even if the privilege or role named does not\n            exist, or the statement attempts to assign it at the wrong\n            level.\n          \n            If the REVOKE statement includes\n            IGNORE UNKNOWN USER, the statement raises\n            a warning for any target user or role named in the statement\n            but not found; if no target named by the statement exists,\n            REVOKE succeeds but has no actual effect.\n            Otherwise, the statement executes as usual, and attempting\n            to revoke a privilege not assigned to the target for\n            whatever reason raises an error, as expected.\n          \nExample (continuing from the previous\n            example):\n          Press CTRL+C to copy mysql> DROP USER IF EXISTS jerry@localhost;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> REVOKE SELECT ON test.t1 FROM jerry@localhost;\nERROR 1147 (42000): There is no such grant defined for user 'jerry' on host\n'localhost' on table 't1' \nmysql> REVOKE SELECT ON test.t1 FROM jerry@localhost IGNORE UNKNOWN USER;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 3162\nMessage: Authorization ID jerry does not exist.\n1 row in set (0.00 sec)\n            The combination of IF EXISTS and\n            IGNORE UNKNOWN USER means that\n            REVOKE never raises an error for an\n            unknown target user or role or for an unassigned or\n            unavailable privilege, and the statement as whole in such\n            cases succeeds; roles or privileges are removed from\n            existing target users or roles whenever possible, and any\n            revocation which is not possible raises a warning and\n            executes as a NOOP.\n          \nExample (again continuing from example\n            in the previous item):\n          Press CTRL+C to copy # No such user, no such role\nmysql> DROP ROLE IF EXISTS Bogus;\nQuery OK, 0 rows affected, 1 warning (0.02 sec)\n\nmysql> SHOW WARNINGS;\n+-------+------+----------------------------------------------+\n| Level | Code | Message                                      |\n+-------+------+----------------------------------------------+\n| Note  | 3162 | Authorization ID 'Bogus'@'%' does not exist. |\n+-------+------+----------------------------------------------+\n1 row in set (0.00 sec)\n\n# This statement attempts to revoke a nonexistent role from a nonexistent user\nmysql> REVOKE Bogus ON test FROM jerry@localhost;\nERROR 3619 (HY000): Illegal privilege level specified for test\n\n# The same, with IF EXISTS\nmysql> REVOKE IF EXISTS Bogus ON test FROM jerry@localhost;\nERROR 1147 (42000): There is no such grant defined for user 'jerry' on host\n'localhost' on table 'test' \n\n# The same, with IGNORE UNKNOWN USER\nmysql> REVOKE Bogus ON test FROM jerry@localhost IGNORE UNKNOWN USER;\nERROR 3619 (HY000): Illegal privilege level specified for test\n\n# The same, with both options\nmysql> REVOKE IF EXISTS Bogus ON test FROM jerry@localhost IGNORE UNKNOWN USER;\nQuery OK, 0 rows affected, 2 warnings (0.01 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+--------------------------------------------+\n| Level   | Code | Message                                    |\n+---------+------+--------------------------------------------+\n| Warning | 3619 | Illegal privilege level specified for test |\n| Warning | 3162 | Authorization ID jerry does not exist.     |\n+---------+------+--------------------------------------------+\n2 rows in set (0.00 sec)\n", "\n        Roles named in the\n        mandatory_roles system variable\n        value cannot be revoked. When IF EXISTS and\n        IGNORE UNKNOWN USER are used together in a\n        statement that tries to remove a mandatory privilege, the error\n        normally raised by attempting to do this is demoted to a\n        warning; the statement executes successfully, but does not make\n        any changes.\n      ", "\n        A revoked role immediately affects any user account from which\n        it was revoked, such that within any current session for the\n        account, its privileges are adjusted for the next statement\n        executed.\n      ", "\n        Revoking a role revokes the role itself, not the privileges that\n        it represents. Suppose that an account is granted a role that\n        includes a given privilege, and is also granted the privilege\n        explicitly or another role that includes the privilege. In this\n        case, the account still possesses that privilege if the first\n        role is revoked. For example, if an account is granted two roles\n        that each include SELECT, the\n        account still can select after either role is revoked.\n      ", "\nREVOKE ALL ON *.* (at the global level)\n        revokes all granted static global privileges and all granted\n        dynamic privileges.\n      ", "\n        A revoked privilege that is granted but not known to the server\n        is revoked with a warning. This situation can occur for dynamic\n        privileges. For example, a dynamic privilege can be granted\n        while the component that registers it is installed, but if that\n        component is subsequently uninstalled, the privilege becomes\n        unregistered, although accounts that possess the privilege still\n        possess it and it can be revoked from them.\n      ", "\nREVOKE removes privileges, but\n        does not remove rows from the mysql.user\n        system table. To remove a user account entirely, use\n        DROP USER. See\n        Section\u00a015.7.1.5, \u201cDROP USER Statement\u201d.\n      ", "\n        If the grant tables hold privilege rows that contain mixed-case\n        database or table names and the\n        lower_case_table_names system\n        variable is set to a nonzero value,\n        REVOKE cannot be used to revoke\n        these privileges. It is necessary in such cases to manipulate\n        the grant tables directly. (GRANT\n        does not create such rows when\n        lower_case_table_names is set,\n        but such rows might have been created prior to setting the\n        variable. The\n        lower_case_table_names setting\n        can only be configured when initializing the server.)\n      ", "\n        When successfully executed from the mysql\n        program, REVOKE responds with\n        Query OK, 0 rows affected. To determine what\n        privileges remain after the operation, use\n        SHOW GRANTS. See\n        Section\u00a015.7.7.22, \u201cSHOW GRANTS Statement\u201d.\n"], "Examples": ["REVOKE INSERT ON *.* FROM 'jeffrey'@'localhost';\nREVOKE 'role1', 'role2' FROM 'user1'@'localhost', 'user2'@'localhost';\nREVOKE SELECT ON world.* FROM 'role3';", "mysql> CREATE USER jerry@localhost;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> REVOKE SELECT ON test.t1 FROM jerry@localhost;\nERROR 1147 (42000): There is no such grant defined for user 'jerry' on host\n'localhost' on table 't1' \nmysql> REVOKE IF EXISTS SELECT ON test.t1 FROM jerry@localhost;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1147\nMessage: There is no such grant defined for user 'jerry' on host 'localhost' on\ntable 't1' \n1 row in set (0.00 sec)", "mysql> DROP USER IF EXISTS jerry@localhost;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> REVOKE SELECT ON test.t1 FROM jerry@localhost;\nERROR 1147 (42000): There is no such grant defined for user 'jerry' on host\n'localhost' on table 't1' \nmysql> REVOKE SELECT ON test.t1 FROM jerry@localhost IGNORE UNKNOWN USER;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 3162\nMessage: Authorization ID jerry does not exist.\n1 row in set (0.00 sec)", "# No such user, no such role\nmysql> DROP ROLE IF EXISTS Bogus;\nQuery OK, 0 rows affected, 1 warning (0.02 sec)\n\nmysql> SHOW WARNINGS;\n+-------+------+----------------------------------------------+\n| Level | Code | Message                                      |\n+-------+------+----------------------------------------------+\n| Note  | 3162 | Authorization ID 'Bogus'@'%' does not exist. |\n+-------+------+----------------------------------------------+\n1 row in set (0.00 sec)\n\n# This statement attempts to revoke a nonexistent role from a nonexistent user\nmysql> REVOKE Bogus ON test FROM jerry@localhost;\nERROR 3619 (HY000): Illegal privilege level specified for test\n\n# The same, with IF EXISTS\nmysql> REVOKE IF EXISTS Bogus ON test FROM jerry@localhost;\nERROR 1147 (42000): There is no such grant defined for user 'jerry' on host\n'localhost' on table 'test' \n\n# The same, with IGNORE UNKNOWN USER\nmysql> REVOKE Bogus ON test FROM jerry@localhost IGNORE UNKNOWN USER;\nERROR 3619 (HY000): Illegal privilege level specified for test\n\n# The same, with both options\nmysql> REVOKE IF EXISTS Bogus ON test FROM jerry@localhost IGNORE UNKNOWN USER;\nQuery OK, 0 rows affected, 2 warnings (0.01 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+--------------------------------------------+\n| Level   | Code | Message                                    |\n+---------+------+--------------------------------------------+\n| Warning | 3619 | Illegal privilege level specified for test |\n| Warning | 3162 | Authorization ID jerry does not exist.     |\n+---------+------+--------------------------------------------+\n2 rows in set (0.00 sec)"], "Category": ["Database Administration Statements"]}
