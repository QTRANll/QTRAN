{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/time.html"
    ],
    "Title": [
        "13.2.3 The TIME Type"
    ],
    "Feature": [
        "13.2.3 The TIME Type"
    ],
    "Description": [
        "\n\n\n\n13.2.3\u00a0The TIME Type\n\n\n\n\n        MySQL retrieves and displays TIME values in\n        'hh:mm:ss' format (or\n        'hhh:mm:ss' format for large hours\n        values). TIME values may range from\n        '-838:59:59' to\n        '838:59:59'. The hours part may be so large\n        because the TIME type can be used not only to\n        represent a time of day (which must be less than 24 hours), but\n        also elapsed time or a time interval between two events (which\n        may be much greater than 24 hours, or even negative).\n      \n        MySQL recognizes TIME values in several\n        formats, some of which can include a trailing fractional seconds\n        part in up to microseconds (6 digits) precision. See\n        Section\u00a011.1.3, \u201cDate and Time Literals\u201d. For information about\n        fractional seconds support in MySQL, see\n        Section\u00a013.2.6, \u201cFractional Seconds in Time Values\u201d. In particular, any\n        fractional part in a value inserted into a\n        TIME column is stored rather than discarded.\n        With the fractional part included, the range for\n        TIME values is\n        '-838:59:59.000000' to\n        '838:59:59.000000'.\n      \n        Be careful about assigning abbreviated values to a\n        TIME column. MySQL interprets abbreviated\n        TIME values with colons as time of the day.\n        That is, '11:12' means\n        '11:12:00', not\n        '00:11:12'. MySQL interprets abbreviated\n        values without colons using the assumption that the two\n        rightmost digits represent seconds (that is, as elapsed time\n        rather than as time of day). For example, you might think of\n        '1112' and 1112 as meaning\n        '11:12:00' (12 minutes after 11 o'clock), but\n        MySQL interprets them as '00:11:12' (11\n        minutes, 12 seconds). Similarly, '12' and\n        12 are interpreted as\n        '00:00:12'.\n      \n        The only delimiter recognized between a time part and a\n        fractional seconds part is the decimal point.\n      \n        By default, values that lie outside the TIME\n        range but are otherwise valid are clipped to the closest\n        endpoint of the range. For example,\n        '-850:00:00' and\n        '850:00:00' are converted to\n        '-838:59:59' and\n        '838:59:59'. Invalid TIME\n        values are converted to '00:00:00'. Note that\n        because '00:00:00' is itself a valid\n        TIME value, there is no way to tell, from a\n        value of '00:00:00' stored in a table,\n        whether the original value was specified as\n        '00:00:00' or whether it was invalid.\n      \n        For more restrictive treatment of invalid\n        TIME values, enable strict SQL mode to cause\n        errors to occur. See Section\u00a07.1.11, \u201cServer SQL Modes\u201d.\n\n"
    ],
    "Examples": [],
    "Category": [
        "The TIME Type"
    ]
}