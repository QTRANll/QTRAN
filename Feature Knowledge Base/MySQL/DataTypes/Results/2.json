{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html"
    ],
    "Title": [
        "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"
    ],
    "Feature": [
        "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"
    ],
    "Description": [
        "\n\n\n\n13.1.4\u00a0Floating-Point Types (Approximate Value) - FLOAT, DOUBLE\n\n\n\n\n        The FLOAT and DOUBLE types\n        represent approximate numeric data values. MySQL uses four bytes\n        for single-precision values and eight bytes for double-precision\n        values.\n      \n        For FLOAT, the SQL standard permits an\n        optional specification of the precision (but not the range of\n        the exponent) in bits following the keyword\n        FLOAT in parentheses, that is,\n        FLOAT(p).\n        MySQL also supports this optional precision specification, but\n        the precision value in\n        FLOAT(p)\n        is used only to determine storage size. A precision from 0 to 23\n        results in a 4-byte single-precision FLOAT\n        column. A precision from 24 to 53 results in an 8-byte\n        double-precision DOUBLE column.\n      \n        MySQL permits a nonstandard syntax:\n        FLOAT(M,D)\n        or\n        REAL(M,D)\n        or DOUBLE\n        PRECISION(M,D).\n        Here,\n        (M,D)\n        means than values can be stored with up to\n        M digits in total, of which\n        D digits may be after the decimal\n        point. For example, a column defined as\n        FLOAT(7,4) is displayed as\n        -999.9999. MySQL performs rounding when\n        storing values, so if you insert 999.00009\n        into a FLOAT(7,4) column, the approximate\n        result is 999.0001.\n      \n        As of MySQL 8.0.17, the nonstandard\n        FLOAT(M,D)\n        and\n        DOUBLE(M,D)\n        syntax is deprecated and you should expect support for it to be\n        removed in a future version of MySQL.\n      \n        Because floating-point values are approximate and not stored as\n        exact values, attempts to treat them as exact in comparisons may\n        lead to problems. They are also subject to platform or\n        implementation dependencies. For more information, see\n        Section\u00a0B.3.4.8, \u201cProblems with Floating-Point Values\u201d.\n      \n        For maximum portability, code requiring storage of approximate\n        numeric data values should use FLOAT or\n        DOUBLE PRECISION with no specification of\n        precision or number of digits.\n\n"
    ],
    "Examples": [],
    "Category": [
        "Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"
    ]
}