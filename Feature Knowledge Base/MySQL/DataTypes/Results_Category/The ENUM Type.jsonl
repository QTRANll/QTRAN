{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/enum.html"], "Title": ["13.3.5 The ENUM Type"], "Feature": ["13.3.5 The ENUM Type"], "Description": ["\n\n\n\n13.3.5\u00a0The ENUM Type\n\n\n\n\n        An ENUM is a string object with a value\n        chosen from a list of permitted values that are enumerated\n        explicitly in the column specification at table creation time.\n      \n        See Section\u00a013.3.1, \u201cString Data Type Syntax\u201d for\n        ENUM type syntax and length\n        limits.\n      \n        The ENUM type has these\n        advantages:\n\n\n\n            Compact data storage in situations where a column has a\n            limited set of possible values. The strings you specify as\n            input values are automatically encoded as numbers. See\n            Section\u00a013.7, \u201cData Type Storage Requirements\u201d for storage\n            requirements for the ENUM type.\n          \n            Readable queries and output. The numbers are translated back\n            to the corresponding strings in query results.\n\n\n\n        and these potential issues to consider:\n\n\n\n            If you make enumeration values that look like numbers, it is\n            easy to mix up the literal values with their internal index\n            numbers, as explained in Enumeration Limitations.\n          \n            Using ENUM columns in ORDER\n            BY clauses requires extra care, as explained in\n            Enumeration Sorting.\n\n\n\nCreating and Using ENUM ColumnsIndex Values for Enumeration LiteralsHandling of Enumeration LiteralsEmpty or NULL Enumeration ValuesEnumeration SortingEnumeration Limitations\n\n\n\n\n\nCreating and Using ENUM Columns\n\n\n\n\n          An enumeration value must be a quoted string literal. For\n          example, you can create a table with an\n          ENUM column like this:\n        Press CTRL+C to copy CREATE TABLE shirts (\n    name VARCHAR(40),\n    size ENUM('x-small', 'small', 'medium', 'large', 'x-large')\n);\nINSERT INTO shirts (name, size) VALUES ('dress shirt','large'), ('t-shirt','medium'),\n  ('polo shirt','small');\nSELECT name, size FROM shirts WHERE size = 'medium';\n+---------+--------+\n| name    | size   |\n+---------+--------+\n| t-shirt | medium |\n+---------+--------+\nUPDATE shirts SET size = 'small' WHERE size = 'large';\nCOMMIT;\n          Inserting 1 million rows into this table with a value of\n          'medium' would require 1 million bytes of\n          storage, as opposed to 6 million bytes if you stored the\n          actual string 'medium' in a\n          VARCHAR column.\n\n\n\n\n\n\nIndex Values for Enumeration Literals\n\n\n\n\n          Each enumeration value has an index:\n\n\n\n              The elements listed in the column specification are\n              assigned index numbers, beginning with 1.\n            \n              The index value of the empty string error value is 0. This\n              means that you can use the following\n              SELECT statement to find\n              rows into which invalid ENUM values\n              were assigned:\n            Press CTRL+C to copy mysql> SELECT * FROM tbl_name WHERE enum_col=0;\n              The index of the NULL value is\n              NULL.\n            \n              The term \u201cindex\u201d here refers to a position\n              within the list of enumeration values. It has nothing to\n              do with table indexes.\n\n\n\n          For example, a column specified as ENUM('Mercury',\n          'Venus', 'Earth') can have any of the values shown\n          here. The index of each value is also shown.\n\n\n\nValue\nIndex\n\nNULL\nNULL\n\n''\n0\n\n'Mercury'\n1\n\n'Venus'\n2\n\n'Earth'\n3\n\n\n\n          An ENUM column can have a\n          maximum of 65,535 distinct elements.\n        \n          If you retrieve an ENUM value in a numeric\n          context, the column value's index is returned. For example,\n          you can retrieve numeric values from an\n          ENUM column like this:\n        Press CTRL+C to copy mysql> SELECT enum_col+0 FROM tbl_name;\n          Functions such as SUM() or\n          AVG() that expect a numeric\n          argument cast the argument to a number if necessary. For\n          ENUM values, the index number is used in\n          the calculation.\n\n\n\n\n\n\nHandling of Enumeration Literals\n\n\n\n\n          Trailing spaces are automatically deleted from\n          ENUM member values in the table definition\n          when a table is created.\n        \n          When retrieved, values stored into an ENUM\n          column are displayed using the lettercase that was used in the\n          column definition. Note that ENUM columns\n          can be assigned a character set and collation. For binary or\n          case-sensitive collations, lettercase is taken into account\n          when assigning values to the column.\n        \n          If you store a number into an ENUM column,\n          the number is treated as the index into the possible values,\n          and the value stored is the enumeration member with that\n          index. (However, this does not work with\n          LOAD DATA, which treats all\n          input as strings.) If the numeric value is quoted, it is still\n          interpreted as an index if there is no matching string in the\n          list of enumeration values. For these reasons, it is not\n          advisable to define an ENUM column with\n          enumeration values that look like numbers, because this can\n          easily become confusing. For example, the following column has\n          enumeration members with string values of\n          '0', '1', and\n          '2', but numeric index values of\n          1, 2, and\n          3:\n        Press CTRL+C to copy numbers ENUM('0','1','2')\n          If you store 2, it is interpreted as an\n          index value, and becomes '1' (the value\n          with index 2). If you store '2', it matches\n          an enumeration value, so it is stored as\n          '2'. If you store '3',\n          it does not match any enumeration value, so it is treated as\n          an index and becomes '2' (the value with\n          index 3).\n        Press CTRL+C to copy mysql> INSERT INTO t (numbers) VALUES(2),('2'),('3');\nmysql> SELECT * FROM t;\n+---------+\n| numbers |\n+---------+\n| 1       |\n| 2       |\n| 2       |\n+---------+\n          To determine all possible values for an\n          ENUM column, use\n          SHOW COLUMNS\n          FROM tbl_name LIKE\n          'enum_col' and parse the\n          ENUM definition in the\n          Type column of the output.\n        \n          In the C API, ENUM values are returned as\n          strings. For information about using result set metadata to\n          distinguish them from other strings, see\n          C API Basic Data Structures.\n\n\n\n\n\n\nEmpty or NULL Enumeration Values\n\n\n\n\n          An enumeration value can also be the empty string\n          ('') or NULL under\n          certain circumstances:\n\n\n\n              If you insert an invalid value into an\n              ENUM (that is, a string not present in\n              the list of permitted values), the empty string is\n              inserted instead as a special error value. This string can\n              be distinguished from a \u201cnormal\u201d empty string\n              by the fact that this string has the numeric value 0. See\n              Index Values for Enumeration Literals for details about the\n              numeric indexes for the enumeration values.\n            \n              If strict SQL mode is enabled, attempts to insert invalid\n              ENUM values result in an error.\n            \n              If an ENUM column is declared to permit\n              NULL, the NULL value\n              is a valid value for the column, and the default value is\n              NULL. If an ENUM\n              column is declared NOT NULL, its\n              default value is the first element of the list of\n              permitted values.\n\n\n\n\n\n\n\nEnumeration Sorting\n\n\n\n\nENUM values are sorted based on their index\n          numbers, which depend on the order in which the enumeration\n          members were listed in the column specification. For example,\n          'b' sorts before 'a' for\n          ENUM('b', 'a'). The empty string sorts\n          before nonempty strings, and NULL values\n          sort before all other enumeration values.\n        \n          To prevent unexpected results when using the ORDER\n          BY clause on an ENUM column, use\n          one of these techniques:\n\n\n\n              Specify the ENUM list in alphabetic\n              order.\n            \n              Make sure that the column is sorted lexically rather than\n              by index number by coding ORDER BY\n              CAST(col AS CHAR) or\n              ORDER BY\n              CONCAT(col).\n\n\n\n\n\n\n\nEnumeration Limitations\n\n\n\n\n          An enumeration value cannot be an expression, even one that\n          evaluates to a string value.\n        \n          For example, this CREATE TABLE\n          statement does not work because the\n          CONCAT function cannot be used to construct\n          an enumeration value:\n        Press CTRL+C to copy CREATE TABLE sizes (\n    size ENUM('small', CONCAT('med','ium'), 'large')\n);\n          You also cannot employ a user variable as an enumeration\n          value. This pair of statements do not\n          work:\n        Press CTRL+C to copy SET @mysize = 'medium';\n\nCREATE TABLE sizes (\n    size ENUM('small', @mysize, 'large')\n);\n          We strongly recommend that you do not use\n          numbers as enumeration values, because it does not save on\n          storage over the appropriate\n          TINYINT or\n          SMALLINT type, and it is easy\n          to mix up the strings and the underlying number values (which\n          might not be the same) if you quote the\n          ENUM values incorrectly. If you do use a\n          number as an enumeration value, always enclose it in quotation\n          marks. If the quotation marks are omitted, the number is\n          regarded as an index. See Handling of Enumeration Literals to\n          see how even a quoted number could be mistakenly used as a\n          numeric index value.\n        \n          Duplicate values in the definition cause a warning, or an\n          error if strict SQL mode is enabled.\n\n\n"], "Examples": ["CREATE TABLE shirts (\n    name VARCHAR(40),\n    size ENUM('x-small', 'small', 'medium', 'large', 'x-large')\n);\nINSERT INTO shirts (name, size) VALUES ('dress shirt','large'), ('t-shirt','medium'),\n  ('polo shirt','small');\nSELECT name, size FROM shirts WHERE size = 'medium';\n+---------+--------+\n| name    | size   |\n+---------+--------+\n| t-shirt | medium |\n+---------+--------+\nUPDATE shirts SET size = 'small' WHERE size = 'large';\nCOMMIT;", "mysql> SELECT * FROM tbl_name WHERE enum_col=0;", "mysql> SELECT enum_col+0 FROM tbl_name;", "numbers ENUM('0','1','2')", "mysql> INSERT INTO t (numbers) VALUES(2),('2'),('3');\nmysql> SELECT * FROM t;\n+---------+\n| numbers |\n+---------+\n| 1       |\n| 2       |\n| 2       |\n+---------+", "CREATE TABLE sizes (\n    size ENUM('small', CONCAT('med','ium'), 'large')\n);", "SET @mysize = 'medium';\n\nCREATE TABLE sizes (\n    size ENUM('small', @mysize, 'large')\n);"], "Category": ["The ENUM Type"]}
