{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/datetime.html"], "Title": ["13.2.2 The DATE, DATETIME, and TIMESTAMP Types"], "Feature": ["13.2.2 The DATE, DATETIME, and TIMESTAMP Types"], "Description": ["\n\n\n\n13.2.2\u00a0The DATE, DATETIME, and TIMESTAMP Types\n\n\n\n\n        The DATE, DATETIME, and\n        TIMESTAMP types are related. This section\n        describes their characteristics, how they are similar, and how\n        they differ. MySQL recognizes DATE,\n        DATETIME, and TIMESTAMP\n        values in several formats, described in\n        Section\u00a011.1.3, \u201cDate and Time Literals\u201d. For the\n        DATE and DATETIME range\n        descriptions, \u201csupported\u201d means that although\n        earlier values might work, there is no guarantee.\n      \n        The DATE type is used for values with a date\n        part but no time part. MySQL retrieves and displays\n        DATE values in\n        'YYYY-MM-DD'\n        format. The supported range is '1000-01-01'\n        to '9999-12-31'.\n      \n        The DATETIME type is used for values that\n        contain both date and time parts. MySQL retrieves and displays\n        DATETIME values in\n        'YYYY-MM-DD\n        hh:mm:ss' format. The supported range is\n        '1000-01-01 00:00:00' to '9999-12-31\n        23:59:59'.\n      \n        The TIMESTAMP data type is used for values\n        that contain both date and time parts.\n        TIMESTAMP has a range of '1970-01-01\n        00:00:01' UTC to '2038-01-19\n        03:14:07' UTC.\n      \n        A DATETIME or TIMESTAMP\n        value can include a trailing fractional seconds part in up to\n        microseconds (6 digits) precision. In particular, any fractional\n        part in a value inserted into a DATETIME or\n        TIMESTAMP column is stored rather than\n        discarded. With the fractional part included, the format for\n        these values is 'YYYY-MM-DD\n        hh:mm:ss[.fraction]',\n        the range for DATETIME values is\n        '1000-01-01 00:00:00.000000' to\n        '9999-12-31 23:59:59.499999', and the range\n        for TIMESTAMP values is '1970-01-01\n        00:00:01.000000' to '2038-01-19\n        03:14:07.499999'. The fractional part should always be\n        separated from the rest of the time by a decimal point; no other\n        fractional seconds delimiter is recognized. For information\n        about fractional seconds support in MySQL, see\n        Section\u00a013.2.6, \u201cFractional Seconds in Time Values\u201d.\n      \n        The TIMESTAMP and DATETIME\n        data types offer automatic initialization and updating to the\n        current date and time. For more information, see\n        Section\u00a013.2.5, \u201cAutomatic Initialization and Updating for TIMESTAMP and DATETIME\u201d.\n      \n        MySQL converts TIMESTAMP values from the\n        current time zone to UTC for storage, and back from UTC to the\n        current time zone for retrieval. (This does not occur for other\n        types such as DATETIME.) By default, the\n        current time zone for each connection is the server's time. The\n        time zone can be set on a per-connection basis. As long as the\n        time zone setting remains constant, you get back the same value\n        you store. If you store a TIMESTAMP value,\n        and then change the time zone and retrieve the value, the\n        retrieved value is different from the value you stored. This\n        occurs because the same time zone was not used for conversion in\n        both directions. The current time zone is available as the value\n        of the time_zone system\n        variable. For more information, see\n        Section\u00a07.1.15, \u201cMySQL Server Time Zone Support\u201d.\n      \n        In MySQL 8.0.19 and later, you can specify a time zone offset\n        when inserting a TIMESTAMP or\n        DATETIME value into a table. See\n        Section\u00a011.1.3, \u201cDate and Time Literals\u201d, for more information\n        and examples.\n      \n        Invalid DATE, DATETIME, or\n        TIMESTAMP values are converted to the\n        \u201czero\u201d value of the appropriate type\n        ('0000-00-00' or '0000-00-00\n        00:00:00'), if the SQL mode permits this conversion.\n        The precise behavior depends on which if any of strict SQL mode\n        and the NO_ZERO_DATE SQL mode\n        are enabled; see Section\u00a07.1.11, \u201cServer SQL Modes\u201d.\n      \n        In MySQL 8.0.22 and later, you can convert\n        TIMESTAMP values to UTC\n        DATETIME values when retrieving them using\n        CAST() with the AT TIME\n        ZONE operator, as shown here:\n      Press CTRL+C to copy mysql> SELECT col,\n     >     CAST(col AT TIME ZONE INTERVAL '+00:00' AS DATETIME) AS ut\n     >     FROM ts ORDER BY id;\n+---------------------+---------------------+\n| col                 | ut                  |\n+---------------------+---------------------+\n| 2020-01-01 10:10:10 | 2020-01-01 15:10:10 |\n| 2019-12-31 23:40:10 | 2020-01-01 04:40:10 |\n| 2020-01-01 13:10:10 | 2020-01-01 18:10:10 |\n| 2020-01-01 10:10:10 | 2020-01-01 15:10:10 |\n| 2020-01-01 04:40:10 | 2020-01-01 09:40:10 |\n| 2020-01-01 18:10:10 | 2020-01-01 23:10:10 |\n+---------------------+---------------------+\n        For complete information regarding syntax and additional\n        examples, see the description of the\n        CAST() function.\n      \n        Be aware of certain properties of date value interpretation in\n        MySQL:\n\n\n\n            MySQL permits a \u201crelaxed\u201d format for values\n            specified as strings, in which any punctuation character may\n            be used as the delimiter between date parts or time parts.\n            In some cases, this syntax can be deceiving. For example, a\n            value such as '10:11:12' might look like\n            a time value because of the :, but is\n            interpreted as the year '2010-11-12' if\n            used in date context. The value\n            '10:45:15' is converted to\n            '0000-00-00' because\n            '45' is not a valid month.\n          \n            The only delimiter recognized between a date and time part\n            and a fractional seconds part is the decimal point.\n          \n            The server requires that month and day values be valid, and\n            not merely in the range 1 to 12 and 1 to 31, respectively.\n            With strict mode disabled, invalid dates such as\n            '2004-04-31' are converted to\n            '0000-00-00' and a warning is generated.\n            With strict mode enabled, invalid dates generate an error.\n            To permit such dates, enable\n            ALLOW_INVALID_DATES. See\n            Section\u00a07.1.11, \u201cServer SQL Modes\u201d, for more information.\n          \n            MySQL does not accept TIMESTAMP values\n            that include a zero in the day or month column or values\n            that are not a valid date. The sole exception to this rule\n            is the special \u201czero\u201d value\n            '0000-00-00 00:00:00', if the SQL mode\n            permits this value. The precise behavior depends on which if\n            any of strict SQL mode and the\n            NO_ZERO_DATE SQL mode are\n            enabled; see Section\u00a07.1.11, \u201cServer SQL Modes\u201d.\n          \n            Dates containing 2-digit year values are ambiguous because\n            the century is unknown. MySQL interprets 2-digit year values\n            using these rules:\n\n\n\n                Year values in the range 00-69 become\n                2000-2069.\n              \n                Year values in the range 70-99 become\n                1970-1999.\n\n\n\n            See also Section\u00a013.2.9, \u201c2-Digit Years in Dates\u201d.\n\n\n"], "Examples": ["mysql> SELECT col,\n     >     CAST(col AT TIME ZONE INTERVAL '+00:00' AS DATETIME) AS ut\n     >     FROM ts ORDER BY id;\n+---------------------+---------------------+\n| col                 | ut                  |\n+---------------------+---------------------+\n| 2020-01-01 10:10:10 | 2020-01-01 15:10:10 |\n| 2019-12-31 23:40:10 | 2020-01-01 04:40:10 |\n| 2020-01-01 13:10:10 | 2020-01-01 18:10:10 |\n| 2020-01-01 10:10:10 | 2020-01-01 15:10:10 |\n| 2020-01-01 04:40:10 | 2020-01-01 09:40:10 |\n| 2020-01-01 18:10:10 | 2020-01-01 23:10:10 |\n+---------------------+---------------------+"], "Category": ["The DATE, DATETIME, and TIMESTAMP Types"]}
