{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference"
    ],
    "Name": "AES_ENCRYPT()",
    "Description": [
        "\nAES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n",
        "\nAES_ENCRYPT() and\n          AES_DECRYPT() implement\n          encryption and decryption of data using the official AES\n          (Advanced Encryption Standard) algorithm, previously known as\n          \u201cRijndael.\u201d The AES standard permits various key\n          lengths. By default these functions implement AES with a\n          128-bit key length. Key lengths of 196 or 256 bits can be\n          used, as described later. The key length is a trade off\n          between performance and security.\n        ",
        "\nAES_ENCRYPT() encrypts the\n          string str using the key string\n          key_str, and returns a binary\n          string containing the encrypted output.\n          AES_DECRYPT() decrypts the\n          encrypted string crypt_str using\n          the key string key_str, and returns\n          the original (binary) string in hexadecimal format. (To obtain\n          the string as plaintext, cast the result to\n          CHAR. Alternatively, start the\n          mysql client with\n          --skip-binary-as-hex\n          to cause all binary values to be displayed as text.) If either\n          function argument is NULL, the function\n          returns NULL. If\n          AES_DECRYPT() detects invalid\n          data or incorrect padding, it returns NULL.\n          However, it is possible for\n          AES_DECRYPT() to return a\n          non-NULL value (possibly garbage) if the\n          input data or the key is invalid.\n        ",
        "\n          As of MySQL 8.0.30, these functions support the use of a key\n          derivation function (KDF) to create a cryptographically strong\n          secret key from the information passed in\n          key_str. The derived key is used to\n          encrypt and decrypt the data, and it remains in the MySQL\n          Server instance and is not accessible to users. Using a KDF is\n          highly recommended, as it provides better security than\n          specifying your own premade key or deriving it by a simpler\n          method as you use the function. The functions support HKDF\n          (available from OpenSSL 1.1.0), for which you can specify an\n          optional salt and context-specific information to include in\n          the keying material, and PBKDF2 (available from OpenSSL\n          1.0.2), for which you can specify an optional salt and set the\n          number of iterations used to produce the key.\n        ",
        "\nAES_ENCRYPT() and\n          AES_DECRYPT() permit control of\n          the block encryption mode. The\n          block_encryption_mode system\n          variable controls the mode for block-based encryption\n          algorithms. Its default value is\n          aes-128-ecb, which signifies encryption\n          using a key length of 128 bits and ECB mode. For a description\n          of the permitted values of this variable, see\n          Section\u00a07.1.8, \u201cServer System Variables\u201d. The optional\n          init_vector argument is used to\n          provide an initialization vector for block encryption modes\n          that require it.\n        ",
        "\n          Statements that use\n          AES_ENCRYPT() or\n          AES_DECRYPT() are unsafe for\n          statement-based replication.\n        ",
        "\n          If AES_ENCRYPT() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        ",
        "\n          The arguments for the\n          AES_ENCRYPT() and\n          AES_DECRYPT() functions are as\n          follows:\n",
        "\n\nstr\n\n                The string for\n                AES_ENCRYPT() to encrypt\n                using the key string key_str,\n                or (from MySQL 8.0.30) the key derived from it by the\n                specified KDF. The string can be any length. Padding is\n                automatically added to str so\n                it is a multiple of a block as required by block-based\n                algorithms such as AES. This padding is automatically\n                removed by the\n                AES_DECRYPT() function.\n              \ncrypt_str\n\n                The encrypted string for\n                AES_DECRYPT() to decrypt\n                using the key string key_str,\n                or (from MySQL 8.0.30) the key derived from it by the\n                specified KDF. The string can be any length. The length\n                of crypt_str can be\n                calculated from the length of the original string using\n                this formula:\n              Press CTRL+C to copy 16 * (trunc(string_length / 16) + 1)\nkey_str\n\n                The encryption key, or the input keying material that is\n                used as the basis for deriving a key using a key\n                derivation function (KDF). For the same instance of\n                data, use the same value of\n                key_str for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n              \n                If you are using a KDF, which you can from MySQL 8.0.30,\n                key_str can be any arbitrary\n                information such as a password or passphrase. In the\n                further arguments for the function, you specify the KDF\n                name, then add further options to increase the security\n                as appropriate for the KDF.\n              \n                When you use a KDF, the function creates a\n                cryptographically strong secret key from the information\n                passed in key_str and any\n                salt or additional information that you provide in the\n                other arguments. The derived key is used to encrypt and\n                decrypt the data, and it remains in the MySQL Server\n                instance and is not accessible to users. Using a KDF is\n                highly recommended, as it provides better security than\n                specifying your own premade key or deriving it by a\n                simpler method as you use the function.\n              \n                If you are not using a KDF, for a key length of 128\n                bits, the most secure way to pass a key to the\n                key_str argument is to create\n                a truly random 128-bit value and pass it as a binary\n                value. For example:\n              Press CTRL+C to copy INSERT INTO t\nVALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));\n                A passphrase can be used to generate an AES key by\n                hashing the passphrase. For example:\n              Press CTRL+C to copy INSERT INTO t\nVALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));\n                If you exceed the maximum key length of 128 bits, a\n                warning is returned. If you are not using a KDF, do not\n                pass a password or passphrase directly to\n                key_str, hash it first.\n                Previous versions of this documentation suggested the\n                former approach, but it is no longer recommended as the\n                examples shown here are more secure.\n              \ninit_vector\n\n                An initialization vector, for block encryption modes\n                that require it. The\n                block_encryption_mode\n                system variable controls the mode. For the same instance\n                of data, use the same value of\n                init_vector for encryption\n                with AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n\n\n\nNote\n\n\n                  If you are using a KDF, you must specify an\n                  initialization vector or a null string for this\n                  argument, in order to access the later arguments to\n                  define the KDF.\n\n\n\n                For modes that require an initialization vector, it must\n                be 16 bytes or longer (bytes in excess of 16 are\n                ignored). An error occurs if\n                init_vector is missing. For\n                modes that do not require an initialization vector, it\n                is ignored and a warning is generated if\n                init_vector is specified,\n                unless you are using a KDF.\n              \n                The default value for the\n                block_encryption_mode\n                system variable is aes-128-ecb, or\n                ECB mode, which does not require an initialization\n                vector. The alternative permitted block encryption modes\n                CBC, CFB1, CFB8, CFB128, and OFB all require an\n                initialization vector.\n              \n                A random string of bytes to use for the initialization\n                vector can be produced by calling\n                RANDOM_BYTES(16).\n              \nkdf_name\n\n                The name of the key derivation function (KDF) to create\n                a key from the input keying material passed in\n                key_str, and other arguments\n                as appropriate for the KDF. This optional argument is\n                available from MySQL 8.0.30.\n              \n                For the same instance of data, use the same value of\n                kdf_name for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT(). When you\n                specify kdf_name, you must\n                specify init_vector, using\n                either a valid initialization vector, or a null string\n                if the encryption mode does not require an\n                initialization vector.\n              \n                The following values are supported:\n\n\n\nhkdf\n\n                      HKDF, which is available from OpenSSL 1.1.0. HKDF\n                      extracts a pseudorandom key from the keying\n                      material then expands it into additional keys.\n                      With HKDF, you can specify an optional salt\n                      (salt) and\n                      context-specific information such as application\n                      details (info) to\n                      include in the keying material.\n                    \npbkdf2_hmac\n\n                      PBKDF2, which is available from OpenSSL 1.0.2.\n                      PBKDF2 applies a pseudorandom function to the\n                      keying material, and repeats this process a large\n                      number of times to produce the key. With PBKDF2,\n                      you can specify an optional salt\n                      (salt) to include in\n                      the keying material, and set the number of\n                      iterations used to produce the key\n                      (iterations).\n\n\n\n                In this example, HKDF is specified as the key derivation\n                function, and a salt and context information are\n                provided. The argument for the initialization vector is\n                included but is the empty string:\n              Press CTRL+C to copy SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');\n                In this example, PBKDF2 is specified as the key\n                derivation function, a salt is provided, and the number\n                of iterations is doubled from the recommended minimum:\n              Press CTRL+C to copy SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');\nsalt\n\n                A salt to be passed to the key derivation function\n                (KDF). This optional argument is available from MySQL\n                8.0.30. Both HKDF and PBKDF2 can use salts, and their\n                use is recommended to help prevent attacks based on\n                dictionaries of common passwords or rainbow tables.\n              \n                A salt consists of random data, which for security must\n                be different for each encryption operation. A random\n                string of bytes to use for the salt can be produced by\n                calling RANDOM_BYTES().\n                This example produces a 64-bit salt:\n              Press CTRL+C to copy SET @salt = RANDOM_BYTES(8);\n                For the same instance of data, use the same value of\n                salt for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT(). The salt\n                can safely be stored along with the encrypted data.\n              \ninfo\n\n                Context-specific information for HKDF to include in the\n                keying material, such as information about the\n                application. This optional argument is available from\n                MySQL 8.0.30 when you specify hkdf as\n                the KDF name. HKDF adds this information to the keying\n                material specified in key_str\n                and the salt specified in\n                salt to produce the key.\n              \n                For the same instance of data, use the same value of\n                info for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n              \niterations\n\n                The iteration count for PBKDF2 to use when producing the\n                key. This optional argument is available from MySQL\n                8.0.30 when you specify pbkdf2_hmac\n                as the KDF name. A higher count gives greater resistance\n                to brute-force attacks because it has a greater\n                computational cost for the attacker, but the same is\n                necessarily true for the key derivation process. The\n                default if you do not specify this argument is 1000,\n                which is the minimum recommended by the OpenSSL\n                standard.\n              \n                For the same instance of data, use the same value of\n                iterations for encryption\n                with AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n\n",
        "Press CTRL+C to copy mysql> SET block_encryption_mode = 'aes-256-cbc';\nmysql> SET @key_str = SHA2('My secret passphrase',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nmysql> SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);\n+-------------------------------------------------------------+\n| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |\n+-------------------------------------------------------------+\n| text                                                        |\n+-------------------------------------------------------------+"
    ],
    "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_aes-encrypt",
    "Feature": [
        "AES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])"
    ],
    "Examples": [
        "INSERT INTO t\nVALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));",
        "INSERT INTO t\nVALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));",
        "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');",
        "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');",
        "SET @salt = RANDOM_BYTES(8);",
        "mysql> SET block_encryption_mode = 'aes-256-cbc';\nmysql> SET @key_str = SHA2('My secret passphrase',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nmysql> SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);\n+-------------------------------------------------------------+\n| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |\n+-------------------------------------------------------------+\n| text                                                        |\n+-------------------------------------------------------------+"
    ],
    "Category": [
        "Built-In Functions and Operators",
        "Encryption and Compression Functions"
    ]
}