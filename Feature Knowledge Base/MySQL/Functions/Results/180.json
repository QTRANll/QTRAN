{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference"
    ],
    "Name": "JSON_STORAGE_SIZE()",
    "Description": [
        "\nJSON_STORAGE_SIZE(json_val)\n",
        "\n          This function returns the number of bytes used to store the\n          binary representation of a JSON document. When the argument is\n          a JSON column, this is the space used to\n          store the JSON document as it was inserted into the column,\n          prior to any partial updates that may have been performed on\n          it afterwards. json_val must be a\n          valid JSON document or a string which can be parsed as one. In\n          the case where it is string, the function returns the amount\n          of storage space in the JSON binary representation that is\n          created by parsing the string as JSON and converting it to\n          binary. It returns NULL if the argument is\n          NULL.\n        ",
        "\n          An error results when json_val is\n          not NULL, and is not\u2014or cannot be\n          successfully parsed as\u2014a JSON document.\n        ",
        "\n          To illustrate this function's behavior when used with a\n          JSON column as its argument, we create a\n          table named jtable containing a\n          JSON column jcol, insert\n          a JSON value into the table, then obtain the storage space\n          used by this column with\n          JSON_STORAGE_SIZE(), as shown here:\n        ",
        "Press CTRL+C to copy mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+-----------------------------------------------+------+------+\n| jcol                                          | Size | Free |\n+-----------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    0 |\n+-----------------------------------------------+------+------+\n1 row in set (0.00 sec)",
        "\n          According to the output of\n          JSON_STORAGE_SIZE(), the JSON document\n          inserted into the column takes up 47 bytes. We also checked\n          the amount of space freed by any previous partial updates of\n          the column using\n          JSON_STORAGE_FREE(); since no\n          updates have yet been performed, this is 0, as expected.\n        ",
        "\n          Next we perform an UPDATE on\n          the table that should result in a partial update of the\n          document stored in jcol, and then test the\n          result as shown here:\n        ",
        "Press CTRL+C to copy mysql> UPDATE jtable SET jcol = \n    ->     JSON_SET(jcol, \"$.b\", \"a\");\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+--------------------------------------------+------+------+\n| jcol                                       | Size | Free |\n+--------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    3 |\n+--------------------------------------------+------+------+\n1 row in set (0.00 sec)",
        "\n          The value returned by JSON_STORAGE_FREE()\n          in the previous query indicates that a partial update of the\n          JSON document was performed, and that this freed 3 bytes of\n          space used to store it. The result returned by\n          JSON_STORAGE_SIZE() is unchanged by the\n          partial update.\n        ",
        "\n          Partial updates are supported for updates using\n          JSON_SET(),\n          JSON_REPLACE(), or\n          JSON_REMOVE(). The direct\n          assignment of a value to a JSON column\n          cannot be partially updated; following such an update,\n          JSON_STORAGE_SIZE() always shows the\n          storage used for the newly-set value:\n        ",
        "Press CTRL+C to copy mysql> UPDATE jtable\nmysql>     SET jcol = '{\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+------------------------------------------------+------+------+\n| jcol                                           | Size | Free |\n+------------------------------------------------+------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |   56 |    0 |\n+------------------------------------------------+------+------+\n1 row in set (0.00 sec)",
        "\n          A JSON user variable cannot be partially updated. This means\n          that this function always shows the space currently used to\n          store a JSON document in a user variable:\n        ",
        "Press CTRL+C to copy mysql> SET @j = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+------------------------------------+------+\n| @j                                 | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   45 |\n+------------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[1]', \"json\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+----------------------------------+------+\n| @j                               | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   43 |\n+----------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+---------------------------------------------+------+\n| @j                                          | Size |\n+---------------------------------------------+------+\n| [100, \"json\", [[10, 20, 30], 3, 5], 425.05] |   56 |\n+---------------------------------------------+------+\n1 row in set (0.00 sec)",
        "\n          For a JSON literal, this function always returns the current\n          storage space used:\n        ",
        "Press CTRL+C to copy mysql> SELECT\n    ->     JSON_STORAGE_SIZE('[100, \"sakila\", [1, 3, 5], 425.05]') AS A,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"}') AS B,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}') AS C,\n    ->     JSON_STORAGE_SIZE('[100, \"json\", [[10, 20, 30], 3, 5], 425.05]') AS D;\n+----+----+----+----+\n| A  | B  | C  | D  |\n+----+----+----+----+\n| 45 | 44 | 47 | 56 |\n+----+----+----+----+\n1 row in set (0.00 sec)"
    ],
    "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html#function_json-storage-size",
    "Feature": [
        "JSON_STORAGE_SIZE(json_val)"
    ],
    "Examples": [
        "mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+-----------------------------------------------+------+------+\n| jcol                                          | Size | Free |\n+-----------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    0 |\n+-----------------------------------------------+------+------+\n1 row in set (0.00 sec)",
        "mysql> UPDATE jtable SET jcol = \n    ->     JSON_SET(jcol, \"$.b\", \"a\");\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+--------------------------------------------+------+------+\n| jcol                                       | Size | Free |\n+--------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    3 |\n+--------------------------------------------+------+------+\n1 row in set (0.00 sec)",
        "mysql> UPDATE jtable\nmysql>     SET jcol = '{\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+------------------------------------------------+------+------+\n| jcol                                           | Size | Free |\n+------------------------------------------------+------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |   56 |    0 |\n+------------------------------------------------+------+------+\n1 row in set (0.00 sec)",
        "mysql> SET @j = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+------------------------------------+------+\n| @j                                 | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   45 |\n+------------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[1]', \"json\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+----------------------------------+------+\n| @j                               | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   43 |\n+----------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+---------------------------------------------+------+\n| @j                                          | Size |\n+---------------------------------------------+------+\n| [100, \"json\", [[10, 20, 30], 3, 5], 425.05] |   56 |\n+---------------------------------------------+------+\n1 row in set (0.00 sec)",
        "mysql> SELECT\n    ->     JSON_STORAGE_SIZE('[100, \"sakila\", [1, 3, 5], 425.05]') AS A,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"}') AS B,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}') AS C,\n    ->     JSON_STORAGE_SIZE('[100, \"json\", [[10, 20, 30], 3, 5], 425.05]') AS D;\n+----+----+----+----+\n| A  | B  | C  | D  |\n+----+----+----+----+\n| 45 | 44 | 47 | 56 |\n+----+----+----+----+\n1 row in set (0.00 sec)"
    ],
    "Category": [
        "Built-In Functions and Operators",
        "JSON Functions"
    ]
}