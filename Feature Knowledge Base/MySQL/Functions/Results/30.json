{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference"
    ],
    "Name": "CAST()",
    "Description": [
        "\nCAST(expr AS\n            type [ARRAY])\n",
        "\nCAST(timestamp_value\n            AT TIME ZONE timezone_specifier\n            AS\n            DATETIME[(precision)])\n",
        "\ntimezone_specifier: [INTERVAL]\n            '+00:00' | 'UTC'\n          ",
        "\n            With\n            CAST(expr AS\n            type syntax, the\n            CAST() function takes an\n            expression of any type and produces a result value of the\n            specified type. This operation may also be expressed as\n            CONVERT(expr,\n            type), which is\n            equivalent. If expr is\n            NULL, CAST() returns\n            NULL.\n          ",
        "\n            These type values are permitted:\n",
        "\n\nBINARY[(N)]\n\n                Produces a string with the\n                VARBINARY data type,\n                except that when the expression\n                expr is empty (zero length),\n                the result type is BINARY(0). If the\n                optional length N is given,\n                BINARY(N)\n                causes the cast to use no more than\n                N bytes of the argument.\n                Values shorter than N bytes\n                are padded with 0x00 bytes to a\n                length of N. If the optional\n                length N is not given, MySQL\n                calculates the maximum length from the expression. If\n                the supplied or calculated length is greater than an\n                internal threshold, the result type is\n                BLOB. If the length is still too\n                long, the result type is LONGBLOB.\n              \n                For a description of how casting to\n                BINARY affects comparisons, see\n                Section\u00a013.3.3, \u201cThe BINARY and VARBINARY Types\u201d.\n              \nCHAR[(N)]\n                [charset_info]\n\n                Produces a string with the\n                VARCHAR data type, unless\n                the expression expr is empty\n                (zero length), in which case the result type is\n                CHAR(0). If the optional length\n                N is given,\n                CHAR(N)\n                causes the cast to use no more than\n                N characters of the argument.\n                No padding occurs for values shorter than\n                N characters. If the optional\n                length N is not given, MySQL\n                calculates the maximum length from the expression. If\n                the supplied or calculated length is greater than an\n                internal threshold, the result type is\n                TEXT. If the length is still too\n                long, the result type is LONGTEXT.\n              \n                With no charset_info clause,\n                CHAR produces a string with the\n                default character set. To specify the character set\n                explicitly, these\n                charset_info values are\n                permitted:\n\n\n\nCHARACTER SET\n                    charset_name:\n                    Produces a string with the given character set.\n                  \nASCII: Shorthand for\n                    CHARACTER SET latin1.\n                  \nUNICODE: Shorthand for\n                    CHARACTER SET ucs2.\n\n\n\n                In all cases, the string has the character set default\n                collation.\n              \nDATE\n\n                Produces a DATE value.\n              \nDATETIME[(M)]\n\n                Produces a DATETIME\n                value. If the optional M\n                value is given, it specifies the fractional seconds\n                precision.\n              \nDECIMAL[(M[,D])]\n\n                Produces a DECIMAL value.\n                If the optional M and\n                D values are given, they\n                specify the maximum number of digits (the precision) and\n                the number of digits following the decimal point (the\n                scale). If D is omitted, 0 is\n                assumed. If M is omitted, 10\n                is assumed.\n              \nDOUBLE\n\n                Produces a DOUBLE result.\n                Added in MySQL 8.0.17.\n              \nFLOAT[(p)]\n\n                If the precision p is not\n                specified, produces a result of type\n                FLOAT. If\n                p is provided and 0 <=\n                < p <= 24, the result\n                is of type FLOAT. If 25 <=\n                p <= 53, the result is of\n                type DOUBLE. If\n                p < 0 or\n                p > 53, an error is\n                returned. Added in MySQL 8.0.17.\n              \nJSON\n\n                Produces a JSON value.\n                For details on the rules for conversion of values\n                between JSON and other\n                types, see Comparison and Ordering of JSON Values.\n              \nNCHAR[(N)]\n\n                Like CHAR, but produces a string with\n                the national character set. See\n                Section\u00a012.3.7, \u201cThe National Character Set\u201d.\n              \n                Unlike CHAR, NCHAR\n                does not permit trailing character set information to be\n                specified.\n              \nREAL\n\n                Produces a result of type\n                REAL. This is actually\n                FLOAT if the\n                REAL_AS_FLOAT SQL\n                mode is enabled; otherwise the result is of type\n                DOUBLE.\n              \nSIGNED [INTEGER]\n\n                Produces a signed BIGINT\n                value.\n              \nspatial_type\n\n                As of MySQL 8.0.24,\n                CAST() and\n                CONVERT() support casting\n                geometry values from one spatial type to another, for\n                certain combinations of spatial types. For details, see\n                Cast Operations on Spatial Types.\n              \nTIME[(M)]\n\n                Produces a TIME value. If\n                the optional M value is\n                given, it specifies the fractional seconds precision.\n              \nUNSIGNED [INTEGER]\n\n                Produces an unsigned\n                BIGINT value.\n              \nYEAR\n\n                Produces a YEAR value.\n                Added in MySQL 8.0.22. These rules govern conversion to\n                YEAR:\n\n\n\n                    For a four-digit number in the range 1901-2155\n                    inclusive, or for a string which can be interpreted\n                    as a four-digit number in this range, return the\n                    corresponding YEAR value.\n                  \n                    For a number consisting of one or two digits, or for\n                    a string which can be interpreted as such a number,\n                    return a YEAR value as follows:\n\n\n\n                        If the number is in the range 1-69 inclusive,\n                        add 2000 and return the sum.\n                      \n                        If the number is in the range 70-99 inclusive,\n                        add 1900 and return the sum.\n\n\n\n                    For a string which evaluates to 0, return 2000.\n                  \n                    For the number 0, return 0.\n                  \n                    For a DATE,\n                    DATETIME, or\n                    TIMESTAMP value,\n                    return the YEAR portion of the\n                    value. For a TIME\n                    value, return the current year.\n                  \n                    If you do not specify the type of a\n                    TIME argument, you may get a\n                    different result from what you expect, as shown\n                    here:\n                  Press CTRL+C to copy mysql> SELECT CAST(\"11:35:00\" AS YEAR), CAST(TIME \"11:35:00\" AS YEAR);\n+--------------------------+-------------------------------+\n| CAST(\"11:35:00\" AS YEAR) | CAST(TIME \"11:35:00\" AS YEAR) |\n+--------------------------+-------------------------------+\n|                     2011 |                          2021 |\n+--------------------------+-------------------------------+\n                    If the argument is of type\n                    DECIMAL,\n                    DOUBLE,\n                    DECIMAL, or\n                    REAL, round the value\n                    to the nearest integer, then attempt to cast the\n                    value to YEAR using the rules for\n                    integer values, as shown here:\n                  Press CTRL+C to copy mysql> SELECT CAST(1944.35 AS YEAR), CAST(1944.50 AS YEAR);\n+-----------------------+-----------------------+\n| CAST(1944.35 AS YEAR) | CAST(1944.50 AS YEAR) |\n+-----------------------+-----------------------+\n|                  1944 |                  1945 |\n+-----------------------+-----------------------+\n\nmysql> SELECT CAST(66.35 AS YEAR), CAST(66.50 AS YEAR);\n+---------------------+---------------------+\n| CAST(66.35 AS YEAR) | CAST(66.50 AS YEAR) |\n+---------------------+---------------------+\n|                2066 |                2067 |\n+---------------------+---------------------+\n                    An argument of type\n                    GEOMETRY cannot be\n                    converted to YEAR.\n                  \n                    For a value that cannot be successfully converted to\n                    YEAR, return\n                    NULL.\n\n\n\n                A string value containing non-numeric characters which\n                must be truncated prior to conversion raises a warning,\n                as shown here:\n              Press CTRL+C to copy mysql> SELECT CAST(\"1979aaa\" AS YEAR);\n+-------------------------+\n| CAST(\"1979aaa\" AS YEAR) |\n+-------------------------+\n|                    1979 |\n+-------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect YEAR value: '1979aaa' |\n+---------+------+-------------------------------------------+\n",
        "\n            In MySQL 8.0.17 and higher,\n            InnoDB allows the use of an\n            additional ARRAY keyword for creating a\n            multi-valued index on a JSON\n            array as part of CREATE\n            INDEX, CREATE\n            TABLE, and ALTER\n            TABLE statements. ARRAY is not\n            supported except when used to create a multi-valued index in\n            one of these statements, in which case it is required. The\n            column being indexed must be a column of type\n            JSON. With ARRAY, the\n            type following the\n            AS keyword may specify any of the types\n            supported by CAST(), with the exceptions\n            of BINARY, JSON, and\n            YEAR. For syntax information and\n            examples, as well as other relevant information, see\n            Multi-Valued Indexes.\n",
        "\n\nNote\n\n\nCONVERT(), unlike\n              CAST(), does\n              not support multi-valued index\n              creation or the ARRAY keyword.\n\n",
        "\n            Beginning with MySQL 8.0.22, CAST()\n            supports retrieval of a\n            TIMESTAMP value as being in\n            UTC, using the AT TIMEZONE operator. The\n            only supported time zone is UTC; this can be specified as\n            either of '+00:00' or\n            'UTC'. The only return type supported by\n            this syntax is DATETIME, with an optional\n            precision specifier in the range of 0 to 6, inclusive.\n          ",
        "\nTIMESTAMP values that use timezone\n            offsets are also supported.\n          ",
        "Press CTRL+C to copy mysql> SELECT @@system_time_zone;\n+--------------------+\n| @@system_time_zone |\n+--------------------+\n| EDT                |\n+--------------------+\n1 row in set (0.00 sec)\n\nmysql> CREATE TABLE tz (c TIMESTAMP);\nQuery OK, 0 rows affected (0.41 sec)\n\nmysql> INSERT INTO tz VALUES\n    ->     ROW(CURRENT_TIMESTAMP),\n    ->     ROW('2020-07-28 14:50:15+1:00');\nQuery OK, 1 row affected (0.08 sec)\n\nmysql> TABLE tz;\n+---------------------+\n| c                   |\n+---------------------+\n| 2020-07-28 09:22:41 |\n| 2020-07-28 09:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE '+00:00' AS DATETIME) AS u FROM tz;\n+---------------------+\n| u                   |\n+---------------------+\n| 2020-07-28 13:22:41 |\n| 2020-07-28 13:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE 'UTC' AS DATETIME(2)) AS u FROM tz;\n+------------------------+\n| u                      |\n+------------------------+\n| 2020-07-28 13:22:41.00 |\n| 2020-07-28 13:50:15.00 |\n+------------------------+\n2 rows in set (0.00 sec)",
        "\n            If you use 'UTC' as the time zone\n            specifier with this form of CAST(), and\n            the server raises an error such as Unknown or\n            incorrect time zone: 'UTC', you may need to\n            install the MySQL time zone tables (see\n            Populating the Time Zone Tables).\n          ",
        "\nAT TIME ZONE does not support the\n            ARRAY keyword, and is not supported by\n            the CONVERT() function.\n          "
    ],
    "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#function_cast",
    "Feature": [
        "CAST(expr AS\n            type [ARRAY])"
    ],
    "Examples": [
        "mysql> SELECT CAST(\"11:35:00\" AS YEAR), CAST(TIME \"11:35:00\" AS YEAR);\n+--------------------------+-------------------------------+\n| CAST(\"11:35:00\" AS YEAR) | CAST(TIME \"11:35:00\" AS YEAR) |\n+--------------------------+-------------------------------+\n|                     2011 |                          2021 |\n+--------------------------+-------------------------------+",
        "mysql> SELECT CAST(1944.35 AS YEAR), CAST(1944.50 AS YEAR);\n+-----------------------+-----------------------+\n| CAST(1944.35 AS YEAR) | CAST(1944.50 AS YEAR) |\n+-----------------------+-----------------------+\n|                  1944 |                  1945 |\n+-----------------------+-----------------------+\n\nmysql> SELECT CAST(66.35 AS YEAR), CAST(66.50 AS YEAR);\n+---------------------+---------------------+\n| CAST(66.35 AS YEAR) | CAST(66.50 AS YEAR) |\n+---------------------+---------------------+\n|                2066 |                2067 |\n+---------------------+---------------------+",
        "mysql> SELECT CAST(\"1979aaa\" AS YEAR);\n+-------------------------+\n| CAST(\"1979aaa\" AS YEAR) |\n+-------------------------+\n|                    1979 |\n+-------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect YEAR value: '1979aaa' |\n+---------+------+-------------------------------------------+",
        "mysql> SELECT @@system_time_zone;\n+--------------------+\n| @@system_time_zone |\n+--------------------+\n| EDT                |\n+--------------------+\n1 row in set (0.00 sec)\n\nmysql> CREATE TABLE tz (c TIMESTAMP);\nQuery OK, 0 rows affected (0.41 sec)\n\nmysql> INSERT INTO tz VALUES\n    ->     ROW(CURRENT_TIMESTAMP),\n    ->     ROW('2020-07-28 14:50:15+1:00');\nQuery OK, 1 row affected (0.08 sec)\n\nmysql> TABLE tz;\n+---------------------+\n| c                   |\n+---------------------+\n| 2020-07-28 09:22:41 |\n| 2020-07-28 09:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE '+00:00' AS DATETIME) AS u FROM tz;\n+---------------------+\n| u                   |\n+---------------------+\n| 2020-07-28 13:22:41 |\n| 2020-07-28 13:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE 'UTC' AS DATETIME(2)) AS u FROM tz;\n+------------------------+\n| u                      |\n+------------------------+\n| 2020-07-28 13:22:41.00 |\n| 2020-07-28 13:50:15.00 |\n+------------------------+\n2 rows in set (0.00 sec)"
    ],
    "Category": [
        "Built-In Functions and Operators",
        "Cast Functions and Operators"
    ]
}