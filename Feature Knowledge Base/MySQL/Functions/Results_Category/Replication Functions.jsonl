{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "asynchronous_connection_failover_add_source()", "Description": ["\nasynchronous_connection_failover_add_source()\n", "\n            Add configuration information for a replication source\n            server to the source list for a replication channel.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_add_source(channel, host, port, network_namespace, weight)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server is part\n                of the source list.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n              \nweight: The priority of this\n                replication source server in the replication channel's\n                source list. The priority is from 1 to 100, with 100\n                being the highest, and 50 being the default. When the\n                asynchronous connection failover mechanism activates,\n                the source with the highest priority setting among the\n                alternative sources listed in the source list for the\n                channel is chosen for the first connection attempt. If\n                this attempt does not work, the replica tries with all\n                the listed sources in descending order of priority, then\n                starts again from the highest priority source. If\n                multiple sources have the same priority, the replica\n                orders them randomly. From MySQL 8.0.23, the\n                asynchronous connection failover mechanism activates if\n                the source currently connected is not the highest\n                weighted in the group.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80);\n+-------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80)              |\n+-------------------------------------------------------------------------------------------------+\n| Source configuration details successfully inserted.                                             |\n+-------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-source", "Feature": ["asynchronous_connection_failover_add_source()"], "Examples": ["SELECT asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80);\n+-------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80)              |\n+-------------------------------------------------------------------------------------------------+\n| Source configuration details successfully inserted.                                             |\n+-------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "group_replication_disable_member_action()", "Description": ["\ngroup_replication_disable_member_action()\n", "\n              Disable a member action so that the member does not take\n              it in the specified situation. If the server where you use\n              the function is part of a group, it must be the current\n              primary in a group in single-primary mode, and it must be\n              part of the majority. The changed setting is propagated to\n              other group members and joining members, so they will all\n              act in the same way when they are in the specified\n              situation, and you only need to use the function on the\n              primary.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_disable_member_action(name, event)", "\n              Arguments:\n", "\n\nname: The name of the\n                  member action to disable.\n                \nevent: The event that\n                  triggers the member action.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_disable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n            "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/group-replication-functions-for-member-actions.html#function_group-replication-disable-member-action", "Feature": ["group_replication_disable_member_action()"], "Examples": ["SELECT group_replication_disable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "group_replication_enable_member_action()", "Description": ["\ngroup_replication_enable_member_action()\n", "\n              Enable a member action for the member to take in the\n              specified situation. If the server where you use the\n              function is part of a group, it must be the current\n              primary in a group in single-primary mode, and it must be\n              part of the majority. The changed setting is propagated to\n              other group members and joining members, so they will all\n              act in the same way when they are in the specified\n              situation, and you only need to use the function on the\n              primary.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_enable_member_action(name, event)", "\n              Arguments:\n", "\n\nname: The name of the\n                  member action to enable.\n                \nevent: The event that\n                  triggers the member action.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_enable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n            "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/group-replication-functions-for-member-actions.html#function_group-replication-enable-member-action", "Feature": ["group_replication_enable_member_action()"], "Examples": ["SELECT group_replication_enable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "group_replication_get_communication_protocol()", "Description": ["\ngroup_replication_get_communication_protocol()\n", "\n              Inspect the Group Replication communication protocol\n              version that is currently in use for a group.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_get_communication_protocol()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              The oldest MySQL Server version that can join this group\n              and use the group's communication protocol. Note that\n              the\n              group_replication_get_communication_protocol()\n              function returns the minimum MySQL version that the group\n              supports, which might differ from the version number that\n              was passed to\n              group_replication_set_communication_protocol(),\n              and from the MySQL Server version that is installed on the\n              member where you use the function.\n            ", "\n              If the protocol cannot be inspected because this server\n              instance does not belong to a replication group, an error\n              is returned as a string.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_get_communication_protocol();\n+------------------------------------------------+\n| group_replication_get_communication_protocol() |\n+------------------------------------------------+\n| 8.0.40                                          |\n+------------------------------------------------+", "\n              For more information, see\n              Section\u00a020.5.1.4, \u201cSetting a Group's Communication Protocol Version\u201d.\n            "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/group-replication-functions-for-communication-protocol.html#function_group-replication-get-communication-protocol", "Feature": ["group_replication_get_communication_protocol()"], "Examples": ["SELECT group_replication_get_communication_protocol();\n+------------------------------------------------+\n| group_replication_get_communication_protocol() |\n+------------------------------------------------+\n| 8.0.40                                          |\n+------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "group_replication_get_write_concurrency()", "Description": ["\ngroup_replication_get_write_concurrency()\n", "\n              Check the maximum number of consensus instances that a\n              group can execute in parallel.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy INT group_replication_get_write_concurrency()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              The maximum number of consensus instances currently set\n              for the group.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_get_write_concurrency()", "\n              For more information, see\n              Section\u00a020.5.1.3, \u201cUsing Group Replication Group Write Consensus\u201d.\n            "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/group-replication-functions-for-maximum-consensus.html#function_group-replication-get-write-concurrency", "Feature": ["group_replication_get_write_concurrency()"], "Examples": [], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "group_replication_reset_member_actions()", "Description": ["\ngroup_replication_reset_member_actions()\n", "\n              Reset the member actions configuration to the default\n              settings, and reset its version number to 1.\n            ", "\n              The\n              group_replication_reset_member_actions()\n              function can only be used on a server that is not\n              currently part of a group. The server must be writeable\n              (with the read_only\n              system variable set to OFF) and have\n              the Group Replication plugin installed. You can use this\n              function to remove the member actions configuration that a\n              server used when it was part of a group, if you intend to\n              use it as a standalone server with no member actions or\n              different member actions.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_reset_member_actions()", "\n              Arguments:\n            ", "\n              None.\n            ", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_reset_member_actions();", "\n              For more information, see\n              Section\u00a020.5.1.5, \u201cConfiguring Member Actions\u201d.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/group-replication-functions-for-member-actions.html#function_group-replication-reset-member-actions", "Feature": ["group_replication_reset_member_actions()"], "Examples": ["SELECT group_replication_reset_member_actions();"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "group_replication_set_as_primary()", "Description": ["\ngroup_replication_set_as_primary()\n", "\n              Appoints a specific member of the group as the new\n              primary, overriding any election process.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_as_primary(member_uuid[, timeout])", "\n              Arguments:\n", "\n\nmember_uuid: A string\n                  containing the UUID of the member of the group that\n                  you want to become the new primary.\n                \ntimeout: An integer\n                  specifying a timeout in seconds for transactions that\n                  are running on the existing primary when you use the\n                  function. You can set a timeout from 0 seconds\n                  (immediately) up to 3600 seconds (60 minutes). When\n                  you set a timeout, new transactions cannot start on\n                  the primary from that point on. There is no default\n                  setting for the timeout, so if you do not set it,\n                  there is no upper limit to the wait time, and new\n                  transactions can start during that time. This option\n                  is available from MySQL 8.0.29.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_as_primary(\u201800371d66-3c45-11ea-804b-080027337932\u2019, 300);", "\n              For more information, see\n              Section\u00a020.5.1.1, \u201cChanging the Primary\u201d.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/group-replication-functions-for-new-primary.html#function_group-replication-set-as-primary", "Feature": ["group_replication_set_as_primary()"], "Examples": ["SELECT group_replication_set_as_primary(\u201800371d66-3c45-11ea-804b-080027337932\u2019, 300);"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "group_replication_set_communication_protocol()", "Description": ["\ngroup_replication_set_communication_protocol()\n", "\n              Downgrade the Group Replication communication protocol\n              version of a group so that members at earlier releases can\n              join, or upgrade the Group Replication communication\n              protocol version of a group after upgrading MySQL Server\n              on all members. The\n              GROUP_REPLICATION_ADMIN\n              privilege is required to use this function, and all\n              existing group members must be online when you issue the\n              statement, with no loss of majority.\n", "\n\nNote\n\n\n                For MySQL InnoDB cluster, the communication protocol\n                version is managed automatically whenever the cluster\n                topology is changed using AdminAPI operations. You do\n                not have to use these functions yourself for an InnoDB\n                cluster.\n\n", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_communication_protocol(version)", "\n              Arguments:\n", "\n\nversion: For a downgrade,\n                  specify the MySQL Server version of the prospective\n                  group member that has the oldest installed server\n                  version. In this case, the command makes the group\n                  fall back to a communication protocol compatible with\n                  that server version if possible. The minimum server\n                  version that you can specify is MySQL 5.7.14. For an\n                  upgrade, specify the new MySQL Server version to which\n                  the existing group members have been upgraded.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_communication_protocol(\"5.7.25\");", "\n              For more information, see\n              Section\u00a020.5.1.4, \u201cSetting a Group's Communication Protocol Version\u201d.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/group-replication-functions-for-communication-protocol.html#function_group-replication-set-communication-protocol", "Feature": ["group_replication_set_communication_protocol()"], "Examples": ["SELECT group_replication_set_communication_protocol(\"5.7.25\");"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "group_replication_set_write_concurrency()", "Description": ["\ngroup_replication_set_write_concurrency()\n", "\n              Configures the maximum number of consensus instances that\n              a group can execute in parallel. The\n              GROUP_REPLICATION_ADMIN\n              privilege is required to use this function.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_set_write_concurrency(instances)", "\n              Arguments:\n", "\n\nmembers: Sets the maximum\n                  number of consensus instances that a group can execute\n                  in parallel. Default value is 10, valid values are\n                  integers in the range of 10 to 200.\n\n", "\n              Return value:\n            ", "\n              Any resulting error as a string.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_set_write_concurrency(instances);", "\n              For more information, see\n              Section\u00a020.5.1.3, \u201cUsing Group Replication Group Write Consensus\u201d.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/group-replication-functions-for-maximum-consensus.html#function_group-replication-set-write-concurrency", "Feature": ["group_replication_set_write_concurrency()"], "Examples": ["SELECT group_replication_set_write_concurrency(instances);"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "group_replication_switch_to_multi_primary_mode()", "Description": ["\ngroup_replication_switch_to_multi_primary_mode()\n", "\n              Changes a group running in single-primary mode to\n              multi-primary mode. Must be issued on a member of a\n              replication group running in single-primary mode.\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_switch_to_multi_primary_mode()", "\n              This function has no parameters.\n            ", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_switch_to_multi_primary_mode()", "\n              All members which belong to the group become primaries.\n            ", "\n              For more information, see\n              Section\u00a020.5.1.2, \u201cChanging the Group Mode\u201d\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/group-replication-functions-for-mode.html#function_group-replication-switch-to-multi-primary-mode", "Feature": ["group_replication_switch_to_multi_primary_mode()"], "Examples": [], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "group_replication_switch_to_single_primary_mode()", "Description": ["\ngroup_replication_switch_to_single_primary_mode()\n", "\n              Changes a group running in multi-primary mode to\n              single-primary mode, without the need to stop Group\n              Replication. Must be issued on a member of a replication\n              group running in multi-primary mode. When you change to\n              single-primary mode, strict consistency checks are also\n              disabled on all group members, as required in\n              single-primary mode\n              (group_replication_enforce_update_everywhere_checks=OFF).\n            ", "\n              Syntax:\n            ", "Press CTRL+C to copy STRING group_replication_switch_to_single_primary_mode([str])", "\n              Arguments:\n", "\n\nstr: A string containing\n                  the UUID of a member of the group which should become\n                  the new single primary. Other members of the group\n                  become secondaries.\n\n", "\n              Return value:\n            ", "\n              A string containing the result of the operation, for\n              example whether it was successful or not.\n            ", "\n              Example:\n            ", "Press CTRL+C to copy SELECT group_replication_switch_to_single_primary_mode(member_uuid);", "\n              For more information, see\n              Section\u00a020.5.1.2, \u201cChanging the Group Mode\u201d\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/group-replication-functions-for-mode.html#function_group-replication-switch-to-single-primary-mode", "Feature": ["group_replication_switch_to_single_primary_mode()"], "Examples": ["SELECT group_replication_switch_to_single_primary_mode(member_uuid);"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "asynchronous_connection_failover_delete_managed()", "Description": ["\nasynchronous_connection_failover_delete_managed()\n", "\n            Remove an entire managed group from the source list for a\n            replication channel. When you use this function, all the\n            replication source servers defined in the managed group are\n            removed from the channel's source list.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_delete_managed(channel, managed_name)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server was\n                part of the source list.\n              \nmanaged_name: The identifier\n                for the managed group that the server is a part of. For\n                the GroupReplication managed service,\n                the identifier is the value of the\n                group_replication_group_name\n                system variable.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa');\n+-----------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa') |\n+-----------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully deleted.                                          |\n+-----------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-managed", "Feature": ["asynchronous_connection_failover_delete_managed()"], "Examples": ["SELECT asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa');\n+-----------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa') |\n+-----------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully deleted.                                          |\n+-----------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "GTID_SUBSET()", "Description": ["\nGTID_SUBSET(set1,set2)\n", "\n            Given two sets of global transaction identifiers\n            set1 and\n            set2, returns true if all GTIDs\n            in set1 are also in\n            set2. Returns\n            NULL if set1\n            or set2 is\n            NULL. Returns false otherwise.\n          ", "\n            The GTID sets used with this function are represented as\n            strings, as shown in the following examples:\n          ", "Press CTRL+C to copy mysql> SELECT GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23',\n    ->     '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57')\\G\n*************************** 1. row ***************************\nGTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23',\n    '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57'): 1\n1 row in set (0.00 sec)\n\nmysql> SELECT GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23-25',\n    ->     '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57')\\G\n*************************** 1. row ***************************\nGTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23-25',\n    '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57'): 1\n1 row in set (0.00 sec)\n\nmysql> SELECT GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25',\n    ->     '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57')\\G\n*************************** 1. row ***************************\nGTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25',\n    '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57'): 0\n1 row in set (0.00 sec)"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html#function_gtid-subset", "Feature": ["GTID_SUBSET(set1,set2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Replication Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "GTID_SUBTRACT()", "Description": ["\nGTID_SUBTRACT(set1,set2)\n", "\n            Given two sets of global transaction identifiers\n            set1 and\n            set2, returns only those GTIDs\n            from set1 that are not in\n            set2. Returns\n            NULL if set1\n            or set2 is\n            NULL.\n          ", "\n            All GTID sets used with this function are represented as\n            strings and must be quoted, as shown in these examples:\n          ", "Press CTRL+C to copy mysql> SELECT GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',\n    ->     '3E11FA47-71CA-11E1-9E33-C80AA9429562:21')\\G\n*************************** 1. row ***************************\nGTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',\n    '3E11FA47-71CA-11E1-9E33-C80AA9429562:21'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:22-57\n1 row in set (0.00 sec)\n\nmysql> SELECT GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',\n    ->     '3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25')\\G\n*************************** 1. row ***************************\nGTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',\n    '3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:26-57\n1 row in set (0.00 sec)\n\nmysql> SELECT GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',\n    ->     '3E11FA47-71CA-11E1-9E33-C80AA9429562:23-24')\\G\n*************************** 1. row ***************************\nGTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',\n    '3E11FA47-71CA-11E1-9E33-C80AA9429562:23-24'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:21-22:25-57\n1 row in set (0.01 sec)", "\n            Subtracting a GTID set from itself produces an empty set, as\n            shown here:\n          ", "Press CTRL+C to copy mysql> SELECT GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',\n    ->     '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57')\\G\n*************************** 1. row ***************************\nGTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',\n    '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57'): \n1 row in set (0.00 sec)"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html#function_gtid-subtract", "Feature": ["GTID_SUBTRACT(set1,set2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Replication Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "asynchronous_connection_failover_delete_source()", "Description": ["\nasynchronous_connection_failover_delete_source()\n", "\n            Remove configuration information for a replication source\n            server from the source list for a replication channel.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_delete_source(channel, host, port, network_namespace)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server was\n                part of the source list.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '');\n+------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '')              |\n+------------------------------------------------------------------------------------------------+\n| Source configuration details successfully deleted.                                             |\n+------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-source", "Feature": ["asynchronous_connection_failover_delete_source()"], "Examples": ["SELECT asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '');\n+------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '')              |\n+------------------------------------------------------------------------------------------------+\n| Source configuration details successfully deleted.                                             |\n+------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "asynchronous_connection_failover_reset()", "Description": ["\nasynchronous_connection_failover_reset()\n", "\n            Remove all settings relating to the asynchronous connection\n            failover mechanism. The function clears the Performance\n            Schema tables\n            replication_asynchronous_connection_failover\n            and\n            replication_asynchronous_connection_failover_managed.\n          ", "\nasynchronous_connection_failover_reset()\n            can be used only on a server that is not currently part of a\n            group, and that does not have any replication channels\n            running. You can use this function to clean up a server that\n            is no longer being used in a managed group.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy STRING asynchronous_connection_failover_reset()", "\n            Arguments:\n          ", "\n            None.\n          ", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy mysql> SELECT asynchronous_connection_failover_reset();\n+-------------------------------------------------------------------------+\n| asynchronous_connection_failover_reset()                                |\n+-------------------------------------------------------------------------+\n| The UDF asynchronous_connection_failover_reset() executed successfully. |\n+-------------------------------------------------------------------------+\n1 row in set (0.00 sec)", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-reset", "Feature": ["asynchronous_connection_failover_reset()"], "Examples": ["mysql> SELECT asynchronous_connection_failover_reset();\n+-------------------------------------------------------------------------+\n| asynchronous_connection_failover_reset()                                |\n+-------------------------------------------------------------------------+\n| The UDF asynchronous_connection_failover_reset() executed successfully. |\n+-------------------------------------------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions and Operators", "Replication Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MASTER_POS_WAIT()", "Description": ["\nMASTER_POS_WAIT(log_name,log_pos[,timeout][,channel])\n", "\n            This function is for control of source-replica\n            synchronization. It blocks until the replica has read and\n            applied all updates up to the specified position in the\n            source's binary log. From MySQL 8.0.26,\n            MASTER_POS_WAIT() is\n            deprecated and the alias\n            SOURCE_POS_WAIT() should be\n            used instead. In releases before MySQL 8.0.26, use\n            MASTER_POS_WAIT().\n          ", "\n            The return value is the number of log events the replica had\n            to wait for to advance to the specified position. The\n            function returns NULL if the replication\n            SQL thread is not started, the replica's source information\n            is not initialized, the arguments are incorrect, or an error\n            occurs. It returns -1 if the timeout has\n            been exceeded. If the replication SQL thread stops while\n            MASTER_POS_WAIT() is waiting,\n            the function returns NULL. If the replica\n            is past the specified position, the function returns\n            immediately.\n          ", "\n            If the binary log file position has been marked as invalid,\n            the function waits until a valid file position is known. The\n            binary log file position can be marked as invalid when the\n            CHANGE REPLICATION SOURCE TO\n            option GTID_ONLY is set for the\n            replication channel, and the server is restarted or\n            replication is stopped. The file position becomes valid\n            after a transaction is successfully applied past the given\n            file position. If the applier does not reach the stated\n            position, the function waits until the timeout. Use a\n            SHOW REPLICA STATUS statement\n            to check if the binary log file position has been marked as\n            invalid.\n          ", "\n            On a multithreaded replica, the function waits until expiry\n            of the limit set by the\n            replica_checkpoint_group,\n            slave_checkpoint_group,\n            replica_checkpoint_period\n            or slave_checkpoint_period\n            system variable, when the checkpoint operation is called to\n            update the status of the replica. Depending on the setting\n            for the system variables, the function might therefore\n            return some time after the specified position was reached.\n          ", "\n            If binary log transaction compression is in use and the\n            transaction payload at the specified position is compressed\n            (as a Transaction_payload_event), the\n            function waits until the whole transaction has been read and\n            applied, and the positions have updated.\n          ", "\n            If a timeout value is specified,\n            MASTER_POS_WAIT() stops\n            waiting when timeout seconds have\n            elapsed. timeout must be greater\n            than or equal to 0. (When the server is running in strict\n            SQL mode, a negative timeout\n            value is immediately rejected with\n            ER_WRONG_ARGUMENTS;\n            otherwise the function returns NULL,\n            and raises a warning.)\n          ", "\n            The optional channel value\n            enables you to name which replication channel the function\n            applies to. See Section\u00a019.2.2, \u201cReplication Channels\u201d for\n            more information.\n          ", "\n            This function is unsafe for statement-based replication. A\n            warning is logged if you use this function when\n            binlog_format is set to\n            STATEMENT.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/replication-functions-synchronization.html#function_master-pos-wait", "Feature": ["MASTER_POS_WAIT(log_name,log_pos[,timeout][,channel])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Replication Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SOURCE_POS_WAIT()", "Description": ["\nSOURCE_POS_WAIT(log_name,log_pos[,timeout][,channel])\n", "\n            This function is for control of source-replica\n            synchronization. It blocks until the replica has read and\n            applied all updates up to the specified position in the\n            source's binary log. From MySQL 8.0.26, use\n            SOURCE_POS_WAIT() in place of\n            MASTER_POS_WAIT(), which is\n            deprecated from that release. In releases before MySQL\n            8.0.26, use\n            MASTER_POS_WAIT().\n          ", "\n            The return value is the number of log events the replica had\n            to wait for to advance to the specified position. The\n            function returns NULL if the replication\n            SQL thread is not started, the replica's source information\n            is not initialized, the arguments are incorrect, or an error\n            occurs. It returns -1 if the timeout has\n            been exceeded. If the replication SQL thread stops while\n            SOURCE_POS_WAIT() is waiting,\n            the function returns NULL. If the replica\n            is past the specified position, the function returns\n            immediately.\n          ", "\n            If the binary log file position has been marked as invalid,\n            the function waits until a valid file position is known. The\n            binary log file position can be marked as invalid when the\n            CHANGE REPLICATION SOURCE TO\n            option GTID_ONLY is set for the\n            replication channel, and the server is restarted or\n            replication is stopped. The file position becomes valid\n            after a transaction is successfully applied past the given\n            file position. If the applier does not reach the stated\n            position, the function waits until the timeout. Use a\n            SHOW REPLICA STATUS\n            statement to check if the binary log file position has been\n            marked as invalid.\n          ", "\n            On a multithreaded replica, the function waits until expiry\n            of the limit set by the\n            replica_checkpoint_group or\n            replica_checkpoint_period\n            system variable, when the checkpoint operation is called to\n            update the status of the replica. Depending on the setting\n            for the system variables, the function might therefore\n            return some time after the specified position was reached.\n          ", "\n            If binary log transaction compression is in use and the\n            transaction payload at the specified position is compressed\n            (as a Transaction_payload_event), the\n            function waits until the whole transaction has been read and\n            applied, and the positions have updated.\n          ", "\n            If a timeout value is specified,\n            SOURCE_POS_WAIT() stops\n            waiting when timeout seconds have\n            elapsed. timeout must be greater\n            than or equal to 0. (In strict SQL mode, a negative\n            timeout value is immediately\n            rejected with\n            ER_WRONG_ARGUMENTS;\n            otherwise the function returns NULL, and\n            raises a warning.)\n          ", "\n            The optional channel value\n            enables you to name which replication channel the function\n            applies to. See Section\u00a019.2.2, \u201cReplication Channels\u201d for\n            more information.\n          ", "\n            This function is unsafe for statement-based replication. A\n            warning is logged if you use this function when\n            binlog_format is set to\n            STATEMENT.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/replication-functions-synchronization.html#function_source-pos-wait", "Feature": ["SOURCE_POS_WAIT(log_name,log_pos[,timeout][,channel])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Replication Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "WAIT_FOR_EXECUTED_GTID_SET()", "Description": ["\nWAIT_FOR_EXECUTED_GTID_SET(gtid_set[,\n            timeout])\n", "\n            Wait until the server has applied all of the transactions\n            whose global transaction identifiers are contained in\n            gtid_set; that is, until the\n            condition\n            GTID_SUBSET(gtid_subset,\n            @@GLOBAL.gtid_executed) holds. See\n            Section\u00a019.1.3.1, \u201cGTID Format and Storage\u201d for a\n            definition of GTID sets.\n          ", "\n            If a timeout is specified, and\n            timeout seconds elapse before all\n            of the transactions in the GTID set have been applied, the\n            function stops waiting. timeout\n            is optional, and the default timeout is 0 seconds, in which\n            case the function always waits until all of the transactions\n            in the GTID set have been applied.\n            timeout must be greater than or\n            equal to 0; when running in strict SQL mode, a negative\n            timeout value is immediately\n            rejected with an error\n            (ER_WRONG_ARGUMENTS);\n            otherwise the function returns NULL, and\n            raises a warning.\n          ", "\nWAIT_FOR_EXECUTED_GTID_SET() monitors all\n            the GTIDs that are applied on the server, including\n            transactions that arrive from all replication channels and\n            user clients. It does not take into account whether\n            replication channels have been started or stopped.\n          ", "\n            For more information, see\n            Section\u00a019.1.3, \u201cReplication with Global Transaction Identifiers\u201d.\n          ", "\n            GTID sets used with this function are represented as strings\n            and so must be quoted as shown in the following example:\n          ", "Press CTRL+C to copy mysql> SELECT WAIT_FOR_EXECUTED_GTID_SET('3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5');\n        -> 0", "\n            For a syntax description for GTID sets, see\n            Section\u00a019.1.3.1, \u201cGTID Format and Storage\u201d.\n          ", "\n            For WAIT_FOR_EXECUTED_GTID_SET(), the\n            return value is the state of the query, where 0 represents\n            success, and 1 represents timeout. Any other failures\n            generate an error.\n          ", "\ngtid_mode cannot be changed\n            to OFF while any client is using this function to wait for\n            GTIDs to be applied.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html#function_wait-for-executed-gtid-set", "Feature": ["WAIT_FOR_EXECUTED_GTID_SET(gtid_set[,\n            timeout])"], "Examples": ["mysql> SELECT WAIT_FOR_EXECUTED_GTID_SET('3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5');\n        -> 0"], "Category": ["Built-In Functions and Operators", "Replication Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS()", "Description": ["\nWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(gtid_set[,\n            timeout][,channel])\n", "\nWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() is\n            deprecated. Use\n            WAIT_FOR_EXECUTED_GTID_SET() instead,\n            which works regardless of the replication channel or user\n            client through which the specified transactions arrive on\n            the server.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html#function_wait-until-sql-thread-after-gtids", "Feature": ["WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(gtid_set[,\n            timeout][,channel])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Replication Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "asynchronous_connection_failover_add_managed()", "Description": ["\nasynchronous_connection_failover_add_managed()\n", "\n            Add configuration information for a replication source\n            server that is part of a managed group (a Group Replication\n            group member) to the source list for a replication channel.\n            You only need to add one group member. The replica\n            automatically adds the rest from the current group\n            membership, then keeps the source list updated in line with\n            membership change.\n          ", "\n            Syntax:\n          ", "Press CTRL+C to copy asynchronous_connection_failover_add_managed(channel, managed_type, managed_name, host, port, network_namespace, primary_weight, secondary_weight)", "\n            Arguments:\n", "\n\nchannel: The replication\n                channel for which this replication source server is part\n                of the source list.\n              \nmanaged_type: The type of\n                managed service that the asynchronous connection\n                failover mechanism must provide for this server. The\n                only value currently accepted is\n                GroupReplication.\n              \nmanaged_name: The identifier\n                for the managed group that the server is a part of. For\n                the GroupReplication managed service,\n                the identifier is the value of the\n                group_replication_group_name\n                system variable.\n              \nhost: The host name for this\n                replication source server.\n              \nport: The port number for\n                this replication source server.\n              \nnetwork_namespace: The\n                network namespace for this replication source server.\n                Specify an empty string, as this parameter is reserved\n                for future use.\n              \nprimary_weight: The priority\n                of this replication source server in the replication\n                channel's source list when it is acting as the primary\n                for the managed group. The weight is from 1 to 100, with\n                100 being the highest. For the primary, 80 is a suitable\n                weight. The asynchronous connection failover mechanism\n                activates if the currently connected source is not the\n                highest weighted in the group. Assuming that you set up\n                the managed group to give a higher weight to a primary\n                and a lower weight to a secondary, when the primary\n                changes, its weight increases, and the replica changes\n                over the connection to it.\n              \nsecondary_weight: The\n                priority of this replication source server in the\n                replication channel's source list when it is acting as a\n                secondary in the managed group. The weight is from 1 to\n                100, with 100 being the highest. For a secondary, 60 is\n                a suitable weight.\n\n", "\n            Return value:\n          ", "\n            A string containing the result of the operation, for example\n            whether it was successful or not.\n          ", "\n            Example:\n          ", "Press CTRL+C to copy SELECT asynchronous_connection_failover_add_managed('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60);\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60) |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully inserted.                                                                                        |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+", "\n            For more information, see\n            Section\u00a019.4.9, \u201cSwitching Sources and Replicas with Asynchronous Connection Failover\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-managed", "Feature": ["asynchronous_connection_failover_add_managed()"], "Examples": ["SELECT asynchronous_connection_failover_add_managed('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60);\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60) |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully inserted.                                                                                        |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Replication Functions", "Loadable Functions"]}
