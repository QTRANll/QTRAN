{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "JSON_ARRAYAGG()", "Description": ["\nJSON_ARRAYAGG(col_or_expr)\n            [over_clause]\n", "\n            Aggregates a result set as a single\n            JSON array whose elements\n            consist of the rows. The order of elements in this array is\n            undefined. The function acts on a column or an expression\n            that evaluates to a single value. Returns\n            NULL if the result contains no rows, or\n            in the event of an error. If\n            col_or_expr is\n            NULL, the function returns an array of\n            JSON [null] elements.\n          ", "\n            As of MySQL 8.0.14, this function executes as a window\n            function if over_clause is\n            present. over_clause is as\n            described in Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_ARRAYAGG(attribute) AS attributes\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------+\n| o_id | attributes          |\n+------+---------------------+\n|    2 | [\"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\"]  |\n+------+---------------------+\n2 rows in set (0.00 sec)"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_json-arrayagg", "Feature": ["JSON_ARRAYAGG(col_or_expr)\n            [over_clause]"], "Examples": ["mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_ARRAYAGG(attribute) AS attributes\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------+\n| o_id | attributes          |\n+------+---------------------+\n|    2 | [\"color\", \"fabric\"] |\n|    3 | [\"color\", \"shape\"]  |\n+------+---------------------+\n2 rows in set (0.00 sec)"], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "AVG()", "Description": ["\nAVG([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the average value of\n            expr. The\n            DISTINCT option can be used to return the\n            average of the distinct values of\n            expr.\n          ", "\n            If there are no matching rows,\n            AVG() returns\n            NULL. The function also returns\n            NULL if expr\n            is NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, AVG(test_score)\n       FROM student\n       GROUP BY student_name;"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_avg", "Feature": ["AVG([DISTINCT]\n            expr)\n            [over_clause]"], "Examples": ["mysql> SELECT student_name, AVG(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "JSON_OBJECTAGG()", "Description": ["\nJSON_OBJECTAGG(key,\n            value)\n            [over_clause]\n", "\n            Takes two column names or expressions as arguments, the\n            first of these being used as a key and the second as a\n            value, and returns a JSON object containing key-value pairs.\n            Returns NULL if the result contains no\n            rows, or in the event of an error. An error occurs if any\n            key name is NULL or the number of\n            arguments is not equal to 2.\n          ", "\n            As of MySQL 8.0.14, this function executes as a window\n            function if over_clause is\n            present. over_clause is as\n            described in Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_OBJECTAGG(attribute, value)\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------------------------+\n| o_id | JSON_OBJECTAGG(attribute, value)      |\n+------+---------------------------------------+\n|    2 | {\"color\": \"red\", \"fabric\": \"silk\"}    |\n|    3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set (0.00 sec)", "Duplicate key handling.\u00a0\n              When the result of this function is normalized, values\n              having duplicate keys are discarded. In keeping with the\n              MySQL JSON data type\n              specification that does not permit duplicate keys, only\n              the last value encountered is used with that key in the\n              returned object (\u201clast duplicate key wins\u201d).\n              This means that the result of using this function on\n              columns from a SELECT can depend on the\n              order in which the rows are returned, which is not\n              guaranteed.\n            ", "\n            When used as a window function, if there are duplicate keys\n            within a frame, only the last value for the key is present\n            in the result. The value for the key from the last row in\n            the frame is deterministic if the ORDER\n            BY specification guarantees that the values have a\n            specific order. If not, the resulting value of the key is\n            nondeterministic.\n          ", "\n            Consider the following:\n          ", "Press CTRL+C to copy mysql> CREATE TABLE t(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected (0.33 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected (0.10 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    4 |\n| key  |    5 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5}           |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t;\nQuery OK, 3 rows affected (0.08 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 5), ('key', 4);\nQuery OK, 3 rows affected (0.06 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    5 |\n| key  |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 4}           |\n+----------------------+\n1 row in set (0.00 sec)", "\n            The key chosen from the last query is nondeterministic. If\n            the query does not use GROUP BY (which\n            usually imposes its own ordering regardless) and you prefer\n            a particular key ordering, you can invoke\n            JSON_OBJECTAGG() as a window function by\n            including an OVER clause with an\n            ORDER BY specification to impose a\n            particular order on frame rows. The following examples show\n            what happens with and without ORDER BY\n            for a few different frame specifications.\n          ", "\n            Without ORDER BY, the frame is the entire\n            partition:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER () AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n+-------------+", "\n            With ORDER BY, where the frame is the\n            default of RANGE BETWEEN UNBOUNDED PRECEDING AND\n            CURRENT ROW (in both ascending and descending\n            order):\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n| {\"key\": 4}  |\n| {\"key\": 5}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 4}  |\n| {\"key\": 3}  |\n+-------------+", "\n            With ORDER BY and an explicit frame of\n            the entire partition:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n        AS json_object\n       FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n+-------------+", "\n            To return a particular key value (such as the smallest or\n            largest), include a LIMIT clause in the\n            appropriate query. For example:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n+-------------+", "\n            See Normalization, Merging, and Autowrapping of JSON Values, for additional\n            information and examples.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_json-objectagg", "Feature": ["JSON_OBJECTAGG(key,\n            value)\n            [over_clause]"], "Examples": ["mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_OBJECTAGG(attribute, value)\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------------------------+\n| o_id | JSON_OBJECTAGG(attribute, value)      |\n+------+---------------------------------------+\n|    2 | {\"color\": \"red\", \"fabric\": \"silk\"}    |\n|    3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set (0.00 sec)", "mysql> CREATE TABLE t(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected (0.33 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected (0.10 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    4 |\n| key  |    5 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5}           |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t;\nQuery OK, 3 rows affected (0.08 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 5), ('key', 4);\nQuery OK, 3 rows affected (0.06 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    5 |\n| key  |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 4}           |\n+----------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER () AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n+-------------+", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n| {\"key\": 4}  |\n| {\"key\": 5}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 4}  |\n| {\"key\": 3}  |\n+-------------+", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n        AS json_object\n       FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n+-------------+", "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n+-------------+"], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "BIT_AND()", "Description": ["\nBIT_AND(expr)\n            [over_clause]\n", "\n            Returns the bitwise AND of all bits in\n            expr.\n          ", "\n            The result type depends on whether the function argument\n            values are evaluated as binary strings or numbers:\n", "\n\n                Binary-string evaluation occurs when the argument values\n                have a binary string type, and the argument is not a\n                hexadecimal literal, bit literal, or\n                NULL literal. Numeric evaluation\n                occurs otherwise, with argument value conversion to\n                unsigned 64-bit integers as necessary.\n              \n                Binary-string evaluation produces a binary string of the\n                same length as the argument values. If argument values\n                have unequal lengths, an\n                ER_INVALID_BITWISE_OPERANDS_SIZE\n                error occurs. If the argument size exceeds 511 bytes, an\n                ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE\n                error occurs. Numeric evaluation produces an unsigned\n                64-bit integer.\n\n", "\n            If there are no matching rows,\n            BIT_AND() returns a neutral\n            value (all bits set to 1) having the same length as the\n            argument values.\n          ", "\nNULL values do not affect the result\n            unless all values are NULL. In that case,\n            the result is a neutral value having the same length as the\n            argument values.\n          ", "\n            For more information discussion about argument evaluation\n            and result types, see the introductory discussion in\n            Section\u00a014.12, \u201cBit Functions and Operators\u201d.\n          ", "\n            If BIT_AND() is invoked from\n            within the mysql client, binary string\n            results display using hexadecimal notation, depending on the\n            value of the --binary-as-hex.\n            For more information about that option, see\n            Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            As of MySQL 8.0.12, this function executes as a window\n            function if over_clause is\n            present. over_clause is as\n            described in Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_bit-and", "Feature": ["BIT_AND(expr)\n            [over_clause]"], "Examples": [], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MAX()", "Description": ["\nMAX([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the maximum value of\n            expr.\n            MAX() may take a string\n            argument; in such cases, it returns the maximum string\n            value. See Section\u00a010.3.1, \u201cHow MySQL Uses Indexes\u201d. The\n            DISTINCT keyword can be used to find the\n            maximum of the distinct values of\n            expr, however, this produces the\n            same result as omitting DISTINCT.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            MAX() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            For MAX(), MySQL currently\n            compares ENUM and\n            SET columns by their string\n            value rather than by the string's relative position in the\n            set. This differs from how ORDER BY\n            compares them.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_max", "Feature": ["MAX([DISTINCT]\n            expr)\n            [over_clause]"], "Examples": ["mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MIN()", "Description": ["\nMIN([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the minimum value of\n            expr.\n            MIN() may take a string\n            argument; in such cases, it returns the minimum string\n            value. See Section\u00a010.3.1, \u201cHow MySQL Uses Indexes\u201d. The\n            DISTINCT keyword can be used to find the\n            minimum of the distinct values of\n            expr, however, this produces the\n            same result as omitting DISTINCT.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            MIN() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          ", "Press CTRL+C to copy mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            For MIN(), MySQL currently\n            compares ENUM and\n            SET columns by their string\n            value rather than by the string's relative position in the\n            set. This differs from how ORDER BY\n            compares them.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_min", "Feature": ["MIN([DISTINCT]\n            expr)\n            [over_clause]"], "Examples": ["mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n       FROM student\n       GROUP BY student_name;"], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "BIT_OR()", "Description": ["\nBIT_OR(expr)\n            [over_clause]\n", "\n            Returns the bitwise OR of all bits in\n            expr.\n          ", "\n            The result type depends on whether the function argument\n            values are evaluated as binary strings or numbers:\n", "\n\n                Binary-string evaluation occurs when the argument values\n                have a binary string type, and the argument is not a\n                hexadecimal literal, bit literal, or\n                NULL literal. Numeric evaluation\n                occurs otherwise, with argument value conversion to\n                unsigned 64-bit integers as necessary.\n              \n                Binary-string evaluation produces a binary string of the\n                same length as the argument values. If argument values\n                have unequal lengths, an\n                ER_INVALID_BITWISE_OPERANDS_SIZE\n                error occurs. If the argument size exceeds 511 bytes, an\n                ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE\n                error occurs. Numeric evaluation produces an unsigned\n                64-bit integer.\n\n", "\n            If there are no matching rows,\n            BIT_OR() returns a neutral\n            value (all bits set to 0) having the same length as the\n            argument values.\n          ", "\nNULL values do not affect the result\n            unless all values are NULL. In that case,\n            the result is a neutral value having the same length as the\n            argument values.\n          ", "\n            For more information discussion about argument evaluation\n            and result types, see the introductory discussion in\n            Section\u00a014.12, \u201cBit Functions and Operators\u201d.\n          ", "\n            If BIT_OR() is invoked from\n            within the mysql client, binary string\n            results display using hexadecimal notation, depending on the\n            value of the --binary-as-hex.\n            For more information about that option, see\n            Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            As of MySQL 8.0.12, this function executes as a window\n            function if over_clause is\n            present. over_clause is as\n            described in Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_bit-or", "Feature": ["BIT_OR(expr)\n            [over_clause]"], "Examples": [], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "BIT_XOR()", "Description": ["\nBIT_XOR(expr)\n            [over_clause]\n", "\n            Returns the bitwise XOR of all\n            bits in expr.\n          ", "\n            The result type depends on whether the function argument\n            values are evaluated as binary strings or numbers:\n", "\n\n                Binary-string evaluation occurs when the argument values\n                have a binary string type, and the argument is not a\n                hexadecimal literal, bit literal, or\n                NULL literal. Numeric evaluation\n                occurs otherwise, with argument value conversion to\n                unsigned 64-bit integers as necessary.\n              \n                Binary-string evaluation produces a binary string of the\n                same length as the argument values. If argument values\n                have unequal lengths, an\n                ER_INVALID_BITWISE_OPERANDS_SIZE\n                error occurs. If the argument size exceeds 511 bytes, an\n                ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE\n                error occurs. Numeric evaluation produces an unsigned\n                64-bit integer.\n\n", "\n            If there are no matching rows,\n            BIT_XOR() returns a neutral\n            value (all bits set to 0) having the same length as the\n            argument values.\n          ", "\nNULL values do not affect the result\n            unless all values are NULL. In that case,\n            the result is a neutral value having the same length as the\n            argument values.\n          ", "\n            For more information discussion about argument evaluation\n            and result types, see the introductory discussion in\n            Section\u00a014.12, \u201cBit Functions and Operators\u201d.\n          ", "\n            If BIT_XOR() is invoked from\n            within the mysql client, binary string\n            results display using hexadecimal notation, depending on the\n            value of the --binary-as-hex.\n            For more information about that option, see\n            Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            As of MySQL 8.0.12, this function executes as a window\n            function if over_clause is\n            present. over_clause is as\n            described in Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_bit-xor", "Feature": ["BIT_XOR(expr)\n            [over_clause]"], "Examples": [], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "STD()", "Description": ["\nSTD(expr)\n            [over_clause]\n", "\n            Returns the population standard deviation of\n            expr.\n            STD() is a synonym for the\n            standard SQL function\n            STDDEV_POP(), provided as a\n            MySQL extension.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STD() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_std", "Feature": ["STD(expr)\n            [over_clause]"], "Examples": [], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "STDDEV()", "Description": ["\nSTDDEV(expr)\n            [over_clause]\n", "\n            Returns the population standard deviation of\n            expr.\n            STDDEV() is a synonym for the\n            standard SQL function\n            STDDEV_POP(), provided for\n            compatibility with Oracle.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STDDEV() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_stddev", "Feature": ["STDDEV(expr)\n            [over_clause]"], "Examples": [], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "STDDEV_POP()", "Description": ["\nSTDDEV_POP(expr)\n            [over_clause]\n", "\n            Returns the population standard deviation of\n            expr (the square root of\n            VAR_POP()). You can also use\n            STD() or\n            STDDEV(), which are\n            equivalent but not standard SQL.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STDDEV_POP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_stddev-pop", "Feature": ["STDDEV_POP(expr)\n            [over_clause]"], "Examples": [], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "STDDEV_SAMP()", "Description": ["\nSTDDEV_SAMP(expr)\n            [over_clause]\n", "\n            Returns the sample standard deviation of\n            expr (the square root of\n            VAR_SAMP().\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            STDDEV_SAMP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_stddev-samp", "Feature": ["STDDEV_SAMP(expr)\n            [over_clause]"], "Examples": [], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SUM()", "Description": ["\nSUM([DISTINCT]\n            expr)\n            [over_clause]\n", "\n            Returns the sum of expr. If the\n            return set has no rows, SUM()\n            returns NULL. The\n            DISTINCT keyword can be used to sum only\n            the distinct values of expr.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            SUM() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d; it cannot be used\n            with DISTINCT.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_sum", "Feature": ["SUM([DISTINCT]\n            expr)\n            [over_clause]"], "Examples": [], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "VAR_POP()", "Description": ["\nVAR_POP(expr)\n            [over_clause]\n", "\n            Returns the population standard variance of\n            expr. It considers rows as the\n            whole population, not as a sample, so it has the number of\n            rows as the denominator. You can also use\n            VARIANCE(), which is\n            equivalent but is not standard SQL.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            VAR_POP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_var-pop", "Feature": ["VAR_POP(expr)\n            [over_clause]"], "Examples": [], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "VAR_SAMP()", "Description": ["\nVAR_SAMP(expr)\n            [over_clause]\n", "\n            Returns the sample variance of\n            expr. That is, the denominator is\n            the number of rows minus one.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            VAR_SAMP() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_var-samp", "Feature": ["VAR_SAMP(expr)\n            [over_clause]"], "Examples": [], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "VARIANCE()", "Description": ["\nVARIANCE(expr)\n            [over_clause]\n", "\n            Returns the population standard variance of\n            expr.\n            VARIANCE() is a synonym for\n            the standard SQL function\n            VAR_POP(), provided as a\n            MySQL extension.\n          ", "\n            If there are no matching rows, or if\n            expr is NULL,\n            VARIANCE() returns\n            NULL.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_variance", "Feature": ["VARIANCE(expr)\n            [over_clause]"], "Examples": [], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "COUNT()", "Description": ["\nCOUNT(expr)\n            [over_clause]\n", "\n            Returns a count of the number of non-NULL\n            values of expr in the rows\n            retrieved by a SELECT\n            statement. The result is a\n            BIGINT value.\n          ", "\n            If there are no matching rows,\n            COUNT() returns\n            0. COUNT(NULL) returns\n            0.\n          ", "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "Press CTRL+C to copy mysql> SELECT student.student_name,COUNT(*)\n       FROM student,course\n       WHERE student.student_id=course.student_id\n       GROUP BY student_name;", "\nCOUNT(*) is somewhat\n            different in that it returns a count of the number of rows\n            retrieved, whether or not they contain\n            NULL values.\n          ", "\n            For transactional storage engines such as\n            InnoDB, storing an exact row count is\n            problematic. Multiple transactions may be occurring at the\n            same time, each of which may affect the count.\n          ", "\nInnoDB does not keep an internal count of\n            rows in a table because concurrent transactions might\n            \u201csee\u201d different numbers of rows at the same\n            time. Consequently, SELECT COUNT(*)\n            statements only count rows visible to the current\n            transaction.\n          ", "\n            As of MySQL 8.0.13, SELECT COUNT(*) FROM\n            tbl_name query\n            performance for InnoDB tables is\n            optimized for single-threaded workloads if there are no\n            extra clauses such as WHERE or\n            GROUP BY.\n          ", "\nInnoDB processes SELECT\n            COUNT(*) statements by traversing the smallest\n            available secondary index unless an index or optimizer hint\n            directs the optimizer to use a different index. If a\n            secondary index is not present, InnoDB\n            processes SELECT COUNT(*) statements by\n            scanning the clustered index.\n          ", "\n            Processing SELECT COUNT(*) statements\n            takes some time if index records are not entirely in the\n            buffer pool. For a faster count, create a counter table and\n            let your application update it according to the inserts and\n            deletes it does. However, this method may not scale well in\n            situations where thousands of concurrent transactions are\n            initiating updates to the same counter table. If an\n            approximate row count is sufficient, use\n            SHOW TABLE STATUS.\n          ", "\nInnoDB handles SELECT\n            COUNT(*) and SELECT COUNT(1)\n            operations in the same way. There is no performance\n            difference.\n          ", "\n            For MyISAM tables,\n            COUNT(*) is optimized to\n            return very quickly if the\n            SELECT retrieves from one\n            table, no other columns are retrieved, and there is no\n            WHERE clause. For example:\n          ", "Press CTRL+C to copy mysql> SELECT COUNT(*) FROM student;", "\n            This optimization only applies to MyISAM\n            tables, because an exact row count is stored for this\n            storage engine and can be accessed very quickly.\n            COUNT(1) is only subject to the same\n            optimization if the first column is defined as NOT\n            NULL.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_count", "Feature": ["COUNT(expr)\n            [over_clause]"], "Examples": ["mysql> SELECT student.student_name,COUNT(*)\n       FROM student,course\n       WHERE student.student_id=course.student_id\n       GROUP BY student_name;", "mysql> SELECT COUNT(*) FROM student;"], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "COUNT(DISTINCT)", "Description": ["\nCOUNT(DISTINCT\n            expr,[expr...])\n", "\n            Returns a count of the number of rows with different\n            non-NULL expr\n            values.\n          ", "\n            If there are no matching rows,\n            COUNT(DISTINCT) returns\n            0.\n          ", "Press CTRL+C to copy mysql> SELECT COUNT(DISTINCT results) FROM student;", "\n            In MySQL, you can obtain the number of distinct expression\n            combinations that do not contain NULL by\n            giving a list of expressions. In standard SQL, you would\n            have to do a concatenation of all expressions inside\n            COUNT(DISTINCT ...).\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_count-distinct", "Feature": ["COUNT(DISTINCT\n            expr,[expr...])"], "Examples": ["mysql> SELECT COUNT(DISTINCT results) FROM student;"], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "GROUP_CONCAT()", "Description": ["\nGROUP_CONCAT(expr)\n", "\n            This function returns a string result with the concatenated\n            non-NULL values from a group. It returns\n            NULL if there are no\n            non-NULL values. The full syntax is as\n            follows:\n          ", "Press CTRL+C to copy GROUP_CONCAT([DISTINCT] expr [,expr ...]\n             [ORDER BY {unsigned_integer | col_name | expr}\n                 [ASC | DESC] [,col_name ...]]\n             [SEPARATOR str_val])", "Press CTRL+C to copy mysql> SELECT student_name,\n         GROUP_CONCAT(test_score)\n       FROM student\n       GROUP BY student_name;", "\n            Or:\n          ", "Press CTRL+C to copy mysql> SELECT student_name,\n         GROUP_CONCAT(DISTINCT test_score\n                      ORDER BY test_score DESC SEPARATOR ' ')\n       FROM student\n       GROUP BY student_name;", "\n            In MySQL, you can get the concatenated values of expression\n            combinations. To eliminate duplicate values, use the\n            DISTINCT clause. To sort values in the\n            result, use the ORDER BY clause. To sort\n            in reverse order, add the DESC\n            (descending) keyword to the name of the column you are\n            sorting by in the ORDER BY clause. The\n            default is ascending order; this may be specified explicitly\n            using the ASC keyword. The default\n            separator between values in a group is comma\n            (,). To specify a separator explicitly,\n            use SEPARATOR followed by the string\n            literal value that should be inserted between group values.\n            To eliminate the separator altogether, specify\n            SEPARATOR ''.\n          ", "\n            The result is truncated to the maximum length that is given\n            by the group_concat_max_len\n            system variable, which has a default value of 1024. The\n            value can be set higher, although the effective maximum\n            length of the return value is constrained by the value of\n            max_allowed_packet. The\n            syntax to change the value of\n            group_concat_max_len at\n            runtime is as follows, where val\n            is an unsigned integer:\n          ", "Press CTRL+C to copy SET [GLOBAL | SESSION] group_concat_max_len = val;", "\n            The return value is a nonbinary or binary string, depending\n            on whether the arguments are nonbinary or binary strings.\n            The result type is TEXT or\n            BLOB unless\n            group_concat_max_len is\n            less than or equal to 512, in which case the result type is\n            VARCHAR or\n            VARBINARY.\n          ", "\n            If GROUP_CONCAT() is invoked\n            from within the mysql client, binary\n            string results display using hexadecimal notation, depending\n            on the value of the\n            --binary-as-hex. For more\n            information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n          ", "\n            See also CONCAT() and\n            CONCAT_WS():\n            Section\u00a014.8, \u201cString Functions and Operators\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_group-concat", "Feature": ["GROUP_CONCAT(expr)"], "Examples": ["mysql> SELECT student_name,\n         GROUP_CONCAT(test_score)\n       FROM student\n       GROUP BY student_name;", "mysql> SELECT student_name,\n         GROUP_CONCAT(DISTINCT test_score\n                      ORDER BY test_score DESC SEPARATOR ' ')\n       FROM student\n       GROUP BY student_name;", "SET [GLOBAL | SESSION] group_concat_max_len = val;"], "Category": ["Built-In Functions and Operators", "Aggregate Functions"]}
