{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "HEX()", "Description": ["\nHEX(str),\n          HEX(N)\n", "\n          For a string argument str,\n          HEX() returns a hexadecimal\n          string representation of str where\n          each byte of each character in str\n          is converted to two hexadecimal digits. (Multibyte characters\n          therefore become more than two digits.) The inverse of this\n          operation is performed by the\n          UNHEX() function.\n        ", "\n          For a numeric argument N,\n          HEX() returns a hexadecimal\n          string representation of the value of\n          N treated as a longlong\n          (BIGINT) number. This is\n          equivalent to\n          CONV(N,10,16).\n          The inverse of this operation is performed by\n          CONV(HEX(N),16,10).\n        ", "\n          For a NULL argument, this function returns\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT X'616263', HEX('abc'), UNHEX(HEX('abc'));\n        -> 'abc', 616263, 'abc'\nmysql> SELECT HEX(255), CONV(HEX(255),16,10);\n        -> 'FF', 255"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex", "Feature": ["HEX(str)", "HEX(N)"], "Examples": ["mysql> SELECT X'616263', HEX('abc'), UNHEX(HEX('abc'));\n        -> 'abc', 616263, 'abc'\nmysql> SELECT HEX(255), CONV(HEX(255),16,10);\n        -> 'FF', 255"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "INSERT()", "Description": ["\nINSERT(str,pos,len,newstr)\n", "\n          Returns the string str, with the\n          substring beginning at position pos\n          and len characters long replaced by\n          the string newstr. Returns the\n          original string if pos is not\n          within the length of the string. Replaces the rest of the\n          string from position pos if\n          len is not within the length of the\n          rest of the string. Returns NULL if any\n          argument is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT INSERT('Quadratic', 3, 4, 'What');\n        -> 'QuWhattic'\nmysql> SELECT INSERT('Quadratic', -1, 4, 'What');\n        -> 'Quadratic'\nmysql> SELECT INSERT('Quadratic', 3, 100, 'What');\n        -> 'QuWhat'", "\n          This function is multibyte safe.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_insert", "Feature": ["INSERT(str,pos,len,newstr)"], "Examples": ["mysql> SELECT INSERT('Quadratic', 3, 4, 'What');\n        -> 'QuWhattic'\nmysql> SELECT INSERT('Quadratic', -1, 4, 'What');\n        -> 'Quadratic'\nmysql> SELECT INSERT('Quadratic', 3, 100, 'What');\n        -> 'QuWhat'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "INSTR()", "Description": ["\nINSTR(str,substr)\n", "\n          Returns the position of the first occurrence of substring\n          substr in string\n          str. This is the same as the\n          two-argument form of LOCATE(),\n          except that the order of the arguments is reversed.\n        ", "Press CTRL+C to copy mysql> SELECT INSTR('foobarbar', 'bar');\n        -> 4\nmysql> SELECT INSTR('xbar', 'foobar');\n        -> 0", "\n          This function is multibyte safe, and is case-sensitive only if\n          at least one argument is a binary string. If either argument\n          is NULL, this functions returns\n          NULL.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_instr", "Feature": ["INSTR(str,substr)"], "Examples": ["mysql> SELECT INSTR('foobarbar', 'bar');\n        -> 4\nmysql> SELECT INSTR('xbar', 'foobar');\n        -> 0"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "BIN()", "Description": ["\nBIN(N)\n", "\n          Returns a string representation of the binary value of\n          N, where\n          N is a longlong\n          (BIGINT) number. This is\n          equivalent to\n          CONV(N,10,2).\n          Returns NULL if\n          N is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT BIN(12);\n        -> '1100'"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_bin", "Feature": ["BIN(N)"], "Examples": ["mysql> SELECT BIN(12);\n        -> '1100'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LCASE()", "Description": ["\nLCASE(str)\n", "\nLCASE() is a synonym for\n          LOWER().\n        ", "\nLCASE() used in a view is rewritten as\n          LOWER() when storing the view's\n          definition. (Bug #12844279)\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lcase", "Feature": ["LCASE(str)"], "Examples": [], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LEFT()", "Description": ["\nLEFT(str,len)\n", "\n          Returns the leftmost len characters\n          from the string str, or\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LEFT('foobarbar', 5);\n        -> 'fooba'", "\n          This function is multibyte safe.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_left", "Feature": ["LEFT(str,len)"], "Examples": ["mysql> SELECT LEFT('foobarbar', 5);\n        -> 'fooba'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LENGTH()", "Description": ["\nLENGTH(str)\n", "\n          Returns the length of the string\n          str, measured in bytes. A multibyte\n          character counts as multiple bytes. This means that for a\n          string containing five 2-byte characters,\n          LENGTH() returns\n          10, whereas\n          CHAR_LENGTH() returns\n          5. Returns NULL if\n          str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LENGTH('text');\n        -> 4", "\n\nNote\n\n\n            The Length() OpenGIS spatial function is\n            named ST_Length() in MySQL.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_length", "Feature": ["LENGTH(str)"], "Examples": ["mysql> SELECT LENGTH('text');\n        -> 4"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LOAD_FILE()", "Description": ["\nLOAD_FILE(file_name)\n", "\n          Reads the file and returns the file contents as a string. To\n          use this function, the file must be located on the server\n          host, you must specify the full path name to the file, and you\n          must have the FILE privilege.\n          The file must be readable by the server and its size less than\n          max_allowed_packet bytes. If\n          the secure_file_priv system\n          variable is set to a nonempty directory name, the file to be\n          loaded must be located in that directory. (Prior to MySQL\n          8.0.17, the file must be readable by all, not just readable by\n          the server.)\n        ", "\n          If the file does not exist or cannot be read because one of\n          the preceding conditions is not satisfied, the function\n          returns NULL.\n        ", "\n          The character_set_filesystem\n          system variable controls interpretation of file names that are\n          given as literal strings.\n        ", "Press CTRL+C to copy mysql> UPDATE t\n            SET blob_col=LOAD_FILE('/tmp/picture')\n            WHERE id=1;"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_load-file", "Feature": ["LOAD_FILE(file_name)"], "Examples": ["mysql> UPDATE t\n            SET blob_col=LOAD_FILE('/tmp/picture')\n            WHERE id=1;"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LOCATE()", "Description": ["\nLOCATE(substr,str),\n          LOCATE(substr,str,pos)\n", "\n          The first syntax returns the position of the first occurrence\n          of substring substr in string\n          str. The second syntax returns the\n          position of the first occurrence of substring\n          substr in string\n          str, starting at position\n          pos. Returns 0\n          if substr is not in\n          str. Returns\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LOCATE('bar', 'foobarbar');\n        -> 4\nmysql> SELECT LOCATE('xbar', 'foobar');\n        -> 0\nmysql> SELECT LOCATE('bar', 'foobarbar', 5);\n        -> 7", "\n          This function is multibyte safe, and is case-sensitive only if\n          at least one argument is a binary string.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_locate", "Feature": ["LOCATE(substr,str)", "LOCATE(substr,str,pos)"], "Examples": ["mysql> SELECT LOCATE('bar', 'foobarbar');\n        -> 4\nmysql> SELECT LOCATE('xbar', 'foobar');\n        -> 0\nmysql> SELECT LOCATE('bar', 'foobarbar', 5);\n        -> 7"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LOWER()", "Description": ["\nLOWER(str)\n", "\n          Returns the string str with all\n          characters changed to lowercase according to the current\n          character set mapping, or NULL if\n          str is NULL. The\n          default character set is utf8mb4.\n        ", "Press CTRL+C to copy mysql> SELECT LOWER('QUADRATICALLY');\n        -> 'quadratically'", "\nLOWER() (and\n          UPPER()) are ineffective when\n          applied to binary strings\n          (BINARY,\n          VARBINARY,\n          BLOB). To perform lettercase\n          conversion of a binary string, first convert it to a nonbinary\n          string using a character set appropriate for the data stored\n          in the string:\n        ", "Press CTRL+C to copy mysql> SET @str = BINARY 'New York';\nmysql> SELECT LOWER(@str), LOWER(CONVERT(@str USING utf8mb4));\n+-------------+------------------------------------+\n| LOWER(@str) | LOWER(CONVERT(@str USING utf8mb4)) |\n+-------------+------------------------------------+\n| New York    | new york                           |\n+-------------+------------------------------------+", "\n          For collations of Unicode character sets,\n          LOWER() and\n          UPPER() work according to the\n          Unicode Collation Algorithm (UCA) version in the collation\n          name, if there is one, and UCA 4.0.0 if no version is\n          specified. For example, utf8mb4_0900_ai_ci\n          and utf8mb3_unicode_520_ci work according\n          to UCA 9.0.0 and 5.2.0, respectively, whereas\n          utf8mb3_unicode_ci works according to UCA\n          4.0.0. See Section\u00a012.10.1, \u201cUnicode Character Sets\u201d.\n        ", "\n          This function is multibyte safe.\n        ", "\nLCASE() used within views is rewritten as\n          LOWER().\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lower", "Feature": ["LOWER(str)"], "Examples": ["mysql> SELECT LOWER('QUADRATICALLY');\n        -> 'quadratically'", "mysql> SET @str = BINARY 'New York';\nmysql> SELECT LOWER(@str), LOWER(CONVERT(@str USING utf8mb4));\n+-------------+------------------------------------+\n| LOWER(@str) | LOWER(CONVERT(@str USING utf8mb4)) |\n+-------------+------------------------------------+\n| New York    | new york                           |\n+-------------+------------------------------------+"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LPAD()", "Description": ["\nLPAD(str,len,padstr)\n", "\n          Returns the string str, left-padded\n          with the string padstr to a length\n          of len characters. If\n          str is longer than\n          len, the return value is shortened\n          to len characters.\n        ", "Press CTRL+C to copy mysql> SELECT LPAD('hi',4,'??');\n        -> '??hi'\nmysql> SELECT LPAD('hi',1,'??');\n        -> 'h'", "\n          Returns NULL if any of its arguments are\n          NULL.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad", "Feature": ["LPAD(str,len,padstr)"], "Examples": ["mysql> SELECT LPAD('hi',4,'??');\n        -> '??hi'\nmysql> SELECT LPAD('hi',1,'??');\n        -> 'h'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LTRIM()", "Description": ["\nLTRIM(str)\n", "\n          Returns the string str with leading\n          space characters removed. Returns NULL if\n          str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT LTRIM('  barbar');\n        -> 'barbar'", "\n          This function is multibyte safe.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ltrim", "Feature": ["LTRIM(str)"], "Examples": ["mysql> SELECT LTRIM('  barbar');\n        -> 'barbar'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MAKE_SET()", "Description": ["\nMAKE_SET(bits,str1,str2,...)\n", "\n          Returns a set value (a string containing substrings separated\n          by , characters) consisting of the strings\n          that have the corresponding bit in\n          bits set.\n          str1 corresponds to bit 0,\n          str2 to bit 1, and so on.\n          NULL values in\n          str1,\n          str2, ... are\n          not appended to the result.\n        ", "Press CTRL+C to copy mysql> SELECT MAKE_SET(1,'a','b','c');\n        -> 'a'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice','world');\n        -> 'hello,world'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');\n        -> 'hello'\nmysql> SELECT MAKE_SET(0,'a','b','c');\n        -> ''"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_make-set", "Feature": ["MAKE_SET(bits,str1,str2,...)"], "Examples": ["mysql> SELECT MAKE_SET(1,'a','b','c');\n        -> 'a'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice','world');\n        -> 'hello,world'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');\n        -> 'hello'\nmysql> SELECT MAKE_SET(0,'a','b','c');\n        -> ''"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MATCH()", "Description": [], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html#function_match", "Feature": [], "Examples": [], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "BIT_LENGTH()", "Description": ["\nBIT_LENGTH(str)\n", "\n          Returns the length of the string\n          str in bits. Returns\n          NULL if str is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT BIT_LENGTH('text');\n        -> 32"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_bit-length", "Feature": ["BIT_LENGTH(str)"], "Examples": ["mysql> SELECT BIT_LENGTH('text');\n        -> 32"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MID()", "Description": ["\nMID(str,pos),\n          MID(str FROM\n          pos),\n          MID(str,pos,len),\n          MID(str FROM\n          pos FOR\n          len)\n", "\nMID(str,pos,len)\n          is a synonym for\n          SUBSTRING(str,pos,len).\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_mid", "Feature": ["MID(str,pos)", "MID(str FROM\n          pos)", "MID(str,pos,len)", "MID(str FROM\n          pos FOR\n          len)"], "Examples": [], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "OCT()", "Description": ["\nOCT(N)\n", "\n          Returns a string representation of the octal value of\n          N, where\n          N is a longlong\n          (BIGINT) number. This is\n          equivalent to\n          CONV(N,10,8).\n          Returns NULL if\n          N is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT OCT(12);\n        -> '14'"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_oct", "Feature": ["OCT(N)"], "Examples": ["mysql> SELECT OCT(12);\n        -> '14'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "OCTET_LENGTH()", "Description": ["\nOCTET_LENGTH(str)\n", "\nOCTET_LENGTH() is a synonym for\n          LENGTH().\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_octet-length", "Feature": ["OCTET_LENGTH(str)"], "Examples": [], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ORD()", "Description": ["\nORD(str)\n", "\n          If the leftmost character of the string\n          str is a multibyte character,\n          returns the code for that character, calculated from the\n          numeric values of its constituent bytes using this formula:\n        ", "Press CTRL+C to copy   (1st byte code)\n+ (2nd byte code * 256)\n+ (3rd byte code * 256^2) ...", "\n          If the leftmost character is not a multibyte character,\n          ORD() returns the same value as\n          the ASCII() function. The\n          function returns NULL if\n          str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT ORD('2');\n        -> 50"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ord", "Feature": ["ORD(str)"], "Examples": ["mysql> SELECT ORD('2');\n        -> 50"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "POSITION()", "Description": ["\nPOSITION(substr\n          IN str)\n", "\nPOSITION(substr\n          IN str) is a synonym for\n          LOCATE(substr,str).\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_position", "Feature": ["POSITION(substr\n          IN str)"], "Examples": [], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "QUOTE()", "Description": ["\nQUOTE(str)\n", "\n          Quotes a string to produce a result that can be used as a\n          properly escaped data value in an SQL statement. The string is\n          returned enclosed by single quotation marks and with each\n          instance of backslash (\\), single quote\n          ('), ASCII NUL, and\n          Control+Z preceded by a backslash. If the argument is\n          NULL, the return value is the word\n          \u201cNULL\u201d without enclosing single quotation marks.\n        ", "Press CTRL+C to copy mysql> SELECT QUOTE('Don\\'t!');\n        -> 'Don\\'t!'\nmysql> SELECT QUOTE(NULL);\n        -> NULL", "\n          For comparison, see the quoting rules for literal strings and\n          within the C API in Section\u00a011.1.1, \u201cString Literals\u201d, and\n          mysql_real_escape_string_quote().\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_quote", "Feature": ["QUOTE(str)"], "Examples": ["mysql> SELECT QUOTE('Don\\'t!');\n        -> 'Don\\'t!'\nmysql> SELECT QUOTE(NULL);\n        -> NULL"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "REGEXP_INSTR()", "Description": ["\nREGEXP_INSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              return_option[,\n              match_type]]]])\n", "\n              Returns the starting index of the substring of the string\n              expr that matches the regular\n              expression specified by the pattern\n              pat, 0 if there is no match. If\n              expr or\n              pat is NULL,\n              the return value is NULL. Character\n              indexes begin at 1.\n            ", "\nREGEXP_INSTR() takes these\n              optional arguments:\n", "\n\npos: The position in\n                  expr at which to start the\n                  search. If omitted, the default is 1.\n                \noccurrence: Which\n                  occurrence of a match to search for. If omitted, the\n                  default is 1.\n                \nreturn_option: Which type\n                  of position to return. If this value is 0,\n                  REGEXP_INSTR() returns\n                  the position of the matched substring's first\n                  character. If this value is 1,\n                  REGEXP_INSTR() returns\n                  the position following the matched substring. If\n                  omitted, the default is 0.\n                \nmatch_type: A string that\n                  specifies how to perform matching. The meaning is as\n                  described for\n                  REGEXP_LIKE().\n\n", "\n              For additional information about how matching occurs, see\n              the description for\n              REGEXP_LIKE().\n            ", "Press CTRL+C to copy mysql> SELECT REGEXP_INSTR('dog cat dog', 'dog');\n+------------------------------------+\n| REGEXP_INSTR('dog cat dog', 'dog') |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\nmysql> SELECT REGEXP_INSTR('dog cat dog', 'dog', 2);\n+---------------------------------------+\n| REGEXP_INSTR('dog cat dog', 'dog', 2) |\n+---------------------------------------+\n|                                     9 |\n+---------------------------------------+\nmysql> SELECT REGEXP_INSTR('aa aaa aaaa', 'a{2}');\n+-------------------------------------+\n| REGEXP_INSTR('aa aaa aaaa', 'a{2}') |\n+-------------------------------------+\n|                                   1 |\n+-------------------------------------+\nmysql> SELECT REGEXP_INSTR('aa aaa aaaa', 'a{4}');\n+-------------------------------------+\n| REGEXP_INSTR('aa aaa aaaa', 'a{4}') |\n+-------------------------------------+\n|                                   8 |\n+-------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-instr", "Feature": ["REGEXP_INSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              return_option[,\n              match_type]]]])"], "Examples": ["mysql> SELECT REGEXP_INSTR('dog cat dog', 'dog');\n+------------------------------------+\n| REGEXP_INSTR('dog cat dog', 'dog') |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\nmysql> SELECT REGEXP_INSTR('dog cat dog', 'dog', 2);\n+---------------------------------------+\n| REGEXP_INSTR('dog cat dog', 'dog', 2) |\n+---------------------------------------+\n|                                     9 |\n+---------------------------------------+\nmysql> SELECT REGEXP_INSTR('aa aaa aaaa', 'a{2}');\n+-------------------------------------+\n| REGEXP_INSTR('aa aaa aaaa', 'a{2}') |\n+-------------------------------------+\n|                                   1 |\n+-------------------------------------+\nmysql> SELECT REGEXP_INSTR('aa aaa aaaa', 'a{4}');\n+-------------------------------------+\n| REGEXP_INSTR('aa aaa aaaa', 'a{4}') |\n+-------------------------------------+\n|                                   8 |\n+-------------------------------------+"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "REGEXP_LIKE()", "Description": ["\nREGEXP_LIKE(expr,\n              pat[,\n              match_type])\n", "\n              Returns 1 if the string expr\n              matches the regular expression specified by the pattern\n              pat, 0 otherwise. If\n              expr or\n              pat is NULL,\n              the return value is NULL.\n            ", "\n              The pattern can be an extended regular expression, the\n              syntax for which is discussed in\n              Regular Expression Syntax. The pattern need not be a\n              literal string. For example, it can be specified as a\n              string expression or table column.\n            ", "\n              The optional match_type\n              argument is a string that may contain any or all the\n              following characters specifying how to perform matching:\n", "\n\nc: Case-sensitive matching.\n                \ni: Case-insensitive matching.\n                \nm: Multiple-line mode. Recognize\n                  line terminators within the string. The default\n                  behavior is to match line terminators only at the\n                  start and end of the string expression.\n                \nn: The .\n                  character matches line terminators. The default is for\n                  . matching to stop at the end of a\n                  line.\n                \nu: Unix-only line endings. Only the\n                  newline character is recognized as a line ending by\n                  the ., ^, and\n                  $ match operators.\n\n", "\n              If characters specifying contradictory options are\n              specified within match_type,\n              the rightmost one takes precedence.\n            ", "\n              By default, regular expression operations use the\n              character set and collation of the\n              expr and\n              pat arguments when deciding the\n              type of a character and performing the comparison. If the\n              arguments have different character sets or collations,\n              coercibility rules apply as described in\n              Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n              Arguments may be specified with explicit collation\n              indicators to change comparison behavior.\n            ", "Press CTRL+C to copy mysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE');\n+---------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE') |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\nmysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs);\n+------------------------------------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs) |\n+------------------------------------------------------------------+\n|                                                                0 |\n+------------------------------------------------------------------+", "\nmatch_type may be specified\n              with the c or i\n              characters to override the default case sensitivity.\n              Exception: If either argument is a binary string, the\n              arguments are handled in case-sensitive fashion as binary\n              strings, even if match_type\n              contains the i character.\n", "\n\nNote\n\n\n                MySQL uses C escape syntax in strings (for example,\n                \\n to represent the newline\n                character). If you want your\n                expr or\n                pat argument to contain a\n                literal \\, you must double it.\n                (Unless the\n                NO_BACKSLASH_ESCAPES\n                SQL mode is enabled, in which case no escape character\n                is used.)\n\n", "Press CTRL+C to copy mysql> SELECT REGEXP_LIKE('Michael!', '.*');\n+-------------------------------+\n| REGEXP_LIKE('Michael!', '.*') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line');\n+----------------------------------------------+\n| REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line') |\n+----------------------------------------------+\n|                                            0 |\n+----------------------------------------------+\nmysql> SELECT REGEXP_LIKE('a', '^[a-d]');\n+----------------------------+\n| REGEXP_LIKE('a', '^[a-d]') |\n+----------------------------+\n|                          1 |\n+----------------------------+", "Press CTRL+C to copy mysql> SELECT REGEXP_LIKE('abc', 'ABC');\n+---------------------------+\n| REGEXP_LIKE('abc', 'ABC') |\n+---------------------------+\n|                         1 |\n+---------------------------+\nmysql> SELECT REGEXP_LIKE('abc', 'ABC', 'c');\n+--------------------------------+\n| REGEXP_LIKE('abc', 'ABC', 'c') |\n+--------------------------------+\n|                              0 |\n+--------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-like", "Feature": ["REGEXP_LIKE(expr,\n              pat[,\n              match_type])"], "Examples": ["mysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE');\n+---------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE') |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\nmysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs);\n+------------------------------------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs) |\n+------------------------------------------------------------------+\n|                                                                0 |\n+------------------------------------------------------------------+", "mysql> SELECT REGEXP_LIKE('Michael!', '.*');\n+-------------------------------+\n| REGEXP_LIKE('Michael!', '.*') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line');\n+----------------------------------------------+\n| REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line') |\n+----------------------------------------------+\n|                                            0 |\n+----------------------------------------------+\nmysql> SELECT REGEXP_LIKE('a', '^[a-d]');\n+----------------------------+\n| REGEXP_LIKE('a', '^[a-d]') |\n+----------------------------+\n|                          1 |\n+----------------------------+", "mysql> SELECT REGEXP_LIKE('abc', 'ABC');\n+---------------------------+\n| REGEXP_LIKE('abc', 'ABC') |\n+---------------------------+\n|                         1 |\n+---------------------------+\nmysql> SELECT REGEXP_LIKE('abc', 'ABC', 'c');\n+--------------------------------+\n| REGEXP_LIKE('abc', 'ABC', 'c') |\n+--------------------------------+\n|                              0 |\n+--------------------------------+"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "REGEXP_REPLACE()", "Description": ["\nREGEXP_REPLACE(expr,\n              pat,\n              repl[,\n              pos[,\n              occurrence[,\n              match_type]]])\n", "\n              Replaces occurrences in the string\n              expr that match the regular\n              expression specified by the pattern\n              pat with the replacement string\n              repl, and returns the resulting\n              string. If expr,\n              pat, or\n              repl is\n              NULL, the return value is\n              NULL.\n            ", "\nREGEXP_REPLACE() takes\n              these optional arguments:\n", "\n\npos: The position in\n                  expr at which to start the\n                  search. If omitted, the default is 1.\n                \noccurrence: Which\n                  occurrence of a match to replace. If omitted, the\n                  default is 0 (which means \u201creplace all\n                  occurrences\u201d).\n                \nmatch_type: A string that\n                  specifies how to perform matching. The meaning is as\n                  described for\n                  REGEXP_LIKE().\n\n", "\n              Prior to MySQL 8.0.17, the result returned by this\n              function used the UTF-16 character set;\n              in MySQL 8.0.17 and later, the character set and collation\n              of the expression searched for matches is used. (Bug\n              #94203, Bug #29308212)\n            ", "\n              For additional information about how matching occurs, see\n              the description for\n              REGEXP_LIKE().\n            ", "Press CTRL+C to copy mysql> SELECT REGEXP_REPLACE('a b c', 'b', 'X');\n+-----------------------------------+\n| REGEXP_REPLACE('a b c', 'b', 'X') |\n+-----------------------------------+\n| a X c                             |\n+-----------------------------------+\nmysql> SELECT REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3);\n+----------------------------------------------------+\n| REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3) |\n+----------------------------------------------------+\n| abc def X                                          |\n+----------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-replace", "Feature": ["REGEXP_REPLACE(expr,\n              pat,\n              repl[,\n              pos[,\n              occurrence[,\n              match_type]]])"], "Examples": ["mysql> SELECT REGEXP_REPLACE('a b c', 'b', 'X');\n+-----------------------------------+\n| REGEXP_REPLACE('a b c', 'b', 'X') |\n+-----------------------------------+\n| a X c                             |\n+-----------------------------------+\nmysql> SELECT REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3);\n+----------------------------------------------------+\n| REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3) |\n+----------------------------------------------------+\n| abc def X                                          |\n+----------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "REGEXP_SUBSTR()", "Description": ["\nREGEXP_SUBSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              match_type]]])\n", "\n              Returns the substring of the string\n              expr that matches the regular\n              expression specified by the pattern\n              pat, NULL if\n              there is no match. If expr or\n              pat is NULL,\n              the return value is NULL.\n            ", "\nREGEXP_SUBSTR() takes these\n              optional arguments:\n", "\n\npos: The position in\n                  expr at which to start the\n                  search. If omitted, the default is 1.\n                \noccurrence: Which\n                  occurrence of a match to search for. If omitted, the\n                  default is 1.\n                \nmatch_type: A string that\n                  specifies how to perform matching. The meaning is as\n                  described for\n                  REGEXP_LIKE().\n\n", "\n              Prior to MySQL 8.0.17, the result returned by this\n              function used the UTF-16 character set;\n              in MySQL 8.0.17 and later, the character set and collation\n              of the expression searched for matches is used. (Bug\n              #94203, Bug #29308212)\n            ", "\n              For additional information about how matching occurs, see\n              the description for\n              REGEXP_LIKE().\n            ", "Press CTRL+C to copy mysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+');\n+----------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+') |\n+----------------------------------------+\n| abc                                    |\n+----------------------------------------+\nmysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3);\n+----------------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3) |\n+----------------------------------------------+\n| ghi                                          |\n+----------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/regexp.html#function_regexp-substr", "Feature": ["REGEXP_SUBSTR(expr,\n              pat[,\n              pos[,\n              occurrence[,\n              match_type]]])"], "Examples": ["mysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+');\n+----------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+') |\n+----------------------------------------+\n| abc                                    |\n+----------------------------------------+\nmysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3);\n+----------------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3) |\n+----------------------------------------------+\n| ghi                                          |\n+----------------------------------------------+"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "REPEAT()", "Description": ["\nREPEAT(str,count)\n", "\n          Returns a string consisting of the string\n          str repeated\n          count times. If\n          count is less than 1, returns an\n          empty string. Returns NULL if\n          str or\n          count is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT REPEAT('MySQL', 3);\n        -> 'MySQLMySQLMySQL'"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_repeat", "Feature": ["REPEAT(str,count)"], "Examples": ["mysql> SELECT REPEAT('MySQL', 3);\n        -> 'MySQLMySQLMySQL'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "REPLACE()", "Description": ["\nREPLACE(str,from_str,to_str)\n", "\n          Returns the string str with all\n          occurrences of the string from_str\n          replaced by the string to_str.\n          REPLACE() performs a\n          case-sensitive match when searching for\n          from_str.\n        ", "Press CTRL+C to copy mysql> SELECT REPLACE('www.mysql.com', 'w', 'Ww');\n        -> 'WwWwWw.mysql.com'", "\n          This function is multibyte safe. It returns\n          NULL if any of its arguments are\n          NULL.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_replace", "Feature": ["REPLACE(str,from_str,to_str)"], "Examples": ["mysql> SELECT REPLACE('www.mysql.com', 'w', 'Ww');\n        -> 'WwWwWw.mysql.com'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "REVERSE()", "Description": ["\nREVERSE(str)\n", "\n          Returns the string str with the\n          order of the characters reversed, or NULL\n          if str is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT REVERSE('abc');\n        -> 'cba'", "\n          This function is multibyte safe.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_reverse", "Feature": ["REVERSE(str)"], "Examples": ["mysql> SELECT REVERSE('abc');\n        -> 'cba'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "RIGHT()", "Description": ["\nRIGHT(str,len)\n", "\n          Returns the rightmost len\n          characters from the string str, or\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT RIGHT('foobarbar', 4);\n        -> 'rbar'", "\n          This function is multibyte safe.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_right", "Feature": ["RIGHT(str,len)"], "Examples": ["mysql> SELECT RIGHT('foobarbar', 4);\n        -> 'rbar'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "RPAD()", "Description": ["\nRPAD(str,len,padstr)\n", "\n          Returns the string str,\n          right-padded with the string padstr\n          to a length of len characters. If\n          str is longer than\n          len, the return value is shortened\n          to len characters. If\n          str,\n          padstr, or\n          len is NULL, the\n          function returns NULL.\n        ", "Press CTRL+C to copy mysql> SELECT RPAD('hi',5,'?');\n        -> 'hi???'\nmysql> SELECT RPAD('hi',1,'?');\n        -> 'h'", "\n          This function is multibyte safe.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_rpad", "Feature": ["RPAD(str,len,padstr)"], "Examples": ["mysql> SELECT RPAD('hi',5,'?');\n        -> 'hi???'\nmysql> SELECT RPAD('hi',1,'?');\n        -> 'h'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "RTRIM()", "Description": ["\nRTRIM(str)\n", "\n          Returns the string str with\n          trailing space characters removed.\n        ", "Press CTRL+C to copy mysql> SELECT RTRIM('barbar   ');\n        -> 'barbar'", "\n          This function is multibyte safe, and returns\n          NULL if str is\n          NULL.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_rtrim", "Feature": ["RTRIM(str)"], "Examples": ["mysql> SELECT RTRIM('barbar   ');\n        -> 'barbar'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SOUNDEX()", "Description": ["\nSOUNDEX(str)\n", "\n          Returns a soundex string from str,\n          or NULL if str\n          is NULL. Two strings that sound almost the\n          same should have identical soundex strings. A standard soundex\n          string is four characters long, but the\n          SOUNDEX() function returns an\n          arbitrarily long string. You can use\n          SUBSTRING() on the result to\n          get a standard soundex string. All nonalphabetic characters in\n          str are ignored. All international\n          alphabetic characters outside the A-Z range are treated as\n          vowels.\n", "\n\nImportant\n\n\n            When using SOUNDEX(), you\n            should be aware of the following limitations:\n\n", "\n\n              This function, as currently implemented, is intended to\n              work well with strings that are in the English language\n              only. Strings in other languages may not produce reliable\n              results.\n            \n              This function is not guaranteed to provide consistent\n              results with strings that use multibyte character sets,\n              including utf-8. See Bug #22638 for\n              more information.\n\n", "Press CTRL+C to copy mysql> SELECT SOUNDEX('Hello');\n        -> 'H400'\nmysql> SELECT SOUNDEX('Quadratically');\n        -> 'Q36324'", "\n\nNote\n\n\n            This function implements the original Soundex algorithm, not\n            the more popular enhanced version (also described by D.\n            Knuth). The difference is that original version discards\n            vowels first and duplicates second, whereas the enhanced\n            version discards duplicates first and vowels second.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_soundex", "Feature": ["SOUNDEX(str)"], "Examples": ["mysql> SELECT SOUNDEX('Hello');\n        -> 'H400'\nmysql> SELECT SOUNDEX('Quadratically');\n        -> 'Q36324'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SPACE()", "Description": ["\nSPACE(N)\n", "\n          Returns a string consisting of N\n          space characters, or NULL if\n          N is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT SPACE(6);\n        -> '      '"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_space", "Feature": ["SPACE(N)"], "Examples": ["mysql> SELECT SPACE(6);\n        -> '      '"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "CHAR()", "Description": ["\nCHAR(N,...\n          [USING charset_name])\n", "\nCHAR() interprets each argument\n          N as an integer and returns a\n          string consisting of the characters given by the code values\n          of those integers. NULL values are skipped.\n        ", "Press CTRL+C to copy mysql> SELECT CHAR(77,121,83,81,'76');\n+--------------------------------------------------+\n| CHAR(77,121,83,81,'76')                          |\n+--------------------------------------------------+\n| 0x4D7953514C                                     |\n+--------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3');\n+--------------------------------------------+\n| CHAR(77,77.3,'77.3')                       |\n+--------------------------------------------+\n| 0x4D4D4D                                   |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "\n          By default, CHAR() returns a\n          binary string. To produce a string in a given character set,\n          use the optional USING clause:\n        ", "Press CTRL+C to copy mysql> SELECT CHAR(77,121,83,81,'76' USING utf8mb4);\n+---------------------------------------+\n| CHAR(77,121,83,81,'76' USING utf8mb4) |\n+---------------------------------------+\n| MySQL                                 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3' USING utf8mb4);\n+------------------------------------+\n| CHAR(77,77.3,'77.3' USING utf8mb4) |\n+------------------------------------+\n| MMM                                |\n+------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect INTEGER value: '77.3' |\n+---------+------+-------------------------------------------+\n1 row in set (0.00 sec)", "\n          If USING is given and the result string is\n          illegal for the given character set, a warning is issued.\n          Also, if strict SQL mode is enabled, the result from\n          CHAR() becomes\n          NULL.\n        ", "\n          If CHAR() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        ", "\nCHAR() arguments larger than\n          255 are converted into multiple result bytes. For example,\n          CHAR(256) is equivalent to\n          CHAR(1,0), and\n          CHAR(256*256) is equivalent to\n          CHAR(1,0,0):\n        ", "Press CTRL+C to copy mysql> SELECT HEX(CHAR(1,0)), HEX(CHAR(256));\n+----------------+----------------+\n| HEX(CHAR(1,0)) | HEX(CHAR(256)) |\n+----------------+----------------+\n| 0100           | 0100           |\n+----------------+----------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT HEX(CHAR(1,0,0)), HEX(CHAR(256*256));\n+------------------+--------------------+\n| HEX(CHAR(1,0,0)) | HEX(CHAR(256*256)) |\n+------------------+--------------------+\n| 010000           | 010000             |\n+------------------+--------------------+\n1 row in set (0.00 sec)"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char", "Feature": ["CHAR(N,...\n          [USING charset_name])"], "Examples": ["mysql> SELECT CHAR(77,121,83,81,'76');\n+--------------------------------------------------+\n| CHAR(77,121,83,81,'76')                          |\n+--------------------------------------------------+\n| 0x4D7953514C                                     |\n+--------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3');\n+--------------------------------------------+\n| CHAR(77,77.3,'77.3')                       |\n+--------------------------------------------+\n| 0x4D4D4D                                   |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT CHAR(77,121,83,81,'76' USING utf8mb4);\n+---------------------------------------+\n| CHAR(77,121,83,81,'76' USING utf8mb4) |\n+---------------------------------------+\n| MySQL                                 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CHAR(77,77.3,'77.3' USING utf8mb4);\n+------------------------------------+\n| CHAR(77,77.3,'77.3' USING utf8mb4) |\n+------------------------------------+\n| MMM                                |\n+------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect INTEGER value: '77.3' |\n+---------+------+-------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT HEX(CHAR(1,0)), HEX(CHAR(256));\n+----------------+----------------+\n| HEX(CHAR(1,0)) | HEX(CHAR(256)) |\n+----------------+----------------+\n| 0100           | 0100           |\n+----------------+----------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT HEX(CHAR(1,0,0)), HEX(CHAR(256*256));\n+------------------+--------------------+\n| HEX(CHAR(1,0,0)) | HEX(CHAR(256*256)) |\n+------------------+--------------------+\n| 010000           | 010000             |\n+------------------+--------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "CHAR_LENGTH()", "Description": ["\nCHAR_LENGTH(str)\n", "\n          Returns the length of the string\n          str, measured in code points. A\n          multibyte character counts as a single code point. This means\n          that, for a string containing two 3-byte characters,\n          LENGTH() returns\n          6, whereas\n          CHAR_LENGTH() returns\n          2, as shown here:\n        ", "Press CTRL+C to copy mysql> SET @dolphin:='\u6d77\u8c5a';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SELECT LENGTH(@dolphin), CHAR_LENGTH(@dolphin);\n+------------------+-----------------------+\n| LENGTH(@dolphin) | CHAR_LENGTH(@dolphin) |\n+------------------+-----------------------+\n|                6 |                     2 |\n+------------------+-----------------------+\n1 row in set (0.00 sec)", "\nCHAR_LENGTH() returns\n          NULL if str is\n          NULL.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char-length", "Feature": ["CHAR_LENGTH(str)"], "Examples": ["mysql> SET @dolphin:='\u6d77\u8c5a';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SELECT LENGTH(@dolphin), CHAR_LENGTH(@dolphin);\n+------------------+-----------------------+\n| LENGTH(@dolphin) | CHAR_LENGTH(@dolphin) |\n+------------------+-----------------------+\n|                6 |                     2 |\n+------------------+-----------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "CHARACTER_LENGTH()", "Description": ["\nCHARACTER_LENGTH(str)\n", "\nCHARACTER_LENGTH() is a synonym\n          for CHAR_LENGTH().\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_character-length", "Feature": ["CHARACTER_LENGTH(str)"], "Examples": [], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "STRCMP()", "Description": ["\nSTRCMP(expr1,expr2)\n", "\nSTRCMP() returns\n            0 if the strings are the same,\n            -1 if the first argument is smaller than\n            the second according to the current sort order, and\n            NULL if either argument is\n            NULL. It returns 1\n            otherwise.\n          ", "Press CTRL+C to copy mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "\nSTRCMP() performs the\n            comparison using the collation of the arguments.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "\n            If the collations are incompatible, one of the arguments\n            must be converted to be compatible with the other. See\n            Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#function_strcmp", "Feature": ["STRCMP(expr1,expr2)"], "Examples": ["mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Comparison Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SUBSTR()", "Description": ["\nSUBSTR(str,pos),\n          SUBSTR(str\n          FROM pos),\n          SUBSTR(str,pos,len),\n          SUBSTR(str\n          FROM pos FOR\n          len)\n", "\nSUBSTR() is a synonym for\n          SUBSTRING().\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substr", "Feature": ["SUBSTR(str,pos)", "SUBSTR(str\n          FROM pos)", "SUBSTR(str,pos,len)", "SUBSTR(str\n          FROM pos FOR\n          len)"], "Examples": [], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SUBSTRING()", "Description": ["\nSUBSTRING(str,pos),\n          SUBSTRING(str\n          FROM pos),\n          SUBSTRING(str,pos,len),\n          SUBSTRING(str\n          FROM pos FOR\n          len)\n", "\n          The forms without a len argument\n          return a substring from string str\n          starting at position pos. The forms\n          with a len argument return a\n          substring len characters long from\n          string str, starting at position\n          pos. The forms that use\n          FROM are standard SQL syntax. It is also\n          possible to use a negative value for\n          pos. In this case, the beginning of\n          the substring is pos characters\n          from the end of the string, rather than the beginning. A\n          negative value may be used for pos\n          in any of the forms of this function. A value of 0 for\n          pos returns an empty string.\n        ", "\n          For all forms of SUBSTRING(),\n          the position of the first character in the string from which\n          the substring is to be extracted is reckoned as\n          1.\n        ", "Press CTRL+C to copy mysql> SELECT SUBSTRING('Quadratically',5);\n        -> 'ratically'\nmysql> SELECT SUBSTRING('foobarbar' FROM 4);\n        -> 'barbar'\nmysql> SELECT SUBSTRING('Quadratically',5,6);\n        -> 'ratica'\nmysql> SELECT SUBSTRING('Sakila', -3);\n        -> 'ila'\nmysql> SELECT SUBSTRING('Sakila', -5, 3);\n        -> 'aki'\nmysql> SELECT SUBSTRING('Sakila' FROM -4 FOR 2);\n        -> 'ki'", "\n          This function is multibyte safe. It returns\n          NULL if any of its arguments are\n          NULL.\n        ", "\n          If len is less than 1, the result\n          is the empty string.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring", "Feature": ["SUBSTRING(str,pos)", "SUBSTRING(str\n          FROM pos)", "SUBSTRING(str,pos,len)", "SUBSTRING(str\n          FROM pos FOR\n          len)"], "Examples": ["mysql> SELECT SUBSTRING('Quadratically',5);\n        -> 'ratically'\nmysql> SELECT SUBSTRING('foobarbar' FROM 4);\n        -> 'barbar'\nmysql> SELECT SUBSTRING('Quadratically',5,6);\n        -> 'ratica'\nmysql> SELECT SUBSTRING('Sakila', -3);\n        -> 'ila'\nmysql> SELECT SUBSTRING('Sakila', -5, 3);\n        -> 'aki'\nmysql> SELECT SUBSTRING('Sakila' FROM -4 FOR 2);\n        -> 'ki'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SUBSTRING_INDEX()", "Description": ["\nSUBSTRING_INDEX(str,delim,count)\n", "\n          Returns the substring from string\n          str before\n          count occurrences of the delimiter\n          delim. If\n          count is positive, everything to\n          the left of the final delimiter (counting from the left) is\n          returned. If count is negative,\n          everything to the right of the final delimiter (counting from\n          the right) is returned.\n          SUBSTRING_INDEX() performs a\n          case-sensitive match when searching for\n          delim.\n        ", "Press CTRL+C to copy mysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);\n        -> 'www.mysql'\nmysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);\n        -> 'mysql.com'", "\n          This function is multibyte safe.\n        ", "\nSUBSTRING_INDEX() returns\n          NULL if any of its arguments are\n          NULL.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring-index", "Feature": ["SUBSTRING_INDEX(str,delim,count)"], "Examples": ["mysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);\n        -> 'www.mysql'\nmysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);\n        -> 'mysql.com'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "TO_BASE64()", "Description": ["\nTO_BASE64(str)\n", "\n          Converts the string argument to base-64 encoded form and\n          returns the result as a character string with the connection\n          character set and collation. If the argument is not a string,\n          it is converted to a string before conversion takes place. The\n          result is NULL if the argument is\n          NULL. Base-64 encoded strings can be\n          decoded using the FROM_BASE64()\n          function.\n        ", "Press CTRL+C to copy mysql> SELECT TO_BASE64('abc'), FROM_BASE64(TO_BASE64('abc'));\n        -> 'JWJj', 'abc'", "\n          Different base-64 encoding schemes exist. These are the\n          encoding and decoding rules used by\n          TO_BASE64() and\n          FROM_BASE64():\n", "\n\n              The encoding for alphabet value 62 is\n              '+'.\n            \n              The encoding for alphabet value 63 is\n              '/'.\n            \n              Encoded output consists of groups of 4 printable\n              characters. Each 3 bytes of the input data are encoded\n              using 4 characters. If the last group is incomplete, it is\n              padded with '=' characters to a length\n              of 4.\n            \n              A newline is added after each 76 characters of encoded\n              output to divide long output into multiple lines.\n            \n              Decoding recognizes and ignores newline, carriage return,\n              tab, and space.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_to-base64", "Feature": ["TO_BASE64(str)"], "Examples": ["mysql> SELECT TO_BASE64('abc'), FROM_BASE64(TO_BASE64('abc'));\n        -> 'JWJj', 'abc'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "TRIM()", "Description": ["\nTRIM([{BOTH | LEADING | TRAILING}\n          [remstr] FROM]\n          str),\n          TRIM([remstr\n          FROM] str)\n", "\n          Returns the string str with all\n          remstr prefixes or suffixes\n          removed. If none of the specifiers BOTH,\n          LEADING, or TRAILING is\n          given, BOTH is assumed.\n          remstr is optional and, if not\n          specified, spaces are removed.\n        ", "Press CTRL+C to copy mysql> SELECT TRIM('  bar   ');\n        -> 'bar'\nmysql> SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');\n        -> 'barxxx'\nmysql> SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');\n        -> 'bar'\nmysql> SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');\n        -> 'barx'", "\n          This function is multibyte safe. It returns\n          NULL if any of its arguments are\n          NULL.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_trim", "Feature": ["TRIM([{BOTH | LEADING | TRAILING}\n          [remstr] FROM]\n          str)", "TRIM([remstr\n          FROM] str)"], "Examples": ["mysql> SELECT TRIM('  bar   ');\n        -> 'bar'\nmysql> SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');\n        -> 'barxxx'\nmysql> SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');\n        -> 'bar'\nmysql> SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');\n        -> 'barx'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "UCASE()", "Description": ["\nUCASE(str)\n", "\nUCASE() is a synonym for\n          UPPER().\n        ", "\nUCASE() used within views is rewritten as\n          UPPER().\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ucase", "Feature": ["UCASE(str)"], "Examples": [], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "UNHEX()", "Description": ["\nUNHEX(str)\n", "\n          For a string argument str,\n          UNHEX(str)\n          interprets each pair of characters in the argument as a\n          hexadecimal number and converts it to the byte represented by\n          the number. The return value is a binary string.\n        ", "Press CTRL+C to copy mysql> SELECT UNHEX('4D7953514C');\n        -> 'MySQL'\nmysql> SELECT X'4D7953514C';\n        -> 'MySQL'\nmysql> SELECT UNHEX(HEX('string'));\n        -> 'string'\nmysql> SELECT HEX(UNHEX('1267'));\n        -> '1267'", "\n          The characters in the argument string must be legal\n          hexadecimal digits: '0' ..\n          '9', 'A' ..\n          'F', 'a' ..\n          'f'. If the argument contains any\n          nonhexadecimal digits, or is itself NULL,\n          the result is NULL:\n        ", "Press CTRL+C to copy mysql> SELECT UNHEX('GG');\n+-------------+\n| UNHEX('GG') |\n+-------------+\n| NULL        |\n+-------------+\n\nmysql> SELECT UNHEX(NULL);\n+-------------+\n| UNHEX(NULL) |\n+-------------+\n| NULL        |\n+-------------+", "\n          A NULL result can also occur if the\n          argument to UNHEX() is a\n          BINARY column, because values\n          are padded with 0x00 bytes when stored but\n          those bytes are not stripped on retrieval. For example,\n          '41' is stored into a\n          CHAR(3) column as\n          '41\u00a0' and retrieved as\n          '41' (with the trailing pad space\n          stripped), so UNHEX() for the\n          column value returns X'41'. By contrast,\n          '41' is stored into a\n          BINARY(3) column as\n          '41\\0' and retrieved as\n          '41\\0' (with the trailing pad\n          0x00 byte not stripped).\n          '\\0' is not a legal hexadecimal digit, so\n          UNHEX() for the column value\n          returns NULL.\n        ", "\n          For a numeric argument N, the\n          inverse of\n          HEX(N)\n          is not performed by UNHEX().\n          Use\n          CONV(HEX(N),16,10)\n          instead. See the description of\n          HEX().\n        ", "\n          If UNHEX() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_unhex", "Feature": ["UNHEX(str)"], "Examples": ["mysql> SELECT UNHEX('4D7953514C');\n        -> 'MySQL'\nmysql> SELECT X'4D7953514C';\n        -> 'MySQL'\nmysql> SELECT UNHEX(HEX('string'));\n        -> 'string'\nmysql> SELECT HEX(UNHEX('1267'));\n        -> '1267'", "mysql> SELECT UNHEX('GG');\n+-------------+\n| UNHEX('GG') |\n+-------------+\n| NULL        |\n+-------------+\n\nmysql> SELECT UNHEX(NULL);\n+-------------+\n| UNHEX(NULL) |\n+-------------+\n| NULL        |\n+-------------+"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "UPPER()", "Description": ["\nUPPER(str)\n", "\n          Returns the string str with all\n          characters changed to uppercase according to the current\n          character set mapping, or NULL if\n          str is NULL. The\n          default character set is utf8mb4.\n        ", "Press CTRL+C to copy mysql> SELECT UPPER('Hej');\n        -> 'HEJ'", "\n          See the description of LOWER()\n          for information that also applies to\n          UPPER(). This included\n          information about how to perform lettercase conversion of\n          binary strings (BINARY,\n          VARBINARY,\n          BLOB) for which these functions\n          are ineffective, and information about case folding for\n          Unicode character sets.\n        ", "\n          This function is multibyte safe.\n        ", "\nUCASE() used within views is rewritten as\n          UPPER().\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_upper", "Feature": ["UPPER(str)"], "Examples": ["mysql> SELECT UPPER('Hej');\n        -> 'HEJ'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "CONCAT()", "Description": ["\nCONCAT(str1,str2,...)\n", "\n          Returns the string that results from concatenating the\n          arguments. May have one or more arguments. If all arguments\n          are nonbinary strings, the result is a nonbinary string. If\n          the arguments include any binary strings, the result is a\n          binary string. A numeric argument is converted to its\n          equivalent nonbinary string form.\n        ", "\nCONCAT() returns\n          NULL if any argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT CONCAT('My', 'S', 'QL');\n        -> 'MySQL'\nmysql> SELECT CONCAT('My', NULL, 'QL');\n        -> NULL\nmysql> SELECT CONCAT(14.3);\n        -> '14.3'", "\n          For quoted strings, concatenation can be performed by placing\n          the strings next to each other:\n        ", "Press CTRL+C to copy mysql> SELECT 'My' 'S' 'QL';\n        -> 'MySQL'", "\n          If CONCAT() is invoked from\n          within the mysql client, binary string\n          results display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat", "Feature": ["CONCAT(str1,str2,...)"], "Examples": ["mysql> SELECT CONCAT('My', 'S', 'QL');\n        -> 'MySQL'\nmysql> SELECT CONCAT('My', NULL, 'QL');\n        -> NULL\nmysql> SELECT CONCAT(14.3);\n        -> '14.3'", "mysql> SELECT 'My' 'S' 'QL';\n        -> 'MySQL'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "WEIGHT_STRING()", "Description": ["\nWEIGHT_STRING(str\n          [AS {CHAR|BINARY}(N)]\n          [flags])\n", "\n          This function returns the weight string for the input string.\n          The return value is a binary string that represents the\n          comparison and sorting value of the string, or\n          NULL if the argument is\n          NULL. It has these properties:\n", "\n\n              If\n              WEIGHT_STRING(str1)\n              =\n              WEIGHT_STRING(str2),\n              then str1 =\n              str2\n              (str1 and\n              str2 are considered equal)\n            \n              If\n              WEIGHT_STRING(str1)\n              <\n              WEIGHT_STRING(str2),\n              then str1 <\n              str2\n              (str1 sorts before\n              str2)\n\n", "\nWEIGHT_STRING() is a debugging\n          function intended for internal use. Its behavior can change\n          without notice between MySQL versions. It can be used for\n          testing and debugging of collations, especially if you are\n          adding a new collation. See\n          Section\u00a012.14, \u201cAdding a Collation to a Character Set\u201d.\n        ", "\n          This list briefly summarizes the arguments. More details are\n          given in the discussion following the list.\n", "\n\nstr: The input string\n              expression.\n            \nAS clause: Optional; cast the input\n              string to a given type and length.\n            \nflags: Optional; unused.\n\n", "\n          The input string, str, is a string\n          expression. If the input is a nonbinary (character) string\n          such as a CHAR,\n          VARCHAR, or\n          TEXT value, the return value\n          contains the collation weights for the string. If the input is\n          a binary (byte) string such as a\n          BINARY,\n          VARBINARY, or\n          BLOB value, the return value is\n          the same as the input (the weight for each byte in a binary\n          string is the byte value). If the input is\n          NULL,\n          WEIGHT_STRING() returns\n          NULL.\n        ", "\n          Examples:\n        ", "Press CTRL+C to copy mysql> SET @s = _utf8mb4 'AB' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 1C471C60               |\n+------+---------+------------------------+", "Press CTRL+C to copy mysql> SET @s = _utf8mb4 'ab' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 1C471C60               |\n+------+---------+------------------------+", "Press CTRL+C to copy mysql> SET @s = CAST('AB' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+", "Press CTRL+C to copy mysql> SET @s = CAST('ab' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 6162                   |\n+------+---------+------------------------+", "\n          The preceding examples use\n          HEX() to display the\n          WEIGHT_STRING() result. Because\n          the result is a binary value,\n          HEX() can be especially useful\n          when the result contains nonprinting values, to display it in\n          printable form:\n        ", "Press CTRL+C to copy mysql> SET @s = CONVERT(X'C39F' USING utf8mb4) COLLATE utf8mb4_czech_ci;\nmysql> SELECT HEX(WEIGHT_STRING(@s));\n+------------------------+\n| HEX(WEIGHT_STRING(@s)) |\n+------------------------+\n| 0FEA0FEA               |\n+------------------------+", "\n          For non-NULL return values, the data type\n          of the value is VARBINARY if\n          its length is within the maximum length for\n          VARBINARY, otherwise the data\n          type is BLOB.\n        ", "\n          The AS clause may be given to cast the\n          input string to a nonbinary or binary string and to force it\n          to a given length:\n", "\n\nAS CHAR(N)\n              casts the string to a nonbinary string and pads it on the\n              right with spaces to a length of\n              N characters.\n              N must be at least 1. If\n              N is less than the length of\n              the input string, the string is truncated to\n              N characters. No warning occurs\n              for truncation.\n            \nAS BINARY(N)\n              is similar but casts the string to a binary string,\n              N is measured in bytes (not\n              characters), and padding uses 0x00\n              bytes (not spaces).\n\n", "Press CTRL+C to copy mysql> SET NAMES 'latin1';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 41422020                            |\n+-------------------------------------+\nmysql> SET NAMES 'utf8mb4';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 1C471C60                            |\n+-------------------------------------+", "Press CTRL+C to copy mysql> SELECT HEX(WEIGHT_STRING('ab' AS BINARY(4)));\n+---------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS BINARY(4))) |\n+---------------------------------------+\n| 61620000                              |\n+---------------------------------------+", "\n          The flags clause currently is\n          unused.\n        ", "\n          If WEIGHT_STRING() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string", "Feature": ["WEIGHT_STRING(str\n          [AS {CHAR|BINARY}(N)]\n          [flags])"], "Examples": ["mysql> SET @s = _utf8mb4 'AB' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 1C471C60               |\n+------+---------+------------------------+", "mysql> SET @s = _utf8mb4 'ab' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 1C471C60               |\n+------+---------+------------------------+", "mysql> SET @s = CAST('AB' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+", "mysql> SET @s = CAST('ab' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 6162                   |\n+------+---------+------------------------+", "mysql> SET @s = CONVERT(X'C39F' USING utf8mb4) COLLATE utf8mb4_czech_ci;\nmysql> SELECT HEX(WEIGHT_STRING(@s));\n+------------------------+\n| HEX(WEIGHT_STRING(@s)) |\n+------------------------+\n| 0FEA0FEA               |\n+------------------------+", "mysql> SET NAMES 'latin1';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 41422020                            |\n+-------------------------------------+\nmysql> SET NAMES 'utf8mb4';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 1C471C60                            |\n+-------------------------------------+", "mysql> SELECT HEX(WEIGHT_STRING('ab' AS BINARY(4)));\n+---------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS BINARY(4))) |\n+---------------------------------------+\n| 61620000                              |\n+---------------------------------------+"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "CONCAT_WS()", "Description": ["\nCONCAT_WS(separator,str1,str2,...)\n", "\nCONCAT_WS() stands for\n          Concatenate With Separator and is a special form of\n          CONCAT(). The first argument is\n          the separator for the rest of the arguments. The separator is\n          added between the strings to be concatenated. The separator\n          can be a string, as can the rest of the arguments. If the\n          separator is NULL, the result is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT CONCAT_WS(',', 'First name', 'Second name', 'Last Name');\n        -> 'First name,Second name,Last Name'\nmysql> SELECT CONCAT_WS(',', 'First name', NULL, 'Last Name');\n        -> 'First name,Last Name'", "\nCONCAT_WS() does not skip empty\n          strings. However, it does skip any NULL\n          values after the separator argument.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat-ws", "Feature": ["CONCAT_WS(separator,str1,str2,...)"], "Examples": ["mysql> SELECT CONCAT_WS(',', 'First name', 'Second name', 'Last Name');\n        -> 'First name,Second name,Last Name'\nmysql> SELECT CONCAT_WS(',', 'First name', NULL, 'Last Name');\n        -> 'First name,Last Name'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ASCII()", "Description": ["\nASCII(str)\n", "\n          Returns the numeric value of the leftmost character of the\n          string str. Returns\n          0 if str is the\n          empty string. Returns NULL if\n          str is NULL.\n          ASCII() works for 8-bit\n          characters.\n        ", "Press CTRL+C to copy mysql> SELECT ASCII('2');\n        -> 50\nmysql> SELECT ASCII(2);\n        -> 50\nmysql> SELECT ASCII('dx');\n        -> 100", "\n          See also the ORD() function.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ascii", "Feature": ["ASCII(str)"], "Examples": ["mysql> SELECT ASCII('2');\n        -> 50\nmysql> SELECT ASCII(2);\n        -> 50\nmysql> SELECT ASCII('dx');\n        -> 100"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ELT()", "Description": ["\nELT(N,str1,str2,str3,...)\n", "\nELT() returns the\n          Nth element of the list of strings:\n          str1 if\n          N = 1,\n          str2 if\n          N = 2, and so\n          on. Returns NULL if\n          N is less than\n          1, greater than the number of arguments, or\n          NULL. ELT()\n          is the complement of FIELD().\n        ", "Press CTRL+C to copy mysql> SELECT ELT(1, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Aa'\nmysql> SELECT ELT(4, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Dd'"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_elt", "Feature": ["ELT(N,str1,str2,str3,...)"], "Examples": ["mysql> SELECT ELT(1, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Aa'\nmysql> SELECT ELT(4, 'Aa', 'Bb', 'Cc', 'Dd');\n        -> 'Dd'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "EXPORT_SET()", "Description": ["\nEXPORT_SET(bits,on,off[,separator[,number_of_bits]])\n", "\n          Returns a string such that for every bit set in the value\n          bits, you get an\n          on string and for every bit not set\n          in the value, you get an off\n          string. Bits in bits are examined\n          from right to left (from low-order to high-order bits).\n          Strings are added to the result from left to right, separated\n          by the separator string (the\n          default being the comma character ,). The\n          number of bits examined is given by\n          number_of_bits, which has a default\n          of 64 if not specified.\n          number_of_bits is silently clipped\n          to 64 if larger than 64. It is treated as an unsigned integer,\n          so a value of \u22121 is effectively the same as 64.\n        ", "Press CTRL+C to copy mysql> SELECT EXPORT_SET(5,'Y','N',',',4);\n        -> 'Y,N,Y,N'\nmysql> SELECT EXPORT_SET(6,'1','0',',',10);\n        -> '0,1,1,0,0,0,0,0,0,0'"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_export-set", "Feature": ["EXPORT_SET(bits,on,off[,separator[,number_of_bits]])"], "Examples": ["mysql> SELECT EXPORT_SET(5,'Y','N',',',4);\n        -> 'Y,N,Y,N'\nmysql> SELECT EXPORT_SET(6,'1','0',',',10);\n        -> '0,1,1,0,0,0,0,0,0,0'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "FIELD()", "Description": ["\nFIELD(str,str1,str2,str3,...)\n", "\n          Returns the index (position) of str\n          in the str1,\n          str2,\n          str3, ... list.\n          Returns 0 if str\n          is not found.\n        ", "\n          If all arguments to FIELD() are\n          strings, all arguments are compared as strings. If all\n          arguments are numbers, they are compared as numbers.\n          Otherwise, the arguments are compared as double.\n        ", "\n          If str is NULL,\n          the return value is 0 because\n          NULL fails equality comparison with any\n          value. FIELD() is the\n          complement of ELT().\n        ", "Press CTRL+C to copy mysql> SELECT FIELD('Bb', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 2\nmysql> SELECT FIELD('Gg', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 0"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_field", "Feature": ["FIELD(str,str1,str2,str3,...)"], "Examples": ["mysql> SELECT FIELD('Bb', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 2\nmysql> SELECT FIELD('Gg', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n        -> 0"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "FIND_IN_SET()", "Description": ["\nFIND_IN_SET(str,strlist)\n", "\n          Returns a value in the range of 1 to\n          N if the string\n          str is in the string list\n          strlist consisting of\n          N substrings. A string list is a\n          string composed of substrings separated by\n          , characters. If the first argument is a\n          constant string and the second is a column of type\n          SET, the\n          FIND_IN_SET() function is\n          optimized to use bit arithmetic. Returns 0\n          if str is not in\n          strlist or if\n          strlist is the empty string.\n          Returns NULL if either argument is\n          NULL. This function does not work properly\n          if the first argument contains a comma (,)\n          character.\n        ", "Press CTRL+C to copy mysql> SELECT FIND_IN_SET('b','a,b,c,d');\n        -> 2"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_find-in-set", "Feature": ["FIND_IN_SET(str,strlist)"], "Examples": ["mysql> SELECT FIND_IN_SET('b','a,b,c,d');\n        -> 2"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "FORMAT()", "Description": ["\nFORMAT(X,D[,locale])\n", "\n          Formats the number X to a format\n          like '#,###,###.##', rounded to\n          D decimal places, and returns the\n          result as a string. If D is\n          0, the result has no decimal point or\n          fractional part. If X or\n          D is NULL, the\n          function returns NULL.\n        ", "\n          The optional third parameter enables a locale to be specified\n          to be used for the result number's decimal point, thousands\n          separator, and grouping between separators. Permissible locale\n          values are the same as the legal values for the\n          lc_time_names system variable\n          (see Section\u00a012.16, \u201cMySQL Server Locale Support\u201d). If the locale is\n          NULL or not specified, the default locale\n          is 'en_US'.\n        ", "Press CTRL+C to copy mysql> SELECT FORMAT(12332.123456, 4);\n        -> '12,332.1235'\nmysql> SELECT FORMAT(12332.1,4);\n        -> '12,332.1000'\nmysql> SELECT FORMAT(12332.2,0);\n        -> '12,332'\nmysql> SELECT FORMAT(12332.2,2,'de_DE');\n        -> '12.332,20'"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_format", "Feature": ["FORMAT(X,D[,locale])"], "Examples": ["mysql> SELECT FORMAT(12332.123456, 4);\n        -> '12,332.1235'\nmysql> SELECT FORMAT(12332.1,4);\n        -> '12,332.1000'\nmysql> SELECT FORMAT(12332.2,0);\n        -> '12,332'\nmysql> SELECT FORMAT(12332.2,2,'de_DE');\n        -> '12.332,20'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "FROM_BASE64()", "Description": ["\nFROM_BASE64(str)\n", "\n          Takes a string encoded with the base-64 encoded rules used by\n          TO_BASE64() and returns the\n          decoded result as a binary string. The result is\n          NULL if the argument is\n          NULL or not a valid base-64 string. See the\n          description of TO_BASE64() for\n          details about the encoding and decoding rules.\n        ", "Press CTRL+C to copy mysql> SELECT TO_BASE64('abc'), FROM_BASE64(TO_BASE64('abc'));\n        -> 'JWJj', 'abc'", "\n          If FROM_BASE64() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation. You can disable\n          this behavior by setting the value of the\n          --binary-as-hex to\n          0 when starting the\n          mysql client. For more information about\n          that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_from-base64", "Feature": ["FROM_BASE64(str)"], "Examples": ["mysql> SELECT TO_BASE64('abc'), FROM_BASE64(TO_BASE64('abc'));\n        -> 'JWJj', 'abc'"], "Category": ["Built-In Functions and Operators", "String Functions and Operators"]}
