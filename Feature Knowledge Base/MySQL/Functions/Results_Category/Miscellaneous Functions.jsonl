{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "GROUPING()", "Description": ["\nGROUPING(expr\n          [, expr] ...)\n", "\n          For GROUP BY queries that include a\n          WITH ROLLUP modifier, the\n          ROLLUP operation produces super-aggregate\n          output rows where NULL represents the set\n          of all values. The GROUPING()\n          function enables you to distinguish NULL\n          values for super-aggregate rows from NULL\n          values in regular grouped rows.\n        ", "\nGROUPING() is permitted in the\n          select list, HAVING clause, and (as of\n          MySQL 8.0.12) ORDER BY clause.\n        ", "\n          Each argument to GROUPING()\n          must be an expression that exactly matches an expression in\n          the GROUP BY clause. The expression cannot\n          be a positional specifier. For each expression,\n          GROUPING() produces 1 if the\n          expression value in the current row is a\n          NULL representing a super-aggregate value.\n          Otherwise, GROUPING() produces\n          0, indicating that the expression value is a\n          NULL for a regular result row or is not\n          NULL.\n        ", "\n          Suppose that table t1 contains these rows,\n          where NULL indicates something like\n          \u201cother\u201d or \u201cunknown\u201d:\n        ", "Press CTRL+C to copy mysql> SELECT * FROM t1;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "\n          A summary of the table without WITH ROLLUP\n          looks like this:\n        ", "Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "\n          The result contains NULL values, but those\n          do not represent super-aggregate rows because the query does\n          not include WITH ROLLUP.\n        ", "\n          Adding WITH ROLLUP produces super-aggregate\n          summary rows containing additional NULL\n          values. However, without comparing this result to the previous\n          one, it is not easy to see which NULL\n          values occur in super-aggregate rows and which occur in\n          regular grouped rows:\n        ", "Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | NULL  |        5 |\n| ball | large |       20 |\n| ball | small |       10 |\n| ball | NULL  |       35 |\n| hoop | NULL  |        3 |\n| hoop | large |        5 |\n| hoop | small |       15 |\n| hoop | NULL  |       23 |\n| NULL | NULL  |       58 |\n+------+-------+----------+", "\n          To distinguish NULL values in\n          super-aggregate rows from those in regular grouped rows, use\n          GROUPING(), which returns 1\n          only for super-aggregate NULL values:\n        ", "Press CTRL+C to copy mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+\n| name | size  | quantity | grp_name | grp_size |\n+------+-------+----------+----------+----------+\n| ball | NULL  |        5 |        0 |        0 |\n| ball | large |       20 |        0 |        0 |\n| ball | small |       10 |        0 |        0 |\n| ball | NULL  |       35 |        0 |        1 |\n| hoop | NULL  |        3 |        0 |        0 |\n| hoop | large |        5 |        0 |        0 |\n| hoop | small |       15 |        0 |        0 |\n| hoop | NULL  |       23 |        0 |        1 |\n| NULL | NULL  |       58 |        1 |        1 |\n+------+-------+----------+----------+----------+", "\n          Common uses for GROUPING():\n", "\n\n              Substitute a label for super-aggregate\n              NULL values:\n            Press CTRL+C to copy mysql> SELECT\n         IF(GROUPING(name) = 1, 'All items', name) AS name,\n         IF(GROUPING(size) = 1, 'All sizes', size) AS size,\n         SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+-----------+-----------+----------+\n| name      | size      | quantity |\n+-----------+-----------+----------+\n| ball      | NULL      |        5 |\n| ball      | large     |       20 |\n| ball      | small     |       10 |\n| ball      | All sizes |       35 |\n| hoop      | NULL      |        3 |\n| hoop      | large     |        5 |\n| hoop      | small     |       15 |\n| hoop      | All sizes |       23 |\n| All items | All sizes |       58 |\n+-----------+-----------+----------+\n              Return only super-aggregate lines by filtering out the\n              regular grouped lines:\n            Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name) = 1 OR GROUPING(size) = 1;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+\n", "\nGROUPING() permits multiple\n          expression arguments. In this case, the\n          GROUPING() return value\n          represents a bitmask combined from the results for each\n          expression, where the lowest-order bit corresponds to the\n          result for the rightmost expression. For example, with three\n          expression arguments,\n          GROUPING(expr1,\n          expr2,\n          expr3) is evaluated like\n          this:\n        ", "Press CTRL+C to copy   result for GROUPING(expr3)\n+ result for GROUPING(expr2) << 1\n+ result for GROUPING(expr1) << 2", "\n          The following query shows how\n          GROUPING() results for single\n          arguments combine for a multiple-argument call to produce a\n          bitmask value:\n        ", "Press CTRL+C to copy mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size,\n       GROUPING(name, size) AS grp_all\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+---------+\n| name | size  | quantity | grp_name | grp_size | grp_all |\n+------+-------+----------+----------+----------+---------+\n| ball | NULL  |        5 |        0 |        0 |       0 |\n| ball | large |       20 |        0 |        0 |       0 |\n| ball | small |       10 |        0 |        0 |       0 |\n| ball | NULL  |       35 |        0 |        1 |       1 |\n| hoop | NULL  |        3 |        0 |        0 |       0 |\n| hoop | large |        5 |        0 |        0 |       0 |\n| hoop | small |       15 |        0 |        0 |       0 |\n| hoop | NULL  |       23 |        0 |        1 |       1 |\n| NULL | NULL  |       58 |        1 |        1 |       3 |\n+------+-------+----------+----------+----------+---------+", "\n          With multiple expression arguments, the\n          GROUPING() return value is\n          nonzero if any expression represents a super-aggregate value.\n          Multiple-argument GROUPING()\n          syntax thus provides a simpler way to write the earlier query\n          that returned only super-aggregate rows, by using a single\n          multiple-argument GROUPING()\n          call rather than multiple single-argument calls:\n        ", "Press CTRL+C to copy mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name, size) <> 0;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+", "\n          Use of GROUPING() is subject to\n          these limitations:\n", "\n\n              Do not use subquery GROUP BY\n              expressions as GROUPING()\n              arguments because matching might fail. For example,\n              matching fails for this query:\n            Press CTRL+C to copy mysql> SELECT GROUPING((SELECT MAX(name) FROM t1))\n       FROM t1\n       GROUP BY (SELECT MAX(name) FROM t1) WITH ROLLUP;\nERROR 3580 (HY000): Argument #1 of GROUPING function is not in GROUP BY\nGROUP BY literal expressions should not\n              be used within a HAVING clause as\n              GROUPING() arguments. Due\n              to differences between when the optimizer evaluates\n              GROUP BY and HAVING,\n              matching may succeed but\n              GROUPING() evaluation does\n              not produce the expected result. Consider this query:\n            Press CTRL+C to copy SELECT a AS f1, 'w' AS f2\nFROM t\nGROUP BY f1, f2 WITH ROLLUP\nHAVING GROUPING(f2) = 1;\nGROUPING() is evaluated\n              earlier for the literal constant expression than for the\n              HAVING clause as a whole and returns 0.\n              To check whether a query such as this is affected, use\n              EXPLAIN and look for\n              Impossible having in the\n              Extra column.\n\n", "\n          For more information about WITH ROLLUP and\n          GROUPING(), see\n          Section\u00a014.19.2, \u201cGROUP BY Modifiers\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_grouping", "Feature": ["GROUPING(expr\n          [, expr] ...)"], "Examples": ["mysql> SELECT * FROM t1;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | small |       10 |\n| ball | large |       20 |\n| ball | NULL  |        5 |\n| hoop | small |       15 |\n| hoop | large |        5 |\n| hoop | NULL  |        3 |\n+------+-------+----------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+\n| name | size  | quantity |\n+------+-------+----------+\n| ball | NULL  |        5 |\n| ball | large |       20 |\n| ball | small |       10 |\n| ball | NULL  |       35 |\n| hoop | NULL  |        3 |\n| hoop | large |        5 |\n| hoop | small |       15 |\n| hoop | NULL  |       23 |\n| NULL | NULL  |       58 |\n+------+-------+----------+", "mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+\n| name | size  | quantity | grp_name | grp_size |\n+------+-------+----------+----------+----------+\n| ball | NULL  |        5 |        0 |        0 |\n| ball | large |       20 |        0 |        0 |\n| ball | small |       10 |        0 |        0 |\n| ball | NULL  |       35 |        0 |        1 |\n| hoop | NULL  |        3 |        0 |        0 |\n| hoop | large |        5 |        0 |        0 |\n| hoop | small |       15 |        0 |        0 |\n| hoop | NULL  |       23 |        0 |        1 |\n| NULL | NULL  |       58 |        1 |        1 |\n+------+-------+----------+----------+----------+", "mysql> SELECT\n         IF(GROUPING(name) = 1, 'All items', name) AS name,\n         IF(GROUPING(size) = 1, 'All sizes', size) AS size,\n         SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+-----------+-----------+----------+\n| name      | size      | quantity |\n+-----------+-----------+----------+\n| ball      | NULL      |        5 |\n| ball      | large     |       20 |\n| ball      | small     |       10 |\n| ball      | All sizes |       35 |\n| hoop      | NULL      |        3 |\n| hoop      | large     |        5 |\n| hoop      | small     |       15 |\n| hoop      | All sizes |       23 |\n| All items | All sizes |       58 |\n+-----------+-----------+----------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name) = 1 OR GROUPING(size) = 1;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+", "mysql> SELECT\n         name, size, SUM(quantity) AS quantity,\n         GROUPING(name) AS grp_name,\n         GROUPING(size) AS grp_size,\n       GROUPING(name, size) AS grp_all\n       FROM t1\n       GROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+---------+\n| name | size  | quantity | grp_name | grp_size | grp_all |\n+------+-------+----------+----------+----------+---------+\n| ball | NULL  |        5 |        0 |        0 |       0 |\n| ball | large |       20 |        0 |        0 |       0 |\n| ball | small |       10 |        0 |        0 |       0 |\n| ball | NULL  |       35 |        0 |        1 |       1 |\n| hoop | NULL  |        3 |        0 |        0 |       0 |\n| hoop | large |        5 |        0 |        0 |       0 |\n| hoop | small |       15 |        0 |        0 |       0 |\n| hoop | NULL  |       23 |        0 |        1 |       1 |\n| NULL | NULL  |       58 |        1 |        1 |       3 |\n+------+-------+----------+----------+----------+---------+", "mysql> SELECT name, size, SUM(quantity) AS quantity\n       FROM t1\n       GROUP BY name, size WITH ROLLUP\n       HAVING GROUPING(name, size) <> 0;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL |       35 |\n| hoop | NULL |       23 |\n| NULL | NULL |       58 |\n+------+------+----------+", "mysql> SELECT GROUPING((SELECT MAX(name) FROM t1))\n       FROM t1\n       GROUP BY (SELECT MAX(name) FROM t1) WITH ROLLUP;\nERROR 3580 (HY000): Argument #1 of GROUPING function is not in GROUP BY", "SELECT a AS f1, 'w' AS f2\nFROM t\nGROUP BY f1, f2 WITH ROLLUP\nHAVING GROUPING(f2) = 1;"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "INET_ATON()", "Description": ["\nINET_ATON(expr)\n", "\n          Given the dotted-quad representation of an IPv4 network\n          address as a string, returns an integer that represents the\n          numeric value of the address in network byte order (big\n          endian). INET_ATON() returns\n          NULL if it does not understand its\n          argument, or if expr is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT INET_ATON('10.0.5.9');\n        -> 167773449", "\n          For this example, the return value is calculated as\n          10\u00d72563 +\n          0\u00d72562 + 5\u00d7256 + 9.\n        ", "\nINET_ATON() may or may not\n          return a non-NULL result for short-form IP\n          addresses (such as '127.1' as a\n          representation of '127.0.0.1'). Because of\n          this, INET_ATON()a should not\n          be used for such addresses.\n", "\n\nNote\n\n\n            To store values generated by\n            INET_ATON(), use an\n            INT UNSIGNED column rather than\n            INT, which is signed. If you\n            use a signed column, values corresponding to IP addresses\n            for which the first octet is greater than 127 cannot be\n            stored correctly. See\n            Section\u00a013.1.7, \u201cOut-of-Range and Overflow Handling\u201d.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_inet-aton", "Feature": ["INET_ATON(expr)"], "Examples": ["mysql> SELECT INET_ATON('10.0.5.9');\n        -> 167773449"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "INET_NTOA()", "Description": ["\nINET_NTOA(expr)\n", "\n          Given a numeric IPv4 network address in network byte order,\n          returns the dotted-quad string representation of the address\n          as a string in the connection character set.\n          INET_NTOA() returns\n          NULL if it does not understand its\n          argument.\n        ", "Press CTRL+C to copy mysql> SELECT INET_NTOA(167773449);\n        -> '10.0.5.9'"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_inet-ntoa", "Feature": ["INET_NTOA(expr)"], "Examples": ["mysql> SELECT INET_NTOA(167773449);\n        -> '10.0.5.9'"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "INET6_ATON()", "Description": ["\nINET6_ATON(expr)\n", "\n          Given an IPv6 or IPv4 network address as a string, returns a\n          binary string that represents the numeric value of the address\n          in network byte order (big endian). Because numeric-format\n          IPv6 addresses require more bytes than the largest integer\n          type, the representation returned by this function has the\n          VARBINARY data type:\n          VARBINARY(16) for IPv6\n          addresses and VARBINARY(4) for\n          IPv4 addresses. If the argument is not a valid address, or if\n          it is NULL,\n          INET6_ATON() returns\n          NULL.\n        ", "\n          The following examples use\n          HEX() to display the\n          INET6_ATON() result in\n          printable form:\n        ", "Press CTRL+C to copy mysql> SELECT HEX(INET6_ATON('fdfe::5a55:caff:fefa:9089'));\n        -> 'FDFE0000000000005A55CAFFFEFA9089'\nmysql> SELECT HEX(INET6_ATON('10.0.5.9'));\n        -> '0A000509'", "\nINET6_ATON() observes several constraints\n          on valid arguments. These are given in the following list\n          along with examples.\n", "\n\n              A trailing zone ID is not permitted, as in\n              fe80::3%1 or\n              fe80::3%eth0.\n            \n              A trailing network mask is not permitted, as in\n              2001:45f:3:ba::/64 or\n              198.51.100.0/24.\n            \n              For values representing IPv4 addresses, only classless\n              addresses are supported. Classful addresses such as\n              198.51.1 are rejected. A trailing port\n              number is not permitted, as in\n              198.51.100.2:8080. Hexadecimal numbers\n              in address components are not permitted, as in\n              198.0xa0.1.2. Octal numbers are not\n              supported: 198.51.010.1 is treated as\n              198.51.10.1, not\n              198.51.8.1. These IPv4 constraints also\n              apply to IPv6 addresses that have IPv4 address parts, such\n              as IPv4-compatible or IPv4-mapped addresses.\n\n", "\n          To convert an IPv4 address expr\n          represented in numeric form as an\n          INT value to an IPv6 address\n          represented in numeric form as a\n          VARBINARY value, use this\n          expression:\n        ", "Press CTRL+C to copy INET6_ATON(INET_NTOA(expr))", "\n          For example:\n        ", "Press CTRL+C to copy mysql> SELECT HEX(INET6_ATON(INET_NTOA(167773449)));\n        -> '0A000509'", "\n          If INET6_ATON() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_inet6-aton", "Feature": ["INET6_ATON(expr)"], "Examples": ["mysql> SELECT HEX(INET6_ATON('fdfe::5a55:caff:fefa:9089'));\n        -> 'FDFE0000000000005A55CAFFFEFA9089'\nmysql> SELECT HEX(INET6_ATON('10.0.5.9'));\n        -> '0A000509'", "mysql> SELECT HEX(INET6_ATON(INET_NTOA(167773449)));\n        -> '0A000509'"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "INET6_NTOA()", "Description": ["\nINET6_NTOA(expr)\n", "\n          Given an IPv6 or IPv4 network address represented in numeric\n          form as a binary string, returns the string representation of\n          the address as a string in the connection character set. If\n          the argument is not a valid address, or if it is\n          NULL,\n          INET6_NTOA() returns\n          NULL.\n        ", "\nINET6_NTOA() has these\n          properties:\n", "\n\n              It does not use operating system functions to perform\n              conversions, thus the output string is platform\n              independent.\n            \n              The return string has a maximum length of 39 (4 x 8 + 7).\n              Given this statement:\n            Press CTRL+C to copy CREATE TABLE t AS SELECT INET6_NTOA(expr) AS c1;\n              The resulting table would have this definition:\n            Press CTRL+C to copy CREATE TABLE t (c1 VARCHAR(39) CHARACTER SET utf8mb3 DEFAULT NULL);\n              The return string uses lowercase letters for IPv6\n              addresses.\n\n", "Press CTRL+C to copy mysql> SELECT INET6_NTOA(INET6_ATON('fdfe::5a55:caff:fefa:9089'));\n        -> 'fdfe::5a55:caff:fefa:9089'\nmysql> SELECT INET6_NTOA(INET6_ATON('10.0.5.9'));\n        -> '10.0.5.9'\n\nmysql> SELECT INET6_NTOA(UNHEX('FDFE0000000000005A55CAFFFEFA9089'));\n        -> 'fdfe::5a55:caff:fefa:9089'\nmysql> SELECT INET6_NTOA(UNHEX('0A000509'));\n        -> '10.0.5.9'", "\n          If INET6_NTOA() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_inet6-ntoa", "Feature": ["INET6_NTOA(expr)"], "Examples": ["CREATE TABLE t AS SELECT INET6_NTOA(expr) AS c1;", "CREATE TABLE t (c1 VARCHAR(39) CHARACTER SET utf8mb3 DEFAULT NULL);", "mysql> SELECT INET6_NTOA(INET6_ATON('fdfe::5a55:caff:fefa:9089'));\n        -> 'fdfe::5a55:caff:fefa:9089'\nmysql> SELECT INET6_NTOA(INET6_ATON('10.0.5.9'));\n        -> '10.0.5.9'\n\nmysql> SELECT INET6_NTOA(UNHEX('FDFE0000000000005A55CAFFFEFA9089'));\n        -> 'fdfe::5a55:caff:fefa:9089'\nmysql> SELECT INET6_NTOA(UNHEX('0A000509'));\n        -> '10.0.5.9'"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "IS_IPV4()", "Description": ["\nIS_IPV4(expr)\n", "\n          Returns 1 if the argument is a valid IPv4 address specified as\n          a string, 0 otherwise. Returns NULL if\n          expr is NULL.\n        ", "Press CTRL+C to copy mysql> SELECT IS_IPV4('10.0.5.9'), IS_IPV4('10.0.5.256');\n        -> 1, 0", "\n          For a given argument, if\n          IS_IPV4() returns 1,\n          INET_ATON() (and\n          INET6_ATON()) returns\n          non-NULL. The converse statement is not\n          true: In some cases,\n          INET_ATON() returns\n          non-NULL when\n          IS_IPV4() returns 0.\n        ", "\n          As implied by the preceding remarks,\n          IS_IPV4() is more strict than\n          INET_ATON() about what\n          constitutes a valid IPv4 address, so it may be useful for\n          applications that need to perform strong checks against\n          invalid values. Alternatively, use\n          INET6_ATON() to convert IPv4\n          addresses to internal form and check for a\n          NULL result (which indicates an invalid\n          address). INET6_ATON() is\n          equally strong as IS_IPV4()\n          about checking IPv4 addresses.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_is-ipv4", "Feature": ["IS_IPV4(expr)"], "Examples": ["mysql> SELECT IS_IPV4('10.0.5.9'), IS_IPV4('10.0.5.256');\n        -> 1, 0"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "IS_IPV4_COMPAT()", "Description": ["\nIS_IPV4_COMPAT(expr)\n", "\n          This function takes an IPv6 address represented in numeric\n          form as a binary string, as returned by\n          INET6_ATON(). It returns 1 if\n          the argument is a valid IPv4-compatible IPv6 address, 0\n          otherwise (unless expr is\n          NULL, in which case the function returns\n          NULL). IPv4-compatible addresses have the\n          form\n          ::ipv4_address.\n        ", "Press CTRL+C to copy mysql> SELECT IS_IPV4_COMPAT(INET6_ATON('::10.0.5.9'));\n        -> 1\nmysql> SELECT IS_IPV4_COMPAT(INET6_ATON('::ffff:10.0.5.9'));\n        -> 0", "\n          The IPv4 part of an IPv4-compatible address can also be\n          represented using hexadecimal notation. For example,\n          198.51.100.1 has this raw hexadecimal\n          value:\n        ", "Press CTRL+C to copy mysql> SELECT HEX(INET6_ATON('198.51.100.1'));\n        -> 'C6336401'", "\n          Expressed in IPv4-compatible form,\n          ::198.51.100.1 is equivalent to\n          ::c0a8:0001 or (without leading zeros)\n          ::c0a8:1\n", "Press CTRL+C to copy mysql> SELECT\n    ->   IS_IPV4_COMPAT(INET6_ATON('::198.51.100.1')),\n    ->   IS_IPV4_COMPAT(INET6_ATON('::c0a8:0001')),\n    ->   IS_IPV4_COMPAT(INET6_ATON('::c0a8:1'));\n        -> 1, 1, 1"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_is-ipv4-compat", "Feature": ["IS_IPV4_COMPAT(expr)"], "Examples": ["mysql> SELECT IS_IPV4_COMPAT(INET6_ATON('::10.0.5.9'));\n        -> 1\nmysql> SELECT IS_IPV4_COMPAT(INET6_ATON('::ffff:10.0.5.9'));\n        -> 0", "mysql> SELECT HEX(INET6_ATON('198.51.100.1'));\n        -> 'C6336401'", "mysql> SELECT\n    ->   IS_IPV4_COMPAT(INET6_ATON('::198.51.100.1')),\n    ->   IS_IPV4_COMPAT(INET6_ATON('::c0a8:0001')),\n    ->   IS_IPV4_COMPAT(INET6_ATON('::c0a8:1'));\n        -> 1, 1, 1"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "IS_IPV4_MAPPED()", "Description": ["\nIS_IPV4_MAPPED(expr)\n", "\n          This function takes an IPv6 address represented in numeric\n          form as a binary string, as returned by\n          INET6_ATON(). It returns 1 if\n          the argument is a valid IPv4-mapped IPv6 address, 0 otherwise,\n          unless expr is\n          NULL, in which case the function returns\n          NULL. IPv4-mapped addresses have the form\n          ::ffff:ipv4_address.\n        ", "Press CTRL+C to copy mysql> SELECT IS_IPV4_MAPPED(INET6_ATON('::10.0.5.9'));\n        -> 0\nmysql> SELECT IS_IPV4_MAPPED(INET6_ATON('::ffff:10.0.5.9'));\n        -> 1", "\n          As with IS_IPV4_COMPAT() the IPv4 part of\n          an IPv4-mapped address can also be represented using\n          hexadecimal notation:\n        ", "Press CTRL+C to copy mysql> SELECT\n    ->   IS_IPV4_MAPPED(INET6_ATON('::ffff:198.51.100.1')),\n    ->   IS_IPV4_MAPPED(INET6_ATON('::ffff:c0a8:0001')),\n    ->   IS_IPV4_MAPPED(INET6_ATON('::ffff:c0a8:1'));\n        -> 1, 1, 1"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_is-ipv4-mapped", "Feature": ["IS_IPV4_MAPPED(expr)"], "Examples": ["mysql> SELECT IS_IPV4_MAPPED(INET6_ATON('::10.0.5.9'));\n        -> 0\nmysql> SELECT IS_IPV4_MAPPED(INET6_ATON('::ffff:10.0.5.9'));\n        -> 1", "mysql> SELECT\n    ->   IS_IPV4_MAPPED(INET6_ATON('::ffff:198.51.100.1')),\n    ->   IS_IPV4_MAPPED(INET6_ATON('::ffff:c0a8:0001')),\n    ->   IS_IPV4_MAPPED(INET6_ATON('::ffff:c0a8:1'));\n        -> 1, 1, 1"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "IS_IPV6()", "Description": ["\nIS_IPV6(expr)\n", "\n          Returns 1 if the argument is a valid IPv6 address specified as\n          a string, 0 otherwise, unless expr\n          is NULL, in which case the function returns\n          NULL. This function does not consider IPv4\n          addresses to be valid IPv6 addresses.\n        ", "Press CTRL+C to copy mysql> SELECT IS_IPV6('10.0.5.9'), IS_IPV6('::1');\n        -> 0, 1", "\n          For a given argument, if\n          IS_IPV6() returns 1,\n          INET6_ATON() returns\n          non-NULL.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_is-ipv6", "Feature": ["IS_IPV6(expr)"], "Examples": ["mysql> SELECT IS_IPV6('10.0.5.9'), IS_IPV6('::1');\n        -> 0, 1"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "IS_UUID()", "Description": ["\nIS_UUID(string_uuid)\n", "\n          Returns 1 if the argument is a valid string-format UUID, 0 if\n          the argument is not a valid UUID, and NULL\n          if the argument is NULL.\n        ", "\n\u201cValid\u201d means that the value is in a format that\n          can be parsed. That is, it has the correct length and contains\n          only the permitted characters (hexadecimal digits in any\n          lettercase and, optionally, dashes and curly braces). This\n          format is most common:\n        ", "Press CTRL+C to copy aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee", "\n          These other formats are also permitted:\n        ", "Press CTRL+C to copy aaaaaaaabbbbccccddddeeeeeeeeeeee\n{aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee}", "\n          For the meanings of fields within the value, see the\n          UUID() function description.\n        ", "Press CTRL+C to copy mysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db');\n+-------------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB');\n+-------------------------------------------------+\n| IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780cbaba102695645b8c656024db');\n+---------------------------------------------+\n| IS_UUID('6ccd780cbaba102695645b8c656024db') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}');\n+---------------------------------------------------+\n| IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}') |\n+---------------------------------------------------+\n|                                                 1 |\n+---------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c6560');\n+---------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c6560') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID(RAND());\n+-----------------+\n| IS_UUID(RAND()) |\n+-----------------+\n|               0 |\n+-----------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_is-uuid", "Feature": ["IS_UUID(string_uuid)"], "Examples": ["mysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db');\n+-------------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB');\n+-------------------------------------------------+\n| IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB') |\n+-------------------------------------------------+\n|                                               1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780cbaba102695645b8c656024db');\n+---------------------------------------------+\n| IS_UUID('6ccd780cbaba102695645b8c656024db') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}');\n+---------------------------------------------------+\n| IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}') |\n+---------------------------------------------------+\n|                                                 1 |\n+---------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c6560');\n+---------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c6560') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID(RAND());\n+-----------------+\n| IS_UUID(RAND()) |\n+-----------------+\n|               0 |\n+-----------------+"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "BIN_TO_UUID()", "Description": ["\nBIN_TO_UUID(binary_uuid),\n          BIN_TO_UUID(binary_uuid,\n          swap_flag)\n", "\nBIN_TO_UUID() is the inverse of\n          UUID_TO_BIN(). It converts a\n          binary UUID to a string UUID and returns the result. The\n          binary value should be a UUID as a\n          VARBINARY(16) value. The return\n          value is a string of five hexadecimal numbers separated by\n          dashes. (For details about this format, see the\n          UUID() function description.)\n          If the UUID argument is NULL, the return\n          value is NULL. If any argument is invalid,\n          an error occurs.\n        ", "\nBIN_TO_UUID() takes one or two\n          arguments:\n", "\n\n              The one-argument form takes a binary UUID value. The UUID\n              value is assumed not to have its time-low and time-high\n              parts swapped. The string result is in the same order as\n              the binary argument.\n            \n              The two-argument form takes a binary UUID value and a\n              swap-flag value:\n\n\n\n                  If swap_flag is 0, the\n                  two-argument form is equivalent to the one-argument\n                  form. The string result is in the same order as the\n                  binary argument.\n                \n                  If swap_flag is 1, the UUID\n                  value is assumed to have its time-low and time-high\n                  parts swapped. These parts are swapped back to their\n                  original position in the result value.\n\n\n\n", "\n          For usage examples and information about time-part swapping,\n          see the UUID_TO_BIN() function\n          description.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_bin-to-uuid", "Feature": ["BIN_TO_UUID(binary_uuid)", "BIN_TO_UUID(binary_uuid,\n          swap_flag)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "NAME_CONST()", "Description": ["\nNAME_CONST(name,value)\n", "\n          Returns the given value. When used to produce a result set\n          column, NAME_CONST() causes the\n          column to have the given name. The arguments should be\n          constants.\n        ", "Press CTRL+C to copy mysql> SELECT NAME_CONST('myname', 14);\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+", "\n          This function is for internal use only. The server uses it\n          when writing statements from stored programs that contain\n          references to local program variables, as described in\n          Section\u00a027.7, \u201cStored Program Binary Logging\u201d. You might see this\n          function in the output from mysqlbinlog.\n        ", "\n          For your applications, you can obtain exactly the same result\n          as in the example just shown by using simple aliasing, like\n          this:\n        ", "Press CTRL+C to copy mysql> SELECT 14 AS myname;\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+\n1 row in set (0.00 sec)", "\n          See Section\u00a015.2.13, \u201cSELECT Statement\u201d, for more information about\n          column aliases.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_name-const", "Feature": ["NAME_CONST(name,value)"], "Examples": ["mysql> SELECT NAME_CONST('myname', 14);\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+", "mysql> SELECT 14 AS myname;\n+--------+\n| myname |\n+--------+\n|     14 |\n+--------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SLEEP()", "Description": ["\nSLEEP(duration)\n", "\n          Sleeps (pauses) for the number of seconds given by the\n          duration argument, then returns 0.\n          The duration may have a fractional part. If the argument is\n          NULL or negative,\n          SLEEP() produces a warning, or\n          an error in strict SQL mode.\n        ", "\n          When sleep returns normally (without interruption), it returns\n          0:\n        ", "Press CTRL+C to copy mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           0 |\n+-------------+", "\n          When SLEEP() is the only thing\n          invoked by a query that is interrupted, it returns 1 and the\n          query itself returns no error. This is true whether the query\n          is killed or times out:\n", "\n\n              This statement is interrupted using\n              KILL QUERY\n              from another session:\n            Press CTRL+C to copy mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+\n              This statement is interrupted by timing out:\n            Press CTRL+C to copy mysql> SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+\n", "\n          When SLEEP() is only part of a\n          query that is interrupted, the query returns an error:\n", "\n\n              This statement is interrupted using\n              KILL QUERY\n              from another session:\n            Press CTRL+C to copy mysql> SELECT 1 FROM t1 WHERE SLEEP(1000);\nERROR 1317 (70100): Query execution was interrupted\n              This statement is interrupted by timing out:\n            Press CTRL+C to copy mysql> SELECT /*+ MAX_EXECUTION_TIME(1000) */ 1 FROM t1 WHERE SLEEP(1000);\nERROR 3024 (HY000): Query execution was interrupted, maximum statement\nexecution time exceeded\n", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_sleep", "Feature": ["SLEEP(duration)"], "Examples": ["mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           0 |\n+-------------+", "mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+", "mysql> SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n|           1 |\n+-------------+", "mysql> SELECT 1 FROM t1 WHERE SLEEP(1000);\nERROR 1317 (70100): Query execution was interrupted", "mysql> SELECT /*+ MAX_EXECUTION_TIME(1000) */ 1 FROM t1 WHERE SLEEP(1000);\nERROR 3024 (HY000): Query execution was interrupted, maximum statement\nexecution time exceeded"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "UUID()", "Description": ["\nUUID()\n", "\n          Returns a Universal Unique Identifier (UUID) generated\n          according to RFC 4122, \u201cA Universally Unique IDentifier\n          (UUID) URN Namespace\u201d\n          (http://www.ietf.org/rfc/rfc4122.txt).\n        ", "\n          A UUID is designed as a number that is globally unique in\n          space and time. Two calls to\n          UUID() are expected to generate\n          two different values, even if these calls are performed on two\n          separate devices not connected to each other.\n", "\n\nWarning\n\n\n            Although UUID() values are\n            intended to be unique, they are not necessarily unguessable\n            or unpredictable. If unpredictability is required, UUID\n            values should be generated some other way.\n\n", "\nUUID() returns a value that\n          conforms to UUID version 1 as described in RFC 4122. The value\n          is a 128-bit number represented as a\n          utf8mb3 string of five hexadecimal numbers\n          in aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\n          format:\n", "\n\n              The first three numbers are generated from the low,\n              middle, and high parts of a timestamp. The high part also\n              includes the UUID version number.\n            \n              The fourth number preserves temporal uniqueness in case\n              the timestamp value loses monotonicity (for example, due\n              to daylight saving time).\n            \n              The fifth number is an IEEE 802 node number that provides\n              spatial uniqueness. A random number is substituted if the\n              latter is not available (for example, because the host\n              device has no Ethernet card, or it is unknown how to find\n              the hardware address of an interface on the host operating\n              system). In this case, spatial uniqueness cannot be\n              guaranteed. Nevertheless, a collision should have\n              very low probability.\n            \n              The MAC address of an interface is taken into account only\n              on FreeBSD, Linux, and Windows. On other operating\n              systems, MySQL uses a randomly generated 48-bit number.\n\n", "Press CTRL+C to copy mysql> SELECT UUID();\n        -> '6ccd780c-baba-1026-9564-5b8c656024db'", "\n          To convert between string and binary UUID values, use the\n          UUID_TO_BIN() and\n          BIN_TO_UUID() functions. To\n          check whether a string is a valid UUID value, use the\n          IS_UUID() function.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_uuid", "Feature": ["UUID()"], "Examples": ["mysql> SELECT UUID();\n        -> '6ccd780c-baba-1026-9564-5b8c656024db'"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "UUID_SHORT()", "Description": ["\nUUID_SHORT()\n", "\n          Returns a \u201cshort\u201d universal identifier as a\n          64-bit unsigned integer. Values returned by\n          UUID_SHORT() differ from the\n          string-format 128-bit identifiers returned by the\n          UUID() function and have\n          different uniqueness properties. The value of\n          UUID_SHORT() is guaranteed to\n          be unique if the following conditions hold:\n", "\n\n              The server_id value of\n              the current server is between 0 and 255 and is unique\n              among your set of source and replica servers\n            \n              You do not set back the system time for your server host\n              between mysqld restarts\n            \n              You invoke UUID_SHORT() on\n              average fewer than 16 million times per second between\n              mysqld restarts\n\n", "\n          The UUID_SHORT() return value\n          is constructed this way:\n        ", "Press CTRL+C to copy   (server_id & 255) << 56\n+ (server_startup_time_in_seconds << 24)\n+ incremented_variable++;", "Press CTRL+C to copy mysql> SELECT UUID_SHORT();\n        -> 92395783831158784", "\n\nNote\n\n\nUUID_SHORT() does not work\n            with statement-based replication.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_uuid-short", "Feature": ["UUID_SHORT()"], "Examples": ["mysql> SELECT UUID_SHORT();\n        -> 92395783831158784"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "UUID_TO_BIN()", "Description": ["\nUUID_TO_BIN(string_uuid),\n          UUID_TO_BIN(string_uuid,\n          swap_flag)\n", "\n          Converts a string UUID to a binary UUID and returns the\n          result. (The IS_UUID() function\n          description lists the permitted string UUID formats.) The\n          return binary UUID is a\n          VARBINARY(16) value. If the\n          UUID argument is NULL, the return value is\n          NULL. If any argument is invalid, an error\n          occurs.\n        ", "\nUUID_TO_BIN() takes one or two\n          arguments:\n", "\n\n              The one-argument form takes a string UUID value. The\n              binary result is in the same order as the string argument.\n            \n              The two-argument form takes a string UUID value and a flag\n              value:\n\n\n\n                  If swap_flag is 0, the\n                  two-argument form is equivalent to the one-argument\n                  form. The binary result is in the same order as the\n                  string argument.\n                \n                  If swap_flag is 1, the\n                  format of the return value differs: The time-low and\n                  time-high parts (the first and third groups of\n                  hexadecimal digits, respectively) are swapped. This\n                  moves the more rapidly varying part to the right and\n                  can improve indexing efficiency if the result is\n                  stored in an indexed column.\n\n\n\n", "\n          Time-part swapping assumes the use of UUID version 1 values,\n          such as are generated by the\n          UUID() function. For UUID\n          values produced by other means that do not follow version 1\n          format, time-part swapping provides no benefit. For details\n          about version 1 format, see the\n          UUID() function description.\n        ", "\n          Suppose that you have the following string UUID value:\n        ", "Press CTRL+C to copy mysql> SET @uuid = '6ccd780c-baba-1026-9564-5b8c656024db';", "\n          To convert the string UUID to binary with or without time-part\n          swapping, use UUID_TO_BIN():\n        ", "Press CTRL+C to copy mysql> SELECT HEX(UUID_TO_BIN(@uuid));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid))          |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 0));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 0))       |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 1));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 1))       |\n+----------------------------------+\n| 1026BABA6CCD780C95645B8C656024DB |\n+----------------------------------+", "\n          To convert a binary UUID returned by\n          UUID_TO_BIN() to a string UUID,\n          use BIN_TO_UUID(). If you\n          produce a binary UUID by calling\n          UUID_TO_BIN() with a second\n          argument of 1 to swap time parts, you should also pass a\n          second argument of 1 to\n          BIN_TO_UUID() to unswap the\n          time parts when converting the binary UUID back to a string\n          UUID:\n        ", "Press CTRL+C to copy mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid))      |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+", "\n          If the use of time-part swapping is not the same for the\n          conversion in both directions, the original UUID is not\n          recovered properly:\n        ", "Press CTRL+C to copy mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1)  |\n+--------------------------------------+\n| baba1026-780c-6ccd-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0)  |\n+--------------------------------------+\n| 1026baba-6ccd-780c-9564-5b8c656024db |\n+--------------------------------------+", "\n          If UUID_TO_BIN() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_uuid-to-bin", "Feature": ["UUID_TO_BIN(string_uuid)", "UUID_TO_BIN(string_uuid,\n          swap_flag)"], "Examples": ["mysql> SET @uuid = '6ccd780c-baba-1026-9564-5b8c656024db';", "mysql> SELECT HEX(UUID_TO_BIN(@uuid));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid))          |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 0));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 0))       |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 1));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 1))       |\n+----------------------------------+\n| 1026BABA6CCD780C95645B8C656024DB |\n+----------------------------------+", "mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid))      |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1)  |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+", "mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1)  |\n+--------------------------------------+\n| baba1026-780c-6ccd-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0)  |\n+--------------------------------------+\n| 1026baba-6ccd-780c-9564-5b8c656024db |\n+--------------------------------------+"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "VALUES()", "Description": ["\nVALUES(col_name)\n", "\n          In an\n          INSERT\n          ... ON DUPLICATE KEY UPDATE statement, you can use\n          the\n          VALUES(col_name)\n          function in the UPDATE clause\n          to refer to column values from the\n          INSERT portion of the\n          statement. In other words,\n          VALUES(col_name)\n          in the UPDATE clause refers to\n          the value of col_name that would be\n          inserted, had no duplicate-key conflict occurred. This\n          function is especially useful in multiple-row inserts. The\n          VALUES() function is meaningful\n          only in the ON DUPLICATE KEY UPDATE clause\n          of INSERT statements and\n          returns NULL otherwise. See\n          Section\u00a015.2.7.2, \u201cINSERT ... ON DUPLICATE KEY UPDATE Statement\u201d.\n        ", "Press CTRL+C to copy mysql> INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\n    -> ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);", "\n\nImportant\n\n\n            This usage is deprecated in MySQL 8.0.20, and is subject to\n            removal in a future release of MySQL. Use a row alias, or\n            row and column aliases, instead. See\n            Section\u00a015.2.7.2, \u201cINSERT ... ON DUPLICATE KEY UPDATE Statement\u201d, for more information\n            and examples.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_values", "Feature": ["VALUES(col_name)"], "Examples": ["mysql> INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\n    -> ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ANY_VALUE()", "Description": ["\nANY_VALUE(arg)\n", "\n          This function is useful for GROUP BY\n          queries when the\n          ONLY_FULL_GROUP_BY SQL mode\n          is enabled, for cases when MySQL rejects a query that you know\n          is valid for reasons that MySQL cannot determine. The function\n          return value and type are the same as the return value and\n          type of its argument, but the function result is not checked\n          for the ONLY_FULL_GROUP_BY\n          SQL mode.\n        ", "\n          For example, if name is a nonindexed\n          column, the following query fails with\n          ONLY_FULL_GROUP_BY enabled:\n        ", "Press CTRL+C to copy mysql> SELECT name, address, MAX(age) FROM t GROUP BY name;\nERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP\nBY clause and contains nonaggregated column 'mydb.t.address' which\nis not functionally dependent on columns in GROUP BY clause; this\nis incompatible with sql_mode=only_full_group_by", "\n          The failure occurs because address is a\n          nonaggregated column that is neither named among\n          GROUP BY columns nor functionally dependent\n          on them. As a result, the address value for\n          rows within each name group is\n          nondeterministic. There are multiple ways to cause MySQL to\n          accept the query:\n", "\n\n              Alter the table to make name a primary\n              key or a unique NOT NULL column. This\n              enables MySQL to determine that address\n              is functionally dependent on name; that\n              is, address is uniquely determined by\n              name. (This technique is inapplicable\n              if NULL must be permitted as a valid\n              name value.)\n            \n              Use ANY_VALUE() to refer to\n              address:\n            Press CTRL+C to copy SELECT name, ANY_VALUE(address), MAX(age) FROM t GROUP BY name;\n              In this case, MySQL ignores the nondeterminism of\n              address values within each\n              name group and accepts the query. This\n              may be useful if you simply do not care which value of a\n              nonaggregated column is chosen for each group.\n              ANY_VALUE() is not an\n              aggregate function, unlike functions such as\n              SUM() or\n              COUNT(). It simply acts to\n              suppress the test for nondeterminism.\n            \n              Disable\n              ONLY_FULL_GROUP_BY. This\n              is equivalent to using\n              ANY_VALUE() with\n              ONLY_FULL_GROUP_BY\n              enabled, as described in the previous item.\n\n", "\nANY_VALUE() is also useful if\n          functional dependence exists between columns but MySQL cannot\n          determine it. The following query is valid because\n          age is functionally dependent on the\n          grouping column age-1, but MySQL cannot\n          tell that and rejects the query with\n          ONLY_FULL_GROUP_BY enabled:\n        ", "Press CTRL+C to copy SELECT age FROM t GROUP BY age-1;", "\n          To cause MySQL to accept the query, use\n          ANY_VALUE():\n        ", "Press CTRL+C to copy SELECT ANY_VALUE(age) FROM t GROUP BY age-1;", "\nANY_VALUE() can be used for\n          queries that refer to aggregate functions in the absence of a\n          GROUP BY clause:\n        ", "Press CTRL+C to copy mysql> SELECT name, MAX(age) FROM t;\nERROR 1140 (42000): In aggregated query without GROUP BY, expression\n#1 of SELECT list contains nonaggregated column 'mydb.t.name'; this\nis incompatible with sql_mode=only_full_group_by", "\n          Without GROUP BY, there is a single group\n          and it is nondeterministic which name value\n          to choose for the group.\n          ANY_VALUE() tells MySQL to\n          accept the query:\n        ", "Press CTRL+C to copy SELECT ANY_VALUE(name), MAX(age) FROM t;", "\n          It may be that, due to some property of a given data set, you\n          know that a selected nonaggregated column is effectively\n          functionally dependent on a GROUP BY\n          column. For example, an application may enforce uniqueness of\n          one column with respect to another. In this case, using\n          ANY_VALUE() for the effectively\n          functionally dependent column may make sense.\n        ", "\n          For additional discussion, see\n          Section\u00a014.19.3, \u201cMySQL Handling of GROUP BY\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_any-value", "Feature": ["ANY_VALUE(arg)"], "Examples": ["mysql> SELECT name, address, MAX(age) FROM t GROUP BY name;\nERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP\nBY clause and contains nonaggregated column 'mydb.t.address' which\nis not functionally dependent on columns in GROUP BY clause; this\nis incompatible with sql_mode=only_full_group_by", "SELECT name, ANY_VALUE(address), MAX(age) FROM t GROUP BY name;", "SELECT age FROM t GROUP BY age-1;", "SELECT ANY_VALUE(age) FROM t GROUP BY age-1;", "mysql> SELECT name, MAX(age) FROM t;\nERROR 1140 (42000): In aggregated query without GROUP BY, expression\n#1 of SELECT list contains nonaggregated column 'mydb.t.name'; this\nis incompatible with sql_mode=only_full_group_by", "SELECT ANY_VALUE(name), MAX(age) FROM t;"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "DEFAULT()", "Description": ["\nDEFAULT(col_name)\n", "\n          Returns the default value for a table column. An error results\n          if the column has no default value.\n        ", "\n          The use of\n          DEFAULT(col_name)\n          to specify the default value for a named column is permitted\n          only for columns that have a literal default value, not for\n          columns that have an expression default value.\n        ", "Press CTRL+C to copy mysql> UPDATE t SET i = DEFAULT(i)+1 WHERE id < 100;"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html#function_default", "Feature": ["DEFAULT(col_name)"], "Examples": ["mysql> UPDATE t SET i = DEFAULT(i)+1 WHERE id < 100;"], "Category": ["Built-In Functions and Operators", "Miscellaneous Functions"]}
