{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LAG()", "Description": ["\nLAG(expr [,\n            N[,\n            default]])\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the row that lags (precedes) the current row by\n            N rows within its partition. If\n            there is no such row, the return value is\n            default. For example, if\n            N is 3, the return value is\n            default for the first three rows.\n            If N or\n            default are missing, the defaults\n            are 1 and NULL, respectively.\n          ", "\nN must be a literal nonnegative\n            integer. If N is 0,\n            expr is evaluated for the current\n            row.\n          ", "\n            Beginning with MySQL 8.0.22, N\n            cannot be NULL. In addition, it must now\n            be an integer in the range 0 to\n            263,\n            inclusive, in any of the following forms:\n", "\n\n                an unsigned integer constant literal\n              \n                a positional parameter marker (?)\n              \n                a user-defined variable\n              \n                a local variable in a stored routine\n\n", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\nLAG() (and the similar\n            LEAD() function) are often\n            used to compute differences between rows. The following\n            query shows a set of time-ordered observations and, for each\n            one, the LAG() and\n            LEAD() values from the\n            adjoining rows, as well as the differences between the\n            current and adjoining rows:\n          ", "Press CTRL+C to copy mysql> SELECT\n         t, val,\n         LAG(val)        OVER w AS 'lag',\n         LEAD(val)       OVER w AS 'lead',\n         val - LAG(val)  OVER w AS 'lag diff',\n         val - LEAD(val) OVER w AS 'lead diff'\n       FROM series\n       WINDOW w AS (ORDER BY t);\n+----------+------+------+------+----------+-----------+\n| t        | val  | lag  | lead | lag diff | lead diff |\n+----------+------+------+------+----------+-----------+\n| 12:00:00 |  100 | NULL |  125 |     NULL |       -25 |\n| 13:00:00 |  125 |  100 |  132 |       25 |        -7 |\n| 14:00:00 |  132 |  125 |  145 |        7 |       -13 |\n| 15:00:00 |  145 |  132 |  140 |       13 |         5 |\n| 16:00:00 |  140 |  145 |  150 |       -5 |       -10 |\n| 17:00:00 |  150 |  140 |  200 |       10 |       -50 |\n| 18:00:00 |  200 |  150 | NULL |       50 |      NULL |\n+----------+------+------+------+----------+-----------+", "\n            In the example, the LAG() and\n            LEAD() calls use the default\n            N and\n            default values of 1 and\n            NULL, respectively.\n          ", "\n            The first row shows what happens when there is no previous\n            row for LAG(): The function\n            returns the default value (in\n            this case, NULL). The last row shows the\n            same thing when there is no next row for\n            LEAD().\n          ", "\nLAG() and\n            LEAD() also serve to compute\n            sums rather than differences. Consider this data set, which\n            contains the first few numbers of the Fibonacci series:\n          ", "Press CTRL+C to copy mysql> SELECT n FROM fib ORDER BY n;\n+------+\n| n    |\n+------+\n|    1 |\n|    1 |\n|    2 |\n|    3 |\n|    5 |\n|    8 |\n+------+", "\n            The following query shows the\n            LAG() and\n            LEAD() values for the rows\n            adjacent to the current row. It also uses those functions to\n            add to the current row value the values from the preceding\n            and following rows. The effect is to generate the next\n            number in the Fibonacci series, and the next number after\n            that:\n          ", "Press CTRL+C to copy mysql> SELECT\n         n,\n         LAG(n, 1, 0)      OVER w AS 'lag',\n         LEAD(n, 1, 0)     OVER w AS 'lead',\n         n + LAG(n, 1, 0)  OVER w AS 'next_n',\n         n + LEAD(n, 1, 0) OVER w AS 'next_next_n'\n       FROM fib\n       WINDOW w AS (ORDER BY n);\n+------+------+------+--------+-------------+\n| n    | lag  | lead | next_n | next_next_n |\n+------+------+------+--------+-------------+\n|    1 |    0 |    1 |      1 |           2 |\n|    1 |    1 |    2 |      2 |           3 |\n|    2 |    1 |    3 |      3 |           5 |\n|    3 |    2 |    5 |      5 |           8 |\n|    5 |    3 |    8 |      8 |          13 |\n|    8 |    5 |    0 |     13 |           8 |\n+------+------+------+--------+-------------+", "\n            One way to generate the initial set of Fibonacci numbers is\n            to use a recursive common table expression. For an example,\n            see\n            Fibonacci Series Generation.\n          ", "\n            Beginning with MySQL 8.0.22, you cannot use a negative value\n            for the rows argument of this function.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_lag", "Feature": ["LAG(expr [,\n            N[,\n            default]])"], "Examples": ["mysql> SELECT\n         t, val,\n         LAG(val)        OVER w AS 'lag',\n         LEAD(val)       OVER w AS 'lead',\n         val - LAG(val)  OVER w AS 'lag diff',\n         val - LEAD(val) OVER w AS 'lead diff'\n       FROM series\n       WINDOW w AS (ORDER BY t);\n+----------+------+------+------+----------+-----------+\n| t        | val  | lag  | lead | lag diff | lead diff |\n+----------+------+------+------+----------+-----------+\n| 12:00:00 |  100 | NULL |  125 |     NULL |       -25 |\n| 13:00:00 |  125 |  100 |  132 |       25 |        -7 |\n| 14:00:00 |  132 |  125 |  145 |        7 |       -13 |\n| 15:00:00 |  145 |  132 |  140 |       13 |         5 |\n| 16:00:00 |  140 |  145 |  150 |       -5 |       -10 |\n| 17:00:00 |  150 |  140 |  200 |       10 |       -50 |\n| 18:00:00 |  200 |  150 | NULL |       50 |      NULL |\n+----------+------+------+------+----------+-----------+", "mysql> SELECT n FROM fib ORDER BY n;\n+------+\n| n    |\n+------+\n|    1 |\n|    1 |\n|    2 |\n|    3 |\n|    5 |\n|    8 |\n+------+", "mysql> SELECT\n         n,\n         LAG(n, 1, 0)      OVER w AS 'lag',\n         LEAD(n, 1, 0)     OVER w AS 'lead',\n         n + LAG(n, 1, 0)  OVER w AS 'next_n',\n         n + LEAD(n, 1, 0) OVER w AS 'next_next_n'\n       FROM fib\n       WINDOW w AS (ORDER BY n);\n+------+------+------+--------+-------------+\n| n    | lag  | lead | next_n | next_next_n |\n+------+------+------+--------+-------------+\n|    1 |    0 |    1 |      1 |           2 |\n|    1 |    1 |    2 |      2 |           3 |\n|    2 |    1 |    3 |      3 |           5 |\n|    3 |    2 |    5 |      5 |           8 |\n|    5 |    3 |    8 |      8 |          13 |\n|    8 |    5 |    0 |     13 |           8 |\n+------+------+------+--------+-------------+"], "Category": ["Built-In Functions and Operators", "Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LAST_VALUE()", "Description": ["\nLAST_VALUE(expr)\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the last row of the window frame.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            For an example, see the\n            FIRST_VALUE() function\n            description.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_last-value", "Feature": ["LAST_VALUE(expr)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LEAD()", "Description": ["\nLEAD(expr [,\n            N[,\n            default]])\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the row that leads (follows) the current row by\n            N rows within its partition. If\n            there is no such row, the return value is\n            default. For example, if\n            N is 3, the return value is\n            default for the last three rows.\n            If N or\n            default are missing, the defaults\n            are 1 and NULL, respectively.\n          ", "\nN must be a literal nonnegative\n            integer. If N is 0,\n            expr is evaluated for the current\n            row.\n          ", "\n            Beginning with MySQL 8.0.22, N\n            cannot be NULL. In addition, it must now\n            be an integer in the range 0 to\n            263,\n            inclusive, in any of the following forms:\n", "\n\n                an unsigned integer constant literal\n              \n                a positional parameter marker (?)\n              \n                a user-defined variable\n              \n                a local variable in a stored routine\n\n", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            For an example, see the LAG()\n            function description.\n          ", "\n            In MySQL 8.0.22 and later, use of a negative value for the\n            rows argument of this function is not permitted.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_lead", "Feature": ["LEAD(expr [,\n            N[,\n            default]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "NTH_VALUE()", "Description": ["\nNTH_VALUE(expr,\n            N)\n            [from_first_last]\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the N-th row of the window frame.\n            If there is no such row, the return value is\n            NULL.\n          ", "\nN must be a literal positive\n            integer.\n          ", "\nfrom_first_last is part of the\n            SQL standard, but the MySQL implementation permits only\n            FROM FIRST (which is also the default).\n            This means that calculations begin at the first row of the\n            window. FROM LAST is parsed, but produces\n            an error. To obtain the same effect as FROM\n            LAST (begin calculations at the last row of the\n            window), use ORDER BY to sort in reverse\n            order.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            For an example, see the\n            FIRST_VALUE() function\n            description.\n          ", "\n            In MySQL 8.0.22 and later, you cannot use\n            NULL for the row argument of this\n            function.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_nth-value", "Feature": ["NTH_VALUE(expr,\n            N)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "NTILE()", "Description": ["\nNTILE(N)\nover_clause\n", "\n            Divides a partition into N groups\n            (buckets), assigns each row in the partition its bucket\n            number, and returns the bucket number of the current row\n            within its partition. For example, if\n            N is 4,\n            NTILE() divides rows into four buckets.\n            If N is 100,\n            NTILE() divides rows into 100 buckets.\n          ", "\nN must be a literal positive\n            integer. Bucket number return values range from 1 to\n            N.\n          ", "\n            Beginning with MySQL 8.0.22, N\n            cannot be NULL, and must be an integer in\n            the range 0 to\n            263,\n            inclusive, in any of the following forms:\n", "\n\n                an unsigned integer constant literal\n              \n                a positional parameter marker (?)\n              \n                a user-defined variable\n              \n                a local variable in a stored routine\n\n", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            The following query shows, for the set of values in the\n            val column, the percentile values\n            resulting from dividing the rows into two or four groups.\n            For reference, the query also displays row numbers using\n            ROW_NUMBER():\n          ", "Press CTRL+C to copy mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         NTILE(2)     OVER w AS 'ntile2',\n         NTILE(4)     OVER w AS 'ntile4'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------+--------+\n| val  | row_number | ntile2 | ntile4 |\n+------+------------+--------+--------+\n|    1 |          1 |      1 |      1 |\n|    1 |          2 |      1 |      1 |\n|    2 |          3 |      1 |      1 |\n|    3 |          4 |      1 |      2 |\n|    3 |          5 |      1 |      2 |\n|    3 |          6 |      2 |      3 |\n|    4 |          7 |      2 |      3 |\n|    4 |          8 |      2 |      4 |\n|    5 |          9 |      2 |      4 |\n+------+------------+--------+--------+", "\n            Beginning with MySQL 8.0.22, the construct\n            NTILE(NULL) is no longer permitted.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_ntile", "Feature": ["NTILE(N)"], "Examples": ["mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         NTILE(2)     OVER w AS 'ntile2',\n         NTILE(4)     OVER w AS 'ntile4'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------+--------+\n| val  | row_number | ntile2 | ntile4 |\n+------+------------+--------+--------+\n|    1 |          1 |      1 |      1 |\n|    1 |          2 |      1 |      1 |\n|    2 |          3 |      1 |      1 |\n|    3 |          4 |      1 |      2 |\n|    3 |          5 |      1 |      2 |\n|    3 |          6 |      2 |      3 |\n|    4 |          7 |      2 |      3 |\n|    4 |          8 |      2 |      4 |\n|    5 |          9 |      2 |      4 |\n+------+------------+--------+--------+"], "Category": ["Built-In Functions and Operators", "Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "PERCENT_RANK()", "Description": ["\nPERCENT_RANK()\nover_clause\n", "\n            Returns the percentage of partition values less than the\n            value in the current row, excluding the highest value.\n            Return values range from 0 to 1 and represent the row\n            relative rank, calculated as the result of this formula,\n            where rank is the row rank and\n            rows is the number of partition\n            rows:\n          ", "Press CTRL+C to copy (rank - 1) / (rows - 1)", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            For an example, see the\n            CUME_DIST() function\n            description.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_percent-rank", "Feature": ["PERCENT_RANK()"], "Examples": [], "Category": ["Built-In Functions and Operators", "Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "RANK()", "Description": ["\nRANK()\nover_clause\n", "\n            Returns the rank of the current row within its partition,\n            with gaps. Peers are considered ties and receive the same\n            rank. This function does not assign consecutive ranks to\n            peer groups if groups of size greater than one exist; the\n            result is noncontiguous rank numbers.\n          ", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            The following query shows the difference between\n            RANK(), which produces ranks\n            with gaps, and DENSE_RANK(),\n            which produces ranks without gaps. The query shows rank\n            values for each member of a set of values in the\n            val column, which contains some\n            duplicates. RANK() assigns\n            peers (the duplicates) the same rank value, and the next\n            greater value has a rank higher by the number of peers minus\n            one. DENSE_RANK() also\n            assigns peers the same rank value, but the next higher value\n            has a rank one greater. For reference, the query also\n            displays row numbers using\n            ROW_NUMBER():\n          ", "Press CTRL+C to copy mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         RANK()       OVER w AS 'rank',\n         DENSE_RANK() OVER w AS 'dense_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+------+------------+\n| val  | row_number | rank | dense_rank |\n+------+------------+------+------------+\n|    1 |          1 |    1 |          1 |\n|    1 |          2 |    1 |          1 |\n|    2 |          3 |    3 |          2 |\n|    3 |          4 |    4 |          3 |\n|    3 |          5 |    4 |          3 |\n|    3 |          6 |    4 |          3 |\n|    4 |          7 |    7 |          4 |\n|    4 |          8 |    7 |          4 |\n|    5 |          9 |    9 |          5 |\n+------+------------+------+------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_rank", "Feature": ["RANK()"], "Examples": ["mysql> SELECT\n         val,\n         ROW_NUMBER() OVER w AS 'row_number',\n         RANK()       OVER w AS 'rank',\n         DENSE_RANK() OVER w AS 'dense_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+------+------------+\n| val  | row_number | rank | dense_rank |\n+------+------------+------+------------+\n|    1 |          1 |    1 |          1 |\n|    1 |          2 |    1 |          1 |\n|    2 |          3 |    3 |          2 |\n|    3 |          4 |    4 |          3 |\n|    3 |          5 |    4 |          3 |\n|    3 |          6 |    4 |          3 |\n|    4 |          7 |    7 |          4 |\n|    4 |          8 |    7 |          4 |\n|    5 |          9 |    9 |          5 |\n+------+------------+------+------------+"], "Category": ["Built-In Functions and Operators", "Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ROW_NUMBER()", "Description": ["\nROW_NUMBER()\nover_clause\n", "\n            Returns the number of the current row within its partition.\n            Rows numbers range from 1 to the number of partition rows.\n          ", "\nORDER BY affects the order in which rows\n            are numbered. Without ORDER BY, row\n            numbering is nondeterministic.\n          ", "\nROW_NUMBER() assigns peers\n            different row numbers. To assign peers the same value, use\n            RANK() or\n            DENSE_RANK(). For an example,\n            see the RANK() function\n            description.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number", "Feature": ["ROW_NUMBER()"], "Examples": [], "Category": ["Built-In Functions and Operators", "Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "CUME_DIST()", "Description": ["\nCUME_DIST()\nover_clause\n", "\n            Returns the cumulative distribution of a value within a\n            group of values; that is, the percentage of partition values\n            less than or equal to the value in the current row. This\n            represents the number of rows preceding or peer with the\n            current row in the window ordering of the window partition\n            divided by the total number of rows in the window partition.\n            Return values range from 0 to 1.\n          ", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers and\n            have value\n            N/N =\n            1, where N is the partition size.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ", "\n            The following query shows, for the set of values in the\n            val column, the\n            CUME_DIST() value for each row, as well\n            as the percentage rank value returned by the similar\n            PERCENT_RANK() function. For reference,\n            the query also displays row numbers using\n            ROW_NUMBER():\n          ", "Press CTRL+C to copy mysql> SELECT\n         val,\n         ROW_NUMBER()   OVER w AS 'row_number',\n         CUME_DIST()    OVER w AS 'cume_dist',\n         PERCENT_RANK() OVER w AS 'percent_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------------------+--------------+\n| val  | row_number | cume_dist          | percent_rank |\n+------+------------+--------------------+--------------+\n|    1 |          1 | 0.2222222222222222 |            0 |\n|    1 |          2 | 0.2222222222222222 |            0 |\n|    2 |          3 | 0.3333333333333333 |         0.25 |\n|    3 |          4 | 0.6666666666666666 |        0.375 |\n|    3 |          5 | 0.6666666666666666 |        0.375 |\n|    3 |          6 | 0.6666666666666666 |        0.375 |\n|    4 |          7 | 0.8888888888888888 |         0.75 |\n|    4 |          8 | 0.8888888888888888 |         0.75 |\n|    5 |          9 |                  1 |            1 |\n+------+------------+--------------------+--------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_cume-dist", "Feature": ["CUME_DIST()"], "Examples": ["mysql> SELECT\n         val,\n         ROW_NUMBER()   OVER w AS 'row_number',\n         CUME_DIST()    OVER w AS 'cume_dist',\n         PERCENT_RANK() OVER w AS 'percent_rank'\n       FROM numbers\n       WINDOW w AS (ORDER BY val);\n+------+------------+--------------------+--------------+\n| val  | row_number | cume_dist          | percent_rank |\n+------+------------+--------------------+--------------+\n|    1 |          1 | 0.2222222222222222 |            0 |\n|    1 |          2 | 0.2222222222222222 |            0 |\n|    2 |          3 | 0.3333333333333333 |         0.25 |\n|    3 |          4 | 0.6666666666666666 |        0.375 |\n|    3 |          5 | 0.6666666666666666 |        0.375 |\n|    3 |          6 | 0.6666666666666666 |        0.375 |\n|    4 |          7 | 0.8888888888888888 |         0.75 |\n|    4 |          8 | 0.8888888888888888 |         0.75 |\n|    5 |          9 |                  1 |            1 |\n+------+------------+--------------------+--------------+"], "Category": ["Built-In Functions and Operators", "Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "DENSE_RANK()", "Description": ["\nDENSE_RANK()\nover_clause\n", "\n            Returns the rank of the current row within its partition,\n            without gaps. Peers are considered ties and receive the same\n            rank. This function assigns consecutive ranks to peer\n            groups; the result is that groups of size greater than one\n            do not produce noncontiguous rank numbers. For an example,\n            see the RANK() function\n            description.\n          ", "\n            This function should be used with ORDER\n            BY to sort partition rows into the desired order.\n            Without ORDER BY, all rows are peers.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_dense-rank", "Feature": ["DENSE_RANK()"], "Examples": [], "Category": ["Built-In Functions and Operators", "Window Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "FIRST_VALUE()", "Description": ["\nFIRST_VALUE(expr)\n            [null_treatment]\n            over_clause\n", "\n            Returns the value of expr from\n            the first row of the window frame.\n          ", "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ", "\n            The following query demonstrates\n            FIRST_VALUE(),\n            LAST_VALUE(), and two\n            instances of NTH_VALUE():\n          ", "Press CTRL+C to copy mysql> SELECT\n         time, subject, val,\n         FIRST_VALUE(val)  OVER w AS 'first',\n         LAST_VALUE(val)   OVER w AS 'last',\n         NTH_VALUE(val, 2) OVER w AS 'second',\n         NTH_VALUE(val, 4) OVER w AS 'fourth'\n       FROM observations\n       WINDOW w AS (PARTITION BY subject ORDER BY time\n                    ROWS UNBOUNDED PRECEDING);\n+----------+---------+------+-------+------+--------+--------+\n| time     | subject | val  | first | last | second | fourth |\n+----------+---------+------+-------+------+--------+--------+\n| 07:00:00 | st113   |   10 |    10 |   10 |   NULL |   NULL |\n| 07:15:00 | st113   |    9 |    10 |    9 |      9 |   NULL |\n| 07:30:00 | st113   |   25 |    10 |   25 |      9 |   NULL |\n| 07:45:00 | st113   |   20 |    10 |   20 |      9 |     20 |\n| 07:00:00 | xh458   |    0 |     0 |    0 |   NULL |   NULL |\n| 07:15:00 | xh458   |   10 |     0 |   10 |     10 |   NULL |\n| 07:30:00 | xh458   |    5 |     0 |    5 |     10 |   NULL |\n| 07:45:00 | xh458   |   30 |     0 |   30 |     10 |     30 |\n| 08:00:00 | xh458   |   25 |     0 |   25 |     10 |     30 |\n+----------+---------+------+-------+------+--------+--------+", "\n            Each function uses the rows in the current frame, which, per\n            the window definition shown, extends from the first\n            partition row to the current row. For the\n            NTH_VALUE() calls, the\n            current frame does not always include the requested row; in\n            such cases, the return value is NULL.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_first-value", "Feature": ["FIRST_VALUE(expr)"], "Examples": ["mysql> SELECT\n         time, subject, val,\n         FIRST_VALUE(val)  OVER w AS 'first',\n         LAST_VALUE(val)   OVER w AS 'last',\n         NTH_VALUE(val, 2) OVER w AS 'second',\n         NTH_VALUE(val, 4) OVER w AS 'fourth'\n       FROM observations\n       WINDOW w AS (PARTITION BY subject ORDER BY time\n                    ROWS UNBOUNDED PRECEDING);\n+----------+---------+------+-------+------+--------+--------+\n| time     | subject | val  | first | last | second | fourth |\n+----------+---------+------+-------+------+--------+--------+\n| 07:00:00 | st113   |   10 |    10 |   10 |   NULL |   NULL |\n| 07:15:00 | st113   |    9 |    10 |    9 |      9 |   NULL |\n| 07:30:00 | st113   |   25 |    10 |   25 |      9 |   NULL |\n| 07:45:00 | st113   |   20 |    10 |   20 |      9 |     20 |\n| 07:00:00 | xh458   |    0 |     0 |    0 |   NULL |   NULL |\n| 07:15:00 | xh458   |   10 |     0 |   10 |     10 |   NULL |\n| 07:30:00 | xh458   |    5 |     0 |    5 |     10 |   NULL |\n| 07:45:00 | xh458   |   30 |     0 |   30 |     10 |     30 |\n| 08:00:00 | xh458   |   25 |     0 |   25 |     10 |     30 |\n+----------+---------+------+-------+------+--------+--------+"], "Category": ["Built-In Functions and Operators", "Window Functions"]}
