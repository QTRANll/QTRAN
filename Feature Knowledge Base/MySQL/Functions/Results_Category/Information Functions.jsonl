{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ICU_VERSION()", "Description": ["\nICU_VERSION()\n", "\n          The version of the International Components for Unicode (ICU)\n          library used to support regular expression operations (see\n          Section\u00a014.8.2, \u201cRegular Expressions\u201d). This function is primarily intended\n          for use in test cases.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_icu-version", "Feature": ["ICU_VERSION()"], "Examples": [], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "BENCHMARK()", "Description": ["\nBENCHMARK(count,expr)\n", "\n          The BENCHMARK() function\n          executes the expression expr\n          repeatedly count times. It may be\n          used to time how quickly MySQL processes the expression. The\n          result value is 0, or\n          NULL for inappropriate arguments such as a\n          NULL or negative repeat count.\n        ", "\n          The intended use is from within the mysql\n          client, which reports query execution times:\n        ", "Press CTRL+C to copy mysql> SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));\n+---------------------------------------------------+\n| BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye')) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+\n1 row in set (4.74 sec)", "\n          The time reported is elapsed time on the client end, not CPU\n          time on the server end. It is advisable to execute\n          BENCHMARK() several times, and\n          to interpret the result with regard to how heavily loaded the\n          server machine is.\n        ", "\nBENCHMARK() is intended for\n          measuring the runtime performance of scalar expressions, which\n          has some significant implications for the way that you use it\n          and interpret the results:\n", "\n\n              Only scalar expressions can be used. Although the\n              expression can be a subquery, it must return a single\n              column and at most a single row. For example,\n              BENCHMARK(10, (SELECT * FROM\n              t)) fails if the table t has\n              more than one column or more than one row.\n            \n              Executing a SELECT\n              expr statement\n              N times differs from executing\n              SELECT BENCHMARK(N,\n              expr) in terms of the\n              amount of overhead involved. The two have very different\n              execution profiles and you should not expect them to take\n              the same amount of time. The former involves the parser,\n              optimizer, table locking, and runtime evaluation\n              N times each. The latter\n              involves only runtime evaluation\n              N times, and all the other\n              components just once. Memory structures already allocated\n              are reused, and runtime optimizations such as local\n              caching of results already evaluated for aggregate\n              functions can alter the results. Use of\n              BENCHMARK() thus measures\n              performance of the runtime component by giving more weight\n              to that component and removing the \u201cnoise\u201d\n              introduced by the network, parser, optimizer, and so\n              forth.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_benchmark", "Feature": ["BENCHMARK(count,expr)"], "Examples": ["mysql> SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));\n+---------------------------------------------------+\n| BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye')) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+\n1 row in set (4.74 sec)"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LAST_INSERT_ID()", "Description": ["\nLAST_INSERT_ID(),\n          LAST_INSERT_ID(expr)\n", "\n          With no argument,\n          LAST_INSERT_ID() returns a\n          BIGINT UNSIGNED (64-bit) value representing\n          the first automatically generated value successfully inserted\n          for an AUTO_INCREMENT column as a result of\n          the most recently executed\n          INSERT statement. The value of\n          LAST_INSERT_ID() remains\n          unchanged if no rows are successfully inserted.\n        ", "\n          With an argument,\n          LAST_INSERT_ID() returns an\n          unsigned integer, or NULL if the argument\n          is NULL.\n        ", "\n          For example, after inserting a row that generates an\n          AUTO_INCREMENT value, you can get the value\n          like this:\n        ", "Press CTRL+C to copy mysql> SELECT LAST_INSERT_ID();\n        -> 195", "\n          The currently executing statement does not affect the value of\n          LAST_INSERT_ID(). Suppose that\n          you generate an AUTO_INCREMENT value with\n          one statement, and then refer to\n          LAST_INSERT_ID() in a\n          multiple-row INSERT statement\n          that inserts rows into a table with its own\n          AUTO_INCREMENT column. The value of\n          LAST_INSERT_ID() remains stable\n          in the second statement; its value for the second and later\n          rows is not affected by the earlier row insertions. (You\n          should be aware that, if you mix references to\n          LAST_INSERT_ID() and\n          LAST_INSERT_ID(expr),\n          the effect is undefined.)\n        ", "\n          If the previous statement returned an error, the value of\n          LAST_INSERT_ID() is undefined.\n          For transactional tables, if the statement is rolled back due\n          to an error, the value of\n          LAST_INSERT_ID() is left\n          undefined. For manual\n          ROLLBACK,\n          the value of LAST_INSERT_ID()\n          is not restored to that before the transaction; it remains as\n          it was at the point of the\n          ROLLBACK.\n        ", "\n          Within the body of a stored routine (procedure or function) or\n          a trigger, the value of\n          LAST_INSERT_ID() changes the\n          same way as for statements executed outside the body of these\n          kinds of objects. The effect of a stored routine or trigger\n          upon the value of\n          LAST_INSERT_ID() that is seen\n          by following statements depends on the kind of routine:\n", "\n\n              If a stored procedure executes statements that change the\n              value of LAST_INSERT_ID(),\n              the changed value is seen by statements that follow the\n              procedure call.\n            \n              For stored functions and triggers that change the value,\n              the value is restored when the function or trigger ends,\n              so statements coming after it do not see a changed value.\n\n", "\n          The ID that was generated is maintained in the server on a\n          per-connection basis. This means that the\n          value returned by the function to a given client is the first\n          AUTO_INCREMENT value generated for most\n          recent statement affecting an\n          AUTO_INCREMENT column by that\n          client. This value cannot be affected by other\n          clients, even if they generate\n          AUTO_INCREMENT values of their own. This\n          behavior ensures that each client can retrieve its own ID\n          without concern for the activity of other clients, and without\n          the need for locks or transactions.\n        ", "\n          The value of LAST_INSERT_ID()\n          is not changed if you set the\n          AUTO_INCREMENT column of a row to a\n          non-\u201cmagic\u201d value (that is, a value that is not\n          NULL and not 0).\n", "\n\nImportant\n\n\n            If you insert multiple rows using a single\n            INSERT statement,\n            LAST_INSERT_ID() returns the\n            value generated for the first inserted\n            row only. The reason for this is to\n            make it possible to reproduce easily the same\n            INSERT statement against some\n            other server.\n\n", "\n          For example:\n        ", "Press CTRL+C to copy mysql> USE test;\n\nmysql> CREATE TABLE t (\n       id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\n       name VARCHAR(10) NOT NULL\n       );\n\nmysql> INSERT INTO t VALUES (NULL, 'Bob');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nmysql> INSERT INTO t VALUES\n       (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n|  2 | Mary |\n|  3 | Jane |\n|  4 | Lisa |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                2 |\n+------------------+", "\n          Although the second INSERT\n          statement inserted three new rows into t,\n          the ID generated for the first of these rows was\n          2, and it is this value that is returned by\n          LAST_INSERT_ID() for the\n          following SELECT statement.\n        ", "\n          If you use INSERT\n          IGNORE and the row is ignored, the\n          LAST_INSERT_ID() remains\n          unchanged from the current value (or 0 is returned if the\n          connection has not yet performed a successful\n          INSERT) and, for non-transactional tables,\n          the AUTO_INCREMENT counter is not\n          incremented. For InnoDB tables, the\n          AUTO_INCREMENT counter is incremented if\n          innodb_autoinc_lock_mode is\n          set to 1 or 2, as\n          demonstrated in the following example:\n        ", "Press CTRL+C to copy mysql> USE test;\n\nmysql> SELECT @@innodb_autoinc_lock_mode;\n+----------------------------+\n| @@innodb_autoinc_lock_mode |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nmysql> CREATE TABLE `t` (\n       `id` INT(11) NOT NULL AUTO_INCREMENT,\n       `val` INT(11) DEFAULT NULL,\n       PRIMARY KEY (`id`),\n       UNIQUE KEY `i1` (`val`)\n       ) ENGINE=InnoDB;\n\n# Insert two rows\n\nmysql> INSERT INTO t (val) VALUES (1),(2);\n\n# With auto_increment_offset=1, the inserted rows\n# result in an AUTO_INCREMENT value of 3\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# LAST_INSERT_ID() returns the first automatically generated\n# value that is successfully inserted for the AUTO_INCREMENT column\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\n# The attempted insertion of duplicate rows fail but errors are ignored\n\nmysql> INSERT IGNORE INTO t (val) VALUES (1),(2);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 2  Duplicates: 2  Warnings: 0\n\n# With innodb_autoinc_lock_mode=1, the AUTO_INCREMENT counter\n# is incremented for the ignored rows\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# The LAST_INSERT_ID is unchanged because the previous insert was unsuccessful\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+", "\n          For more information, see\n          Section\u00a017.6.1.6, \u201cAUTO_INCREMENT Handling in InnoDB\u201d.\n        ", "\n          If expr is given as an argument to\n          LAST_INSERT_ID(), the value of\n          the argument is returned by the function and is remembered as\n          the next value to be returned by\n          LAST_INSERT_ID(). This can be\n          used to simulate sequences:\n", "\n\n              Create a table to hold the sequence counter and initialize\n              it:\n            Press CTRL+C to copy mysql> CREATE TABLE sequence (id INT NOT NULL);\nmysql> INSERT INTO sequence VALUES (0);\n              Use the table to generate sequence numbers like this:\n            Press CTRL+C to copy mysql> UPDATE sequence SET id=LAST_INSERT_ID(id+1);\nmysql> SELECT LAST_INSERT_ID();\n              The UPDATE statement\n              increments the sequence counter and causes the next call\n              to LAST_INSERT_ID() to\n              return the updated value. The\n              SELECT statement retrieves\n              that value. The\n              mysql_insert_id() C API\n              function can also be used to get the value. See\n              mysql_insert_id().\n\n", "\n          You can generate sequences without calling\n          LAST_INSERT_ID(), but the\n          utility of using the function this way is that the ID value is\n          maintained in the server as the last automatically generated\n          value. It is multi-user safe because multiple clients can\n          issue the UPDATE statement and\n          get their own sequence value with the\n          SELECT statement (or\n          mysql_insert_id()), without\n          affecting or being affected by other clients that generate\n          their own sequence values.\n        ", "\n          Note that mysql_insert_id() is\n          only updated after INSERT and\n          UPDATE statements, so you\n          cannot use the C API function to retrieve the value for\n          LAST_INSERT_ID(expr)\n          after executing other SQL statements like\n          SELECT or\n          SET.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_last-insert-id", "Feature": ["LAST_INSERT_ID()", "LAST_INSERT_ID(expr)"], "Examples": ["mysql> SELECT LAST_INSERT_ID();\n        -> 195", "mysql> USE test;\n\nmysql> CREATE TABLE t (\n       id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\n       name VARCHAR(10) NOT NULL\n       );\n\nmysql> INSERT INTO t VALUES (NULL, 'Bob');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nmysql> INSERT INTO t VALUES\n       (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n|  2 | Mary |\n|  3 | Jane |\n|  4 | Lisa |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                2 |\n+------------------+", "mysql> USE test;\n\nmysql> SELECT @@innodb_autoinc_lock_mode;\n+----------------------------+\n| @@innodb_autoinc_lock_mode |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nmysql> CREATE TABLE `t` (\n       `id` INT(11) NOT NULL AUTO_INCREMENT,\n       `val` INT(11) DEFAULT NULL,\n       PRIMARY KEY (`id`),\n       UNIQUE KEY `i1` (`val`)\n       ) ENGINE=InnoDB;\n\n# Insert two rows\n\nmysql> INSERT INTO t (val) VALUES (1),(2);\n\n# With auto_increment_offset=1, the inserted rows\n# result in an AUTO_INCREMENT value of 3\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# LAST_INSERT_ID() returns the first automatically generated\n# value that is successfully inserted for the AUTO_INCREMENT column\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\n# The attempted insertion of duplicate rows fail but errors are ignored\n\nmysql> INSERT IGNORE INTO t (val) VALUES (1),(2);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 2  Duplicates: 2  Warnings: 0\n\n# With innodb_autoinc_lock_mode=1, the AUTO_INCREMENT counter\n# is incremented for the ignored rows\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# The LAST_INSERT_ID is unchanged because the previous insert was unsuccessful\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+", "mysql> CREATE TABLE sequence (id INT NOT NULL);\nmysql> INSERT INTO sequence VALUES (0);", "mysql> UPDATE sequence SET id=LAST_INSERT_ID(id+1);\nmysql> SELECT LAST_INSERT_ID();"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ROLES_GRAPHML()", "Description": ["\nROLES_GRAPHML()\n", "\n          Returns a utf8mb3 string containing a\n          GraphML document representing memory role subgraphs. The\n          ROLE_ADMIN privilege (or the\n          deprecated SUPER privilege) is\n          required to see content in the\n          <graphml> element. Otherwise, the\n          result shows only an empty element:\n        ", "Press CTRL+C to copy mysql> SELECT ROLES_GRAPHML();\n+---------------------------------------------------+\n| ROLES_GRAPHML()                                   |\n+---------------------------------------------------+\n| <?xml version=\"1.0\" encoding=\"UTF-8\"?><graphml /> |\n+---------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_roles-graphml", "Feature": ["ROLES_GRAPHML()"], "Examples": ["mysql> SELECT ROLES_GRAPHML();\n+---------------------------------------------------+\n| ROLES_GRAPHML()                                   |\n+---------------------------------------------------+\n| <?xml version=\"1.0\" encoding=\"UTF-8\"?><graphml /> |\n+---------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ROW_COUNT()", "Description": ["\nROW_COUNT()\n", "\nROW_COUNT() returns a value as follows:\n", "\n\n              DDL statements: 0. This applies to statements such as\n              CREATE TABLE or\n              DROP TABLE.\n            \n              DML statements other than\n              SELECT: The number of\n              affected rows. This applies to statements such as\n              UPDATE,\n              INSERT, or\n              DELETE (as before), but now\n              also to statements such as ALTER\n              TABLE and LOAD\n              DATA.\n            \nSELECT: -1 if the statement\n              returns a result set, or the number of rows\n              \u201caffected\u201d if it does not. For example, for\n              SELECT * FROM t1,\n              ROW_COUNT() returns -1. For\n              SELECT * FROM t1 INTO OUTFILE\n              'file_name',\n              ROW_COUNT() returns the\n              number of rows written to the file.\n            \nSIGNAL statements: 0.\n\n", "\n          For UPDATE statements, the\n          affected-rows value by default is the number of rows actually\n          changed. If you specify the\n          CLIENT_FOUND_ROWS flag to\n          mysql_real_connect() when\n          connecting to mysqld, the affected-rows\n          value is the number of rows \u201cfound\u201d; that is,\n          matched by the WHERE clause.\n        ", "\n          For REPLACE statements, the\n          affected-rows value is 2 if the new row replaced an old row,\n          because in this case, one row was inserted after the duplicate\n          was deleted.\n        ", "\n          For\n          INSERT\n          ... ON DUPLICATE KEY UPDATE statements, the\n          affected-rows value per row is 1 if the row is inserted as a\n          new row, 2 if an existing row is updated, and 0 if an existing\n          row is set to its current values. If you specify the\n          CLIENT_FOUND_ROWS flag, the affected-rows\n          value is 1 (not 0) if an existing row is set to its current\n          values.\n        ", "\n          The ROW_COUNT() value is\n          similar to the value from the\n          mysql_affected_rows() C API\n          function and the row count that the mysql\n          client displays following statement execution.\n        ", "Press CTRL+C to copy mysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t WHERE i IN(1,2);\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           2 |\n+-------------+\n1 row in set (0.00 sec)", "\n\nImportant\n\n\nROW_COUNT() is not replicated\n            reliably using statement-based replication. This function is\n            automatically replicated using row-based replication.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_row-count", "Feature": ["ROW_COUNT()"], "Examples": ["mysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t WHERE i IN(1,2);\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           2 |\n+-------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SCHEMA()", "Description": ["\nSCHEMA()\n", "\n          This function is a synonym for\n          DATABASE().\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_schema", "Feature": ["SCHEMA()"], "Examples": [], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SESSION_USER()", "Description": ["\nSESSION_USER()\n", "\nSESSION_USER() is a synonym for\n          USER().\n        ", "\n          Beginning with MySQL 8.0.34, like\n          USER(), this function can be\n          used for the default value of a\n          VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (SESSION_USER()));"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_session-user", "Feature": ["SESSION_USER()"], "Examples": ["CREATE TABLE t (c VARCHAR(288) DEFAULT (SESSION_USER()));"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "CHARSET()", "Description": ["\nCHARSET(str)\n", "\n          Returns the character set of the string argument, or\n          NULL if the argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT CHARSET('abc');\n        -> 'utf8mb3'\nmysql> SELECT CHARSET(CONVERT('abc' USING latin1));\n        -> 'latin1'\nmysql> SELECT CHARSET(USER());\n        -> 'utf8mb3'"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_charset", "Feature": ["CHARSET(str)"], "Examples": ["mysql> SELECT CHARSET('abc');\n        -> 'utf8mb3'\nmysql> SELECT CHARSET(CONVERT('abc' USING latin1));\n        -> 'latin1'\nmysql> SELECT CHARSET(USER());\n        -> 'utf8mb3'"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "COERCIBILITY()", "Description": ["\nCOERCIBILITY(str)\n", "\n          Returns the collation coercibility value of the string\n          argument.\n        ", "Press CTRL+C to copy mysql> SELECT COERCIBILITY('abc' COLLATE utf8mb4_swedish_ci);\n        -> 0\nmysql> SELECT COERCIBILITY(USER());\n        -> 3\nmysql> SELECT COERCIBILITY('abc');\n        -> 4\nmysql> SELECT COERCIBILITY(1000);\n        -> 5", "\n          The return values have the meanings shown in the following\n          table. Lower values have higher precedence.\n", "\n\nCoercibility\nMeaning\nExample\n\n0\nExplicit collation\nValue with COLLATE clause\n\n1\nNo collation\nConcatenation of strings with different collations\n\n2\nImplicit collation\nColumn value, stored routine parameter or local variable\n\n3\nSystem constant\nUSER() return value\n\n4\nCoercible\nLiteral string\n\n5\nNumeric\nNumeric or temporal value\n\n6\nIgnorable\nNULL or an expression derived from\n                NULL\n\n", "\n          For more information, see\n          Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_coercibility", "Feature": ["COERCIBILITY(str)"], "Examples": ["mysql> SELECT COERCIBILITY('abc' COLLATE utf8mb4_swedish_ci);\n        -> 0\nmysql> SELECT COERCIBILITY(USER());\n        -> 3\nmysql> SELECT COERCIBILITY('abc');\n        -> 4\nmysql> SELECT COERCIBILITY(1000);\n        -> 5"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "SYSTEM_USER()", "Description": ["\nSYSTEM_USER()\n", "\nSYSTEM_USER() is a synonym for\n          USER().\n", "\n\nNote\n\n\n            The SYSTEM_USER() function is\n            distinct from the SYSTEM_USER\n            privilege. The former returns the current MySQL account\n            name. The latter distinguishes the system user and regular\n            user account categories (see\n            Section\u00a08.2.11, \u201cAccount Categories\u201d).\n\n", "\n          Beginning with MySQL 8.0.34, like\n          USER(), this function can be\n          used for the default value of a\n          VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (SYSTEM_USER()));"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_system-user", "Feature": ["SYSTEM_USER()"], "Examples": ["CREATE TABLE t (c VARCHAR(288) DEFAULT (SYSTEM_USER()));"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "COLLATION()", "Description": ["\nCOLLATION(str)\n", "\n          Returns the collation of the string argument.\n        ", "Press CTRL+C to copy mysql> SELECT COLLATION('abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_utf8mb4'abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_latin1'abc');\n        -> 'latin1_swedish_ci'"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_collation", "Feature": ["COLLATION(str)"], "Examples": ["mysql> SELECT COLLATION('abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_utf8mb4'abc');\n        -> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_latin1'abc');\n        -> 'latin1_swedish_ci'"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "USER()", "Description": ["\nUSER()\n", "\n          Returns the current MySQL user name and host name as a string\n          in the utf8mb3 character set.\n        ", "Press CTRL+C to copy mysql> SELECT USER();\n        -> 'davida@localhost'", "\n          The value indicates the user name you specified when\n          connecting to the server, and the client host from which you\n          connected. The value can be different from that of\n          CURRENT_USER().\n        ", "\n          Beginning with MySQL 8.0.34, this function can be used for the\n          default value of a VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (USER()));"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_user", "Feature": ["USER()"], "Examples": ["mysql> SELECT USER();\n        -> 'davida@localhost'", "CREATE TABLE t (c VARCHAR(288) DEFAULT (USER()));"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "VERSION()", "Description": ["\nVERSION()\n", "\n          Returns a string that indicates the MySQL server version. The\n          string uses the utf8mb3 character set. The\n          value might have a suffix in addition to the version number.\n          See the description of the\n          version system variable in\n          Section\u00a07.1.8, \u201cServer System Variables\u201d.\n        ", "\n          This function is unsafe for statement-based replication. A\n          warning is logged if you use this function when\n          binlog_format is set to\n          STATEMENT.\n        ", "Press CTRL+C to copy mysql> SELECT VERSION();\n        -> '8.0.40-standard'"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_version", "Feature": ["VERSION()"], "Examples": ["mysql> SELECT VERSION();\n        -> '8.0.40-standard'"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "CONNECTION_ID()", "Description": ["\nCONNECTION_ID()\n", "\n          Returns the connection ID (thread ID) for the connection.\n          Every connection has an ID that is unique among the set of\n          currently connected clients.\n        ", "\n          The value returned by\n          CONNECTION_ID() is the same\n          type of value as displayed in the ID column\n          of the Information Schema\n          PROCESSLIST table, the\n          Id column of SHOW\n          PROCESSLIST output, and the\n          PROCESSLIST_ID column of the Performance\n          Schema threads table.\n        ", "Press CTRL+C to copy mysql> SELECT CONNECTION_ID();\n        -> 23786", "\n\nWarning\n\n\n            Changing the session value of the\n            pseudo_thread_id system\n            variable changes the value returned by the\n            CONNECTION_ID() function.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_connection-id", "Feature": ["CONNECTION_ID()"], "Examples": ["mysql> SELECT CONNECTION_ID();\n        -> 23786"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "CURRENT_ROLE()", "Description": ["\nCURRENT_ROLE()\n", "\n          Returns a utf8mb3 string containing the\n          current active roles for the current session, separated by\n          commas, or NONE if there are none. The\n          value reflects the setting of the\n          sql_quote_show_create system\n          variable.\n        ", "\n          Suppose that an account is granted roles as follows:\n        ", "Press CTRL+C to copy GRANT 'r1', 'r2' TO 'u1'@'localhost';\nSET DEFAULT ROLE ALL TO 'u1'@'localhost';", "\n          In sessions for u1, the initial\n          CURRENT_ROLE() value names the\n          default account roles. Using SET\n          ROLE changes that:\n        ", "Press CTRL+C to copy mysql> SELECT CURRENT_ROLE();\n+-------------------+\n| CURRENT_ROLE()    |\n+-------------------+\n| `r1`@`%`,`r2`@`%` |\n+-------------------+\nmysql> SET ROLE 'r1'; SELECT CURRENT_ROLE();\n+----------------+\n| CURRENT_ROLE() |\n+----------------+\n| `r1`@`%`       |\n+----------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_current-role", "Feature": ["CURRENT_ROLE()"], "Examples": ["GRANT 'r1', 'r2' TO 'u1'@'localhost';\nSET DEFAULT ROLE ALL TO 'u1'@'localhost';", "mysql> SELECT CURRENT_ROLE();\n+-------------------+\n| CURRENT_ROLE()    |\n+-------------------+\n| `r1`@`%`,`r2`@`%` |\n+-------------------+\nmysql> SET ROLE 'r1'; SELECT CURRENT_ROLE();\n+----------------+\n| CURRENT_ROLE() |\n+----------------+\n| `r1`@`%`       |\n+----------------+"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "CURRENT_USER(), CURRENT_USER", "Description": ["\nCURRENT_USER,\n          CURRENT_USER()\n", "\n          Returns the user name and host name combination for the MySQL\n          account that the server used to authenticate the current\n          client. This account determines your access privileges. The\n          return value is a string in the utf8mb3\n          character set.\n        ", "\n          The value of CURRENT_USER() can\n          differ from the value of\n          USER().\n        ", "Press CTRL+C to copy mysql> SELECT USER();\n        -> 'davida@localhost'\nmysql> SELECT * FROM mysql.user;\nERROR 1044: Access denied for user ''@'localhost' to\ndatabase 'mysql'\nmysql> SELECT CURRENT_USER();\n        -> '@localhost'", "\n          The example illustrates that although the client specified a\n          user name of davida (as indicated by the\n          value of the USER() function),\n          the server authenticated the client using an anonymous user\n          account (as seen by the empty user name part of the\n          CURRENT_USER() value). One way\n          this might occur is that there is no account listed in the\n          grant tables for davida.\n        ", "\n          Within a stored program or view,\n          CURRENT_USER() returns the\n          account for the user who defined the object (as given by its\n          DEFINER value) unless defined with the\n          SQL SECURITY INVOKER characteristic. In the\n          latter case, CURRENT_USER()\n          returns the object's invoker.\n        ", "\n          Triggers and events have no option to define the SQL\n          SECURITY characteristic, so for these objects,\n          CURRENT_USER() returns the\n          account for the user who defined the object. To return the\n          invoker, use USER() or\n          SESSION_USER().\n        ", "\n          The following statements support use of the\n          CURRENT_USER() function to take\n          the place of the name of (and, possibly, a host for) an\n          affected user or a definer; in such cases,\n          CURRENT_USER() is expanded\n          where and as needed:\n", "\n\nDROP USER\n\nRENAME USER\n\nGRANT\n\nREVOKE\n\nCREATE FUNCTION\n\nCREATE PROCEDURE\n\nCREATE TRIGGER\n\nCREATE EVENT\n\nCREATE VIEW\n\nALTER EVENT\n\nALTER VIEW\n\nSET PASSWORD\n\n", "\n          For information about the implications that this expansion of\n          CURRENT_USER() has for\n          replication, see\n          Section\u00a019.5.1.8, \u201cReplication of CURRENT_USER()\u201d.\n        ", "\n          Beginning with MySQL 8.0.34, this function can be used for the\n          default value of a VARCHAR or\n          TEXT column, as shown in the\n          following CREATE TABLE\n          statement:\n        ", "Press CTRL+C to copy CREATE TABLE t (c VARCHAR(288) DEFAULT (CURRENT_USER()));"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_current-user", "Feature": ["CURRENT_USER", "CURRENT_USER()"], "Examples": ["mysql> SELECT USER();\n        -> 'davida@localhost'\nmysql> SELECT * FROM mysql.user;\nERROR 1044: Access denied for user ''@'localhost' to\ndatabase 'mysql'\nmysql> SELECT CURRENT_USER();\n        -> '@localhost'", "CREATE TABLE t (c VARCHAR(288) DEFAULT (CURRENT_USER()));"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "DATABASE()", "Description": ["\nDATABASE()\n", "\n          Returns the default (current) database name as a string in the\n          utf8mb3 character set. If there is no\n          default database, DATABASE()\n          returns NULL. Within a stored routine, the\n          default database is the database that the routine is\n          associated with, which is not necessarily the same as the\n          database that is the default in the calling context.\n        ", "Press CTRL+C to copy mysql> SELECT DATABASE();\n        -> 'test'", "\n          If there is no default database,\n          DATABASE() returns\n          NULL.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_database", "Feature": ["DATABASE()"], "Examples": ["mysql> SELECT DATABASE();\n        -> 'test'"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "FOUND_ROWS()", "Description": ["\nFOUND_ROWS()\n", "\n\nNote\n\n\n            The SQL_CALC_FOUND_ROWS query modifier\n            and accompanying FOUND_ROWS()\n            function are deprecated as of MySQL 8.0.17; expect them to\n            be removed in a future version of MySQL. As a replacement,\n            considering executing your query with\n            LIMIT, and then a second query with\n            COUNT(*) and without\n            LIMIT to determine whether there are\n            additional rows. For example, instead of these queries:\n          Press CTRL+C to copy SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT FOUND_ROWS();\n            Use these queries instead:\n          Press CTRL+C to copy SELECT * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT COUNT(*) FROM tbl_name WHERE id > 100;\nCOUNT(*) is subject to\n            certain optimizations.\n            SQL_CALC_FOUND_ROWS causes some\n            optimizations to be disabled.\n\n", "\n          A SELECT statement may include\n          a LIMIT clause to restrict the number of\n          rows the server returns to the client. In some cases, it is\n          desirable to know how many rows the statement would have\n          returned without the LIMIT, but without\n          running the statement again. To obtain this row count, include\n          an SQL_CALC_FOUND_ROWS option in the\n          SELECT statement, and then\n          invoke FOUND_ROWS() afterward:\n        ", "Press CTRL+C to copy mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n    -> WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();", "\n          The second SELECT returns a\n          number indicating how many rows the first\n          SELECT would have returned had\n          it been written without the LIMIT clause.\n        ", "\n          In the absence of the SQL_CALC_FOUND_ROWS\n          option in the most recent successful\n          SELECT statement,\n          FOUND_ROWS() returns the number\n          of rows in the result set returned by that statement. If the\n          statement includes a LIMIT clause,\n          FOUND_ROWS() returns the number\n          of rows up to the limit. For example,\n          FOUND_ROWS() returns 10 or 60,\n          respectively, if the statement includes LIMIT\n          10 or LIMIT 50, 10.\n        ", "\n          The row count available through\n          FOUND_ROWS() is transient and\n          not intended to be available past the statement following the\n          SELECT SQL_CALC_FOUND_ROWS statement. If\n          you need to refer to the value later, save it:\n        ", "Press CTRL+C to copy mysql> SELECT SQL_CALC_FOUND_ROWS * FROM ... ;\nmysql> SET @rows = FOUND_ROWS();", "\n          If you are using SELECT\n          SQL_CALC_FOUND_ROWS, MySQL must calculate how many\n          rows are in the full result set. However, this is faster than\n          running the query again without LIMIT,\n          because the result set need not be sent to the client.\n        ", "\nSQL_CALC_FOUND_ROWS and\n          FOUND_ROWS() can be useful in\n          situations when you want to restrict the number of rows that a\n          query returns, but also determine the number of rows in the\n          full result set without running the query again. An example is\n          a Web script that presents a paged display containing links to\n          the pages that show other sections of a search result. Using\n          FOUND_ROWS() enables you to\n          determine how many other pages are needed for the rest of the\n          result.\n        ", "\n          The use of SQL_CALC_FOUND_ROWS and\n          FOUND_ROWS() is more complex\n          for UNION statements than for\n          simple SELECT statements,\n          because LIMIT may occur at multiple places\n          in a UNION. It may be applied\n          to individual SELECT statements\n          in the UNION, or global to the\n          UNION result as a whole.\n        ", "\n          The intent of SQL_CALC_FOUND_ROWS for\n          UNION is that it should return\n          the row count that would be returned without a global\n          LIMIT. The conditions for use of\n          SQL_CALC_FOUND_ROWS with\n          UNION are:\n", "\n\n              The SQL_CALC_FOUND_ROWS keyword must\n              appear in the first SELECT\n              of the UNION.\n            \n              The value of FOUND_ROWS()\n              is exact only if\n              UNION ALL\n              is used. If UNION without\n              ALL is used, duplicate removal occurs\n              and the value of\n              FOUND_ROWS() is only\n              approximate.\n            \n              If no LIMIT is present in the\n              UNION,\n              SQL_CALC_FOUND_ROWS is ignored and\n              returns the number of rows in the temporary table that is\n              created to process the\n              UNION.\n\n", "\n          Beyond the cases described here, the behavior of\n          FOUND_ROWS() is undefined (for\n          example, its value following a\n          SELECT statement that fails\n          with an error).\n", "\n\nImportant\n\n\nFOUND_ROWS() is not\n            replicated reliably using statement-based replication. This\n            function is automatically replicated using row-based\n            replication.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_found-rows", "Feature": ["FOUND_ROWS()"], "Examples": ["SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT FOUND_ROWS();", "SELECT * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT COUNT(*) FROM tbl_name WHERE id > 100;", "mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n    -> WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();", "mysql> SELECT SQL_CALC_FOUND_ROWS * FROM ... ;\nmysql> SET @rows = FOUND_ROWS();"], "Category": ["Built-In Functions and Operators", "Information Functions"]}
