{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["GREATEST(value1,value2,...)"], "Description": ["Return the largest argument", "\nGREATEST(value1,value2,...)\n", "\n            With two or more arguments, returns the largest\n            (maximum-valued) argument. The arguments are compared using\n            the same rules as for\n            LEAST().\n          ", "Press CTRL+C to copy mysql> SELECT GREATEST(2,0);\n        -> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n        -> 767.0\nmysql> SELECT GREATEST('B','A','C');\n        -> 'C'", "\nGREATEST() returns\n            NULL if any argument is\n            NULL.\n          "], "Examples": ["mysql> SELECT GREATEST(2,0);\n        -> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n        -> 767.0\nmysql> SELECT GREATEST('B','A','C');\n        -> 'C'"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_greatest"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4 Operators", "14.4.2 Comparison Functions and Operators"], "Feature": ["expr\n            IN (value,...)"], "Description": ["Whether a value is within a set of values", "\nexpr\n            IN (value,...)\n", "\n            Returns 1 (true) if\n            expr is equal to any of the\n            values in the IN() list, else returns\n            0 (false).\n          ", "\n            Type conversion takes place according to the rules described\n            in Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d, applied to all the\n            arguments. If no type conversion is needed for the values in\n            the IN() list, they are all\n            non-JSON constants of the same type, and\n            expr can be compared to each of\n            them as a value of the same type (possibly after type\n            conversion), an optimization takes place. The values the\n            list are sorted and the search for\n            expr is done using a binary\n            search, which makes the IN() operation\n            very quick.\n          ", "Press CTRL+C to copy mysql> SELECT 2 IN (0,3,5,7);\n        -> 0\nmysql> SELECT 'wefwf' IN ('wee','wefwf','weg');\n        -> 1", "\nIN() can be used to compare row\n            constructors:\n          ", "Press CTRL+C to copy mysql> SELECT (3,4) IN ((1,2), (3,4));\n        -> 1\nmysql> SELECT (3,4) IN ((1,2), (3,5));\n        -> 0", "\n            You should never mix quoted and unquoted values in an\n            IN() list because the comparison rules\n            for quoted values (such as strings) and unquoted values\n            (such as numbers) differ. Mixing types may therefore lead to\n            inconsistent results. For example, do not write an\n            IN() expression like this:\n          ", "Press CTRL+C to copy SELECT val1 FROM tbl1 WHERE val1 IN (1,2,'a');", "\n            Instead, write it like this:\n          ", "Press CTRL+C to copy SELECT val1 FROM tbl1 WHERE val1 IN ('1','2','a');", "\n            Implicit type conversion may produce nonintuitive results:\n          ", "Press CTRL+C to copy mysql> SELECT 'a' IN (0), 0 IN ('b');\n        -> 1, 1", "\n            In both cases, the comparison values are converted to\n            floating-point values, yielding 0.0 in each case, and a\n            comparison result of 1 (true).\n          ", "\n            The number of values in the IN() list is\n            only limited by the\n            max_allowed_packet value.\n          ", "\n            To comply with the SQL standard, IN()\n            returns NULL not only if the expression\n            on the left hand side is NULL, but also\n            if no match is found in the list and one of the expressions\n            in the list is NULL.\n          ", "\nIN() syntax can also be used to write\n            certain types of subqueries. See\n            Section\u00a015.2.15.3, \u201cSubqueries with ANY, IN, or SOME\u201d.\n          "], "Examples": ["mysql> SELECT 2 IN (0,3,5,7);\n        -> 0\nmysql> SELECT 'wefwf' IN ('wee','wefwf','weg');\n        -> 1", "mysql> SELECT (3,4) IN ((1,2), (3,4));\n        -> 1\nmysql> SELECT (3,4) IN ((1,2), (3,5));\n        -> 0", "SELECT val1 FROM tbl1 WHERE val1 IN (1,2,'a');", "SELECT val1 FROM tbl1 WHERE val1 IN ('1','2','a');", "mysql> SELECT 'a' IN (0), 0 IN ('b');\n        -> 1, 1"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_in"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["INTERVAL(N,N1,N2,N3,...)"], "Description": ["Return the index of the argument that is less than the first", "\nINTERVAL(N,N1,N2,N3,...)\n", "\n            Returns 0 if N\n            \u2264 N1, 1 if\n            N \u2264\n            N2 and so on, or\n            -1 if N is\n            NULL. All arguments are treated as\n            integers. It is required that N1\n            \u2264 N2 \u2264\n            N3 \u2264 ...\n            \u2264 Nn for this function to work\n            correctly. This is because a binary search is used (very\n            fast).\n          ", "Press CTRL+C to copy mysql> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n        -> 3\nmysql> SELECT INTERVAL(10, 1, 10, 100, 1000);\n        -> 2\nmysql> SELECT INTERVAL(22, 23, 30, 44, 200);\n        -> 0"], "Examples": ["mysql> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n        -> 3\nmysql> SELECT INTERVAL(10, 1, 10, 100, 1000);\n        -> 2\nmysql> SELECT INTERVAL(22, 23, 30, 44, 200);\n        -> 0"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_interval"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["ISNULL(expr)"], "Description": ["Test whether the argument is NULL", "\nISNULL(expr)\n", "\n            If expr is\n            NULL,\n            ISNULL() returns\n            1, otherwise it returns\n            0.\n          ", "Press CTRL+C to copy mysql> SELECT ISNULL(1+1);\n        -> 0\nmysql> SELECT ISNULL(1/0);\n        -> 1", "\nISNULL() can be used instead\n            of = to test\n            whether a value is NULL. (Comparing a\n            value to NULL using\n            = always\n            yields NULL.)\n          ", "\n            The ISNULL() function shares\n            some special behaviors with the\n            IS NULL\n            comparison operator. See the description of\n            IS NULL.\n          "], "Examples": ["mysql> SELECT ISNULL(1+1);\n        -> 0\nmysql> SELECT ISNULL(1/0);\n        -> 1"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_isnull"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["LEAST(value1,value2,...)"], "Description": ["Return the smallest argument", "\nLEAST(value1,value2,...)\n", "\n            With two or more arguments, returns the smallest\n            (minimum-valued) argument. The arguments are compared using\n            the following rules:\n", "\n\n                If any argument is NULL, the result\n                is NULL. No comparison is needed.\n              \n                If all arguments are integer-valued, they are compared\n                as integers.\n              \n                If at least one argument is double precision, they are\n                compared as double-precision values. Otherwise, if at\n                least one argument is a\n                DECIMAL value, they are\n                compared as DECIMAL\n                values.\n              \n                If the arguments comprise a mix of numbers and strings,\n                they are compared as strings.\n              \n                If any argument is a nonbinary (character) string, the\n                arguments are compared as nonbinary strings.\n              \n                In all other cases, the arguments are compared as binary\n                strings.\n\n", "\n            The return type of LEAST() is\n            the aggregated type of the comparison argument types.\n          ", "Press CTRL+C to copy mysql> SELECT LEAST(2,0);\n        -> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n        -> 3.0\nmysql> SELECT LEAST('B','A','C');\n        -> 'A'"], "Examples": ["mysql> SELECT LEAST(2,0);\n        -> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n        -> 3.0\nmysql> SELECT LEAST('B','A','C');\n        -> 'A'"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_least"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4 Operators", "14.4.2 Comparison Functions and Operators"], "Feature": ["expr\n            NOT IN (value,...)"], "Description": ["Whether a value is not within a set of values", "\nexpr\n            NOT IN (value,...)\n", "\n            This is the same as NOT\n            (expr IN\n            (value,...)).\n          "], "Examples": [], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_not-in"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators", "14.8 String Functions and Operators", "14.8.1 String Comparison Functions and Operators"], "Feature": ["STRCMP(expr1,expr2)"], "Description": ["Compare two strings", "\nSTRCMP(expr1,expr2)\n", "\nSTRCMP() returns\n            0 if the strings are the same,\n            -1 if the first argument is smaller than\n            the second according to the current sort order, and\n            NULL if either argument is\n            NULL. It returns 1\n            otherwise.\n          ", "Press CTRL+C to copy mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "\nSTRCMP() performs the\n            comparison using the collation of the arguments.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "\n            If the collations are incompatible, one of the arguments\n            must be converted to be compatible with the other. See\n            Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "Comparison Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html#function_strcmp"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["COALESCE(value,...)"], "Description": ["Return the first non-NULL argument", "\nCOALESCE(value,...)\n", "\n            Returns the first non-NULL value in the\n            list, or NULL if there are no\n            non-NULL values.\n          ", "\n            The return type of COALESCE()\n            is the aggregated type of the argument types.\n          ", "Press CTRL+C to copy mysql> SELECT COALESCE(NULL,1);\n        -> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n        -> NULL"], "Examples": ["mysql> SELECT COALESCE(NULL,1);\n        -> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n        -> NULL"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_coalesce"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["GREATEST(value1,value2,...)"], "Description": ["Return the largest argument", "\nGREATEST(value1,value2,...)\n", "\n            With two or more arguments, returns the largest\n            (maximum-valued) argument. The arguments are compared using\n            the same rules as for\n            LEAST().\n          ", "Press CTRL+C to copy mysql> SELECT GREATEST(2,0);\n        -> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n        -> 767.0\nmysql> SELECT GREATEST('B','A','C');\n        -> 'C'", "\nGREATEST() returns\n            NULL if any argument is\n            NULL.\n          "], "Examples": ["mysql> SELECT GREATEST(2,0);\n        -> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n        -> 767.0\nmysql> SELECT GREATEST('B','A','C');\n        -> 'C'"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_greatest"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4 Operators", "14.4.2 Comparison Functions and Operators"], "Feature": ["expr\n            IN (value,...)"], "Description": ["Whether a value is within a set of values", "\nexpr\n            IN (value,...)\n", "\n            Returns 1 (true) if\n            expr is equal to any of the\n            values in the IN() list, else returns\n            0 (false).\n          ", "\n            Type conversion takes place according to the rules described\n            in Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d, applied to all the\n            arguments. If no type conversion is needed for the values in\n            the IN() list, they are all\n            non-JSON constants of the same type, and\n            expr can be compared to each of\n            them as a value of the same type (possibly after type\n            conversion), an optimization takes place. The values the\n            list are sorted and the search for\n            expr is done using a binary\n            search, which makes the IN() operation\n            very quick.\n          ", "Press CTRL+C to copy mysql> SELECT 2 IN (0,3,5,7);\n        -> 0\nmysql> SELECT 'wefwf' IN ('wee','wefwf','weg');\n        -> 1", "\nIN() can be used to compare row\n            constructors:\n          ", "Press CTRL+C to copy mysql> SELECT (3,4) IN ((1,2), (3,4));\n        -> 1\nmysql> SELECT (3,4) IN ((1,2), (3,5));\n        -> 0", "\n            You should never mix quoted and unquoted values in an\n            IN() list because the comparison rules\n            for quoted values (such as strings) and unquoted values\n            (such as numbers) differ. Mixing types may therefore lead to\n            inconsistent results. For example, do not write an\n            IN() expression like this:\n          ", "Press CTRL+C to copy SELECT val1 FROM tbl1 WHERE val1 IN (1,2,'a');", "\n            Instead, write it like this:\n          ", "Press CTRL+C to copy SELECT val1 FROM tbl1 WHERE val1 IN ('1','2','a');", "\n            Implicit type conversion may produce nonintuitive results:\n          ", "Press CTRL+C to copy mysql> SELECT 'a' IN (0), 0 IN ('b');\n        -> 1, 1", "\n            In both cases, the comparison values are converted to\n            floating-point values, yielding 0.0 in each case, and a\n            comparison result of 1 (true).\n          ", "\n            The number of values in the IN() list is\n            only limited by the\n            max_allowed_packet value.\n          ", "\n            To comply with the SQL standard, IN()\n            returns NULL not only if the expression\n            on the left hand side is NULL, but also\n            if no match is found in the list and one of the expressions\n            in the list is NULL.\n          ", "\nIN() syntax can also be used to write\n            certain types of subqueries. See\n            Section\u00a015.2.15.3, \u201cSubqueries with ANY, IN, or SOME\u201d.\n          "], "Examples": ["mysql> SELECT 2 IN (0,3,5,7);\n        -> 0\nmysql> SELECT 'wefwf' IN ('wee','wefwf','weg');\n        -> 1", "mysql> SELECT (3,4) IN ((1,2), (3,4));\n        -> 1\nmysql> SELECT (3,4) IN ((1,2), (3,5));\n        -> 0", "SELECT val1 FROM tbl1 WHERE val1 IN (1,2,'a');", "SELECT val1 FROM tbl1 WHERE val1 IN ('1','2','a');", "mysql> SELECT 'a' IN (0), 0 IN ('b');\n        -> 1, 1"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_in"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["INTERVAL(N,N1,N2,N3,...)"], "Description": ["Return the index of the argument that is less than the first", "\nINTERVAL(N,N1,N2,N3,...)\n", "\n            Returns 0 if N\n            \u2264 N1, 1 if\n            N \u2264\n            N2 and so on, or\n            -1 if N is\n            NULL. All arguments are treated as\n            integers. It is required that N1\n            \u2264 N2 \u2264\n            N3 \u2264 ...\n            \u2264 Nn for this function to work\n            correctly. This is because a binary search is used (very\n            fast).\n          ", "Press CTRL+C to copy mysql> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n        -> 3\nmysql> SELECT INTERVAL(10, 1, 10, 100, 1000);\n        -> 2\nmysql> SELECT INTERVAL(22, 23, 30, 44, 200);\n        -> 0"], "Examples": ["mysql> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n        -> 3\nmysql> SELECT INTERVAL(10, 1, 10, 100, 1000);\n        -> 2\nmysql> SELECT INTERVAL(22, 23, 30, 44, 200);\n        -> 0"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_interval"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["ISNULL(expr)"], "Description": ["Test whether the argument is NULL", "\nISNULL(expr)\n", "\n            If expr is\n            NULL,\n            ISNULL() returns\n            1, otherwise it returns\n            0.\n          ", "Press CTRL+C to copy mysql> SELECT ISNULL(1+1);\n        -> 0\nmysql> SELECT ISNULL(1/0);\n        -> 1", "\nISNULL() can be used instead\n            of = to test\n            whether a value is NULL. (Comparing a\n            value to NULL using\n            = always\n            yields NULL.)\n          ", "\n            The ISNULL() function shares\n            some special behaviors with the\n            IS NULL\n            comparison operator. See the description of\n            IS NULL.\n          "], "Examples": ["mysql> SELECT ISNULL(1+1);\n        -> 0\nmysql> SELECT ISNULL(1/0);\n        -> 1"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_isnull"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["LEAST(value1,value2,...)"], "Description": ["Return the smallest argument", "\nLEAST(value1,value2,...)\n", "\n            With two or more arguments, returns the smallest\n            (minimum-valued) argument. The arguments are compared using\n            the following rules:\n", "\n\n                If any argument is NULL, the result\n                is NULL. No comparison is needed.\n              \n                If all arguments are integer-valued, they are compared\n                as integers.\n              \n                If at least one argument is double precision, they are\n                compared as double-precision values. Otherwise, if at\n                least one argument is a\n                DECIMAL value, they are\n                compared as DECIMAL\n                values.\n              \n                If the arguments comprise a mix of numbers and strings,\n                they are compared as strings.\n              \n                If any argument is a nonbinary (character) string, the\n                arguments are compared as nonbinary strings.\n              \n                In all other cases, the arguments are compared as binary\n                strings.\n\n", "\n            The return type of LEAST() is\n            the aggregated type of the comparison argument types.\n          ", "Press CTRL+C to copy mysql> SELECT LEAST(2,0);\n        -> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n        -> 3.0\nmysql> SELECT LEAST('B','A','C');\n        -> 'A'"], "Examples": ["mysql> SELECT LEAST(2,0);\n        -> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n        -> 3.0\nmysql> SELECT LEAST('B','A','C');\n        -> 'A'"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_least"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4 Operators", "14.4.2 Comparison Functions and Operators"], "Feature": ["expr\n            NOT IN (value,...)"], "Description": ["Whether a value is not within a set of values", "\nexpr\n            NOT IN (value,...)\n", "\n            This is the same as NOT\n            (expr IN\n            (value,...)).\n          "], "Examples": [], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#operator_not-in"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators", "14.8 String Functions and Operators", "14.8.1 String Comparison Functions and Operators"], "Feature": ["STRCMP(expr1,expr2)"], "Description": ["Compare two strings", "\nSTRCMP(expr1,expr2)\n", "\nSTRCMP() returns\n            0 if the strings are the same,\n            -1 if the first argument is smaller than\n            the second according to the current sort order, and\n            NULL if either argument is\n            NULL. It returns 1\n            otherwise.\n          ", "Press CTRL+C to copy mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "\nSTRCMP() performs the\n            comparison using the collation of the arguments.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "\n            If the collations are incompatible, one of the arguments\n            must be converted to be compatible with the other. See\n            Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "Comparison Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html#function_strcmp"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators"], "Feature": ["COALESCE(value,...)"], "Description": ["Return the first non-NULL argument", "\nCOALESCE(value,...)\n", "\n            Returns the first non-NULL value in the\n            list, or NULL if there are no\n            non-NULL values.\n          ", "\n            The return type of COALESCE()\n            is the aggregated type of the argument types.\n          ", "Press CTRL+C to copy mysql> SELECT COALESCE(NULL,1);\n        -> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n        -> NULL"], "Examples": ["mysql> SELECT COALESCE(NULL,1);\n        -> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n        -> NULL"], "Category": ["Built-In Functions", "Comparison Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_coalesce"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html", "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html", "https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.4.2 Comparison Functions and Operators", "14.8 String Functions and Operators", "14.8.1 String Comparison Functions and Operators"], "Feature": ["STRCMP(expr1,expr2)"], "Description": ["Compare two strings", "\nSTRCMP(expr1,expr2)\n", "\nSTRCMP() returns\n            0 if the strings are the same,\n            -1 if the first argument is smaller than\n            the second according to the current sort order, and\n            NULL if either argument is\n            NULL. It returns 1\n            otherwise.\n          ", "Press CTRL+C to copy mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "\nSTRCMP() performs the\n            comparison using the collation of the arguments.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "\n            If the collations are incompatible, one of the arguments\n            must be converted to be compatible with the other. See\n            Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d.\n          ", "Press CTRL+C to copy mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n|                0 |               -1 |\n+------------------+------------------+", "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "Comparison Functions", "String Functions", "String Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html#function_strcmp"], "Feature Type": ["Function"]}
