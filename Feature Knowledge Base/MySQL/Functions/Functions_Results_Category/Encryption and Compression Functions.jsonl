{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["MD5(str)"], "Description": ["Calculate MD5 checksum", "\nMD5(str)\n", "\n          Calculates an MD5 128-bit checksum for the string. The value\n          is returned as a string of 32 hexadecimal digits, or\n          NULL if the argument was\n          NULL. The return value can, for example, be\n          used as a hash key. See the notes at the beginning of this\n          section about storing hash values efficiently.\n        ", "\n          The return value is a string in the connection character set.\n        ", "\n          If FIPS mode is enabled,\n          MD5() returns\n          NULL. See Section\u00a08.8, \u201cFIPS Support\u201d.\n        ", "Press CTRL+C to copy mysql> SELECT MD5('testing');\n        -> 'ae2b1fca515949e5d54fb22b8ed95575'", "\n          This is the \u201cRSA Data Security, Inc. MD5 Message-Digest\n          Algorithm.\u201d\n", "\n          See the note regarding the MD5 algorithm at the beginning this\n          section.\n        "], "Examples": ["mysql> SELECT MD5('testing');\n        -> 'ae2b1fca515949e5d54fb22b8ed95575'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_md5"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["AES_DECRYPT(crypt_str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])"], "Description": ["Decrypt using AES", "\nAES_DECRYPT(crypt_str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n", "\n          This function decrypts data using the official AES (Advanced\n          Encryption Standard) algorithm. For more information, see the\n          description of AES_ENCRYPT().\n        ", "\n          Statements that use\n          AES_DECRYPT() are unsafe for\n          statement-based replication.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_aes-decrypt"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["AES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])"], "Description": ["Encrypt using AES", "\nAES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n", "\nAES_ENCRYPT() and\n          AES_DECRYPT() implement\n          encryption and decryption of data using the official AES\n          (Advanced Encryption Standard) algorithm, previously known as\n          \u201cRijndael.\u201d The AES standard permits various key\n          lengths. By default these functions implement AES with a\n          128-bit key length. Key lengths of 196 or 256 bits can be\n          used, as described later. The key length is a trade off\n          between performance and security.\n        ", "\nAES_ENCRYPT() encrypts the\n          string str using the key string\n          key_str, and returns a binary\n          string containing the encrypted output.\n          AES_DECRYPT() decrypts the\n          encrypted string crypt_str using\n          the key string key_str, and returns\n          the original (binary) string in hexadecimal format. (To obtain\n          the string as plaintext, cast the result to\n          CHAR. Alternatively, start the\n          mysql client with\n          --skip-binary-as-hex\n          to cause all binary values to be displayed as text.) If either\n          function argument is NULL, the function\n          returns NULL. If\n          AES_DECRYPT() detects invalid\n          data or incorrect padding, it returns NULL.\n          However, it is possible for\n          AES_DECRYPT() to return a\n          non-NULL value (possibly garbage) if the\n          input data or the key is invalid.\n        ", "\n          These functions support the use of a key derivation function\n          (KDF) to create a cryptographically strong secret key from the\n          information passed in key_str. The\n          derived key is used to encrypt and decrypt the data, and it\n          remains in the MySQL Server instance and is not accessible to\n          users. Using a KDF is highly recommended, as it provides\n          better security than specifying your own premade key or\n          deriving it by a simpler method as you use the function. The\n          functions support HKDF (available from OpenSSL 1.1.0), for\n          which you can specify an optional salt and context-specific\n          information to include in the keying material, and PBKDF2\n          (available from OpenSSL 1.0.2), for which you can specify an\n          optional salt and set the number of iterations used to produce\n          the key.\n        ", "\nAES_ENCRYPT() and\n          AES_DECRYPT() permit control of\n          the block encryption mode. The\n          block_encryption_mode system\n          variable controls the mode for block-based encryption\n          algorithms. Its default value is\n          aes-128-ecb, which signifies encryption\n          using a key length of 128 bits and ECB mode. For a description\n          of the permitted values of this variable, see\n          Section\u00a07.1.8, \u201cServer System Variables\u201d. The optional\n          init_vector argument is used to\n          provide an initialization vector for block encryption modes\n          that require it.\n        ", "\n          Statements that use\n          AES_ENCRYPT() or\n          AES_DECRYPT() are unsafe for\n          statement-based replication.\n        ", "\n          If AES_ENCRYPT() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        ", "\n          The arguments for the\n          AES_ENCRYPT() and\n          AES_DECRYPT() functions are as\n          follows:\n", "\n\nstr\n\n                The string for\n                AES_ENCRYPT() to encrypt\n                using the key string key_str,\n                or the key derived from it by the specified KDF. The\n                string can be any length. Padding is automatically added\n                to str so it is a multiple of\n                a block as required by block-based algorithms such as\n                AES. This padding is automatically removed by the\n                AES_DECRYPT() function.\n              \ncrypt_str\n\n                The encrypted string for\n                AES_DECRYPT() to decrypt\n                using the key string key_str,\n                or the key derived from it by the specified KDF. The\n                string can be any length. The length of\n                crypt_str can be calculated\n                from the length of the original string using this\n                formula:\n              Press CTRL+C to copy 16 * (trunc(string_length / 16) + 1)\nkey_str\n\n                The encryption key, or the input keying material that is\n                used as the basis for deriving a key using a key\n                derivation function (KDF). For the same instance of\n                data, use the same value of\n                key_str for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n              \n                If you are using a KDF,\n                key_str can be any arbitrary\n                information such as a password or passphrase. In the\n                further arguments for the function, you specify the KDF\n                name, then add further options to increase the security\n                as appropriate for the KDF.\n              \n                When you use a KDF, the function creates a\n                cryptographically strong secret key from the information\n                passed in key_str and any\n                salt or additional information that you provide in the\n                other arguments. The derived key is used to encrypt and\n                decrypt the data, and it remains in the MySQL Server\n                instance and is not accessible to users. Using a KDF is\n                highly recommended, as it provides better security than\n                specifying your own premade key or deriving it by a\n                simpler method as you use the function.\n              \n                If you are not using a KDF, for a key length of 128\n                bits, the most secure way to pass a key to the\n                key_str argument is to create\n                a truly random 128-bit value and pass it as a binary\n                value. For example:\n              Press CTRL+C to copy INSERT INTO t\nVALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));\n                A passphrase can be used to generate an AES key by\n                hashing the passphrase. For example:\n              Press CTRL+C to copy INSERT INTO t\nVALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));\n                If you exceed the maximum key length of 128 bits, a\n                warning is returned. If you are not using a KDF, do not\n                pass a password or passphrase directly to\n                key_str, hash it first.\n                Previous versions of this documentation suggested the\n                former approach, but it is no longer recommended as the\n                examples shown here are more secure.\n              \ninit_vector\n\n                An initialization vector, for block encryption modes\n                that require it. The\n                block_encryption_mode\n                system variable controls the mode. For the same instance\n                of data, use the same value of\n                init_vector for encryption\n                with AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n\n\n\nNote\n\n\n                  If you are using a KDF, you must specify an\n                  initialization vector or a null string for this\n                  argument, in order to access the later arguments to\n                  define the KDF.\n\n\n\n                For modes that require an initialization vector, it must\n                be 16 bytes or longer (bytes in excess of 16 are\n                ignored). An error occurs if\n                init_vector is missing. For\n                modes that do not require an initialization vector, it\n                is ignored and a warning is generated if\n                init_vector is specified,\n                unless you are using a KDF.\n              \n                The default value for the\n                block_encryption_mode\n                system variable is aes-128-ecb, or\n                ECB mode, which does not require an initialization\n                vector. The alternative permitted block encryption modes\n                CBC, CFB1, CFB8, CFB128, and OFB all require an\n                initialization vector.\n              \n                A random string of bytes to use for the initialization\n                vector can be produced by calling\n                RANDOM_BYTES(16).\n              \nkdf_name\n\n                The name of the key derivation function (KDF) to create\n                a key from the input keying material passed in\n                key_str, and other arguments\n                as appropriate for the KDF. Optional.\n              \n                For the same instance of data, use the same value of\n                kdf_name for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT(). When you\n                specify kdf_name, you must\n                specify init_vector, using\n                either a valid initialization vector, or a null string\n                if the encryption mode does not require an\n                initialization vector.\n              \n                The following values are supported:\n\n\n\nhkdf\n\n                      HKDF, which is available from OpenSSL 1.1.0. HKDF\n                      extracts a pseudorandom key from the keying\n                      material then expands it into additional keys.\n                      With HKDF, you can specify an optional salt\n                      (salt) and\n                      context-specific information such as application\n                      details (info) to\n                      include in the keying material.\n                    \npbkdf2_hmac\n\n                      PBKDF2, which is available from OpenSSL 1.0.2.\n                      PBKDF2 applies a pseudorandom function to the\n                      keying material, and repeats this process a large\n                      number of times to produce the key. With PBKDF2,\n                      you can specify an optional salt\n                      (salt) to include in\n                      the keying material, and set the number of\n                      iterations used to produce the key\n                      (iterations).\n\n\n\n                In this example, HKDF is specified as the key derivation\n                function, and a salt and context information are\n                provided. The argument for the initialization vector is\n                included but is the empty string:\n              Press CTRL+C to copy SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');\n                In this example, PBKDF2 is specified as the key\n                derivation function, a salt is provided, and the number\n                of iterations is doubled from the recommended minimum:\n              Press CTRL+C to copy SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');\nsalt\n\n                A salt to be passed to the key derivation function\n                (KDF). Optional. Both HKDF and PBKDF2 can use salts, and\n                their use is recommended to help prevent attacks based\n                on dictionaries of common passwords or rainbow tables.\n              \n                A salt consists of random data, which for security must\n                be different for each encryption operation. A random\n                string of bytes to use for the salt can be produced by\n                calling RANDOM_BYTES().\n                This example produces a 64-bit salt:\n              Press CTRL+C to copy SET @salt = RANDOM_BYTES(8);\n                For the same instance of data, use the same value of\n                salt for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT(). The salt\n                can safely be stored along with the encrypted data.\n              \ninfo\n\n                Context-specific information for HKDF to include in the\n                keying material, such as information about the\n                application. Optional; available when you specify\n                hkdf as the KDF name. HKDF adds this\n                information to the keying material specified in\n                key_str and the salt\n                specified in salt to produce\n                the key.\n              \n                For the same instance of data, use the same value of\n                info for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n              \niterations\n\n                The iteration count for PBKDF2 to use when producing the\n                key. Optional; available when you specify\n                pbkdf2_hmac as the KDF name. A higher\n                count gives greater resistance to brute-force attacks\n                because it has a greater computational cost for the\n                attacker, but the same is necessarily true for the key\n                derivation process. The default if you do not specify\n                this argument is 1000, which is the minimum recommended\n                by the OpenSSL standard.\n              \n                For the same instance of data, use the same value of\n                iterations for encryption\n                with AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n\n", "Press CTRL+C to copy mysql> SET block_encryption_mode = 'aes-256-cbc';\nmysql> SET @key_str = SHA2('My secret passphrase',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nmysql> SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);\n+-------------------------------------------------------------+\n| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |\n+-------------------------------------------------------------+\n| text                                                        |\n+-------------------------------------------------------------+"], "Examples": ["INSERT INTO t\nVALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));", "INSERT INTO t\nVALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));", "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');", "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');", "SET @salt = RANDOM_BYTES(8);", "mysql> SET block_encryption_mode = 'aes-256-cbc';\nmysql> SET @key_str = SHA2('My secret passphrase',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nmysql> SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);\n+-------------------------------------------------------------+\n| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |\n+-------------------------------------------------------------+\n| text                                                        |\n+-------------------------------------------------------------+"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_aes-encrypt"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["RANDOM_BYTES(len)"], "Description": ["Return a random byte vector", "\nRANDOM_BYTES(len)\n", "\n          This function returns a binary string of\n          len random bytes generated using\n          the random number generator of the SSL library. Permitted\n          values of len range from 1 to 1024.\n          For values outside that range, an error occurs. Returns\n          NULL if len is\n          NULL.\n        ", "\nRANDOM_BYTES() can be used to\n          provide the initialization vector for the\n          AES_DECRYPT() and\n          AES_ENCRYPT() functions. For\n          use in that context, len must be at\n          least 16. Larger values are permitted, but bytes in excess of\n          16 are ignored.\n        ", "\nRANDOM_BYTES() generates a\n          random value, which makes its result nondeterministic.\n          Consequently, statements that use this function are unsafe for\n          statement-based replication.\n        ", "\n          If RANDOM_BYTES() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_random-bytes"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["SHA1(str)"], "Description": ["Calculate an SHA-1 160-bit checksum", "\nSHA1(str),\n          SHA(str)\n", "\n          Calculates an SHA-1 160-bit checksum for the string, as\n          described in RFC 3174 (Secure Hash Algorithm). The value is\n          returned as a string of 40 hexadecimal digits, or\n          NULL if the argument is\n          NULL. One of the possible uses for this\n          function is as a hash key. See the notes at the beginning of\n          this section about storing hash values efficiently.\n          SHA() is\n          synonymous with SHA1().\n        ", "\n          The return value is a string in the connection character set.\n        ", "Press CTRL+C to copy mysql> SELECT SHA1('abc');\n        -> 'a9993e364706816aba3e25717850c26c9cd0d89d'", "\nSHA1() can be considered a\n          cryptographically more secure equivalent of\n          MD5(). However, see the note\n          regarding the MD5 and SHA-1 algorithms at the beginning this\n          section.\n        "], "Examples": ["mysql> SELECT SHA1('abc');\n        -> 'a9993e364706816aba3e25717850c26c9cd0d89d'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_sha1"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["SHA2(str,\n          hash_length)"], "Description": ["Calculate an SHA-2 checksum", "\nSHA2(str,\n          hash_length)\n", "\n          Calculates the SHA-2 family of hash functions (SHA-224,\n          SHA-256, SHA-384, and SHA-512). The first argument is the\n          plaintext string to be hashed. The second argument indicates\n          the desired bit length of the result, which must have a value\n          of 224, 256, 384, 512, or 0 (which is equivalent to 256). If\n          either argument is NULL or the hash length\n          is not one of the permitted values, the return value is\n          NULL. Otherwise, the function result is a\n          hash value containing the desired number of bits. See the\n          notes at the beginning of this section about storing hash\n          values efficiently.\n        ", "\n          The return value is a string in the connection character set.\n        ", "Press CTRL+C to copy mysql> SELECT SHA2('abc', 224);\n        -> '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7'", "\n          This function works only if MySQL has been configured with SSL\n          support. See Section\u00a08.3, \u201cUsing Encrypted Connections\u201d.\n        ", "\nSHA2() can be considered\n          cryptographically more secure than\n          MD5() or\n          SHA1().\n        "], "Examples": ["mysql> SELECT SHA2('abc', 224);\n        -> '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_sha2"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["STATEMENT_DIGEST(statement)"], "Description": ["Compute statement digest hash value", "\nSTATEMENT_DIGEST(statement)\n", "\n          Given an SQL statement as a string, returns the statement\n          digest hash value as a string in the connection character set,\n          or NULL if the argument is\n          NULL. The related\n          STATEMENT_DIGEST_TEXT()\n          function returns the normalized statement digest. For\n          information about statement digesting, see\n          Section\u00a029.10, \u201cPerformance Schema Statement Digests and Sampling\u201d.\n        ", "\n          Both functions use the MySQL parser to parse the statement. If\n          parsing fails, an error occurs. The error message includes the\n          parse error only if the statement is provided as a literal\n          string.\n        ", "\n          The max_digest_length system\n          variable determines the maximum number of bytes available to\n          these functions for computing normalized statement digests.\n        ", "Press CTRL+C to copy mysql> SET @stmt = 'SELECT * FROM mytable WHERE cola = 10 AND colb = 20';\nmysql> SELECT STATEMENT_DIGEST(@stmt);\n+------------------------------------------------------------------+\n| STATEMENT_DIGEST(@stmt)                                          |\n+------------------------------------------------------------------+\n| 3bb95eeade896657c4526e74ff2a2862039d0a0fe8a9e7155b5fe492cbd78387 |\n+------------------------------------------------------------------+\nmysql> SELECT STATEMENT_DIGEST_TEXT(@stmt);\n+----------------------------------------------------------+\n| STATEMENT_DIGEST_TEXT(@stmt)                             |\n+----------------------------------------------------------+\n| SELECT * FROM `mytable` WHERE `cola` = ? AND `colb` = ?  |\n+----------------------------------------------------------+"], "Examples": ["mysql> SET @stmt = 'SELECT * FROM mytable WHERE cola = 10 AND colb = 20';\nmysql> SELECT STATEMENT_DIGEST(@stmt);\n+------------------------------------------------------------------+\n| STATEMENT_DIGEST(@stmt)                                          |\n+------------------------------------------------------------------+\n| 3bb95eeade896657c4526e74ff2a2862039d0a0fe8a9e7155b5fe492cbd78387 |\n+------------------------------------------------------------------+\nmysql> SELECT STATEMENT_DIGEST_TEXT(@stmt);\n+----------------------------------------------------------+\n| STATEMENT_DIGEST_TEXT(@stmt)                             |\n+----------------------------------------------------------+\n| SELECT * FROM `mytable` WHERE `cola` = ? AND `colb` = ?  |\n+----------------------------------------------------------+"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_statement-digest"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["STATEMENT_DIGEST_TEXT(statement)"], "Description": ["Compute normalized statement digest", "\nSTATEMENT_DIGEST_TEXT(statement)\n", "\n          Given an SQL statement as a string, returns the normalized\n          statement digest as a string in the connection character set,\n          or NULL if the argument is\n          NULL. For additional discussion and\n          examples, see the description of the related\n          STATEMENT_DIGEST() function.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_statement-digest-text"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["UNCOMPRESS(string_to_uncompress)"], "Description": ["Uncompress a string compressed", "\nUNCOMPRESS(string_to_uncompress)\n", "\n          Uncompresses a string compressed by the\n          COMPRESS() function. If the\n          argument is not a compressed value, the result is\n          NULL; if\n          string_to_uncompress is\n          NULL, the result is also\n          NULL. This function requires MySQL to have\n          been compiled with a compression library such as\n          zlib. Otherwise, the return value is always\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNCOMPRESS(COMPRESS('any string'));\n        -> 'any string'\nmysql> SELECT UNCOMPRESS('any string');\n        -> NULL"], "Examples": ["mysql> SELECT UNCOMPRESS(COMPRESS('any string'));\n        -> 'any string'\nmysql> SELECT UNCOMPRESS('any string');\n        -> NULL"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_uncompress"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["UNCOMPRESSED_LENGTH(compressed_string)"], "Description": ["Return the length of a string before compression", "\nUNCOMPRESSED_LENGTH(compressed_string)\n", "\n          Returns the length that the compressed string had before being\n          compressed. Returns NULL if\n          compressed_string is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));\n        -> 30"], "Examples": ["mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));\n        -> 30"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_uncompressed-length"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["VALIDATE_PASSWORD_STRENGTH(str)"], "Description": ["Determine strength of password", "\nVALIDATE_PASSWORD_STRENGTH(str)\n", "\n          Given an argument representing a plaintext password, this\n          function returns an integer to indicate how strong the\n          password is, or NULL if the argument is\n          NULL. The return value ranges from 0 (weak)\n          to 100 (strong).\n        ", "\n          Password assessment by\n          VALIDATE_PASSWORD_STRENGTH() is\n          done by the validate_password component. If\n          that component is not installed, the function always returns\n          0. For information about installing\n          validate_password, see\n          Section\u00a08.4.3, \u201cThe Password Validation Component\u201d. To examine or configure\n          the parameters that affect password testing, check or set the\n          system variables implemented by\n          validate_password. See\n          Section\u00a08.4.3.2, \u201cPassword Validation Options and Variables\u201d.\n        ", "\n          The password is subjected to increasingly strict tests and the\n          return value reflects which tests were satisfied, as shown in\n          the following table. In addition, if the\n          validate_password.check_user_name\n          system variable is enabled and the password matches the user\n          name,\n          VALIDATE_PASSWORD_STRENGTH()\n          returns 0 regardless of how other\n          validate_password system variables are set.\n", "\n\nPassword Test\nReturn Value\n\nLength < 4\n0\n\nLength \u2265 4 and <\n                validate_password.length\n25\n\nSatisfies policy 1 (LOW)\n50\n\nSatisfies policy 2 (MEDIUM)\n75\n\nSatisfies policy 3 (STRONG)\n100\n\n"], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_validate-password-strength"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["AES_DECRYPT(crypt_str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])"], "Description": ["Decrypt using AES", "\nAES_DECRYPT(crypt_str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n", "\n          This function decrypts data using the official AES (Advanced\n          Encryption Standard) algorithm. For more information, see the\n          description of AES_ENCRYPT().\n        ", "\n          Statements that use\n          AES_DECRYPT() are unsafe for\n          statement-based replication.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_aes-decrypt"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["AES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])"], "Description": ["Encrypt using AES", "\nAES_ENCRYPT(str,key_str[,init_vector][,kdf_name][,salt][,info\n          | iterations])\n", "\nAES_ENCRYPT() and\n          AES_DECRYPT() implement\n          encryption and decryption of data using the official AES\n          (Advanced Encryption Standard) algorithm, previously known as\n          \u201cRijndael.\u201d The AES standard permits various key\n          lengths. By default these functions implement AES with a\n          128-bit key length. Key lengths of 196 or 256 bits can be\n          used, as described later. The key length is a trade off\n          between performance and security.\n        ", "\nAES_ENCRYPT() encrypts the\n          string str using the key string\n          key_str, and returns a binary\n          string containing the encrypted output.\n          AES_DECRYPT() decrypts the\n          encrypted string crypt_str using\n          the key string key_str, and returns\n          the original (binary) string in hexadecimal format. (To obtain\n          the string as plaintext, cast the result to\n          CHAR. Alternatively, start the\n          mysql client with\n          --skip-binary-as-hex\n          to cause all binary values to be displayed as text.) If either\n          function argument is NULL, the function\n          returns NULL. If\n          AES_DECRYPT() detects invalid\n          data or incorrect padding, it returns NULL.\n          However, it is possible for\n          AES_DECRYPT() to return a\n          non-NULL value (possibly garbage) if the\n          input data or the key is invalid.\n        ", "\n          These functions support the use of a key derivation function\n          (KDF) to create a cryptographically strong secret key from the\n          information passed in key_str. The\n          derived key is used to encrypt and decrypt the data, and it\n          remains in the MySQL Server instance and is not accessible to\n          users. Using a KDF is highly recommended, as it provides\n          better security than specifying your own premade key or\n          deriving it by a simpler method as you use the function. The\n          functions support HKDF (available from OpenSSL 1.1.0), for\n          which you can specify an optional salt and context-specific\n          information to include in the keying material, and PBKDF2\n          (available from OpenSSL 1.0.2), for which you can specify an\n          optional salt and set the number of iterations used to produce\n          the key.\n        ", "\nAES_ENCRYPT() and\n          AES_DECRYPT() permit control of\n          the block encryption mode. The\n          block_encryption_mode system\n          variable controls the mode for block-based encryption\n          algorithms. Its default value is\n          aes-128-ecb, which signifies encryption\n          using a key length of 128 bits and ECB mode. For a description\n          of the permitted values of this variable, see\n          Section\u00a07.1.8, \u201cServer System Variables\u201d. The optional\n          init_vector argument is used to\n          provide an initialization vector for block encryption modes\n          that require it.\n        ", "\n          Statements that use\n          AES_ENCRYPT() or\n          AES_DECRYPT() are unsafe for\n          statement-based replication.\n        ", "\n          If AES_ENCRYPT() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        ", "\n          The arguments for the\n          AES_ENCRYPT() and\n          AES_DECRYPT() functions are as\n          follows:\n", "\n\nstr\n\n                The string for\n                AES_ENCRYPT() to encrypt\n                using the key string key_str,\n                or the key derived from it by the specified KDF. The\n                string can be any length. Padding is automatically added\n                to str so it is a multiple of\n                a block as required by block-based algorithms such as\n                AES. This padding is automatically removed by the\n                AES_DECRYPT() function.\n              \ncrypt_str\n\n                The encrypted string for\n                AES_DECRYPT() to decrypt\n                using the key string key_str,\n                or the key derived from it by the specified KDF. The\n                string can be any length. The length of\n                crypt_str can be calculated\n                from the length of the original string using this\n                formula:\n              Press CTRL+C to copy 16 * (trunc(string_length / 16) + 1)\nkey_str\n\n                The encryption key, or the input keying material that is\n                used as the basis for deriving a key using a key\n                derivation function (KDF). For the same instance of\n                data, use the same value of\n                key_str for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n              \n                If you are using a KDF,\n                key_str can be any arbitrary\n                information such as a password or passphrase. In the\n                further arguments for the function, you specify the KDF\n                name, then add further options to increase the security\n                as appropriate for the KDF.\n              \n                When you use a KDF, the function creates a\n                cryptographically strong secret key from the information\n                passed in key_str and any\n                salt or additional information that you provide in the\n                other arguments. The derived key is used to encrypt and\n                decrypt the data, and it remains in the MySQL Server\n                instance and is not accessible to users. Using a KDF is\n                highly recommended, as it provides better security than\n                specifying your own premade key or deriving it by a\n                simpler method as you use the function.\n              \n                If you are not using a KDF, for a key length of 128\n                bits, the most secure way to pass a key to the\n                key_str argument is to create\n                a truly random 128-bit value and pass it as a binary\n                value. For example:\n              Press CTRL+C to copy INSERT INTO t\nVALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));\n                A passphrase can be used to generate an AES key by\n                hashing the passphrase. For example:\n              Press CTRL+C to copy INSERT INTO t\nVALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));\n                If you exceed the maximum key length of 128 bits, a\n                warning is returned. If you are not using a KDF, do not\n                pass a password or passphrase directly to\n                key_str, hash it first.\n                Previous versions of this documentation suggested the\n                former approach, but it is no longer recommended as the\n                examples shown here are more secure.\n              \ninit_vector\n\n                An initialization vector, for block encryption modes\n                that require it. The\n                block_encryption_mode\n                system variable controls the mode. For the same instance\n                of data, use the same value of\n                init_vector for encryption\n                with AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n\n\n\nNote\n\n\n                  If you are using a KDF, you must specify an\n                  initialization vector or a null string for this\n                  argument, in order to access the later arguments to\n                  define the KDF.\n\n\n\n                For modes that require an initialization vector, it must\n                be 16 bytes or longer (bytes in excess of 16 are\n                ignored). An error occurs if\n                init_vector is missing. For\n                modes that do not require an initialization vector, it\n                is ignored and a warning is generated if\n                init_vector is specified,\n                unless you are using a KDF.\n              \n                The default value for the\n                block_encryption_mode\n                system variable is aes-128-ecb, or\n                ECB mode, which does not require an initialization\n                vector. The alternative permitted block encryption modes\n                CBC, CFB1, CFB8, CFB128, and OFB all require an\n                initialization vector.\n              \n                A random string of bytes to use for the initialization\n                vector can be produced by calling\n                RANDOM_BYTES(16).\n              \nkdf_name\n\n                The name of the key derivation function (KDF) to create\n                a key from the input keying material passed in\n                key_str, and other arguments\n                as appropriate for the KDF. Optional.\n              \n                For the same instance of data, use the same value of\n                kdf_name for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT(). When you\n                specify kdf_name, you must\n                specify init_vector, using\n                either a valid initialization vector, or a null string\n                if the encryption mode does not require an\n                initialization vector.\n              \n                The following values are supported:\n\n\n\nhkdf\n\n                      HKDF, which is available from OpenSSL 1.1.0. HKDF\n                      extracts a pseudorandom key from the keying\n                      material then expands it into additional keys.\n                      With HKDF, you can specify an optional salt\n                      (salt) and\n                      context-specific information such as application\n                      details (info) to\n                      include in the keying material.\n                    \npbkdf2_hmac\n\n                      PBKDF2, which is available from OpenSSL 1.0.2.\n                      PBKDF2 applies a pseudorandom function to the\n                      keying material, and repeats this process a large\n                      number of times to produce the key. With PBKDF2,\n                      you can specify an optional salt\n                      (salt) to include in\n                      the keying material, and set the number of\n                      iterations used to produce the key\n                      (iterations).\n\n\n\n                In this example, HKDF is specified as the key derivation\n                function, and a salt and context information are\n                provided. The argument for the initialization vector is\n                included but is the empty string:\n              Press CTRL+C to copy SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');\n                In this example, PBKDF2 is specified as the key\n                derivation function, a salt is provided, and the number\n                of iterations is doubled from the recommended minimum:\n              Press CTRL+C to copy SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');\nsalt\n\n                A salt to be passed to the key derivation function\n                (KDF). Optional. Both HKDF and PBKDF2 can use salts, and\n                their use is recommended to help prevent attacks based\n                on dictionaries of common passwords or rainbow tables.\n              \n                A salt consists of random data, which for security must\n                be different for each encryption operation. A random\n                string of bytes to use for the salt can be produced by\n                calling RANDOM_BYTES().\n                This example produces a 64-bit salt:\n              Press CTRL+C to copy SET @salt = RANDOM_BYTES(8);\n                For the same instance of data, use the same value of\n                salt for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT(). The salt\n                can safely be stored along with the encrypted data.\n              \ninfo\n\n                Context-specific information for HKDF to include in the\n                keying material, such as information about the\n                application. Optional; available when you specify\n                hkdf as the KDF name. HKDF adds this\n                information to the keying material specified in\n                key_str and the salt\n                specified in salt to produce\n                the key.\n              \n                For the same instance of data, use the same value of\n                info for encryption with\n                AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n              \niterations\n\n                The iteration count for PBKDF2 to use when producing the\n                key. Optional; available when you specify\n                pbkdf2_hmac as the KDF name. A higher\n                count gives greater resistance to brute-force attacks\n                because it has a greater computational cost for the\n                attacker, but the same is necessarily true for the key\n                derivation process. The default if you do not specify\n                this argument is 1000, which is the minimum recommended\n                by the OpenSSL standard.\n              \n                For the same instance of data, use the same value of\n                iterations for encryption\n                with AES_ENCRYPT() and\n                decryption with\n                AES_DECRYPT().\n\n", "Press CTRL+C to copy mysql> SET block_encryption_mode = 'aes-256-cbc';\nmysql> SET @key_str = SHA2('My secret passphrase',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nmysql> SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);\n+-------------------------------------------------------------+\n| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |\n+-------------------------------------------------------------+\n| text                                                        |\n+-------------------------------------------------------------+"], "Examples": ["INSERT INTO t\nVALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));", "INSERT INTO t\nVALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));", "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');", "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');", "SET @salt = RANDOM_BYTES(8);", "mysql> SET block_encryption_mode = 'aes-256-cbc';\nmysql> SET @key_str = SHA2('My secret passphrase',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nmysql> SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);\n+-------------------------------------------------------------+\n| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |\n+-------------------------------------------------------------+\n| text                                                        |\n+-------------------------------------------------------------+"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_aes-encrypt"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["COMPRESS(string_to_compress)"], "Description": ["Return result as a binary string", "\nCOMPRESS(string_to_compress)\n", "\n          Compresses a string and returns the result as a binary string.\n          This function requires MySQL to have been compiled with a\n          compression library such as zlib.\n          Otherwise, the return value is always NULL.\n          The return value is also NULL if\n          string_to_compress is\n          NULL. The compressed string can be\n          uncompressed with UNCOMPRESS().\n        ", "Press CTRL+C to copy mysql> SELECT LENGTH(COMPRESS(REPEAT('a',1000)));\n        -> 21\nmysql> SELECT LENGTH(COMPRESS(''));\n        -> 0\nmysql> SELECT LENGTH(COMPRESS('a'));\n        -> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT('a',16)));\n        -> 15", "\n          The compressed string contents are stored the following way:\n", "\n\n              Empty strings are stored as empty strings.\n            \n              Nonempty strings are stored as a 4-byte length of the\n              uncompressed string (low byte first), followed by the\n              compressed string. If the string ends with space, an extra\n              . character is added to avoid problems\n              with endspace trimming should the result be stored in a\n              CHAR or\n              VARCHAR column. (However,\n              use of nonbinary string data types such as\n              CHAR or\n              VARCHAR to store compressed\n              strings is not recommended anyway because character set\n              conversion may occur. Use a\n              VARBINARY or\n              BLOB binary string column\n              instead.)\n\n", "\n          If COMPRESS() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT LENGTH(COMPRESS(REPEAT('a',1000)));\n        -> 21\nmysql> SELECT LENGTH(COMPRESS(''));\n        -> 0\nmysql> SELECT LENGTH(COMPRESS('a'));\n        -> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT('a',16)));\n        -> 15"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_compress"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["MD5(str)"], "Description": ["Calculate MD5 checksum", "\nMD5(str)\n", "\n          Calculates an MD5 128-bit checksum for the string. The value\n          is returned as a string of 32 hexadecimal digits, or\n          NULL if the argument was\n          NULL. The return value can, for example, be\n          used as a hash key. See the notes at the beginning of this\n          section about storing hash values efficiently.\n        ", "\n          The return value is a string in the connection character set.\n        ", "\n          If FIPS mode is enabled,\n          MD5() returns\n          NULL. See Section\u00a08.8, \u201cFIPS Support\u201d.\n        ", "Press CTRL+C to copy mysql> SELECT MD5('testing');\n        -> 'ae2b1fca515949e5d54fb22b8ed95575'", "\n          This is the \u201cRSA Data Security, Inc. MD5 Message-Digest\n          Algorithm.\u201d\n", "\n          See the note regarding the MD5 algorithm at the beginning this\n          section.\n        "], "Examples": ["mysql> SELECT MD5('testing');\n        -> 'ae2b1fca515949e5d54fb22b8ed95575'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_md5"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["RANDOM_BYTES(len)"], "Description": ["Return a random byte vector", "\nRANDOM_BYTES(len)\n", "\n          This function returns a binary string of\n          len random bytes generated using\n          the random number generator of the SSL library. Permitted\n          values of len range from 1 to 1024.\n          For values outside that range, an error occurs. Returns\n          NULL if len is\n          NULL.\n        ", "\nRANDOM_BYTES() can be used to\n          provide the initialization vector for the\n          AES_DECRYPT() and\n          AES_ENCRYPT() functions. For\n          use in that context, len must be at\n          least 16. Larger values are permitted, but bytes in excess of\n          16 are ignored.\n        ", "\nRANDOM_BYTES() generates a\n          random value, which makes its result nondeterministic.\n          Consequently, statements that use this function are unsafe for\n          statement-based replication.\n        ", "\n          If RANDOM_BYTES() is invoked\n          from within the mysql client, binary\n          strings display using hexadecimal notation, depending on the\n          value of the --binary-as-hex.\n          For more information about that option, see\n          Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_random-bytes"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["SHA1(str)"], "Description": ["Calculate an SHA-1 160-bit checksum", "\nSHA1(str),\n          SHA(str)\n", "\n          Calculates an SHA-1 160-bit checksum for the string, as\n          described in RFC 3174 (Secure Hash Algorithm). The value is\n          returned as a string of 40 hexadecimal digits, or\n          NULL if the argument is\n          NULL. One of the possible uses for this\n          function is as a hash key. See the notes at the beginning of\n          this section about storing hash values efficiently.\n          SHA() is\n          synonymous with SHA1().\n        ", "\n          The return value is a string in the connection character set.\n        ", "Press CTRL+C to copy mysql> SELECT SHA1('abc');\n        -> 'a9993e364706816aba3e25717850c26c9cd0d89d'", "\nSHA1() can be considered a\n          cryptographically more secure equivalent of\n          MD5(). However, see the note\n          regarding the MD5 and SHA-1 algorithms at the beginning this\n          section.\n        "], "Examples": ["mysql> SELECT SHA1('abc');\n        -> 'a9993e364706816aba3e25717850c26c9cd0d89d'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_sha1"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["SHA2(str,\n          hash_length)"], "Description": ["Calculate an SHA-2 checksum", "\nSHA2(str,\n          hash_length)\n", "\n          Calculates the SHA-2 family of hash functions (SHA-224,\n          SHA-256, SHA-384, and SHA-512). The first argument is the\n          plaintext string to be hashed. The second argument indicates\n          the desired bit length of the result, which must have a value\n          of 224, 256, 384, 512, or 0 (which is equivalent to 256). If\n          either argument is NULL or the hash length\n          is not one of the permitted values, the return value is\n          NULL. Otherwise, the function result is a\n          hash value containing the desired number of bits. See the\n          notes at the beginning of this section about storing hash\n          values efficiently.\n        ", "\n          The return value is a string in the connection character set.\n        ", "Press CTRL+C to copy mysql> SELECT SHA2('abc', 224);\n        -> '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7'", "\n          This function works only if MySQL has been configured with SSL\n          support. See Section\u00a08.3, \u201cUsing Encrypted Connections\u201d.\n        ", "\nSHA2() can be considered\n          cryptographically more secure than\n          MD5() or\n          SHA1().\n        "], "Examples": ["mysql> SELECT SHA2('abc', 224);\n        -> '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7'"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_sha2"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["STATEMENT_DIGEST(statement)"], "Description": ["Compute statement digest hash value", "\nSTATEMENT_DIGEST(statement)\n", "\n          Given an SQL statement as a string, returns the statement\n          digest hash value as a string in the connection character set,\n          or NULL if the argument is\n          NULL. The related\n          STATEMENT_DIGEST_TEXT()\n          function returns the normalized statement digest. For\n          information about statement digesting, see\n          Section\u00a029.10, \u201cPerformance Schema Statement Digests and Sampling\u201d.\n        ", "\n          Both functions use the MySQL parser to parse the statement. If\n          parsing fails, an error occurs. The error message includes the\n          parse error only if the statement is provided as a literal\n          string.\n        ", "\n          The max_digest_length system\n          variable determines the maximum number of bytes available to\n          these functions for computing normalized statement digests.\n        ", "Press CTRL+C to copy mysql> SET @stmt = 'SELECT * FROM mytable WHERE cola = 10 AND colb = 20';\nmysql> SELECT STATEMENT_DIGEST(@stmt);\n+------------------------------------------------------------------+\n| STATEMENT_DIGEST(@stmt)                                          |\n+------------------------------------------------------------------+\n| 3bb95eeade896657c4526e74ff2a2862039d0a0fe8a9e7155b5fe492cbd78387 |\n+------------------------------------------------------------------+\nmysql> SELECT STATEMENT_DIGEST_TEXT(@stmt);\n+----------------------------------------------------------+\n| STATEMENT_DIGEST_TEXT(@stmt)                             |\n+----------------------------------------------------------+\n| SELECT * FROM `mytable` WHERE `cola` = ? AND `colb` = ?  |\n+----------------------------------------------------------+"], "Examples": ["mysql> SET @stmt = 'SELECT * FROM mytable WHERE cola = 10 AND colb = 20';\nmysql> SELECT STATEMENT_DIGEST(@stmt);\n+------------------------------------------------------------------+\n| STATEMENT_DIGEST(@stmt)                                          |\n+------------------------------------------------------------------+\n| 3bb95eeade896657c4526e74ff2a2862039d0a0fe8a9e7155b5fe492cbd78387 |\n+------------------------------------------------------------------+\nmysql> SELECT STATEMENT_DIGEST_TEXT(@stmt);\n+----------------------------------------------------------+\n| STATEMENT_DIGEST_TEXT(@stmt)                             |\n+----------------------------------------------------------+\n| SELECT * FROM `mytable` WHERE `cola` = ? AND `colb` = ?  |\n+----------------------------------------------------------+"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_statement-digest"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["STATEMENT_DIGEST_TEXT(statement)"], "Description": ["Compute normalized statement digest", "\nSTATEMENT_DIGEST_TEXT(statement)\n", "\n          Given an SQL statement as a string, returns the normalized\n          statement digest as a string in the connection character set,\n          or NULL if the argument is\n          NULL. For additional discussion and\n          examples, see the description of the related\n          STATEMENT_DIGEST() function.\n        "], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_statement-digest-text"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["UNCOMPRESS(string_to_uncompress)"], "Description": ["Uncompress a string compressed", "\nUNCOMPRESS(string_to_uncompress)\n", "\n          Uncompresses a string compressed by the\n          COMPRESS() function. If the\n          argument is not a compressed value, the result is\n          NULL; if\n          string_to_uncompress is\n          NULL, the result is also\n          NULL. This function requires MySQL to have\n          been compiled with a compression library such as\n          zlib. Otherwise, the return value is always\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNCOMPRESS(COMPRESS('any string'));\n        -> 'any string'\nmysql> SELECT UNCOMPRESS('any string');\n        -> NULL"], "Examples": ["mysql> SELECT UNCOMPRESS(COMPRESS('any string'));\n        -> 'any string'\nmysql> SELECT UNCOMPRESS('any string');\n        -> NULL"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_uncompress"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["UNCOMPRESSED_LENGTH(compressed_string)"], "Description": ["Return the length of a string before compression", "\nUNCOMPRESSED_LENGTH(compressed_string)\n", "\n          Returns the length that the compressed string had before being\n          compressed. Returns NULL if\n          compressed_string is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));\n        -> 30"], "Examples": ["mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));\n        -> 30"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_uncompressed-length"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["VALIDATE_PASSWORD_STRENGTH(str)"], "Description": ["Determine strength of password", "\nVALIDATE_PASSWORD_STRENGTH(str)\n", "\n          Given an argument representing a plaintext password, this\n          function returns an integer to indicate how strong the\n          password is, or NULL if the argument is\n          NULL. The return value ranges from 0 (weak)\n          to 100 (strong).\n        ", "\n          Password assessment by\n          VALIDATE_PASSWORD_STRENGTH() is\n          done by the validate_password component. If\n          that component is not installed, the function always returns\n          0. For information about installing\n          validate_password, see\n          Section\u00a08.4.3, \u201cThe Password Validation Component\u201d. To examine or configure\n          the parameters that affect password testing, check or set the\n          system variables implemented by\n          validate_password. See\n          Section\u00a08.4.3.2, \u201cPassword Validation Options and Variables\u201d.\n        ", "\n          The password is subjected to increasingly strict tests and the\n          return value reflects which tests were satisfied, as shown in\n          the following table. In addition, if the\n          validate_password.check_user_name\n          system variable is enabled and the password matches the user\n          name,\n          VALIDATE_PASSWORD_STRENGTH()\n          returns 0 regardless of how other\n          validate_password system variables are set.\n", "\n\nPassword Test\nReturn Value\n\nLength < 4\n0\n\nLength \u2265 4 and <\n                validate_password.length\n25\n\nSatisfies policy 1 (LOW)\n50\n\nSatisfies policy 2 (MEDIUM)\n75\n\nSatisfies policy 3 (STRONG)\n100\n\n"], "Examples": [], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_validate-password-strength"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.13 Encryption and Compression Functions"], "Feature": ["COMPRESS(string_to_compress)"], "Description": ["Return result as a binary string", "\nCOMPRESS(string_to_compress)\n", "\n          Compresses a string and returns the result as a binary string.\n          This function requires MySQL to have been compiled with a\n          compression library such as zlib.\n          Otherwise, the return value is always NULL.\n          The return value is also NULL if\n          string_to_compress is\n          NULL. The compressed string can be\n          uncompressed with UNCOMPRESS().\n        ", "Press CTRL+C to copy mysql> SELECT LENGTH(COMPRESS(REPEAT('a',1000)));\n        -> 21\nmysql> SELECT LENGTH(COMPRESS(''));\n        -> 0\nmysql> SELECT LENGTH(COMPRESS('a'));\n        -> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT('a',16)));\n        -> 15", "\n          The compressed string contents are stored the following way:\n", "\n\n              Empty strings are stored as empty strings.\n            \n              Nonempty strings are stored as a 4-byte length of the\n              uncompressed string (low byte first), followed by the\n              compressed string. If the string ends with space, an extra\n              . character is added to avoid problems\n              with endspace trimming should the result be stored in a\n              CHAR or\n              VARCHAR column. (However,\n              use of nonbinary string data types such as\n              CHAR or\n              VARCHAR to store compressed\n              strings is not recommended anyway because character set\n              conversion may occur. Use a\n              VARBINARY or\n              BLOB binary string column\n              instead.)\n\n", "\n          If COMPRESS() is invoked from\n          within the mysql client, binary strings\n          display using hexadecimal notation, depending on the value of\n          the --binary-as-hex. For more\n          information about that option, see Section\u00a06.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d.\n        "], "Examples": ["mysql> SELECT LENGTH(COMPRESS(REPEAT('a',1000)));\n        -> 21\nmysql> SELECT LENGTH(COMPRESS(''));\n        -> 0\nmysql> SELECT LENGTH(COMPRESS('a'));\n        -> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT('a',16)));\n        -> 15"], "Category": ["Built-In Functions", "Encryption and Compression Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_compress"], "Feature Type": ["Function"]}
