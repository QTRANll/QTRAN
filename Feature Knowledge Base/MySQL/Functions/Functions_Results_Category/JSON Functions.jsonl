{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY([val[,\n          val] ...])"], "Description": ["Create JSON array", "\nJSON_ARRAY([val[,\n          val] ...])\n", "\n          Evaluates a (possibly empty) list of values and returns a JSON\n          array containing those values.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME());\n+---------------------------------------------+\n| JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME()) |\n+---------------------------------------------+\n| [1, \"abc\", null, true, \"11:30:24.000000\"]   |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME());\n+---------------------------------------------+\n| JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME()) |\n+---------------------------------------------+\n| [1, \"abc\", null, true, \"11:30:24.000000\"]   |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-array"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY_APPEND(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Append data to JSON document", "\nJSON_ARRAY_APPEND(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Appends values to the end of the indicated arrays within a\n          JSON document and returns the result. Returns\n          NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          If a path selects a scalar or object value, that value is\n          autowrapped within an array and the new value is added to that\n          array. Pairs for which the path does not identify any value in\n          the JSON document are ignored.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1]', 1) |\n+----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\"]        |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[0]', 2) |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\"]      |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |\n+-------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\"]         |\n+-------------------------------------+\n\nmysql> SET @j = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');\n+------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.b', 'x')  |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');\n+--------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.c', 'y')    |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n\nmysql> SET @j = '{\"a\": 1}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$', 'z');\n+---------------------------------+\n| JSON_ARRAY_APPEND(@j, '$', 'z') |\n+---------------------------------+\n| [{\"a\": 1}, \"z\"]                 |\n+---------------------------------+"], "Examples": ["mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1]', 1) |\n+----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\"]        |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[0]', 2) |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\"]      |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |\n+-------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\"]         |\n+-------------------------------------+\n\nmysql> SET @j = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');\n+------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.b', 'x')  |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');\n+--------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.c', 'y')    |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n\nmysql> SET @j = '{\"a\": 1}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$', 'z');\n+---------------------------------+\n| JSON_ARRAY_APPEND(@j, '$', 'z') |\n+---------------------------------+\n| [{\"a\": 1}, \"z\"]                 |\n+---------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-array-append"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert into JSON array", "\nJSON_ARRAY_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Updates a JSON document, inserting into an array within the\n          document and returning the modified document. Returns\n          NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard or does\n          not end with an array element identifier.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          Pairs for which the path does not identify any array in the\n          JSON document are ignored. If a path identifies an array\n          element, the corresponding value is inserted at that element\n          position, shifting any following values to the right. If a\n          path identifies an array position past the end of an array,\n          the value is inserted at the end of the array.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+", "\n          Earlier modifications affect the positions of the following\n          elements in the array, so subsequent paths in the same\n          JSON_ARRAY_INSERT() call should\n          take this into account. In the final example, the second path\n          inserts nothing because the path no longer matches anything\n          after the first insert.\n        "], "Examples": ["mysql> SET @j = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-array-insert"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_CONTAINS(target,\n          candidate[,\n          path])"], "Description": ["Whether JSON document contains specific object at path", "\nJSON_CONTAINS(target,\n          candidate[,\n          path])\n", "\n          Indicates by returning 1 or 0 whether a given\n          candidate JSON document is\n          contained within a target JSON\n          document, or\u2014if a path\n          argument was supplied\u2014whether the candidate is found at\n          a specific path within the target. Returns\n          NULL if any argument is\n          NULL, or if the path argument does not\n          identify a section of the target document. An error occurs if\n          target or\n          candidate is not a valid JSON\n          document, or if the path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          To check only whether any data exists at the path, use\n          JSON_CONTAINS_PATH() instead.\n        ", "\n          The following rules define containment:\n", "\n\n              A candidate scalar is contained in a target scalar if and\n              only if they are comparable and are equal. Two scalar\n              values are comparable if they have the same\n              JSON_TYPE() types, with the\n              exception that values of types INTEGER\n              and DECIMAL are also comparable to each\n              other.\n            \n              A candidate array is contained in a target array if and\n              only if every element in the candidate is contained in\n              some element of the target.\n            \n              A candidate nonarray is contained in a target array if and\n              only if the candidate is contained in some element of the\n              target.\n            \n              A candidate object is contained in a target object if and\n              only if for each key in the candidate there is a key with\n              the same name in the target and the value associated with\n              the candidate key is contained in the value associated\n              with the target key.\n\n", "\n          Otherwise, the candidate value is not contained in the target\n          document.\n        ", "\n          Queries using JSON_CONTAINS() on\n          InnoDB tables can be optimized\n          using multi-valued indexes; see\n          Multi-Valued Indexes, for more\n          information.\n        ", "Press CTRL+C to copy mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SET @j2 = '1';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.b');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.b') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nmysql> SET @j2 = '{\"d\": 4}';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.c');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.c') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+"], "Examples": ["mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SET @j2 = '1';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.b');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.b') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nmysql> SET @j2 = '{\"d\": 4}';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.c');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.c') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-contains"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_CONTAINS_PATH(json_doc,\n          one_or_all,\n          path[,\n          path] ...)"], "Description": ["Whether JSON document contains any data at path", "\nJSON_CONTAINS_PATH(json_doc,\n          one_or_all,\n          path[,\n          path] ...)\n", "\n          Returns 0 or 1 to indicate whether a JSON document contains\n          data at a given path or paths. Returns NULL\n          if any argument is NULL. An error occurs if\n          the json_doc argument is not a\n          valid JSON document, any path\n          argument is not a valid path expression, or\n          one_or_all is not\n          'one' or 'all'.\n        ", "\n          To check for a specific value at a path, use\n          JSON_CONTAINS() instead.\n        ", "\n          The return value is 0 if no specified path exists within the\n          document. Otherwise, the return value depends on the\n          one_or_all argument:\n", "\n\n'one': 1 if at least one path exists\n              within the document, 0 otherwise.\n            \n'all': 1 if all paths exist within the\n              document, 0 otherwise.\n\n", "Press CTRL+C to copy mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+"], "Examples": ["mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-contains-path"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_DEPTH(json_doc)"], "Description": ["Maximum depth of JSON document", "\nJSON_DEPTH(json_doc)\n", "\n          Returns the maximum depth of a JSON document. Returns\n          NULL if the argument is\n          NULL. An error occurs if the argument is\n          not a valid JSON document.\n        ", "\n          An empty array, empty object, or scalar value has depth 1. A\n          nonempty array containing only elements of depth 1 or nonempty\n          object containing only member values of depth 1 has depth 2.\n          Otherwise, a JSON document has depth greater than 2.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\nmysql> SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');\n+------------------------+------------------------+\n| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |\n+------------------------+------------------------+\n|                      2 |                      2 |\n+------------------------+------------------------+\nmysql> SELECT JSON_DEPTH('[10, {\"a\": 20}]');\n+-------------------------------+\n| JSON_DEPTH('[10, {\"a\": 20}]') |\n+-------------------------------+\n|                             3 |\n+-------------------------------+"], "Examples": ["mysql> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\nmysql> SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');\n+------------------------+------------------------+\n| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |\n+------------------------+------------------------+\n|                      2 |                      2 |\n+------------------------+------------------------+\nmysql> SELECT JSON_DEPTH('[10, {\"a\": 20}]');\n+-------------------------------+\n| JSON_DEPTH('[10, {\"a\": 20}]') |\n+-------------------------------+\n|                             3 |\n+-------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-depth"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_EXTRACT(json_doc,\n          path[,\n          path] ...)"], "Description": ["Return data from JSON document", "\nJSON_EXTRACT(json_doc,\n          path[,\n          path] ...)\n", "\n          Returns data from a JSON document, selected from the parts of\n          the document matched by the path\n          arguments. Returns NULL if any argument is\n          NULL or no paths locate a value in the\n          document. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression.\n        ", "\n          The return value consists of all values matched by the\n          path arguments. If it is possible\n          that those arguments could return multiple values, the matched\n          values are autowrapped as an array, in the order corresponding\n          to the paths that produced them. Otherwise, the return value\n          is the single matched value.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |\n+--------------------------------------------+\n| 20                                         |\n+--------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');\n+----------------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |\n+----------------------------------------------------+\n| [20, 10]                                           |\n+----------------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |\n+-----------------------------------------------+\n| [30, 40]                                      |\n+-----------------------------------------------+", "\n          MySQL supports the\n          ->\n          operator as shorthand for this function as used with 2\n          arguments where the left hand side is a\n          JSON column identifier (not an\n          expression) and the right hand side is the JSON path to be\n          matched within the column.\n        "], "Examples": ["mysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |\n+--------------------------------------------+\n| 20                                         |\n+--------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');\n+----------------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |\n+----------------------------------------------------+\n| [20, 10]                                           |\n+----------------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |\n+-----------------------------------------------+\n| [30, 40]                                      |\n+-----------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-extract"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert data into JSON document", "\nJSON_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Inserts data into a JSON document and returns the result.\n          Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document is\n          ignored and does not overwrite the existing document value. A\n          path-value pair for a nonexisting path in the document adds\n          the value to the document if the path identifies one of these\n          types of values:\n", "\n\n              A member not present in an existing object. The member is\n              added to the object and associated with the new value.\n            \n              A position past the end of an existing array. The array is\n              extended with the new value. If the existing value is not\n              an array, it is autowrapped as an array, then extended\n              with the new value.\n\n", "\n          Otherwise, a path-value pair for a nonexisting path in the\n          document is ignored and has no effect.\n        ", "\n          For a comparison of\n          JSON_INSERT(),\n          JSON_REPLACE(), and\n          JSON_SET(), see the discussion\n          of JSON_SET().\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+", "\n          The third and final value listed in the result is a quoted\n          string and not an array like the second one (which is not\n          quoted in the output); no casting of values to the JSON type\n          is performed. To insert the array as an array, you must\n          perform such casts explicitly, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON));\n+------------------------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON)) |\n+------------------------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [true, false]}                        |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+", "mysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON));\n+------------------------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON)) |\n+------------------------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [true, false]}                        |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-insert"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_KEYS(json_doc[,\n          path])"], "Description": ["Array of keys from JSON document", "\nJSON_KEYS(json_doc[,\n          path])\n", "\n          Returns the keys from the top-level value of a JSON object as\n          a JSON array, or, if a path\n          argument is given, the top-level keys from the selected path.\n          Returns NULL if any argument is\n          NULL, the\n          json_doc argument is not an object,\n          or path, if given, does not locate\n          an object. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or the path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The result array is empty if the selected object is empty. If\n          the top-level value has nested subobjects, the return value\n          does not include keys from those subobjects.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\nmysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+"], "Examples": ["mysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\nmysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-keys"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_LENGTH(json_doc[,\n          path])"], "Description": ["Number of elements in JSON document", "\nJSON_LENGTH(json_doc[,\n          path])\n", "\n          Returns the length of a JSON document, or, if a\n          path argument is given, the length\n          of the value within the document identified by the path.\n          Returns NULL if any argument is\n          NULL or the path\n          argument does not identify a value in the document. An error\n          occurs if the json_doc argument is\n          not a valid JSON document or the\n          path argument is not a valid path\n          expression.\n        ", "\n          The length of a document is determined as follows:\n", "\n\n              The length of a scalar is 1.\n            \n              The length of an array is the number of array elements.\n            \n              The length of an object is the number of object members.\n            \n              The length does not count the length of nested arrays or\n              objects.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}]');\n+---------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}]') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}');\n+-----------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+-----------------------------------------+\n|                                       2 |\n+-----------------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+"], "Examples": ["mysql> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}]');\n+---------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}]') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}');\n+-----------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+-----------------------------------------+\n|                                       2 |\n+-----------------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-length"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, preserving duplicate keys. Deprecated", "\nJSON_MERGE(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Deprecated synonym for\n          JSON_MERGE_PRESERVE().\n        "], "Examples": [], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE_PATCH(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, replacing values of duplicate keys", "\nJSON_MERGE_PATCH(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Performs an\n          RFC\n          7396 compliant merge of two or more JSON documents and\n          returns the merged result, without preserving members having\n          duplicate keys. Raises an error if at least one of the\n          documents passed as arguments to this function is not valid.\n", "\n\nNote\n\n\n            For an explanation and example of the differences between\n            this function and JSON_MERGE_PRESERVE(),\n            see\n            JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE().\n\n", "\nJSON_MERGE_PATCH() performs a merge as\n          follows:\n", "\n\n              If the first argument is not an object, the result of the\n              merge is the same as if an empty object had been merged\n              with the second argument.\n            \n              If the second argument is not an object, the result of the\n              merge is the second argument.\n            \n              If both arguments are objects, the result of the merge is\n              an object with the following members:\n\n\n\n                  All members of the first object which do not have a\n                  corresponding member with the same key in the second\n                  object.\n                \n                  All members of the second object which do not have a\n                  corresponding key in the first object, and whose value\n                  is not the JSON null literal.\n                \n                  All members with a key that exists in both the first\n                  and the second object, and whose value in the second\n                  object is not the JSON null\n                  literal. The values of these members are the results\n                  of recursively merging the value in the first object\n                  with the value in the second object.\n\n\n\n", "\n          For additional information, see\n          Normalization, Merging, and Autowrapping of JSON Values.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '[true, false]') |\n+---------------------------------------------+\n| [true, false]                               |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}') |\n+-------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}');\n+------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}') |\n+------------------------------------------+\n| {\"id\": 47}                               |\n+------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',\n     >     '{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }',\n     >     '{ \"a\": 5, \"d\":6 }');\n+-------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }','{ \"a\": 5, \"d\":6 }') |\n+-------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                              |\n+-------------------------------------------------------------------------------+", "\n          You can use this function to remove a member by specifying\n          null as the value of the same member in the\n          second argument, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}');\n+--------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}') |\n+--------------------------------------------------+\n| {\"a\": 1}                                         |\n+--------------------------------------------------+", "\n          This example shows that the function operates in a recursive\n          fashion; that is, values of members are not limited to\n          scalars, but rather can themselves be JSON documents:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}');\n+----------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}') |\n+----------------------------------------------------+\n| {\"a\": {\"x\": 1, \"y\": 2}}                            |\n+----------------------------------------------------+", "JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE().\u00a0\n            The behavior of JSON_MERGE_PATCH() is the\n            same as that of\n            JSON_MERGE_PRESERVE(), with\n            the following two exceptions:\n", "\n\nJSON_MERGE_PATCH() removes any member\n              in the first object with a matching key in the second\n              object, provided that the value associated with the key in\n              the second object is not JSON null.\n            \n              If the second object has a member with a key matching a\n              member in the first object,\n              JSON_MERGE_PATCH()\nreplaces the value in the first\n              object with the value in the second object, whereas\n              JSON_MERGE_PRESERVE()\nappends the second value to the first\n              value.\n\n", "\n          This example compares the results of merging the same 3 JSON\n          objects, each having a matching key \"a\",\n          with each of these two functions:\n        ", "Press CTRL+C to copy mysql> SET @x = '{ \"a\": 1, \"b\": 2 }',\n     >     @y = '{ \"a\": 3, \"c\": 4 }',\n     >     @z = '{ \"a\": 5, \"d\": 6 }';\n\nmysql> SELECT  JSON_MERGE_PATCH(@x, @y, @z)    AS Patch,\n    ->         JSON_MERGE_PRESERVE(@x, @y, @z) AS Preserve\\G\n*************************** 1. row ***************************\n   Patch: {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}\nPreserve: {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}"], "Examples": ["mysql> SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '[true, false]') |\n+---------------------------------------------+\n| [true, false]                               |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}') |\n+-------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}');\n+------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}') |\n+------------------------------------------+\n| {\"id\": 47}                               |\n+------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',\n     >     '{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }',\n     >     '{ \"a\": 5, \"d\":6 }');\n+-------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }','{ \"a\": 5, \"d\":6 }') |\n+-------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                              |\n+-------------------------------------------------------------------------------+", "mysql> SELECT JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}');\n+--------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}') |\n+--------------------------------------------------+\n| {\"a\": 1}                                         |\n+--------------------------------------------------+", "mysql> SELECT JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}');\n+----------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}') |\n+----------------------------------------------------+\n| {\"a\": {\"x\": 1, \"y\": 2}}                            |\n+----------------------------------------------------+", "mysql> SET @x = '{ \"a\": 1, \"b\": 2 }',\n     >     @y = '{ \"a\": 3, \"c\": 4 }',\n     >     @z = '{ \"a\": 5, \"d\": 6 }';\n\nmysql> SELECT  JSON_MERGE_PATCH(@x, @y, @z)    AS Patch,\n    ->         JSON_MERGE_PRESERVE(@x, @y, @z) AS Preserve\\G\n*************************** 1. row ***************************\n   Patch: {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}\nPreserve: {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge-patch"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE_PRESERVE(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, preserving duplicate keys", "\nJSON_MERGE_PRESERVE(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Merges two or more JSON documents and returns the merged\n          result. Returns NULL if any argument is\n          NULL. An error occurs if any argument is\n          not a valid JSON document.\n        ", "\n          Merging takes place according to the following rules. For\n          additional information, see\n          Normalization, Merging, and Autowrapping of JSON Values.\n", "\n\n              Adjacent arrays are merged to a single array.\n            \n              Adjacent objects are merged to a single object.\n            \n              A scalar value is autowrapped as an array and merged as an\n              array.\n            \n              An adjacent array and object are merged by autowrapping\n              the object as an array and merging the two arrays.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '[true, false]') |\n+------------------------------------------------+\n| [1, 2, true, false]                            |\n+------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}');\n+----------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}') |\n+----------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                            |\n+----------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}');\n+---------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}') |\n+---------------------------------------------+\n| [1, 2, {\"id\": 47}]                          |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }',\n     >    '{ \"a\": 3, \"c\": 4 }');\n+--------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\":4 }') |\n+--------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": 4}                                |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }',\n     >    '{ \"a\": 5, \"d\": 6 }');\n+----------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }','{ \"a\": 5, \"d\": 6 }') |\n+----------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                         |\n+----------------------------------------------------------------------------------+", "\n          This function is similar to but differs from\n          JSON_MERGE_PATCH() in\n          significant respects; see\n          JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE(),\n          for more information.\n        "], "Examples": ["mysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '[true, false]') |\n+------------------------------------------------+\n| [1, 2, true, false]                            |\n+------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}');\n+----------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}') |\n+----------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                            |\n+----------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}');\n+---------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}') |\n+---------------------------------------------+\n| [1, 2, {\"id\": 47}]                          |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }',\n     >    '{ \"a\": 3, \"c\": 4 }');\n+--------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\":4 }') |\n+--------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": 4}                                |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }',\n     >    '{ \"a\": 5, \"d\": 6 }');\n+----------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }','{ \"a\": 5, \"d\": 6 }') |\n+----------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                         |\n+----------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge-preserve"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_OBJECT([key,\n          val[,\n          key,\n          val] ...])"], "Description": ["Create JSON object", "\nJSON_OBJECT([key,\n          val[,\n          key,\n          val] ...])\n", "\n          Evaluates a (possibly empty) list of key-value pairs and\n          returns a JSON object containing those pairs. An error occurs\n          if any key name is NULL or the number of\n          arguments is odd.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECT('id', 87, 'name', 'carrot');\n+-----------------------------------------+\n| JSON_OBJECT('id', 87, 'name', 'carrot') |\n+-----------------------------------------+\n| {\"id\": 87, \"name\": \"carrot\"}            |\n+-----------------------------------------+"], "Examples": ["mysql> SELECT JSON_OBJECT('id', 87, 'name', 'carrot');\n+-----------------------------------------+\n| JSON_OBJECT('id', 87, 'name', 'carrot') |\n+-----------------------------------------+\n| {\"id\": 87, \"name\": \"carrot\"}            |\n+-----------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-object"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_OVERLAPS(json_doc1,\n          json_doc2)"], "Description": ["Compares two JSON documents, returns TRUE (1) if these have any", "\nJSON_OVERLAPS(json_doc1,\n          json_doc2)\n", "\n          Compares two JSON documents. Returns true (1) if the two\n          document have any key-value pairs or array elements in common.\n          If both arguments are scalars, the function performs a simple\n          equality test. If either argument is NULL,\n          the function returns NULL.\n        ", "\n          This function serves as counterpart to\n          JSON_CONTAINS(), which requires\n          all elements of the array searched for to be present in the\n          array searched in. Thus, JSON_CONTAINS()\n          performs an AND operation on search keys,\n          while JSON_OVERLAPS() performs an\n          OR operation.\n        ", "\n          Queries on JSON columns of InnoDB\n          tables using JSON_OVERLAPS() in the\n          WHERE clause can be optimized using\n          multi-valued indexes.\n          Multi-Valued Indexes, provides detailed\n          information and examples.\n        ", "\n          When comparing two arrays, JSON_OVERLAPS()\n          returns true if they share one or more array elements in\n          common, and false if they do not:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "\n          Partial matches are treated as no match, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)", "\n          When comparing objects, the result is true if they have at\n          least one key-value pair in common.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}') |\n+-----------------------------------------------------------------------+\n|                                                                     1 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}') |\n+-----------------------------------------------------------------------+\n|                                                                     0 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)", "\n          If two scalars are used as the arguments to the function,\n          JSON_OVERLAPS() performs a simple test for\n          equality:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('5', '5');\n+-------------------------+\n| JSON_OVERLAPS('5', '5') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('5', '6');\n+-------------------------+\n| JSON_OVERLAPS('5', '6') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)", "\n          When comparing a scalar with an array,\n          JSON_OVERLAPS() attempts to treat the\n          scalar as an array element. In this example, the second\n          argument 6 is interpreted as\n          [6], as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '6');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '6') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set (0.00 sec)", "\n          The function does not perform type conversions:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[4,5,\"6\",7]', '6');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,\"6\",7]', '6') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '\"6\"');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '\"6\"') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}') |\n+-----------------------------------------------------------------------+\n|                                                                     1 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}') |\n+-----------------------------------------------------------------------+\n|                                                                     0 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('5', '5');\n+-------------------------+\n| JSON_OVERLAPS('5', '5') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('5', '6');\n+-------------------------+\n| JSON_OVERLAPS('5', '6') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '6');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '6') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[4,5,\"6\",7]', '6');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,\"6\",7]', '6') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '\"6\"');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '\"6\"') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-overlaps"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_PRETTY(json_val)"], "Description": ["Print a JSON document in human-readable format", "\nJSON_PRETTY(json_val)\n", "\n          Provides pretty-printing of JSON values similar to that\n          implemented in PHP and by other languages and database\n          systems. The value supplied must be a JSON value or a valid\n          string representation of a JSON value. Extraneous whitespaces\n          and newlines present in this value have no effect on the\n          output. For a NULL value, the function\n          returns NULL. If the value is not a JSON\n          document, or if it cannot be parsed as one, the function fails\n          with an error.\n        ", "\n          Formatting of the output from this function adheres to the\n          following rules:\n", "\n\n              Each array element or object member appears on a separate\n              line, indented by one additional level as compared to its\n              parent.\n            \n              Each level of indentation adds two leading spaces.\n            \n              A comma separating individual array elements or object\n              members is printed before the newline that separates the\n              two elements or members.\n            \n              The key and the value of an object member are separated by\n              a colon followed by a space (': ').\n            \n              An empty object or array is printed on a single line. No\n              space is printed between the opening and closing brace.\n            \n              Special characters in string scalars and key names are\n              escaped employing the same rules used by the\n              JSON_QUOTE() function.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_PRETTY('123'); # scalar\n+--------------------+\n| JSON_PRETTY('123') |\n+--------------------+\n| 123                |\n+--------------------+\n\nmysql> SELECT JSON_PRETTY(\"[1,3,5]\"); # array\n+------------------------+\n| JSON_PRETTY(\"[1,3,5]\") |\n+------------------------+\n| [\n  1,\n  3,\n  5\n]      |\n+------------------------+\n\nmysql> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}'); # object\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"15\",\n  \"x\": \"25\"\n}   |\n+---------------------------------------------+\n\nmysql> SELECT JSON_PRETTY('[\"a\",1,{\"key1\":\n    '>    \"value1\"},\"5\",     \"77\" ,\n    '>       {\"key2\":[\"value3\",\"valueX\",\n    '> \"valueY\"]},\"j\", \"2\"   ]')\\G  # nested arrays and objects\n*************************** 1. row ***************************\nJSON_PRETTY('[\"a\",1,{\"key1\":\n             \"value1\"},\"5\",     \"77\" ,\n                {\"key2\":[\"value3\",\"valuex\",\n          \"valuey\"]},\"j\", \"2\"   ]'): [\n  \"a\",\n  1,\n  {\n    \"key1\": \"value1\"\n  },\n  \"5\",\n  \"77\",\n  {\n    \"key2\": [\n      \"value3\",\n      \"valuex\",\n      \"valuey\"\n    ]\n  },\n  \"j\",\n  \"2\"\n]"], "Examples": ["mysql> SELECT JSON_PRETTY('123'); # scalar\n+--------------------+\n| JSON_PRETTY('123') |\n+--------------------+\n| 123                |\n+--------------------+\n\nmysql> SELECT JSON_PRETTY(\"[1,3,5]\"); # array\n+------------------------+\n| JSON_PRETTY(\"[1,3,5]\") |\n+------------------------+\n| [\n  1,\n  3,\n  5\n]      |\n+------------------------+\n\nmysql> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}'); # object\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"15\",\n  \"x\": \"25\"\n}   |\n+---------------------------------------------+\n\nmysql> SELECT JSON_PRETTY('[\"a\",1,{\"key1\":\n    '>    \"value1\"},\"5\",     \"77\" ,\n    '>       {\"key2\":[\"value3\",\"valueX\",\n    '> \"valueY\"]},\"j\", \"2\"   ]')\\G  # nested arrays and objects\n*************************** 1. row ***************************\nJSON_PRETTY('[\"a\",1,{\"key1\":\n             \"value1\"},\"5\",     \"77\" ,\n                {\"key2\":[\"value3\",\"valuex\",\n          \"valuey\"]},\"j\", \"2\"   ]'): [\n  \"a\",\n  1,\n  {\n    \"key1\": \"value1\"\n  },\n  \"5\",\n  \"77\",\n  {\n    \"key2\": [\n      \"value3\",\n      \"valuex\",\n      \"valuey\"\n    ]\n  },\n  \"j\",\n  \"2\"\n]"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-pretty"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_REMOVE(json_doc,\n          path[,\n          path] ...)"], "Description": ["Remove data from JSON document", "\nJSON_REMOVE(json_doc,\n          path[,\n          path] ...)\n", "\n          Removes data from a JSON document and returns the result.\n          Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or is $ or\n          contains a * or **\n          wildcard.\n        ", "\n          The path arguments are evaluated\n          left to right. The document produced by evaluating one path\n          becomes the new value against which the next path is\n          evaluated.\n        ", "\n          It is not an error if the element to be removed does not exist\n          in the document; in that case, the path does not affect the\n          document.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_REMOVE(@j, '$[1]');\n+-------------------------+\n| JSON_REMOVE(@j, '$[1]') |\n+-------------------------+\n| [\"a\", \"d\"]              |\n+-------------------------+"], "Examples": ["mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_REMOVE(@j, '$[1]');\n+-------------------------+\n| JSON_REMOVE(@j, '$[1]') |\n+-------------------------+\n| [\"a\", \"d\"]              |\n+-------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-remove"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_REPLACE(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Replace values in JSON document", "\nJSON_REPLACE(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Replaces existing values in a JSON document and returns the\n          result. Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document\n          overwrites the existing document value with the new value. A\n          path-value pair for a nonexisting path in the document is\n          ignored and has no effect.\n        ", "\n          The optimizer can perform a partial, in-place update of a\n          JSON column instead of removing the old\n          document and writing the new document in its entirety to the\n          column. This optimization can be performed for an update\n          statement that uses the\n          JSON_REPLACE() function and\n          meets the conditions outlined in\n          Partial Updates of JSON Values.\n        ", "\n          For a comparison of\n          JSON_INSERT(),\n          JSON_REPLACE(), and\n          JSON_SET(), see the discussion\n          of JSON_SET().\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-replace"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SCHEMA_VALIDATION_REPORT(schema,document)"], "Description": ["Validate JSON document against JSON schema; returns report in JSON", "\nJSON_SCHEMA_VALIDATION_REPORT(schema,document)\n", "\n          Validates a JSON document against a\n          JSON schema. Both\n          schema and\n          document are required. As with\n          JSON_VALID_SCHEMA(), the schema must be a valid JSON object,\n          and the document must be a valid JSON document. Provided that\n          these conditions are met, the function returns a report, as a\n          JSON document, on the outcome of the validation. If the JSON\n          document is considered valid according to the JSON Schema, the\n          function returns a JSON object with one property\n          valid having the value \"true\". If the JSON\n          document fails validation, the function returns a JSON object\n          which includes the properties listed here:\n", "\n\nvalid: Always \"false\" for a failed\n              schema validation\n            \nreason: A human-readable string\n              containing the reason for the failure\n            \nschema-location: A JSON pointer URI\n              fragment identifier indicating where in the JSON schema\n              the validation failed (see Note following this list)\n            \ndocument-location: A JSON pointer URI\n              fragment identifier indicating where in the JSON document\n              the validation failed (see Note following this list)\n            \nschema-failed-keyword: A string\n              containing the name of the keyword or property in the JSON\n              schema that was violated\n\n", "\n\nNote\n\n\n            JSON pointer URI fragment identifiers are defined in\n            RFC\n            6901 - JavaScript Object Notation (JSON) Pointer.\n            (These are not the same as the JSON\n            path notation used by\n            JSON_EXTRACT() and other\n            MySQL JSON functions.) In this notation,\n            # represents the entire document, and\n            #/myprop represents the portion of the\n            document included in the top-level property named\n            myprop. See the specification just cited\n            and the examples shown later in this section for more\n            information.\n\n", "\n          In this example, we set a user variable\n          @schema to the value of a JSON schema for\n          geographical coordinates, and another one\n          @document to the value of a JSON document\n          containing one such coordinate. We then verify that\n          @document validates according to\n          @schema by using them as the arguments to\n          JSON_SCHEMA_VALIDATION_REORT():\n        ", "Press CTRL+C to copy mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)", "\n          Now we set @document such that it specifies\n          an illegal value for one of its properties, like this:\n        ", "Press CTRL+C to copy mysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 310.445118\n    '> }';", "\n          Validation of @document now fails when\n          tested with\n          JSON_SCHEMA_VALIDATION_REPORT(). The output\n          from the function call contains detailed information about the\n          failure (with the function wrapped by\n          JSON_PRETTY() to provide better\n          formatting), as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#/longitude' failed requirement 'maximum' at JSON Schema location '#/properties/longitude'\",\n  \"schema-location\": \"#/properties/longitude\",\n  \"document-location\": \"#/longitude\",\n  \"schema-failed-keyword\": \"maximum\"\n}\n1 row in set (0.00 sec)", "\n          Since @schema contains the\n          required attribute, we can set\n          @document to a value that is otherwise\n          valid but does not contain the required properties, then test\n          it against @schema. The output of\n          JSON_SCHEMA_VALIDATION_REPORT() shows that\n          validation fails due to lack of a required element, like this:\n        ", "Press CTRL+C to copy mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#' failed requirement 'required' at JSON Schema location '#'\",\n  \"schema-location\": \"#\",\n  \"document-location\": \"#\",\n  \"schema-failed-keyword\": \"required\"\n}\n1 row in set (0.00 sec)", "\n          If we now set the value of @schema to the\n          same JSON schema but without the required\n          attribute, @document validates because it\n          is a valid JSON object, even though it contains no properties,\n          as shown here:\n        ", "Press CTRL+C to copy mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 310.445118\n    '> }';", "mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#' failed requirement 'required' at JSON Schema location '#'\",\n  \"schema-location\": \"#\",\n  \"document-location\": \"#\",\n  \"schema-failed-keyword\": \"required\"\n}\n1 row in set (0.00 sec)", "mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-validation-functions.html#function_json-schema-validation-report"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SEARCH(json_doc,\n          one_or_all,\n          search_str[,\n          escape_char[,\n          path] ...])"], "Description": ["Path to value within JSON document", "\nJSON_SEARCH(json_doc,\n          one_or_all,\n          search_str[,\n          escape_char[,\n          path] ...])\n", "\n          Returns the path to the given string within a JSON document.\n          Returns NULL if any of the\n          json_doc,\n          search_str, or\n          path arguments are\n          NULL; no path\n          exists within the document; or\n          search_str is not found. An error\n          occurs if the json_doc argument is\n          not a valid JSON document, any path\n          argument is not a valid path expression,\n          one_or_all is not\n          'one' or 'all', or\n          escape_char is not a constant\n          expression.\n        ", "\n          The one_or_all argument affects the\n          search as follows:\n", "\n\n'one': The search terminates after the\n              first match and returns one path string. It is undefined\n              which match is considered first.\n            \n'all': The search returns all matching\n              path strings such that no duplicate paths are included. If\n              there are multiple strings, they are autowrapped as an\n              array. The order of the array elements is undefined.\n\n", "\n          Within the search_str search string\n          argument, the % and _\n          characters work as for the LIKE\n          operator: % matches any number of\n          characters (including zero characters), and\n          _ matches exactly one character.\n        ", "\n          To specify a literal % or\n          _ character in the search string, precede\n          it by the escape character. The default is\n          \\ if the\n          escape_char argument is missing or\n          NULL. Otherwise,\n          escape_char must be a constant that\n          is empty or one character.\n        ", "\n          For more information about matching and escape character\n          behavior, see the description of\n          LIKE in\n          Section\u00a014.8.1, \u201cString Comparison Functions and Operators\u201d. For escape\n          character handling, a difference from the\n          LIKE behavior is that the escape\n          character for JSON_SEARCH()\n          must evaluate to a constant at compile time, not just at\n          execution time. For example, if\n          JSON_SEARCH() is used in a\n          prepared statement and the\n          escape_char argument is supplied\n          using a ? parameter, the parameter value\n          might be constant at execution time, but is not at compile\n          time.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"abc\", [{\"k\": \"10\"}, \"def\"], {\"x\":\"abc\"}, {\"y\":\"bcd\"}]';\n\nmysql> SELECT JSON_SEARCH(@j, 'one', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'one', 'abc') |\n+-------------------------------+\n| \"$[0]\"                        |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'ghi');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'ghi') |\n+-------------------------------+\n| NULL                          |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10');\n+------------------------------+\n| JSON_SEARCH(@j, 'all', '10') |\n+------------------------------+\n| \"$[1][0].k\"                  |\n+------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$');\n+-----------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$') |\n+-----------------------------------------+\n| \"$[1][0].k\"                             |\n+-----------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$**.k');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$**.k') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k');\n+-------------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k') |\n+-------------------------------------------------+\n| \"$[1][0].k\"                                     |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]');\n+-----------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]') |\n+-----------------------------------------------+\n| \"$[1][0].k\"                                   |\n+-----------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%a%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%a%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[3]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[3]') |\n+-------------------------------------------+\n| \"$[3].y\"                                  |\n+-------------------------------------------+", "\n          For more information about the JSON path syntax supported by\n          MySQL, including rules governing the wildcard operators\n          * and **, see\n          JSON Path Syntax.\n        "], "Examples": ["mysql> SET @j = '[\"abc\", [{\"k\": \"10\"}, \"def\"], {\"x\":\"abc\"}, {\"y\":\"bcd\"}]';\n\nmysql> SELECT JSON_SEARCH(@j, 'one', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'one', 'abc') |\n+-------------------------------+\n| \"$[0]\"                        |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'ghi');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'ghi') |\n+-------------------------------+\n| NULL                          |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10');\n+------------------------------+\n| JSON_SEARCH(@j, 'all', '10') |\n+------------------------------+\n| \"$[1][0].k\"                  |\n+------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$');\n+-----------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$') |\n+-----------------------------------------+\n| \"$[1][0].k\"                             |\n+-----------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$**.k');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$**.k') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k');\n+-------------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k') |\n+-------------------------------------------------+\n| \"$[1][0].k\"                                     |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]');\n+-----------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]') |\n+-----------------------------------------------+\n| \"$[1][0].k\"                                   |\n+-----------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%a%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%a%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[3]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[3]') |\n+-------------------------------------------+\n| \"$[3].y\"                                  |\n+-------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-search"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SET(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert data into JSON document", "\nJSON_SET(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Inserts or updates data in a JSON document and returns the\n          result. Returns NULL if\n          json_doc or\n          path is NULL, or\n          if path, when given, does not\n          locate an object. Otherwise, an error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document\n          overwrites the existing document value with the new value. A\n          path-value pair for a nonexisting path in the document adds\n          the value to the document if the path identifies one of these\n          types of values:\n", "\n\n              A member not present in an existing object. The member is\n              added to the object and associated with the new value.\n            \n              A position past the end of an existing array. The array is\n              extended with the new value. If the existing value is not\n              an array, it is autowrapped as an array, then extended\n              with the new value.\n\n", "\n          Otherwise, a path-value pair for a nonexisting path in the\n          document is ignored and has no effect.\n        ", "\n          The optimizer can perform a partial, in-place update of a\n          JSON column instead of removing the old\n          document and writing the new document in its entirety to the\n          column. This optimization can be performed for an update\n          statement that uses the\n          JSON_SET() function and meets\n          the conditions outlined in\n          Partial Updates of JSON Values.\n        ", "\n          The JSON_SET(),\n          JSON_INSERT(), and\n          JSON_REPLACE() functions are\n          related:\n", "\n\nJSON_SET() replaces\n              existing values and adds nonexisting values.\n            \nJSON_INSERT() inserts\n              values without replacing existing values.\n            \nJSON_REPLACE() replaces\n              only existing values.\n\n", "\n          The following examples illustrate these differences, using one\n          path that does exist in the document ($.a)\n          and another that does not exist ($.c):\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_SET(@j, '$.a', 10, '$.c', '[true, false]');\n+-------------------------------------------------+\n| JSON_SET(@j, '$.a', 10, '$.c', '[true, false]') |\n+-------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}    |\n+-------------------------------------------------+\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_SET(@j, '$.a', 10, '$.c', '[true, false]');\n+-------------------------------------------------+\n| JSON_SET(@j, '$.a', 10, '$.c', '[true, false]') |\n+-------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}    |\n+-------------------------------------------------+\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-set"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_STORAGE_SIZE(json_val)"], "Description": ["Space used for storage of binary representation of a JSON document", "\nJSON_STORAGE_SIZE(json_val)\n", "\n          This function returns the number of bytes used to store the\n          binary representation of a JSON document. When the argument is\n          a JSON column, this is the space used to\n          store the JSON document as it was inserted into the column,\n          prior to any partial updates that may have been performed on\n          it afterwards. json_val must be a\n          valid JSON document or a string which can be parsed as one. In\n          the case where it is string, the function returns the amount\n          of storage space in the JSON binary representation that is\n          created by parsing the string as JSON and converting it to\n          binary. It returns NULL if the argument is\n          NULL.\n        ", "\n          An error results when json_val is\n          not NULL, and is not\u2014or cannot be\n          successfully parsed as\u2014a JSON document.\n        ", "\n          To illustrate this function's behavior when used with a\n          JSON column as its argument, we create a\n          table named jtable containing a\n          JSON column jcol, insert\n          a JSON value into the table, then obtain the storage space\n          used by this column with\n          JSON_STORAGE_SIZE(), as shown here:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+-----------------------------------------------+------+------+\n| jcol                                          | Size | Free |\n+-----------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    0 |\n+-----------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          According to the output of\n          JSON_STORAGE_SIZE(), the JSON document\n          inserted into the column takes up 47 bytes. We also checked\n          the amount of space freed by any previous partial updates of\n          the column using\n          JSON_STORAGE_FREE(); since no\n          updates have yet been performed, this is 0, as expected.\n        ", "\n          Next we perform an UPDATE on\n          the table that should result in a partial update of the\n          document stored in jcol, and then test the\n          result as shown here:\n        ", "Press CTRL+C to copy mysql> UPDATE jtable SET jcol = \n    ->     JSON_SET(jcol, \"$.b\", \"a\");\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+--------------------------------------------+------+------+\n| jcol                                       | Size | Free |\n+--------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    3 |\n+--------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          The value returned by JSON_STORAGE_FREE()\n          in the previous query indicates that a partial update of the\n          JSON document was performed, and that this freed 3 bytes of\n          space used to store it. The result returned by\n          JSON_STORAGE_SIZE() is unchanged by the\n          partial update.\n        ", "\n          Partial updates are supported for updates using\n          JSON_SET(),\n          JSON_REPLACE(), or\n          JSON_REMOVE(). The direct\n          assignment of a value to a JSON column\n          cannot be partially updated; following such an update,\n          JSON_STORAGE_SIZE() always shows the\n          storage used for the newly-set value:\n        ", "Press CTRL+C to copy mysql> UPDATE jtable\nmysql>     SET jcol = '{\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+------------------------------------------------+------+------+\n| jcol                                           | Size | Free |\n+------------------------------------------------+------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |   56 |    0 |\n+------------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          A JSON user variable cannot be partially updated. This means\n          that this function always shows the space currently used to\n          store a JSON document in a user variable:\n        ", "Press CTRL+C to copy mysql> SET @j = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+------------------------------------+------+\n| @j                                 | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   45 |\n+------------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[1]', \"json\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+----------------------------------+------+\n| @j                               | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   43 |\n+----------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+---------------------------------------------+------+\n| @j                                          | Size |\n+---------------------------------------------+------+\n| [100, \"json\", [[10, 20, 30], 3, 5], 425.05] |   56 |\n+---------------------------------------------+------+\n1 row in set (0.00 sec)", "\n          For a JSON literal, this function always returns the current\n          storage space used:\n        ", "Press CTRL+C to copy mysql> SELECT\n    ->     JSON_STORAGE_SIZE('[100, \"sakila\", [1, 3, 5], 425.05]') AS A,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"}') AS B,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}') AS C,\n    ->     JSON_STORAGE_SIZE('[100, \"json\", [[10, 20, 30], 3, 5], 425.05]') AS D;\n+----+----+----+----+\n| A  | B  | C  | D  |\n+----+----+----+----+\n| 45 | 44 | 47 | 56 |\n+----+----+----+----+\n1 row in set (0.00 sec)"], "Examples": ["mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+-----------------------------------------------+------+------+\n| jcol                                          | Size | Free |\n+-----------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    0 |\n+-----------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> UPDATE jtable SET jcol = \n    ->     JSON_SET(jcol, \"$.b\", \"a\");\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+--------------------------------------------+------+------+\n| jcol                                       | Size | Free |\n+--------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    3 |\n+--------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> UPDATE jtable\nmysql>     SET jcol = '{\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+------------------------------------------------+------+------+\n| jcol                                           | Size | Free |\n+------------------------------------------------+------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |   56 |    0 |\n+------------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> SET @j = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+------------------------------------+------+\n| @j                                 | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   45 |\n+------------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[1]', \"json\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+----------------------------------+------+\n| @j                               | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   43 |\n+----------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+---------------------------------------------+------+\n| @j                                          | Size |\n+---------------------------------------------+------+\n| [100, \"json\", [[10, 20, 30], 3, 5], 425.05] |   56 |\n+---------------------------------------------+------+\n1 row in set (0.00 sec)", "mysql> SELECT\n    ->     JSON_STORAGE_SIZE('[100, \"sakila\", [1, 3, 5], 425.05]') AS A,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"}') AS B,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}') AS C,\n    ->     JSON_STORAGE_SIZE('[100, \"json\", [[10, 20, 30], 3, 5], 425.05]') AS D;\n+----+----+----+----+\n| A  | B  | C  | D  |\n+----+----+----+----+\n| 45 | 44 | 47 | 56 |\n+----+----+----+----+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-storage-size"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_TYPE(json_val)"], "Description": ["Type of JSON value", "\nJSON_TYPE(json_val)\n", "\n          Returns a utf8mb4 string indicating the\n          type of a JSON value. This can be an object, an array, or a\n          scalar type, as shown here:\n        ", "Press CTRL+C to copy mysql> SET @j = '{\"a\": [10, true]}';\nmysql> SELECT JSON_TYPE(@j);\n+---------------+\n| JSON_TYPE(@j) |\n+---------------+\n| OBJECT        |\n+---------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a'));\n+------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a')) |\n+------------------------------------+\n| ARRAY                              |\n+------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]')) |\n+---------------------------------------+\n| INTEGER                               |\n+---------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]')) |\n+---------------------------------------+\n| BOOLEAN                               |\n+---------------------------------------+", "\nJSON_TYPE() returns\n          NULL if the argument is\n          NULL:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+", "\n          An error occurs if the argument is not a valid JSON value:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required.", "\n          For a non-NULL, non-error result, the\n          following list describes the possible\n          JSON_TYPE() return values:\n", "\n\n              Purely JSON types:\n\n\n\nOBJECT: JSON objects\n                \nARRAY: JSON arrays\n                \nBOOLEAN: The JSON true and false\n                  literals\n                \nNULL: The JSON null literal\n\n\n\n              Numeric types:\n\n\n\nINTEGER: MySQL\n                  TINYINT,\n                  SMALLINT,\n                  MEDIUMINT and\n                  INT and\n                  BIGINT scalars\n                \nDOUBLE: MySQL\n                  DOUBLE\nFLOAT scalars\n                \nDECIMAL: MySQL\n                  DECIMAL and\n                  NUMERIC scalars\n\n\n\n              Temporal types:\n\n\n\nDATETIME: MySQL\n                  DATETIME and\n                  TIMESTAMP scalars\n                \nDATE: MySQL\n                  DATE scalars\n                \nTIME: MySQL\n                  TIME scalars\n\n\n\n              String types:\n\n\n\nSTRING: MySQL\n                  utf8mb3 character type scalars:\n                  CHAR,\n                  VARCHAR,\n                  TEXT,\n                  ENUM, and\n                  SET\n\n\n\n              Binary types:\n\n\n\nBLOB: MySQL binary type scalars\n                  including BINARY,\n                  VARBINARY,\n                  BLOB, and\n                  BIT\n\n\n\n              All other types:\n\n\n\nOPAQUE (raw bits)\n\n\n\n"], "Examples": ["mysql> SET @j = '{\"a\": [10, true]}';\nmysql> SELECT JSON_TYPE(@j);\n+---------------+\n| JSON_TYPE(@j) |\n+---------------+\n| OBJECT        |\n+---------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a'));\n+------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a')) |\n+------------------------------------+\n| ARRAY                              |\n+------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]')) |\n+---------------------------------------+\n| INTEGER                               |\n+---------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]')) |\n+---------------------------------------+\n| BOOLEAN                               |\n+---------------------------------------+", "mysql> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+", "mysql> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required."], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-type"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_UNQUOTE(json_val)"], "Description": ["Unquote JSON value", "\nJSON_UNQUOTE(json_val)\n", "\n          Unquotes JSON value and returns the result as a\n          utf8mb4 string. Returns\n          NULL if the argument is\n          NULL. An error occurs if the value starts\n          and ends with double quotes but is not a valid JSON string\n          literal.\n        ", "\n          Within a string, certain sequences have special meaning unless\n          the NO_BACKSLASH_ESCAPES SQL\n          mode is enabled. Each of these sequences begins with a\n          backslash (\\), known as the\n          escape character. MySQL recognizes the\n          escape sequences shown in\n          Table\u00a014.23, \u201cJSON_UNQUOTE() Special Character Escape Sequences\u201d. For\n          all other escape sequences, backslash is ignored. That is, the\n          escaped character is interpreted as if it was not escaped. For\n          example, \\x is just x.\n          These sequences are case-sensitive. For example,\n          \\b is interpreted as a backspace, but\n          \\B is interpreted as B.\n", "\nTable\u00a014.23\u00a0JSON_UNQUOTE() Special Character Escape Sequences\n\n\nEscape Sequence\nCharacter Represented by Sequence\n\n\\\"\nA double quote (\") character\n\n\\b\nA backspace character\n\n\\f\nA formfeed character\n\n\\n\nA newline (linefeed) character\n\n\\r\nA carriage return character\n\n\\t\nA tab character\n\n\\\\\nA backslash (\\) character\n\n\\uXXXX\nUTF-8 bytes for Unicode value XXXX\n\n\n", "\n          Two simple examples of the use of this function are shown\n          here:\n        ", "Press CTRL+C to copy mysql> SET @j = '\"abc\"';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-------+------------------+\n| @j    | JSON_UNQUOTE(@j) |\n+-------+------------------+\n| \"abc\" | abc              |\n+-------+------------------+\nmysql> SET @j = '[1, 2, 3]';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-----------+------------------+\n| @j        | JSON_UNQUOTE(@j) |\n+-----------+------------------+\n| [1, 2, 3] | [1, 2, 3]        |\n+-----------+------------------+", "\n          The following set of examples shows how\n          JSON_UNQUOTE handles escapes with\n          NO_BACKSLASH_ESCAPES\n          disabled and enabled:\n        ", "Press CTRL+C to copy mysql> SELECT @@sql_mode;\n+------------+\n| @@sql_mode |\n+------------+\n|            |\n+------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n|       2                           |\n+------------------------------+\n\nmysql> SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n| \\t\\u0032                     |\n+------------------------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\t\\u0032\"');\n+----------------------------+\n| JSON_UNQUOTE('\"\\t\\u0032\"') |\n+----------------------------+\n|       2                         |\n+----------------------------+"], "Examples": ["mysql> SET @j = '\"abc\"';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-------+------------------+\n| @j    | JSON_UNQUOTE(@j) |\n+-------+------------------+\n| \"abc\" | abc              |\n+-------+------------------+\nmysql> SET @j = '[1, 2, 3]';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-----------+------------------+\n| @j        | JSON_UNQUOTE(@j) |\n+-----------+------------------+\n| [1, 2, 3] | [1, 2, 3]        |\n+-----------+------------------+", "mysql> SELECT @@sql_mode;\n+------------+\n| @@sql_mode |\n+------------+\n|            |\n+------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n|       2                           |\n+------------------------------+\n\nmysql> SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n| \\t\\u0032                     |\n+------------------------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\t\\u0032\"');\n+----------------------------+\n| JSON_UNQUOTE('\"\\t\\u0032\"') |\n+----------------------------+\n|       2                         |\n+----------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-unquote"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_VALID(val)"], "Description": ["Whether JSON value is valid", "\nJSON_VALID(val)\n", "\n          Returns 0 or 1 to indicate whether a value is valid JSON.\n          Returns NULL if the argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT JSON_VALID('hello'), JSON_VALID('\"hello\"');\n+---------------------+-----------------------+\n| JSON_VALID('hello') | JSON_VALID('\"hello\"') |\n+---------------------+-----------------------+\n|                   0 |                     1 |\n+---------------------+-----------------------+"], "Examples": ["mysql> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT JSON_VALID('hello'), JSON_VALID('\"hello\"');\n+---------------------+-----------------------+\n| JSON_VALID('hello') | JSON_VALID('\"hello\"') |\n+---------------------+-----------------------+\n|                   0 |                     1 |\n+---------------------+-----------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-valid"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_VALUE(json_doc,\n          path)"], "Description": ["Extract value from JSON document at location pointed to by path", "\nJSON_VALUE(json_doc,\n          path)\n", "\n          Extracts a value from a JSON document at the path given in the\n          specified document, and returns the extracted value,\n          optionally converting it to a desired type. The complete\n          syntax is shown here:\n        ", "Press CTRL+C to copy JSON_VALUE(json_doc, path [RETURNING type] [on_empty] [on_error])\n\non_empty:\n    {NULL | ERROR | DEFAULT value} ON EMPTY\n\non_error:\n    {NULL | ERROR | DEFAULT value} ON ERROR", "\njson_doc is a valid JSON document.\n          If this is NULL, the function returns\n          NULL.\n        ", "\npath is a JSON path pointing to a\n          location in the document. This must be a string literal value.\n        ", "\ntype is one of the following data\n          types:\n", "\n\nFLOAT\n\nDOUBLE\n\nDECIMAL\n\nSIGNED\n\nUNSIGNED\n\nDATE\n\nTIME\n\nDATETIME\n\nYEAR\n\nYEAR values of one or two digits are\n              not supported.\n            \nCHAR\n\nJSON\n\n", "\n          The types just listed are the same as the (non-array) types\n          supported by the CAST()\n          function.\n        ", "\n          If not specified by a RETURNING clause, the\n          JSON_VALUE() function's return type is\n          VARCHAR(512). When no character\n          set is specified for the return type,\n          JSON_VALUE() uses\n          utf8mb4 with the binary collation, which is\n          case-sensitive; if utf8mb4 is specified as\n          the character set for the result, the server uses the default\n          collation for this character set, which is not case-sensitive.\n        ", "\n          When the data at the specified path consists of or resolves to\n          a JSON null literal, the function returns SQL\n          NULL.\n        ", "\non_empty, if specified, determines\n          how JSON_VALUE() behaves when no data is\n          found at the path given; this clause takes one of the\n          following values:\n", "\n\nNULL ON EMPTY: The function returns\n              NULL; this is the default ON\n              EMPTY behavior.\n            \nDEFAULT value ON\n              EMPTY: the provided\n              value is returned. The\n              value's type must match that of the return type.\n            \nERROR ON EMPTY: The function throws an\n              error.\n\n", "\n          If used, on_error takes one of the\n          following values with the corresponding outcome when an error\n          occurs, as listed here:\n", "\n\nNULL ON ERROR:\n              JSON_VALUE() returns\n              NULL; this is the default behavior if\n              no ON ERROR clause is used.\n            \nDEFAULT value ON\n              ERROR: This is the value returned; its value\n              must match that of the return type.\n            \nERROR ON ERROR: An error is thrown.\n\n", "\nON EMPTY, if used, must precede any\n          ON ERROR clause. Specifying them in the\n          wrong order results in a syntax error.\n        ", "Error handling.\u00a0\n            In general, errors are handled by\n            JSON_VALUE() as follows:\n", "\n\n              All JSON input (document and path) is checked for\n              validity. If any of it is not valid, an SQL error is\n              thrown without triggering the ON ERROR\n              clause.\n            \nON ERROR is triggered whenever any of\n              the following events occur:\n\n\n\n                  Attempting to extract an object or an array, such as\n                  that resulting from a path that resolves to multiple\n                  locations within the JSON document\n                \n                  Conversion errors, such as attempting to convert\n                  'asdf' to an\n                  UNSIGNED value\n                \n                  Truncation of values\n\n\n\n              A conversion error always triggers a warning even if\n              NULL ON ERROR or DEFAULT ...\n              ON ERROR is specified.\n            \n              The ON EMPTY clause is triggered when\n              the source JSON document (expr)\n              contains no data at the specified location\n              (path).\n\n", "Examples.\u00a0\n            Two simple examples are shown here:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Joe                                                          |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"49.95\"}', '$.price'\n    -> RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 49.95 |\n+-------+", "\n          The statement SELECT\n          JSON_VALUE(json_doc,\n          path RETURNING\n          type) is equivalent to\n          the following statement:\n        ", "Press CTRL+C to copy SELECT CAST(\n    JSON_UNQUOTE( JSON_EXTRACT(json_doc, path) )\n    AS type\n);", "\nJSON_VALUE() simplifies creating indexes on\n          JSON columns by making it unnecessary in many cases to create\n          a generated column and then an index on the generated column.\n          You can do this when creating a table t1\n          that has a JSON column by\n          creating an index on an expression that uses\n          JSON_VALUE() operating on that column (with\n          a path that matches a value in that column), as shown here:\n        ", "Press CTRL+C to copy CREATE TABLE t1(\n    j JSON,\n    INDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )\n);", "\n          The following EXPLAIN output\n          shows that a query against t1 employing the\n          index expression in the WHERE clause uses\n          the index thus created:\n        ", "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t1\n    ->     WHERE JSON_VALUE(j, '$.id' RETURNING UNSIGNED) = 123\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: t1\n   partitions: NULL\n         type: ref\npossible_keys: i1\n          key: i1\n      key_len: 9\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL", "\n          This achieves much the same effect as creating a table\n          t2 with an index on a generated column (see\n          Indexing a Generated Column to Provide a JSON Column Index), like this one:\n        ", "Press CTRL+C to copy CREATE TABLE t2 (\n    j JSON,\n    g INT GENERATED ALWAYS AS (j->\"$.id\"),\n    INDEX i1 (g)\n);", "\n          The EXPLAIN output for a query\n          against this table, referencing the generated column, shows\n          that the index is used in the same way as for the previous\n          query against table t1:\n        ", "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t2 WHERE g  = 123\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: t2\n   partitions: NULL\n         type: ref\npossible_keys: i1\n          key: i1\n      key_len: 5\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL", "\n          For information about using indexes on generated columns for\n          indirect indexing of JSON\n          columns, see Indexing a Generated Column to Provide a JSON Column Index.\n        "], "Examples": ["mysql> SELECT JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Joe                                                          |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"49.95\"}', '$.price'\n    -> RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 49.95 |\n+-------+", "SELECT CAST(\n    JSON_UNQUOTE( JSON_EXTRACT(json_doc, path) )\n    AS type\n);", "CREATE TABLE t1(\n    j JSON,\n    INDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )\n);", "CREATE TABLE t2 (\n    j JSON,\n    g INT GENERATED ALWAYS AS (j->\"$.id\"),\n    INDEX i1 (g)\n);"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-value"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference", "14.4 Operators"], "Feature": ["value\n          MEMBER OF(json_array)"], "Description": ["Returns true (1) if first operand matches any element of JSON", "\nvalue\n          MEMBER OF(json_array)\n", "\n          Returns true (1) if value is an\n          element of json_array, otherwise\n          returns false (0). value must be a\n          scalar or a JSON document; if it is a scalar, the operator\n          attempts to treat it as an element of a JSON array. If\n          value or\n          json_array is\n          NULL, the function returns\n          NULL.\n        ", "\n          Queries using MEMBER OF() on JSON columns\n          of InnoDB tables in the\n          WHERE clause can be optimized using\n          multi-valued indexes. See\n          Multi-Valued Indexes, for detailed\n          information and examples.\n        ", "\n          Simple scalars are treated as array values, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+-------------------------------------------+\n| 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+-------------------------------------------+\n|                                         1 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+---------------------------------------------+\n| 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set (0.00 sec)", "\n          Partial matches of array element values do not match:\n        ", "Press CTRL+C to copy mysql> SELECT 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+------------------------------------------+\n| 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n1 row in set (0.00 sec)", "Press CTRL+C to copy mysql> SELECT 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+--------------------------------------------+\n| 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+--------------------------------------------+\n|                                          0 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "\n          Conversions to and from string types are not performed:\n        ", "Press CTRL+C to copy mysql> SELECT\n    -> 17 MEMBER OF('[23, \"abc\", \"17\", \"ab\", 10]'),\n    -> \"17\" MEMBER OF('[23, \"abc\", 17, \"ab\", 10]')\\G\n*************************** 1. row ***************************\n17 MEMBER OF('[23, \"abc\", \"17\", \"ab\", 10]'): 0\n\"17\" MEMBER OF('[23, \"abc\", 17, \"ab\", 10]'): 0\n1 row in set (0.00 sec)", "\n          To use this operator with a value which itself an array, it is\n          necessary to cast it explicitly as a JSON array. You can do\n          this with CAST(... AS JSON):\n        ", "Press CTRL+C to copy mysql> SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------------+\n| CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+\n1 row in set (0.00 sec)", "\n          It is also possible to perform the necessary cast using the\n          JSON_ARRAY() function, like\n          this:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------+\n| JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "\n          Any JSON objects used as values to be tested or which appear\n          in the target array must be coerced to the correct type using\n          CAST(... AS JSON) or\n          JSON_OBJECT(). In addition, a\n          target array containing JSON objects must itself be cast using\n          JSON_ARRAY. This is demonstrated in the\n          following sequence of statements:\n        ", "Press CTRL+C to copy mysql> SET @a = CAST('{\"a\":1}' AS JSON);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @b = JSON_OBJECT(\"b\", 2);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @c = JSON_ARRAY(17, @b, \"abc\", @a, 23);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a MEMBER OF(@c), @b MEMBER OF(@c);\n+------------------+------------------+\n| @a MEMBER OF(@c) | @b MEMBER OF(@c) |\n+------------------+------------------+\n|                1 |                1 |\n+------------------+------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+-------------------------------------------+\n| 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+-------------------------------------------+\n|                                         1 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+---------------------------------------------+\n| 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+------------------------------------------+\n| 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+--------------------------------------------+\n| 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+--------------------------------------------+\n|                                          0 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------------+\n| CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------+\n| JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SET @a = CAST('{\"a\":1}' AS JSON);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @b = JSON_OBJECT(\"b\", 2);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @c = JSON_ARRAY(17, @b, \"abc\", @a, 23);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a MEMBER OF(@c), @b MEMBER OF(@c);\n+------------------+------------------+\n| @a MEMBER OF(@c) | @b MEMBER OF(@c) |\n+------------------+------------------+\n|                1 |                1 |\n+------------------+------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#operator_member-of"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY([val[,\n          val] ...])"], "Description": ["Create JSON array", "\nJSON_ARRAY([val[,\n          val] ...])\n", "\n          Evaluates a (possibly empty) list of values and returns a JSON\n          array containing those values.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME());\n+---------------------------------------------+\n| JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME()) |\n+---------------------------------------------+\n| [1, \"abc\", null, true, \"11:30:24.000000\"]   |\n+---------------------------------------------+"], "Examples": ["mysql> SELECT JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME());\n+---------------------------------------------+\n| JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME()) |\n+---------------------------------------------+\n| [1, \"abc\", null, true, \"11:30:24.000000\"]   |\n+---------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-array"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY_APPEND(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Append data to JSON document", "\nJSON_ARRAY_APPEND(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Appends values to the end of the indicated arrays within a\n          JSON document and returns the result. Returns\n          NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          If a path selects a scalar or object value, that value is\n          autowrapped within an array and the new value is added to that\n          array. Pairs for which the path does not identify any value in\n          the JSON document are ignored.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1]', 1) |\n+----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\"]        |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[0]', 2) |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\"]      |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |\n+-------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\"]         |\n+-------------------------------------+\n\nmysql> SET @j = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');\n+------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.b', 'x')  |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');\n+--------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.c', 'y')    |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n\nmysql> SET @j = '{\"a\": 1}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$', 'z');\n+---------------------------------+\n| JSON_ARRAY_APPEND(@j, '$', 'z') |\n+---------------------------------+\n| [{\"a\": 1}, \"z\"]                 |\n+---------------------------------+"], "Examples": ["mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1]', 1) |\n+----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\"]        |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[0]', 2) |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\"]      |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |\n+-------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\"]         |\n+-------------------------------------+\n\nmysql> SET @j = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');\n+------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.b', 'x')  |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');\n+--------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.c', 'y')    |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n\nmysql> SET @j = '{\"a\": 1}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$', 'z');\n+---------------------------------+\n| JSON_ARRAY_APPEND(@j, '$', 'z') |\n+---------------------------------+\n| [{\"a\": 1}, \"z\"]                 |\n+---------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-array-append"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_ARRAY_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert into JSON array", "\nJSON_ARRAY_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Updates a JSON document, inserting into an array within the\n          document and returning the modified document. Returns\n          NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard or does\n          not end with an array element identifier.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          Pairs for which the path does not identify any array in the\n          JSON document are ignored. If a path identifies an array\n          element, the corresponding value is inserted at that element\n          position, shifting any following values to the right. If a\n          path identifies an array position past the end of an array,\n          the value is inserted at the end of the array.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+", "\n          Earlier modifications affect the positions of the following\n          elements in the array, so subsequent paths in the same\n          JSON_ARRAY_INSERT() call should\n          take this into account. In the final example, the second path\n          inserts nothing because the path no longer matches anything\n          after the first insert.\n        "], "Examples": ["mysql> SET @j = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-array-insert"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_CONTAINS(target,\n          candidate[,\n          path])"], "Description": ["Whether JSON document contains specific object at path", "\nJSON_CONTAINS(target,\n          candidate[,\n          path])\n", "\n          Indicates by returning 1 or 0 whether a given\n          candidate JSON document is\n          contained within a target JSON\n          document, or\u2014if a path\n          argument was supplied\u2014whether the candidate is found at\n          a specific path within the target. Returns\n          NULL if any argument is\n          NULL, or if the path argument does not\n          identify a section of the target document. An error occurs if\n          target or\n          candidate is not a valid JSON\n          document, or if the path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          To check only whether any data exists at the path, use\n          JSON_CONTAINS_PATH() instead.\n        ", "\n          The following rules define containment:\n", "\n\n              A candidate scalar is contained in a target scalar if and\n              only if they are comparable and are equal. Two scalar\n              values are comparable if they have the same\n              JSON_TYPE() types, with the\n              exception that values of types INTEGER\n              and DECIMAL are also comparable to each\n              other.\n            \n              A candidate array is contained in a target array if and\n              only if every element in the candidate is contained in\n              some element of the target.\n            \n              A candidate nonarray is contained in a target array if and\n              only if the candidate is contained in some element of the\n              target.\n            \n              A candidate object is contained in a target object if and\n              only if for each key in the candidate there is a key with\n              the same name in the target and the value associated with\n              the candidate key is contained in the value associated\n              with the target key.\n\n", "\n          Otherwise, the candidate value is not contained in the target\n          document.\n        ", "\n          Queries using JSON_CONTAINS() on\n          InnoDB tables can be optimized\n          using multi-valued indexes; see\n          Multi-Valued Indexes, for more\n          information.\n        ", "Press CTRL+C to copy mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SET @j2 = '1';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.b');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.b') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nmysql> SET @j2 = '{\"d\": 4}';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.c');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.c') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+"], "Examples": ["mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SET @j2 = '1';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.b');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.b') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nmysql> SET @j2 = '{\"d\": 4}';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.c');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.c') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-contains"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_CONTAINS_PATH(json_doc,\n          one_or_all,\n          path[,\n          path] ...)"], "Description": ["Whether JSON document contains any data at path", "\nJSON_CONTAINS_PATH(json_doc,\n          one_or_all,\n          path[,\n          path] ...)\n", "\n          Returns 0 or 1 to indicate whether a JSON document contains\n          data at a given path or paths. Returns NULL\n          if any argument is NULL. An error occurs if\n          the json_doc argument is not a\n          valid JSON document, any path\n          argument is not a valid path expression, or\n          one_or_all is not\n          'one' or 'all'.\n        ", "\n          To check for a specific value at a path, use\n          JSON_CONTAINS() instead.\n        ", "\n          The return value is 0 if no specified path exists within the\n          document. Otherwise, the return value depends on the\n          one_or_all argument:\n", "\n\n'one': 1 if at least one path exists\n              within the document, 0 otherwise.\n            \n'all': 1 if all paths exist within the\n              document, 0 otherwise.\n\n", "Press CTRL+C to copy mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+"], "Examples": ["mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-contains-path"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_DEPTH(json_doc)"], "Description": ["Maximum depth of JSON document", "\nJSON_DEPTH(json_doc)\n", "\n          Returns the maximum depth of a JSON document. Returns\n          NULL if the argument is\n          NULL. An error occurs if the argument is\n          not a valid JSON document.\n        ", "\n          An empty array, empty object, or scalar value has depth 1. A\n          nonempty array containing only elements of depth 1 or nonempty\n          object containing only member values of depth 1 has depth 2.\n          Otherwise, a JSON document has depth greater than 2.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\nmysql> SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');\n+------------------------+------------------------+\n| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |\n+------------------------+------------------------+\n|                      2 |                      2 |\n+------------------------+------------------------+\nmysql> SELECT JSON_DEPTH('[10, {\"a\": 20}]');\n+-------------------------------+\n| JSON_DEPTH('[10, {\"a\": 20}]') |\n+-------------------------------+\n|                             3 |\n+-------------------------------+"], "Examples": ["mysql> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\nmysql> SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');\n+------------------------+------------------------+\n| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |\n+------------------------+------------------------+\n|                      2 |                      2 |\n+------------------------+------------------------+\nmysql> SELECT JSON_DEPTH('[10, {\"a\": 20}]');\n+-------------------------------+\n| JSON_DEPTH('[10, {\"a\": 20}]') |\n+-------------------------------+\n|                             3 |\n+-------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-depth"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_EXTRACT(json_doc,\n          path[,\n          path] ...)"], "Description": ["Return data from JSON document", "\nJSON_EXTRACT(json_doc,\n          path[,\n          path] ...)\n", "\n          Returns data from a JSON document, selected from the parts of\n          the document matched by the path\n          arguments. Returns NULL if any argument is\n          NULL or no paths locate a value in the\n          document. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression.\n        ", "\n          The return value consists of all values matched by the\n          path arguments. If it is possible\n          that those arguments could return multiple values, the matched\n          values are autowrapped as an array, in the order corresponding\n          to the paths that produced them. Otherwise, the return value\n          is the single matched value.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |\n+--------------------------------------------+\n| 20                                         |\n+--------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');\n+----------------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |\n+----------------------------------------------------+\n| [20, 10]                                           |\n+----------------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |\n+-----------------------------------------------+\n| [30, 40]                                      |\n+-----------------------------------------------+", "\n          MySQL supports the\n          ->\n          operator as shorthand for this function as used with 2\n          arguments where the left hand side is a\n          JSON column identifier (not an\n          expression) and the right hand side is the JSON path to be\n          matched within the column.\n        "], "Examples": ["mysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |\n+--------------------------------------------+\n| 20                                         |\n+--------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');\n+----------------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |\n+----------------------------------------------------+\n| [20, 10]                                           |\n+----------------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |\n+-----------------------------------------------+\n| [30, 40]                                      |\n+-----------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-extract"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert data into JSON document", "\nJSON_INSERT(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Inserts data into a JSON document and returns the result.\n          Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document is\n          ignored and does not overwrite the existing document value. A\n          path-value pair for a nonexisting path in the document adds\n          the value to the document if the path identifies one of these\n          types of values:\n", "\n\n              A member not present in an existing object. The member is\n              added to the object and associated with the new value.\n            \n              A position past the end of an existing array. The array is\n              extended with the new value. If the existing value is not\n              an array, it is autowrapped as an array, then extended\n              with the new value.\n\n", "\n          Otherwise, a path-value pair for a nonexisting path in the\n          document is ignored and has no effect.\n        ", "\n          For a comparison of\n          JSON_INSERT(),\n          JSON_REPLACE(), and\n          JSON_SET(), see the discussion\n          of JSON_SET().\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+", "\n          The third and final value listed in the result is a quoted\n          string and not an array like the second one (which is not\n          quoted in the output); no casting of values to the JSON type\n          is performed. To insert the array as an array, you must\n          perform such casts explicitly, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON));\n+------------------------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON)) |\n+------------------------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [true, false]}                        |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+", "mysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON));\n+------------------------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON)) |\n+------------------------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [true, false]}                        |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-insert"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_KEYS(json_doc[,\n          path])"], "Description": ["Array of keys from JSON document", "\nJSON_KEYS(json_doc[,\n          path])\n", "\n          Returns the keys from the top-level value of a JSON object as\n          a JSON array, or, if a path\n          argument is given, the top-level keys from the selected path.\n          Returns NULL if any argument is\n          NULL, the\n          json_doc argument is not an object,\n          or path, if given, does not locate\n          an object. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or the path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The result array is empty if the selected object is empty. If\n          the top-level value has nested subobjects, the return value\n          does not include keys from those subobjects.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\nmysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+"], "Examples": ["mysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\nmysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-keys"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_LENGTH(json_doc[,\n          path])"], "Description": ["Number of elements in JSON document", "\nJSON_LENGTH(json_doc[,\n          path])\n", "\n          Returns the length of a JSON document, or, if a\n          path argument is given, the length\n          of the value within the document identified by the path.\n          Returns NULL if any argument is\n          NULL or the path\n          argument does not identify a value in the document. An error\n          occurs if the json_doc argument is\n          not a valid JSON document or the\n          path argument is not a valid path\n          expression.\n        ", "\n          The length of a document is determined as follows:\n", "\n\n              The length of a scalar is 1.\n            \n              The length of an array is the number of array elements.\n            \n              The length of an object is the number of object members.\n            \n              The length does not count the length of nested arrays or\n              objects.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}]');\n+---------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}]') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}');\n+-----------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+-----------------------------------------+\n|                                       2 |\n+-----------------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+"], "Examples": ["mysql> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}]');\n+---------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}]') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}');\n+-----------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+-----------------------------------------+\n|                                       2 |\n+-----------------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-length"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, preserving duplicate keys. Deprecated", "\nJSON_MERGE(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Deprecated synonym for\n          JSON_MERGE_PRESERVE().\n        "], "Examples": [], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE_PATCH(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, replacing values of duplicate keys", "\nJSON_MERGE_PATCH(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Performs an\n          RFC\n          7396 compliant merge of two or more JSON documents and\n          returns the merged result, without preserving members having\n          duplicate keys. Raises an error if at least one of the\n          documents passed as arguments to this function is not valid.\n", "\n\nNote\n\n\n            For an explanation and example of the differences between\n            this function and JSON_MERGE_PRESERVE(),\n            see\n            JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE().\n\n", "\nJSON_MERGE_PATCH() performs a merge as\n          follows:\n", "\n\n              If the first argument is not an object, the result of the\n              merge is the same as if an empty object had been merged\n              with the second argument.\n            \n              If the second argument is not an object, the result of the\n              merge is the second argument.\n            \n              If both arguments are objects, the result of the merge is\n              an object with the following members:\n\n\n\n                  All members of the first object which do not have a\n                  corresponding member with the same key in the second\n                  object.\n                \n                  All members of the second object which do not have a\n                  corresponding key in the first object, and whose value\n                  is not the JSON null literal.\n                \n                  All members with a key that exists in both the first\n                  and the second object, and whose value in the second\n                  object is not the JSON null\n                  literal. The values of these members are the results\n                  of recursively merging the value in the first object\n                  with the value in the second object.\n\n\n\n", "\n          For additional information, see\n          Normalization, Merging, and Autowrapping of JSON Values.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '[true, false]') |\n+---------------------------------------------+\n| [true, false]                               |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}') |\n+-------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}');\n+------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}') |\n+------------------------------------------+\n| {\"id\": 47}                               |\n+------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',\n     >     '{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }',\n     >     '{ \"a\": 5, \"d\":6 }');\n+-------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }','{ \"a\": 5, \"d\":6 }') |\n+-------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                              |\n+-------------------------------------------------------------------------------+", "\n          You can use this function to remove a member by specifying\n          null as the value of the same member in the\n          second argument, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}');\n+--------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}') |\n+--------------------------------------------------+\n| {\"a\": 1}                                         |\n+--------------------------------------------------+", "\n          This example shows that the function operates in a recursive\n          fashion; that is, values of members are not limited to\n          scalars, but rather can themselves be JSON documents:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}');\n+----------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}') |\n+----------------------------------------------------+\n| {\"a\": {\"x\": 1, \"y\": 2}}                            |\n+----------------------------------------------------+", "JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE().\u00a0\n            The behavior of JSON_MERGE_PATCH() is the\n            same as that of\n            JSON_MERGE_PRESERVE(), with\n            the following two exceptions:\n", "\n\nJSON_MERGE_PATCH() removes any member\n              in the first object with a matching key in the second\n              object, provided that the value associated with the key in\n              the second object is not JSON null.\n            \n              If the second object has a member with a key matching a\n              member in the first object,\n              JSON_MERGE_PATCH()\nreplaces the value in the first\n              object with the value in the second object, whereas\n              JSON_MERGE_PRESERVE()\nappends the second value to the first\n              value.\n\n", "\n          This example compares the results of merging the same 3 JSON\n          objects, each having a matching key \"a\",\n          with each of these two functions:\n        ", "Press CTRL+C to copy mysql> SET @x = '{ \"a\": 1, \"b\": 2 }',\n     >     @y = '{ \"a\": 3, \"c\": 4 }',\n     >     @z = '{ \"a\": 5, \"d\": 6 }';\n\nmysql> SELECT  JSON_MERGE_PATCH(@x, @y, @z)    AS Patch,\n    ->         JSON_MERGE_PRESERVE(@x, @y, @z) AS Preserve\\G\n*************************** 1. row ***************************\n   Patch: {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}\nPreserve: {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}"], "Examples": ["mysql> SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '[true, false]') |\n+---------------------------------------------+\n| [true, false]                               |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}') |\n+-------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}');\n+------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}') |\n+------------------------------------------+\n| {\"id\": 47}                               |\n+------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',\n     >     '{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }',\n     >     '{ \"a\": 5, \"d\":6 }');\n+-------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }','{ \"a\": 5, \"d\":6 }') |\n+-------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                              |\n+-------------------------------------------------------------------------------+", "mysql> SELECT JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}');\n+--------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}') |\n+--------------------------------------------------+\n| {\"a\": 1}                                         |\n+--------------------------------------------------+", "mysql> SELECT JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}');\n+----------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}') |\n+----------------------------------------------------+\n| {\"a\": {\"x\": 1, \"y\": 2}}                            |\n+----------------------------------------------------+", "mysql> SET @x = '{ \"a\": 1, \"b\": 2 }',\n     >     @y = '{ \"a\": 3, \"c\": 4 }',\n     >     @z = '{ \"a\": 5, \"d\": 6 }';\n\nmysql> SELECT  JSON_MERGE_PATCH(@x, @y, @z)    AS Patch,\n    ->         JSON_MERGE_PRESERVE(@x, @y, @z) AS Preserve\\G\n*************************** 1. row ***************************\n   Patch: {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}\nPreserve: {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge-patch"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_MERGE_PRESERVE(json_doc,\n          json_doc[,\n          json_doc] ...)"], "Description": ["Merge JSON documents, preserving duplicate keys", "\nJSON_MERGE_PRESERVE(json_doc,\n          json_doc[,\n          json_doc] ...)\n", "\n          Merges two or more JSON documents and returns the merged\n          result. Returns NULL if any argument is\n          NULL. An error occurs if any argument is\n          not a valid JSON document.\n        ", "\n          Merging takes place according to the following rules. For\n          additional information, see\n          Normalization, Merging, and Autowrapping of JSON Values.\n", "\n\n              Adjacent arrays are merged to a single array.\n            \n              Adjacent objects are merged to a single object.\n            \n              A scalar value is autowrapped as an array and merged as an\n              array.\n            \n              An adjacent array and object are merged by autowrapping\n              the object as an array and merging the two arrays.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '[true, false]') |\n+------------------------------------------------+\n| [1, 2, true, false]                            |\n+------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}');\n+----------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}') |\n+----------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                            |\n+----------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}');\n+---------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}') |\n+---------------------------------------------+\n| [1, 2, {\"id\": 47}]                          |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }',\n     >    '{ \"a\": 3, \"c\": 4 }');\n+--------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\":4 }') |\n+--------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": 4}                                |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }',\n     >    '{ \"a\": 5, \"d\": 6 }');\n+----------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }','{ \"a\": 5, \"d\": 6 }') |\n+----------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                         |\n+----------------------------------------------------------------------------------+", "\n          This function is similar to but differs from\n          JSON_MERGE_PATCH() in\n          significant respects; see\n          JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE(),\n          for more information.\n        "], "Examples": ["mysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '[true, false]') |\n+------------------------------------------------+\n| [1, 2, true, false]                            |\n+------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}');\n+----------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}') |\n+----------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                            |\n+----------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}');\n+---------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}') |\n+---------------------------------------------+\n| [1, 2, {\"id\": 47}]                          |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }',\n     >    '{ \"a\": 3, \"c\": 4 }');\n+--------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\":4 }') |\n+--------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": 4}                                |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }',\n     >    '{ \"a\": 5, \"d\": 6 }');\n+----------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }','{ \"a\": 5, \"d\": 6 }') |\n+----------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                         |\n+----------------------------------------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge-preserve"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_OBJECT([key,\n          val[,\n          key,\n          val] ...])"], "Description": ["Create JSON object", "\nJSON_OBJECT([key,\n          val[,\n          key,\n          val] ...])\n", "\n          Evaluates a (possibly empty) list of key-value pairs and\n          returns a JSON object containing those pairs. An error occurs\n          if any key name is NULL or the number of\n          arguments is odd.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OBJECT('id', 87, 'name', 'carrot');\n+-----------------------------------------+\n| JSON_OBJECT('id', 87, 'name', 'carrot') |\n+-----------------------------------------+\n| {\"id\": 87, \"name\": \"carrot\"}            |\n+-----------------------------------------+"], "Examples": ["mysql> SELECT JSON_OBJECT('id', 87, 'name', 'carrot');\n+-----------------------------------------+\n| JSON_OBJECT('id', 87, 'name', 'carrot') |\n+-----------------------------------------+\n| {\"id\": 87, \"name\": \"carrot\"}            |\n+-----------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-object"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_OVERLAPS(json_doc1,\n          json_doc2)"], "Description": ["Compares two JSON documents, returns TRUE (1) if these have any", "\nJSON_OVERLAPS(json_doc1,\n          json_doc2)\n", "\n          Compares two JSON documents. Returns true (1) if the two\n          document have any key-value pairs or array elements in common.\n          If both arguments are scalars, the function performs a simple\n          equality test. If either argument is NULL,\n          the function returns NULL.\n        ", "\n          This function serves as counterpart to\n          JSON_CONTAINS(), which requires\n          all elements of the array searched for to be present in the\n          array searched in. Thus, JSON_CONTAINS()\n          performs an AND operation on search keys,\n          while JSON_OVERLAPS() performs an\n          OR operation.\n        ", "\n          Queries on JSON columns of InnoDB\n          tables using JSON_OVERLAPS() in the\n          WHERE clause can be optimized using\n          multi-valued indexes.\n          Multi-Valued Indexes, provides detailed\n          information and examples.\n        ", "\n          When comparing two arrays, JSON_OVERLAPS()\n          returns true if they share one or more array elements in\n          common, and false if they do not:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "\n          Partial matches are treated as no match, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)", "\n          When comparing objects, the result is true if they have at\n          least one key-value pair in common.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}') |\n+-----------------------------------------------------------------------+\n|                                                                     1 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}') |\n+-----------------------------------------------------------------------+\n|                                                                     0 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)", "\n          If two scalars are used as the arguments to the function,\n          JSON_OVERLAPS() performs a simple test for\n          equality:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('5', '5');\n+-------------------------+\n| JSON_OVERLAPS('5', '5') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('5', '6');\n+-------------------------+\n| JSON_OVERLAPS('5', '6') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)", "\n          When comparing a scalar with an array,\n          JSON_OVERLAPS() attempts to treat the\n          scalar as an array element. In this example, the second\n          argument 6 is interpreted as\n          [6], as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '6');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '6') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set (0.00 sec)", "\n          The function does not perform type conversions:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[4,5,\"6\",7]', '6');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,\"6\",7]', '6') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '\"6\"');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '\"6\"') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}') |\n+-----------------------------------------------------------------------+\n|                                                                     1 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}') |\n+-----------------------------------------------------------------------+\n|                                                                     0 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('5', '5');\n+-------------------------+\n| JSON_OVERLAPS('5', '5') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('5', '6');\n+-------------------------+\n| JSON_OVERLAPS('5', '6') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '6');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '6') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_OVERLAPS('[4,5,\"6\",7]', '6');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,\"6\",7]', '6') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '\"6\"');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '\"6\"') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-overlaps"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_PRETTY(json_val)"], "Description": ["Print a JSON document in human-readable format", "\nJSON_PRETTY(json_val)\n", "\n          Provides pretty-printing of JSON values similar to that\n          implemented in PHP and by other languages and database\n          systems. The value supplied must be a JSON value or a valid\n          string representation of a JSON value. Extraneous whitespaces\n          and newlines present in this value have no effect on the\n          output. For a NULL value, the function\n          returns NULL. If the value is not a JSON\n          document, or if it cannot be parsed as one, the function fails\n          with an error.\n        ", "\n          Formatting of the output from this function adheres to the\n          following rules:\n", "\n\n              Each array element or object member appears on a separate\n              line, indented by one additional level as compared to its\n              parent.\n            \n              Each level of indentation adds two leading spaces.\n            \n              A comma separating individual array elements or object\n              members is printed before the newline that separates the\n              two elements or members.\n            \n              The key and the value of an object member are separated by\n              a colon followed by a space (': ').\n            \n              An empty object or array is printed on a single line. No\n              space is printed between the opening and closing brace.\n            \n              Special characters in string scalars and key names are\n              escaped employing the same rules used by the\n              JSON_QUOTE() function.\n\n", "Press CTRL+C to copy mysql> SELECT JSON_PRETTY('123'); # scalar\n+--------------------+\n| JSON_PRETTY('123') |\n+--------------------+\n| 123                |\n+--------------------+\n\nmysql> SELECT JSON_PRETTY(\"[1,3,5]\"); # array\n+------------------------+\n| JSON_PRETTY(\"[1,3,5]\") |\n+------------------------+\n| [\n  1,\n  3,\n  5\n]      |\n+------------------------+\n\nmysql> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}'); # object\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"15\",\n  \"x\": \"25\"\n}   |\n+---------------------------------------------+\n\nmysql> SELECT JSON_PRETTY('[\"a\",1,{\"key1\":\n    '>    \"value1\"},\"5\",     \"77\" ,\n    '>       {\"key2\":[\"value3\",\"valueX\",\n    '> \"valueY\"]},\"j\", \"2\"   ]')\\G  # nested arrays and objects\n*************************** 1. row ***************************\nJSON_PRETTY('[\"a\",1,{\"key1\":\n             \"value1\"},\"5\",     \"77\" ,\n                {\"key2\":[\"value3\",\"valuex\",\n          \"valuey\"]},\"j\", \"2\"   ]'): [\n  \"a\",\n  1,\n  {\n    \"key1\": \"value1\"\n  },\n  \"5\",\n  \"77\",\n  {\n    \"key2\": [\n      \"value3\",\n      \"valuex\",\n      \"valuey\"\n    ]\n  },\n  \"j\",\n  \"2\"\n]"], "Examples": ["mysql> SELECT JSON_PRETTY('123'); # scalar\n+--------------------+\n| JSON_PRETTY('123') |\n+--------------------+\n| 123                |\n+--------------------+\n\nmysql> SELECT JSON_PRETTY(\"[1,3,5]\"); # array\n+------------------------+\n| JSON_PRETTY(\"[1,3,5]\") |\n+------------------------+\n| [\n  1,\n  3,\n  5\n]      |\n+------------------------+\n\nmysql> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}'); # object\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"15\",\n  \"x\": \"25\"\n}   |\n+---------------------------------------------+\n\nmysql> SELECT JSON_PRETTY('[\"a\",1,{\"key1\":\n    '>    \"value1\"},\"5\",     \"77\" ,\n    '>       {\"key2\":[\"value3\",\"valueX\",\n    '> \"valueY\"]},\"j\", \"2\"   ]')\\G  # nested arrays and objects\n*************************** 1. row ***************************\nJSON_PRETTY('[\"a\",1,{\"key1\":\n             \"value1\"},\"5\",     \"77\" ,\n                {\"key2\":[\"value3\",\"valuex\",\n          \"valuey\"]},\"j\", \"2\"   ]'): [\n  \"a\",\n  1,\n  {\n    \"key1\": \"value1\"\n  },\n  \"5\",\n  \"77\",\n  {\n    \"key2\": [\n      \"value3\",\n      \"valuex\",\n      \"valuey\"\n    ]\n  },\n  \"j\",\n  \"2\"\n]"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-pretty"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_REMOVE(json_doc,\n          path[,\n          path] ...)"], "Description": ["Remove data from JSON document", "\nJSON_REMOVE(json_doc,\n          path[,\n          path] ...)\n", "\n          Removes data from a JSON document and returns the result.\n          Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or is $ or\n          contains a * or **\n          wildcard.\n        ", "\n          The path arguments are evaluated\n          left to right. The document produced by evaluating one path\n          becomes the new value against which the next path is\n          evaluated.\n        ", "\n          It is not an error if the element to be removed does not exist\n          in the document; in that case, the path does not affect the\n          document.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_REMOVE(@j, '$[1]');\n+-------------------------+\n| JSON_REMOVE(@j, '$[1]') |\n+-------------------------+\n| [\"a\", \"d\"]              |\n+-------------------------+"], "Examples": ["mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_REMOVE(@j, '$[1]');\n+-------------------------+\n| JSON_REMOVE(@j, '$[1]') |\n+-------------------------+\n| [\"a\", \"d\"]              |\n+-------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-remove"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_REPLACE(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Replace values in JSON document", "\nJSON_REPLACE(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Replaces existing values in a JSON document and returns the\n          result. Returns NULL if any argument is\n          NULL. An error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document\n          overwrites the existing document value with the new value. A\n          path-value pair for a nonexisting path in the document is\n          ignored and has no effect.\n        ", "\n          The optimizer can perform a partial, in-place update of a\n          JSON column instead of removing the old\n          document and writing the new document in its entirety to the\n          column. This optimization can be performed for an update\n          statement that uses the\n          JSON_REPLACE() function and\n          meets the conditions outlined in\n          Partial Updates of JSON Values.\n        ", "\n          For a comparison of\n          JSON_INSERT(),\n          JSON_REPLACE(), and\n          JSON_SET(), see the discussion\n          of JSON_SET().\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-replace"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SCHEMA_VALIDATION_REPORT(schema,document)"], "Description": ["Validate JSON document against JSON schema; returns report in JSON", "\nJSON_SCHEMA_VALIDATION_REPORT(schema,document)\n", "\n          Validates a JSON document against a\n          JSON schema. Both\n          schema and\n          document are required. As with\n          JSON_VALID_SCHEMA(), the schema must be a valid JSON object,\n          and the document must be a valid JSON document. Provided that\n          these conditions are met, the function returns a report, as a\n          JSON document, on the outcome of the validation. If the JSON\n          document is considered valid according to the JSON Schema, the\n          function returns a JSON object with one property\n          valid having the value \"true\". If the JSON\n          document fails validation, the function returns a JSON object\n          which includes the properties listed here:\n", "\n\nvalid: Always \"false\" for a failed\n              schema validation\n            \nreason: A human-readable string\n              containing the reason for the failure\n            \nschema-location: A JSON pointer URI\n              fragment identifier indicating where in the JSON schema\n              the validation failed (see Note following this list)\n            \ndocument-location: A JSON pointer URI\n              fragment identifier indicating where in the JSON document\n              the validation failed (see Note following this list)\n            \nschema-failed-keyword: A string\n              containing the name of the keyword or property in the JSON\n              schema that was violated\n\n", "\n\nNote\n\n\n            JSON pointer URI fragment identifiers are defined in\n            RFC\n            6901 - JavaScript Object Notation (JSON) Pointer.\n            (These are not the same as the JSON\n            path notation used by\n            JSON_EXTRACT() and other\n            MySQL JSON functions.) In this notation,\n            # represents the entire document, and\n            #/myprop represents the portion of the\n            document included in the top-level property named\n            myprop. See the specification just cited\n            and the examples shown later in this section for more\n            information.\n\n", "\n          In this example, we set a user variable\n          @schema to the value of a JSON schema for\n          geographical coordinates, and another one\n          @document to the value of a JSON document\n          containing one such coordinate. We then verify that\n          @document validates according to\n          @schema by using them as the arguments to\n          JSON_SCHEMA_VALIDATION_REORT():\n        ", "Press CTRL+C to copy mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)", "\n          Now we set @document such that it specifies\n          an illegal value for one of its properties, like this:\n        ", "Press CTRL+C to copy mysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 310.445118\n    '> }';", "\n          Validation of @document now fails when\n          tested with\n          JSON_SCHEMA_VALIDATION_REPORT(). The output\n          from the function call contains detailed information about the\n          failure (with the function wrapped by\n          JSON_PRETTY() to provide better\n          formatting), as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#/longitude' failed requirement 'maximum' at JSON Schema location '#/properties/longitude'\",\n  \"schema-location\": \"#/properties/longitude\",\n  \"document-location\": \"#/longitude\",\n  \"schema-failed-keyword\": \"maximum\"\n}\n1 row in set (0.00 sec)", "\n          Since @schema contains the\n          required attribute, we can set\n          @document to a value that is otherwise\n          valid but does not contain the required properties, then test\n          it against @schema. The output of\n          JSON_SCHEMA_VALIDATION_REPORT() shows that\n          validation fails due to lack of a required element, like this:\n        ", "Press CTRL+C to copy mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#' failed requirement 'required' at JSON Schema location '#'\",\n  \"schema-location\": \"#\",\n  \"document-location\": \"#\",\n  \"schema-failed-keyword\": \"required\"\n}\n1 row in set (0.00 sec)", "\n          If we now set the value of @schema to the\n          same JSON schema but without the required\n          attribute, @document validates because it\n          is a valid JSON object, even though it contains no properties,\n          as shown here:\n        ", "Press CTRL+C to copy mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 310.445118\n    '> }';", "mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n  \"valid\": false,\n  \"reason\": \"The JSON document location '#' failed requirement 'required' at JSON Schema location '#'\",\n  \"schema-location\": \"#\",\n  \"document-location\": \"#\",\n  \"schema-failed-keyword\": \"required\"\n}\n1 row in set (0.00 sec)", "mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true}                                   |\n+---------------------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-validation-functions.html#function_json-schema-validation-report"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SEARCH(json_doc,\n          one_or_all,\n          search_str[,\n          escape_char[,\n          path] ...])"], "Description": ["Path to value within JSON document", "\nJSON_SEARCH(json_doc,\n          one_or_all,\n          search_str[,\n          escape_char[,\n          path] ...])\n", "\n          Returns the path to the given string within a JSON document.\n          Returns NULL if any of the\n          json_doc,\n          search_str, or\n          path arguments are\n          NULL; no path\n          exists within the document; or\n          search_str is not found. An error\n          occurs if the json_doc argument is\n          not a valid JSON document, any path\n          argument is not a valid path expression,\n          one_or_all is not\n          'one' or 'all', or\n          escape_char is not a constant\n          expression.\n        ", "\n          The one_or_all argument affects the\n          search as follows:\n", "\n\n'one': The search terminates after the\n              first match and returns one path string. It is undefined\n              which match is considered first.\n            \n'all': The search returns all matching\n              path strings such that no duplicate paths are included. If\n              there are multiple strings, they are autowrapped as an\n              array. The order of the array elements is undefined.\n\n", "\n          Within the search_str search string\n          argument, the % and _\n          characters work as for the LIKE\n          operator: % matches any number of\n          characters (including zero characters), and\n          _ matches exactly one character.\n        ", "\n          To specify a literal % or\n          _ character in the search string, precede\n          it by the escape character. The default is\n          \\ if the\n          escape_char argument is missing or\n          NULL. Otherwise,\n          escape_char must be a constant that\n          is empty or one character.\n        ", "\n          For more information about matching and escape character\n          behavior, see the description of\n          LIKE in\n          Section\u00a014.8.1, \u201cString Comparison Functions and Operators\u201d. For escape\n          character handling, a difference from the\n          LIKE behavior is that the escape\n          character for JSON_SEARCH()\n          must evaluate to a constant at compile time, not just at\n          execution time. For example, if\n          JSON_SEARCH() is used in a\n          prepared statement and the\n          escape_char argument is supplied\n          using a ? parameter, the parameter value\n          might be constant at execution time, but is not at compile\n          time.\n        ", "Press CTRL+C to copy mysql> SET @j = '[\"abc\", [{\"k\": \"10\"}, \"def\"], {\"x\":\"abc\"}, {\"y\":\"bcd\"}]';\n\nmysql> SELECT JSON_SEARCH(@j, 'one', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'one', 'abc') |\n+-------------------------------+\n| \"$[0]\"                        |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'ghi');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'ghi') |\n+-------------------------------+\n| NULL                          |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10');\n+------------------------------+\n| JSON_SEARCH(@j, 'all', '10') |\n+------------------------------+\n| \"$[1][0].k\"                  |\n+------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$');\n+-----------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$') |\n+-----------------------------------------+\n| \"$[1][0].k\"                             |\n+-----------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$**.k');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$**.k') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k');\n+-------------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k') |\n+-------------------------------------------------+\n| \"$[1][0].k\"                                     |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]');\n+-----------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]') |\n+-----------------------------------------------+\n| \"$[1][0].k\"                                   |\n+-----------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%a%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%a%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[3]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[3]') |\n+-------------------------------------------+\n| \"$[3].y\"                                  |\n+-------------------------------------------+", "\n          For more information about the JSON path syntax supported by\n          MySQL, including rules governing the wildcard operators\n          * and **, see\n          JSON Path Syntax.\n        "], "Examples": ["mysql> SET @j = '[\"abc\", [{\"k\": \"10\"}, \"def\"], {\"x\":\"abc\"}, {\"y\":\"bcd\"}]';\n\nmysql> SELECT JSON_SEARCH(@j, 'one', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'one', 'abc') |\n+-------------------------------+\n| \"$[0]\"                        |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'ghi');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'ghi') |\n+-------------------------------+\n| NULL                          |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10');\n+------------------------------+\n| JSON_SEARCH(@j, 'all', '10') |\n+------------------------------+\n| \"$[1][0].k\"                  |\n+------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$');\n+-----------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$') |\n+-----------------------------------------+\n| \"$[1][0].k\"                             |\n+-----------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$**.k');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$**.k') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k');\n+-------------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k') |\n+-------------------------------------------------+\n| \"$[1][0].k\"                                     |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1]') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]');\n+-----------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]') |\n+-----------------------------------------------+\n| \"$[1][0].k\"                                   |\n+-----------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%a%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%a%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[3]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[3]') |\n+-------------------------------------------+\n| \"$[3].y\"                                  |\n+-------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-search"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_SET(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)"], "Description": ["Insert data into JSON document", "\nJSON_SET(json_doc,\n          path,\n          val[,\n          path,\n          val] ...)\n", "\n          Inserts or updates data in a JSON document and returns the\n          result. Returns NULL if\n          json_doc or\n          path is NULL, or\n          if path, when given, does not\n          locate an object. Otherwise, an error occurs if the\n          json_doc argument is not a valid\n          JSON document or any path argument\n          is not a valid path expression or contains a\n          * or ** wildcard.\n        ", "\n          The path-value pairs are evaluated left to right. The document\n          produced by evaluating one pair becomes the new value against\n          which the next pair is evaluated.\n        ", "\n          A path-value pair for an existing path in the document\n          overwrites the existing document value with the new value. A\n          path-value pair for a nonexisting path in the document adds\n          the value to the document if the path identifies one of these\n          types of values:\n", "\n\n              A member not present in an existing object. The member is\n              added to the object and associated with the new value.\n            \n              A position past the end of an existing array. The array is\n              extended with the new value. If the existing value is not\n              an array, it is autowrapped as an array, then extended\n              with the new value.\n\n", "\n          Otherwise, a path-value pair for a nonexisting path in the\n          document is ignored and has no effect.\n        ", "\n          The optimizer can perform a partial, in-place update of a\n          JSON column instead of removing the old\n          document and writing the new document in its entirety to the\n          column. This optimization can be performed for an update\n          statement that uses the\n          JSON_SET() function and meets\n          the conditions outlined in\n          Partial Updates of JSON Values.\n        ", "\n          The JSON_SET(),\n          JSON_INSERT(), and\n          JSON_REPLACE() functions are\n          related:\n", "\n\nJSON_SET() replaces\n              existing values and adds nonexisting values.\n            \nJSON_INSERT() inserts\n              values without replacing existing values.\n            \nJSON_REPLACE() replaces\n              only existing values.\n\n", "\n          The following examples illustrate these differences, using one\n          path that does exist in the document ($.a)\n          and another that does not exist ($.c):\n        ", "Press CTRL+C to copy mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_SET(@j, '$.a', 10, '$.c', '[true, false]');\n+-------------------------------------------------+\n| JSON_SET(@j, '$.a', 10, '$.c', '[true, false]') |\n+-------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}    |\n+-------------------------------------------------+\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Examples": ["mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_SET(@j, '$.a', 10, '$.c', '[true, false]');\n+-------------------------------------------------+\n| JSON_SET(@j, '$.a', 10, '$.c', '[true, false]') |\n+-------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}    |\n+-------------------------------------------------+\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-set"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_STORAGE_SIZE(json_val)"], "Description": ["Space used for storage of binary representation of a JSON document", "\nJSON_STORAGE_SIZE(json_val)\n", "\n          This function returns the number of bytes used to store the\n          binary representation of a JSON document. When the argument is\n          a JSON column, this is the space used to\n          store the JSON document as it was inserted into the column,\n          prior to any partial updates that may have been performed on\n          it afterwards. json_val must be a\n          valid JSON document or a string which can be parsed as one. In\n          the case where it is string, the function returns the amount\n          of storage space in the JSON binary representation that is\n          created by parsing the string as JSON and converting it to\n          binary. It returns NULL if the argument is\n          NULL.\n        ", "\n          An error results when json_val is\n          not NULL, and is not\u2014or cannot be\n          successfully parsed as\u2014a JSON document.\n        ", "\n          To illustrate this function's behavior when used with a\n          JSON column as its argument, we create a\n          table named jtable containing a\n          JSON column jcol, insert\n          a JSON value into the table, then obtain the storage space\n          used by this column with\n          JSON_STORAGE_SIZE(), as shown here:\n        ", "Press CTRL+C to copy mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+-----------------------------------------------+------+------+\n| jcol                                          | Size | Free |\n+-----------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    0 |\n+-----------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          According to the output of\n          JSON_STORAGE_SIZE(), the JSON document\n          inserted into the column takes up 47 bytes. We also checked\n          the amount of space freed by any previous partial updates of\n          the column using\n          JSON_STORAGE_FREE(); since no\n          updates have yet been performed, this is 0, as expected.\n        ", "\n          Next we perform an UPDATE on\n          the table that should result in a partial update of the\n          document stored in jcol, and then test the\n          result as shown here:\n        ", "Press CTRL+C to copy mysql> UPDATE jtable SET jcol = \n    ->     JSON_SET(jcol, \"$.b\", \"a\");\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+--------------------------------------------+------+------+\n| jcol                                       | Size | Free |\n+--------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    3 |\n+--------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          The value returned by JSON_STORAGE_FREE()\n          in the previous query indicates that a partial update of the\n          JSON document was performed, and that this freed 3 bytes of\n          space used to store it. The result returned by\n          JSON_STORAGE_SIZE() is unchanged by the\n          partial update.\n        ", "\n          Partial updates are supported for updates using\n          JSON_SET(),\n          JSON_REPLACE(), or\n          JSON_REMOVE(). The direct\n          assignment of a value to a JSON column\n          cannot be partially updated; following such an update,\n          JSON_STORAGE_SIZE() always shows the\n          storage used for the newly-set value:\n        ", "Press CTRL+C to copy mysql> UPDATE jtable\nmysql>     SET jcol = '{\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+------------------------------------------------+------+------+\n| jcol                                           | Size | Free |\n+------------------------------------------------+------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |   56 |    0 |\n+------------------------------------------------+------+------+\n1 row in set (0.00 sec)", "\n          A JSON user variable cannot be partially updated. This means\n          that this function always shows the space currently used to\n          store a JSON document in a user variable:\n        ", "Press CTRL+C to copy mysql> SET @j = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+------------------------------------+------+\n| @j                                 | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   45 |\n+------------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[1]', \"json\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+----------------------------------+------+\n| @j                               | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   43 |\n+----------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+---------------------------------------------+------+\n| @j                                          | Size |\n+---------------------------------------------+------+\n| [100, \"json\", [[10, 20, 30], 3, 5], 425.05] |   56 |\n+---------------------------------------------+------+\n1 row in set (0.00 sec)", "\n          For a JSON literal, this function always returns the current\n          storage space used:\n        ", "Press CTRL+C to copy mysql> SELECT\n    ->     JSON_STORAGE_SIZE('[100, \"sakila\", [1, 3, 5], 425.05]') AS A,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"}') AS B,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}') AS C,\n    ->     JSON_STORAGE_SIZE('[100, \"json\", [[10, 20, 30], 3, 5], 425.05]') AS D;\n+----+----+----+----+\n| A  | B  | C  | D  |\n+----+----+----+----+\n| 45 | 44 | 47 | 56 |\n+----+----+----+----+\n1 row in set (0.00 sec)"], "Examples": ["mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO jtable VALUES\n    ->     ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+-----------------------------------------------+------+------+\n| jcol                                          | Size | Free |\n+-----------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    0 |\n+-----------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> UPDATE jtable SET jcol = \n    ->     JSON_SET(jcol, \"$.b\", \"a\");\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+--------------------------------------------+------+------+\n| jcol                                       | Size | Free |\n+--------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"} |   47 |    3 |\n+--------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> UPDATE jtable\nmysql>     SET jcol = '{\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT\n    ->     jcol,\n    ->     JSON_STORAGE_SIZE(jcol) AS Size,\n    ->     JSON_STORAGE_FREE(jcol) AS Free\n    -> FROM jtable;\n+------------------------------------------------+------+------+\n| jcol                                           | Size | Free |\n+------------------------------------------------+------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"} |   56 |    0 |\n+------------------------------------------------+------+------+\n1 row in set (0.00 sec)", "mysql> SET @j = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+------------------------------------+------+\n| @j                                 | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] |   45 |\n+------------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[1]', \"json\");\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+----------------------------------+------+\n| @j                               | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] |   43 |\n+----------------------------------+------+\n1 row in set (0.00 sec)\n\nmysql> SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+---------------------------------------------+------+\n| @j                                          | Size |\n+---------------------------------------------+------+\n| [100, \"json\", [[10, 20, 30], 3, 5], 425.05] |   56 |\n+---------------------------------------------+------+\n1 row in set (0.00 sec)", "mysql> SELECT\n    ->     JSON_STORAGE_SIZE('[100, \"sakila\", [1, 3, 5], 425.05]') AS A,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"}') AS B,\n    ->     JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}') AS C,\n    ->     JSON_STORAGE_SIZE('[100, \"json\", [[10, 20, 30], 3, 5], 425.05]') AS D;\n+----+----+----+----+\n| A  | B  | C  | D  |\n+----+----+----+----+\n| 45 | 44 | 47 | 56 |\n+----+----+----+----+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-storage-size"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_TYPE(json_val)"], "Description": ["Type of JSON value", "\nJSON_TYPE(json_val)\n", "\n          Returns a utf8mb4 string indicating the\n          type of a JSON value. This can be an object, an array, or a\n          scalar type, as shown here:\n        ", "Press CTRL+C to copy mysql> SET @j = '{\"a\": [10, true]}';\nmysql> SELECT JSON_TYPE(@j);\n+---------------+\n| JSON_TYPE(@j) |\n+---------------+\n| OBJECT        |\n+---------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a'));\n+------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a')) |\n+------------------------------------+\n| ARRAY                              |\n+------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]')) |\n+---------------------------------------+\n| INTEGER                               |\n+---------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]')) |\n+---------------------------------------+\n| BOOLEAN                               |\n+---------------------------------------+", "\nJSON_TYPE() returns\n          NULL if the argument is\n          NULL:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+", "\n          An error occurs if the argument is not a valid JSON value:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required.", "\n          For a non-NULL, non-error result, the\n          following list describes the possible\n          JSON_TYPE() return values:\n", "\n\n              Purely JSON types:\n\n\n\nOBJECT: JSON objects\n                \nARRAY: JSON arrays\n                \nBOOLEAN: The JSON true and false\n                  literals\n                \nNULL: The JSON null literal\n\n\n\n              Numeric types:\n\n\n\nINTEGER: MySQL\n                  TINYINT,\n                  SMALLINT,\n                  MEDIUMINT and\n                  INT and\n                  BIGINT scalars\n                \nDOUBLE: MySQL\n                  DOUBLE\nFLOAT scalars\n                \nDECIMAL: MySQL\n                  DECIMAL and\n                  NUMERIC scalars\n\n\n\n              Temporal types:\n\n\n\nDATETIME: MySQL\n                  DATETIME and\n                  TIMESTAMP scalars\n                \nDATE: MySQL\n                  DATE scalars\n                \nTIME: MySQL\n                  TIME scalars\n\n\n\n              String types:\n\n\n\nSTRING: MySQL\n                  utf8mb3 character type scalars:\n                  CHAR,\n                  VARCHAR,\n                  TEXT,\n                  ENUM, and\n                  SET\n\n\n\n              Binary types:\n\n\n\nBLOB: MySQL binary type scalars\n                  including BINARY,\n                  VARBINARY,\n                  BLOB, and\n                  BIT\n\n\n\n              All other types:\n\n\n\nOPAQUE (raw bits)\n\n\n\n"], "Examples": ["mysql> SET @j = '{\"a\": [10, true]}';\nmysql> SELECT JSON_TYPE(@j);\n+---------------+\n| JSON_TYPE(@j) |\n+---------------+\n| OBJECT        |\n+---------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a'));\n+------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a')) |\n+------------------------------------+\n| ARRAY                              |\n+------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]')) |\n+---------------------------------------+\n| INTEGER                               |\n+---------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]')) |\n+---------------------------------------+\n| BOOLEAN                               |\n+---------------------------------------+", "mysql> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+", "mysql> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required."], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-type"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_UNQUOTE(json_val)"], "Description": ["Unquote JSON value", "\nJSON_UNQUOTE(json_val)\n", "\n          Unquotes JSON value and returns the result as a\n          utf8mb4 string. Returns\n          NULL if the argument is\n          NULL. An error occurs if the value starts\n          and ends with double quotes but is not a valid JSON string\n          literal.\n        ", "\n          Within a string, certain sequences have special meaning unless\n          the NO_BACKSLASH_ESCAPES SQL\n          mode is enabled. Each of these sequences begins with a\n          backslash (\\), known as the\n          escape character. MySQL recognizes the\n          escape sequences shown in\n          Table\u00a014.23, \u201cJSON_UNQUOTE() Special Character Escape Sequences\u201d. For\n          all other escape sequences, backslash is ignored. That is, the\n          escaped character is interpreted as if it was not escaped. For\n          example, \\x is just x.\n          These sequences are case-sensitive. For example,\n          \\b is interpreted as a backspace, but\n          \\B is interpreted as B.\n", "\nTable\u00a014.23\u00a0JSON_UNQUOTE() Special Character Escape Sequences\n\n\nEscape Sequence\nCharacter Represented by Sequence\n\n\\\"\nA double quote (\") character\n\n\\b\nA backspace character\n\n\\f\nA formfeed character\n\n\\n\nA newline (linefeed) character\n\n\\r\nA carriage return character\n\n\\t\nA tab character\n\n\\\\\nA backslash (\\) character\n\n\\uXXXX\nUTF-8 bytes for Unicode value XXXX\n\n\n", "\n          Two simple examples of the use of this function are shown\n          here:\n        ", "Press CTRL+C to copy mysql> SET @j = '\"abc\"';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-------+------------------+\n| @j    | JSON_UNQUOTE(@j) |\n+-------+------------------+\n| \"abc\" | abc              |\n+-------+------------------+\nmysql> SET @j = '[1, 2, 3]';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-----------+------------------+\n| @j        | JSON_UNQUOTE(@j) |\n+-----------+------------------+\n| [1, 2, 3] | [1, 2, 3]        |\n+-----------+------------------+", "\n          The following set of examples shows how\n          JSON_UNQUOTE handles escapes with\n          NO_BACKSLASH_ESCAPES\n          disabled and enabled:\n        ", "Press CTRL+C to copy mysql> SELECT @@sql_mode;\n+------------+\n| @@sql_mode |\n+------------+\n|            |\n+------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n|       2                           |\n+------------------------------+\n\nmysql> SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n| \\t\\u0032                     |\n+------------------------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\t\\u0032\"');\n+----------------------------+\n| JSON_UNQUOTE('\"\\t\\u0032\"') |\n+----------------------------+\n|       2                         |\n+----------------------------+"], "Examples": ["mysql> SET @j = '\"abc\"';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-------+------------------+\n| @j    | JSON_UNQUOTE(@j) |\n+-------+------------------+\n| \"abc\" | abc              |\n+-------+------------------+\nmysql> SET @j = '[1, 2, 3]';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-----------+------------------+\n| @j        | JSON_UNQUOTE(@j) |\n+-----------+------------------+\n| [1, 2, 3] | [1, 2, 3]        |\n+-----------+------------------+", "mysql> SELECT @@sql_mode;\n+------------+\n| @@sql_mode |\n+------------+\n|            |\n+------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n|       2                           |\n+------------------------------+\n\nmysql> SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n| \\t\\u0032                     |\n+------------------------------+\n\nmysql> SELECT JSON_UNQUOTE('\"\\t\\u0032\"');\n+----------------------------+\n| JSON_UNQUOTE('\"\\t\\u0032\"') |\n+----------------------------+\n|       2                         |\n+----------------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-unquote"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_VALID(val)"], "Description": ["Whether JSON value is valid", "\nJSON_VALID(val)\n", "\n          Returns 0 or 1 to indicate whether a value is valid JSON.\n          Returns NULL if the argument is\n          NULL.\n        ", "Press CTRL+C to copy mysql> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT JSON_VALID('hello'), JSON_VALID('\"hello\"');\n+---------------------+-----------------------+\n| JSON_VALID('hello') | JSON_VALID('\"hello\"') |\n+---------------------+-----------------------+\n|                   0 |                     1 |\n+---------------------+-----------------------+"], "Examples": ["mysql> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT JSON_VALID('hello'), JSON_VALID('\"hello\"');\n+---------------------+-----------------------+\n| JSON_VALID('hello') | JSON_VALID('\"hello\"') |\n+---------------------+-----------------------+\n|                   0 |                     1 |\n+---------------------+-----------------------+"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-valid"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference"], "Feature": ["JSON_VALUE(json_doc,\n          path)"], "Description": ["Extract value from JSON document at location pointed to by path", "\nJSON_VALUE(json_doc,\n          path)\n", "\n          Extracts a value from a JSON document at the path given in the\n          specified document, and returns the extracted value,\n          optionally converting it to a desired type. The complete\n          syntax is shown here:\n        ", "Press CTRL+C to copy JSON_VALUE(json_doc, path [RETURNING type] [on_empty] [on_error])\n\non_empty:\n    {NULL | ERROR | DEFAULT value} ON EMPTY\n\non_error:\n    {NULL | ERROR | DEFAULT value} ON ERROR", "\njson_doc is a valid JSON document.\n          If this is NULL, the function returns\n          NULL.\n        ", "\npath is a JSON path pointing to a\n          location in the document. This must be a string literal value.\n        ", "\ntype is one of the following data\n          types:\n", "\n\nFLOAT\n\nDOUBLE\n\nDECIMAL\n\nSIGNED\n\nUNSIGNED\n\nDATE\n\nTIME\n\nDATETIME\n\nYEAR\n\nYEAR values of one or two digits are\n              not supported.\n            \nCHAR\n\nJSON\n\n", "\n          The types just listed are the same as the (non-array) types\n          supported by the CAST()\n          function.\n        ", "\n          If not specified by a RETURNING clause, the\n          JSON_VALUE() function's return type is\n          VARCHAR(512). When no character\n          set is specified for the return type,\n          JSON_VALUE() uses\n          utf8mb4 with the binary collation, which is\n          case-sensitive; if utf8mb4 is specified as\n          the character set for the result, the server uses the default\n          collation for this character set, which is not case-sensitive.\n        ", "\n          When the data at the specified path consists of or resolves to\n          a JSON null literal, the function returns SQL\n          NULL.\n        ", "\non_empty, if specified, determines\n          how JSON_VALUE() behaves when no data is\n          found at the path given; this clause takes one of the\n          following values:\n", "\n\nNULL ON EMPTY: The function returns\n              NULL; this is the default ON\n              EMPTY behavior.\n            \nDEFAULT value ON\n              EMPTY: the provided\n              value is returned. The\n              value's type must match that of the return type.\n            \nERROR ON EMPTY: The function throws an\n              error.\n\n", "\n          If used, on_error takes one of the\n          following values with the corresponding outcome when an error\n          occurs, as listed here:\n", "\n\nNULL ON ERROR:\n              JSON_VALUE() returns\n              NULL; this is the default behavior if\n              no ON ERROR clause is used.\n            \nDEFAULT value ON\n              ERROR: This is the value returned; its value\n              must match that of the return type.\n            \nERROR ON ERROR: An error is thrown.\n\n", "\nON EMPTY, if used, must precede any\n          ON ERROR clause. Specifying them in the\n          wrong order results in a syntax error.\n        ", "Error handling.\u00a0\n            In general, errors are handled by\n            JSON_VALUE() as follows:\n", "\n\n              All JSON input (document and path) is checked for\n              validity. If any of it is not valid, an SQL error is\n              thrown without triggering the ON ERROR\n              clause.\n            \nON ERROR is triggered whenever any of\n              the following events occur:\n\n\n\n                  Attempting to extract an object or an array, such as\n                  that resulting from a path that resolves to multiple\n                  locations within the JSON document\n                \n                  Conversion errors, such as attempting to convert\n                  'asdf' to an\n                  UNSIGNED value\n                \n                  Truncation of values\n\n\n\n              A conversion error always triggers a warning even if\n              NULL ON ERROR or DEFAULT ...\n              ON ERROR is specified.\n            \n              The ON EMPTY clause is triggered when\n              the source JSON document (expr)\n              contains no data at the specified location\n              (path).\n\n", "Examples.\u00a0\n            Two simple examples are shown here:\n          ", "Press CTRL+C to copy mysql> SELECT JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Joe                                                          |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"49.95\"}', '$.price'\n    -> RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 49.95 |\n+-------+", "\n          The statement SELECT\n          JSON_VALUE(json_doc,\n          path RETURNING\n          type) is equivalent to\n          the following statement:\n        ", "Press CTRL+C to copy SELECT CAST(\n    JSON_UNQUOTE( JSON_EXTRACT(json_doc, path) )\n    AS type\n);", "\nJSON_VALUE() simplifies creating indexes on\n          JSON columns by making it unnecessary in many cases to create\n          a generated column and then an index on the generated column.\n          You can do this when creating a table t1\n          that has a JSON column by\n          creating an index on an expression that uses\n          JSON_VALUE() operating on that column (with\n          a path that matches a value in that column), as shown here:\n        ", "Press CTRL+C to copy CREATE TABLE t1(\n    j JSON,\n    INDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )\n);", "\n          The following EXPLAIN output\n          shows that a query against t1 employing the\n          index expression in the WHERE clause uses\n          the index thus created:\n        ", "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t1\n    ->     WHERE JSON_VALUE(j, '$.id' RETURNING UNSIGNED) = 123\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: t1\n   partitions: NULL\n         type: ref\npossible_keys: i1\n          key: i1\n      key_len: 9\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL", "\n          This achieves much the same effect as creating a table\n          t2 with an index on a generated column (see\n          Indexing a Generated Column to Provide a JSON Column Index), like this one:\n        ", "Press CTRL+C to copy CREATE TABLE t2 (\n    j JSON,\n    g INT GENERATED ALWAYS AS (j->\"$.id\"),\n    INDEX i1 (g)\n);", "\n          The EXPLAIN output for a query\n          against this table, referencing the generated column, shows\n          that the index is used in the same way as for the previous\n          query against table t1:\n        ", "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t2 WHERE g  = 123\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: t2\n   partitions: NULL\n         type: ref\npossible_keys: i1\n          key: i1\n      key_len: 5\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL", "\n          For information about using indexes on generated columns for\n          indirect indexing of JSON\n          columns, see Indexing a Generated Column to Provide a JSON Column Index.\n        "], "Examples": ["mysql> SELECT JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Joe                                                          |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"49.95\"}', '$.price'\n    -> RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 49.95 |\n+-------+", "SELECT CAST(\n    JSON_UNQUOTE( JSON_EXTRACT(json_doc, path) )\n    AS type\n);", "CREATE TABLE t1(\n    j JSON,\n    INDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )\n);", "CREATE TABLE t2 (\n    j JSON,\n    g INT GENERATED ALWAYS AS (j->\"$.id\"),\n    INDEX i1 (g)\n);"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-value"], "Feature Type": ["Function"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html", "https://dev.mysql.com/doc/refman/8.4/en/non-typed-operators.html"], "Title": ["14.1 Built-In Function and Operator Reference", "14.17.1 JSON Function Reference", "14.4 Operators"], "Feature": ["value\n          MEMBER OF(json_array)"], "Description": ["Returns true (1) if first operand matches any element of JSON", "\nvalue\n          MEMBER OF(json_array)\n", "\n          Returns true (1) if value is an\n          element of json_array, otherwise\n          returns false (0). value must be a\n          scalar or a JSON document; if it is a scalar, the operator\n          attempts to treat it as an element of a JSON array. If\n          value or\n          json_array is\n          NULL, the function returns\n          NULL.\n        ", "\n          Queries using MEMBER OF() on JSON columns\n          of InnoDB tables in the\n          WHERE clause can be optimized using\n          multi-valued indexes. See\n          Multi-Valued Indexes, for detailed\n          information and examples.\n        ", "\n          Simple scalars are treated as array values, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+-------------------------------------------+\n| 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+-------------------------------------------+\n|                                         1 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+---------------------------------------------+\n| 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set (0.00 sec)", "\n          Partial matches of array element values do not match:\n        ", "Press CTRL+C to copy mysql> SELECT 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+------------------------------------------+\n| 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n1 row in set (0.00 sec)", "Press CTRL+C to copy mysql> SELECT 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+--------------------------------------------+\n| 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+--------------------------------------------+\n|                                          0 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "\n          Conversions to and from string types are not performed:\n        ", "Press CTRL+C to copy mysql> SELECT\n    -> 17 MEMBER OF('[23, \"abc\", \"17\", \"ab\", 10]'),\n    -> \"17\" MEMBER OF('[23, \"abc\", 17, \"ab\", 10]')\\G\n*************************** 1. row ***************************\n17 MEMBER OF('[23, \"abc\", \"17\", \"ab\", 10]'): 0\n\"17\" MEMBER OF('[23, \"abc\", 17, \"ab\", 10]'): 0\n1 row in set (0.00 sec)", "\n          To use this operator with a value which itself an array, it is\n          necessary to cast it explicitly as a JSON array. You can do\n          this with CAST(... AS JSON):\n        ", "Press CTRL+C to copy mysql> SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------------+\n| CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+\n1 row in set (0.00 sec)", "\n          It is also possible to perform the necessary cast using the\n          JSON_ARRAY() function, like\n          this:\n        ", "Press CTRL+C to copy mysql> SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------+\n| JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "\n          Any JSON objects used as values to be tested or which appear\n          in the target array must be coerced to the correct type using\n          CAST(... AS JSON) or\n          JSON_OBJECT(). In addition, a\n          target array containing JSON objects must itself be cast using\n          JSON_ARRAY. This is demonstrated in the\n          following sequence of statements:\n        ", "Press CTRL+C to copy mysql> SET @a = CAST('{\"a\":1}' AS JSON);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @b = JSON_OBJECT(\"b\", 2);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @c = JSON_ARRAY(17, @b, \"abc\", @a, 23);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a MEMBER OF(@c), @b MEMBER OF(@c);\n+------------------+------------------+\n| @a MEMBER OF(@c) | @b MEMBER OF(@c) |\n+------------------+------------------+\n|                1 |                1 |\n+------------------+------------------+\n1 row in set (0.00 sec)"], "Examples": ["mysql> SELECT 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+-------------------------------------------+\n| 17 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+-------------------------------------------+\n|                                         1 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+---------------------------------------------+\n| 'ab' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+------------------------------------------+\n| 7 MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+------------------------------------------+\n|                                        0 |\n+------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]');\n+--------------------------------------------+\n| 'a' MEMBER OF('[23, \"abc\", 17, \"ab\", 10]') |\n+--------------------------------------------+\n|                                          0 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------------+\n| CAST('[4,5]' AS JSON) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------------+\n|                                                1 |\n+--------------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]');\n+--------------------------------------------+\n| JSON_ARRAY(4,5) MEMBER OF('[[3,4],[4,5]]') |\n+--------------------------------------------+\n|                                          1 |\n+--------------------------------------------+\n1 row in set (0.00 sec)", "mysql> SET @a = CAST('{\"a\":1}' AS JSON);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @b = JSON_OBJECT(\"b\", 2);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @c = JSON_ARRAY(17, @b, \"abc\", @a, 23);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a MEMBER OF(@c), @b MEMBER OF(@c);\n+------------------+------------------+\n| @a MEMBER OF(@c) | @b MEMBER OF(@c) |\n+------------------+------------------+\n|                1 |                1 |\n+------------------+------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions", "JSON Functions"], "Reference HTML": ["https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#operator_member-of"], "Feature Type": ["Function"]}
