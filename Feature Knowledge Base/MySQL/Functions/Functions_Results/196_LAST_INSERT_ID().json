{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html",
        "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference",
        "14.15 Information Functions"
    ],
    "Feature": [
        "LAST_INSERT_ID()"
    ],
    "Description": [
        "Value of the AUTOINCREMENT column for the last INSERT",
        "\nLAST_INSERT_ID(),\n          LAST_INSERT_ID(expr)\n",
        "\n          With no argument,\n          LAST_INSERT_ID() returns a\n          BIGINT UNSIGNED (64-bit) value representing\n          the first automatically generated value successfully inserted\n          for an AUTO_INCREMENT column as a result of\n          the most recently executed\n          INSERT statement. The value of\n          LAST_INSERT_ID() remains\n          unchanged if no rows are successfully inserted.\n        ",
        "\n          With an argument,\n          LAST_INSERT_ID() returns an\n          unsigned integer, or NULL if the argument\n          is NULL.\n        ",
        "\n          For example, after inserting a row that generates an\n          AUTO_INCREMENT value, you can get the value\n          like this:\n        ",
        "Press CTRL+C to copy mysql> SELECT LAST_INSERT_ID();\n        -> 195",
        "\n          The currently executing statement does not affect the value of\n          LAST_INSERT_ID(). Suppose that\n          you generate an AUTO_INCREMENT value with\n          one statement, and then refer to\n          LAST_INSERT_ID() in a\n          multiple-row INSERT statement\n          that inserts rows into a table with its own\n          AUTO_INCREMENT column. The value of\n          LAST_INSERT_ID() remains stable\n          in the second statement; its value for the second and later\n          rows is not affected by the earlier row insertions. (You\n          should be aware that, if you mix references to\n          LAST_INSERT_ID() and\n          LAST_INSERT_ID(expr),\n          the effect is undefined.)\n        ",
        "\n          If the previous statement returned an error, the value of\n          LAST_INSERT_ID() is undefined.\n          For transactional tables, if the statement is rolled back due\n          to an error, the value of\n          LAST_INSERT_ID() is left\n          undefined. For manual\n          ROLLBACK,\n          the value of LAST_INSERT_ID()\n          is not restored to that before the transaction; it remains as\n          it was at the point of the\n          ROLLBACK.\n        ",
        "\n          Within the body of a stored routine (procedure or function) or\n          a trigger, the value of\n          LAST_INSERT_ID() changes the\n          same way as for statements executed outside the body of these\n          kinds of objects. The effect of a stored routine or trigger\n          upon the value of\n          LAST_INSERT_ID() that is seen\n          by following statements depends on the kind of routine:\n",
        "\n\n              If a stored procedure executes statements that change the\n              value of LAST_INSERT_ID(),\n              the changed value is seen by statements that follow the\n              procedure call.\n            \n              For stored functions and triggers that change the value,\n              the value is restored when the function or trigger ends,\n              so statements coming after it do not see a changed value.\n\n",
        "\n          The ID that was generated is maintained in the server on a\n          per-connection basis. This means that the\n          value returned by the function to a given client is the first\n          AUTO_INCREMENT value generated for most\n          recent statement affecting an\n          AUTO_INCREMENT column by that\n          client. This value cannot be affected by other\n          clients, even if they generate\n          AUTO_INCREMENT values of their own. This\n          behavior ensures that each client can retrieve its own ID\n          without concern for the activity of other clients, and without\n          the need for locks or transactions.\n        ",
        "\n          The value of LAST_INSERT_ID()\n          is not changed if you set the\n          AUTO_INCREMENT column of a row to a\n          non-\u201cmagic\u201d value (that is, a value that is not\n          NULL and not 0).\n",
        "\n\nImportant\n\n\n            If you insert multiple rows using a single\n            INSERT statement,\n            LAST_INSERT_ID() returns the\n            value generated for the first inserted\n            row only. The reason for this is to\n            make it possible to reproduce easily the same\n            INSERT statement against some\n            other server.\n\n",
        "\n          For example:\n        ",
        "Press CTRL+C to copy mysql> USE test;\n\nmysql> CREATE TABLE t (\n       id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\n       name VARCHAR(10) NOT NULL\n       );\n\nmysql> INSERT INTO t VALUES (NULL, 'Bob');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nmysql> INSERT INTO t VALUES\n       (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n|  2 | Mary |\n|  3 | Jane |\n|  4 | Lisa |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                2 |\n+------------------+",
        "\n          Although the second INSERT\n          statement inserted three new rows into t,\n          the ID generated for the first of these rows was\n          2, and it is this value that is returned by\n          LAST_INSERT_ID() for the\n          following SELECT statement.\n        ",
        "\n          If you use INSERT\n          IGNORE and the row is ignored, the\n          LAST_INSERT_ID() remains\n          unchanged from the current value (or 0 is returned if the\n          connection has not yet performed a successful\n          INSERT) and, for non-transactional tables,\n          the AUTO_INCREMENT counter is not\n          incremented. For InnoDB tables, the\n          AUTO_INCREMENT counter is incremented if\n          innodb_autoinc_lock_mode is\n          set to 1 or 2, as\n          demonstrated in the following example:\n        ",
        "Press CTRL+C to copy mysql> USE test;\n\nmysql> SELECT @@innodb_autoinc_lock_mode;\n+----------------------------+\n| @@innodb_autoinc_lock_mode |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nmysql> CREATE TABLE `t` (\n       `id` INT(11) NOT NULL AUTO_INCREMENT,\n       `val` INT(11) DEFAULT NULL,\n       PRIMARY KEY (`id`),\n       UNIQUE KEY `i1` (`val`)\n       ) ENGINE=InnoDB;\n\n# Insert two rows\n\nmysql> INSERT INTO t (val) VALUES (1),(2);\n\n# With auto_increment_offset=1, the inserted rows\n# result in an AUTO_INCREMENT value of 3\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# LAST_INSERT_ID() returns the first automatically generated\n# value that is successfully inserted for the AUTO_INCREMENT column\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\n# The attempted insertion of duplicate rows fail but errors are ignored\n\nmysql> INSERT IGNORE INTO t (val) VALUES (1),(2);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 2  Duplicates: 2  Warnings: 0\n\n# With innodb_autoinc_lock_mode=1, the AUTO_INCREMENT counter\n# is incremented for the ignored rows\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# The LAST_INSERT_ID is unchanged because the previous insert was unsuccessful\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+",
        "\n          For more information, see\n          Section\u00a017.6.1.6, \u201cAUTO_INCREMENT Handling in InnoDB\u201d.\n        ",
        "\n          If expr is given as an argument to\n          LAST_INSERT_ID(), the value of\n          the argument is returned by the function and is remembered as\n          the next value to be returned by\n          LAST_INSERT_ID(). This can be\n          used to simulate sequences:\n",
        "\n\n              Create a table to hold the sequence counter and initialize\n              it:\n            Press CTRL+C to copy mysql> CREATE TABLE sequence (id INT NOT NULL);\nmysql> INSERT INTO sequence VALUES (0);\n              Use the table to generate sequence numbers like this:\n            Press CTRL+C to copy mysql> UPDATE sequence SET id=LAST_INSERT_ID(id+1);\nmysql> SELECT LAST_INSERT_ID();\n              The UPDATE statement\n              increments the sequence counter and causes the next call\n              to LAST_INSERT_ID() to\n              return the updated value. The\n              SELECT statement retrieves\n              that value. The\n              mysql_insert_id() C API\n              function can also be used to get the value. See\n              mysql_insert_id().\n\n",
        "\n          You can generate sequences without calling\n          LAST_INSERT_ID(), but the\n          utility of using the function this way is that the ID value is\n          maintained in the server as the last automatically generated\n          value. It is multi-user safe because multiple clients can\n          issue the UPDATE statement and\n          get their own sequence value with the\n          SELECT statement (or\n          mysql_insert_id()), without\n          affecting or being affected by other clients that generate\n          their own sequence values.\n        ",
        "\n          Note that mysql_insert_id() is\n          only updated after INSERT and\n          UPDATE statements, so you\n          cannot use the C API function to retrieve the value for\n          LAST_INSERT_ID(expr)\n          after executing other SQL statements like\n          SELECT or\n          SET.\n        "
    ],
    "Examples": [
        "mysql> SELECT LAST_INSERT_ID();\n        -> 195",
        "mysql> USE test;\n\nmysql> CREATE TABLE t (\n       id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\n       name VARCHAR(10) NOT NULL\n       );\n\nmysql> INSERT INTO t VALUES (NULL, 'Bob');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nmysql> INSERT INTO t VALUES\n       (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');\n\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n|  1 | Bob  |\n|  2 | Mary |\n|  3 | Jane |\n|  4 | Lisa |\n+----+------+\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                2 |\n+------------------+",
        "mysql> USE test;\n\nmysql> SELECT @@innodb_autoinc_lock_mode;\n+----------------------------+\n| @@innodb_autoinc_lock_mode |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nmysql> CREATE TABLE `t` (\n       `id` INT(11) NOT NULL AUTO_INCREMENT,\n       `val` INT(11) DEFAULT NULL,\n       PRIMARY KEY (`id`),\n       UNIQUE KEY `i1` (`val`)\n       ) ENGINE=InnoDB;\n\n# Insert two rows\n\nmysql> INSERT INTO t (val) VALUES (1),(2);\n\n# With auto_increment_offset=1, the inserted rows\n# result in an AUTO_INCREMENT value of 3\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# LAST_INSERT_ID() returns the first automatically generated\n# value that is successfully inserted for the AUTO_INCREMENT column\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\n# The attempted insertion of duplicate rows fail but errors are ignored\n\nmysql> INSERT IGNORE INTO t (val) VALUES (1),(2);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 2  Duplicates: 2  Warnings: 0\n\n# With innodb_autoinc_lock_mode=1, the AUTO_INCREMENT counter\n# is incremented for the ignored rows\n\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\n       Table: t\nCreate Table: CREATE TABLE `t` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `val` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n\n# The LAST_INSERT_ID is unchanged because the previous insert was unsuccessful\n\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+",
        "mysql> CREATE TABLE sequence (id INT NOT NULL);\nmysql> INSERT INTO sequence VALUES (0);",
        "mysql> UPDATE sequence SET id=LAST_INSERT_ID(id+1);\nmysql> SELECT LAST_INSERT_ID();"
    ],
    "Category": [
        "Built-In Functions",
        "Information Functions"
    ],
    "Reference HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_last-insert-id"
    ],
    "Feature Type": [
        "Function"
    ]
}