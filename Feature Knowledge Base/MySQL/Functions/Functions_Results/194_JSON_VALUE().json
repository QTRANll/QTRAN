{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html",
        "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference",
        "14.17.1 JSON Function Reference"
    ],
    "Feature": [
        "JSON_VALUE(json_doc,\n          path)"
    ],
    "Description": [
        "Extract value from JSON document at location pointed to by path",
        "\nJSON_VALUE(json_doc,\n          path)\n",
        "\n          Extracts a value from a JSON document at the path given in the\n          specified document, and returns the extracted value,\n          optionally converting it to a desired type. The complete\n          syntax is shown here:\n        ",
        "Press CTRL+C to copy JSON_VALUE(json_doc, path [RETURNING type] [on_empty] [on_error])\n\non_empty:\n    {NULL | ERROR | DEFAULT value} ON EMPTY\n\non_error:\n    {NULL | ERROR | DEFAULT value} ON ERROR",
        "\njson_doc is a valid JSON document.\n          If this is NULL, the function returns\n          NULL.\n        ",
        "\npath is a JSON path pointing to a\n          location in the document. This must be a string literal value.\n        ",
        "\ntype is one of the following data\n          types:\n",
        "\n\nFLOAT\n\nDOUBLE\n\nDECIMAL\n\nSIGNED\n\nUNSIGNED\n\nDATE\n\nTIME\n\nDATETIME\n\nYEAR\n\nYEAR values of one or two digits are\n              not supported.\n            \nCHAR\n\nJSON\n\n",
        "\n          The types just listed are the same as the (non-array) types\n          supported by the CAST()\n          function.\n        ",
        "\n          If not specified by a RETURNING clause, the\n          JSON_VALUE() function's return type is\n          VARCHAR(512). When no character\n          set is specified for the return type,\n          JSON_VALUE() uses\n          utf8mb4 with the binary collation, which is\n          case-sensitive; if utf8mb4 is specified as\n          the character set for the result, the server uses the default\n          collation for this character set, which is not case-sensitive.\n        ",
        "\n          When the data at the specified path consists of or resolves to\n          a JSON null literal, the function returns SQL\n          NULL.\n        ",
        "\non_empty, if specified, determines\n          how JSON_VALUE() behaves when no data is\n          found at the path given; this clause takes one of the\n          following values:\n",
        "\n\nNULL ON EMPTY: The function returns\n              NULL; this is the default ON\n              EMPTY behavior.\n            \nDEFAULT value ON\n              EMPTY: the provided\n              value is returned. The\n              value's type must match that of the return type.\n            \nERROR ON EMPTY: The function throws an\n              error.\n\n",
        "\n          If used, on_error takes one of the\n          following values with the corresponding outcome when an error\n          occurs, as listed here:\n",
        "\n\nNULL ON ERROR:\n              JSON_VALUE() returns\n              NULL; this is the default behavior if\n              no ON ERROR clause is used.\n            \nDEFAULT value ON\n              ERROR: This is the value returned; its value\n              must match that of the return type.\n            \nERROR ON ERROR: An error is thrown.\n\n",
        "\nON EMPTY, if used, must precede any\n          ON ERROR clause. Specifying them in the\n          wrong order results in a syntax error.\n        ",
        "Error handling.\u00a0\n            In general, errors are handled by\n            JSON_VALUE() as follows:\n",
        "\n\n              All JSON input (document and path) is checked for\n              validity. If any of it is not valid, an SQL error is\n              thrown without triggering the ON ERROR\n              clause.\n            \nON ERROR is triggered whenever any of\n              the following events occur:\n\n\n\n                  Attempting to extract an object or an array, such as\n                  that resulting from a path that resolves to multiple\n                  locations within the JSON document\n                \n                  Conversion errors, such as attempting to convert\n                  'asdf' to an\n                  UNSIGNED value\n                \n                  Truncation of values\n\n\n\n              A conversion error always triggers a warning even if\n              NULL ON ERROR or DEFAULT ...\n              ON ERROR is specified.\n            \n              The ON EMPTY clause is triggered when\n              the source JSON document (expr)\n              contains no data at the specified location\n              (path).\n\n",
        "Examples.\u00a0\n            Two simple examples are shown here:\n          ",
        "Press CTRL+C to copy mysql> SELECT JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Joe                                                          |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"49.95\"}', '$.price'\n    -> RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 49.95 |\n+-------+",
        "\n          The statement SELECT\n          JSON_VALUE(json_doc,\n          path RETURNING\n          type) is equivalent to\n          the following statement:\n        ",
        "Press CTRL+C to copy SELECT CAST(\n    JSON_UNQUOTE( JSON_EXTRACT(json_doc, path) )\n    AS type\n);",
        "\nJSON_VALUE() simplifies creating indexes on\n          JSON columns by making it unnecessary in many cases to create\n          a generated column and then an index on the generated column.\n          You can do this when creating a table t1\n          that has a JSON column by\n          creating an index on an expression that uses\n          JSON_VALUE() operating on that column (with\n          a path that matches a value in that column), as shown here:\n        ",
        "Press CTRL+C to copy CREATE TABLE t1(\n    j JSON,\n    INDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )\n);",
        "\n          The following EXPLAIN output\n          shows that a query against t1 employing the\n          index expression in the WHERE clause uses\n          the index thus created:\n        ",
        "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t1\n    ->     WHERE JSON_VALUE(j, '$.id' RETURNING UNSIGNED) = 123\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: t1\n   partitions: NULL\n         type: ref\npossible_keys: i1\n          key: i1\n      key_len: 9\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL",
        "\n          This achieves much the same effect as creating a table\n          t2 with an index on a generated column (see\n          Indexing a Generated Column to Provide a JSON Column Index), like this one:\n        ",
        "Press CTRL+C to copy CREATE TABLE t2 (\n    j JSON,\n    g INT GENERATED ALWAYS AS (j->\"$.id\"),\n    INDEX i1 (g)\n);",
        "\n          The EXPLAIN output for a query\n          against this table, referencing the generated column, shows\n          that the index is used in the same way as for the previous\n          query against table t1:\n        ",
        "Press CTRL+C to copy mysql> EXPLAIN SELECT * FROM t2 WHERE g  = 123\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: t2\n   partitions: NULL\n         type: ref\npossible_keys: i1\n          key: i1\n      key_len: 5\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL",
        "\n          For information about using indexes on generated columns for\n          indirect indexing of JSON\n          columns, see Indexing a Generated Column to Provide a JSON Column Index.\n        "
    ],
    "Examples": [
        "mysql> SELECT JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Joe                                                          |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"49.95\"}', '$.price'\n    -> RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 49.95 |\n+-------+",
        "SELECT CAST(\n    JSON_UNQUOTE( JSON_EXTRACT(json_doc, path) )\n    AS type\n);",
        "CREATE TABLE t1(\n    j JSON,\n    INDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )\n);",
        "CREATE TABLE t2 (\n    j JSON,\n    g INT GENERATED ALWAYS AS (j->\"$.id\"),\n    INDEX i1 (g)\n);"
    ],
    "Category": [
        "Built-In Functions",
        "JSON Functions"
    ],
    "Reference HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-value"
    ],
    "Feature Type": [
        "Function"
    ]
}