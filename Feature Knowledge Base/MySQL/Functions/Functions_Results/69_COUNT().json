{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html",
        "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference",
        "14.19.1 Aggregate Function Descriptions"
    ],
    "Feature": [
        "COUNT(expr)\n            [over_clause]"
    ],
    "Description": [
        "Return a count of the number of rows returned",
        "\nCOUNT(expr)\n            [over_clause]\n",
        "\n            Returns a count of the number of non-NULL\n            values of expr in the rows\n            retrieved by a SELECT\n            statement. The result is a\n            BIGINT value.\n          ",
        "\n            If there are no matching rows,\n            COUNT() returns\n            0. COUNT(NULL) returns\n            0.\n          ",
        "\n            This function executes as a window function if\n            over_clause is present.\n            over_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ",
        "Press CTRL+C to copy mysql> SELECT student.student_name,COUNT(*)\n       FROM student,course\n       WHERE student.student_id=course.student_id\n       GROUP BY student_name;",
        "\nCOUNT(*) is somewhat\n            different in that it returns a count of the number of rows\n            retrieved, whether or not they contain\n            NULL values.\n          ",
        "\n            For transactional storage engines such as\n            InnoDB, storing an exact row count is\n            problematic. Multiple transactions may be occurring at the\n            same time, each of which may affect the count.\n          ",
        "\nInnoDB does not keep an internal count of\n            rows in a table because concurrent transactions might\n            \u201csee\u201d different numbers of rows at the same\n            time. Consequently, SELECT COUNT(*)\n            statements only count rows visible to the current\n            transaction.\n          ",
        "\nSELECT COUNT(*) FROM\n            tbl_name query\n            performance for InnoDB tables is\n            optimized for single-threaded workloads if there are no\n            extra clauses such as WHERE or\n            GROUP BY.\n          ",
        "\nInnoDB processes SELECT\n            COUNT(*) statements by traversing the smallest\n            available secondary index unless an index or optimizer hint\n            directs the optimizer to use a different index. If a\n            secondary index is not present, InnoDB\n            processes SELECT COUNT(*) statements by\n            scanning the clustered index.\n          ",
        "\n            Processing of SELECT COUNT(*) statements\n            takes some time if index records are not entirely in the\n            buffer pool. For a faster count, create a counter table and\n            let your application update it according to the inserts and\n            deletes it does. However, this method may not scale well in\n            situations where thousands of concurrent transactions are\n            initiating updates to the same counter table. If an\n            approximate row count is sufficient, use\n            SHOW TABLE STATUS.\n          ",
        "\nInnoDB handles SELECT\n            COUNT(*) and SELECT COUNT(1)\n            operations in the same way. There is no performance\n            difference.\n          ",
        "\n            For MyISAM tables,\n            COUNT(*) is optimized to\n            return very quickly if the\n            SELECT retrieves from one\n            table, no other columns are retrieved, and there is no\n            WHERE clause. For example:\n          ",
        "Press CTRL+C to copy mysql> SELECT COUNT(*) FROM student;",
        "\n            This optimization only applies to MyISAM\n            tables, because an exact row count is stored for this\n            storage engine and can be accessed very quickly.\n            COUNT(1) is only subject to the same\n            optimization if the first column is defined as NOT\n            NULL.\n          "
    ],
    "Examples": [
        "mysql> SELECT student.student_name,COUNT(*)\n       FROM student,course\n       WHERE student.student_id=course.student_id\n       GROUP BY student_name;",
        "mysql> SELECT COUNT(*) FROM student;"
    ],
    "Category": [
        "Built-In Functions",
        "Aggregate Functions"
    ],
    "Reference HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_count"
    ],
    "Feature Type": [
        "Function"
    ]
}