{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html",
        "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference",
        "14.15 Information Functions"
    ],
    "Feature": [
        "FOUND_ROWS()"
    ],
    "Description": [
        "For a SELECT with a LIMIT clause, the number of rows that would be",
        "\nFOUND_ROWS()\n",
        "\n\nNote\n\n\n            The SQL_CALC_FOUND_ROWS query modifier\n            and accompanying FOUND_ROWS()\n            function are deprecated; expect them to be removed in a\n            future version of MySQL. Execute the query with\n            LIMIT, and then a second query with\n            COUNT(*) and without\n            LIMIT to determine whether there are\n            additional rows. For example, instead of these queries:\n          Press CTRL+C to copy SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT FOUND_ROWS();\n            Use these queries instead:\n          Press CTRL+C to copy SELECT * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT COUNT(*) FROM tbl_name WHERE id > 100;\nCOUNT(*) is subject to\n            certain optimizations.\n            SQL_CALC_FOUND_ROWS causes some\n            optimizations to be disabled.\n\n",
        "\n          A SELECT statement may include\n          a LIMIT clause to restrict the number of\n          rows the server returns to the client. In some cases, it is\n          desirable to know how many rows the statement would have\n          returned without the LIMIT, but without\n          running the statement again. To obtain this row count, include\n          an SQL_CALC_FOUND_ROWS option in the\n          SELECT statement, and then\n          invoke FOUND_ROWS() afterward:\n        ",
        "Press CTRL+C to copy mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n    -> WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();",
        "\n          The second SELECT returns a\n          number indicating how many rows the first\n          SELECT would have returned had\n          it been written without the LIMIT clause.\n        ",
        "\n          In the absence of the SQL_CALC_FOUND_ROWS\n          option in the most recent successful\n          SELECT statement,\n          FOUND_ROWS() returns the number\n          of rows in the result set returned by that statement. If the\n          statement includes a LIMIT clause,\n          FOUND_ROWS() returns the number\n          of rows up to the limit. For example,\n          FOUND_ROWS() returns 10 or 60,\n          respectively, if the statement includes LIMIT\n          10 or LIMIT 50, 10.\n        ",
        "\n          The row count available through\n          FOUND_ROWS() is transient and\n          not intended to be available past the statement following the\n          SELECT SQL_CALC_FOUND_ROWS statement. If\n          you need to refer to the value later, save it:\n        ",
        "Press CTRL+C to copy mysql> SELECT SQL_CALC_FOUND_ROWS * FROM ... ;\nmysql> SET @rows = FOUND_ROWS();",
        "\n          If you are using SELECT\n          SQL_CALC_FOUND_ROWS, MySQL must calculate how many\n          rows are in the full result set. However, this is faster than\n          running the query again without LIMIT,\n          because the result set need not be sent to the client.\n        ",
        "\nSQL_CALC_FOUND_ROWS and\n          FOUND_ROWS() can be useful in\n          situations when you want to restrict the number of rows that a\n          query returns, but also determine the number of rows in the\n          full result set without running the query again. An example is\n          a Web script that presents a paged display containing links to\n          the pages that show other sections of a search result. Using\n          FOUND_ROWS() enables you to\n          determine how many other pages are needed for the rest of the\n          result.\n        ",
        "\n          The use of SQL_CALC_FOUND_ROWS and\n          FOUND_ROWS() is more complex\n          for UNION statements than for\n          simple SELECT statements,\n          because LIMIT may occur at multiple places\n          in a UNION. It may be applied\n          to individual SELECT statements\n          in the UNION, or global to the\n          UNION result as a whole.\n        ",
        "\n          The intent of SQL_CALC_FOUND_ROWS for\n          UNION is that it should return\n          the row count that would be returned without a global\n          LIMIT. The conditions for use of\n          SQL_CALC_FOUND_ROWS with\n          UNION are:\n",
        "\n\n              The SQL_CALC_FOUND_ROWS keyword must\n              appear in the first SELECT\n              of the UNION.\n            \n              The value of FOUND_ROWS()\n              is exact only if\n              UNION ALL\n              is used. If UNION without\n              ALL is used, duplicate removal occurs\n              and the value of\n              FOUND_ROWS() is only\n              approximate.\n            \n              If no LIMIT is present in the\n              UNION,\n              SQL_CALC_FOUND_ROWS is ignored and\n              returns the number of rows in the temporary table that is\n              created to process the\n              UNION.\n\n",
        "\n          Beyond the cases described here, the behavior of\n          FOUND_ROWS() is undefined (for\n          example, its value following a\n          SELECT statement that fails\n          with an error).\n",
        "\n\nImportant\n\n\nFOUND_ROWS() is not\n            replicated reliably using statement-based replication. This\n            function is automatically replicated using row-based\n            replication.\n\n"
    ],
    "Examples": [
        "SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT FOUND_ROWS();",
        "SELECT * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT COUNT(*) FROM tbl_name WHERE id > 100;",
        "mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n    -> WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();",
        "mysql> SELECT SQL_CALC_FOUND_ROWS * FROM ... ;\nmysql> SET @rows = FOUND_ROWS();"
    ],
    "Category": [
        "Built-In Functions",
        "Information Functions"
    ],
    "Reference HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_found-rows"
    ],
    "Feature Type": [
        "Function"
    ]
}