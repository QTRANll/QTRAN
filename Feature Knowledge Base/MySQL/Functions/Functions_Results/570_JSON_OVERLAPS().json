{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html",
        "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference",
        "14.17.1 JSON Function Reference"
    ],
    "Feature": [
        "JSON_OVERLAPS(json_doc1,\n          json_doc2)"
    ],
    "Description": [
        "Compares two JSON documents, returns TRUE (1) if these have any",
        "\nJSON_OVERLAPS(json_doc1,\n          json_doc2)\n",
        "\n          Compares two JSON documents. Returns true (1) if the two\n          document have any key-value pairs or array elements in common.\n          If both arguments are scalars, the function performs a simple\n          equality test. If either argument is NULL,\n          the function returns NULL.\n        ",
        "\n          This function serves as counterpart to\n          JSON_CONTAINS(), which requires\n          all elements of the array searched for to be present in the\n          array searched in. Thus, JSON_CONTAINS()\n          performs an AND operation on search keys,\n          while JSON_OVERLAPS() performs an\n          OR operation.\n        ",
        "\n          Queries on JSON columns of InnoDB\n          tables using JSON_OVERLAPS() in the\n          WHERE clause can be optimized using\n          multi-valued indexes.\n          Multi-Valued Indexes, provides detailed\n          information and examples.\n        ",
        "\n          When comparing two arrays, JSON_OVERLAPS()\n          returns true if they share one or more array elements in\n          common, and false if they do not:\n        ",
        "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
        "\n          Partial matches are treated as no match, as shown here:\n        ",
        "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)",
        "\n          When comparing objects, the result is true if they have at\n          least one key-value pair in common.\n        ",
        "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}') |\n+-----------------------------------------------------------------------+\n|                                                                     1 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}') |\n+-----------------------------------------------------------------------+\n|                                                                     0 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)",
        "\n          If two scalars are used as the arguments to the function,\n          JSON_OVERLAPS() performs a simple test for\n          equality:\n        ",
        "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('5', '5');\n+-------------------------+\n| JSON_OVERLAPS('5', '5') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('5', '6');\n+-------------------------+\n| JSON_OVERLAPS('5', '6') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)",
        "\n          When comparing a scalar with an array,\n          JSON_OVERLAPS() attempts to treat the\n          scalar as an array element. In this example, the second\n          argument 6 is interpreted as\n          [6], as shown here:\n        ",
        "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '6');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '6') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set (0.00 sec)",
        "\n          The function does not perform type conversions:\n        ",
        "Press CTRL+C to copy mysql> SELECT JSON_OVERLAPS('[4,5,\"6\",7]', '6');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,\"6\",7]', '6') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '\"6\"');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '\"6\"') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)"
    ],
    "Examples": [
        "mysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\") |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\") |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
        "mysql> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n|                                                   0 |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)",
        "mysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}') |\n+-----------------------------------------------------------------------+\n|                                                                     1 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}') |\n+-----------------------------------------------------------------------+\n|                                                                     0 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)",
        "mysql> SELECT JSON_OVERLAPS('5', '5');\n+-------------------------+\n| JSON_OVERLAPS('5', '5') |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('5', '6');\n+-------------------------+\n| JSON_OVERLAPS('5', '6') |\n+-------------------------+\n|                       0 |\n+-------------------------+\n1 row in set (0.00 sec)",
        "mysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '6');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '6') |\n+---------------------------------+\n|                               1 |\n+---------------------------------+\n1 row in set (0.00 sec)",
        "mysql> SELECT JSON_OVERLAPS('[4,5,\"6\",7]', '6');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,\"6\",7]', '6') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '\"6\"');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '\"6\"') |\n+-----------------------------------+\n|                                 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)"
    ],
    "Category": [
        "Built-In Functions",
        "JSON Functions"
    ],
    "Reference HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-overlaps"
    ],
    "Feature Type": [
        "Function"
    ]
}