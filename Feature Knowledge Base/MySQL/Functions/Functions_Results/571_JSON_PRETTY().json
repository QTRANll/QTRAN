{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/built-in-function-reference.html",
        "https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference",
        "14.17.1 JSON Function Reference"
    ],
    "Feature": [
        "JSON_PRETTY(json_val)"
    ],
    "Description": [
        "Print a JSON document in human-readable format",
        "\nJSON_PRETTY(json_val)\n",
        "\n          Provides pretty-printing of JSON values similar to that\n          implemented in PHP and by other languages and database\n          systems. The value supplied must be a JSON value or a valid\n          string representation of a JSON value. Extraneous whitespaces\n          and newlines present in this value have no effect on the\n          output. For a NULL value, the function\n          returns NULL. If the value is not a JSON\n          document, or if it cannot be parsed as one, the function fails\n          with an error.\n        ",
        "\n          Formatting of the output from this function adheres to the\n          following rules:\n",
        "\n\n              Each array element or object member appears on a separate\n              line, indented by one additional level as compared to its\n              parent.\n            \n              Each level of indentation adds two leading spaces.\n            \n              A comma separating individual array elements or object\n              members is printed before the newline that separates the\n              two elements or members.\n            \n              The key and the value of an object member are separated by\n              a colon followed by a space (': ').\n            \n              An empty object or array is printed on a single line. No\n              space is printed between the opening and closing brace.\n            \n              Special characters in string scalars and key names are\n              escaped employing the same rules used by the\n              JSON_QUOTE() function.\n\n",
        "Press CTRL+C to copy mysql> SELECT JSON_PRETTY('123'); # scalar\n+--------------------+\n| JSON_PRETTY('123') |\n+--------------------+\n| 123                |\n+--------------------+\n\nmysql> SELECT JSON_PRETTY(\"[1,3,5]\"); # array\n+------------------------+\n| JSON_PRETTY(\"[1,3,5]\") |\n+------------------------+\n| [\n  1,\n  3,\n  5\n]      |\n+------------------------+\n\nmysql> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}'); # object\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"15\",\n  \"x\": \"25\"\n}   |\n+---------------------------------------------+\n\nmysql> SELECT JSON_PRETTY('[\"a\",1,{\"key1\":\n    '>    \"value1\"},\"5\",     \"77\" ,\n    '>       {\"key2\":[\"value3\",\"valueX\",\n    '> \"valueY\"]},\"j\", \"2\"   ]')\\G  # nested arrays and objects\n*************************** 1. row ***************************\nJSON_PRETTY('[\"a\",1,{\"key1\":\n             \"value1\"},\"5\",     \"77\" ,\n                {\"key2\":[\"value3\",\"valuex\",\n          \"valuey\"]},\"j\", \"2\"   ]'): [\n  \"a\",\n  1,\n  {\n    \"key1\": \"value1\"\n  },\n  \"5\",\n  \"77\",\n  {\n    \"key2\": [\n      \"value3\",\n      \"valuex\",\n      \"valuey\"\n    ]\n  },\n  \"j\",\n  \"2\"\n]"
    ],
    "Examples": [
        "mysql> SELECT JSON_PRETTY('123'); # scalar\n+--------------------+\n| JSON_PRETTY('123') |\n+--------------------+\n| 123                |\n+--------------------+\n\nmysql> SELECT JSON_PRETTY(\"[1,3,5]\"); # array\n+------------------------+\n| JSON_PRETTY(\"[1,3,5]\") |\n+------------------------+\n| [\n  1,\n  3,\n  5\n]      |\n+------------------------+\n\nmysql> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}'); # object\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}') |\n+---------------------------------------------+\n| {\n  \"a\": \"10\",\n  \"b\": \"15\",\n  \"x\": \"25\"\n}   |\n+---------------------------------------------+\n\nmysql> SELECT JSON_PRETTY('[\"a\",1,{\"key1\":\n    '>    \"value1\"},\"5\",     \"77\" ,\n    '>       {\"key2\":[\"value3\",\"valueX\",\n    '> \"valueY\"]},\"j\", \"2\"   ]')\\G  # nested arrays and objects\n*************************** 1. row ***************************\nJSON_PRETTY('[\"a\",1,{\"key1\":\n             \"value1\"},\"5\",     \"77\" ,\n                {\"key2\":[\"value3\",\"valuex\",\n          \"valuey\"]},\"j\", \"2\"   ]'): [\n  \"a\",\n  1,\n  {\n    \"key1\": \"value1\"\n  },\n  \"5\",\n  \"77\",\n  {\n    \"key2\": [\n      \"value3\",\n      \"valuex\",\n      \"valuey\"\n    ]\n  },\n  \"j\",\n  \"2\"\n]"
    ],
    "Category": [
        "Built-In Functions",
        "JSON Functions"
    ],
    "Reference HTML": [
        "https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-pretty"
    ],
    "Feature Type": [
        "Function"
    ]
}