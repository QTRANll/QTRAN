{"HTML": ["https://www.monetdb.org/documentation-Aug2024/user-guide/sql-manual/data-types/json-types"], "Title": ["JSON Datatype"], "Feature": ["JSON Datatype"], "Description": ["JSON Datatype", "JSON has become the de facto light weight data\ninterchange format for many web applications.\nIt has a simple hierarchical structure and supports a limited set of value types.\nJSON is a natural representation of data for the C family of programming languages.", "JSON is supported in MonetDB as a subtype of the STRING type, but with validity checks\nwhich ensures that only valid JSON strings can be added to the database.", "CREATE TABLE json_example (c1 JSON, c2 JSON(512) NOT NULL);", "MonetDB supports most of the JSON path expressions.\nIt can be used to decompose the values into regular tables, which then act as an index.\nA limited set of operators are predefined in the SQL catalogue.", "json.filter(J, Pathexpr) \tExtracts the component from J that satisfied the Pathexpr\njson.filter(J, Number) \tExtracts a indexed component from J\njson.text(J, [Sep]) \tGlue together the values separated by Sep character (default space)\njson.number(J) \tTurn a number, singleton array value, or singleton object tag into a double\njson.\"integer\"(J) \tTurn a number, singleton array value, or singleton object element into an integer\njson.isvalid(StringExpr) \tChecks the string for JSON compliance. Returns boolean.\njson.isobject(StringExpr) \tChecks the string for JSON object compliance. Returns boolean.\njson.isarray(StringExpr) \tChecks the string for JSON array compliance. Returns boolean.\njson.length(J) \tReturns the number of top-level components of J.\njson.keyarray(J) \tReturns a list of key tags for the top-level components of J.\njson.valuearray(J) \tReturns a list of values for the top-level components of J.\n", "See also: JSON functions.", "JSON path expressions always refer to a single JSON structure.\nThe root of this structure is identified by the identifier '$', which is implicitly assumed in most expressions.\nComponents of the JSON structure are addressed through the dot notation, i.e. representing child\nsteps and array element access.\nThe wild card can be used for child names and undetermined array indices.", "JSON path \t    Description \t            Example\n\"$\" \t        The root object             json.filter(v, '$') = { \"store\":...}\"\n\".\" childname \tThe child step operator     json.filter(v, '$.store.bicycle') = {\"color\": \"red\", \"price\": 19.95}\n\"..\" childname \tRecursive child step        json.filter(v, '$..price') = [8.95,12.99,8.99,22.99,19.95]\n\"*\" \t        Child name wildcard         json.filter(v, '$.store.bicycle.*') = {\"color\": \"red\", \"price\": 19.95}\n\"[\" nr \"]\"      Array element access        json.filter(v, '$.store.book.[1]') = the second book\n\"[\" * \"]\"       Any array element access \t \nE1 \",\" E2       Union path expressions      json.filter(v, '$.store.bicycle,$..price')\n", "An example JSON object used for these expressions ref. More examples in the test-suite.", "{ \"store\": {\n    \"book\": [\n      { \"category\": \"reference\",\n        \"author\": \"Nigel Rees\",\n        \"title\": \"Sayings of the Century\",\n        \"price\": 8.95\n      },\n      { \"category\": \"fiction\",\n        \"author\": \"Evelyn Waugh\",\n        \"title\": \"Sword of Honour\",\n        \"price\": 12.99\n      }\n    ],\n    \"bicycle\": {\n      \"color\": \"red\",\n      \"price\": 19.95\n    }\n  }\n}\n"], "Examples": ["json.filter(J, Pathexpr) \tExtracts the component from J that satisfied the Pathexpr\njson.filter(J, Number) \tExtracts a indexed component from J\njson.text(J, [Sep]) \tGlue together the values separated by Sep character (default space)\njson.number(J) \tTurn a number, singleton array value, or singleton object tag into a double\njson.\"integer\"(J) \tTurn a number, singleton array value, or singleton object element into an integer\njson.isvalid(StringExpr) \tChecks the string for JSON compliance. Returns boolean.\njson.isobject(StringExpr) \tChecks the string for JSON object compliance. Returns boolean.\njson.isarray(StringExpr) \tChecks the string for JSON array compliance. Returns boolean.\njson.length(J) \tReturns the number of top-level components of J.\njson.keyarray(J) \tReturns a list of key tags for the top-level components of J.\njson.valuearray(J) \tReturns a list of values for the top-level components of J.\n", "JSON path \t    Description \t            Example\n\"$\" \t        The root object             json.filter(v, '$') = { \"store\":...}\"\n\".\" childname \tThe child step operator     json.filter(v, '$.store.bicycle') = {\"color\": \"red\", \"price\": 19.95}\n\"..\" childname \tRecursive child step        json.filter(v, '$..price') = [8.95,12.99,8.99,22.99,19.95]\n\"*\" \t        Child name wildcard         json.filter(v, '$.store.bicycle.*') = {\"color\": \"red\", \"price\": 19.95}\n\"[\" nr \"]\"      Array element access        json.filter(v, '$.store.book.[1]') = the second book\n\"[\" * \"]\"       Any array element access \t \nE1 \",\" E2       Union path expressions      json.filter(v, '$.store.bicycle,$..price')\n", "{ \"store\": {\n    \"book\": [\n      { \"category\": \"reference\",\n        \"author\": \"Nigel Rees\",\n        \"title\": \"Sayings of the Century\",\n        \"price\": 8.95\n      },\n      { \"category\": \"fiction\",\n        \"author\": \"Evelyn Waugh\",\n        \"title\": \"Sword of Honour\",\n        \"price\": 12.99\n      }\n    ],\n    \"bicycle\": {\n      \"color\": \"red\",\n      \"price\": 19.95\n    }\n  }\n}\n"], "Category": ["JSON Datatype"]}
