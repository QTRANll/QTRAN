{
    "HTML": [
        "https://sqlite.org/lang_aggfunc.html"
    ],
    "Title": [
        "sum(X)total(X)"
    ],
    "Feature": [
        "sum(X)total(X)"
    ],
    "Description": [
        "\n  The sum() and total() aggregate functions\n  return the sum of all non-NULL values in the group.\n  If there are no non-NULL input rows then sum() returns\n  NULL but total() returns 0.0.\n  NULL is not normally a helpful result for the sum of no rows\n  but the SQL standard requires it and most other\n  SQL database engines implement sum() that way so SQLite does it in the\n  same way in order to be compatible.   The non-standard total() function\n  is provided as a convenient way to work around this design problem\n  in the SQL language.\nThe result of total() is always a floating point value.\n  The result of sum() is an integer value if all non-NULL inputs are integers.\n  If any input to sum() is neither an integer nor a NULL,\n  then sum() returns a floating point value\n  which is an approximation of the mathematical sum.\nSum() will throw an \"integer overflow\" exception if all inputs\n  are integers or NULL\n  and an integer overflow occurs at any point during the computation.\n  No overflow error is ever raised if any prior input was a floating point\n  value.\n  Total() never throws an integer overflow.\n\n  When summing floating-point values, if the magnitudes of the values\n  differ wildly then the resulting sum might be imprecise due to the fact that\n  IEEE 754 floating point values are approximations.\n  Use the decimal_sum(X) aggregate in the decimal extension to obtain\n  an exact summation of floating point numbers.  Consider this test case:\n\nCREATE TABLE t1(x REAL);\nINSERT INTO t1 VALUES(1.55e+308),(1.23),(3.2e-16),(-1.23),(-1.55e308);\nSELECT sum(x), decimal_sum(x) FROM t1;\n\nThe large values \u00b11.55e+308 cancel each other out, but the\n  cancellation does not occur until the end of the sum and in the meantime\n  the large +1.55e+308 swamps the tiny 3.2e-16 value.  The end result is\n  an imprecise result for the sum().  The decimal_sum() aggregate\n  generates an exact answer, at the cost of additional CPU and memory usage.\n  Note also that decimal_sum() is not built into the SQLite core; it is a\n  loadable extension.\n\n  If sum of inputs is too large to represent as a IEEE 754 floating\n  point value, then a +Infinity or -Infinity result may be returned.\n  If very large values with differing signs are used\n  such that the SUM() or TOTAL() function is\n  unable to determine if the correct result is +Infinity or -Infinity\n  or some other value in between, then the result is NULL.  Hence, for\n  example, the following query returns NULL:\n\nWITH t1(x) AS (VALUES(1.0),(-9e+999),(2.0),(+9e+999),(3.0))\n SELECT sum(x) FROM t1;\n\n"
    ],
    "Examples": [],
    "Category": [
        "Aggregate SQL Functions"
    ],
    "EffectiveSQLsRefined": [],
    "EffectiveSQLsGenerated": [
        "SELECT sum(X) FROM table_name;",
        "SELECT sum(X);",
        "SELECT sum(value) FROM table_name;",
        "SELECT sum(value);",
        "SELECT sum(X) FROM (SELECT 1 AS X UNION ALL SELECT 2 UNION ALL SELECT 3);"
    ],
    "EffectiveSQLsGeneratedCosts": [
        {
            "Total Tokens": 948,
            "Prompt Tokens": 928,
            "Completion Tokens": 20,
            "Total Cost (USD)": 0.0001512
        },
        {
            "Total Tokens": 1086,
            "Prompt Tokens": 1069,
            "Completion Tokens": 17,
            "Total Cost (USD)": 0.00017054999999999997
        },
        {
            "Total Tokens": 1226,
            "Prompt Tokens": 1206,
            "Completion Tokens": 20,
            "Total Cost (USD)": 0.00019289999999999997
        },
        {
            "Total Tokens": 1364,
            "Prompt Tokens": 1347,
            "Completion Tokens": 17,
            "Total Cost (USD)": 0.00021224999999999998
        },
        {
            "Total Tokens": 1519,
            "Prompt Tokens": 1484,
            "Completion Tokens": 35,
            "Total Cost (USD)": 0.00024359999999999999
        }
    ],
    "EffectiveSQLsGeneratedErrors": [
        "(sqlite3.OperationalError) no such table: table_name\n",
        "(sqlite3.OperationalError) no such column: X\n",
        "(sqlite3.OperationalError) no such table: table_name\n",
        "(sqlite3.OperationalError) no such column: value\n",
        "None"
    ],
    "EffectiveSQLs": [
        "SELECT sum(X) FROM (SELECT 1 AS X UNION ALL SELECT 2 UNION ALL SELECT 3);"
    ]
}