{
    "HTML": [
        "https://www.monetdb.org/documentation-Aug2024/user-guide/sql-manual/data-types/serial-types"
    ],
    "Title": [
        "Serial Datatype"
    ],
    "Feature": [
        "Serial Datatype"
    ],
    "Description": [
        "Serial Types",
        "As of 2003 the SQL standard supports serial types and sequences. They are of particular use in auto-generating key values.A serial type is defined as a primary database object over any of the built-in data types.",
        "serial_data_types:\n     SERIAL\n   | BIGSERIAL\n   | int_datatype AUTO_INCREMENT\n   | int_datatype GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY [ '(' seq_params ')' ]\n\nint_datatype:\n     BIGINT\n   | INTEGER\n   | INT\n   | SMALLINT\n   | TINYINT\n   | HUGEINT\n",
        "When a serial_data_type is used in a table definition it will implicitly create a sequence,\nset the default clause to next value for \"schemaname\".\"seq_####\" and use it during inserts when no value is specified.SERIAL will use an int as column data type, BIGSERIAL will use a bigint as column data type.\nFor AUTO_INCREMENT and GENERATED ... you need to specify which integer data type you want to use explicitly.Note that when using SERIAL or BIGSERIAL it will also implicitly generate a primary key constraint and a NOT NULL constraint for the column.",
        "It is also possible to create and use sequences yourself.",
        "sequence_commands:\n     CREATE SEQUENCE [ schema_name '.'] seq_name [ seq_params ]\n   | ALTER  SEQUENCE [ schema_name '.'] seq_name [ alter_seq_params ]\n   | DROP   SEQUENCE [ schema_name '.'] seq_name\n\nseq_params:\n    [ AS seq_int_datatype ]\n    [ START WITH bigint ]\n    [ INCREMENT BY bigint ]\n    [ MINVALUE bigint | NO MINVALUE ]\n    [ MAXVALUE bigint | NO MAXVALUE ]\n    [ CACHE bigint ]\n    [ [ NO ] CYCLE ]\n\nalter_seq_params:\n    [ AS seq_int_datatype ]\n    [ RESTART [ WITH { bigint | subquery } ] ]\n    [ INCREMENT BY bigint ]\n    [ MINVALUE bigint | NO MINVALUE ]\n    [ MAXVALUE bigint | NO MAXVALUE ]\n    [ CACHE bigint ]\n    [ [ NO ] CYCLE ]\n\nseq_int_datatype:\n     BIGINT\n   | INTEGER\n   | INT\n   | SMALLINT\n   | TINYINT\n\nnext-statement:\n     NEXT VALUE FOR sequence_name\n",
        "The NEXT VALUE FOR operation generates the next value and can be used anywhere a value expression is allowed.\nIt's name should be unique within the current schema.",
        "Note that sequences internally always use a bigint for keeping track of the current sequence value.Warning the AS seq_int_datatype clause is silently ignored and lost when dumping the CREATE SEQUENCE definition via msqldump or mclient program.",
        "A sequence can only be dropped when the references (e.g. in the DEFAULT specification of a column) have previously been removed.",
        "Associated information_schema view: information_schema.sequences",
        "Associated system table: sys.sequences",
        "Example. ",
        "The example shown below introduces the column count, which is incremented with each row being added.\nIt is conceptually identical to the value expression max(count)+1 in each insert. The column info is a limited range with wrap around.",
        "The serial type as found in PostgreSQL and the MySQL auto_increment type are also supported and mapped onto a sequence type in MonetDB.",
        "CREATE TABLE test_serial (\n   d DATE,\n   id SERIAL,  -- this will implicitly create a PKey. Use BIGSERIAL if you want the id to be of type bigint instead of int.\n   count INT AUTO_INCREMENT,\n   info INT GENERATED ALWAYS AS\n       IDENTITY (\n           START WITH 100 INCREMENT BY 2\n           NO MINVALUE MAXVALUE 1000\n           CACHE 2 CYCLE\n       )\n);\n\nselect id, number, name, type, type_digits, table_id, \"default\", \"null\" from sys.columns\n where table_id in (select id from sys.tables where name = 'test_serial');\n+------+--------+-------+------+-------------+----------+---------------------------------+-------+\n| id   | number | name  | type | type_digits | table_id | default                         | null  |\n+======+========+=======+======+=============+==========+=================================+=======+\n| 7907 |      0 | d     | date |           0 |     7916 | null                            | true  |\n| 7908 |      1 | id    | int  |          31 |     7916 | next value for \"sys\".\"seq_7900\" | false |\n| 7911 |      2 | count | int  |          31 |     7916 | next value for \"sys\".\"seq_7901\" | true  |\n| 7912 |      3 | info  | int  |          31 |     7916 | next value for \"sys\".\"seq_7902\" | true  |\n+------+--------+-------+------+-------------+----------+---------------------------------+-------+\n\nselect * from sys.sequences;\n+------+-----------+----------+-------+----------------------+---------------------+-----------+----------+-------+\n| id   | schema_id | name     | start | minvalue             | maxvalue            | increment | cacheinc | cycle |\n+======+===========+==========+=======+======================+=====================+===========+==========+=======+\n| 7913 |      2000 | seq_7900 |     1 |                    0 | 9223372036854775807 |         1 |        1 | false |\n| 7914 |      2000 | seq_7901 |     1 |                    0 | 9223372036854775807 |         1 |        1 | false |\n| 7915 |      2000 | seq_7902 |   100 | -9223372036854775807 |                1000 |         2 |        2 | true  |\n+------+-----------+----------+-------+----------------------+---------------------+-----------+----------+-------+\n",
        "Much like other primary database objects, the sequence object can be altered at any time as illustrated below.",
        "sql>CREATE SEQUENCE \"my_test_seq\" as integer START WITH 2;\nsql>CREATE TABLE test (t int DEFAULT NEXT VALUE FOR \"my_test_seq\", v char);\nsql>INSERT INTO test(v) VALUES ('a');\nRows affected 1\nsql>INSERT INTO test VALUES (10, 'b');\nRows affected 1\nsql>ALTER SEQUENCE \"my_test_seq\" RESTART WITH (SELECT MAX(t) + 1 FROM test);\nsql>INSERT INTO test(v) VALUES ('c');\nRows affected 1\nsql>SELECT * FROM test;\n+----+---+\n| t  | v |\n+====+===+\n| 2  | a |\n| 10 | b |\n| 11 | c |\n+----+---+\n",
        "The functions sys.get_value_for(schema_name, sequence_name) and\nsys.next_value_for(schema_name, sequence_name) can be used to query the current value of a sequence.\nThe difference is that next_value_for() also advances the current value of a sequence to the next value.The SQL statement SELECT NEXT VALUE FOR schema_name.sequence_name is an equivalent\nof sys.next_value_for(schema_name, sequence_name).The following queries demonstrate how these functions and statement work:",
        "sql>CREATE SEQUENCE \"myseq\" AS INTEGER;\noperation successful\nsql>SELECT get_value_for('sys', 'myseq') as seqval;\n+------+\n|seqval|\n+======+\n|    1 |\n+------+\n1 tuple\nsql>SELECT next_value_for('sys', 'myseq') as seqval;\n+------+\n|seqval|\n+======+\n|    1 |\n+------+\n1 tuple\nsql>SELECT NEXT VALUE FOR myseq as seqval;\n+------+\n|seqval|\n+======+\n|    2 |\n+------+\n1 tuple\nsql>SELECT get_value_for('sys', 'myseq') as seqval;\n+------+\n|seqval|\n+======+\n|    3 |\n+------+\n1 tuple\nsql>DROP SEQUENCE \"myseq\";\noperation successful\n",
        "CREATE SEQUENCE \"my_test_seq\" as integer START WITH 2;\nCREATE TABLE test (t int DEFAULT NEXT VALUE FOR \"my_test_seq\", v varchar(10));\nINSERT INTO test(v) VALUES ('ab');\nSELECT * FROM test;\n+--------+\n| t | v  |\n+========+\n| 2 | ab |\n+--------+\n1 tuple\n"
    ],
    "Examples": [
        "serial_data_types:\n     SERIAL\n   | BIGSERIAL\n   | int_datatype AUTO_INCREMENT\n   | int_datatype GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY [ '(' seq_params ')' ]\n\nint_datatype:\n     BIGINT\n   | INTEGER\n   | INT\n   | SMALLINT\n   | TINYINT\n   | HUGEINT\n",
        "sequence_commands:\n     CREATE SEQUENCE [ schema_name '.'] seq_name [ seq_params ]\n   | ALTER  SEQUENCE [ schema_name '.'] seq_name [ alter_seq_params ]\n   | DROP   SEQUENCE [ schema_name '.'] seq_name\n\nseq_params:\n    [ AS seq_int_datatype ]\n    [ START WITH bigint ]\n    [ INCREMENT BY bigint ]\n    [ MINVALUE bigint | NO MINVALUE ]\n    [ MAXVALUE bigint | NO MAXVALUE ]\n    [ CACHE bigint ]\n    [ [ NO ] CYCLE ]\n\nalter_seq_params:\n    [ AS seq_int_datatype ]\n    [ RESTART [ WITH { bigint | subquery } ] ]\n    [ INCREMENT BY bigint ]\n    [ MINVALUE bigint | NO MINVALUE ]\n    [ MAXVALUE bigint | NO MAXVALUE ]\n    [ CACHE bigint ]\n    [ [ NO ] CYCLE ]\n\nseq_int_datatype:\n     BIGINT\n   | INTEGER\n   | INT\n   | SMALLINT\n   | TINYINT\n\nnext-statement:\n     NEXT VALUE FOR sequence_name\n",
        "CREATE TABLE test_serial (\n   d DATE,\n   id SERIAL,  -- this will implicitly create a PKey. Use BIGSERIAL if you want the id to be of type bigint instead of int.\n   count INT AUTO_INCREMENT,\n   info INT GENERATED ALWAYS AS\n       IDENTITY (\n           START WITH 100 INCREMENT BY 2\n           NO MINVALUE MAXVALUE 1000\n           CACHE 2 CYCLE\n       )\n);\n\nselect id, number, name, type, type_digits, table_id, \"default\", \"null\" from sys.columns\n where table_id in (select id from sys.tables where name = 'test_serial');\n+------+--------+-------+------+-------------+----------+---------------------------------+-------+\n| id   | number | name  | type | type_digits | table_id | default                         | null  |\n+======+========+=======+======+=============+==========+=================================+=======+\n| 7907 |      0 | d     | date |           0 |     7916 | null                            | true  |\n| 7908 |      1 | id    | int  |          31 |     7916 | next value for \"sys\".\"seq_7900\" | false |\n| 7911 |      2 | count | int  |          31 |     7916 | next value for \"sys\".\"seq_7901\" | true  |\n| 7912 |      3 | info  | int  |          31 |     7916 | next value for \"sys\".\"seq_7902\" | true  |\n+------+--------+-------+------+-------------+----------+---------------------------------+-------+\n\nselect * from sys.sequences;\n+------+-----------+----------+-------+----------------------+---------------------+-----------+----------+-------+\n| id   | schema_id | name     | start | minvalue             | maxvalue            | increment | cacheinc | cycle |\n+======+===========+==========+=======+======================+=====================+===========+==========+=======+\n| 7913 |      2000 | seq_7900 |     1 |                    0 | 9223372036854775807 |         1 |        1 | false |\n| 7914 |      2000 | seq_7901 |     1 |                    0 | 9223372036854775807 |         1 |        1 | false |\n| 7915 |      2000 | seq_7902 |   100 | -9223372036854775807 |                1000 |         2 |        2 | true  |\n+------+-----------+----------+-------+----------------------+---------------------+-----------+----------+-------+\n",
        "sql>CREATE SEQUENCE \"my_test_seq\" as integer START WITH 2;\nsql>CREATE TABLE test (t int DEFAULT NEXT VALUE FOR \"my_test_seq\", v char);\nsql>INSERT INTO test(v) VALUES ('a');\nRows affected 1\nsql>INSERT INTO test VALUES (10, 'b');\nRows affected 1\nsql>ALTER SEQUENCE \"my_test_seq\" RESTART WITH (SELECT MAX(t) + 1 FROM test);\nsql>INSERT INTO test(v) VALUES ('c');\nRows affected 1\nsql>SELECT * FROM test;\n+----+---+\n| t  | v |\n+====+===+\n| 2  | a |\n| 10 | b |\n| 11 | c |\n+----+---+\n",
        "sql>CREATE SEQUENCE \"myseq\" AS INTEGER;\noperation successful\nsql>SELECT get_value_for('sys', 'myseq') as seqval;\n+------+\n|seqval|\n+======+\n|    1 |\n+------+\n1 tuple\nsql>SELECT next_value_for('sys', 'myseq') as seqval;\n+------+\n|seqval|\n+======+\n|    1 |\n+------+\n1 tuple\nsql>SELECT NEXT VALUE FOR myseq as seqval;\n+------+\n|seqval|\n+======+\n|    2 |\n+------+\n1 tuple\nsql>SELECT get_value_for('sys', 'myseq') as seqval;\n+------+\n|seqval|\n+======+\n|    3 |\n+------+\n1 tuple\nsql>DROP SEQUENCE \"myseq\";\noperation successful\n",
        "CREATE SEQUENCE \"my_test_seq\" as integer START WITH 2;\nCREATE TABLE test (t int DEFAULT NEXT VALUE FOR \"my_test_seq\", v varchar(10));\nINSERT INTO test(v) VALUES ('ab');\nSELECT * FROM test;\n+--------+\n| t | v  |\n+========+\n| 2 | ab |\n+--------+\n1 tuple\n"
    ],
    "Category": [
        "Serial Datatype"
    ],
    "EffectiveSQLsRefined": [
        "select id, number, name, type, type_digits, table_id, \"default\", \"null\" from sys.columns\n where table_id in (select id from sys.tables where name = 'test_serial');",
        "select * from sys.sequences;",
        "INSERT INTO test(v) VALUES ('a');",
        "INSERT INTO test VALUES (10, 'b');",
        "INSERT INTO test(v) VALUES ('c');",
        "SELECT * FROM test;",
        "SELECT get_value_for('sys', 'myseq') as seqval;",
        "SELECT next_value_for('sys', 'myseq') as seqval;",
        "SELECT NEXT VALUE FOR myseq as seqval;",
        "SELECT get_value_for('sys', 'myseq') as seqval;",
        "SELECT * FROM test;"
    ],
    "EffectiveSQLsGenerated": [],
    "EffectiveSQLsGeneratedCosts": [],
    "EffectiveSQLsGeneratedErrors": [],
    "EffectiveSQLs": [
        "select id, number, name, type, type_digits, table_id, \"default\", \"null\" from sys.columns\n where table_id in (select id from sys.tables where name = 'test_serial');",
        "select * from sys.sequences;",
        "INSERT INTO test(v) VALUES ('a');",
        "INSERT INTO test VALUES (10, 'b');",
        "INSERT INTO test(v) VALUES ('c');",
        "SELECT * FROM test;",
        "SELECT get_value_for('sys', 'myseq') as seqval;",
        "SELECT next_value_for('sys', 'myseq') as seqval;",
        "SELECT NEXT VALUE FOR myseq as seqval;",
        "SELECT get_value_for('sys', 'myseq') as seqval;",
        "SELECT * FROM test;"
    ]
}