{
    "HTML": [
        "https://clickhouse.com/docs/en/sql-reference/data-types/dynamic"
    ],
    "Title": [
        "Dynamic"
    ],
    "Feature": [
        "Dynamic"
    ],
    "Description": [
        "Dynamic",
        "This type allows to store values of any type inside it without knowing all of them in advance.",
        "To declare a column of Dynamic type, use the following syntax:",
        "<column_name> Dynamic(max_types=N)",
        "Where N is an optional parameter between 0 and 254 indicating how many different data types can be stored as separate subcolumns inside a column with type Dynamic across single block of data that is stored separately (for example across single data part for MergeTree table). If this limit is exceeded, all values with new types will be stored together in a special shared data structure in binary form. Default value of max_types is 32.",
        "NoteThe Dynamic data type is an experimental feature. To use it, set allow_experimental_dynamic_type = 1.",
        "Creating Dynamic\u200b",
        "Using Dynamic type in table column definition:",
        "CREATE TABLE test (d Dynamic) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT d, dynamicType(d) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 None           \u2502\u2502 42            \u2502 Int64          \u2502\u2502 Hello, World! \u2502 String         \u2502\u2502 [1,2,3]       \u2502 Array(Int64)   \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Using CAST from ordinary column:",
        "SELECT 'Hello, World!'::Dynamic as d, dynamicType(d);",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 Hello, World! \u2502 String         \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Using CAST from Variant column:",
        "SET allow_experimental_variant_type = 1, use_variant_as_common_type = 1;SELECT multiIf((number % 3) = 0, number, (number % 3) = 1, range(number + 1), NULL)::Dynamic AS d, dynamicType(d) FROM numbers(3)",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 0     \u2502 UInt64         \u2502\u2502 [0,1] \u2502 Array(UInt64)  \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 None           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Reading Dynamic nested types as subcolumns\u200b",
        "Dynamic type supports reading a single nested type from a Dynamic column using the type name as a subcolumn.\nSo, if you have column d Dynamic you can read a subcolumn of any valid type T using syntax d.T,\nthis subcolumn will have type Nullable(T) if T can be inside Nullable and T otherwise. This subcolumn will\nbe the same size as original Dynamic column and will contain NULL values (or empty values if T cannot be inside Nullable)\nin all rows in which original Dynamic column doesn't have type T.",
        "Dynamic subcolumns can be also read using function dynamicElement(dynamic_column, type_name).",
        "Examples:",
        "CREATE TABLE test (d Dynamic) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT d, dynamicType(d), d.String, d.Int64, d.`Array(Int64)`, d.Date, d.`Array(String)` FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u252c\u2500d.String\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500d.Int64\u2500\u252c\u2500d.Array(Int64)\u2500\u252c\u2500d.Date\u2500\u252c\u2500d.Array(String)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 None           \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502    \u1d3a\u1d41\u1d38\u1d38 \u2502 []             \u2502   \u1d3a\u1d41\u1d38\u1d38 \u2502 []              \u2502\u2502 42            \u2502 Int64          \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502      42 \u2502 []             \u2502   \u1d3a\u1d41\u1d38\u1d38 \u2502 []              \u2502\u2502 Hello, World! \u2502 String         \u2502 Hello, World! \u2502    \u1d3a\u1d41\u1d38\u1d38 \u2502 []             \u2502   \u1d3a\u1d41\u1d38\u1d38 \u2502 []              \u2502\u2502 [1,2,3]       \u2502 Array(Int64)   \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502    \u1d3a\u1d41\u1d38\u1d38 \u2502 [1,2,3]        \u2502   \u1d3a\u1d41\u1d38\u1d38 \u2502 []              \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT toTypeName(d.String), toTypeName(d.Int64), toTypeName(d.`Array(Int64)`), toTypeName(d.Date), toTypeName(d.`Array(String)`)  FROM test LIMIT 1;",
        "\u250c\u2500toTypeName(d.String)\u2500\u252c\u2500toTypeName(d.Int64)\u2500\u252c\u2500toTypeName(d.Array(Int64))\u2500\u252c\u2500toTypeName(d.Date)\u2500\u252c\u2500toTypeName(d.Array(String))\u2500\u2510\u2502 Nullable(String)     \u2502 Nullable(Int64)     \u2502 Array(Int64)               \u2502 Nullable(Date)     \u2502 Array(String)               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT d, dynamicType(d), dynamicElement(d, 'String'), dynamicElement(d, 'Int64'), dynamicElement(d, 'Array(Int64)'), dynamicElement(d, 'Date'), dynamicElement(d, 'Array(String)') FROM test;```",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u252c\u2500dynamicElement(d, 'String')\u2500\u252c\u2500dynamicElement(d, 'Int64')\u2500\u252c\u2500dynamicElement(d, 'Array(Int64)')\u2500\u252c\u2500dynamicElement(d, 'Date')\u2500\u252c\u2500dynamicElement(d, 'Array(String)')\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 None           \u2502 \u1d3a\u1d41\u1d38\u1d38                        \u2502                       \u1d3a\u1d41\u1d38\u1d38 \u2502 []                                \u2502                      \u1d3a\u1d41\u1d38\u1d38 \u2502 []                                 \u2502\u2502 42            \u2502 Int64          \u2502 \u1d3a\u1d41\u1d38\u1d38                        \u2502                         42 \u2502 []                                \u2502                      \u1d3a\u1d41\u1d38\u1d38 \u2502 []                                 \u2502\u2502 Hello, World! \u2502 String         \u2502 Hello, World!               \u2502                       \u1d3a\u1d41\u1d38\u1d38 \u2502 []                                \u2502                      \u1d3a\u1d41\u1d38\u1d38 \u2502 []                                 \u2502\u2502 [1,2,3]       \u2502 Array(Int64)   \u2502 \u1d3a\u1d41\u1d38\u1d38                        \u2502                       \u1d3a\u1d41\u1d38\u1d38 \u2502 [1,2,3]                           \u2502                      \u1d3a\u1d41\u1d38\u1d38 \u2502 []                                 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "To know what variant is stored in each row function dynamicType(dynamic_column) can be used. It returns String with value type name for each row (or 'None' if row is NULL).",
        "Example:",
        "CREATE TABLE test (d Dynamic) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT dynamicType(d) from test;",
        "\u250c\u2500dynamicType(d)\u2500\u2510\u2502 None           \u2502\u2502 Int64          \u2502\u2502 String         \u2502\u2502 Array(Int64)   \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Conversion between Dynamic column and other columns\u200b",
        "There are 4 possible conversions that can be performed with Dynamic column.",
        "Converting an ordinary column to a Dynamic column\u200b",
        "SELECT 'Hello, World!'::Dynamic as d, dynamicType(d);",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 Hello, World! \u2502 String         \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Converting a String column to a Dynamic column through parsing\u200b",
        "To parse Dynamic type values from a String column you can enable setting cast_string_to_dynamic_use_inference:",
        "SET cast_string_to_dynamic_use_inference = 1;SELECT CAST(materialize(map('key1', '42', 'key2', 'true', 'key3', '2020-01-01')), 'Map(String, Dynamic)') as map_of_dynamic, mapApply((k, v) -> (k, dynamicType(v)), map_of_dynamic) as map_of_dynamic_types;",
        "\u250c\u2500map_of_dynamic\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500map_of_dynamic_types\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {'key1':42,'key2':true,'key3':'2020-01-01'} \u2502 {'key1':'Int64','key2':'Bool','key3':'Date'} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Converting a Dynamic column to an ordinary column\u200b",
        "It is possible to convert a Dynamic column to an ordinary column. In this case all nested types will be converted to a destination type:",
        "CREATE TABLE test (d Dynamic) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('42.42'), (true), ('e10');SELECT d::Nullable(Float64) FROM test;",
        "\u250c\u2500CAST(d, 'Nullable(Float64)')\u2500\u2510\u2502                         \u1d3a\u1d41\u1d38\u1d38 \u2502\u2502                           42 \u2502\u2502                        42.42 \u2502\u2502                            1 \u2502\u2502                            0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Converting a Variant column to Dynamic column\u200b",
        "CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('String'), ([1, 2, 3]);SELECT v::Dynamic as d, dynamicType(d) from test; ",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502 None           \u2502\u2502 42      \u2502 UInt64         \u2502\u2502 String  \u2502 String         \u2502\u2502 [1,2,3] \u2502 Array(UInt64)  \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Converting a Dynamic(max_types=N) column to another Dynamic(max_types=K)\u200b",
        "If K >= N than during conversion the data doesn't change:",
        "CREATE TABLE test (d Dynamic(max_types=3)) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), (43), ('42.42'), (true);SELECT d::Dynamic(max_types=5) as d2, dynamicType(d2) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 None           \u2502\u2502 42    \u2502 Int64          \u2502\u2502 43    \u2502 Int64          \u2502\u2502 42.42 \u2502 String         \u2502\u2502 true  \u2502 Bool           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "If K < N, then the values with the rarest types will be inserted into a single special subcolumn, but still will be accessible:",
        "CREATE TABLE test (d Dynamic(max_types=4)) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), (43), ('42.42'), (true), ([1, 2, 3]);SELECT d, dynamicType(d), d::Dynamic(max_types=2) as d2, dynamicType(d2), isDynamicElementInSharedData(d2) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u252c\u2500d2\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d2)\u2500\u252c\u2500isDynamicElementInSharedData(d2)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502 None           \u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502 None            \u2502 false                            \u2502\u2502 42      \u2502 Int64          \u2502 42      \u2502 Int64           \u2502 false                            \u2502\u2502 43      \u2502 Int64          \u2502 43      \u2502 Int64           \u2502 false                            \u2502\u2502 42.42   \u2502 String         \u2502 42.42   \u2502 String          \u2502 false                            \u2502\u2502 true    \u2502 Bool           \u2502 true    \u2502 Bool            \u2502 true                             \u2502\u2502 [1,2,3] \u2502 Array(Int64)   \u2502 [1,2,3] \u2502 Array(Int64)    \u2502 true                             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Functions isDynamicElementInSharedData returns true for rows that are stored in a special shared data structure inside Dynamic and as we can see, resulting column contains only 2 types that are not stored in shared data structure.",
        "If K=0, all types will be inserted into single special subcolumn:",
        "CREATE TABLE test (d Dynamic(max_types=4)) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), (43), ('42.42'), (true), ([1, 2, 3]);SELECT d, dynamicType(d), d::Dynamic(max_types=0) as d2, dynamicType(d2), isDynamicElementInSharedData(d2) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u252c\u2500d2\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d2)\u2500\u252c\u2500isDynamicElementInSharedData(d2)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502 None           \u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502 None            \u2502 false                            \u2502\u2502 42      \u2502 Int64          \u2502 42      \u2502 Int64           \u2502 true                             \u2502\u2502 43      \u2502 Int64          \u2502 43      \u2502 Int64           \u2502 true                             \u2502\u2502 42.42   \u2502 String         \u2502 42.42   \u2502 String          \u2502 true                             \u2502\u2502 true    \u2502 Bool           \u2502 true    \u2502 Bool            \u2502 true                             \u2502\u2502 [1,2,3] \u2502 Array(Int64)   \u2502 [1,2,3] \u2502 Array(Int64)    \u2502 true                             \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Reading Dynamic type from the data\u200b",
        "All text formats (TSV, CSV, CustomSeparated, Values, JSONEachRow, etc) supports reading Dynamic type. During data parsing ClickHouse tries to infer the type of each value and use it during insertion to Dynamic column. ",
        "Example:",
        "SELECT    d,    dynamicType(d),    dynamicElement(d, 'String') AS str,    dynamicElement(d, 'Int64') AS num,    dynamicElement(d, 'Float64') AS float,    dynamicElement(d, 'Date') AS date,    dynamicElement(d, 'Array(Int64)') AS arrFROM format(JSONEachRow, 'd Dynamic', $${\"d\" : \"Hello, World!\"},{\"d\" : 42},{\"d\" : 42.42},{\"d\" : \"2020-01-01\"},{\"d\" : [1, 2, 3]}$$)",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u252c\u2500str\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500num\u2500\u252c\u2500float\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500arr\u2500\u2500\u2500\u2500\u2500\u2510\u2502 Hello, World! \u2502 String         \u2502 Hello, World! \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502       \u1d3a\u1d41\u1d38\u1d38 \u2502 []      \u2502\u2502 42            \u2502 Int64          \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502   42 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502       \u1d3a\u1d41\u1d38\u1d38 \u2502 []      \u2502\u2502 42.42         \u2502 Float64        \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 42.42 \u2502       \u1d3a\u1d41\u1d38\u1d38 \u2502 []      \u2502\u2502 2020-01-01    \u2502 Date           \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 2020-01-01 \u2502 []      \u2502\u2502 [1,2,3]       \u2502 Array(Int64)   \u2502 \u1d3a\u1d41\u1d38\u1d38          \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502       \u1d3a\u1d41\u1d38\u1d38 \u2502 [1,2,3] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Using Dynamic type in functions\u200b",
        "Most of the functions support arguments with type Dynamic. In this case the function is executed separately on each internal data type stored inside Dynamic column.\nWhen the result type of the function depends on the arguments types, the result of such function executed with Dynamic arguments will be Dynamic. When the result type of the function doesn't depend on the arguments types - the result will be Nullable(T) where T the usual result type of this function.",
        "Examples:",
        "CREATE TABLE test (d Dynamic) ENGINE=Memory;INSERT INTO test VALUES (NULL), (1::Int8), (2::Int16), (3::Int32), (4::Int64);",
        "SELECT d, dynamicType(d) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 None           \u2502\u2502 1    \u2502 Int8           \u2502\u2502 2    \u2502 Int16          \u2502\u2502 3    \u2502 Int32          \u2502\u2502 4    \u2502 Int64          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT d, d + 1 AS res, toTypeName(res), dynamicType(res) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u252c\u2500res\u2500\u2500\u252c\u2500toTypeName(res)\u2500\u252c\u2500dynamicType(res)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Dynamic         \u2502 None             \u2502\u2502 1    \u2502 2    \u2502 Dynamic         \u2502 Int16            \u2502\u2502 2    \u2502 3    \u2502 Dynamic         \u2502 Int32            \u2502\u2502 3    \u2502 4    \u2502 Dynamic         \u2502 Int64            \u2502\u2502 4    \u2502 5    \u2502 Dynamic         \u2502 Int64            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT d, d + d AS res, toTypeName(res), dynamicType(res) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u252c\u2500res\u2500\u2500\u252c\u2500toTypeName(res)\u2500\u252c\u2500dynamicType(res)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Dynamic         \u2502 None             \u2502\u2502 1    \u2502 2    \u2502 Dynamic         \u2502 Int16            \u2502\u2502 2    \u2502 4    \u2502 Dynamic         \u2502 Int32            \u2502\u2502 3    \u2502 6    \u2502 Dynamic         \u2502 Int64            \u2502\u2502 4    \u2502 8    \u2502 Dynamic         \u2502 Int64            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT d, d < 3 AS res, toTypeName(res) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u252c\u2500\u2500res\u2500\u252c\u2500toTypeName(res)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Nullable(UInt8) \u2502\u2502 1    \u2502    1 \u2502 Nullable(UInt8) \u2502\u2502 2    \u2502    1 \u2502 Nullable(UInt8) \u2502\u2502 3    \u2502    0 \u2502 Nullable(UInt8) \u2502\u2502 4    \u2502    0 \u2502 Nullable(UInt8) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT d, exp2(d) AS res, toTypeName(res) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u252c\u2500\u2500res\u2500\u252c\u2500toTypeName(res)\u2500\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Nullable(Float64) \u2502\u2502 1    \u2502    2 \u2502 Nullable(Float64) \u2502\u2502 2    \u2502    4 \u2502 Nullable(Float64) \u2502\u2502 3    \u2502    8 \u2502 Nullable(Float64) \u2502\u2502 4    \u2502   16 \u2502 Nullable(Float64) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "TRUNCATE TABLE test;INSERT INTO test VALUES (NULL), ('str_1'), ('str_2');SELECT d, dynamicType(d) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 None           \u2502\u2502 str_1 \u2502 String         \u2502\u2502 str_2 \u2502 String         \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT d, upper(d) AS res, toTypeName(res) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u252c\u2500res\u2500\u2500\u2500\u252c\u2500toTypeName(res)\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 Nullable(String) \u2502\u2502 str_1 \u2502 STR_1 \u2502 Nullable(String) \u2502\u2502 str_2 \u2502 STR_2 \u2502 Nullable(String) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT d, extract(d, '([0-3])') AS res, toTypeName(res) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u252c\u2500res\u2500\u2500\u252c\u2500toTypeName(res)\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Nullable(String) \u2502\u2502 str_1 \u2502 1    \u2502 Nullable(String) \u2502\u2502 str_2 \u2502 2    \u2502 Nullable(String) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "TRUNCATE TABLE test;INSERT INTO test VALUES (NULL), ([1, 2]), ([3, 4]);SELECT d, dynamicType(d) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 None           \u2502\u2502 [1,2] \u2502 Array(Int64)   \u2502\u2502 [3,4] \u2502 Array(Int64)   \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT d, d[1] AS res, toTypeName(res), dynamicType(res) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u252c\u2500res\u2500\u2500\u252c\u2500toTypeName(res)\u2500\u252c\u2500dynamicType(res)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Dynamic         \u2502 None             \u2502\u2502 [1,2] \u2502 1    \u2502 Dynamic         \u2502 Int64            \u2502\u2502 [3,4] \u2502 3    \u2502 Dynamic         \u2502 Int64            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "If function cannot be executed on some type inside Dynamic column, the exception will be thrown:",
        "INSERT INTO test VALUES (42), (43), ('str_1');SELECT d, dynamicType(d) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 42    \u2502 Int64          \u2502\u2502 43    \u2502 Int64          \u2502\u2502 str_1 \u2502 String         \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 None           \u2502\u2502 [1,2] \u2502 Array(Int64)   \u2502\u2502 [3,4] \u2502 Array(Int64)   \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT d, d + 1 AS res, toTypeName(res), dynamicType(d) FROM test;",
        "Received exception:Code: 43. DB::Exception: Illegal types Array(Int64) and UInt8 of arguments of function plus: while executing 'FUNCTION plus(__table1.d : 3, 1_UInt8 :: 1) -> plus(__table1.d, 1_UInt8) Dynamic : 0'. (ILLEGAL_TYPE_OF_ARGUMENT)",
        "We can filter out unneeded types:",
        "SELECT d, d + 1 AS res, toTypeName(res), dynamicType(res) FROM test WHERE dynamicType(d) NOT IN ('String', 'Array(Int64)', 'None')",
        "\u250c\u2500d\u2500\u2500\u252c\u2500res\u2500\u252c\u2500toTypeName(res)\u2500\u252c\u2500dynamicType(res)\u2500\u2510\u2502 42 \u2502 43  \u2502 Dynamic         \u2502 Int64            \u2502\u2502 43 \u2502 44  \u2502 Dynamic         \u2502 Int64            \u2502\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Or extract required type as subcolumn:",
        "SELECT d, d.Int64 + 1 AS res, toTypeName(res) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500res\u2500\u252c\u2500toTypeName(res)\u2500\u2510\u2502 42    \u2502   43 \u2502 Nullable(Int64) \u2502\u2502 43    \u2502   44 \u2502 Nullable(Int64) \u2502\u2502 str_1 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Nullable(Int64) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500res\u2500\u252c\u2500toTypeName(res)\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Nullable(Int64) \u2502\u2502 [1,2] \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Nullable(Int64) \u2502\u2502 [3,4] \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Nullable(Int64) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Using Dynamic type in ORDER BY and GROUP BY\u200b",
        "During ORDER BY and GROUP BY values of Dynamic types are compared similar to values of Variant type:\nThe result of operator < for values d1 with underlying type T1 and d2 with underlying type T2  of a type Dynamic is defined as follows:",
        "If T1 = T2 = T, the result will be d1.T < d2.T (underlying values will be compared).If T1 != T2, the result will be T1 < T2 (type names will be compared).",
        "By default Dynamic type is not allowed in GROUP BY/ORDER BY keys, if you want to use it consider its special comparison rule and enable allow_suspicious_types_in_group_by/allow_suspicious_types_in_order_by settings.",
        "Examples:",
        "CREATE TABLE test (d Dynamic) ENGINE=Memory;INSERT INTO test VALUES (42), (43), ('abc'), ('abd'), ([1, 2, 3]), ([]), (NULL);",
        "SELECT d, dynamicType(d) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 42      \u2502 Int64          \u2502\u2502 43      \u2502 Int64          \u2502\u2502 abc     \u2502 String         \u2502\u2502 abd     \u2502 String         \u2502\u2502 [1,2,3] \u2502 Array(Int64)   \u2502\u2502 []      \u2502 Array(Int64)   \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502 None           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT d, dynamicType(d) FROM test ORDER BY d SETTINGS allow_suspicious_types_in_order_by=1;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 []      \u2502 Array(Int64)   \u2502\u2502 [1,2,3] \u2502 Array(Int64)   \u2502\u2502 42      \u2502 Int64          \u2502\u2502 43      \u2502 Int64          \u2502\u2502 abc     \u2502 String         \u2502\u2502 abd     \u2502 String         \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502 None           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Note: values of dynamic types with different numeric types are considered as different values and not compared between each other, their type names are compared instead.",
        "Example:",
        "CREATE TABLE test (d Dynamic) ENGINE=Memory;INSERT INTO test VALUES (1::UInt32), (1::Int64), (100::UInt32), (100::Int64);SELECT d, dynamicType(d) FROM test ORDER BY d SETTINGS allow_suspicious_types_in_order_by=1;",
        "\u250c\u2500v\u2500\u2500\u2500\u252c\u2500dynamicType(v)\u2500\u2510\u2502 1   \u2502 Int64          \u2502\u2502 100 \u2502 Int64          \u2502\u2502 1   \u2502 UInt32         \u2502\u2502 100 \u2502 UInt32         \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT d, dynamicType(d) FROM test GROUP by d SETTINGS allow_suspicious_types_in_group_by=1;",
        "\u250c\u2500d\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 1   \u2502 Int64          \u2502\u2502 100 \u2502 UInt32         \u2502\u2502 1   \u2502 UInt32         \u2502\u2502 100 \u2502 Int64          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Note: the described comparison rule is not applied during execution of comparison functions like </>/= and others because of special work of functions with Dynamic type",
        "Reaching the limit in number of different data types stored inside Dynamic\u200b",
        "Dynamic data type can store only limited number of different data types as separate subcolumns. By default, this limit is 32, but you can change it in type declaration using syntax Dynamic(max_types=N) where N is between 0 and 254 (due to implementation details, it's impossible to have more than 254 different data types that can be stored as separate subcolumns inside Dynamic).\nWhen the limit is reached, all new data types inserted to Dynamic column will be inserted into a single shared data structure that stores values with different data types in binary form.",
        "Let's see what happens when the limit is reached in different scenarios.",
        "Reaching the limit during data parsing\u200b",
        "During parsing of Dynamic values from the data, when the limit is reached for current block of data, all new values will be inserted into shared data structure:",
        "SELECT d, dynamicType(d), isDynamicElementInSharedData(d) FROM format(JSONEachRow, 'd Dynamic(max_types=3)', '{\"d\" : 42}{\"d\" : [1, 2, 3]}{\"d\" : \"Hello, World!\"}{\"d\" : \"2020-01-01\"}{\"d\" : [\"str1\", \"str2\", \"str3\"]}{\"d\" : {\"a\" : 1, \"b\" : [1, 2, 3]}}')",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500isDynamicElementInSharedData(d)\u2500\u2510\u2502 42                     \u2502 Int64                          \u2502 false                           \u2502\u2502 [1,2,3]                \u2502 Array(Int64)                   \u2502 false                           \u2502\u2502 Hello, World!          \u2502 String                         \u2502 false                           \u2502\u2502 2020-01-01             \u2502 Date                           \u2502 true                            \u2502\u2502 ['str1','str2','str3'] \u2502 Array(String)                  \u2502 true                            \u2502\u2502 (1,[1,2,3])            \u2502 Tuple(a Int64, b Array(Int64)) \u2502 true                            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "As we can see, after inserting 3 different data types Int64, Array(Int64) and String all new types were inserted into special shared data structure.",
        "During merges of data parts in MergeTree table engines\u200b",
        "During merge of several data parts in MergeTree table the Dynamic column in the resulting data part can reach the limit of different data types that can be stored in separate subcolumns inside and won't be able to store all types as subcolumns from source parts.\nIn this case ClickHouse chooses what types will remain as separate subcolumns after merge and what types will be inserted into shared data structure. In most cases ClickHouse tries to keep the most frequent types and store the rarest types in shared data structure, but it depends on the implementation.",
        "Let's see an example of such merge. First, let's create a table with Dynamic column, set the limit of different data types to 3 and insert values with 5 different types:",
        "CREATE TABLE test (id UInt64, d Dynamic(max_types=3)) engine=MergeTree ORDER BY id;SYSTEM STOP MERGES test;INSERT INTO test SELECT number, number FROM numbers(5);INSERT INTO test SELECT number, range(number) FROM numbers(4);INSERT INTO test SELECT number, toDate(number) FROM numbers(3);INSERT INTO test SELECT number, map(number, number) FROM numbers(2);INSERT INTO test SELECT number, 'str_' || toString(number) FROM numbers(1);",
        "Each insert will create a separate data pert with Dynamic column containing single type:",
        "SELECT count(), dynamicType(d), isDynamicElementInSharedData(d), _part FROM test GROUP BY _part, dynamicType(d), isDynamicElementInSharedData(d) ORDER BY _part, count();",
        "\u250c\u2500count()\u2500\u252c\u2500dynamicType(d)\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500isDynamicElementInSharedData(d)\u2500\u252c\u2500_part\u2500\u2500\u2500\u2500\u2500\u2510\u2502       5 \u2502 UInt64              \u2502 false                           \u2502 all_1_1_0 \u2502\u2502       4 \u2502 Array(UInt64)       \u2502 false                           \u2502 all_2_2_0 \u2502\u2502       3 \u2502 Date                \u2502 false                           \u2502 all_3_3_0 \u2502\u2502       2 \u2502 Map(UInt64, UInt64) \u2502 false                           \u2502 all_4_4_0 \u2502\u2502       1 \u2502 String              \u2502 false                           \u2502 all_5_5_0 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Now, let's merge all parts into one and see what will happen:",
        "SYSTEM START MERGES test;OPTIMIZE TABLE test FINAL;SELECT count(), dynamicType(d), isDynamicElementInSharedData(d), _part FROM test GROUP BY _part, dynamicType(d), isDynamicElementInSharedData(d) ORDER BY _part, count() desc;",
        "\u250c\u2500count()\u2500\u252c\u2500dynamicType(d)\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500isDynamicElementInSharedData(d)\u2500\u252c\u2500_part\u2500\u2500\u2500\u2500\u2500\u2510\u2502       5 \u2502 UInt64              \u2502 false                           \u2502 all_1_5_2 \u2502\u2502       4 \u2502 Array(UInt64)       \u2502 false                           \u2502 all_1_5_2 \u2502\u2502       3 \u2502 Date                \u2502 false                           \u2502 all_1_5_2 \u2502\u2502       2 \u2502 Map(UInt64, UInt64) \u2502 true                            \u2502 all_1_5_2 \u2502\u2502       1 \u2502 String              \u2502 true                            \u2502 all_1_5_2 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "As we can see, ClickHouse kept the most frequent types UInt64 and Array(UInt64) as subcolumns and inserted all other types into shared data.",
        "JSONExtract functions with Dynamic\u200b",
        "All JSONExtract* functions support Dynamic type:",
        "SELECT JSONExtract('{\"a\" : [1, 2, 3]}', 'a', 'Dynamic') AS dynamic, dynamicType(dynamic) AS dynamic_type;",
        "\u250c\u2500dynamic\u2500\u252c\u2500dynamic_type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [1,2,3] \u2502 Array(Nullable(Int64)) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT JSONExtract('{\"obj\" : {\"a\" : 42, \"b\" : \"Hello\", \"c\" : [1,2,3]}}', 'obj', 'Map(String, Dynamic)') AS map_of_dynamics, mapApply((k, v) -> (k, dynamicType(v)), map_of_dynamics) AS map_of_dynamic_types",
        "\u250c\u2500map_of_dynamics\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500map_of_dynamic_types\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 {'a':42,'b':'Hello','c':[1,2,3]} \u2502 {'a':'Int64','b':'String','c':'Array(Nullable(Int64))'} \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT JSONExtractKeysAndValues('{\"a\" : 42, \"b\" : \"Hello\", \"c\" : [1,2,3]}', 'Dynamic') AS dynamics, arrayMap(x -> (x.1, dynamicType(x.2)), dynamics) AS dynamic_types```",
        "\u250c\u2500dynamics\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamic_types\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [('a',42),('b','Hello'),('c',[1,2,3])] \u2502 [('a','Int64'),('b','String'),('c','Array(Nullable(Int64))')] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Binary output format\u200b",
        "In RowBinary format values of Dynamic type are serialized in the following format:",
        "<binary_encoded_data_type><value_in_binary_format_according_to_the_data_type>"
    ],
    "Examples": [
        "<column_name> Dynamic(max_types=N)",
        "CREATE TABLE test (d Dynamic) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT d, dynamicType(d) FROM test;",
        "SELECT 'Hello, World!'::Dynamic as d, dynamicType(d);",
        "SET allow_experimental_variant_type = 1, use_variant_as_common_type = 1;SELECT multiIf((number % 3) = 0, number, (number % 3) = 1, range(number + 1), NULL)::Dynamic AS d, dynamicType(d) FROM numbers(3)",
        "CREATE TABLE test (d Dynamic) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT d, dynamicType(d), d.String, d.Int64, d.`Array(Int64)`, d.Date, d.`Array(String)` FROM test;",
        "SELECT toTypeName(d.String), toTypeName(d.Int64), toTypeName(d.`Array(Int64)`), toTypeName(d.Date), toTypeName(d.`Array(String)`)  FROM test LIMIT 1;",
        "SELECT d, dynamicType(d), dynamicElement(d, 'String'), dynamicElement(d, 'Int64'), dynamicElement(d, 'Array(Int64)'), dynamicElement(d, 'Date'), dynamicElement(d, 'Array(String)') FROM test;```",
        "CREATE TABLE test (d Dynamic) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);SELECT dynamicType(d) from test;",
        "SELECT 'Hello, World!'::Dynamic as d, dynamicType(d);",
        "SET cast_string_to_dynamic_use_inference = 1;SELECT CAST(materialize(map('key1', '42', 'key2', 'true', 'key3', '2020-01-01')), 'Map(String, Dynamic)') as map_of_dynamic, mapApply((k, v) -> (k, dynamicType(v)), map_of_dynamic) as map_of_dynamic_types;",
        "CREATE TABLE test (d Dynamic) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('42.42'), (true), ('e10');SELECT d::Nullable(Float64) FROM test;",
        "CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), ('String'), ([1, 2, 3]);SELECT v::Dynamic as d, dynamicType(d) from test; ",
        "CREATE TABLE test (d Dynamic(max_types=3)) ENGINE = Memory;INSERT INTO test VALUES (NULL), (42), (43), ('42.42'), (true);SELECT d::Dynamic(max_types=5) as d2, dynamicType(d2) FROM test;",
        "SELECT    d,    dynamicType(d),    dynamicElement(d, 'String') AS str,    dynamicElement(d, 'Int64') AS num,    dynamicElement(d, 'Float64') AS float,    dynamicElement(d, 'Date') AS date,    dynamicElement(d, 'Array(Int64)') AS arrFROM format(JSONEachRow, 'd Dynamic', $${\"d\" : \"Hello, World!\"},{\"d\" : 42},{\"d\" : 42.42},{\"d\" : \"2020-01-01\"},{\"d\" : [1, 2, 3]}$$)",
        "CREATE TABLE test (d Dynamic) ENGINE=Memory;INSERT INTO test VALUES (NULL), (1::Int8), (2::Int16), (3::Int32), (4::Int64);",
        "SELECT d, dynamicType(d) FROM test;",
        "SELECT d, d + 1 AS res, toTypeName(res), dynamicType(res) FROM test;",
        "SELECT d, d + d AS res, toTypeName(res), dynamicType(res) FROM test;",
        "SELECT d, d < 3 AS res, toTypeName(res) FROM test;",
        "SELECT d, exp2(d) AS res, toTypeName(res) FROM test;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u252c\u2500\u2500res\u2500\u252c\u2500toTypeName(res)\u2500\u2500\u2500\u2510\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Nullable(Float64) \u2502\u2502 1    \u2502    2 \u2502 Nullable(Float64) \u2502\u2502 2    \u2502    4 \u2502 Nullable(Float64) \u2502\u2502 3    \u2502    8 \u2502 Nullable(Float64) \u2502\u2502 4    \u2502   16 \u2502 Nullable(Float64) \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "TRUNCATE TABLE test;INSERT INTO test VALUES (NULL), ('str_1'), ('str_2');SELECT d, dynamicType(d) FROM test;",
        "SELECT d, upper(d) AS res, toTypeName(res) FROM test;",
        "SELECT d, extract(d, '([0-3])') AS res, toTypeName(res) FROM test;",
        "TRUNCATE TABLE test;INSERT INTO test VALUES (NULL), ([1, 2]), ([3, 4]);SELECT d, dynamicType(d) FROM test;",
        "SELECT d, d[1] AS res, toTypeName(res), dynamicType(res) FROM test;",
        "INSERT INTO test VALUES (42), (43), ('str_1');SELECT d, dynamicType(d) FROM test;",
        "SELECT d, d + 1 AS res, toTypeName(res), dynamicType(d) FROM test;",
        "SELECT d, d + 1 AS res, toTypeName(res), dynamicType(res) FROM test WHERE dynamicType(d) NOT IN ('String', 'Array(Int64)', 'None')",
        "SELECT d, d.Int64 + 1 AS res, toTypeName(res) FROM test;",
        "CREATE TABLE test (d Dynamic) ENGINE=Memory;INSERT INTO test VALUES (42), (43), ('abc'), ('abd'), ([1, 2, 3]), ([]), (NULL);",
        "SELECT d, dynamicType(d) FROM test;",
        "SELECT d, dynamicType(d) FROM test ORDER BY d SETTINGS allow_suspicious_types_in_order_by=1;",
        "\u250c\u2500d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500dynamicType(d)\u2500\u2510\u2502 []      \u2502 Array(Int64)   \u2502\u2502 [1,2,3] \u2502 Array(Int64)   \u2502\u2502 42      \u2502 Int64          \u2502\u2502 43      \u2502 Int64          \u2502\u2502 abc     \u2502 String         \u2502\u2502 abd     \u2502 String         \u2502\u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502 None           \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "CREATE TABLE test (d Dynamic) ENGINE=Memory;INSERT INTO test VALUES (1::UInt32), (1::Int64), (100::UInt32), (100::Int64);SELECT d, dynamicType(d) FROM test ORDER BY d SETTINGS allow_suspicious_types_in_order_by=1;",
        "SELECT d, dynamicType(d) FROM test GROUP by d SETTINGS allow_suspicious_types_in_group_by=1;",
        "SELECT d, dynamicType(d), isDynamicElementInSharedData(d) FROM format(JSONEachRow, 'd Dynamic(max_types=3)', '{\"d\" : 42}{\"d\" : [1, 2, 3]}{\"d\" : \"Hello, World!\"}{\"d\" : \"2020-01-01\"}{\"d\" : [\"str1\", \"str2\", \"str3\"]}{\"d\" : {\"a\" : 1, \"b\" : [1, 2, 3]}}')",
        "CREATE TABLE test (id UInt64, d Dynamic(max_types=3)) engine=MergeTree ORDER BY id;SYSTEM STOP MERGES test;INSERT INTO test SELECT number, number FROM numbers(5);INSERT INTO test SELECT number, range(number) FROM numbers(4);INSERT INTO test SELECT number, toDate(number) FROM numbers(3);INSERT INTO test SELECT number, map(number, number) FROM numbers(2);INSERT INTO test SELECT number, 'str_' || toString(number) FROM numbers(1);",
        "SELECT count(), dynamicType(d), isDynamicElementInSharedData(d), _part FROM test GROUP BY _part, dynamicType(d), isDynamicElementInSharedData(d) ORDER BY _part, count();",
        "SYSTEM START MERGES test;OPTIMIZE TABLE test FINAL;SELECT count(), dynamicType(d), isDynamicElementInSharedData(d), _part FROM test GROUP BY _part, dynamicType(d), isDynamicElementInSharedData(d) ORDER BY _part, count() desc;",
        "SELECT JSONExtract('{\"a\" : [1, 2, 3]}', 'a', 'Dynamic') AS dynamic, dynamicType(dynamic) AS dynamic_type;",
        "SELECT JSONExtract('{\"obj\" : {\"a\" : 42, \"b\" : \"Hello\", \"c\" : [1,2,3]}}', 'obj', 'Map(String, Dynamic)') AS map_of_dynamics, mapApply((k, v) -> (k, dynamicType(v)), map_of_dynamics) AS map_of_dynamic_types",
        "SELECT JSONExtractKeysAndValues('{\"a\" : 42, \"b\" : \"Hello\", \"c\" : [1,2,3]}', 'Dynamic') AS dynamics, arrayMap(x -> (x.1, dynamicType(x.2)), dynamics) AS dynamic_types```"
    ],
    "Category": [
        "Dynamic"
    ],
    "EffectiveSQLsRefined": [
        "SET allow_experimental_variant_type = 1, use_variant_as_common_type = 1;",
        "SET cast_string_to_dynamic_use_inference = 1;",
        "SELECT JSONExtract('{\"a\" : [1, 2, 3]}', 'a', 'Dynamic') AS dynamic, dynamicType(dynamic) AS dynamic_type;"
    ]
}