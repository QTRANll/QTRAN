{"HTML": ["https://clickhouse.com/docs/en/sql-reference/data-types/float"], "Title": ["Float32, Float64"], "Feature": ["Float32, Float64"], "Description": ["Float32, Float64", "NoteIf you need accurate calculations, in particular if you work with financial or business data requiring a high precision, you should consider using Decimal instead. Floating Point Numbers might lead to inaccurate results as illustrated below:CREATE TABLE IF NOT EXISTS float_vs_decimal(   my_float Float64,   my_decimal Decimal64(3))Engine=MergeTreeORDER BY tuple();# Generate 1 000 000 random numbers with 2 decimal places and store them as a float and as a decimalINSERT INTO float_vs_decimal SELECT round(randCanonical(), 3) AS res, res FROM system.numbers LIMIT 1000000;SELECT sum(my_float), sum(my_decimal) FROM float_vs_decimal;\u250c\u2500\u2500\u2500\u2500\u2500\u2500sum(my_float)\u2500\u252c\u2500sum(my_decimal)\u2500\u2510\u2502 499693.60500000004 \u2502      499693.605 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518SELECT sumKahan(my_float), sumKahan(my_decimal) FROM float_vs_decimal;\u250c\u2500sumKahan(my_float)\u2500\u252c\u2500sumKahan(my_decimal)\u2500\u2510\u2502         499693.605 \u2502           499693.605 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "The equivalent types in ClickHouse and in C are given below:", "Float32 \u2014 float.Float64 \u2014 double.", "Float types in ClickHouse have the following aliases:", "Float32 \u2014 FLOAT, REAL, SINGLE.Float64 \u2014 DOUBLE, DOUBLE PRECISION.", "When creating tables, numeric parameters for floating point numbers can be set (e.g. FLOAT(12), FLOAT(15, 22), DOUBLE(12), DOUBLE(4, 18)), but ClickHouse ignores them.", "Using Floating-point Numbers\u200b", "Computations with floating-point numbers might produce a rounding error.", "SELECT 1 - 0.9", "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500minus(1, 0.9)\u2500\u2510\u2502 0.09999999999999998 \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "The result of the calculation depends on the calculation method (the processor type and architecture of the computer system).Floating-point calculations might result in numbers such as infinity (Inf) and \u201cnot-a-number\u201d (NaN). This should be taken into account when processing the results of calculations.When parsing floating-point numbers from text, the result might not be the nearest machine-representable number.", "NaN and Inf\u200b", "In contrast to standard SQL, ClickHouse supports the following categories of floating-point numbers:", "Inf \u2013 Infinity.", "SELECT 0.5 / 0", "\u250c\u2500divide(0.5, 0)\u2500\u2510\u2502            inf \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "-Inf \u2014 Negative infinity.", "SELECT -0.5 / 0", "\u250c\u2500divide(-0.5, 0)\u2500\u2510\u2502            -inf \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "NaN \u2014 Not a number.", "SELECT 0 / 0", "\u250c\u2500divide(0, 0)\u2500\u2510\u2502          nan \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "See the rules for NaN sorting in the section ORDER BY clause."], "Examples": ["CREATE TABLE IF NOT EXISTS float_vs_decimal(   my_float Float64,   my_decimal Decimal64(3))Engine=MergeTreeORDER BY tuple();# Generate 1 000 000 random numbers with 2 decimal places and store them as a float and as a decimalINSERT INTO float_vs_decimal SELECT round(randCanonical(), 3) AS res, res FROM system.numbers LIMIT 1000000;", "SELECT 1 - 0.9", "SELECT 0.5 / 0", "SELECT -0.5 / 0", "SELECT 0 / 0"], "Category": ["Float32, Float64"]}
