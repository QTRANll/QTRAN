{"HTML": ["https://clickhouse.com/docs/en/sql-reference/data-types/array"], "Title": ["Array(T)"], "Feature": ["Array(T)"], "Description": ["Array(T)", "An array of T-type items, with the starting array index as 1. T can be any data type, including an array.", "Creating an Array\u200b", "You can use a function to create an array:", "array(T)", "You can also use square brackets.", "[]", "Example of creating an array:", "SELECT array(1, 2) AS x, toTypeName(x)", "\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(array(1, 2))\u2500\u2510\u2502 [1,2] \u2502 Array(UInt8)            \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "SELECT [1, 2] AS x, toTypeName(x)", "\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName([1, 2])\u2500\u2510\u2502 [1,2] \u2502 Array(UInt8)       \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Working with Data Types\u200b", "When creating an array on the fly, ClickHouse automatically defines the argument type as the narrowest data type that can store all the listed arguments. If there are any Nullable or literal NULL values, the type of an array element also becomes Nullable.", "If ClickHouse couldn\u2019t determine the data type, it generates an exception. For instance, this happens when trying to create an array with strings and numbers simultaneously (SELECT array(1, 'a')).", "Examples of automatic data type detection:", "SELECT array(1, 2, NULL) AS x, toTypeName(x)", "\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(array(1, 2, NULL))\u2500\u2510\u2502 [1,2,NULL] \u2502 Array(Nullable(UInt8))        \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "If you try to create an array of incompatible data types, ClickHouse throws an exception:", "SELECT array(1, 'a')", "Received exception from server (version 1.1.54388):Code: 386. DB::Exception: Received from localhost:9000, 127.0.0.1. DB::Exception: There is no supertype for types UInt8, String because some of them are String/FixedString and some of them are not.", "Array Size\u200b", "It is possible to find the size of an array by using the size0 subcolumn without reading the whole column. For multi-dimensional arrays you can use sizeN-1, where N is the wanted dimension.", "Example", "Query:", "CREATE TABLE t_arr (`arr` Array(Array(Array(UInt32)))) ENGINE = MergeTree ORDER BY tuple();INSERT INTO t_arr VALUES ([[[12, 13, 0, 1],[12]]]);SELECT arr.size0, arr.size1, arr.size2 FROM t_arr;", "Result:", "\u250c\u2500arr.size0\u2500\u252c\u2500arr.size1\u2500\u252c\u2500arr.size2\u2500\u2510\u2502         1 \u2502 [2]       \u2502 [[4,1]]   \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "Reading nested subcolumns from Array\u200b", "If nested type T inside Array has subcolumns (for example, if it's a named tuple), you can read its subcolumns from an Array(T) type with the same subcolumn names. The type of a subcolumn will be Array of the type of original subcolumn.", "Example", "CREATE TABLE t_arr (arr Array(Tuple(field1 UInt32, field2 String))) ENGINE = MergeTree ORDER BY tuple();INSERT INTO t_arr VALUES ([(1, 'Hello'), (2, 'World')]), ([(3, 'This'), (4, 'is'), (5, 'subcolumn')]);SELECT arr.field1, toTypeName(arr.field1), arr.field2, toTypeName(arr.field2) from t_arr;", "\u250c\u2500arr.field1\u2500\u252c\u2500toTypeName(arr.field1)\u2500\u252c\u2500arr.field2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(arr.field2)\u2500\u2510\u2502 [1,2]      \u2502 Array(UInt32)          \u2502 ['Hello','World']         \u2502 Array(String)          \u2502\u2502 [3,4,5]    \u2502 Array(UInt32)          \u2502 ['This','is','subcolumn'] \u2502 Array(String)          \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"], "Examples": ["array(T)", "[]", "SELECT array(1, 2) AS x, toTypeName(x)", "SELECT [1, 2] AS x, toTypeName(x)", "SELECT array(1, 2, NULL) AS x, toTypeName(x)", "SELECT array(1, 'a')", "CREATE TABLE t_arr (`arr` Array(Array(Array(UInt32)))) ENGINE = MergeTree ORDER BY tuple();INSERT INTO t_arr VALUES ([[[12, 13, 0, 1],[12]]]);SELECT arr.size0, arr.size1, arr.size2 FROM t_arr;", "CREATE TABLE t_arr (arr Array(Tuple(field1 UInt32, field2 String))) ENGINE = MergeTree ORDER BY tuple();INSERT INTO t_arr VALUES ([(1, 'Hello'), (2, 'World')]), ([(3, 'This'), (4, 'is'), (5, 'subcolumn')]);SELECT arr.field1, toTypeName(arr.field1), arr.field2, toTypeName(arr.field2) from t_arr;"], "Category": ["Array(T)"]}
