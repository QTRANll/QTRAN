{
    "HTML": [
        "https://clickhouse.com/docs/en/sql-reference/functions/encryption-functions"
    ],
    "Title": [
        "encrypt"
    ],
    "Feature": [
        "encrypt('mode', 'plaintext', 'key' [, iv, aad])"
    ],
    "Description": [
        "encrypt",
        "This function encrypts data using these modes:",
        "aes-128-ecb, aes-192-ecb, aes-256-ecbaes-128-cbc, aes-192-cbc, aes-256-cbcaes-128-ofb, aes-192-ofb, aes-256-ofbaes-128-gcm, aes-192-gcm, aes-256-gcmaes-128-ctr, aes-192-ctr, aes-256-ctr",
        "Syntax",
        "encrypt('mode', 'plaintext', 'key' [, iv, aad])",
        "Arguments",
        "mode \u2014 Encryption mode. String.plaintext \u2014 Text that need to be encrypted. String.key \u2014 Encryption key. String.iv \u2014 Initialization vector. Required for -gcm modes, optional for others. String.aad \u2014 Additional authenticated data. It isn't encrypted, but it affects decryption. Works only in -gcm modes, for others would throw an exception. String.",
        "Returned value",
        "Ciphertext binary string. String."
    ],
    "Examples": [
        "CREATE TABLE encryption_test(    `comment` String,    `secret` String)ENGINE = Memory;",
        "INSERT INTO encryption_test VALUES('aes-256-ofb no IV', encrypt('aes-256-ofb', 'Secret', '12345678910121314151617181920212')),\\('aes-256-ofb no IV, different key', encrypt('aes-256-ofb', 'Secret', 'keykeykeykeykeykeykeykeykeykeyke')),\\('aes-256-ofb with IV', encrypt('aes-256-ofb', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv')),\\('aes-256-cbc no IV', encrypt('aes-256-cbc', 'Secret', '12345678910121314151617181920212'));",
        "SELECT comment, hex(secret) FROM encryption_test;",
        "INSERT INTO encryption_test VALUES('aes-256-gcm', encrypt('aes-256-gcm', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv')), \\('aes-256-gcm with AAD', encrypt('aes-256-gcm', 'Secret', '12345678910121314151617181920212', 'iviviviviviviviv', 'aad'));SELECT comment, hex(secret) FROM encryption_test WHERE comment LIKE '%gcm%';"
    ],
    "Category": [
        "Encryption Functions"
    ],
    "EffectiveSQLsRefined": [
        "CREATE TABLE encryption_test(    `comment` String,    `secret` String)ENGINE = Memory;",
        "SELECT comment, hex(secret) FROM encryption_test;",
        "SELECT comment, hex(secret) FROM encryption_test WHERE comment LIKE '%gcm%';"
    ]
}