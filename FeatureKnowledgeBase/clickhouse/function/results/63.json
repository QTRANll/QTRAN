{
    "HTML": [
        "https://clickhouse.com/docs/en/sql-reference/functions/array-functions"
    ],
    "Title": [
        "arraySort([func,] arr, ...)"
    ],
    "Feature": [
        "arraySort([func,] arr, ...)"
    ],
    "Description": [
        "arraySort([func,] arr, ...)",
        "Sorts the elements of the arr array in ascending order. If the func function is specified, sorting order is determined by the result of the func function applied to the elements of the array. If func accepts multiple arguments, the arraySort function is passed several arrays that the arguments of func will correspond to. Detailed examples are shown at the end of arraySort description.",
        "Example of integer values sorting:",
        "SELECT arraySort([1, 3, 3, 0]);",
        "\u250c\u2500arraySort([1, 3, 3, 0])\u2500\u2510\u2502 [0,1,3,3]               \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Example of string values sorting:",
        "SELECT arraySort(['hello', 'world', '!']);",
        "\u250c\u2500arraySort(['hello', 'world', '!'])\u2500\u2510\u2502 ['!','hello','world']              \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Consider the following sorting order for the NULL, NaN and Inf values:",
        "SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);",
        "\u250c\u2500arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf])\u2500\u2510\u2502 [-inf,-4,1,2,3,inf,nan,nan,NULL,NULL]                     \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "-Inf values are first in the array.NULL values are last in the array.NaN values are right before NULL.Inf values are right before NaN.",
        "Note that arraySort is a higher-order function. You can pass a lambda function to it as the first argument. In this case, sorting order is determined by the result of the lambda function applied to the elements of the array.",
        "Let\u2019s consider the following example:",
        "SELECT arraySort((x) -> -x, [1, 2, 3]) as res;",
        "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [3,2,1] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "For each element of the source array, the lambda function returns the sorting key, that is, [1 \u2013> -1, 2 \u2013> -2, 3 \u2013> -3]. Since the arraySort function sorts the keys in ascending order, the result is [3, 2, 1]. Thus, the (x) \u2013> -x lambda function sets the descending order in a sorting.",
        "The lambda function can accept multiple arguments. In this case, you need to pass the arraySort function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:",
        "SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;",
        "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 ['world', 'hello'] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "Here, the elements that are passed in the second array ([2, 1]) define a sorting key for the corresponding element from the source array ([\u2018hello\u2019, \u2018world\u2019]), that is, [\u2018hello\u2019 \u2013> 2, \u2018world\u2019 \u2013> 1]. Since the lambda function does not use x, actual values of the source array do not affect the order in the result. So, \u2018hello\u2019 will be the second element in the result, and \u2018world\u2019 will be the first.",
        "Other examples are shown below.",
        "SELECT arraySort((x, y) -> y, [0, 1, 2], ['c', 'b', 'a']) as res;",
        "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [2,1,0] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "SELECT arraySort((x, y) -> -y, [0, 1, 2], [1, 2, 3]) as res;",
        "\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\u2502 [2,1,0] \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
        "NoteTo improve sorting efficiency, the Schwartzian transform is used."
    ],
    "Examples": [
        "SELECT arraySort([1, 3, 3, 0]);",
        "SELECT arraySort(['hello', 'world', '!']);",
        "SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);",
        "SELECT arraySort((x) -> -x, [1, 2, 3]) as res;",
        "SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;",
        "SELECT arraySort((x, y) -> y, [0, 1, 2], ['c', 'b', 'a']) as res;",
        "SELECT arraySort((x, y) -> -y, [0, 1, 2], [1, 2, 3]) as res;"
    ],
    "Category": [
        "Arrays Functions"
    ]
}