{
    "HTML": [
        "https://clickhouse.com/docs/en/sql-reference/functions/json-functions"
    ],
    "Title": [
        "simpleJSON (visitParam) functions"
    ],
    "Feature": [
        "simpleJSONHas(json, field_name)"
    ],
    "Description": [
        "simpleJSON (visitParam) functions",
        "ClickHouse has special functions for working with simplified JSON. All these JSON functions are based on strong assumptions about what the JSON can be. They try to do as little as possible to get the job done as quickly as possible.",
        "The following assumptions are made:",
        "The field name (function argument) must be a constant.The field name is somehow canonically encoded in JSON. For example: simpleJSONHas('{\"abc\":\"def\"}', 'abc') = 1, but simpleJSONHas('{\"\\\\u0061\\\\u0062\\\\u0063\":\"def\"}', 'abc') = 0Fields are searched for on any nesting level, indiscriminately. If there are multiple matching fields, the first occurrence is used.The JSON does not have space characters outside of string literals.",
        "simpleJSONHas",
        "Checks whether there is a field named field_name.  The result is UInt8.",
        "Syntax",
        "simpleJSONHas(json, field_name)",
        "Alias: visitParamHas.",
        "Parameters",
        "json \u2014 The JSON in which the field is searched for. Stringfield_name \u2014 The name of the field to search for. String literal",
        "Returned value",
        "Returns 1 if the field exists, 0 otherwise. UInt8."
    ],
    "Examples": [
        "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"true\",\"qux\":1}');SELECT simpleJSONHas(json, 'foo') FROM jsons;SELECT simpleJSONHas(json, 'bar') FROM jsons;",
        "simpleJSONExtractUInt(json, field_name)",
        "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractUInt(json, 'foo') FROM jsons ORDER BY json;",
        "simpleJSONExtractInt(json, field_name)",
        "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":-3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractInt(json, 'foo') FROM jsons ORDER BY json;",
        "simpleJSONExtractFloat(json, field_name)",
        "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":-3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractFloat(json, 'foo') FROM jsons ORDER BY json;",
        "simpleJSONExtractBool(json, field_name)",
        "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":false,\"bar\":true}');INSERT INTO jsons VALUES ('{\"foo\":\"true\",\"qux\":1}');SELECT simpleJSONExtractBool(json, 'bar') FROM jsons ORDER BY json;SELECT simpleJSONExtractBool(json, 'foo') FROM jsons ORDER BY json;",
        "simpleJSONExtractRaw(json, field_name)",
        "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');INSERT INTO jsons VALUES ('{\"foo\":-3.4}');INSERT INTO jsons VALUES ('{\"foo\":5}');INSERT INTO jsons VALUES ('{\"foo\":{\"def\":[1,2,3]}}');INSERT INTO jsons VALUES ('{\"baz\":2}');SELECT simpleJSONExtractRaw(json, 'foo') FROM jsons ORDER BY json;",
        "simpleJSONExtractString(json, field_name)",
        "CREATE TABLE jsons(    `json` String)ENGINE = Memory;INSERT INTO jsons VALUES ('{\"foo\":\"\\\\n\\\\u0000\"}');INSERT INTO jsons VALUES ('{\"foo\":\"\\\\u263\"}');INSERT INTO jsons VALUES ('{\"foo\":\"\\\\u263a\"}');INSERT INTO jsons VALUES ('{\"foo\":\"hello}');SELECT simpleJSONExtractString(json, 'foo') FROM jsons ORDER BY json;"
    ],
    "Category": [
        "JSON Functions"
    ],
    "EffectiveSQLsRefined": [
        "CREATE TABLE jsons(    `json` String)ENGINE = Memory;",
        "SELECT simpleJSONHas(json, 'foo') FROM jsons;",
        "SELECT simpleJSONHas(json, 'bar') FROM jsons;",
        "INSERT INTO jsons VALUES ('{\"foo\":\"4e3\"}');",
        "INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');",
        "SELECT simpleJSONExtractUInt(json, 'foo') FROM jsons ORDER BY json;",
        "INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');",
        "INSERT INTO jsons VALUES ('{\"foo\":-3.4}');",
        "INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');",
        "SELECT simpleJSONExtractInt(json, 'foo') FROM jsons ORDER BY json;",
        "INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');",
        "INSERT INTO jsons VALUES ('{\"foo\":-3.4}');",
        "INSERT INTO jsons VALUES ('{\"foo\":\"not1number\"}');",
        "SELECT simpleJSONExtractFloat(json, 'foo') FROM jsons ORDER BY json;",
        "SELECT simpleJSONExtractBool(json, 'bar') FROM jsons ORDER BY json;",
        "SELECT simpleJSONExtractBool(json, 'foo') FROM jsons ORDER BY json;",
        "INSERT INTO jsons VALUES ('{\"foo\":\"-4e3\"}');",
        "INSERT INTO jsons VALUES ('{\"foo\":-3.4}');",
        "INSERT INTO jsons VALUES ('{\"foo\":{\"def\":[1,2,3]}}');",
        "SELECT simpleJSONExtractRaw(json, 'foo') FROM jsons ORDER BY json;",
        "INSERT INTO jsons VALUES ('{\"foo\":\"\\\\n\\\\u0000\"}');",
        "INSERT INTO jsons VALUES ('{\"foo\":\"\\\\u263\"}');",
        "INSERT INTO jsons VALUES ('{\"foo\":\"\\\\u263a\"}');",
        "INSERT INTO jsons VALUES ('{\"foo\":\"hello}');",
        "SELECT simpleJSONExtractString(json, 'foo') FROM jsons ORDER BY json;"
    ]
}