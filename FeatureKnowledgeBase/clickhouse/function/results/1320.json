{
    "HTML": [
        "https://clickhouse.com/docs/en/sql-reference/window-functions/lagInFrame"
    ],
    "Title": [
        "lagInFrame"
    ],
    "Feature": [
        "lagInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"
    ],
    "Description": [
        "lagInFrame",
        "Returns a value evaluated at the row that is at a specified physical offset row before the current row within the ordered frame.",
        "Syntax",
        "lagInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])",
        "For more detail on window function syntax see: Window Functions - Syntax.",
        "Parameters",
        "x \u2014 Column name. offset \u2014 Offset to apply. (U)Int*. (Optional - 1 by default).default \u2014 Value to return if calculated row exceeds the boundaries of the window frame. (Optional - default value of column type when omitted).",
        "Returned value",
        "Value evaluated at the row that is at a specified physical offset before the current row within the ordered frame."
    ],
    "Examples": [
        "CREATE TABLE stock_prices(    `date`   Date,    `open`   Float32, -- opening price    `high`   Float32, -- daily high    `low`    Float32, -- daily low    `close`  Float32, -- closing price    `volume` UInt32   -- trade volume)Engine = Memory;INSERT INTO stock_prices FORMAT Values    ('2024-06-03', 113.62, 115.00, 112.00, 115.00, 438392000),    ('2024-06-04', 115.72, 116.60, 114.04, 116.44, 403324000),    ('2024-06-05', 118.37, 122.45, 117.47, 122.44, 528402000),    ('2024-06-06', 124.05, 125.59, 118.32, 121.00, 664696000),    ('2024-06-07', 119.77, 121.69, 118.02, 120.89, 412386000);",
        "SELECT    date,    close,    lagInFrame(close, 1, close) OVER (ORDER BY date ASC) AS previous_day_close,    COALESCE(ROUND(close - previous_day_close, 2)) AS delta,    COALESCE(ROUND((delta / previous_day_close) * 100, 2)) AS percent_changeFROM stock_pricesORDER BY date DESC;"
    ],
    "Category": [
        "Window Functions"
    ],
    "EffectiveSQLsRefined": []
}