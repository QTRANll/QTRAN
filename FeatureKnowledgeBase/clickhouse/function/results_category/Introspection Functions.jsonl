{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["addressToLine"], "Feature": ["addressToLine(address_of_binary_instruction)"], "Description": ["addressToLine", "Converts virtual memory address inside ClickHouse server process to the filename and the line number in ClickHouse source code.", "If you use official ClickHouse packages, you need to install the clickhouse-common-static-dbg package.", "Syntax", "addressToLine(address_of_binary_instruction)", "Arguments", "address_of_binary_instruction (UInt64) \u2014 Address of instruction in a running process.", "Returned value", "Source code filename and the line number in this file delimited by colon.\nFor example, /build/obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:199, where 199 is a line number.Name of a binary, if the function couldn\u2019t find the debug information.Empty string, if the address is not valid.", "Type: String."], "Examples": ["SET allow_introspection_functions=1;", "SELECT * FROM system.trace_log LIMIT 1 \\G;", "SELECT addressToLine(94784076370703) \\G;", "SELECT    arrayStringConcat(arrayMap(x -> addressToLine(x), trace), '\\n') AS trace_source_code_linesFROM system.trace_logLIMIT 1\\G"], "Category": ["Introspection Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["addressToLineWithInlines"], "Feature": ["addressToLineWithInlines(address_of_binary_instruction)"], "Description": ["addressToLineWithInlines", "Similar to addressToLine, but returns an Array with all inline functions. As a result of this, it is slower than addressToLine.", "NoteIf you use official ClickHouse packages, you need to install the clickhouse-common-static-dbg package.", "Syntax", "addressToLineWithInlines(address_of_binary_instruction)", "Arguments", "address_of_binary_instruction (UInt64) \u2014 Address of instruction in a running process.", "Returned value", "An array whose first element is the source code filename and line number in the file delimited by a colon. From the second element onwards, inline functions' source code filenames, line numbers and function names are listed. If the function couldn\u2019t find the debug information, then an array with a single element equal to the name of the binary is returned, otherwise an empty array is returned if the address is not valid. Array(String)."], "Examples": ["SET allow_introspection_functions=1;", "SELECT addressToLineWithInlines(531055181::UInt64);", "SELECT    ta, addressToLineWithInlines(arrayJoin(trace) as ta)FROM system.trace_logWHERE    query_id = '5e173544-2020-45de-b645-5deebe2aae54';"], "Category": ["Introspection Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["addressToSymbol"], "Feature": ["addressToSymbol(address_of_binary_instruction)"], "Description": ["addressToSymbol", "Converts virtual memory address inside ClickHouse server process to the symbol from ClickHouse object files.", "Syntax", "addressToSymbol(address_of_binary_instruction)", "Arguments", "address_of_binary_instruction (UInt64) \u2014 Address of instruction in a running process.", "Returned value", "Symbol from ClickHouse object files. String.Empty string, if the address is not valid. String."], "Examples": ["SET allow_introspection_functions=1;", "SELECT * FROM system.trace_log LIMIT 1 \\G;", "SELECT addressToSymbol(94138803686098) \\G;", "SELECT    arrayStringConcat(arrayMap(x -> addressToSymbol(x), trace), '\\n') AS trace_symbolsFROM system.trace_logLIMIT 1\\G"], "Category": ["Introspection Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["demangle"], "Feature": ["demangle(symbol)"], "Description": ["demangle", "Converts a symbol that you can get using the addressToSymbol function to the C++ function name.", "Syntax", "demangle(symbol)", "Arguments", "symbol (String) \u2014 Symbol from an object file.", "Returned value", "Name of the C++ function, or an empty string if the symbol is not valid. String."], "Examples": ["SET allow_introspection_functions=1;", "SELECT * FROM system.trace_log LIMIT 1 \\G;", "SELECT demangle(addressToSymbol(94138803686098)) \\G;", "SELECT    arrayStringConcat(arrayMap(x -> demangle(addressToSymbol(x)), trace), '\\n') AS trace_functionsFROM system.trace_logLIMIT 1\\G"], "Category": ["Introspection Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["tid"], "Feature": ["tid()"], "Description": ["tid", "Returns id of the thread, in which current Block is processed.", "Syntax", "tid()", "Returned value", "Current thread id. Uint64."], "Examples": ["SELECT tid();"], "Category": ["Introspection Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/introspection"], "Title": ["logTrace"], "Feature": ["logTrace('message')"], "Description": ["logTrace", "Emits trace log message to server log for each Block.", "Syntax", "logTrace('message')", "Arguments", "message \u2014 Message that is emitted to server log. String.", "Returned value", "Always returns 0."], "Examples": ["SELECT logTrace('logTrace message');"], "Category": ["Introspection Functions"]}
