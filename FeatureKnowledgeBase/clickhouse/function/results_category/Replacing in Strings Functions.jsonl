{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["overlay"], "Feature": ["overlay(s, replace, offset[, length])"], "Description": ["overlay", "Replace part of the string input with another string replace, starting at the 1-based index offset.", "Syntax", "overlay(s, replace, offset[, length])", "Parameters", "s: A string type String.replace: A string type String.offset: An integer type Int (1-based). If offset is negative, it is counted from the end of the string s.length: Optional. An integer type Int. length specifies the length of the snippet within the input string s to be replaced. If length is not specified, the number of bytes removed from s equals the length of replace; otherwise length bytes are removed.", "Returned value", "A String data type value."], "Examples": ["SELECT overlay('My father is from Mexico.', 'mother', 4) AS res;", "SELECT overlay('My father is from Mexico.', 'dad', 4, 6) AS res;"], "Category": ["Replacing in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["overlayUTF8"], "Feature": ["overlayUTF8(s, replace, offset[, length])"], "Description": ["overlayUTF8", "Replace part of the string input with another string replace, starting at the 1-based index offset.", "Assumes that the string contains valid UTF-8 encoded text.\nIf this assumption is violated, no exception is thrown and the result is undefined.", "Syntax", "overlayUTF8(s, replace, offset[, length])", "Parameters", "s: A string type String.replace: A string type String.offset: An integer type Int (1-based). If offset is negative, it is counted from the end of the input string s.length: Optional. An integer type Int. length specifies the length of the snippet within the input string s to be replaced. If length is not specified, the number of characters removed from s equals the length of replace; otherwise length characters are removed.", "Returned value", "A String data type value."], "Examples": ["SELECT overlay('Mein Vater ist aus \u00d6sterreich.', 'der T\u00fcrkei', 20) AS res;"], "Category": ["Replacing in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["replaceOne"], "Feature": ["replaceOne(haystack, pattern, replacement)"], "Description": ["replaceOne", "Replaces the first occurrence of the substring pattern in haystack by the replacement string.", "Syntax", "replaceOne(haystack, pattern, replacement)"], "Examples": ["replaceOne(haystack, pattern, replacement)"], "Category": ["Replacing in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["replaceAll"], "Feature": ["replaceAll(haystack, pattern, replacement)"], "Description": ["replaceAll", "Replaces all occurrences of the substring pattern in haystack by the replacement string.", "Syntax", "replaceAll(haystack, pattern, replacement)", "Alias: replace."], "Examples": ["replaceAll(haystack, pattern, replacement)"], "Category": ["Replacing in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["replaceRegexpOne"], "Feature": ["replaceRegexpOne(haystack, pattern, replacement)"], "Description": ["replaceRegexpOne", "Replaces the first occurrence of the substring matching the regular expression pattern (in re2 syntax) in haystack by the replacement string.", "replacement can contain substitutions \\0-\\9.\nSubstitutions \\1-\\9 correspond to the 1st to 9th capturing group (submatch), substitution \\0 corresponds to the entire match.", "To use a verbatim \\ character in the pattern or replacement strings, escape it using \\.\nAlso keep in mind that string literals require extra escaping.", "Syntax", "replaceRegexpOne(haystack, pattern, replacement)"], "Examples": ["SELECT DISTINCT    EventDate,    replaceRegexpOne(toString(EventDate), '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})', '\\\\2/\\\\3/\\\\1') AS resFROM test.hitsLIMIT 7FORMAT TabSeparated", "SELECT replaceRegexpOne('Hello, World!', '.*', '\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0') AS res"], "Category": ["Replacing in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["replaceRegexpAll"], "Feature": ["replaceRegexpAll"], "Description": ["replaceRegexpAll", "Like replaceRegexpOne but replaces all occurrences of the pattern.", "Alias: REGEXP_REPLACE."], "Examples": ["SELECT replaceRegexpAll('Hello, World!', '.', '\\\\0\\\\0') AS res", "SELECT replaceRegexpAll('Hello, World!', '^', 'here: ') AS res"], "Category": ["Replacing in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["regexpQuoteMeta"], "Feature": ["regexpQuoteMeta(s)"], "Description": ["regexpQuoteMeta", "Adds a backslash before these characters with special meaning in regular expressions: \\0, \\\\, |, (, ), ^, $, ., [, ], ?, *, +, {, :, -.", "This implementation slightly differs from re2::RE2::QuoteMeta. It escapes zero byte as \\0 instead of \\x00 and it escapes only required characters.\nFor more information, see RE2", "Syntax", "regexpQuoteMeta(s)"], "Examples": ["regexpQuoteMeta(s)"], "Category": ["Replacing in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["format"], "Feature": ["format(pattern, s0, s1, ...)"], "Description": ["format", "Format the pattern string with the values (strings, integers, etc.) listed in the arguments, similar to formatting in Python. The pattern string can contain replacement fields surrounded by curly braces {}. Anything not contained in braces is considered literal text and copied verbatim into the output. Literal brace character can be escaped by two braces: {{ '{{' }} and {{ '}}' }}. Field names can be numbers (starting from zero) or empty (then they are implicitly given monotonically increasing numbers).", "Syntax", "format(pattern, s0, s1, ...)"], "Examples": ["SELECT format('{1} {0} {1}', 'World', 'Hello')", "SELECT format('{} {}', 'Hello', 'World')"], "Category": ["Replacing in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["translate"], "Feature": ["translate(s, from, to)"], "Description": ["translate", "Replaces characters in the string s using a one-to-one character mapping defined by from and to strings. from and to must be constant ASCII strings of the same size. Non-ASCII characters in the original string are not modified.", "Syntax", "translate(s, from, to)"], "Examples": ["SELECT translate('Hello, World!', 'delor', 'DELOR') AS res"], "Category": ["Replacing in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["translateUTF8"], "Feature": ["translateUTF8(s, from, to)"], "Description": ["translateUTF8", "Like translate but assumes s, from and to are UTF-8 encoded strings.", "Syntax", "translateUTF8(s, from, to)", "Parameters", "s: A string type String.from: A string type String.to: A string type String.", "Returned value", "A String data type value."], "Examples": ["SELECT translateUTF8('M\u00fcnchener Stra\u00dfe', '\u00fc\u00df', 'us') AS res;"], "Category": ["Replacing in Strings Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/string-replace-functions"], "Title": ["printf"], "Feature": ["printf(format, arg1, arg2, ...)"], "Description": ["printf", "The printf function formats the given string with the values (strings, integers, floating-points etc.) listed in the arguments, similar to printf function in C++. The format string can contain format specifiers starting with % character. Anything not contained in % and the following format specifier is considered literal text and copied verbatim into the output. Literal % character can be escaped by %%.", "Syntax", "printf(format, arg1, arg2, ...)"], "Examples": ["select printf('%%%s %s %d', 'Hello', 'World', 2024);"], "Category": ["Replacing in Strings Functions"]}
