{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/first_value"], "Title": ["first_value"], "Feature": ["first_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["first_value", "Returns the first value evaluated within its ordered frame. By default, NULL arguments are skipped, however the RESPECT NULLS modifier can be used to override this behaviour.", "Syntax", "first_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "Alias: any.", "NoteUsing the optional modifier RESPECT NULLS after first_value(column_name) will ensure that NULL arguments are not skipped.\nSee NULL processing for more information.", "For more detail on window function syntax see: Window Functions - Syntax.", "Returned value", "The first value evaluated within its ordered frame."], "Examples": ["DROP TABLE IF EXISTS salaries;CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 196000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 100000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 180000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary,        first_value(player) OVER (ORDER BY salary DESC) AS highest_paid_playerFROM salaries;"], "Category": ["Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/last_value"], "Title": ["last_value"], "Feature": ["last_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["last_value", "Returns the last value evaluated within its ordered frame. By default, NULL arguments are skipped, however the RESPECT NULLS modifier can be used to override this behaviour.", "Syntax", "last_value (column_name) [[RESPECT NULLS] | [IGNORE NULLS]]  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "Alias: anyLast.", "NoteUsing the optional modifier RESPECT NULLS after first_value(column_name) will ensure that NULL arguments are not skipped.\nSee NULL processing for more information.", "For more detail on window function syntax see: Window Functions - Syntax.", "Returned value", "The last value evaluated within its ordered frame."], "Examples": ["DROP TABLE IF EXISTS salaries;CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 196000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 100000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 180000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary,       last_value(player) OVER (ORDER BY salary DESC RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS lowest_paid_playerFROM salaries;"], "Category": ["Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/row_number"], "Title": ["row_number"], "Feature": ["row_number (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["row_number", "Numbers the current row within its partition starting from 1.", "Syntax", "row_number (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Returned value", "A number for the current row within its partition. UInt64."], "Examples": ["CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M');", "SELECT player, salary,        row_number() OVER (ORDER BY salary DESC) AS row_numberFROM salaries;"], "Category": ["Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/nth_value"], "Title": ["nth_value"], "Feature": ["nth_value (x, offset)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["nth_value", "Returns the first non-NULL value evaluated against the nth row (offset) in its ordered frame.", "Syntax", "nth_value (x, offset)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Parameters", "x \u2014 Column name.offset \u2014 nth row to evaluate current row against.", "Returned value", "The first non-NULL value evaluated against the nth row (offset) in its ordered frame."], "Examples": ["DROP TABLE IF EXISTS salaries;CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 100000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 180000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary, nth_value(player,3) OVER(ORDER BY salary DESC) AS third_highest_salary FROM salaries;"], "Category": ["Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/rank"], "Title": ["rank"], "Feature": ["rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["rank", "Ranks the current row within its partition with gaps. In other words, if the value of any row it encounters is equal to the value of a previous row then it will receive the same rank as that previous row.\nThe rank of the next row is then equal to the rank of the previous row plus a gap equal to the number of times the previous rank was given.", "The dense_rank function provides the same behaviour but without gaps in ranking. ", "Syntax", "rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Returned value", "A number for the current row within its partition, including gaps. UInt64."], "Examples": ["CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary,        rank() OVER (ORDER BY salary DESC) AS rankFROM salaries;"], "Category": ["Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/dense_rank"], "Title": ["dense_rank"], "Feature": ["dense_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["dense_rank", "Ranks the current row within its partition without gaps. In other words, if the value of any new row encountered is equal to the value of one of the previous rows then it will receive the next successive rank without any gaps in ranking.", "The rank function provides the same behaviour, but with gaps in ranking.", "Syntax", "Alias: denseRank (case-sensitive)", "dense_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Returned value", "A number for the current row within its partition, without gaps in ranking. UInt64."], "Examples": ["CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary,        dense_rank() OVER (ORDER BY salary DESC) AS dense_rankFROM salaries;"], "Category": ["Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/percent_rank"], "Title": ["percent_rank"], "Feature": ["percent_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING]] | [window_name])FROM table_nameWINDOW window_name as ([PARTITION BY grouping_column] [ORDER BY sorting_column] RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)"], "Description": ["percent_rank", "returns the relative rank (i.e. percentile) of rows within a window partition.", "Syntax", "Alias: percentRank (case-sensitive)", "percent_rank (column_name)  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING]] | [window_name])FROM table_nameWINDOW window_name as ([PARTITION BY grouping_column] [ORDER BY sorting_column] RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)", "The default and required window frame definition is RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.", "For more detail on window function syntax see: Window Functions - Syntax."], "Examples": ["CREATE TABLE salaries(    `team` String,    `player` String,    `salary` UInt32,    `position` String)Engine = Memory;INSERT INTO salaries FORMAT Values    ('Port Elizabeth Barbarians', 'Gary Chen', 195000, 'F'),    ('New Coreystad Archdukes', 'Charles Juarez', 190000, 'F'),    ('Port Elizabeth Barbarians', 'Michael Stanley', 150000, 'D'),    ('New Coreystad Archdukes', 'Scott Harrison', 150000, 'D'),    ('Port Elizabeth Barbarians', 'Robert George', 195000, 'M'),    ('South Hampton Seagulls', 'Douglas Benson', 150000, 'M'),    ('South Hampton Seagulls', 'James Henderson', 140000, 'M');", "SELECT player, salary,        percent_rank() OVER (ORDER BY salary DESC) AS percent_rankFROM salaries;"], "Category": ["Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/lagInFrame"], "Title": ["lagInFrame"], "Feature": ["lagInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["lagInFrame", "Returns a value evaluated at the row that is at a specified physical offset row before the current row within the ordered frame.", "Syntax", "lagInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Parameters", "x \u2014 Column name. offset \u2014 Offset to apply. (U)Int*. (Optional - 1 by default).default \u2014 Value to return if calculated row exceeds the boundaries of the window frame. (Optional - default value of column type when omitted).", "Returned value", "Value evaluated at the row that is at a specified physical offset before the current row within the ordered frame."], "Examples": ["CREATE TABLE stock_prices(    `date`   Date,    `open`   Float32, -- opening price    `high`   Float32, -- daily high    `low`    Float32, -- daily low    `close`  Float32, -- closing price    `volume` UInt32   -- trade volume)Engine = Memory;INSERT INTO stock_prices FORMAT Values    ('2024-06-03', 113.62, 115.00, 112.00, 115.00, 438392000),    ('2024-06-04', 115.72, 116.60, 114.04, 116.44, 403324000),    ('2024-06-05', 118.37, 122.45, 117.47, 122.44, 528402000),    ('2024-06-06', 124.05, 125.59, 118.32, 121.00, 664696000),    ('2024-06-07', 119.77, 121.69, 118.02, 120.89, 412386000);", "SELECT    date,    close,    lagInFrame(close, 1, close) OVER (ORDER BY date ASC) AS previous_day_close,    COALESCE(ROUND(close - previous_day_close, 2)) AS delta,    COALESCE(ROUND((delta / previous_day_close) * 100, 2)) AS percent_changeFROM stock_pricesORDER BY date DESC;"], "Category": ["Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/window-functions/leadInFrame"], "Title": ["leadInFrame"], "Feature": ["leadInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])"], "Description": ["leadInFrame", "Returns a value evaluated at the row that is offset rows after the current row within the ordered frame.", "Syntax", "leadInFrame(x[, offset[, default]])  OVER ([[PARTITION BY grouping_column] [ORDER BY sorting_column]         [ROWS or RANGE expression_to_bound_rows_withing_the_group]] | [window_name])FROM table_nameWINDOW window_name as ([[PARTITION BY grouping_column] [ORDER BY sorting_column])", "For more detail on window function syntax see: Window Functions - Syntax.", "Parameters", "x \u2014 Column name.offset \u2014 Offset to apply. (U)Int*. (Optional - 1 by default).default \u2014 Value to return if calculated row exceeds the boundaries of the window frame. (Optional - default value of column type when omitted).", "Returned value", "value evaluated at the row that is offset rows after the current row within the ordered frame."], "Examples": ["CREATE OR REPLACE VIEW nobel_prize_laureates AS FROM file('nobel_laureates_data.csv') SELECT *;", "FROM nobel_prize_laureates SELECT fullName, leadInFrame(year, 1, year) OVER (PARTITION BY category ORDER BY year) AS year, category, motivation WHERE category == 'physics' ORDER BY year DESC LIMIT 9;"], "Category": ["Window Functions"]}
