{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["tumble"], "Feature": ["tumble(time_attr, interval [, timezone])"], "Description": ["tumble", "A tumbling time window assigns records to non-overlapping, continuous windows with a fixed duration (interval).", "Syntax", "tumble(time_attr, interval [, timezone])", "Arguments", "time_attr \u2014 Date and time. DateTime.interval \u2014 Window interval in Interval.timezone \u2014 Timezone name (optional).", "Returned values", "The inclusive lower and exclusive upper bound of the corresponding tumbling window. Tuple(DateTime, DateTime)."], "Examples": ["SELECT tumble(now(), toIntervalDay('1'));"], "Category": ["Time Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["tumbleStart"], "Feature": ["tumbleStart(time_attr, interval [, timezone]);"], "Description": ["tumbleStart", "Returns the inclusive lower bound of the corresponding tumbling window.", "Syntax", "tumbleStart(time_attr, interval [, timezone]);", "Arguments", "time_attr \u2014 Date and time. DateTime.interval \u2014 Window interval in Interval.timezone \u2014 Timezone name (optional).", "The parameters above can also be passed to the function as a tuple.", "Returned values", "The inclusive lower bound of the corresponding tumbling window. DateTime, Tuple or UInt32."], "Examples": ["SELECT tumbleStart(now(), toIntervalDay('1'));"], "Category": ["Time Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["tumbleEnd"], "Feature": ["tumbleEnd(time_attr, interval [, timezone]);"], "Description": ["tumbleEnd", "Returns the exclusive upper bound of the corresponding tumbling window.", "Syntax", "tumbleEnd(time_attr, interval [, timezone]);", "Arguments", "time_attr \u2014 Date and time. DateTime.interval \u2014 Window interval in Interval.timezone \u2014 Timezone name (optional).", "The parameters above can also be passed to the function as a tuple.", "Returned values", "The inclusive lower bound of the corresponding tumbling window. DateTime, Tuple or UInt32."], "Examples": ["SELECT tumbleEnd(now(), toIntervalDay('1'));"], "Category": ["Time Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["hop"], "Feature": ["hop(time_attr, hop_interval, window_interval [, timezone])"], "Description": ["hop", "A hopping time window has a fixed duration (window_interval) and hops by a specified hop interval (hop_interval). If the hop_interval is smaller than the window_interval, hopping windows are overlapping. Thus, records can be assigned to multiple windows.", "hop(time_attr, hop_interval, window_interval [, timezone])", "Arguments", "time_attr \u2014 Date and time. DateTime.hop_interval \u2014 Positive Hop interval. Interval.window_interval \u2014 Positive Window interval. Interval.timezone \u2014 Timezone name (optional).", "Returned values", "The inclusive lower and exclusive upper bound of the corresponding hopping window. Tuple(DateTime, DateTime)`.", "NoteSince one record can be assigned to multiple hop windows, the function only returns the bound of the first window when hop function is used without WINDOW VIEW."], "Examples": ["SELECT hop(now(), INTERVAL '1' DAY, INTERVAL '2' DAY);"], "Category": ["Time Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["hopStart"], "Feature": ["hopStart(time_attr, hop_interval, window_interval [, timezone]);"], "Description": ["hopStart", "Returns the inclusive lower bound of the corresponding hopping window.", "Syntax", "hopStart(time_attr, hop_interval, window_interval [, timezone]);", "Arguments", "time_attr \u2014 Date and time. DateTime.hop_interval \u2014 Positive Hop interval. Interval.window_interval \u2014 Positive Window interval. Interval.timezone \u2014 Timezone name (optional).", "The parameters above can also be passed to the function as a tuple.", "Returned values", "The inclusive lower bound of the corresponding hopping window. DateTime, Tuple or UInt32.", "NoteSince one record can be assigned to multiple hop windows, the function only returns the bound of the first window when hop function is used without WINDOW VIEW."], "Examples": ["SELECT hopStart(now(), INTERVAL '1' DAY, INTERVAL '2' DAY);"], "Category": ["Time Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["hopEnd"], "Feature": ["hopEnd(time_attr, hop_interval, window_interval [, timezone]);"], "Description": ["hopEnd", "Returns the exclusive upper bound of the corresponding hopping window.", "Syntax", "hopEnd(time_attr, hop_interval, window_interval [, timezone]);", "Arguments", "time_attr \u2014 Date and time. DateTime.hop_interval \u2014 Positive Hop interval. Interval.window_interval \u2014 Positive Window interval. Interval.timezone \u2014 Timezone name (optional).", "The parameters above can also be passed to the function as a tuple.", "Returned values", "The exclusive upper bound of the corresponding hopping window. DateTime, Tuple or UInt32.", "NoteSince one record can be assigned to multiple hop windows, the function only returns the bound of the first window when hop function is used without WINDOW VIEW."], "Examples": ["SELECT hopEnd(now(), INTERVAL '1' DAY, INTERVAL '2' DAY);"], "Category": ["Time Window Functions"]}
{"HTML": ["https://clickhouse.com/docs/en/sql-reference/functions/time-window-functions"], "Title": ["Related content"], "Feature": ["Related content"], "Description": ["Related content", "Blog: Working with time series data in ClickHouse"], "Examples": [], "Category": ["Time Window Functions"]}
