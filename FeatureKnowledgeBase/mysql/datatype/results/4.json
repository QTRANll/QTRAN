{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/numeric-type-attributes.html"
    ],
    "Title": [
        "13.1.6 Numeric Type Attributes"
    ],
    "Feature": [
        "13.1.6 Numeric Type Attributes"
    ],
    "Description": [
        "\n\n\n\n13.1.6\u00a0Numeric Type Attributes\n\n\n\n\n        MySQL supports an extension for optionally specifying the\n        display width of integer data types in parentheses following the\n        base keyword for the type. For example,\n        INT(4) specifies an\n        INT with a display width of four\n        digits. This optional display width may be used by applications\n        to display integer values having a width less than the width\n        specified for the column by left-padding them with spaces. (That\n        is, this width is present in the metadata returned with result\n        sets. Whether it is used is up to the application.)\n      \n        The display width does not constrain the\n        range of values that can be stored in the column. Nor does it\n        prevent values wider than the column display width from being\n        displayed correctly. For example, a column specified as\n        SMALLINT(3) has the usual\n        SMALLINT range of\n        -32768 to 32767, and\n        values outside the range permitted by three digits are displayed\n        in full using more than three digits.\n      \n        When used in conjunction with the optional (nonstandard)\n        ZEROFILL attribute, the default padding of\n        spaces is replaced with zeros. For example, for a column\n        declared as INT(4) ZEROFILL, a\n        value of 5 is retrieved as\n        0005.\n\n\n\nNote\n\n\n          The ZEROFILL attribute is ignored for\n          columns involved in expressions or\n          UNION queries.\n        \n          If you store values larger than the display width in an\n          integer column that has the ZEROFILL\n          attribute, you may experience problems when MySQL generates\n          temporary tables for some complicated joins. In these cases,\n          MySQL assumes that the data values fit within the column\n          display width.\n\n\n\n        As of MySQL 8.0.17, the ZEROFILL attribute is\n        deprecated for numeric data types, as is the display width\n        attribute for integer data types. You should expect support for\n        ZEROFILL and display widths for integer data\n        types to be removed in a future version of MySQL. Consider using\n        an alternative means of producing the effect of these\n        attributes. For example, applications can use the\n        LPAD() function to zero-pad\n        numbers up to the desired width, or they can store the formatted\n        numbers in CHAR columns.\n      \n        All integer types can have an optional (nonstandard)\n        UNSIGNED attribute. An unsigned type can be\n        used to permit only nonnegative numbers in a column or when you\n        need a larger upper numeric range for the column. For example,\n        if an INT column is\n        UNSIGNED, the size of the column's range is\n        the same but its endpoints shift up, from\n        -2147483648 and 2147483647\n        to 0 and 4294967295.\n      \n        Floating-point and fixed-point types also can be\n        UNSIGNED. As with integer types, this\n        attribute prevents negative values from being stored in the\n        column. Unlike the integer types, the upper range of column\n        values remains the same. As of MySQL 8.0.17, the\n        UNSIGNED attribute is deprecated for columns\n        of type FLOAT,\n        DOUBLE, and\n        DECIMAL (and any synonyms) and\n        you should expect support for it to be removed in a future\n        version of MySQL. Consider using a simple\n        CHECK constraint instead for such columns.\n      \n        If you specify ZEROFILL for a numeric column,\n        MySQL automatically adds the UNSIGNED\n        attribute.\n      \n        Integer or floating-point data types can have the\n        AUTO_INCREMENT attribute. When you insert a\n        value of NULL into an indexed\n        AUTO_INCREMENT column, the column is set to\n        the next sequence value. Typically this is\n        value+1, where\n        value is the largest value for the\n        column currently in the table.\n        (AUTO_INCREMENT sequences begin with\n        1.)\n      \n        Storing 0 into an\n        AUTO_INCREMENT column has the same effect as\n        storing NULL, unless the\n        NO_AUTO_VALUE_ON_ZERO SQL mode\n        is enabled.\n      \n        Inserting NULL to generate\n        AUTO_INCREMENT values requires that the\n        column be declared NOT NULL. If the column is\n        declared NULL, inserting\n        NULL stores a NULL. When\n        you insert any other value into an\n        AUTO_INCREMENT column, the column is set to\n        that value and the sequence is reset so that the next\n        automatically generated value follows sequentially from the\n        inserted value.\n      \n        Negative values for AUTO_INCREMENT columns\n        are not supported.\n      \nCHECK constraints cannot refer to columns\n        that have the AUTO_INCREMENT attribute, nor\n        can the AUTO_INCREMENT attribute be added to\n        existing columns that are used in CHECK\n        constraints.\n      \n        As of MySQL 8.0.17, AUTO_INCREMENT support is\n        deprecated for FLOAT and\n        DOUBLE columns; you should expect\n        it to be removed in a future version of MySQL. Consider removing\n        the AUTO_INCREMENT attribute from such\n        columns, or convert them to an integer type.\n\n"
    ],
    "Examples": [],
    "Category": [
        "Numeric Type Attributes"
    ],
    "EffectiveSQLsRefined": [],
    "EffectiveSQLsGenerated": [
        "CREATE TABLE example_table (id INT(4) UNSIGNED AUTO_INCREMENT, value INT(4) ZEROFILL);",
        "CREATE TABLE example_table (id INT(4) UNSIGNED AUTO_INCREMENT PRIMARY KEY, value INT(4) ZEROFILL);"
    ],
    "EffectiveSQLsGeneratedCosts": [
        {
            "Total Tokens": 1472,
            "Prompt Tokens": 1434,
            "Completion Tokens": 38,
            "Total Cost (USD)": 0.00023789999999999998
        },
        {
            "Total Tokens": 1656,
            "Prompt Tokens": 1616,
            "Completion Tokens": 40,
            "Total Cost (USD)": 0.00026639999999999997
        }
    ],
    "EffectiveSQLsGeneratedErrors": [
        "(pymysql.err.OperationalError) (1075, 'Incorrect table definition; there can be only one auto column and it must be defined as a key')\n",
        "None"
    ],
    "EffectiveSQLs": [
        "CREATE TABLE example_table (id INT(4) UNSIGNED AUTO_INCREMENT PRIMARY KEY, value INT(4) ZEROFILL);"
    ]
}