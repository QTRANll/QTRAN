{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/set.html"
    ],
    "Title": [
        "13.3.6 The SET Type"
    ],
    "Feature": [
        "13.3.6 The SET Type"
    ],
    "Description": [
        "\n\n\n\n13.3.6\u00a0The SET Type\n\n\n\n\n        A SET is a string object that can have zero\n        or more values, each of which must be chosen from a list of\n        permitted values specified when the table is created.\n        SET column values that consist of multiple\n        set members are specified with members separated by commas\n        (,). A consequence of this is that\n        SET member values should not themselves\n        contain commas.\n      \n        For example, a column specified as SET('one', 'two')\n        NOT NULL can have any of these values:\n      Press CTRL+C to copy ''\n'one'\n'two'\n'one,two'\n        A SET column can have a maximum\n        of 64 distinct members.\n      \n        Duplicate values in the definition cause a warning, or an error\n        if strict SQL mode is enabled.\n      \n        Trailing spaces are automatically deleted from\n        SET member values in the table definition\n        when a table is created.\n      \n        See String Type Storage Requirements for\n        storage requirements for the SET\n        type.\n      \n        See Section\u00a013.3.1, \u201cString Data Type Syntax\u201d for\n        SET type syntax and length\n        limits.\n      \n        When retrieved, values stored in a SET column\n        are displayed using the lettercase that was used in the column\n        definition. Note that SET columns can be\n        assigned a character set and collation. For binary or\n        case-sensitive collations, lettercase is taken into account when\n        assigning values to the column.\n      \n        MySQL stores SET values numerically, with the\n        low-order bit of the stored value corresponding to the first set\n        member. If you retrieve a SET value in a\n        numeric context, the value retrieved has bits set corresponding\n        to the set members that make up the column value. For example,\n        you can retrieve numeric values from a SET\n        column like this:\n      Press CTRL+C to copy mysql> SELECT set_col+0 FROM tbl_name;\n        If a number is stored into a SET column, the\n        bits that are set in the binary representation of the number\n        determine the set members in the column value. For a column\n        specified as SET('a','b','c','d'), the\n        members have the following decimal and binary values.\n\n\n\nSET Member\nDecimal Value\nBinary Value\n\n'a'\n1\n0001\n\n'b'\n2\n0010\n\n'c'\n4\n0100\n\n'd'\n8\n1000\n\n\n\n        If you assign a value of 9 to this column,\n        that is 1001 in binary, so the first and\n        fourth SET value members\n        'a' and 'd' are selected\n        and the resulting value is 'a,d'.\n      \n        For a value containing more than one SET\n        element, it does not matter what order the elements are listed\n        in when you insert the value. It also does not matter how many\n        times a given element is listed in the value. When the value is\n        retrieved later, each element in the value appears once, with\n        elements listed according to the order in which they were\n        specified at table creation time. Suppose that a column is\n        specified as SET('a','b','c','d'):\n      Press CTRL+C to copy mysql> CREATE TABLE myset (col SET('a', 'b', 'c', 'd'));\n        If you insert the values 'a,d',\n        'd,a', 'a,d,d',\n        'a,d,a', and 'd,a,d':\n      Press CTRL+C to copy mysql> INSERT INTO myset (col) VALUES \n-> ('a,d'), ('d,a'), ('a,d,a'), ('a,d,d'), ('d,a,d');\nQuery OK, 5 rows affected (0.01 sec)\nRecords: 5  Duplicates: 0  Warnings: 0\n        Then all these values appear as 'a,d' when\n        retrieved:\n      Press CTRL+C to copy mysql> SELECT col FROM myset;\n+------+\n| col  |\n+------+\n| a,d  |\n| a,d  |\n| a,d  |\n| a,d  |\n| a,d  |\n+------+\n5 rows in set (0.04 sec)\n        If you set a SET column to an unsupported\n        value, the value is ignored and a warning is issued:\n      Press CTRL+C to copy mysql> INSERT INTO myset (col) VALUES ('a,d,d,s');\nQuery OK, 1 row affected, 1 warning (0.03 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+------------------------------------------+\n| Level   | Code | Message                                  |\n+---------+------+------------------------------------------+\n| Warning | 1265 | Data truncated for column 'col' at row 1 |\n+---------+------+------------------------------------------+\n1 row in set (0.04 sec)\n\nmysql> SELECT col FROM myset;\n+------+\n| col  |\n+------+\n| a,d  |\n| a,d  |\n| a,d  |\n| a,d  |\n| a,d  |\n| a,d  |\n+------+\n6 rows in set (0.01 sec)\n        If strict SQL mode is enabled, attempts to insert invalid\n        SET values result in an error.\n      \nSET values are sorted numerically.\n        NULL values sort before\n        non-NULL SET values.\n      \n        Functions such as SUM() or\n        AVG() that expect a numeric\n        argument cast the argument to a number if necessary. For\n        SET values, the cast operation causes the\n        numeric value to be used.\n      \n        Normally, you search for SET values using the\n        FIND_IN_SET() function or the\n        LIKE operator:\n      Press CTRL+C to copy mysql> SELECT * FROM tbl_name WHERE FIND_IN_SET('value',set_col)>0;\nmysql> SELECT * FROM tbl_name WHERE set_col LIKE '%value%';\n        The first statement finds rows where\n        set_col contains the\n        value set member. The second is\n        similar, but not the same: It finds rows where\n        set_col contains\n        value anywhere, even as a substring\n        of another set member.\n      \n        The following statements also are permitted:\n      Press CTRL+C to copy mysql> SELECT * FROM tbl_name WHERE set_col & 1;\nmysql> SELECT * FROM tbl_name WHERE set_col = 'val1,val2';\n        The first of these statements looks for values containing the\n        first set member. The second looks for an exact match. Be\n        careful with comparisons of the second type. Comparing set\n        values to\n        'val1,val2'\n        returns different results than comparing values to\n        'val2,val1'.\n        You should specify the values in the same order they are listed\n        in the column definition.\n      \n        To determine all possible values for a SET\n        column, use SHOW COLUMNS FROM\n        tbl_name LIKE\n        set_col and parse the\n        SET definition in the Type\n        column of the output.\n      \n        In the C API, SET values are returned as\n        strings. For information about using result set metadata to\n        distinguish them from other strings, see\n        C API Basic Data Structures.\n\n"
    ],
    "Examples": [
        "mysql> SELECT set_col+0 FROM tbl_name;",
        "mysql> CREATE TABLE myset (col SET('a', 'b', 'c', 'd'));",
        "mysql> INSERT INTO myset (col) VALUES \n-> ('a,d'), ('d,a'), ('a,d,a'), ('a,d,d'), ('d,a,d');\nQuery OK, 5 rows affected (0.01 sec)\nRecords: 5  Duplicates: 0  Warnings: 0",
        "mysql> SELECT col FROM myset;\n+------+\n| col  |\n+------+\n| a,d  |\n| a,d  |\n| a,d  |\n| a,d  |\n| a,d  |\n+------+\n5 rows in set (0.04 sec)",
        "mysql> INSERT INTO myset (col) VALUES ('a,d,d,s');\nQuery OK, 1 row affected, 1 warning (0.03 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+------------------------------------------+\n| Level   | Code | Message                                  |\n+---------+------+------------------------------------------+\n| Warning | 1265 | Data truncated for column 'col' at row 1 |\n+---------+------+------------------------------------------+\n1 row in set (0.04 sec)\n\nmysql> SELECT col FROM myset;\n+------+\n| col  |\n+------+\n| a,d  |\n| a,d  |\n| a,d  |\n| a,d  |\n| a,d  |\n| a,d  |\n+------+\n6 rows in set (0.01 sec)",
        "mysql> SELECT * FROM tbl_name WHERE FIND_IN_SET('value',set_col)>0;\nmysql> SELECT * FROM tbl_name WHERE set_col LIKE '%value%';",
        "mysql> SELECT * FROM tbl_name WHERE set_col & 1;\nmysql> SELECT * FROM tbl_name WHERE set_col = 'val1,val2';"
    ],
    "Category": [
        "The SET Type"
    ],
    "EffectiveSQLsRefined": [
        "CREATE TABLE myset (col SET('a', 'b', 'c', 'd'));",
        "SELECT col FROM myset;"
    ],
    "EffectiveSQLsGenerated": [],
    "EffectiveSQLsGeneratedCosts": [],
    "EffectiveSQLsGeneratedErrors": [],
    "EffectiveSQLs": [
        "CREATE TABLE myset (col SET('a', 'b', 'c', 'd'));",
        "SELECT col FROM myset;"
    ]
}