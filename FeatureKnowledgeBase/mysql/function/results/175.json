{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference"
    ],
    "Name": "JSON_SCHEMA_VALID()",
    "Description": [
        "\nJSON_SCHEMA_VALID(schema,document)\n",
        "\n          Validates a JSON document against a\n          JSON schema. Both\n          schema and\n          document are required. The schema\n          must be a valid JSON object; the document must be a valid JSON\n          document. Provided that these conditions are met: If the\n          document validates against the schema, the function returns\n          true (1); otherwise, it returns false (0).\n        ",
        "\n          In this example, we set a user variable\n          @schema to the value of a JSON schema for\n          geographical coordinates, and another one\n          @document to the value of a JSON document\n          containing one such coordinate. We then verify that\n          @document validates according to\n          @schema by using them as the arguments to\n          JSON_SCHEMA_VALID():\n        ",
        "Press CTRL+C to copy mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
        "\n          Since @schema contains the\n          required attribute, we can set\n          @document to a value that is otherwise\n          valid but does not contain the required properties, then test\n          it against @schema, like this:\n        ",
        "Press CTRL+C to copy mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
        "\n          If we now set the value of @schema to the\n          same JSON schema but without the required\n          attribute, @document validates because it\n          is a valid JSON object, even though it contains no properties,\n          as shown here:\n        ",
        "Press CTRL+C to copy mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
        "JSON_SCHEMA_VALID() and CHECK constraints.\u00a0\nJSON_SCHEMA_VALID() can also be used to\n            enforce CHECK constraints.\n          ",
        "\n          Consider the table geo created as shown\n          here, with a JSON column coordinate\n          representing a point of latitude and longitude on a map,\n          governed by the JSON schema used as an argument in a\n          JSON_SCHEMA_VALID() call which is passed as\n          the expression for a CHECK constraint on\n          this table:\n        ",
        "Press CTRL+C to copy mysql> CREATE TABLE geo (\n    ->     coordinate JSON,\n    ->     CHECK(\n    ->         JSON_SCHEMA_VALID(\n    ->             '{\n    '>                 \"type\":\"object\",\n    '>                 \"properties\":{\n    '>                       \"latitude\":{\"type\":\"number\", \"minimum\":-90, \"maximum\":90},\n    '>                       \"longitude\":{\"type\":\"number\", \"minimum\":-180, \"maximum\":180}\n    '>                 },\n    '>                 \"required\": [\"latitude\", \"longitude\"]\n    '>             }',\n    ->             coordinate\n    ->         )\n    ->     )\n    -> );\nQuery OK, 0 rows affected (0.45 sec)",
        "\n\nNote\n\n\n            Because a MySQL CHECK constraint cannot\n            contain references to variables, you must pass the JSON\n            schema to JSON_SCHEMA_VALID() inline when\n            using it to specify such a constraint for a table.\n\n",
        "\n          We assign JSON values representing coordinates to three\n          variables, as shown here:\n        ",
        "Press CTRL+C to copy mysql> SET @point1 = '{\"latitude\":59, \"longitude\":18}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @point2 = '{\"latitude\":91, \"longitude\":0}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @point3 = '{\"longitude\":120}';\nQuery OK, 0 rows affected (0.00 sec)",
        "\n          The first of these values is valid, as can be seen in the\n          following INSERT statement:\n        ",
        "Press CTRL+C to copy mysql> INSERT INTO geo VALUES(@point1);\nQuery OK, 1 row affected (0.05 sec)",
        "\n          The second JSON value is invalid and so fails the constraint,\n          as shown here:\n        ",
        "Press CTRL+C to copy mysql> INSERT INTO geo VALUES(@point2);\nERROR 3819 (HY000): Check constraint 'geo_chk_1' is violated.",
        "\n          In MySQL 8.0.19 and later, you can obtain precise information\n          about the nature of the failure\u2014in this case, that the\n          latitude value exceeds the maximum defined\n          in the schema\u2014by issuing a SHOW\n          WARNINGS statement:\n        ",
        "Press CTRL+C to copy mysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Error\n   Code: 3934\nMessage: The JSON document location '#/latitude' failed requirement 'maximum' at\nJSON Schema location '#/properties/latitude'.\n*************************** 2. row ***************************\n  Level: Error\n   Code: 3819\nMessage: Check constraint 'geo_chk_1' is violated.\n2 rows in set (0.00 sec)",
        "\n          The third coordinate value defined above is also invalid,\n          since it is missing the required latitude\n          property. As before, you can see this by attempting to insert\n          the value into the geo table, then issuing\n          SHOW WARNINGS afterwards:\n        ",
        "Press CTRL+C to copy mysql> INSERT INTO geo VALUES(@point3);\nERROR 3819 (HY000): Check constraint 'geo_chk_1' is violated.\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Error\n   Code: 3934\nMessage: The JSON document location '#' failed requirement 'required' at JSON\nSchema location '#'.\n*************************** 2. row ***************************\n  Level: Error\n   Code: 3819\nMessage: Check constraint 'geo_chk_1' is violated.\n2 rows in set (0.00 sec)",
        "\n          See Section\u00a015.1.20.6, \u201cCHECK Constraints\u201d, for more\n          information.\n        ",
        "\n          JSON Schema has support for specifying regular expression\n          patterns for strings, but the implementation used by MySQL\n          silently ignores invalid patterns. This means that\n          JSON_SCHEMA_VALID() can return true even\n          when a regular expression pattern is invalid, as shown here:\n        ",
        "Press CTRL+C to copy mysql> SELECT JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"');\n+---------------------------------------------------------------+\n| JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"') |\n+---------------------------------------------------------------+\n|                                                             1 |\n+---------------------------------------------------------------+\n1 row in set (0.04 sec)"
    ],
    "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/json-validation-functions.html#function_json-schema-valid",
    "Feature": [
        "JSON_SCHEMA_VALID(schema,document)"
    ],
    "Examples": [
        "mysql> SET @schema = '{\n    '>  \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> },\n    '> \"required\": [\"latitude\", \"longitude\"]\n    '>}';\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @document = '{\n    '> \"latitude\": 63.444697,\n    '> \"longitude\": 10.445118\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
        "mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
        "mysql> SET @schema = '{\n    '> \"id\": \"http://json-schema.org/geo\",\n    '> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    '> \"description\": \"A geographical coordinate\",\n    '> \"type\": \"object\",\n    '> \"properties\": {\n    '>   \"latitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -90,\n    '>     \"maximum\": 90\n    '>   },\n    '>   \"longitude\": {\n    '>     \"type\": \"number\",\n    '>     \"minimum\": -180,\n    '>     \"maximum\": 180\n    '>   }\n    '> }\n    '>}';\nQuery OK, 0 rows affected (0.00 sec)\n\n\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
        "mysql> CREATE TABLE geo (\n    ->     coordinate JSON,\n    ->     CHECK(\n    ->         JSON_SCHEMA_VALID(\n    ->             '{\n    '>                 \"type\":\"object\",\n    '>                 \"properties\":{\n    '>                       \"latitude\":{\"type\":\"number\", \"minimum\":-90, \"maximum\":90},\n    '>                       \"longitude\":{\"type\":\"number\", \"minimum\":-180, \"maximum\":180}\n    '>                 },\n    '>                 \"required\": [\"latitude\", \"longitude\"]\n    '>             }',\n    ->             coordinate\n    ->         )\n    ->     )\n    -> );\nQuery OK, 0 rows affected (0.45 sec)",
        "mysql> SET @point1 = '{\"latitude\":59, \"longitude\":18}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @point2 = '{\"latitude\":91, \"longitude\":0}';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SET @point3 = '{\"longitude\":120}';\nQuery OK, 0 rows affected (0.00 sec)",
        "mysql> INSERT INTO geo VALUES(@point1);\nQuery OK, 1 row affected (0.05 sec)",
        "mysql> INSERT INTO geo VALUES(@point2);\nERROR 3819 (HY000): Check constraint 'geo_chk_1' is violated.",
        "mysql> INSERT INTO geo VALUES(@point3);\nERROR 3819 (HY000): Check constraint 'geo_chk_1' is violated.\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Error\n   Code: 3934\nMessage: The JSON document location '#' failed requirement 'required' at JSON\nSchema location '#'.\n*************************** 2. row ***************************\n  Level: Error\n   Code: 3819\nMessage: Check constraint 'geo_chk_1' is violated.\n2 rows in set (0.00 sec)",
        "mysql> SELECT JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"');\n+---------------------------------------------------------------+\n| JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"') |\n+---------------------------------------------------------------+\n|                                                             1 |\n+---------------------------------------------------------------+\n1 row in set (0.04 sec)"
    ],
    "Category": [
        "Built-In Functions and Operators",
        "JSON Functions"
    ],
    "EffectiveSQLsRefined": [
        "SELECT JSON_SCHEMA_VALID(@schema, @document);",
        "SELECT JSON_SCHEMA_VALID(@schema, @document);",
        "SELECT JSON_SCHEMA_VALID(@schema, @document);",
        "SELECT JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"');"
    ],
    "EffectiveSQLsGenerated": [],
    "EffectiveSQLsGeneratedCosts": [],
    "EffectiveSQLsGeneratedErrors": [],
    "EffectiveSQLs": [
        "SELECT JSON_SCHEMA_VALID(@schema, @document);",
        "SELECT JSON_SCHEMA_VALID(@schema, @document);",
        "SELECT JSON_SCHEMA_VALID(@schema, @document);",
        "SELECT JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"');"
    ]
}