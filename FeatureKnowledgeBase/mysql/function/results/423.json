{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/loadable-function-reference.html"
    ],
    "Title": [
        "14.2 Loadable Function Reference"
    ],
    "Name": "asymmetric_derive()",
    "Description": [
        "\nasymmetric_derive(pub_key_str,\n          priv_key_str)\n",
        "\n          Derives a symmetric key using the private key of one party and\n          the public key of another, and returns the resulting key as a\n          binary string. If key derivation fails, the result is\n          NULL.\n        ",
        "\npub_key_str and\n          priv_key_str are valid PEM encoded\n          key strings that were created using the DH algorithm.\n        ",
        "\n          Suppose that you have two pairs of public and private keys:\n        ",
        "Press CTRL+C to copy SET @dhp = create_dh_parameters(1024);\nSET @priv1 = create_asymmetric_priv_key('DH', @dhp);\nSET @pub1 = create_asymmetric_pub_key('DH', @priv1);\nSET @priv2 = create_asymmetric_priv_key('DH', @dhp);\nSET @pub2 = create_asymmetric_pub_key('DH', @priv2);",
        "\n          Suppose further that you use the private key from one pair and\n          the public key from the other pair to create a symmetric key\n          string. Then this symmetric key identity relationship holds:\n        ",
        "Press CTRL+C to copy asymmetric_derive(@pub1, @priv2) = asymmetric_derive(@pub2, @priv1)",
        "\n          This example requires DH private/public keys as inputs,\n          created using a shared symmetric secret. Create the secret by\n          passing the key length to\n          create_dh_parameters(), then\n          pass the secret as the \u201ckey length\u201d to\n          create_asymmetric_priv_key().\n        ",
        "Press CTRL+C to copy -- Generate DH shared symmetric secret\nSET @dhp = create_dh_parameters(1024);\n-- Generate DH key pairs\nSET @algo = 'DH';\nSET @priv1 = create_asymmetric_priv_key(@algo, @dhp);\nSET @pub1 = create_asymmetric_pub_key(@algo, @priv1);\nSET @priv2 = create_asymmetric_priv_key(@algo, @dhp);\nSET @pub2 = create_asymmetric_pub_key(@algo, @priv2);\n\n-- Generate symmetric key using public key of first party,\n-- private key of second party\nSET @sym1 = asymmetric_derive(@pub1, @priv2);\n\n-- Or use public key of second party, private key of first party\nSET @sym2 = asymmetric_derive(@pub2, @priv1);"
    ],
    "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions-legacy.html#function_asymmetric-derive",
    "Feature": [
        "asymmetric_derive(pub_key_str,\n          priv_key_str)"
    ],
    "Examples": [
        "SET @dhp = create_dh_parameters(1024);\nSET @priv1 = create_asymmetric_priv_key('DH', @dhp);\nSET @pub1 = create_asymmetric_pub_key('DH', @priv1);\nSET @priv2 = create_asymmetric_priv_key('DH', @dhp);\nSET @pub2 = create_asymmetric_pub_key('DH', @priv2);",
        "-- Generate DH shared symmetric secret\nSET @dhp = create_dh_parameters(1024);\n-- Generate DH key pairs\nSET @algo = 'DH';\nSET @priv1 = create_asymmetric_priv_key(@algo, @dhp);\nSET @pub1 = create_asymmetric_pub_key(@algo, @priv1);\nSET @priv2 = create_asymmetric_priv_key(@algo, @dhp);\nSET @pub2 = create_asymmetric_pub_key(@algo, @priv2);\n\n-- Generate symmetric key using public key of first party,\n-- private key of second party\nSET @sym1 = asymmetric_derive(@pub1, @priv2);\n\n-- Or use public key of second party, private key of first party\nSET @sym2 = asymmetric_derive(@pub2, @priv1);"
    ],
    "Category": [
        "Loadable Functions"
    ],
    "EffectiveSQLsRefined": [],
    "EffectiveSQLsGenerated": [
        "SELECT asymmetric_derive('public_key_1', 'private_key_2');",
        "SELECT asymmetric_derive('valid_public_key', 'valid_private_key');",
        "SELECT asymmetric_derive('example_pub_key', 'example_priv_key');",
        "SELECT asymmetric_derive('dummy_public_key', 'dummy_private_key');",
        "SELECT asymmetric_derive('sample_pub_key', 'sample_priv_key');"
    ],
    "EffectiveSQLsGeneratedCosts": [
        {
            "Total Tokens": 821,
            "Prompt Tokens": 792,
            "Completion Tokens": 29,
            "Total Cost (USD)": 0.0001362
        },
        {
            "Total Tokens": 985,
            "Prompt Tokens": 958,
            "Completion Tokens": 27,
            "Total Cost (USD)": 0.00015989999999999996
        },
        {
            "Total Tokens": 1149,
            "Prompt Tokens": 1122,
            "Completion Tokens": 27,
            "Total Cost (USD)": 0.00018449999999999999
        },
        {
            "Total Tokens": 1313,
            "Prompt Tokens": 1286,
            "Completion Tokens": 27,
            "Total Cost (USD)": 0.0002091
        },
        {
            "Total Tokens": 1477,
            "Prompt Tokens": 1450,
            "Completion Tokens": 27,
            "Total Cost (USD)": 0.00023369999999999996
        }
    ],
    "EffectiveSQLsGeneratedErrors": [
        "(pymysql.err.OperationalError) (1305, 'FUNCTION knowledge_base_preprocess_mysql.asymmetric_derive does not exist')\n",
        "(pymysql.err.OperationalError) (1305, 'FUNCTION knowledge_base_preprocess_mysql.asymmetric_derive does not exist')\n",
        "(pymysql.err.OperationalError) (1305, 'FUNCTION knowledge_base_preprocess_mysql.asymmetric_derive does not exist')\n",
        "(pymysql.err.OperationalError) (1305, 'FUNCTION knowledge_base_preprocess_mysql.asymmetric_derive does not exist')\n",
        "(pymysql.err.OperationalError) (1305, 'FUNCTION knowledge_base_preprocess_mysql.asymmetric_derive does not exist')\n"
    ],
    "EffectiveSQLs": []
}