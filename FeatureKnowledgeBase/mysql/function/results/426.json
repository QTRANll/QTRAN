{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/loadable-function-reference.html"
    ],
    "Title": [
        "14.2 Loadable Function Reference"
    ],
    "Name": "asymmetric_verify()",
    "Description": [
        "\nasymmetric_verify(algorithm,\n          text,\n          sig_str,\n          pub_key_str,\n          digest_type)\n",
        "\n          Verifies whether the signature string matches the digest\n          string, and returns 1 or 0 to indicate whether verification\n          succeeded or failed. If verification fails, the result is\n          NULL.\n        ",
        "\n          For the legacy version of this function in use before MySQL\n          8.0.29, see\n          Section\u00a08.6.6, \u201cMySQL Enterprise Encryption Legacy Function Descriptions\u201d.\n        ",
        "\n          By default, the\n          component_enterprise_encryption function\n          assumes that signatures use the RSASSA-PSS signature scheme.\n          The function supports verification for signatures produced by\n          the legacy openssl_udf shared library\n          functions if the system variable\n          enterprise_encryption.rsa_support_legacy_padding\n          is set to ON (the default is\n          OFF). When ON is set,\n          the function also supports the RSASSA-PKCS1-v1_5 signature\n          scheme, as used by the legacy openssl_udf\n          shared library functions. When OFF is set,\n          signatures produced by the legacy functions cannot be\n          verified, and the function returns null output for such\n          content.\n        ",
        "\nalgorithm is the encryption\n          algorithm used to create the key. The supported algorithm\n          value is 'RSA'.\n        ",
        "\ntext is a data string or digest\n          string. The component function accepts digests but does not\n          require them, as it is also capable of handling data strings\n          of an arbitrary length. A digest string can be generated by\n          calling create_digest().\n        ",
        "\nsig_str is the signature string to\n          be verified. A signature string can be generated by calling\n          asymmetric_sign().\n        ",
        "\npub_key_str is the public key\n          string of the signer. It corresponds to the private key passed\n          to asymmetric_sign() to\n          generate the signature string. It must be a valid PEM encoded\n          RSA public key.\n        ",
        "\ndigest_type is the algorithm that\n          was used to sign the data. The supported\n          digest_type values are\n          'SHA224', 'SHA256',\n          'SHA384', and 'SHA512'\n          when OpenSSL 1.0.1 is in use. If OpenSSL 1.1.1 is in use, the\n          additional digest_type values\n          'SHA3-224', 'SHA3-256',\n          'SHA3-384', and\n          'SHA3-512' are available.\n        ",
        "Press CTRL+C to copy -- Set the encryption algorithm and digest type\nSET @algo = 'RSA';\nSET @dig_type = 'SHA512';\n\n-- Create private/public key pair\nSET @priv = create_asymmetric_priv_key(@algo, 2048);\nSET @pub = create_asymmetric_pub_key(@algo, @priv);\n\n-- Generate digest from string\nSET @dig = create_digest(@dig_type, 'The quick brown fox');\n\n-- Generate signature for digest and verify signature against digest\nSET @sig = asymmetric_sign(@algo, @dig, @priv, @dig_type);\nSET @verf = asymmetric_verify(@algo, @dig, @sig, @pub, @dig_type);"
    ],
    "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions.html#function_asymmetric-verify",
    "Feature": [
        "asymmetric_verify(algorithm,\n          text,\n          sig_str,\n          pub_key_str,\n          digest_type)"
    ],
    "Examples": [
        "-- Set the encryption algorithm and digest type\nSET @algo = 'RSA';\nSET @dig_type = 'SHA512';\n\n-- Create private/public key pair\nSET @priv = create_asymmetric_priv_key(@algo, 2048);\nSET @pub = create_asymmetric_pub_key(@algo, @priv);\n\n-- Generate digest from string\nSET @dig = create_digest(@dig_type, 'The quick brown fox');\n\n-- Generate signature for digest and verify signature against digest\nSET @sig = asymmetric_sign(@algo, @dig, @priv, @dig_type);\nSET @verf = asymmetric_verify(@algo, @dig, @sig, @pub, @dig_type);"
    ],
    "Category": [
        "Loadable Functions"
    ],
    "EffectiveSQLsRefined": [],
    "EffectiveSQLsGenerated": [
        "SELECT asymmetric_verify('RSA', 'The quick brown fox', sig_str, pub_key_str, 'SHA512');",
        "SELECT asymmetric_verify('RSA', 'The quick brown fox', 'your_signature_string', 'your_public_key_string', 'SHA512');",
        "SELECT asymmetric_verify('RSA', 'The quick brown fox', 'signature_string', 'public_key_string', 'SHA512');",
        "SELECT asymmetric_verify('RSA', 'sample_text', 'sample_signature', 'sample_public_key', 'SHA512');",
        "SELECT asymmetric_verify('RSA', 'text_example', 'signature_example', 'public_key_example', 'SHA512');"
    ],
    "EffectiveSQLsGeneratedCosts": [
        {
            "Total Tokens": 1043,
            "Prompt Tokens": 1007,
            "Completion Tokens": 36,
            "Total Cost (USD)": 0.00017264999999999994
        },
        {
            "Total Tokens": 1219,
            "Prompt Tokens": 1179,
            "Completion Tokens": 40,
            "Total Cost (USD)": 0.00020084999999999998
        },
        {
            "Total Tokens": 1393,
            "Prompt Tokens": 1355,
            "Completion Tokens": 38,
            "Total Cost (USD)": 0.00022605
        },
        {
            "Total Tokens": 1565,
            "Prompt Tokens": 1529,
            "Completion Tokens": 36,
            "Total Cost (USD)": 0.00025094999999999995
        },
        {
            "Total Tokens": 1737,
            "Prompt Tokens": 1701,
            "Completion Tokens": 36,
            "Total Cost (USD)": 0.00027675
        }
    ],
    "EffectiveSQLsGeneratedErrors": [
        "(pymysql.err.OperationalError) (1305, 'FUNCTION knowledge_base_preprocess_mysql.asymmetric_verify does not exist')\n",
        "(pymysql.err.OperationalError) (1305, 'FUNCTION knowledge_base_preprocess_mysql.asymmetric_verify does not exist')\n",
        "(pymysql.err.OperationalError) (1305, 'FUNCTION knowledge_base_preprocess_mysql.asymmetric_verify does not exist')\n",
        "(pymysql.err.OperationalError) (1305, 'FUNCTION knowledge_base_preprocess_mysql.asymmetric_verify does not exist')\n",
        "(pymysql.err.OperationalError) (1305, 'FUNCTION knowledge_base_preprocess_mysql.asymmetric_verify does not exist')\n"
    ],
    "EffectiveSQLs": []
}