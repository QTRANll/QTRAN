{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference"
    ],
    "Name": "JSON_OBJECTAGG()",
    "Description": [
        "\nJSON_OBJECTAGG(key,\n            value)\n            [over_clause]\n",
        "\n            Takes two column names or expressions as arguments, the\n            first of these being used as a key and the second as a\n            value, and returns a JSON object containing key-value pairs.\n            Returns NULL if the result contains no\n            rows, or in the event of an error. An error occurs if any\n            key name is NULL or the number of\n            arguments is not equal to 2.\n          ",
        "\n            As of MySQL 8.0.14, this function executes as a window\n            function if over_clause is\n            present. over_clause is as\n            described in Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n          ",
        "Press CTRL+C to copy mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_OBJECTAGG(attribute, value)\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------------------------+\n| o_id | JSON_OBJECTAGG(attribute, value)      |\n+------+---------------------------------------+\n|    2 | {\"color\": \"red\", \"fabric\": \"silk\"}    |\n|    3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set (0.00 sec)",
        "Duplicate key handling.\u00a0\n              When the result of this function is normalized, values\n              having duplicate keys are discarded. In keeping with the\n              MySQL JSON data type\n              specification that does not permit duplicate keys, only\n              the last value encountered is used with that key in the\n              returned object (\u201clast duplicate key wins\u201d).\n              This means that the result of using this function on\n              columns from a SELECT can depend on the\n              order in which the rows are returned, which is not\n              guaranteed.\n            ",
        "\n            When used as a window function, if there are duplicate keys\n            within a frame, only the last value for the key is present\n            in the result. The value for the key from the last row in\n            the frame is deterministic if the ORDER\n            BY specification guarantees that the values have a\n            specific order. If not, the resulting value of the key is\n            nondeterministic.\n          ",
        "\n            Consider the following:\n          ",
        "Press CTRL+C to copy mysql> CREATE TABLE t(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected (0.33 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected (0.10 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    4 |\n| key  |    5 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5}           |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t;\nQuery OK, 3 rows affected (0.08 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 5), ('key', 4);\nQuery OK, 3 rows affected (0.06 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    5 |\n| key  |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 4}           |\n+----------------------+\n1 row in set (0.00 sec)",
        "\n            The key chosen from the last query is nondeterministic. If\n            the query does not use GROUP BY (which\n            usually imposes its own ordering regardless) and you prefer\n            a particular key ordering, you can invoke\n            JSON_OBJECTAGG() as a window function by\n            including an OVER clause with an\n            ORDER BY specification to impose a\n            particular order on frame rows. The following examples show\n            what happens with and without ORDER BY\n            for a few different frame specifications.\n          ",
        "\n            Without ORDER BY, the frame is the entire\n            partition:\n          ",
        "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER () AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n+-------------+",
        "\n            With ORDER BY, where the frame is the\n            default of RANGE BETWEEN UNBOUNDED PRECEDING AND\n            CURRENT ROW (in both ascending and descending\n            order):\n          ",
        "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n| {\"key\": 4}  |\n| {\"key\": 5}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 4}  |\n| {\"key\": 3}  |\n+-------------+",
        "\n            With ORDER BY and an explicit frame of\n            the entire partition:\n          ",
        "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n        AS json_object\n       FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n+-------------+",
        "\n            To return a particular key value (such as the smallest or\n            largest), include a LIMIT clause in the\n            appropriate query. For example:\n          ",
        "Press CTRL+C to copy mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n+-------------+",
        "\n            See Normalization, Merging, and Autowrapping of JSON Values, for additional\n            information and examples.\n          "
    ],
    "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_json-objectagg",
    "Feature": [
        "JSON_OBJECTAGG(key,\n            value)\n            [over_clause]"
    ],
    "Examples": [
        "mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n|    2 | color     | red   |\n|    2 | fabric    | silk  |\n|    3 | color     | green |\n|    3 | shape     | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_OBJECTAGG(attribute, value)\n    -> FROM t3 GROUP BY o_id;\n+------+---------------------------------------+\n| o_id | JSON_OBJECTAGG(attribute, value)      |\n+------+---------------------------------------+\n|    2 | {\"color\": \"red\", \"fabric\": \"silk\"}    |\n|    3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set (0.00 sec)",
        "mysql> CREATE TABLE t(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected (0.33 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected (0.10 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    4 |\n| key  |    5 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5}           |\n+----------------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t;\nQuery OK, 3 rows affected (0.08 sec)\n\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 5), ('key', 4);\nQuery OK, 3 rows affected (0.06 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT c, i FROM t;\n+------+------+\n| c    | i    |\n+------+------+\n| key  |    3 |\n| key  |    5 |\n| key  |    4 |\n+------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 4}           |\n+----------------------+\n1 row in set (0.00 sec)",
        "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER () AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n| {\"key\": 4}  |\n+-------------+",
        "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n| {\"key\": 4}  |\n| {\"key\": 5}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 4}  |\n| {\"key\": 3}  |\n+-------------+",
        "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n        AS json_object\n       FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n| {\"key\": 5}  |\n+-------------+",
        "mysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3}  |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5}  |\n+-------------+"
    ],
    "Category": [
        "Built-In Functions and Operators",
        "Aggregate Functions"
    ],
    "EffectiveSQLsRefined": [
        "CREATE TABLE t(c VARCHAR(10), i INT);",
        "INSERT INTO t VALUES ('key', 3), ('key', 4), ('key', 5);",
        "SELECT c, i FROM t;",
        "INSERT INTO t VALUES ('key', 3), ('key', 5), ('key', 4);",
        "SELECT c, i FROM t;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER () AS json_object FROM t;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n        AS json_object\n       FROM t;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t LIMIT 1;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t LIMIT 1;"
    ],
    "EffectiveSQLsGenerated": [],
    "EffectiveSQLsGeneratedCosts": [],
    "EffectiveSQLsGeneratedErrors": [],
    "EffectiveSQLs": [
        "CREATE TABLE t(c VARCHAR(10), i INT);",
        "INSERT INTO t VALUES ('key', 3), ('key', 4), ('key', 5);",
        "SELECT c, i FROM t;",
        "INSERT INTO t VALUES ('key', 3), ('key', 5), ('key', 4);",
        "SELECT c, i FROM t;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER () AS json_object FROM t;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i\n            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n        AS json_object\n       FROM t;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i) AS json_object FROM t LIMIT 1;",
        "SELECT JSON_OBJECTAGG(c, i)\n       OVER (ORDER BY i DESC) AS json_object FROM t LIMIT 1;"
    ]
}