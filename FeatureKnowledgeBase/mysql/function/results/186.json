{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference"
    ],
    "Name": "LAG()",
    "Description": [
        "\nLAG(expr [,\n            N[,\n            default]])\n            [null_treatment]\n            over_clause\n",
        "\n            Returns the value of expr from\n            the row that lags (precedes) the current row by\n            N rows within its partition. If\n            there is no such row, the return value is\n            default. For example, if\n            N is 3, the return value is\n            default for the first three rows.\n            If N or\n            default are missing, the defaults\n            are 1 and NULL, respectively.\n          ",
        "\nN must be a literal nonnegative\n            integer. If N is 0,\n            expr is evaluated for the current\n            row.\n          ",
        "\n            Beginning with MySQL 8.0.22, N\n            cannot be NULL. In addition, it must now\n            be an integer in the range 0 to\n            263,\n            inclusive, in any of the following forms:\n",
        "\n\n                an unsigned integer constant literal\n              \n                a positional parameter marker (?)\n              \n                a user-defined variable\n              \n                a local variable in a stored routine\n\n",
        "\nover_clause is as described in\n            Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d.\n            null_treatment is as described in\n            the section introduction.\n          ",
        "\nLAG() (and the similar\n            LEAD() function) are often\n            used to compute differences between rows. The following\n            query shows a set of time-ordered observations and, for each\n            one, the LAG() and\n            LEAD() values from the\n            adjoining rows, as well as the differences between the\n            current and adjoining rows:\n          ",
        "Press CTRL+C to copy mysql> SELECT\n         t, val,\n         LAG(val)        OVER w AS 'lag',\n         LEAD(val)       OVER w AS 'lead',\n         val - LAG(val)  OVER w AS 'lag diff',\n         val - LEAD(val) OVER w AS 'lead diff'\n       FROM series\n       WINDOW w AS (ORDER BY t);\n+----------+------+------+------+----------+-----------+\n| t        | val  | lag  | lead | lag diff | lead diff |\n+----------+------+------+------+----------+-----------+\n| 12:00:00 |  100 | NULL |  125 |     NULL |       -25 |\n| 13:00:00 |  125 |  100 |  132 |       25 |        -7 |\n| 14:00:00 |  132 |  125 |  145 |        7 |       -13 |\n| 15:00:00 |  145 |  132 |  140 |       13 |         5 |\n| 16:00:00 |  140 |  145 |  150 |       -5 |       -10 |\n| 17:00:00 |  150 |  140 |  200 |       10 |       -50 |\n| 18:00:00 |  200 |  150 | NULL |       50 |      NULL |\n+----------+------+------+------+----------+-----------+",
        "\n            In the example, the LAG() and\n            LEAD() calls use the default\n            N and\n            default values of 1 and\n            NULL, respectively.\n          ",
        "\n            The first row shows what happens when there is no previous\n            row for LAG(): The function\n            returns the default value (in\n            this case, NULL). The last row shows the\n            same thing when there is no next row for\n            LEAD().\n          ",
        "\nLAG() and\n            LEAD() also serve to compute\n            sums rather than differences. Consider this data set, which\n            contains the first few numbers of the Fibonacci series:\n          ",
        "Press CTRL+C to copy mysql> SELECT n FROM fib ORDER BY n;\n+------+\n| n    |\n+------+\n|    1 |\n|    1 |\n|    2 |\n|    3 |\n|    5 |\n|    8 |\n+------+",
        "\n            The following query shows the\n            LAG() and\n            LEAD() values for the rows\n            adjacent to the current row. It also uses those functions to\n            add to the current row value the values from the preceding\n            and following rows. The effect is to generate the next\n            number in the Fibonacci series, and the next number after\n            that:\n          ",
        "Press CTRL+C to copy mysql> SELECT\n         n,\n         LAG(n, 1, 0)      OVER w AS 'lag',\n         LEAD(n, 1, 0)     OVER w AS 'lead',\n         n + LAG(n, 1, 0)  OVER w AS 'next_n',\n         n + LEAD(n, 1, 0) OVER w AS 'next_next_n'\n       FROM fib\n       WINDOW w AS (ORDER BY n);\n+------+------+------+--------+-------------+\n| n    | lag  | lead | next_n | next_next_n |\n+------+------+------+--------+-------------+\n|    1 |    0 |    1 |      1 |           2 |\n|    1 |    1 |    2 |      2 |           3 |\n|    2 |    1 |    3 |      3 |           5 |\n|    3 |    2 |    5 |      5 |           8 |\n|    5 |    3 |    8 |      8 |          13 |\n|    8 |    5 |    0 |     13 |           8 |\n+------+------+------+--------+-------------+",
        "\n            One way to generate the initial set of Fibonacci numbers is\n            to use a recursive common table expression. For an example,\n            see\n            Fibonacci Series Generation.\n          ",
        "\n            Beginning with MySQL 8.0.22, you cannot use a negative value\n            for the rows argument of this function.\n          "
    ],
    "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_lag",
    "Feature": [
        "LAG(expr [,\n            N[,\n            default]])"
    ],
    "Examples": [
        "mysql> SELECT\n         t, val,\n         LAG(val)        OVER w AS 'lag',\n         LEAD(val)       OVER w AS 'lead',\n         val - LAG(val)  OVER w AS 'lag diff',\n         val - LEAD(val) OVER w AS 'lead diff'\n       FROM series\n       WINDOW w AS (ORDER BY t);\n+----------+------+------+------+----------+-----------+\n| t        | val  | lag  | lead | lag diff | lead diff |\n+----------+------+------+------+----------+-----------+\n| 12:00:00 |  100 | NULL |  125 |     NULL |       -25 |\n| 13:00:00 |  125 |  100 |  132 |       25 |        -7 |\n| 14:00:00 |  132 |  125 |  145 |        7 |       -13 |\n| 15:00:00 |  145 |  132 |  140 |       13 |         5 |\n| 16:00:00 |  140 |  145 |  150 |       -5 |       -10 |\n| 17:00:00 |  150 |  140 |  200 |       10 |       -50 |\n| 18:00:00 |  200 |  150 | NULL |       50 |      NULL |\n+----------+------+------+------+----------+-----------+",
        "mysql> SELECT n FROM fib ORDER BY n;\n+------+\n| n    |\n+------+\n|    1 |\n|    1 |\n|    2 |\n|    3 |\n|    5 |\n|    8 |\n+------+",
        "mysql> SELECT\n         n,\n         LAG(n, 1, 0)      OVER w AS 'lag',\n         LEAD(n, 1, 0)     OVER w AS 'lead',\n         n + LAG(n, 1, 0)  OVER w AS 'next_n',\n         n + LEAD(n, 1, 0) OVER w AS 'next_next_n'\n       FROM fib\n       WINDOW w AS (ORDER BY n);\n+------+------+------+--------+-------------+\n| n    | lag  | lead | next_n | next_next_n |\n+------+------+------+--------+-------------+\n|    1 |    0 |    1 |      1 |           2 |\n|    1 |    1 |    2 |      2 |           3 |\n|    2 |    1 |    3 |      3 |           5 |\n|    3 |    2 |    5 |      5 |           8 |\n|    5 |    3 |    8 |      8 |          13 |\n|    8 |    5 |    0 |     13 |           8 |\n+------+------+------+--------+-------------+"
    ],
    "Category": [
        "Built-In Functions and Operators",
        "Window Functions"
    ]
}