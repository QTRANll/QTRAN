{
    "HTML": [
        "https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"
    ],
    "Title": [
        "14.1 Built-In Function and Operator Reference"
    ],
    "Name": "BENCHMARK()",
    "Description": [
        "\nBENCHMARK(count,expr)\n",
        "\n          The BENCHMARK() function\n          executes the expression expr\n          repeatedly count times. It may be\n          used to time how quickly MySQL processes the expression. The\n          result value is 0, or\n          NULL for inappropriate arguments such as a\n          NULL or negative repeat count.\n        ",
        "\n          The intended use is from within the mysql\n          client, which reports query execution times:\n        ",
        "Press CTRL+C to copy mysql> SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));\n+---------------------------------------------------+\n| BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye')) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+\n1 row in set (4.74 sec)",
        "\n          The time reported is elapsed time on the client end, not CPU\n          time on the server end. It is advisable to execute\n          BENCHMARK() several times, and\n          to interpret the result with regard to how heavily loaded the\n          server machine is.\n        ",
        "\nBENCHMARK() is intended for\n          measuring the runtime performance of scalar expressions, which\n          has some significant implications for the way that you use it\n          and interpret the results:\n",
        "\n\n              Only scalar expressions can be used. Although the\n              expression can be a subquery, it must return a single\n              column and at most a single row. For example,\n              BENCHMARK(10, (SELECT * FROM\n              t)) fails if the table t has\n              more than one column or more than one row.\n            \n              Executing a SELECT\n              expr statement\n              N times differs from executing\n              SELECT BENCHMARK(N,\n              expr) in terms of the\n              amount of overhead involved. The two have very different\n              execution profiles and you should not expect them to take\n              the same amount of time. The former involves the parser,\n              optimizer, table locking, and runtime evaluation\n              N times each. The latter\n              involves only runtime evaluation\n              N times, and all the other\n              components just once. Memory structures already allocated\n              are reused, and runtime optimizations such as local\n              caching of results already evaluated for aggregate\n              functions can alter the results. Use of\n              BENCHMARK() thus measures\n              performance of the runtime component by giving more weight\n              to that component and removing the \u201cnoise\u201d\n              introduced by the network, parser, optimizer, and so\n              forth.\n\n"
    ],
    "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_benchmark",
    "Feature": [
        "BENCHMARK(count,expr)"
    ],
    "Examples": [
        "mysql> SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));\n+---------------------------------------------------+\n| BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye')) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+\n1 row in set (4.74 sec)"
    ],
    "Category": [
        "Built-In Functions and Operators",
        "Information Functions"
    ],
    "EffectiveSQLsRefined": [
        "SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));"
    ],
    "EffectiveSQLsGenerated": [],
    "EffectiveSQLsGeneratedCosts": [],
    "EffectiveSQLsGeneratedErrors": [],
    "EffectiveSQLs": [
        "SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));"
    ]
}