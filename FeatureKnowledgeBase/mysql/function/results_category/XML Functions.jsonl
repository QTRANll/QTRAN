{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "UpdateXML()", "Description": ["\nUpdateXML(xml_target,\n          xpath_expr,\n          new_xml)\n", "\n          This function replaces a single portion of a given fragment of\n          XML markup xml_target with a new\n          XML fragment new_xml, and then\n          returns the changed XML. The portion of\n          xml_target that is replaced matches\n          an XPath expression xpath_expr\n          supplied by the user.\n        ", "\n          If no expression matching\n          xpath_expr is found, or if multiple\n          matches are found, the function returns the original\n          xml_target XML fragment. All three\n          arguments should be strings. If any of the arguments to\n          UpdateXML() are NULL,\n          the function returns NULL.\n        ", "Press CTRL+C to copy mysql> SELECT\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '/a', '<e>fff</e>') AS val1,\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '/b', '<e>fff</e>') AS val2,\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '//b', '<e>fff</e>') AS val3,\n    ->   UpdateXML('<a><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val4,\n    ->   UpdateXML('<a><d></d><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val5\n    -> \\G\n\n*************************** 1. row ***************************\nval1: <e>fff</e>\nval2: <a><b>ccc</b><d></d></a>\nval3: <a><e>fff</e><d></d></a>\nval4: <a><b>ccc</b><e>fff</e></a>\nval5: <a><d></d><b>ccc</b><d></d></a>"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html#function_updatexml", "Feature": ["UpdateXML(xml_target,\n          xpath_expr,\n          new_xml)"], "Examples": [], "Category": ["Built-In Functions and Operators", "XML Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ExtractValue()", "Description": ["\nExtractValue(xml_frag,\n          xpath_expr)\n", "\nExtractValue() takes two string\n          arguments, a fragment of XML markup\n          xml_frag and an XPath expression\n          xpath_expr (also known as a\n          locator); it returns the\n          text (CDATA) of the first text node which\n          is a child of the element or elements matched by the XPath\n          expression.\n        ", "\n          Using this function is the equivalent of performing a match\n          using the xpath_expr after\n          appending /text(). In other words,\n          ExtractValue('<a><b>Sakila</b></a>',\n          '/a/b') and\n          ExtractValue('<a><b>Sakila</b></a>',\n          '/a/b/text()') produce the same result. If\n          xml_frag or\n          xpath_expr is\n          NULL, the function returns\n          NULL.\n        ", "\n          If multiple matches are found, the content of the first child\n          text node of each matching element is returned (in the order\n          matched) as a single, space-delimited string.\n        ", "\n          If no matching text node is found for the expression\n          (including the implicit /text())\u2014for\n          whatever reason, as long as\n          xpath_expr is valid, and\n          xml_frag consists of elements which\n          are properly nested and closed\u2014an empty string is\n          returned. No distinction is made between a match on an empty\n          element and no match at all. This is by design.\n        ", "\n          If you need to determine whether no matching element was found\n          in xml_frag or such an element was\n          found but contained no child text nodes, you should test the\n          result of an expression that uses the XPath\n          count() function. For example, both of\n          these statements return an empty string, as shown here:\n        ", "Press CTRL+C to copy mysql> SELECT ExtractValue('<a><b/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)", "\n          However, you can determine whether there was actually a\n          matching element using the following:\n        ", "Press CTRL+C to copy mysql> SELECT ExtractValue('<a><b/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 1                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 0                                   |\n+-------------------------------------+\n1 row in set (0.01 sec)", "\n\nImportant\n\n\nExtractValue() returns only\n            CDATA, and does not return any tags that\n            might be contained within a matching tag, nor any of their\n            content (see the result returned as val1\n            in the following example).\n\n", "Press CTRL+C to copy mysql> SELECT\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a') AS val1,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a/b') AS val2,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '//b') AS val3,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/b') AS val4,\n    ->   ExtractValue('<a>ccc<b>ddd</b><b>eee</b></a>', '//b') AS val5;\n\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5    |\n+------+------+------+------+---------+\n| ccc  | ddd  | ddd  |      | ddd eee |\n+------+------+------+------+---------+", "\n          This function uses the current SQL collation for making\n          comparisons with contains(), performing the\n          same collation aggregation as other string functions (such as\n          CONCAT()), in taking into\n          account the collation coercibility of their arguments; see\n          Section\u00a012.8.4, \u201cCollation Coercibility in Expressions\u201d, for an\n          explanation of the rules governing this behavior.\n        ", "\n          (Previously, binary\u2014that is,\n          case-sensitive\u2014comparison was always used.)\n        ", "\nNULL is returned if\n          xml_frag contains elements which\n          are not properly nested or closed, and a warning is generated,\n          as shown in this example:\n        ", "Press CTRL+C to copy mysql> SELECT ExtractValue('<a>c</a><b', '//a');\n+-----------------------------------+\n| ExtractValue('<a>c</a><b', '//a') |\n+-----------------------------------+\n| NULL                              |\n+-----------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1525\nMessage: Incorrect XML value: 'parse error at line 1 pos 11:\n         END-OF-INPUT unexpected ('>' wanted)'\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a>c</a><b/>', '//a');\n+-------------------------------------+\n| ExtractValue('<a>c</a><b/>', '//a') |\n+-------------------------------------+\n| c                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html#function_extractvalue", "Feature": ["ExtractValue(xml_frag,\n          xpath_expr)"], "Examples": ["mysql> SELECT ExtractValue('<a><b/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', '/a/b') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)", "mysql> SELECT ExtractValue('<a><b/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 1                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a><c/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 0                                   |\n+-------------------------------------+\n1 row in set (0.01 sec)", "mysql> SELECT\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a') AS val1,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/a/b') AS val2,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '//b') AS val3,\n    ->   ExtractValue('<a>ccc<b>ddd</b></a>', '/b') AS val4,\n    ->   ExtractValue('<a>ccc<b>ddd</b><b>eee</b></a>', '//b') AS val5;\n\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5    |\n+------+------+------+------+---------+\n| ccc  | ddd  | ddd  |      | ddd eee |\n+------+------+------+------+---------+", "mysql> SELECT ExtractValue('<a>c</a><b', '//a');\n+-----------------------------------+\n| ExtractValue('<a>c</a><b', '//a') |\n+-----------------------------------+\n| NULL                              |\n+-----------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1525\nMessage: Incorrect XML value: 'parse error at line 1 pos 11:\n         END-OF-INPUT unexpected ('>' wanted)'\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue('<a>c</a><b/>', '//a');\n+-------------------------------------+\n| ExtractValue('<a>c</a><b/>', '//a') |\n+-------------------------------------+\n| c                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)"], "Category": ["Built-In Functions and Operators", "XML Functions"]}
