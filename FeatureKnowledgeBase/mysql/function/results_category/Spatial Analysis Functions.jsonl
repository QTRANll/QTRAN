{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "LineString()", "Description": ["\nLineString(pt\n          [, pt] ...)\n", "\n          Constructs a LineString value from a number\n          of Point or WKB Point\n          arguments. If the number of arguments is less than two, the\n          return value is NULL.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html#function_linestring", "Feature": ["LineString(pt\n          [, pt] ...)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MBRContains()", "Description": ["\nMBRContains(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 contains the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRWithin().\n          ", "\nMBRContains() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);\n+----------------------+--------------------+\n| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |\n+----------------------+--------------------+\n|                    1 |                  1 |\n+----------------------+--------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html#function_mbrcontains", "Feature": ["MBRContains(g1,\n            g2)"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);\n+----------------------+--------------------+\n| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |\n+----------------------+--------------------+\n|                    1 |                  1 |\n+----------------------+--------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MBRCoveredBy()", "Description": ["\nMBRCoveredBy(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 is covered by the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRCovers().\n          ", "\nMBRCoveredBy() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRCovers(@g1,@g2), MBRCoveredby(@g1,@g2);\n+--------------------+-----------------------+\n| MBRCovers(@g1,@g2) | MBRCoveredby(@g1,@g2) |\n+--------------------+-----------------------+\n|                  1 |                     0 |\n+--------------------+-----------------------+\nmysql> SELECT MBRCovers(@g2,@g1), MBRCoveredby(@g2,@g1);\n+--------------------+-----------------------+\n| MBRCovers(@g2,@g1) | MBRCoveredby(@g2,@g1) |\n+--------------------+-----------------------+\n|                  0 |                     1 |\n+--------------------+-----------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html#function_mbrcoveredby", "Feature": ["MBRCoveredBy(g1,\n            g2)"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRCovers(@g1,@g2), MBRCoveredby(@g1,@g2);\n+--------------------+-----------------------+\n| MBRCovers(@g1,@g2) | MBRCoveredby(@g1,@g2) |\n+--------------------+-----------------------+\n|                  1 |                     0 |\n+--------------------+-----------------------+\nmysql> SELECT MBRCovers(@g2,@g1), MBRCoveredby(@g2,@g1);\n+--------------------+-----------------------+\n| MBRCovers(@g2,@g1) | MBRCoveredby(@g2,@g1) |\n+--------------------+-----------------------+\n|                  0 |                     1 |\n+--------------------+-----------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MBRCovers()", "Description": ["\nMBRCovers(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 covers the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRCoveredBy(). See the\n            description of MBRCoveredBy()\n            for examples.\n          ", "\nMBRCovers() handles its\n            arguments as described in the introduction to this section.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html#function_mbrcovers", "Feature": ["MBRCovers(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MBRDisjoint()", "Description": ["\nMBRDisjoint(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangles of the two geometries\n            g1 and\n            g2 are disjoint (do not\n            intersect).\n          ", "\nMBRDisjoint() handles its\n            arguments as described in the introduction to this section.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html#function_mbrdisjoint", "Feature": ["MBRDisjoint(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MBREquals()", "Description": ["\nMBREquals(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangles of the two geometries\n            g1 and\n            g2 are the same.\n          ", "\nMBREquals() handles its\n            arguments as described in the introduction to this section,\n            except that it does not return NULL for\n            empty geometry arguments.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html#function_mbrequals", "Feature": ["MBREquals(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MBRIntersects()", "Description": ["\nMBRIntersects(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangles of the two geometries\n            g1 and\n            g2 intersect.\n          ", "\nMBRIntersects() handles its\n            arguments as described in the introduction to this section.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html#function_mbrintersects", "Feature": ["MBRIntersects(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MBROverlaps()", "Description": ["\nMBROverlaps(g1,\n            g2)\n", "\n            Two geometries spatially overlap if\n            they intersect and their intersection results in a geometry\n            of the same dimension but not equal to either of the given\n            geometries.\n          ", "\n            This function returns 1 or 0 to indicate whether the minimum\n            bounding rectangles of the two geometries\n            g1 and\n            g2 overlap.\n          ", "\nMBROverlaps() handles its\n            arguments as described in the introduction to this section.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html#function_mbroverlaps", "Feature": ["MBROverlaps(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MBRTouches()", "Description": ["\nMBRTouches(g1,\n            g2)\n", "\n            Two geometries spatially touch if their\n            interiors do not intersect, but the boundary of one of the\n            geometries intersects either the boundary or the interior of\n            the other.\n          ", "\n            This function returns 1 or 0 to indicate whether the minimum\n            bounding rectangles of the two geometries\n            g1 and\n            g2 touch.\n          ", "\nMBRTouches() handles its\n            arguments as described in the introduction to this section.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html#function_mbrtouches", "Feature": ["MBRTouches(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MBRWithin()", "Description": ["\nMBRWithin(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether the minimum bounding\n            rectangle of g1 is within the\n            minimum bounding rectangle of g2.\n            This tests the opposite relationship as\n            MBRContains().\n          ", "\nMBRWithin() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');\nmysql> SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-mbr.html#function_mbrwithin", "Feature": ["MBRWithin(g1,\n            g2)"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');\nmysql> SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MultiLineString()", "Description": ["\nMultiLineString(ls\n          [, ls] ...)\n", "\n          Constructs a MultiLineString value using\n          LineString or WKB\n          LineString arguments.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html#function_multilinestring", "Feature": ["MultiLineString(ls\n          [, ls] ...)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MultiPoint()", "Description": ["\nMultiPoint(pt\n          [, pt2] ...)\n", "\n          Constructs a MultiPoint value using\n          Point or WKB Point\n          arguments.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html#function_multipoint", "Feature": ["MultiPoint(pt\n          [, pt2] ...)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "MultiPolygon()", "Description": ["\nMultiPolygon(poly\n          [, poly] ...)\n", "\n          Constructs a MultiPolygon value from a set\n          of Polygon or WKB\n          Polygon arguments.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html#function_multipolygon", "Feature": ["MultiPolygon(poly\n          [, poly] ...)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "Point()", "Description": ["\nPoint(x,\n          y)\n", "\n          Constructs a Point using its coordinates.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html#function_point", "Feature": ["Point(x,\n          y)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "Polygon()", "Description": ["\nPolygon(ls [,\n          ls] ...)\n", "\n          Constructs a Polygon value from a number of\n          LineString or WKB\n          LineString arguments. If any argument does\n          not represent a LinearRing (that is, not a\n          closed and simple LineString), the return\n          value is NULL.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html#function_polygon", "Feature": ["Polygon(ls [,\n          ls] ...)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Area()", "Description": ["\nST_Area({poly|mpoly})\n", "\n            Returns a double-precision number indicating the area of the\n            Polygon or\n            MultiPolygon argument, as measured in its\n            spatial reference system.\n          ", "\n            As of MySQL 8.0.13, ST_Area()\n            handles its arguments as described in the introduction to\n            this section, with these exceptions:\n", "\n\n                If the geometry is geometrically invalid, either the\n                result is an undefined area (that is, it can be any\n                number), or an error occurs.\n              \n                If the geometry is valid but is not a\n                Polygon or\n                MultiPolygon object, an\n                ER_UNEXPECTED_GEOMETRY_TYPE\n                error occurs.\n              \n                If the geometry is a valid Polygon in\n                a Cartesian SRS, the result is the Cartesian area of the\n                polygon.\n              \n                If the geometry is a valid\n                MultiPolygon in a Cartesian SRS, the\n                result is the sum of the Cartesian area of the polygons.\n              \n                If the geometry is a valid Polygon in\n                a geographic SRS, the result is the geodetic area of the\n                polygon in that SRS, in square meters.\n              \n                If the geometry is a valid\n                MultiPolygon in a geographic SRS, the\n                result is the sum of geodetic area of the polygons in\n                that SRS, in square meters.\n              \n                If an area computation results in\n                +inf, an\n                ER_DATA_OUT_OF_RANGE\n                error occurs.\n              \n                If the geometry has a geographic SRS with a longitude or\n                latitude that is out of range, an error occurs:\n\n\n\n                    If a longitude value is not in the range\n                    (\u2212180, 180], an\n                    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                    error occurs\n                    (ER_LONGITUDE_OUT_OF_RANGE\n                    prior to MySQL 8.0.12).\n                  \n                    If a latitude value is not in the range [\u221290,\n                    90], an\n                    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                    error occurs\n                    (ER_LATITUDE_OUT_OF_RANGE\n                    prior to MySQL 8.0.12).\n\n\n\n                Ranges shown are in degrees. The exact range limits\n                deviate slightly due to floating-point arithmetic.\n\n", "\n            Prior to MySQL 8.0.13,\n            ST_Area() handles its\n            arguments as described in the introduction to this section,\n            with these exceptions:\n", "\n\n                For arguments of dimension 0 or 1, the result is 0.\n              \n                If a geometry is empty, the return value is 0 rather\n                than NULL.\n              \n                For a geometry collection, the result is the sum of the\n                area values of all components. If the geometry\n                collection is empty, its area is returned as 0.\n              \n                If the geometry has an SRID value for a geographic\n                spatial reference system (SRS), an\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs.\n\n", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';\nmysql> SELECT ST_Area(ST_GeomFromText(@poly));\n+---------------------------------+\n| ST_Area(ST_GeomFromText(@poly)) |\n+---------------------------------+\n|                               4 |\n+---------------------------------+\n\nmysql> SET @mpoly =\n       'MultiPolygon(((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1)))';\nmysql> SELECT ST_Area(ST_GeomFromText(@mpoly));\n+----------------------------------+\n| ST_Area(ST_GeomFromText(@mpoly)) |\n+----------------------------------+\n|                                8 |\n+----------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html#function_st-area", "Feature": ["ST_Area({poly|mpoly})"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';\nmysql> SELECT ST_Area(ST_GeomFromText(@poly));\n+---------------------------------+\n| ST_Area(ST_GeomFromText(@poly)) |\n+---------------------------------+\n|                               4 |\n+---------------------------------+\n\nmysql> SET @mpoly =\n       'MultiPolygon(((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1)))';\nmysql> SELECT ST_Area(ST_GeomFromText(@mpoly));\n+----------------------------------+\n| ST_Area(ST_GeomFromText(@mpoly)) |\n+----------------------------------+\n|                                8 |\n+----------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_AsBinary(), ST_AsWKB()", "Description": ["\nST_AsBinary(g\n          [, options]),\n          ST_AsWKB(g\n          [, options])\n", "\n          Converts a value in internal geometry format to its WKB\n          representation and returns the binary result.\n        ", "\n          The function return value has geographic coordinates\n          (latitude, longitude) in the order specified by the spatial\n          reference system that applies to the geometry argument. An\n          optional options argument may be\n          given to override the default axis order.\n        ", "\nST_AsBinary() and\n          ST_AsWKB()\n          handle their arguments as described in the introduction to\n          this section.\n        ", "Press CTRL+C to copy mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)', 4326);\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g)));\n+-----------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g))) |\n+-----------------------------------------+\n| LINESTRING(5 0,10 5,15 10)              |\n+-----------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat'))) |\n+----------------------------------------------------------------+\n| LINESTRING(0 5,5 10,10 15)                                     |\n+----------------------------------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long'))) |\n+----------------------------------------------------------------+\n| LINESTRING(5 0,10 5,15 10)                                     |\n+----------------------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-format-conversion-functions.html#function_st-asbinary", "Feature": ["ST_AsBinary(g\n          [, options])", "ST_AsWKB(g\n          [, options])"], "Examples": ["mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)', 4326);\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g)));\n+-----------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g))) |\n+-----------------------------------------+\n| LINESTRING(5 0,10 5,15 10)              |\n+-----------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat'))) |\n+----------------------------------------------------------------+\n| LINESTRING(0 5,5 10,10 15)                                     |\n+----------------------------------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long'))) |\n+----------------------------------------------------------------+\n| LINESTRING(5 0,10 5,15 10)                                     |\n+----------------------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_AsGeoJSON()", "Description": ["\nST_AsGeoJSON(g\n          [, max_dec_digits [,\n          options]])\n", "\n          Generates a GeoJSON object from the geometry\n          g. The object string has the\n          connection character set and collation.\n        ", "\n          If any argument is NULL, the return value\n          is NULL. If any non-NULL\n          argument is invalid, an error occurs.\n        ", "\nmax_dec_digits, if specified,\n          limits the number of decimal digits for coordinates and causes\n          rounding of output. If not specified, this argument defaults\n          to its maximum value of 232 \u2212\n          1. The minimum is 0.\n        ", "\noptions, if specified, is a\n          bitmask. The following table shows the permitted flag values.\n          If the geometry argument has an SRID of 0, no CRS object is\n          produced even for those flag values that request one.\n", "\n\nFlag Value\nMeaning\n\n0\nNo options. This is the default if options is\n                not specified.\n\n1\nAdd a bounding box to the output.\n\n2\nAdd a short-format CRS URN to the output. The default format is a short\n                format\n                (EPSG:srid).\n\n4\nAdd a long-format CRS URN\n                (urn:ogc:def:crs:EPSG::srid).\n                This flag overrides flag 2. For example, option values\n                of 5 and 7 mean the same (add a bounding box and a\n                long-format CRS URN).\n\n", "Press CTRL+C to copy mysql> SELECT ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2);\n+-------------------------------------------------------------+\n| ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2) |\n+-------------------------------------------------------------+\n| {\"type\": \"Point\", \"coordinates\": [11.11, 12.22]}            |\n+-------------------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-geojson-functions.html#function_st-asgeojson", "Feature": ["ST_AsGeoJSON(g\n          [, max_dec_digits [,\n          options]])"], "Examples": ["mysql> SELECT ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2);\n+-------------------------------------------------------------+\n| ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2) |\n+-------------------------------------------------------------+\n| {\"type\": \"Point\", \"coordinates\": [11.11, 12.22]}            |\n+-------------------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_AsText(), ST_AsWKT()", "Description": ["\nST_AsText(g [,\n          options]),\n          ST_AsWKT(g\n          [, options])\n", "\n          Converts a value in internal geometry format to its WKT\n          representation and returns the string result.\n        ", "\n          The function return value has geographic coordinates\n          (latitude, longitude) in the order specified by the spatial\n          reference system that applies to the geometry argument. An\n          optional options argument may be\n          given to override the default axis order.\n        ", "\nST_AsText() and\n          ST_AsWKT()\n          handle their arguments as described in the introduction to\n          this section.\n        ", "Press CTRL+C to copy mysql> SET @g = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,2 2,3 3)        |\n+--------------------------------+", "\n          Output for MultiPoint values includes\n          parentheses around each point. For example:\n        ", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_GeomFromText(@mp));\n+---------------------------------+\n| ST_AsText(ST_GeomFromText(@mp)) |\n+---------------------------------+\n| MULTIPOINT((1 1),(2 2),(3 3))   |\n+---------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-format-conversion-functions.html#function_st-astext", "Feature": ["ST_AsText(g [,\n          options])", "ST_AsWKT(g\n          [, options])"], "Examples": ["mysql> SET @g = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,2 2,3 3)        |\n+--------------------------------+", "mysql> SELECT ST_AsText(ST_GeomFromText(@mp));\n+---------------------------------+\n| ST_AsText(ST_GeomFromText(@mp)) |\n+---------------------------------+\n| MULTIPOINT((1 1),(2 2),(3 3))   |\n+---------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Buffer()", "Description": ["\nST_Buffer(g,\n          d [,\n          strategy1 [,\n          strategy2 [,\n          strategy3]]])\n", "\n          Returns a geometry that represents all points whose distance\n          from the geometry value g is less\n          than or equal to a distance of d.\n          The result is in the same SRS as the geometry argument.\n        ", "\n          If the geometry argument is empty,\n          ST_Buffer() returns an empty\n          geometry.\n        ", "\n          If the distance is 0,\n          ST_Buffer() returns the\n          geometry argument unchanged:\n        ", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 0));\n+------------------------------+\n| ST_AsText(ST_Buffer(@pt, 0)) |\n+------------------------------+\n| POINT(0 0)                   |\n+------------------------------+", "\n          If the geometry argument is in a Cartesian SRS:\n", "\n\nST_Buffer() supports\n              negative distances for Polygon and\n              MultiPolygon values, and for geometry\n              collections containing Polygon or\n              MultiPolygon values.\n            \n              If the result is reduced so much that it disappears, the\n              result is an empty geometry.\n            \n              An ER_WRONG_ARGUMENTS\n              error occurs for\n              ST_Buffer() with a negative\n              distance for Point,\n              MultiPoint,\n              LineString, and\n              MultiLineString values, and for\n              geometry collections not containing any\n              Polygon or\n              MultiPolygon values.\n\n", "\n          If the geometry argument is in a geographic SRS:\n", "\n\n              Prior to MySQL 8.0.26, an\n              ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n              error occurs.\n            \n              As of MySQL 8.0.26, Point geometries in\n              a geographic SRS are permitted. For\n              non-Point geometries, an\n              ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n              error still occurs.\n\n", "\n          For MySQL versions that permit geographic\n          Point geometries:\n", "\n\n              If the distance is not negative and no strategies are\n              specified, the function returns the geographic buffer of\n              the Point in its SRS. The distance\n              argument must be in the SRS distance unit (currently\n              always meters).\n            \n              If the distance is negative or any strategy (except\n              NULL) is specified, an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n\n", "\nST_Buffer() permits up to three\n          optional strategy arguments following the distance argument.\n          Strategies influence buffer computation. These arguments are\n          byte string values produced by the\n          ST_Buffer_Strategy() function,\n          to be used for point, join, and end strategies:\n", "\n\n              Point strategies apply to Point and\n              MultiPoint geometries. If no point\n              strategy is specified, the default is\n              ST_Buffer_Strategy('point_circle',\n              32).\n            \n              Join strategies apply to LineString,\n              MultiLineString,\n              Polygon, and\n              MultiPolygon geometries. If no join\n              strategy is specified, the default is\n              ST_Buffer_Strategy('join_round',\n              32).\n            \n              End strategies apply to LineString and\n              MultiLineString geometries. If no end\n              strategy is specified, the default is\n              ST_Buffer_Strategy('end_round',\n              32).\n\n", "\n          Up to one strategy of each type may be specified, and they may\n          be given in any order.\n        ", "\n          If the buffer strategies are invalid, an\n          ER_WRONG_ARGUMENTS error\n          occurs. Strategies are invalid under any of these\n          circumstances:\n", "\n\n              Multiple strategies of a given type (point, join, or end)\n              are specified.\n            \n              A value that is not a strategy (such as an arbitrary\n              binary string or a number) is passed as a strategy.\n            \n              A Point strategy is passed and the\n              geometry contains no Point or\n              MultiPoint values.\n            \n              An end or join strategy is passed and the geometry\n              contains no LineString,\n              Polygon,\n              MultiLinestring or\n              MultiPolygon values.\n\n", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt_strategy = ST_Buffer_Strategy('point_square');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 2, @pt_strategy));\n+--------------------------------------------+\n| ST_AsText(ST_Buffer(@pt, 2, @pt_strategy)) |\n+--------------------------------------------+\n| POLYGON((-2 -2,2 -2,2 2,-2 2,-2 -2))       |\n+--------------------------------------------+", "Press CTRL+C to copy mysql> SET @ls = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @end_strategy = ST_Buffer_Strategy('end_flat');\nmysql> SET @join_strategy = ST_Buffer_Strategy('join_round', 10);\nmysql> SELECT ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))\n+---------------------------------------------------------------+\n| ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))   |\n+---------------------------------------------------------------+\n| POLYGON((5 5,5 10,0 10,-3.5355339059327373 8.535533905932738, |\n| -5 5,-5 0,0 0,5 0,5 5))                                       |\n+---------------------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html#function_st-buffer", "Feature": ["ST_Buffer(g,\n          d [,\n          strategy1 [,\n          strategy2 [,\n          strategy3]]])"], "Examples": ["mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 0));\n+------------------------------+\n| ST_AsText(ST_Buffer(@pt, 0)) |\n+------------------------------+\n| POINT(0 0)                   |\n+------------------------------+", "mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt_strategy = ST_Buffer_Strategy('point_square');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 2, @pt_strategy));\n+--------------------------------------------+\n| ST_AsText(ST_Buffer(@pt, 2, @pt_strategy)) |\n+--------------------------------------------+\n| POLYGON((-2 -2,2 -2,2 2,-2 2,-2 -2))       |\n+--------------------------------------------+", "mysql> SET @ls = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @end_strategy = ST_Buffer_Strategy('end_flat');\nmysql> SET @join_strategy = ST_Buffer_Strategy('join_round', 10);\nmysql> SELECT ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))\n+---------------------------------------------------------------+\n| ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))   |\n+---------------------------------------------------------------+\n| POLYGON((5 5,5 10,0 10,-3.5355339059327373 8.535533905932738, |\n| -5 5,-5 0,0 0,5 0,5 5))                                       |\n+---------------------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Buffer_Strategy()", "Description": ["\nST_Buffer_Strategy(strategy\n          [, points_per_circle])\n", "\n          This function returns a strategy byte string for use with\n          ST_Buffer() to influence buffer\n          computation.\n        ", "\n          Information about strategies is available at\n          Boost.org.\n        ", "\n          The first argument must be a string indicating a strategy\n          option:\n", "\n\n              For point strategies, permitted values are\n              'point_circle' and\n              'point_square'.\n            \n              For join strategies, permitted values are\n              'join_round' and\n              'join_miter'.\n            \n              For end strategies, permitted values are\n              'end_round' and\n              'end_flat'.\n\n", "\n          If the first argument is 'point_circle',\n          'join_round',\n          'join_miter', or\n          'end_round', the\n          points_per_circle argument must be\n          given as a positive numeric value. The maximum\n          points_per_circle value is the\n          value of the\n          max_points_in_geometry system\n          variable.\n        ", "\n          For examples, see the description of\n          ST_Buffer().\n        ", "\nST_Buffer_Strategy() handles\n          its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If any argument is invalid, an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n            \n              If the first argument is 'point_square'\n              or 'end_flat', the\n              points_per_circle argument must\n              not be given or an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html#function_st-buffer-strategy", "Feature": ["ST_Buffer_Strategy(strategy\n          [, points_per_circle])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Centroid()", "Description": ["\nST_Centroid({poly|mpoly})\n", "\n            Returns the mathematical centroid for the\n            Polygon or\n            MultiPolygon argument as a\n            Point. The result is not guaranteed to be\n            on the MultiPolygon.\n          ", "\n            This function processes geometry collections by computing\n            the centroid point for components of highest dimension in\n            the collection. Such components are extracted and made into\n            a single MultiPolygon,\n            MultiLineString, or\n            MultiPoint for centroid computation.\n          ", "\nST_Centroid() handles its\n            arguments as described in the introduction to this section,\n            with these exceptions:\n", "\n\n                The return value is NULL for the\n                additional condition that the argument is an empty\n                geometry collection.\n              \n                If the geometry has an SRID value for a geographic\n                spatial reference system (SRS), an\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs.\n\n", "Press CTRL+C to copy mysql> SET @poly =\n       ST_GeomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7,5 5))');\nmysql> SELECT ST_GeometryType(@poly),ST_AsText(ST_Centroid(@poly));\n+------------------------+--------------------------------------------+\n| ST_GeometryType(@poly) | ST_AsText(ST_Centroid(@poly))              |\n+------------------------+--------------------------------------------+\n| POLYGON                | POINT(4.958333333333333 4.958333333333333) |\n+------------------------+--------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html#function_st-centroid", "Feature": ["ST_Centroid({poly|mpoly})"], "Examples": ["mysql> SET @poly =\n       ST_GeomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7,5 5))');\nmysql> SELECT ST_GeometryType(@poly),ST_AsText(ST_Centroid(@poly));\n+------------------------+--------------------------------------------+\n| ST_GeometryType(@poly) | ST_AsText(ST_Centroid(@poly))              |\n+------------------------+--------------------------------------------+\n| POLYGON                | POINT(4.958333333333333 4.958333333333333) |\n+------------------------+--------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Collect()", "Description": ["\nST_Collect([DISTINCT]\n          g)\n          [over_clause]\n", "\n          Aggregates geometry values and returns a single geometry\n          collection value. With the DISTINCT option,\n          returns the aggregation of the distinct geometry arguments.\n        ", "\n          As with other aggregate functions, GROUP BY\n          may be used to group arguments into subsets.\n          ST_Collect() returns an\n          aggregate value for each subset.\n        ", "\n          This function executes as a window function if\n          over_clause is present.\n          over_clause is as described in\n          Section\u00a014.20.2, \u201cWindow Function Concepts and Syntax\u201d. In contrast to most\n          aggregate functions that support windowing,\n          ST_Collect() permits use of\n          over_clause together with\n          DISTINCT.\n        ", "\nST_Collect() handles its\n          arguments as follows:\n", "\n\nNULL arguments are ignored.\n            \n              If all arguments are NULL or the\n              aggregate result is empty, the return value is\n              NULL.\n            \n              If any geometry argument is not a syntactically\n              well-formed geometry, an\n              ER_GIS_INVALID_DATA error\n              occurs.\n            \n              If any geometry argument is a syntactically well-formed\n              geometry in an undefined spatial reference system (SRS),\n              an ER_SRS_NOT_FOUND error\n              occurs.\n            \n              If there are multiple geometry arguments and those\n              arguments are in the same SRS, the return value is in that\n              SRS. If those arguments are not in the same SRS, an\n              ER_GIS_DIFFERENT_SRIDS_AGGREGATION\n              error occurs.\n            \n              The result is the narrowest\n              MultiXxx or\n              GeometryCollection value possible, with\n              the result type determined from the\n              non-NULL geometry arguments as follows:\n\n\n\n                  If all arguments are Point values,\n                  the result is a MultiPoint value.\n                \n                  If all arguments are LineString\n                  values, the result is a\n                  MultiLineString value.\n                \n                  If all arguments are Polygon\n                  values, the result is a\n                  MultiPolygon value.\n                \n                  Otherwise, the arguments are a mix of geometry types\n                  and the result is a\n                  GeometryCollection value.\n\n\n\n", "\n          This example data set shows hypothetical products by year and\n          location of manufacture:\n        ", "Press CTRL+C to copy CREATE TABLE product (\n  year INTEGER,\n  product VARCHAR(256),\n  location Geometry\n);\n\nINSERT INTO product\n(year,  product,     location) VALUES\n(2000, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2000, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"Abacus\"    , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"TV\"        , ST_GeomFromText('point(38  60)',4326)),\n(2001, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2001, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326));", "\n          Some sample queries using\n          ST_Collect() on the data set:\n        ", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_Collect(location)) AS result\n       FROM product;\n+------------------------------------------------------------------+\n| result                                                           |\n+------------------------------------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60),(60 -24),(28 -77)) |\n+------------------------------------------------------------------+\n\nmysql> SELECT ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product;\n+---------------------------------------+\n| result                                |\n+---------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(38 60)) |\n+---------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(location)) AS result\n       FROM product GROUP BY year;\n+------+------------------------------------------------+\n| year | result                                         |\n+------+------------------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))                  |\n+------+------------------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product GROUP BY year;\n+------+---------------------------------------+\n| year | result                                |\n+------+---------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))         |\n+------+---------------------------------------+\n\n# selects nothing\nmysql> SELECT ST_Collect(location) AS result\n       FROM product WHERE year = 1999;\n+--------+\n| result |\n+--------+\n| NULL   |\n+--------+\n\nmysql> SELECT ST_AsText(ST_Collect(location)\n         OVER (ORDER BY year, product ROWS BETWEEN 1 PRECEDING AND CURRENT ROW))\n         AS result\n       FROM product;\n+-------------------------------+\n| result                        |\n+-------------------------------+\n| MULTIPOINT((28 -77))          |\n| MULTIPOINT((28 -77),(60 -24)) |\n| MULTIPOINT((60 -24),(28 -77)) |\n| MULTIPOINT((28 -77),(38 60))  |\n| MULTIPOINT((38 60),(60 -24))  |\n| MULTIPOINT((60 -24),(28 -77)) |\n+-------------------------------+", "\n          This function was added in MySQL 8.0.24.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-aggregate-functions.html#function_st-collect", "Feature": ["ST_Collect([DISTINCT]\n          g)\n          [over_clause]"], "Examples": ["CREATE TABLE product (\n  year INTEGER,\n  product VARCHAR(256),\n  location Geometry\n);\n\nINSERT INTO product\n(year,  product,     location) VALUES\n(2000, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2000, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"Abacus\"    , ST_GeomFromText('point(28 -77)',4326)),\n(2000, \"TV\"        , ST_GeomFromText('point(38  60)',4326)),\n(2001, \"Calculator\", ST_GeomFromText('point(60 -24)',4326)),\n(2001, \"Computer\"  , ST_GeomFromText('point(28 -77)',4326));", "mysql> SELECT ST_AsText(ST_Collect(location)) AS result\n       FROM product;\n+------------------------------------------------------------------+\n| result                                                           |\n+------------------------------------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60),(60 -24),(28 -77)) |\n+------------------------------------------------------------------+\n\nmysql> SELECT ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product;\n+---------------------------------------+\n| result                                |\n+---------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(38 60)) |\n+---------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(location)) AS result\n       FROM product GROUP BY year;\n+------+------------------------------------------------+\n| year | result                                         |\n+------+------------------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))                  |\n+------+------------------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product GROUP BY year;\n+------+---------------------------------------+\n| year | result                                |\n+------+---------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))         |\n+------+---------------------------------------+\n\n# selects nothing\nmysql> SELECT ST_Collect(location) AS result\n       FROM product WHERE year = 1999;\n+--------+\n| result |\n+--------+\n| NULL   |\n+--------+\n\nmysql> SELECT ST_AsText(ST_Collect(location)\n         OVER (ORDER BY year, product ROWS BETWEEN 1 PRECEDING AND CURRENT ROW))\n         AS result\n       FROM product;\n+-------------------------------+\n| result                        |\n+-------------------------------+\n| MULTIPOINT((28 -77))          |\n| MULTIPOINT((28 -77),(60 -24)) |\n| MULTIPOINT((60 -24),(28 -77)) |\n| MULTIPOINT((28 -77),(38 60))  |\n| MULTIPOINT((38 60),(60 -24))  |\n| MULTIPOINT((60 -24),(28 -77)) |\n+-------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Contains()", "Description": ["\nST_Contains(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 completely contains\n            g2. This tests the opposite\n            relationship as ST_Within().\n          ", "\nST_Contains() handles its\n            arguments as described in the introduction to this section.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html#function_st-contains", "Feature": ["ST_Contains(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_ConvexHull()", "Description": ["\nST_ConvexHull(g)\n", "\n          Returns a geometry that represents the convex hull of the\n          geometry value g.\n        ", "\n          This function computes a geometry's convex hull by first\n          checking whether its vertex points are colinear. The function\n          returns a linear hull if so, a polygon hull otherwise. This\n          function processes geometry collections by extracting all\n          vertex points of all components of the collection, creating a\n          MultiPoint value from them, and computing\n          its convex hull.\n        ", "\nST_ConvexHull() handles its\n          arguments as described in the introduction to this section,\n          with this exception:\n", "\n\n              The return value is NULL for the\n              additional condition that the argument is an empty\n              geometry collection.\n\n", "Press CTRL+C to copy mysql> SET @g = 'MULTIPOINT(5 0,25 0,15 10,15 25)';\nmysql> SELECT ST_AsText(ST_ConvexHull(ST_GeomFromText(@g)));\n+-----------------------------------------------+\n| ST_AsText(ST_ConvexHull(ST_GeomFromText(@g))) |\n+-----------------------------------------------+\n| POLYGON((5 0,25 0,15 25,5 0))                 |\n+-----------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html#function_st-convexhull", "Feature": ["ST_ConvexHull(g)"], "Examples": ["mysql> SET @g = 'MULTIPOINT(5 0,25 0,15 10,15 25)';\nmysql> SELECT ST_AsText(ST_ConvexHull(ST_GeomFromText(@g)));\n+-----------------------------------------------+\n| ST_AsText(ST_ConvexHull(ST_GeomFromText(@g))) |\n+-----------------------------------------------+\n| POLYGON((5 0,25 0,15 25,5 0))                 |\n+-----------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Crosses()", "Description": ["\nST_Crosses(g1,\n            g2)\n", "\n            Two geometries spatially cross if their\n            spatial relation has the following properties:\n", "\n\n                Unless g1 and\n                g2 are both of dimension 1:\n                g1 crosses\n                g2 if the interior of\n                g2 has points in common with\n                the interior of g1, but\n                g2 does not cover the entire\n                interior of g1.\n              \n                If both g1 and\n                g2 are of dimension 1: If the\n                lines cross each other in a finite number of points\n                (that is, no common line segments, only single points in\n                common).\n\n", "\n            This function returns 1 or 0 to indicate whether\n            g1 spatially crosses\n            g2.\n          ", "\nST_Crosses() handles its\n            arguments as described in the introduction to this section\n            except that the return value is NULL for\n            these additional conditions:\n", "\n\ng1 is of dimension 2\n                (Polygon or\n                MultiPolygon).\n              \ng2 is of dimension 1\n                (Point or\n                MultiPoint).\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html#function_st-crosses", "Feature": ["ST_Crosses(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Difference()", "Description": ["\nST_Difference(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set difference of\n          the geometry values g1 and\n          g2. The result is in the same SRS\n          as the geometry arguments.\n        ", "\n          As of MySQL 8.0.26,\n          ST_Difference() permits\n          arguments in either a Cartesian or a geographic SRS. Prior to\n          MySQL 8.0.26, ST_Difference()\n          permits arguments in a Cartesian SRS only; for arguments in a\n          geographic SRS, an\n          ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n          error occurs.\n        ", "\nST_Difference() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(1 1)                         |\n+------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html#function_st-difference", "Feature": ["ST_Difference(g1,\n          g2)"], "Examples": ["mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(1 1)                         |\n+------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Dimension()", "Description": ["\nST_Dimension(g)\n", "\n            Returns the inherent dimension of the geometry value\n            g. The dimension can be \u22121,\n            0, 1, or 2. The meaning of these values is given in\n            Section\u00a013.4.2.2, \u201cGeometry Class\u201d.\n          ", "\nST_Dimension() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------------+\n| ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------------+\n|                                                    1 |\n+------------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html#function_st-dimension", "Feature": ["ST_Dimension(g)"], "Examples": ["mysql> SELECT ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------------+\n| ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------------+\n|                                                    1 |\n+------------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Disjoint()", "Description": ["\nST_Disjoint(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 is spatially disjoint from\n            (does not intersect) g2.\n          ", "\nST_Disjoint() handles its\n            arguments as described in the introduction to this section.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html#function_st-disjoint", "Feature": ["ST_Disjoint(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Distance()", "Description": ["\nST_Distance(g1,\n            g2 [,\n            unit])\n", "\n            Returns the distance between g1\n            and g2, measured in the length\n            unit of the spatial reference system (SRS) of the geometry\n            arguments, or in the unit of the optional\n            unit argument if that is\n            specified.\n          ", "\n            This function processes geometry collections by returning\n            the shortest distance among all combinations of the\n            components of the two geometry arguments.\n          ", "\nST_Distance() handles its\n            geometry arguments as described in the introduction to this\n            section, with these exceptions:\n", "\n\nST_Distance() detects\n                arguments in a geographic (ellipsoidal) spatial\n                reference system and returns the geodetic distance on\n                the ellipsoid. As of MySQL 8.0.18,\n                ST_Distance() supports\n                distance calculations for geographic SRS arguments of\n                all geometry types. Prior to MySQL 8.0.18, the only\n                permitted geographic argument types are\n                Point and Point,\n                or Point and\n                MultiPoint (in any argument order).\n                If called with other geometry type argument combinations\n                in a geographic SRS, an\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs.\n              \n                If any argument is geometrically invalid, either the\n                result is an undefined distance (that is, it can be any\n                number), or an error occurs.\n              \n                If an intermediate or final result produces\n                NaN or a negative number, an\n                ER_GIS_INVALID_DATA\n                error occurs.\n\n", "\n            As of MySQL 8.0.14,\n            ST_Distance() permits an\n            optional unit argument that\n            specifies the linear unit for the returned distance value.\n            ST_Distance() handles its\n            unit argument as described in the\n            introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('POINT(1 1)');\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)');\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|    1.4142135623730951 |\n+-----------------------+\n\nmysql> SET @g1 = ST_GeomFromText('POINT(1 1)', 4326);\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)', 4326);\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|     156874.3859490455 |\n+-----------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'metre');\n+--------------------------------+\n| ST_Distance(@g1, @g2, 'metre') |\n+--------------------------------+\n|              156874.3859490455 |\n+--------------------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'foot');\n+-------------------------------+\n| ST_Distance(@g1, @g2, 'foot') |\n+-------------------------------+\n|             514679.7439273146 |\n+-------------------------------+", "\n            For the special case of distance calculations on a sphere,\n            see the ST_Distance_Sphere()\n            function.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html#function_st-distance", "Feature": ["ST_Distance(g1,\n            g2 [,\n            unit])"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('POINT(1 1)');\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)');\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|    1.4142135623730951 |\n+-----------------------+\n\nmysql> SET @g1 = ST_GeomFromText('POINT(1 1)', 4326);\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)', 4326);\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|     156874.3859490455 |\n+-----------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'metre');\n+--------------------------------+\n| ST_Distance(@g1, @g2, 'metre') |\n+--------------------------------+\n|              156874.3859490455 |\n+--------------------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'foot');\n+-------------------------------+\n| ST_Distance(@g1, @g2, 'foot') |\n+-------------------------------+\n|             514679.7439273146 |\n+-------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Distance_Sphere()", "Description": ["\nST_Distance_Sphere(g1,\n          g2 [,\n          radius])\n", "\n          Returns the minimum spherical distance between\n          Point or MultiPoint\n          arguments on a sphere, in meters. (For general-purpose\n          distance calculations, see the\n          ST_Distance() function.) The\n          optional radius argument should be\n          given in meters.\n        ", "\n          If both geometry parameters are valid Cartesian\n          Point or MultiPoint\n          values in SRID 0, the return value is shortest distance\n          between the two geometries on a sphere with the provided\n          radius. If omitted, the default radius is 6,370,986 meters,\n          Point X and Y coordinates are interpreted as longitude and\n          latitude, respectively, in degrees.\n        ", "\n          If both geometry parameters are valid Point\n          or MultiPoint values in a geographic\n          spatial reference system (SRS), the return value is the\n          shortest distance between the two geometries on a sphere with\n          the provided radius. If omitted, the default radius is equal\n          to the mean radius, defined as (2a+b)/3, where a is the\n          semi-major axis and b is the semi-minor axis of the SRS.\n        ", "\nST_Distance_Sphere() handles\n          its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              Supported geometry argument combinations are\n              Point and Point, or\n              Point and MultiPoint\n              (in any argument order). If at least one of the geometries\n              is neither Point nor\n              MultiPoint, and its SRID is 0, an\n              ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n              error occurs. If at least one of the geometries is neither\n              Point nor\n              MultiPoint, and its SRID refers to a\n              geographic SRS, an\n              ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n              error occurs. If any geometry refers to a projected SRS,\n              an\n              ER_NOT_IMPLEMENTED_FOR_PROJECTED_SRS\n              error occurs.\n            \n              If any argument has a longitude or latitude that is out of\n              range, an error occurs:\n\n\n\n                  If a longitude value is not in the range (\u2212180,\n                  180], an\n                  ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                  error occurs\n                  (ER_LONGITUDE_OUT_OF_RANGE\n                  prior to MySQL 8.0.12).\n                \n                  If a latitude value is not in the range [\u221290,\n                  90], an\n                  ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                  error occurs\n                  (ER_LATITUDE_OUT_OF_RANGE\n                  prior to MySQL 8.0.12).\n\n\n\n              Ranges shown are in degrees. If an SRS uses another unit,\n              the range uses the corresponding values in its unit. The\n              exact range limits deviate slightly due to floating-point\n              arithmetic.\n            \n              If the radius argument is\n              present but not positive, an\n              ER_NONPOSITIVE_RADIUS\n              error occurs.\n            \n              If the distance exceeds the range of a double-precision\n              number, an\n              ER_STD_OVERFLOW_ERROR\n              error occurs.\n\n", "Press CTRL+C to copy mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(180 0)');\nmysql> SELECT ST_Distance_Sphere(@pt1, @pt2);\n+--------------------------------+\n| ST_Distance_Sphere(@pt1, @pt2) |\n+--------------------------------+\n|             20015042.813723423 |\n+--------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html#function_st-distance-sphere", "Feature": ["ST_Distance_Sphere(g1,\n          g2 [,\n          radius])"], "Examples": ["mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(180 0)');\nmysql> SELECT ST_Distance_Sphere(@pt1, @pt2);\n+--------------------------------+\n| ST_Distance_Sphere(@pt1, @pt2) |\n+--------------------------------+\n|             20015042.813723423 |\n+--------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_EndPoint()", "Description": ["\nST_EndPoint(ls)\n", "\n            Returns the Point that is the endpoint of\n            the LineString value\n            ls.\n          ", "\nST_EndPoint() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_EndPoint(ST_GeomFromText(@ls)));\n+----------------------------------------------+\n| ST_AsText(ST_EndPoint(ST_GeomFromText(@ls))) |\n+----------------------------------------------+\n| POINT(3 3)                                   |\n+----------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html#function_st-endpoint", "Feature": ["ST_EndPoint(ls)"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_EndPoint(ST_GeomFromText(@ls)));\n+----------------------------------------------+\n| ST_AsText(ST_EndPoint(ST_GeomFromText(@ls))) |\n+----------------------------------------------+\n| POINT(3 3)                                   |\n+----------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Envelope()", "Description": ["\nST_Envelope(g)\n", "\n            Returns the minimum bounding rectangle (MBR) for the\n            geometry value g. The result is\n            returned as a Polygon value that is\n            defined by the corner points of the bounding box:\n          ", "Press CTRL+C to copy POLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)'))) |\n+----------------------------------------------------------------+\n| POLYGON((1 1,2 1,2 2,1 2,1 1))                                 |\n+----------------------------------------------------------------+", "\n            If the argument is a point or a vertical or horizontal line\n            segment, ST_Envelope()\n            returns the point or the line segment as its MBR rather than\n            returning an invalid polygon:\n          ", "Press CTRL+C to copy mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)'))) |\n+----------------------------------------------------------------+\n| LINESTRING(1 1,1 2)                                            |\n+----------------------------------------------------------------+", "\nST_Envelope() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                If the geometry has an SRID value for a geographic\n                spatial reference system (SRS), an\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html#function_st-envelope", "Feature": ["ST_Envelope(g)"], "Examples": ["mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)'))) |\n+----------------------------------------------------------------+\n| POLYGON((1 1,2 1,2 2,1 2,1 1))                                 |\n+----------------------------------------------------------------+", "mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)'))) |\n+----------------------------------------------------------------+\n| LINESTRING(1 1,1 2)                                            |\n+----------------------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Equals()", "Description": ["\nST_Equals(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 is spatially equal to\n            g2.\n          ", "\nST_Equals() handles its\n            arguments as described in the introduction to this section,\n            except that it does not return NULL for\n            empty geometry arguments.\n          ", "Press CTRL+C to copy mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);\n+---------------------+---------------------+\n| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |\n+---------------------+---------------------+\n|                   1 |                   0 |\n+---------------------+---------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html#function_st-equals", "Feature": ["ST_Equals(g1,\n            g2)"], "Examples": ["mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);\n+---------------------+---------------------+\n| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |\n+---------------------+---------------------+\n|                   1 |                   0 |\n+---------------------+---------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_ExteriorRing()", "Description": ["\nST_ExteriorRing(poly)\n", "\n            Returns the exterior ring of the Polygon\n            value poly as a\n            LineString.\n          ", "\nST_ExteriorRing() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly)));\n+----------------------------------------------------+\n| ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly))) |\n+----------------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)                    |\n+----------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html#function_st-exteriorring", "Feature": ["ST_ExteriorRing(poly)"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly)));\n+----------------------------------------------------+\n| ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly))) |\n+----------------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)                    |\n+----------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_FrechetDistance()", "Description": ["\nST_FrechetDistance(g1,\n            g2 [,\n            unit])\n", "\n            Returns the discrete Fr\u00e9chet distance between two\n            geometries, reflecting how similar the geometries are. The\n            result is a double-precision number measured in the length\n            unit of the spatial reference system (SRS) of the geometry\n            arguments, or in the length unit of the\n            unit argument if that argument is\n            given.\n          ", "\n            This function implements the discrete Fr\u00e9chet distance,\n            which means it is restricted to distances between the points\n            of the geometries. For example, given two\n            LineString arguments, only the points\n            explicitly mentioned in the geometries are considered.\n            Points on the line segments between these points are not\n            considered.\n          ", "\nST_FrechetDistance() handles\n            its geometry arguments as described in the introduction to\n            this section, with these exceptions:\n", "\n\n                The geometries may have a Cartesian or geographic SRS,\n                but only LineString values are\n                supported. If the arguments are in the same Cartesian or\n                geographic SRS, but either is not a\n                LineString, an\n                ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n                or\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs, depending on the SRS type.\n\n", "\nST_FrechetDistance() handles\n            its optional unit argument as\n            described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|             2.8284271247461903 |\n+--------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|              313421.1999416798 |\n+--------------------------------+\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2, 'foot');\n+----------------------------------------+\n| ST_FrechetDistance(@ls1, @ls2, 'foot') |\n+----------------------------------------+\n|                     1028284.7767115477 |\n+----------------------------------------+", "\n            This function was added in MySQL 8.0.23.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html#function_st-frechetdistance", "Feature": ["ST_FrechetDistance(g1,\n            g2 [,\n            unit])"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|             2.8284271247461903 |\n+--------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|              313421.1999416798 |\n+--------------------------------+\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2, 'foot');\n+----------------------------------------+\n| ST_FrechetDistance(@ls1, @ls2, 'foot') |\n+----------------------------------------+\n|                     1028284.7767115477 |\n+----------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_GeoHash()", "Description": ["\nST_GeoHash(longitude,\n          latitude,\n          max_length),\n          ST_GeoHash(point,\n          max_length)\n", "\n          Returns a geohash string in the connection character set and\n          collation.\n        ", "\n          For the first syntax, the longitude\n          must be a number in the range [\u2212180, 180], and the\n          latitude must be a number in the\n          range [\u221290, 90]. For the second syntax, a\n          POINT value is required, where the X and Y\n          coordinates are in the valid ranges for longitude and\n          latitude, respectively.\n        ", "\n          The resulting string is no longer than\n          max_length characters, which has an\n          upper limit of 100. The string might be shorter than\n          max_length characters because the\n          algorithm that creates the geohash value continues until it\n          has created a string that is either an exact representation of\n          the location or max_length\n          characters, whichever comes first.\n        ", "\nST_GeoHash() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SELECT ST_GeoHash(180,0,10), ST_GeoHash(-180,-90,15);\n+----------------------+-------------------------+\n| ST_GeoHash(180,0,10) | ST_GeoHash(-180,-90,15) |\n+----------------------+-------------------------+\n| xbpbpbpbpb           | 000000000000000         |\n+----------------------+-------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html#function_st-geohash", "Feature": ["ST_GeoHash(longitude,\n          latitude,\n          max_length)", "ST_GeoHash(point,\n          max_length)"], "Examples": ["mysql> SELECT ST_GeoHash(180,0,10), ST_GeoHash(-180,-90,15);\n+----------------------+-------------------------+\n| ST_GeoHash(180,0,10) | ST_GeoHash(-180,-90,15) |\n+----------------------+-------------------------+\n| xbpbpbpbpb           | 000000000000000         |\n+----------------------+-------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_GeomCollFromText(), ST_GeometryCollectionFromText(), ST_GeomCollFromTxt()", "Description": ["\nST_GeomCollFromText(wkt\n          [, srid [,\n          options]]),\n          ST_GeometryCollectionFromText(wkt\n          [, srid [,\n          options]]),\n          ST_GeomCollFromTxt(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a GeometryCollection value using\n          its WKT representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g = \"MULTILINESTRING((10 10, 11 11), (9 9, 10 10))\";\nmysql> SELECT ST_AsText(ST_GeomCollFromText(@g));\n+--------------------------------------------+\n| ST_AsText(ST_GeomCollFromText(@g))         |\n+--------------------------------------------+\n| MULTILINESTRING((10 10,11 11),(9 9,10 10)) |\n+--------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-geomcollfromtext", "Feature": ["ST_GeomCollFromText(wkt\n          [, srid [,\n          options]])", "ST_GeometryCollectionFromText(wkt\n          [, srid [,\n          options]])", "ST_GeomCollFromTxt(wkt\n          [, srid [,\n          options]])"], "Examples": ["mysql> SET @g = \"MULTILINESTRING((10 10, 11 11), (9 9, 10 10))\";\nmysql> SELECT ST_AsText(ST_GeomCollFromText(@g));\n+--------------------------------------------+\n| ST_AsText(ST_GeomCollFromText(@g))         |\n+--------------------------------------------+\n| MULTILINESTRING((10 10,11 11),(9 9,10 10)) |\n+--------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_GeomCollFromWKB(), ST_GeometryCollectionFromWKB()", "Description": ["\nST_GeomCollFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_GeometryCollectionFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a GeometryCollection value using\n          its WKB representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html#function_st-geomcollfromwkb", "Feature": ["ST_GeomCollFromWKB(wkb\n          [, srid [,\n          options]])", "ST_GeometryCollectionFromWKB(wkb\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_GeometryN()", "Description": ["\nST_GeometryN(gc,\n            N)\n", "\n            Returns the N-th geometry in the\n            GeometryCollection value\n            gc. Geometries are numbered\n            beginning with 1.\n          ", "\nST_GeometryN() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1));\n+-------------------------------------------------+\n| ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1)) |\n+-------------------------------------------------+\n| POINT(1 1)                                      |\n+-------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-geometrycollection-property-functions.html#function_st-geometryn", "Feature": ["ST_GeometryN(gc,\n            N)"], "Examples": ["mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1));\n+-------------------------------------------------+\n| ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1)) |\n+-------------------------------------------------+\n| POINT(1 1)                                      |\n+-------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_GeometryType()", "Description": ["\nST_GeometryType(g)\n", "\n            Returns a binary string indicating the name of the geometry\n            type of which the geometry instance\n            g is a member. The name\n            corresponds to one of the instantiable\n            Geometry subclasses.\n          ", "\nST_GeometryType() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_GeometryType(ST_GeomFromText('POINT(1 1)'));\n+------------------------------------------------+\n| ST_GeometryType(ST_GeomFromText('POINT(1 1)')) |\n+------------------------------------------------+\n| POINT                                          |\n+------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html#function_st-geometrytype", "Feature": ["ST_GeometryType(g)"], "Examples": ["mysql> SELECT ST_GeometryType(ST_GeomFromText('POINT(1 1)'));\n+------------------------------------------------+\n| ST_GeometryType(ST_GeomFromText('POINT(1 1)')) |\n+------------------------------------------------+\n| POINT                                          |\n+------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_GeomFromGeoJSON()", "Description": ["\nST_GeomFromGeoJSON(str\n          [, options [,\n          srid]])\n", "\n          Parses a string str representing a\n          GeoJSON object and returns a geometry.\n        ", "\n          If any argument is NULL, the return value\n          is NULL. If any non-NULL\n          argument is invalid, an error occurs.\n        ", "\noptions, if given, describes how to\n          handle GeoJSON documents that contain geometries with\n          coordinate dimensions higher than 2. The following table shows\n          the permitted options values.\n", "\n\nOption Value\nMeaning\n\n1\nReject the document and produce an error. This is the default if\n                options is not specified.\n\n2, 3, 4\nAccept the document and strip off the coordinates for higher coordinate\n                dimensions.\n\n", "\noptions values of 2, 3, and 4\n          currently produce the same effect. If geometries with\n          coordinate dimensions higher than 2 are supported in the\n          future, you can expect these values to produce different\n          effects.\n        ", "\n          The srid argument, if given, must\n          be a 32-bit unsigned integer. If not given, the geometry\n          return value has an SRID of 4326.\n        ", "\n          If srid refers to an undefined\n          spatial reference system (SRS), an\n          ER_SRS_NOT_FOUND error occurs.\n        ", "\n          For geographic SRS geometry arguments, if any argument has a\n          longitude or latitude that is out of range, an error occurs:\n", "\n\n              If a longitude value is not in the range (\u2212180,\n              180], an\n              ER_LONGITUDE_OUT_OF_RANGE\n              error occurs.\n            \n              If a latitude value is not in the range [\u221290, 90],\n              an\n              ER_LATITUDE_OUT_OF_RANGE\n              error occurs.\n\n", "\n          Ranges shown are in degrees. If an SRS uses another unit, the\n          range uses the corresponding values in its unit. The exact\n          range limits deviate slightly due to floating-point\n          arithmetic.\n        ", "\n          GeoJSON geometry, feature, and feature collection objects may\n          have a crs property. The parsing function\n          parses named CRS URNs in the\n          urn:ogc:def:crs:EPSG::srid\n          and EPSG:srid\n          namespaces, but not CRSs given as link objects. Also,\n          urn:ogc:def:crs:OGC:1.3:CRS84 is recognized\n          as SRID 4326. If an object has a CRS that is not understood,\n          an error occurs, with the exception that if the optional\n          srid argument is given, any CRS is\n          ignored even if it is invalid.\n        ", "\n          If a crs member that specifies an SRID\n          different from the top-level object SRID is found at a lower\n          level of the GeoJSON document, an\n          ER_INVALID_GEOJSON_CRS_NOT_TOP_LEVEL\n          error occurs.\n        ", "\n          As specified in the GeoJSON specification, parsing is\n          case-sensitive for the type member of the\n          GeoJSON input (Point,\n          LineString, and so forth). The\n          specification is silent regarding case sensitivity for other\n          parsing, which in MySQL is not case-sensitive.\n        ", "\n          This example shows the parsing result for a simple GeoJSON\n          object. Observe that the order of coordinates depends on the\n          SRID used.\n        ", "Press CTRL+C to copy mysql> SET @json = '{ \"type\": \"Point\", \"coordinates\": [102.0, 0.0]}';\nmysql> SELECT ST_AsText(ST_GeomFromGeoJSON(@json));\n+--------------------------------------+\n| ST_AsText(ST_GeomFromGeoJSON(@json)) |\n+--------------------------------------+\n| POINT(0 102)                         |\n+--------------------------------------+\nmysql> SELECT ST_SRID(ST_GeomFromGeoJSON(@json));\n+------------------------------------+\n| ST_SRID(ST_GeomFromGeoJSON(@json)) |\n+------------------------------------+\n|                               4326 |\n+------------------------------------+\nmysql> SELECT ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0));\n+-------------------------------------------------+\n| ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0)) |\n+-------------------------------------------------+\n| POINT(102 0)                                    |\n+-------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-geojson-functions.html#function_st-geomfromgeojson", "Feature": ["ST_GeomFromGeoJSON(str\n          [, options [,\n          srid]])"], "Examples": ["mysql> SET @json = '{ \"type\": \"Point\", \"coordinates\": [102.0, 0.0]}';\nmysql> SELECT ST_AsText(ST_GeomFromGeoJSON(@json));\n+--------------------------------------+\n| ST_AsText(ST_GeomFromGeoJSON(@json)) |\n+--------------------------------------+\n| POINT(0 102)                         |\n+--------------------------------------+\nmysql> SELECT ST_SRID(ST_GeomFromGeoJSON(@json));\n+------------------------------------+\n| ST_SRID(ST_GeomFromGeoJSON(@json)) |\n+------------------------------------+\n|                               4326 |\n+------------------------------------+\nmysql> SELECT ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0));\n+-------------------------------------------------+\n| ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0)) |\n+-------------------------------------------------+\n| POINT(102 0)                                    |\n+-------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_GeomFromText(), ST_GeometryFromText()", "Description": ["\nST_GeomFromText(wkt\n          [, srid [,\n          options]]),\n          ST_GeometryFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a geometry value of any type using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-geomfromtext", "Feature": ["ST_GeomFromText(wkt\n          [, srid [,\n          options]])", "ST_GeometryFromText(wkt\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_GeomFromWKB(), ST_GeometryFromWKB()", "Description": ["\nST_GeomFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_GeometryFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a geometry value of any type using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html#function_st-geomfromwkb", "Feature": ["ST_GeomFromWKB(wkb\n          [, srid [,\n          options]])", "ST_GeometryFromWKB(wkb\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_HausdorffDistance()", "Description": ["\nST_HausdorffDistance(g1,\n            g2 [,\n            unit])\n", "\n            Returns the discrete Hausdorff distance between two\n            geometries, reflecting how similar the geometries are. The\n            result is a double-precision number measured in the length\n            unit of the spatial reference system (SRS) of the geometry\n            arguments, or in the length unit of the\n            unit argument if that argument is\n            given.\n          ", "\n            This function implements the discrete Hausdorff distance,\n            which means it is restricted to distances between the points\n            of the geometries. For example, given two\n            LineString arguments, only the points\n            explicitly mentioned in the geometries are considered.\n            Points on the line segments between these points are not\n            considered.\n          ", "\nST_HausdorffDistance()\n            handles its geometry arguments as described in the\n            introduction to this section, with these exceptions:\n", "\n\n                If the geometry arguments are in the same Cartesian or\n                geographic SRS, but are not in a supported combination,\n                an\n                ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n                or\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs, depending on the SRS type. These\n                combinations are supported:\n\n\n\nLineString and\n                    LineString\n\nPoint and\n                    MultiPoint\n\nLineString and\n                    MultiLineString\n\nMultiPoint and\n                    MultiPoint\n\nMultiLineString and\n                    MultiLineString\n\n\n\n", "\nST_HausdorffDistance()\n            handles its optional unit\n            argument as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|                                1 |\n+----------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|               111319.49079326246 |\n+----------------------------------+\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2, 'foot');\n+------------------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2, 'foot') |\n+------------------------------------------+\n|                        365221.4264870815 |\n+------------------------------------------+", "\n            This function was added in MySQL 8.0.23.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html#function_st-hausdorffdistance", "Feature": ["ST_HausdorffDistance(g1,\n            g2 [,\n            unit])"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|                                1 |\n+----------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|               111319.49079326246 |\n+----------------------------------+\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2, 'foot');\n+------------------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2, 'foot') |\n+------------------------------------------+\n|                        365221.4264870815 |\n+------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_InteriorRingN()", "Description": ["\nST_InteriorRingN(poly,\n            N)\n", "\n            Returns the N-th interior ring\n            for the Polygon value\n            poly as a\n            LineString. Rings are numbered beginning\n            with 1.\n          ", "\nST_InteriorRingN() handles\n            its arguments as described in the introduction to this\n            section.\n          ", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1));\n+-------------------------------------------------------+\n| ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1)) |\n+-------------------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)                       |\n+-------------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html#function_st-interiorringn", "Feature": ["ST_InteriorRingN(poly,\n            N)"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1));\n+-------------------------------------------------------+\n| ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1)) |\n+-------------------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)                       |\n+-------------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Intersection()", "Description": ["\nST_Intersection(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set intersection\n          of the geometry values g1 and\n          g2. The result is in the same SRS\n          as the geometry arguments.\n        ", "\n          As of MySQL 8.0.27,\n          ST_Intersection() permits\n          arguments in either a Cartesian or a geographic SRS. Prior to\n          MySQL 8.0.27, ST_Intersection()\n          permits arguments in a Cartesian SRS only; for arguments in a\n          geographic SRS, an\n          ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n          error occurs.\n        ", "\nST_Intersection() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Intersection(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Intersection(@g1, @g2)) |\n+--------------------------------------+\n| POINT(2 2)                           |\n+--------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html#function_st-intersection", "Feature": ["ST_Intersection(g1,\n          g2)"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Intersection(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Intersection(@g1, @g2)) |\n+--------------------------------------+\n| POINT(2 2)                           |\n+--------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Intersects()", "Description": ["\nST_Intersects(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 spatially intersects\n            g2.\n          ", "\nST_Intersects() handles its\n            arguments as described in the introduction to this section.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html#function_st-intersects", "Feature": ["ST_Intersects(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_IsClosed()", "Description": ["\nST_IsClosed(ls)\n", "\n            For a LineString value\n            ls,\n            ST_IsClosed() returns 1 if\n            ls is closed (that is, its\n            ST_StartPoint() and\n            ST_EndPoint() values are the\n            same).\n          ", "\n            For a MultiLineString value\n            ls,\n            ST_IsClosed() returns 1 if\n            ls is closed (that is, the\n            ST_StartPoint() and\n            ST_EndPoint() values are the\n            same for each LineString in\n            ls).\n          ", "\nST_IsClosed() returns 0 if\n            ls is not closed, and\n            NULL if ls is\n            NULL.\n          ", "\nST_IsClosed() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                If the geometry has an SRID value for a geographic\n                spatial reference system (SRS), an\n                ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n                error occurs.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = 'LineString(1 1,2 2,3 3,2 2)';\nmysql> SET @ls2 = 'LineString(1 1,2 2,3 3,1 1)';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls1));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls1)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls2));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls2)) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n\nmysql> SET @ls3 = 'MultiLineString((1 1,2 2,3 3),(4 4,5 5))';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls3));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls3)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html#function_st-isclosed", "Feature": ["ST_IsClosed(ls)"], "Examples": ["mysql> SET @ls1 = 'LineString(1 1,2 2,3 3,2 2)';\nmysql> SET @ls2 = 'LineString(1 1,2 2,3 3,1 1)';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls1));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls1)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls2));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls2)) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n\nmysql> SET @ls3 = 'MultiLineString((1 1,2 2,3 3),(4 4,5 5))';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls3));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls3)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_IsEmpty()", "Description": ["\nST_IsEmpty(g)\n", "\n            This function is a placeholder that returns 1 for an empty\n            geometry collection value or 0 otherwise.\n          ", "\n            The only valid empty geometry is represented in the form of\n            an empty geometry collection value. MySQL does not support\n            GIS EMPTY values such as POINT\n            EMPTY.\n          ", "\nST_IsEmpty() handles its\n            arguments as described in the introduction to this section.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html#function_st-isempty", "Feature": ["ST_IsEmpty(g)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_IsSimple()", "Description": ["\nST_IsSimple(g)\n", "\n            Returns 1 if the geometry value g\n            is simple according to the ISO SQL/MM Part 3:\n            Spatial standard.\n            ST_IsSimple() returns 0 if\n            the argument is not simple.\n          ", "\n            The descriptions of the instantiable geometric classes given\n            under Section\u00a013.4.2, \u201cThe OpenGIS Geometry Model\u201d include the\n            specific conditions that cause class instances to be\n            classified as not simple.\n          ", "\nST_IsSimple() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                If the geometry has a geographic SRS with a longitude or\n                latitude that is out of range, an error occurs:\n\n\n\n                    If a longitude value is not in the range\n                    (\u2212180, 180], an\n                    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                    error occurs\n                    (ER_LONGITUDE_OUT_OF_RANGE\n                    prior to MySQL 8.0.12).\n                  \n                    If a latitude value is not in the range [\u221290,\n                    90], an\n                    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                    error occurs\n                    (ER_LATITUDE_OUT_OF_RANGE\n                    prior to MySQL 8.0.12).\n\n\n\n                Ranges shown are in degrees. The exact range limits\n                deviate slightly due to floating-point arithmetic.\n\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html#function_st-issimple", "Feature": ["ST_IsSimple(g)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_IsValid()", "Description": ["\nST_IsValid(g)\n", "\n          Returns 1 if the argument is geometrically valid, 0 if the\n          argument is not geometrically valid. Geometry validity is\n          defined by the OGC specification.\n        ", "\n          The only valid empty geometry is represented in the form of an\n          empty geometry collection value.\n          ST_IsValid() returns 1 in this\n          case. MySQL does not support GIS EMPTY\n          values such as POINT EMPTY.\n        ", "\nST_IsValid() handles its\n          arguments as described in the introduction to this section,\n          with this exception:\n", "\n\n              If the geometry has a geographic SRS with a longitude or\n              latitude that is out of range, an error occurs:\n\n\n\n                  If a longitude value is not in the range (\u2212180,\n                  180], an\n                  ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                  error occurs\n                  (ER_LONGITUDE_OUT_OF_RANGE\n                  prior to MySQL 8.0.12).\n                \n                  If a latitude value is not in the range [\u221290,\n                  90], an\n                  ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                  error occurs\n                  (ER_LATITUDE_OUT_OF_RANGE\n                  prior to MySQL 8.0.12).\n\n\n\n              Ranges shown are in degrees. If an SRS uses another unit,\n              the range uses the corresponding values in its unit. The\n              exact range limits deviate slightly due to floating-point\n              arithmetic.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,-0.00 0,0.0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_IsValid(@ls1);\n+------------------+\n| ST_IsValid(@ls1) |\n+------------------+\n|                0 |\n+------------------+\nmysql> SELECT ST_IsValid(@ls2);\n+------------------+\n| ST_IsValid(@ls2) |\n+------------------+\n|                1 |\n+------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html#function_st-isvalid", "Feature": ["ST_IsValid(g)"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,-0.00 0,0.0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_IsValid(@ls1);\n+------------------+\n| ST_IsValid(@ls1) |\n+------------------+\n|                0 |\n+------------------+\nmysql> SELECT ST_IsValid(@ls2);\n+------------------+\n| ST_IsValid(@ls2) |\n+------------------+\n|                1 |\n+------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_LatFromGeoHash()", "Description": ["\nST_LatFromGeoHash(geohash_str)\n", "\n          Returns the latitude from a geohash string value, as a\n          double-precision number in the range [\u221290, 90].\n        ", "\n          The ST_LatFromGeoHash()\n          decoding function reads no more than 433 characters from the\n          geohash_str argument. That\n          represents the upper limit on information in the internal\n          representation of coordinate values. Characters past the 433rd\n          are ignored, even if they are otherwise illegal and produce an\n          error.\n        ", "\nST_LatFromGeoHash() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SELECT ST_LatFromGeoHash(ST_GeoHash(45,-20,10));\n+------------------------------------------+\n| ST_LatFromGeoHash(ST_GeoHash(45,-20,10)) |\n+------------------------------------------+\n|                                      -20 |\n+------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html#function_st-latfromgeohash", "Feature": ["ST_LatFromGeoHash(geohash_str)"], "Examples": ["mysql> SELECT ST_LatFromGeoHash(ST_GeoHash(45,-20,10));\n+------------------------------------------+\n| ST_LatFromGeoHash(ST_GeoHash(45,-20,10)) |\n+------------------------------------------+\n|                                      -20 |\n+------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Latitude()", "Description": ["\nST_Latitude(p\n            [, new_latitude_val])\n", "\n            With a single argument representing a valid\n            Point object p\n            that has a geographic spatial reference system (SRS),\n            ST_Latitude() returns the\n            latitude value of p as a\n            double-precision number.\n          ", "\n            With the optional second argument representing a valid\n            latitude value, ST_Latitude()\n            returns a Point object like the first\n            argument with its latitude equal to the second argument.\n          ", "\nST_Latitude() handles its\n            arguments as described in the introduction to this section,\n            with the addition that if the Point\n            object is valid but does not have a geographic SRS, an\n            ER_SRS_NOT_GEOGRAPHIC error\n            occurs.\n          ", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Latitude(@pt);\n+------------------+\n| ST_Latitude(@pt) |\n+------------------+\n|               45 |\n+------------------+\nmysql> SELECT ST_AsText(ST_Latitude(@pt, 10));\n+---------------------------------+\n| ST_AsText(ST_Latitude(@pt, 10)) |\n+---------------------------------+\n| POINT(10 90)                    |\n+---------------------------------+", "\n            This function was added in MySQL 8.0.12.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html#function_st-latitude", "Feature": ["ST_Latitude(p\n            [, new_latitude_val])"], "Examples": ["mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Latitude(@pt);\n+------------------+\n| ST_Latitude(@pt) |\n+------------------+\n|               45 |\n+------------------+\nmysql> SELECT ST_AsText(ST_Latitude(@pt, 10));\n+---------------------------------+\n| ST_AsText(ST_Latitude(@pt, 10)) |\n+---------------------------------+\n| POINT(10 90)                    |\n+---------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Length()", "Description": ["\nST_Length(ls\n            [, unit])\n", "\n            Returns a double-precision number indicating the length of\n            the LineString or\n            MultiLineString value\n            ls in its associated spatial\n            reference system. The length of a\n            MultiLineString value is equal to the sum\n            of the lengths of its elements.\n          ", "\nST_Length() computes a result\n            as follows:\n", "\n\n                If the geometry is a valid LineString\n                in a Cartesian SRS, the return value is the Cartesian\n                length of the geometry.\n              \n                If the geometry is a valid\n                MultiLineString in a Cartesian SRS,\n                the return value is the sum of the Cartesian lengths of\n                its elements.\n              \n                If the geometry is a valid LineString\n                in a geographic SRS, the return value is the geodetic\n                length of the geometry in that SRS, in meters.\n              \n                If the geometry is a valid\n                MultiLineString in a geographic SRS,\n                the return value is the sum of the geodetic lengths of\n                its elements in that SRS, in meters.\n\n", "\nST_Length() handles its\n            arguments as described in the introduction to this section,\n            with these exceptions:\n", "\n\n                If the geometry is not a LineString\n                or MultiLineString, the return value\n                is NULL.\n              \n                If the geometry is geometrically invalid, either the\n                result is an undefined length (that is, it can be any\n                number), or an error occurs.\n              \n                If the length computation result is\n                +inf, an\n                ER_DATA_OUT_OF_RANGE\n                error occurs.\n              \n                If the geometry has a geographic SRS with a longitude or\n                latitude that is out of range, an error occurs:\n\n\n\n                    If a longitude value is not in the range\n                    (\u2212180, 180], an\n                    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                    error occurs\n                    (ER_LONGITUDE_OUT_OF_RANGE\n                    prior to MySQL 8.0.12).\n                  \n                    If a latitude value is not in the range [\u221290,\n                    90], an\n                    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                    error occurs\n                    (ER_LATITUDE_OUT_OF_RANGE\n                    prior to MySQL 8.0.12).\n\n\n\n                Ranges shown are in degrees. The exact range limits\n                deviate slightly due to floating-point arithmetic.\n\n", "\n            As of MySQL 8.0.16,\n            ST_Length() permits an\n            optional unit argument that\n            specifies the linear unit for the returned length value.\n            These rules apply:\n", "\n\n                If a unit is specified but not supported by MySQL, an\n                ER_UNIT_NOT_FOUND error\n                occurs.\n              \n                If a supported linear unit is specified and the SRID is\n                0, an\n                ER_GEOMETRY_IN_UNKNOWN_LENGTH_UNIT\n                error occurs.\n              \n                If a supported linear unit is specified and the SRID is\n                not 0, the result is in that unit.\n              \n                If a unit is not specified, the result is in the unit of\n                the SRS of the geometries, whether Cartesian or\n                geographic. Currently, all MySQL SRSs are expressed in\n                meters.\n\n", "\n            A unit is supported if it is found in the\n            INFORMATION_SCHEMA\nST_UNITS_OF_MEASURE table. See\n            Section\u00a028.3.37, \u201cThe INFORMATION_SCHEMA ST_UNITS_OF_MEASURE Table\u201d.\n          ", "Press CTRL+C to copy mysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)');\nmysql> SELECT ST_Length(@ls);\n+--------------------+\n| ST_Length(@ls)     |\n+--------------------+\n| 2.8284271247461903 |\n+--------------------+\n\nmysql> SET @mls = ST_GeomFromText('MultiLineString((1 1,2 2,3 3),(4 4,5 5))');\nmysql> SELECT ST_Length(@mls);\n+-------------------+\n| ST_Length(@mls)   |\n+-------------------+\n| 4.242640687119286 |\n+-------------------+\n\nmysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)', 4326);\nmysql> SELECT ST_Length(@ls);\n+-------------------+\n| ST_Length(@ls)    |\n+-------------------+\n| 313701.9623204328 |\n+-------------------+\nmysql> SELECT ST_Length(@ls, 'metre');\n+-------------------------+\n| ST_Length(@ls, 'metre') |\n+-------------------------+\n|       313701.9623204328 |\n+-------------------------+\nmysql> SELECT ST_Length(@ls, 'foot');\n+------------------------+\n| ST_Length(@ls, 'foot') |\n+------------------------+\n|     1029205.9131247795 |\n+------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html#function_st-length", "Feature": ["ST_Length(ls\n            [, unit])"], "Examples": ["mysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)');\nmysql> SELECT ST_Length(@ls);\n+--------------------+\n| ST_Length(@ls)     |\n+--------------------+\n| 2.8284271247461903 |\n+--------------------+\n\nmysql> SET @mls = ST_GeomFromText('MultiLineString((1 1,2 2,3 3),(4 4,5 5))');\nmysql> SELECT ST_Length(@mls);\n+-------------------+\n| ST_Length(@mls)   |\n+-------------------+\n| 4.242640687119286 |\n+-------------------+\n\nmysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)', 4326);\nmysql> SELECT ST_Length(@ls);\n+-------------------+\n| ST_Length(@ls)    |\n+-------------------+\n| 313701.9623204328 |\n+-------------------+\nmysql> SELECT ST_Length(@ls, 'metre');\n+-------------------------+\n| ST_Length(@ls, 'metre') |\n+-------------------------+\n|       313701.9623204328 |\n+-------------------------+\nmysql> SELECT ST_Length(@ls, 'foot');\n+------------------------+\n| ST_Length(@ls, 'foot') |\n+------------------------+\n|     1029205.9131247795 |\n+------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_LineFromText(), ST_LineStringFromText()", "Description": ["\nST_LineFromText(wkt\n          [, srid [,\n          options]]),\n          ST_LineStringFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a LineString value using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-linefromtext", "Feature": ["ST_LineFromText(wkt\n          [, srid [,\n          options]])", "ST_LineStringFromText(wkt\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_LineFromWKB(), ST_LineStringFromWKB()", "Description": ["\nST_LineFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_LineStringFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a LineString value using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html#function_st-linefromwkb", "Feature": ["ST_LineFromWKB(wkb\n          [, srid [,\n          options]])", "ST_LineStringFromWKB(wkb\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_LineInterpolatePoint()", "Description": ["\nST_LineInterpolatePoint(ls,\n          fractional_distance)\n", "\n          This function takes a LineString geometry\n          and a fractional distance in the range [0.0, 1.0] and returns\n          the Point along the\n          LineString at the given fraction of the\n          distance from its start point to its endpoint. It can be used\n          to answer questions such as which Point\n          lies halfway along the road described by the geometry\n          argument.\n        ", "\n          The function is implemented for LineString\n          geometries in all spatial reference systems, both Cartesian\n          and geographic.\n        ", "\n          If the fractional_distance argument\n          is 1.0, the result may not be exactly the last point of the\n          LineString argument but a point close to it\n          due to numerical inaccuracies in approximate-value\n          computations.\n        ", "\n          A related function,\n          ST_LineInterpolatePoints(),\n          takes similar arguments but returns a\n          MultiPoint consisting of\n          Point values along the\n          LineString at each fraction of the distance\n          from its start point to its endpoint. For examples of both\n          functions, see the\n          ST_LineInterpolatePoints()\n          description.\n        ", "\nST_LineInterpolatePoint()\n          handles its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If the geometry argument is not a\n              LineString, an\n              ER_UNEXPECTED_GEOMETRY_TYPE\n              error occurs.\n            \n              If the fractional distance argument is outside the range\n              [0.0, 1.0], an\n              ER_DATA_OUT_OF_RANGE error\n              occurs.\n\n", "\nST_LineInterpolatePoint() is a\n          MySQL extension to OpenGIS. This function was added in MySQL\n          8.0.24.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html#function_st-lineinterpolatepoint", "Feature": ["ST_LineInterpolatePoint(ls,\n          fractional_distance)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_LineInterpolatePoints()", "Description": ["\nST_LineInterpolatePoints(ls,\n          fractional_distance)\n", "\n          This function takes a LineString geometry\n          and a fractional distance in the range (0.0, 1.0] and returns\n          the MultiPoint consisting of the\n          LineString start point, plus\n          Point values along the\n          LineString at each fraction of the distance\n          from its start point to its endpoint. It can be used to answer\n          questions such as which Point values lie\n          every 10% of the way along the road described by the geometry\n          argument.\n        ", "\n          The function is implemented for LineString\n          geometries in all spatial reference systems, both Cartesian\n          and geographic.\n        ", "\n          If the fractional_distance argument\n          divides 1.0 with zero remainder the result may not contain the\n          last point of the LineString argument but a\n          point close to it due to numerical inaccuracies in\n          approximate-value computations.\n        ", "\n          A related function,\n          ST_LineInterpolatePoint(),\n          takes similar arguments but returns the\n          Point along the\n          LineString at the given fraction of the\n          distance from its start point to its endpoint.\n        ", "\nST_LineInterpolatePoints()\n          handles its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If the geometry argument is not a\n              LineString, an\n              ER_UNEXPECTED_GEOMETRY_TYPE\n              error occurs.\n            \n              If the fractional distance argument is outside the range\n              [0.0, 1.0], an\n              ER_DATA_OUT_OF_RANGE error\n              occurs.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .5));\n+----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .5)) |\n+----------------------------------------------+\n| POINT(0 5)                                   |\n+----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .75));\n+-----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .75)) |\n+-----------------------------------------------+\n| POINT(2.5 5)                                  |\n+-----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, 1));\n+---------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, 1)) |\n+---------------------------------------------+\n| POINT(5 5)                                  |\n+---------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoints(@ls1, .25));\n+------------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoints(@ls1, .25)) |\n+------------------------------------------------+\n| MULTIPOINT((0 2.5),(0 5),(2.5 5),(5 5))        |\n+------------------------------------------------+", "\nST_LineInterpolatePoints() is a\n          MySQL extension to OpenGIS. This function was added in MySQL\n          8.0.24.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html#function_st-lineinterpolatepoints", "Feature": ["ST_LineInterpolatePoints(ls,\n          fractional_distance)"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .5));\n+----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .5)) |\n+----------------------------------------------+\n| POINT(0 5)                                   |\n+----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .75));\n+-----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .75)) |\n+-----------------------------------------------+\n| POINT(2.5 5)                                  |\n+-----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, 1));\n+---------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, 1)) |\n+---------------------------------------------+\n| POINT(5 5)                                  |\n+---------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoints(@ls1, .25));\n+------------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoints(@ls1, .25)) |\n+------------------------------------------------+\n| MULTIPOINT((0 2.5),(0 5),(2.5 5),(5 5))        |\n+------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_LongFromGeoHash()", "Description": ["\nST_LongFromGeoHash(geohash_str)\n", "\n          Returns the longitude from a geohash string value, as a\n          double-precision number in the range [\u2212180, 180].\n        ", "\n          The remarks in the description of\n          ST_LatFromGeoHash() regarding\n          the maximum number of characters processed from the\n          geohash_str argument also apply to\n          ST_LongFromGeoHash().\n        ", "\nST_LongFromGeoHash() handles\n          its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SELECT ST_LongFromGeoHash(ST_GeoHash(45,-20,10));\n+-------------------------------------------+\n| ST_LongFromGeoHash(ST_GeoHash(45,-20,10)) |\n+-------------------------------------------+\n|                                        45 |\n+-------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html#function_st-longfromgeohash", "Feature": ["ST_LongFromGeoHash(geohash_str)"], "Examples": ["mysql> SELECT ST_LongFromGeoHash(ST_GeoHash(45,-20,10));\n+-------------------------------------------+\n| ST_LongFromGeoHash(ST_GeoHash(45,-20,10)) |\n+-------------------------------------------+\n|                                        45 |\n+-------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Longitude()", "Description": ["\nST_Longitude(p\n            [, new_longitude_val])\n", "\n            With a single argument representing a valid\n            Point object p\n            that has a geographic spatial reference system (SRS),\n            ST_Longitude() returns the\n            longitude value of p as a\n            double-precision number.\n          ", "\n            With the optional second argument representing a valid\n            longitude value,\n            ST_Longitude() returns a\n            Point object like the first argument with\n            its longitude equal to the second argument.\n          ", "\nST_Longitude() handles its\n            arguments as described in the introduction to this section,\n            with the addition that if the Point\n            object is valid but does not have a geographic SRS, an\n            ER_SRS_NOT_GEOGRAPHIC error\n            occurs.\n          ", "Press CTRL+C to copy mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Longitude(@pt);\n+-------------------+\n| ST_Longitude(@pt) |\n+-------------------+\n|                90 |\n+-------------------+\nmysql> SELECT ST_AsText(ST_Longitude(@pt, 10));\n+----------------------------------+\n| ST_AsText(ST_Longitude(@pt, 10)) |\n+----------------------------------+\n| POINT(45 10)                     |\n+----------------------------------+", "\n            This function was added in MySQL 8.0.12.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html#function_st-longitude", "Feature": ["ST_Longitude(p\n            [, new_longitude_val])"], "Examples": ["mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Longitude(@pt);\n+-------------------+\n| ST_Longitude(@pt) |\n+-------------------+\n|                90 |\n+-------------------+\nmysql> SELECT ST_AsText(ST_Longitude(@pt, 10));\n+----------------------------------+\n| ST_AsText(ST_Longitude(@pt, 10)) |\n+----------------------------------+\n| POINT(45 10)                     |\n+----------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_MakeEnvelope()", "Description": ["\nST_MakeEnvelope(pt1,\n          pt2)\n", "\n          Returns the rectangle that forms the envelope around two\n          points, as a Point,\n          LineString, or Polygon.\n        ", "\n          Calculations are done using the Cartesian coordinate system\n          rather than on a sphere, spheroid, or on earth.\n        ", "\n          Given two points pt1 and\n          pt2,\n          ST_MakeEnvelope() creates the\n          result geometry on an abstract plane like this:\n", "\n\n              If pt1 and\n              pt2 are equal, the result is\n              the point pt1.\n            \n              Otherwise, if (pt1,\n              pt2) is a vertical or\n              horizontal line segment, the result is the line segment\n              (pt1,\n              pt2).\n            \n              Otherwise, the result is a polygon using\n              pt1 and\n              pt2 as diagonal points.\n\n", "\n          The result geometry has an SRID of 0.\n        ", "\nST_MakeEnvelope() handles its\n          arguments as described in the introduction to this section,\n          with these exceptions:\n", "\n\n              If the arguments are not Point values,\n              an ER_WRONG_ARGUMENTS\n              error occurs.\n            \n              An ER_GIS_INVALID_DATA\n              error occurs for the additional condition that any\n              coordinate value of the two points is infinite or\n              NaN.\n            \n              If any geometry has an SRID value for a geographic spatial\n              reference system (SRS), an\n              ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n              error occurs.\n\n", "Press CTRL+C to copy mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(1 1)');\nmysql> SELECT ST_AsText(ST_MakeEnvelope(@pt1, @pt2));\n+----------------------------------------+\n| ST_AsText(ST_MakeEnvelope(@pt1, @pt2)) |\n+----------------------------------------+\n| POLYGON((0 0,1 0,1 1,0 1,0 0))         |\n+----------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html#function_st-makeenvelope", "Feature": ["ST_MakeEnvelope(pt1,\n          pt2)"], "Examples": ["mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(1 1)');\nmysql> SELECT ST_AsText(ST_MakeEnvelope(@pt1, @pt2));\n+----------------------------------------+\n| ST_AsText(ST_MakeEnvelope(@pt1, @pt2)) |\n+----------------------------------------+\n| POLYGON((0 0,1 0,1 1,0 1,0 0))         |\n+----------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_MLineFromText(), ST_MultiLineStringFromText()", "Description": ["\nST_MLineFromText(wkt\n          [, srid [,\n          options]]),\n          ST_MultiLineStringFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiLineString value using\n          its WKT representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-mlinefromtext", "Feature": ["ST_MLineFromText(wkt\n          [, srid [,\n          options]])", "ST_MultiLineStringFromText(wkt\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_MLineFromWKB(), ST_MultiLineStringFromWKB()", "Description": ["\nST_MLineFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_MultiLineStringFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiLineString value using\n          its WKB representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html#function_st-mlinefromwkb", "Feature": ["ST_MLineFromWKB(wkb\n          [, srid [,\n          options]])", "ST_MultiLineStringFromWKB(wkb\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_MPointFromText(), ST_MultiPointFromText()", "Description": ["\nST_MPointFromText(wkt\n          [, srid [,\n          options]]),\n          ST_MultiPointFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPoint value using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-mpointfromtext", "Feature": ["ST_MPointFromText(wkt\n          [, srid [,\n          options]])", "ST_MultiPointFromText(wkt\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_MPointFromWKB(), ST_MultiPointFromWKB()", "Description": ["\nST_MPointFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_MultiPointFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPoint value using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html#function_st-mpointfromwkb", "Feature": ["ST_MPointFromWKB(wkb\n          [, srid [,\n          options]])", "ST_MultiPointFromWKB(wkb\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_MPolyFromText(), ST_MultiPolygonFromText()", "Description": ["\nST_MPolyFromText(wkt\n          [, srid [,\n          options]]),\n          ST_MultiPolygonFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPolygon value using its\n          WKT representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-mpolyfromtext", "Feature": ["ST_MPolyFromText(wkt\n          [, srid [,\n          options]])", "ST_MultiPolygonFromText(wkt\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_MPolyFromWKB(), ST_MultiPolygonFromWKB()", "Description": ["\nST_MPolyFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_MultiPolygonFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a MultiPolygon value using its\n          WKB representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html#function_st-mpolyfromwkb", "Feature": ["ST_MPolyFromWKB(wkb\n          [, srid [,\n          options]])", "ST_MultiPolygonFromWKB(wkb\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_NumGeometries()", "Description": ["\nST_NumGeometries(gc)\n", "\n            Returns the number of geometries in the\n            GeometryCollection value\n            gc.\n          ", "\nST_NumGeometries() handles\n            its arguments as described in the introduction to this\n            section.\n          ", "Press CTRL+C to copy mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_NumGeometries(ST_GeomFromText(@gc));\n+----------------------------------------+\n| ST_NumGeometries(ST_GeomFromText(@gc)) |\n+----------------------------------------+\n|                                      2 |\n+----------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-geometrycollection-property-functions.html#function_st-numgeometries", "Feature": ["ST_NumGeometries(gc)"], "Examples": ["mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_NumGeometries(ST_GeomFromText(@gc));\n+----------------------------------------+\n| ST_NumGeometries(ST_GeomFromText(@gc)) |\n+----------------------------------------+\n|                                      2 |\n+----------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_NumInteriorRing(), ST_NumInteriorRings()", "Description": ["\nST_NumInteriorRing(poly),\n            ST_NumInteriorRings(poly)\n", "\n            Returns the number of interior rings in the\n            Polygon value\n            poly.\n          ", "\nST_NumInteriorRing()\n            and ST_NuminteriorRings()\n            handle their arguments as described in the introduction to\n            this section.\n          ", "Press CTRL+C to copy mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));\n+---------------------------------------------+\n| ST_NumInteriorRings(ST_GeomFromText(@poly)) |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-polygon-property-functions.html#function_st-numinteriorrings", "Feature": ["ST_NumInteriorRing(poly)", "ST_NumInteriorRings(poly)"], "Examples": ["mysql> SET @poly =\n       'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));\n+---------------------------------------------+\n| ST_NumInteriorRings(ST_GeomFromText(@poly)) |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_NumPoints()", "Description": ["\nST_NumPoints(ls)\n", "\n            Returns the number of Point objects in\n            the LineString value\n            ls.\n          ", "\nST_NumPoints() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_NumPoints(ST_GeomFromText(@ls));\n+------------------------------------+\n| ST_NumPoints(ST_GeomFromText(@ls)) |\n+------------------------------------+\n|                                  3 |\n+------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html#function_st-numpoints", "Feature": ["ST_NumPoints(ls)"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_NumPoints(ST_GeomFromText(@ls));\n+------------------------------------+\n| ST_NumPoints(ST_GeomFromText(@ls)) |\n+------------------------------------+\n|                                  3 |\n+------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Overlaps()", "Description": ["\nST_Overlaps(g1,\n            g2)\n", "\n            Two geometries spatially overlap if\n            they intersect and their intersection results in a geometry\n            of the same dimension but not equal to either of the given\n            geometries.\n          ", "\n            This function returns 1 or 0 to indicate whether\n            g1 spatially overlaps\n            g2.\n          ", "\nST_Overlaps() handles its\n            arguments as described in the introduction to this section\n            except that the return value is NULL for\n            the additional condition that the dimensions of the two\n            geometries are not equal.\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html#function_st-overlaps", "Feature": ["ST_Overlaps(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_PointAtDistance()", "Description": ["\nST_PointAtDistance(ls,\n          distance)\n", "\n          This function takes a LineString geometry\n          and a distance in the range [0.0,\n          ST_Length(ls)]\n          measured in the unit of the spatial reference system (SRS) of\n          the LineString, and returns the\n          Point along the\n          LineString at that distance from its start\n          point. It can be used to answer questions such as which\n          Point value is 400 meters from the start of\n          the road described by the geometry argument.\n        ", "\n          The function is implemented for LineString\n          geometries in all spatial reference systems, both Cartesian\n          and geographic.\n        ", "\nST_PointAtDistance() handles\n          its arguments as described in the introduction to this\n          section, with these exceptions:\n", "\n\n              If the geometry argument is not a\n              LineString, an\n              ER_UNEXPECTED_GEOMETRY_TYPE\n              error occurs.\n            \n              If the fractional distance argument is outside the range\n              [0.0,\n              ST_Length(ls)],\n              an ER_DATA_OUT_OF_RANGE\n              error occurs.\n\n", "\nST_PointAtDistance() is a MySQL\n          extension to OpenGIS. This function was added in MySQL 8.0.24.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html#function_st-pointatdistance", "Feature": ["ST_PointAtDistance(ls,\n          distance)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_PointFromGeoHash()", "Description": ["\nST_PointFromGeoHash(geohash_str,\n          srid)\n", "\n          Returns a POINT value containing the\n          decoded geohash value, given a geohash string value.\n        ", "\n          The X and Y coordinates of the point are the longitude in the\n          range [\u2212180, 180] and the latitude in the range\n          [\u221290, 90], respectively.\n        ", "\n          The srid argument is an 32-bit\n          unsigned integer.\n        ", "\n          The remarks in the description of\n          ST_LatFromGeoHash() regarding\n          the maximum number of characters processed from the\n          geohash_str argument also apply to\n          ST_PointFromGeoHash().\n        ", "\nST_PointFromGeoHash() handles\n          its arguments as described in the introduction to this\n          section.\n        ", "Press CTRL+C to copy mysql> SET @gh = ST_GeoHash(45,-20,10);\nmysql> SELECT ST_AsText(ST_PointFromGeoHash(@gh,0));\n+---------------------------------------+\n| ST_AsText(ST_PointFromGeoHash(@gh,0)) |\n+---------------------------------------+\n| POINT(45 -20)                         |\n+---------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-geohash-functions.html#function_st-pointfromgeohash", "Feature": ["ST_PointFromGeoHash(geohash_str,\n          srid)"], "Examples": ["mysql> SET @gh = ST_GeoHash(45,-20,10);\nmysql> SELECT ST_AsText(ST_PointFromGeoHash(@gh,0));\n+---------------------------------------+\n| ST_AsText(ST_PointFromGeoHash(@gh,0)) |\n+---------------------------------------+\n| POINT(45 -20)                         |\n+---------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_PointFromText()", "Description": ["\nST_PointFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a Point value using its WKT\n          representation and SRID.\n        ", "\nST_PointFromText() handles its\n          arguments as described in the introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-pointfromtext", "Feature": ["ST_PointFromText(wkt\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_PointFromWKB()", "Description": ["\nST_PointFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a Point value using its WKB\n          representation and SRID.\n        ", "\nST_PointFromWKB() handles its\n          arguments as described in the introduction to this section.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html#function_st-pointfromwkb", "Feature": ["ST_PointFromWKB(wkb\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_PointN()", "Description": ["\nST_PointN(ls,\n            N)\n", "\n            Returns the N-th\n            Point in the\n            Linestring value\n            ls. Points are numbered beginning\n            with 1.\n          ", "\nST_PointN() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_PointN(ST_GeomFromText(@ls),2));\n+----------------------------------------------+\n| ST_AsText(ST_PointN(ST_GeomFromText(@ls),2)) |\n+----------------------------------------------+\n| POINT(2 2)                                   |\n+----------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html#function_st-pointn", "Feature": ["ST_PointN(ls,\n            N)"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_PointN(ST_GeomFromText(@ls),2));\n+----------------------------------------------+\n| ST_AsText(ST_PointN(ST_GeomFromText(@ls),2)) |\n+----------------------------------------------+\n| POINT(2 2)                                   |\n+----------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_PolyFromText(), ST_PolygonFromText()", "Description": ["\nST_PolyFromText(wkt\n          [, srid [,\n          options]]),\n          ST_PolygonFromText(wkt\n          [, srid [,\n          options]])\n", "\n          Constructs a Polygon value using its WKT\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-polyfromtext", "Feature": ["ST_PolyFromText(wkt\n          [, srid [,\n          options]])", "ST_PolygonFromText(wkt\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_PolyFromWKB(), ST_PolygonFromWKB()", "Description": ["\nST_PolyFromWKB(wkb\n          [, srid [,\n          options]]),\n          ST_PolygonFromWKB(wkb\n          [, srid [,\n          options]])\n", "\n          Constructs a Polygon value using its WKB\n          representation and SRID.\n        ", "\n          These functions handle their arguments as described in the\n          introduction to this section.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-wkb-functions.html#function_st-polyfromwkb", "Feature": ["ST_PolyFromWKB(wkb\n          [, srid [,\n          options]])", "ST_PolygonFromWKB(wkb\n          [, srid [,\n          options]])"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Simplify()", "Description": ["\nST_Simplify(g,\n          max_distance)\n", "\n          Simplifies a geometry using the Douglas-Peucker algorithm and\n          returns a simplified value of the same type.\n        ", "\n          The geometry may be any geometry type, although the\n          Douglas-Peucker algorithm may not actually process every type.\n          A geometry collection is processed by giving its components\n          one by one to the simplification algorithm, and the returned\n          geometries are put into a geometry collection as result.\n        ", "\n          The max_distance argument is the\n          distance (in units of the input coordinates) of a vertex to\n          other segments to be removed. Vertices within this distance of\n          the simplified linestring are removed.\n        ", "\n          According to Boost.Geometry, geometries might become invalid\n          as a result of the simplification process, and the process\n          might create self-intersections. To check the validity of the\n          result, pass it to\n          ST_IsValid().\n        ", "\nST_Simplify() handles its\n          arguments as described in the introduction to this section,\n          with this exception:\n", "\n\n              If the max_distance argument is\n              not positive, or is NaN, an\n              ER_WRONG_ARGUMENTS error\n              occurs.\n\n", "Press CTRL+C to copy mysql> SET @g = ST_GeomFromText('LINESTRING(0 0,0 1,1 1,1 2,2 2,2 3,3 3)');\nmysql> SELECT ST_AsText(ST_Simplify(@g, 0.5));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 0.5)) |\n+---------------------------------+\n| LINESTRING(0 0,0 1,1 1,2 3,3 3) |\n+---------------------------------+\nmysql> SELECT ST_AsText(ST_Simplify(@g, 1.0));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 1.0)) |\n+---------------------------------+\n| LINESTRING(0 0,3 3)             |\n+---------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html#function_st-simplify", "Feature": ["ST_Simplify(g,\n          max_distance)"], "Examples": ["mysql> SET @g = ST_GeomFromText('LINESTRING(0 0,0 1,1 1,1 2,2 2,2 3,3 3)');\nmysql> SELECT ST_AsText(ST_Simplify(@g, 0.5));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 0.5)) |\n+---------------------------------+\n| LINESTRING(0 0,0 1,1 1,2 3,3 3) |\n+---------------------------------+\nmysql> SELECT ST_AsText(ST_Simplify(@g, 1.0));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 1.0)) |\n+---------------------------------+\n| LINESTRING(0 0,3 3)             |\n+---------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_SRID()", "Description": ["\nST_SRID(g [,\n            srid])\n", "\n            With a single argument representing a valid geometry object\n            g,\n            ST_SRID() returns an integer\n            indicating the ID of the spatial reference system (SRS)\n            associated with g.\n          ", "\n            With the optional second argument representing a valid SRID\n            value, ST_SRID() returns an\n            object with the same type as its first argument with an SRID\n            value equal to the second argument. This only sets the SRID\n            value of the object; it does not perform any transformation\n            of coordinate values.\n          ", "\nST_SRID() handles its\n            arguments as described in the introduction to this section,\n            with this exception:\n", "\n\n                For the single-argument syntax,\n                ST_SRID() returns the\n                geometry SRID even if it refers to an undefined SRS. An\n                ER_SRS_NOT_FOUND error\n                does not occur.\n\n", "\nST_SRID(g,\n            target_srid) and\n            ST_Transform(g,\n            target_srid) differ as\n            follows:\n", "\n\nST_SRID() changes the\n                geometry SRID value without transforming its\n                coordinates.\n              \nST_Transform() transforms\n                the geometry coordinates in addition to changing its\n                SRID value.\n\n", "Press CTRL+C to copy mysql> SET @g = ST_GeomFromText('LineString(1 1,2 2)', 0);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|           0 |\n+-------------+\nmysql> SET @g = ST_SRID(@g, 4326);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|        4326 |\n+-------------+", "\n            It is possible to create a geometry in a particular SRID by\n            passing to ST_SRID() the\n            result of one of the MySQL-specific functions for creating\n            spatial values, along with an SRID value. For example:\n          ", "Press CTRL+C to copy SET @g1 = ST_SRID(Point(1, 1), 4326);", "\n            However, that method creates the geometry in SRID 0, then\n            casts it to SRID 4326 (WGS 84). A preferable alternative is\n            to create the geometry with the correct spatial reference\n            system to begin with. For example:\n          ", "Press CTRL+C to copy SET @g1 = ST_PointFromText('POINT(1 1)', 4326);\nSET @g1 = ST_GeomFromText('POINT(1 1)', 4326);", "\n            The two-argument form of\n            ST_SRID() is useful for tasks\n            such as correcting or changing the SRS of geometries that\n            have an incorrect SRID.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-general-property-functions.html#function_st-srid", "Feature": ["ST_SRID(g [,\n            srid])"], "Examples": ["mysql> SET @g = ST_GeomFromText('LineString(1 1,2 2)', 0);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|           0 |\n+-------------+\nmysql> SET @g = ST_SRID(@g, 4326);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n|        4326 |\n+-------------+", "SET @g1 = ST_SRID(Point(1, 1), 4326);", "SET @g1 = ST_PointFromText('POINT(1 1)', 4326);\nSET @g1 = ST_GeomFromText('POINT(1 1)', 4326);"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_StartPoint()", "Description": ["\nST_StartPoint(ls)\n", "\n            Returns the Point that is the start point\n            of the LineString value\n            ls.\n          ", "\nST_StartPoint() handles its\n            arguments as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_StartPoint(ST_GeomFromText(@ls)));\n+------------------------------------------------+\n| ST_AsText(ST_StartPoint(ST_GeomFromText(@ls))) |\n+------------------------------------------------+\n| POINT(1 1)                                     |\n+------------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html#function_st-startpoint", "Feature": ["ST_StartPoint(ls)"], "Examples": ["mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_StartPoint(ST_GeomFromText(@ls)));\n+------------------------------------------------+\n| ST_AsText(ST_StartPoint(ST_GeomFromText(@ls))) |\n+------------------------------------------------+\n| POINT(1 1)                                     |\n+------------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_SwapXY()", "Description": ["\nST_SwapXY(g)\n", "\n          Accepts an argument in internal geometry format, swaps the X\n          and Y values of each coordinate pair within the geometry, and\n          returns the result.\n        ", "\nST_SwapXY() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)');\nmysql> SELECT ST_AsText(@g);\n+----------------------------+\n| ST_AsText(@g)              |\n+----------------------------+\n| LINESTRING(0 5,5 10,10 15) |\n+----------------------------+\nmysql> SELECT ST_AsText(ST_SwapXY(@g));\n+----------------------------+\n| ST_AsText(ST_SwapXY(@g))   |\n+----------------------------+\n| LINESTRING(5 0,10 5,15 10) |\n+----------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-format-conversion-functions.html#function_st-swapxy", "Feature": ["ST_SwapXY(g)"], "Examples": ["mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)');\nmysql> SELECT ST_AsText(@g);\n+----------------------------+\n| ST_AsText(@g)              |\n+----------------------------+\n| LINESTRING(0 5,5 10,10 15) |\n+----------------------------+\nmysql> SELECT ST_AsText(ST_SwapXY(@g));\n+----------------------------+\n| ST_AsText(ST_SwapXY(@g))   |\n+----------------------------+\n| LINESTRING(5 0,10 5,15 10) |\n+----------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_SymDifference()", "Description": ["\nST_SymDifference(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set symmetric\n          difference of the geometry values\n          g1 and\n          g2, which is defined as:\n        ", "Press CTRL+C to copy g1 symdifference g2 := (g1 union g2) difference (g1 intersection g2)", "\n          Or, in function call notation:\n        ", "Press CTRL+C to copy ST_SymDifference(g1, g2) = ST_Difference(ST_Union(g1, g2), ST_Intersection(g1, g2))", "\n          The result is in the same SRS as the geometry arguments.\n        ", "\n          As of MySQL 8.0.27,\n          ST_SymDifference() permits\n          arguments in either a Cartesian or a geographic SRS. Prior to\n          MySQL 8.0.27,\n          ST_SymDifference() permits\n          arguments in a Cartesian SRS only; for arguments in a\n          geographic SRS, an\n          ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n          error occurs.\n        ", "\nST_SymDifference() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('MULTIPOINT(5 0,15 10,15 25)');\nmysql> SET @g2 = ST_GeomFromText('MULTIPOINT(1 1,15 10,15 25)');\nmysql> SELECT ST_AsText(ST_SymDifference(@g1, @g2));\n+---------------------------------------+\n| ST_AsText(ST_SymDifference(@g1, @g2)) |\n+---------------------------------------+\n| MULTIPOINT((1 1),(5 0))               |\n+---------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html#function_st-symdifference", "Feature": ["ST_SymDifference(g1,\n          g2)"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('MULTIPOINT(5 0,15 10,15 25)');\nmysql> SET @g2 = ST_GeomFromText('MULTIPOINT(1 1,15 10,15 25)');\nmysql> SELECT ST_AsText(ST_SymDifference(@g1, @g2));\n+---------------------------------------+\n| ST_AsText(ST_SymDifference(@g1, @g2)) |\n+---------------------------------------+\n| MULTIPOINT((1 1),(5 0))               |\n+---------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Touches()", "Description": ["\nST_Touches(g1,\n            g2)\n", "\n            Two geometries spatially touch if their\n            interiors do not intersect, but the boundary of one of the\n            geometries intersects either the boundary or the interior of\n            the other.\n          ", "\n            This function returns 1 or 0 to indicate whether\n            g1 spatially touches\n            g2.\n          ", "\nST_Touches() handles its\n            arguments as described in the introduction to this section\n            except that the return value is NULL for\n            the additional condition that both geometries are of\n            dimension 0 (Point or\n            MultiPoint).\n          "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html#function_st-touches", "Feature": ["ST_Touches(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Transform()", "Description": ["\nST_Transform(g,\n          target_srid)\n", "\n          Transforms a geometry from one spatial reference system (SRS)\n          to another. The return value is a geometry of the same type as\n          the input geometry with all coordinates transformed to the\n          target SRID, target_srid. Prior to\n          MySQL 8.0.30, transformation support was limited to geographic\n          SRSs (unless the SRID of the geometry argument was the same as\n          the target SRID value, in which case the return value was the\n          input geometry for any valid SRS), and this function did not\n          support Cartesian SRSs. Beginning with MySQL 8.0.30, support\n          is provided for the Popular Visualisation Pseudo Mercator\n          (EPSG 1024) projection method, used for WGS 84 Pseudo-Mercator\n          (SRID 3857). In MySQL 8.0.32 and later, support is extended to\n          all SRSs defined by EPSG except for those listed here:\n", "\n\n              EPSG 1042 Krovak Modified\n            \n              EPSG 1043 Krovak Modified (North Orientated)\n            \n              EPSG 9816 Tunisia Mining Grid\n            \n              EPSG 9826 Lambert Conic Conformal (West Orientated)\n\n", "\nST_Transform() handles its\n          arguments as described in the introduction to this section,\n          with these exceptions:\n", "\n\n              Geometry arguments that have an SRID value for a\n              geographic SRS do not produce an error.\n            \n              If the geometry or target SRID argument has an SRID value\n              that refers to an undefined spatial reference system\n              (SRS), an ER_SRS_NOT_FOUND\n              error occurs.\n            \n              If the geometry is in an SRS that\n              ST_Transform() cannot\n              transform from, an\n              ER_TRANSFORM_SOURCE_SRS_NOT_SUPPORTED\n              error occurs.\n            \n              If the target SRID is in an SRS that\n              ST_Transform() cannot\n              transform to, an\n              ER_TRANSFORM_TARGET_SRS_NOT_SUPPORTED\n              error occurs.\n            \n              If the geometry is in an SRS that is not WGS 84 and has no\n              TOWGS84 clause, an\n              ER_TRANSFORM_SOURCE_SRS_MISSING_TOWGS84\n              error occurs.\n            \n              If the target SRID is in an SRS that is not WGS 84 and has\n              no TOWGS84 clause, an\n              ER_TRANSFORM_TARGET_SRS_MISSING_TOWGS84\n              error occurs.\n\n", "\nST_SRID(g,\n          target_srid) and\n          ST_Transform(g,\n          target_srid) differ as\n          follows:\n", "\n\nST_SRID() changes the\n              geometry SRID value without transforming its coordinates.\n            \nST_Transform() transforms\n              the geometry coordinates in addition to changing its SRID\n              value.\n\n", "Press CTRL+C to copy mysql> SET @p = ST_GeomFromText('POINT(52.381389 13.064444)', 4326);\nmysql> SELECT ST_AsText(@p);\n+----------------------------+\n| ST_AsText(@p)              |\n+----------------------------+\n| POINT(52.381389 13.064444) |\n+----------------------------+\nmysql> SET @p = ST_Transform(@p, 4230);\nmysql> SELECT ST_AsText(@p);\n+---------------------------------------------+\n| ST_AsText(@p)                               |\n+---------------------------------------------+\n| POINT(52.38208611407426 13.065520672345304) |\n+---------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html#function_st-transform", "Feature": ["ST_Transform(g,\n          target_srid)"], "Examples": ["mysql> SET @p = ST_GeomFromText('POINT(52.381389 13.064444)', 4326);\nmysql> SELECT ST_AsText(@p);\n+----------------------------+\n| ST_AsText(@p)              |\n+----------------------------+\n| POINT(52.381389 13.064444) |\n+----------------------------+\nmysql> SET @p = ST_Transform(@p, 4230);\nmysql> SELECT ST_AsText(@p);\n+---------------------------------------------+\n| ST_AsText(@p)                               |\n+---------------------------------------------+\n| POINT(52.38208611407426 13.065520672345304) |\n+---------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Union()", "Description": ["\nST_Union(g1,\n          g2)\n", "\n          Returns a geometry that represents the point set union of the\n          geometry values g1 and\n          g2. The result is in the same SRS\n          as the geometry arguments.\n        ", "\n          As of MySQL 8.0.26, ST_Union()\n          permits arguments in either a Cartesian or a geographic SRS.\n          Prior to MySQL 8.0.26,\n          ST_Union() permits arguments in\n          a Cartesian SRS only; for arguments in a geographic SRS, an\n          ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n          error occurs.\n        ", "\nST_Union() handles its\n          arguments as described in the introduction to this section.\n        ", "Press CTRL+C to copy mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Union(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Union(@g1, @g2))        |\n+--------------------------------------+\n| MULTILINESTRING((1 1,3 3),(1 3,3 1)) |\n+--------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-operator-functions.html#function_st-union", "Feature": ["ST_Union(g1,\n          g2)"], "Examples": ["mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Union(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Union(@g1, @g2))        |\n+--------------------------------------+\n| MULTILINESTRING((1 1,3 3),(1 3,3 1)) |\n+--------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Validate()", "Description": ["\nST_Validate(g)\n", "\n          Validates a geometry according to the OGC specification. A\n          geometry can be syntactically well-formed (WKB value plus\n          SRID) but geometrically invalid. For example, this polygon is\n          geometrically invalid: POLYGON((0 0, 0 0, 0 0, 0 0, 0\n          0))\n", "\nST_Validate() returns the\n          geometry if it is syntactically well-formed and is\n          geometrically valid, NULL if the argument\n          is not syntactically well-formed or is not geometrically valid\n          or is NULL.\n        ", "\nST_Validate() can be used to\n          filter out invalid geometry data, although at a cost. For\n          applications that require more precise results not tainted by\n          invalid data, this penalty may be worthwhile.\n        ", "\n          If the geometry argument is valid, it is returned as is,\n          except that if an input Polygon or\n          MultiPolygon has clockwise rings, those\n          rings are reversed before checking for validity. If the\n          geometry is valid, the value with the reversed rings is\n          returned.\n        ", "\n          The only valid empty geometry is represented in the form of an\n          empty geometry collection value.\n          ST_Validate() returns it\n          directly without further checks in this case.\n        ", "\n          As of MySQL 8.0.13,\n          ST_Validate() handles its\n          arguments as described in the introduction to this section,\n          with these exceptions:\n", "\n\n              If the geometry has a geographic SRS with a longitude or\n              latitude that is out of range, an error occurs:\n\n\n\n                  If a longitude value is not in the range (\u2212180,\n                  180], an\n                  ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n                  error occurs\n                  (ER_LONGITUDE_OUT_OF_RANGE\n                  prior to MySQL 8.0.12).\n                \n                  If a latitude value is not in the range [\u221290,\n                  90], an\n                  ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n                  error occurs\n                  (ER_LATITUDE_OUT_OF_RANGE\n                  prior to MySQL 8.0.12).\n\n\n\n              Ranges shown are in degrees. The exact range limits\n              deviate slightly due to floating-point arithmetic.\n\n", "\n          Prior to MySQL 8.0.13,\n          ST_Validate() handles its\n          arguments as described in the introduction to this section,\n          with these exceptions:\n", "\n\n              If the geometry is not syntactically well-formed, the\n              return value is NULL. An\n              ER_GIS_INVALID_DATA error\n              does not occur.\n            \n              If the geometry has an SRID value for a geographic spatial\n              reference system (SRS), an\n              ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n              error occurs.\n\n", "Press CTRL+C to copy mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_AsText(ST_Validate(@ls1));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls1)) |\n+------------------------------+\n| NULL                         |\n+------------------------------+\nmysql> SELECT ST_AsText(ST_Validate(@ls2));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls2)) |\n+------------------------------+\n| LINESTRING(0 0,1 1)          |\n+------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-convenience-functions.html#function_st-validate", "Feature": ["ST_Validate(g)"], "Examples": ["mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_AsText(ST_Validate(@ls1));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls1)) |\n+------------------------------+\n| NULL                         |\n+------------------------------+\nmysql> SELECT ST_AsText(ST_Validate(@ls2));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls2)) |\n+------------------------------+\n| LINESTRING(0 0,1 1)          |\n+------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Within()", "Description": ["\nST_Within(g1,\n            g2)\n", "\n            Returns 1 or 0 to indicate whether\n            g1 is spatially within\n            g2. This tests the opposite\n            relationship as\n            ST_Contains().\n          ", "\nST_Within() handles its\n            arguments as described in the introduction to this section.\n"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/spatial-relation-functions-object-shapes.html#function_st-within", "Feature": ["ST_Within(g1,\n            g2)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_X()", "Description": ["\nST_X(p [,\n            new_x_val])\n", "\n            With a single argument representing a valid\n            Point object\n            p,\n            ST_X() returns the\n            X-coordinate value of p as a\n            double-precision number. As of MySQL 8.0.12, the X\n            coordinate is considered to refer to the axis that appears\n            first in the Point spatial reference\n            system (SRS) definition.\n          ", "\n            With the optional second argument,\n            ST_X() returns a\n            Point object like the first argument with\n            its X coordinate equal to the second argument. As of MySQL\n            8.0.12, if the Point object has a\n            geographic SRS, the second argument must be in the proper\n            range for longitude or latitude values.\n          ", "\nST_X() handles its arguments\n            as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_X(Point(56.7, 53.34));\n+--------------------------+\n| ST_X(Point(56.7, 53.34)) |\n+--------------------------+\n|                     56.7 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_X(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_X(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(10.5 53.34)                         |\n+-------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html#function_st-x", "Feature": ["ST_X(p [,\n            new_x_val])"], "Examples": ["mysql> SELECT ST_X(Point(56.7, 53.34));\n+--------------------------+\n| ST_X(Point(56.7, 53.34)) |\n+--------------------------+\n|                     56.7 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_X(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_X(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(10.5 53.34)                         |\n+-------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "ST_Y()", "Description": ["\nST_Y(p [,\n            new_y_val])\n", "\n            With a single argument representing a valid\n            Point object\n            p,\n            ST_Y() returns the\n            Y-coordinate value of p as a\n            double-precision number. As of MySQL 8.0.12, the Y\n            coordinate is considered to refer to the axis that appears\n            second in the Point spatial reference\n            system (SRS) definition.\n          ", "\n            With the optional second argument,\n            ST_Y() returns a\n            Point object like the first argument with\n            its Y coordinate equal to the second argument. As of MySQL\n            8.0.12, if the Point object has a\n            geographic SRS, the second argument must be in the proper\n            range for longitude or latitude values.\n          ", "\nST_Y() handles its arguments\n            as described in the introduction to this section.\n          ", "Press CTRL+C to copy mysql> SELECT ST_Y(Point(56.7, 53.34));\n+--------------------------+\n| ST_Y(Point(56.7, 53.34)) |\n+--------------------------+\n|                    53.34 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_Y(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_Y(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(56.7 10.5)                          |\n+-------------------------------------------+"], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html#function_st-y", "Feature": ["ST_Y(p [,\n            new_y_val])"], "Examples": ["mysql> SELECT ST_Y(Point(56.7, 53.34));\n+--------------------------+\n| ST_Y(Point(56.7, 53.34)) |\n+--------------------------+\n|                    53.34 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_Y(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_Y(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(56.7 10.5)                          |\n+-------------------------------------------+"], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "GeomCollection()", "Description": ["\nGeomCollection(g\n          [, g] ...)\n", "\n          Constructs a GeomCollection value from the\n          geometry arguments.\n        ", "\nGeomCollection() returns all\n          the proper geometries contained in the arguments even if a\n          nonsupported geometry is present.\n        ", "\nGeomCollection() with no\n          arguments is permitted as a way to create an empty geometry.\n          Also, functions such as\n          ST_GeomFromText() that accept\n          WKT geometry collection arguments understand both OpenGIS\n          'GEOMETRYCOLLECTION EMPTY' standard syntax\n          and MySQL 'GEOMETRYCOLLECTION()'\n          nonstandard syntax.\n        ", "\nGeomCollection() and\n          GeometryCollection() are\n          synonymous, with\n          GeomCollection() the preferred\n          function.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html#function_geomcollection", "Feature": ["GeomCollection(g\n          [, g] ...)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
{"HTML": ["https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html"], "Title": ["14.1 Built-In Function and Operator Reference"], "Name": "GeometryCollection()", "Description": ["\nGeometryCollection(g\n          [, g] ...)\n", "\n          Constructs a GeomCollection value from the\n          geometry arguments.\n        ", "\nGeometryCollection() returns\n          all the proper geometries contained in the arguments even if a\n          nonsupported geometry is present.\n        ", "\nGeometryCollection() with no\n          arguments is permitted as a way to create an empty geometry.\n          Also, functions such as\n          ST_GeomFromText() that accept\n          WKT geometry collection arguments understand both OpenGIS\n          'GEOMETRYCOLLECTION EMPTY' standard syntax\n          and MySQL 'GEOMETRYCOLLECTION()'\n          nonstandard syntax.\n        ", "\nGeomCollection() and\n          GeometryCollection() are\n          synonymous, with\n          GeomCollection() the preferred\n          function.\n        "], "Reference HTML": "https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html#function_geometrycollection", "Feature": ["GeometryCollection(g\n          [, g] ...)"], "Examples": [], "Category": ["Built-In Functions and Operators", "Spatial Analysis Functions"]}
