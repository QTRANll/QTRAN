{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html#operator_and", "Title": "AND, &&", "Feature": ["AND", "&&"], "Description": ["\nAND,\n            &&\n", "\n            Logical AND. Evaluates to 1 if all\n            operands are nonzero and not NULL, to\n            0 if one or more operands are\n            0, otherwise NULL is\n            returned.\n          ", "Press CTRL+C to copy mysql> SELECT 1 AND 1;\n        -> 1\nmysql> SELECT 1 AND 0;\n        -> 0\nmysql> SELECT 1 AND NULL;\n        -> NULL\nmysql> SELECT 0 AND NULL;\n        -> 0\nmysql> SELECT NULL AND 0;\n        -> 0", "\n            The &&,\n            operator is a nonstandard MySQL extension. As of MySQL\n            8.0.17, this operator is deprecated; expect support for it\n            to be removed in a future version of MySQL. Applications\n            should be adjusted to use the standard SQL\n            AND operator.\n          "], "Examples": ["mysql> SELECT 1 AND 1;\n        -> 1\nmysql> SELECT 1 AND 0;\n        -> 0\nmysql> SELECT 1 AND NULL;\n        -> NULL\nmysql> SELECT 0 AND NULL;\n        -> 0\nmysql> SELECT NULL AND 0;\n        -> 0"], "Category": ["Logical Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html#operator_not", "Title": "NOT, !", "Feature": ["NOT", "!"], "Description": ["\nNOT,\n            !\n", "\n            Logical NOT. Evaluates to 1 if the\n            operand is 0, to 0 if\n            the operand is nonzero, and NOT NULL\n            returns NULL.\n          ", "Press CTRL+C to copy mysql> SELECT NOT 10;\n        -> 0\nmysql> SELECT NOT 0;\n        -> 1\nmysql> SELECT NOT NULL;\n        -> NULL\nmysql> SELECT ! (1+1);\n        -> 0\nmysql> SELECT ! 1+1;\n        -> 1", "\n            The last example produces 1 because the\n            expression evaluates the same way as\n            (!1)+1.\n          ", "\n            The !, operator\n            is a nonstandard MySQL extension. As of MySQL 8.0.17, this\n            operator is deprecated; expect it to be removed in a future\n            version of MySQL. Applications should be adjusted to use the\n            standard SQL NOT operator.\n          "], "Examples": ["mysql> SELECT NOT 10;\n        -> 0\nmysql> SELECT NOT 0;\n        -> 1\nmysql> SELECT NOT NULL;\n        -> NULL\nmysql> SELECT ! (1+1);\n        -> 0\nmysql> SELECT ! 1+1;\n        -> 1"], "Category": ["Logical Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html#operator_or", "Title": "OR, ||", "Feature": ["OR", "||"], "Description": ["\nOR,\n            ||\n", "\n            Logical OR. When both operands are\n            non-NULL, the result is\n            1 if any operand is nonzero, and\n            0 otherwise. With a\n            NULL operand, the result is\n            1 if the other operand is nonzero, and\n            NULL otherwise. If both operands are\n            NULL, the result is\n            NULL.\n          ", "Press CTRL+C to copy mysql> SELECT 1 OR 1;\n        -> 1\nmysql> SELECT 1 OR 0;\n        -> 1\nmysql> SELECT 0 OR 0;\n        -> 0\nmysql> SELECT 0 OR NULL;\n        -> NULL\nmysql> SELECT 1 OR NULL;\n        -> 1", "\n\nNote\n\n\n              If the PIPES_AS_CONCAT\n              SQL mode is enabled,\n              || signifies\n              the SQL-standard string concatenation operator (like\n              CONCAT()).\n\n", "\n            The ||, operator\n            is a nonstandard MySQL extension. As of MySQL 8.0.17, this\n            operator is deprecated; expect support for it to be removed\n            in a future version of MySQL. Applications should be\n            adjusted to use the standard SQL\n            OR operator. Exception:\n            Deprecation does not apply if\n            PIPES_AS_CONCAT is enabled\n            because, in that case,\n            || signifies\n            string concatenation.\n          "], "Examples": ["mysql> SELECT 1 OR 1;\n        -> 1\nmysql> SELECT 1 OR 0;\n        -> 1\nmysql> SELECT 0 OR 0;\n        -> 0\nmysql> SELECT 0 OR NULL;\n        -> NULL\nmysql> SELECT 1 OR NULL;\n        -> 1"], "Category": ["Logical Operators"]}
{"HTML": "https://dev.mysql.com/doc/refman/8.0/en/logical-operators.html#operator_xor", "Title": "XOR", "Feature": ["XOR"], "Description": ["\nXOR\n", "\n            Logical XOR. Returns NULL if either\n            operand is NULL. For\n            non-NULL operands, evaluates to\n            1 if an odd number of operands is\n            nonzero, otherwise 0 is returned.\n          ", "Press CTRL+C to copy mysql> SELECT 1 XOR 1;\n        -> 0\nmysql> SELECT 1 XOR 0;\n        -> 1\nmysql> SELECT 1 XOR NULL;\n        -> NULL\nmysql> SELECT 1 XOR 1 XOR 1;\n        -> 1", "\na XOR b is mathematically equal to\n            (a AND (NOT b)) OR ((NOT a) and b).\n"], "Examples": ["mysql> SELECT 1 XOR 1;\n        -> 0\nmysql> SELECT 1 XOR 0;\n        -> 1\nmysql> SELECT 1 XOR NULL;\n        -> NULL\nmysql> SELECT 1 XOR 1 XOR 1;\n        -> 1"], "Category": ["Logical Operators"]}
