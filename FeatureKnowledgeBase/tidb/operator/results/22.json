{
    "HTML": "https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#operator_like",
    "Title": "LIKE",
    "Feature": [
        "expr\n            LIKE pat [ESCAPE\n            'escape_char']"
    ],
    "Description": [
        "\nexpr\n            LIKE pat [ESCAPE\n            'escape_char']\n",
        "\n            Pattern matching using an SQL pattern. Returns\n            1 (TRUE) or\n            0 (FALSE). If either\n            expr or\n            pat is NULL,\n            the result is NULL.\n          ",
        "\n            The pattern need not be a literal string. For example, it\n            can be specified as a string expression or table column. In\n            the latter case, the column must be defined as one of the\n            MySQL string types (see Section\u00a013.3, \u201cString Data Types\u201d).\n          ",
        "\n            Per the SQL standard, LIKE\n            performs matching on a per-character basis, thus it can\n            produce results different from the\n            = comparison\n            operator:\n          ",
        "Press CTRL+C to copy mysql> SELECT '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci;\n+-----------------------------------------+\n| '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci |\n+-----------------------------------------+\n|                                       0 |\n+-----------------------------------------+\nmysql> SELECT '\u00e4' = 'ae' COLLATE latin1_german2_ci;\n+--------------------------------------+\n| '\u00e4' = 'ae' COLLATE latin1_german2_ci |\n+--------------------------------------+\n|                                    1 |\n+--------------------------------------+",
        "\n            In particular, trailing spaces are always significant. This\n            differs from comparisons performed with the\n            = operator,\n            for which the significance of trailing spaces in nonbinary\n            strings (CHAR,\n            VARCHAR, and TEXT\n            values) depends on the pad attribute of the collation used\n            for the comparison. For more information, see\n            Trailing Space Handling in Comparisons.\n          ",
        "\n            With LIKE you can use the\n            following two wildcard characters in the pattern:\n",
        "\n\n% matches any number of characters,\n                even zero characters.\n              \n_ matches exactly one character.\n\n",
        "Press CTRL+C to copy mysql> SELECT 'David!' LIKE 'David_';\n        -> 1\nmysql> SELECT 'David!' LIKE '%D%v%';\n        -> 1",
        "\n            To test for literal instances of a wildcard character,\n            precede it by the escape character. If you do not specify\n            the ESCAPE character,\n            \\ is assumed, unless the\n            NO_BACKSLASH_ESCAPES SQL\n            mode is enabled. In that case, no escape character is used.\n",
        "\n\n\\% matches one %\n                character.\n              \n\\_ matches one _\n                character.\n\n",
        "Press CTRL+C to copy mysql> SELECT 'David!' LIKE 'David\\_';\n        -> 0\nmysql> SELECT 'David_' LIKE 'David\\_';\n        -> 1",
        "\n            To specify a different escape character, use the\n            ESCAPE clause:\n          ",
        "Press CTRL+C to copy mysql> SELECT 'David_' LIKE 'David|_' ESCAPE '|';\n        -> 1",
        "\n            The escape sequence should be one character long to specify\n            the escape character, or empty to specify that no escape\n            character is used. The expression must evaluate as a\n            constant at execution time. If the\n            NO_BACKSLASH_ESCAPES SQL\n            mode is enabled, the sequence cannot be empty.\n          ",
        "\n            The following statements illustrate that string comparisons\n            are not case-sensitive unless one of the operands is\n            case-sensitive (uses a case-sensitive collation or is a\n            binary string):\n          ",
        "Press CTRL+C to copy mysql> SELECT 'abc' LIKE 'ABC';\n        -> 1\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_0900_as_cs;\n        -> 0\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_bin;\n        -> 0\nmysql> SELECT 'abc' LIKE BINARY 'ABC';\n        -> 0",
        "\n            As an extension to standard SQL, MySQL permits\n            LIKE on numeric expressions.\n          ",
        "Press CTRL+C to copy mysql> SELECT 10 LIKE '1%';\n        -> 1",
        "\n            MySQL attempts in such cases to perform implicit conversion\n            of the expression to a string. See\n            Section\u00a014.3, \u201cType Conversion in Expression Evaluation\u201d.\n",
        "\n\nNote\n\n\n              MySQL uses C escape syntax in strings (for example,\n              \\n to represent the newline character).\n              If you want a LIKE string to\n              contain a literal \\, you must double\n              it. (Unless the\n              NO_BACKSLASH_ESCAPES SQL\n              mode is enabled, in which case no escape character is\n              used.) For example, to search for \\n,\n              specify it as \\\\n. To search for\n              \\, specify it as\n              \\\\\\\\; this is because the backslashes\n              are stripped once by the parser and again when the pattern\n              match is made, leaving a single backslash to be matched\n              against.\n            \n              Exception: At the end of the pattern string, backslash can\n              be specified as \\\\. At the end of the\n              string, backslash stands for itself because there is\n              nothing following to escape. Suppose that a table contains\n              the following values:\n            Press CTRL+C to copy mysql> SELECT filename FROM t1;\n+--------------+\n| filename     |\n+--------------+\n| C:           |\n| C:\\          |\n| C:\\Programs  |\n| C:\\Programs\\ |\n+--------------+\n              To test for values that end with backslash, you can match\n              the values using either of the following patterns:\n            Press CTRL+C to copy mysql> SELECT filename, filename LIKE '%\\\\' FROM t1;\n+--------------+---------------------+\n| filename     | filename LIKE '%\\\\' |\n+--------------+---------------------+\n| C:           |                   0 |\n| C:\\          |                   1 |\n| C:\\Programs  |                   0 |\n| C:\\Programs\\ |                   1 |\n+--------------+---------------------+\n\nmysql> SELECT filename, filename LIKE '%\\\\\\\\' FROM t1;\n+--------------+-----------------------+\n| filename     | filename LIKE '%\\\\\\\\' |\n+--------------+-----------------------+\n| C:           |                     0 |\n| C:\\          |                     1 |\n| C:\\Programs  |                     0 |\n| C:\\Programs\\ |                     1 |\n+--------------+-----------------------+\n"
    ],
    "Examples": [
        "mysql> SELECT '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci;\n+-----------------------------------------+\n| '\u00e4' LIKE 'ae' COLLATE latin1_german2_ci |\n+-----------------------------------------+\n|                                       0 |\n+-----------------------------------------+\nmysql> SELECT '\u00e4' = 'ae' COLLATE latin1_german2_ci;\n+--------------------------------------+\n| '\u00e4' = 'ae' COLLATE latin1_german2_ci |\n+--------------------------------------+\n|                                    1 |\n+--------------------------------------+",
        "mysql> SELECT 'David!' LIKE 'David_';\n        -> 1\nmysql> SELECT 'David!' LIKE '%D%v%';\n        -> 1",
        "mysql> SELECT 'David!' LIKE 'David\\_';\n        -> 0\nmysql> SELECT 'David_' LIKE 'David\\_';\n        -> 1",
        "mysql> SELECT 'David_' LIKE 'David|_' ESCAPE '|';\n        -> 1",
        "mysql> SELECT 'abc' LIKE 'ABC';\n        -> 1\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_0900_as_cs;\n        -> 0\nmysql> SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_bin;\n        -> 0\nmysql> SELECT 'abc' LIKE BINARY 'ABC';\n        -> 0",
        "mysql> SELECT 10 LIKE '1%';\n        -> 1",
        "mysql> SELECT filename FROM t1;\n+--------------+\n| filename     |\n+--------------+\n| C:           |\n| C:\\          |\n| C:\\Programs  |\n| C:\\Programs\\ |\n+--------------+",
        "mysql> SELECT filename, filename LIKE '%\\\\' FROM t1;\n+--------------+---------------------+\n| filename     | filename LIKE '%\\\\' |\n+--------------+---------------------+\n| C:           |                   0 |\n| C:\\          |                   1 |\n| C:\\Programs  |                   0 |\n| C:\\Programs\\ |                   1 |\n+--------------+---------------------+\n\nmysql> SELECT filename, filename LIKE '%\\\\\\\\' FROM t1;\n+--------------+-----------------------+\n| filename     | filename LIKE '%\\\\\\\\' |\n+--------------+-----------------------+\n| C:           |                     0 |\n| C:\\          |                     1 |\n| C:\\Programs  |                     0 |\n| C:\\Programs\\ |                     1 |\n+--------------+-----------------------+"
    ],
    "Category": [
        "Comparison Functions and Operators",
        "String Functions and Operators"
    ],
    "EffectiveSQLsRefined": [
        "SELECT 'David!' LIKE 'David_';",
        "SELECT 'David!' LIKE '%D%v%';",
        "SELECT 'David!' LIKE 'David\\_';",
        "SELECT 'David_' LIKE 'David\\_';",
        "SELECT 'David_' LIKE 'David|_' ESCAPE '|';",
        "SELECT 'abc' LIKE 'ABC';",
        "SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_bin;",
        "SELECT 'abc' LIKE BINARY 'ABC';",
        "SELECT 10 LIKE '1%';"
    ],
    "EffectiveSQLsGenerated": [],
    "EffectiveSQLsGeneratedCosts": [],
    "EffectiveSQLsGeneratedErrors": [],
    "EffectiveSQLs": [
        "SELECT 'David!' LIKE 'David_';",
        "SELECT 'David!' LIKE '%D%v%';",
        "SELECT 'David!' LIKE 'David\\_';",
        "SELECT 'David_' LIKE 'David\\_';",
        "SELECT 'David_' LIKE 'David|_' ESCAPE '|';",
        "SELECT 'abc' LIKE 'ABC';",
        "SELECT 'abc' LIKE _utf8mb4 'ABC' COLLATE utf8mb4_bin;",
        "SELECT 'abc' LIKE BINARY 'ABC';",
        "SELECT 10 LIKE '1%';"
    ]
}