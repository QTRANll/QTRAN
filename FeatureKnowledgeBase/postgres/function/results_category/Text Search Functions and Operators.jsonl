{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["array_to_tsvector"], "Feature": ["array_to_tsvector ( text[] ) \u2192 tsvector"], "Description": ["Converts an array of text strings to a tsvector. The given strings are used as lexemes as-is, without further processing. Array elements must not be empty strings or NULL."], "Examples": ["array_to_tsvector('{fat,cat,rat}'::text[]) \u2192 'cat' 'fat' 'rat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["get_current_ts_config"], "Feature": ["get_current_ts_config ( ) \u2192 regconfig"], "Description": ["Returns the OID of the current default text search configuration (as set by default_text_search_config)."], "Examples": ["get_current_ts_config() \u2192 english"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["length"], "Feature": ["length ( tsvector ) \u2192 integer"], "Description": ["Returns the number of lexemes in the tsvector."], "Examples": ["length('fat:2,4 cat:3 rat:5A'::tsvector) \u2192 3"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["numnode"], "Feature": ["numnode ( tsquery ) \u2192 integer"], "Description": ["Returns the number of lexemes plus operators in the tsquery."], "Examples": ["numnode('(fat & rat) | cat'::tsquery) \u2192 5"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["plainto_tsquery"], "Feature": ["plainto_tsquery ( [ config regconfig, ] query text ) \u2192 tsquery"], "Description": ["Converts text to a tsquery, normalizing words according to the specified or default configuration. Any punctuation in the string is ignored (it does not determine query operators). The resulting query matches documents containing all non-stopwords in the text."], "Examples": ["plainto_tsquery('english', 'The Fat Rats') \u2192 'fat' & 'rat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["phraseto_tsquery"], "Feature": ["phraseto_tsquery ( [ config regconfig, ] query text ) \u2192 tsquery"], "Description": ["Converts text to a tsquery, normalizing words according to the specified or default configuration. Any punctuation in the string is ignored (it does not determine query operators). The resulting query matches phrases containing all non-stopwords in the text."], "Examples": ["phraseto_tsquery('english', 'The Fat Rats') \u2192 'fat' <-> 'rat'", "phraseto_tsquery('english', 'The Cat and Rats') \u2192 'cat' <2> 'rat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["websearch_to_tsquery"], "Feature": ["websearch_to_tsquery ( [ config regconfig, ] query text ) \u2192 tsquery"], "Description": ["Converts text to a tsquery, normalizing words according to the specified or default configuration. Quoted word sequences are converted to phrase tests. The word \u201cor\u201d is understood as producing an OR operator, and a dash produces a NOT operator; other punctuation is ignored. This approximates the behavior of some common web search tools."], "Examples": ["websearch_to_tsquery('english', '\"fat rat\" or cat dog') \u2192 'fat' <-> 'rat' | 'cat' & 'dog'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["querytree"], "Feature": ["querytree ( tsquery ) \u2192 text"], "Description": ["Produces a representation of the indexable portion of a tsquery. A result that is empty or just T indicates a non-indexable query."], "Examples": ["querytree('foo & ! bar'::tsquery) \u2192 'foo'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["setweight"], "Feature": ["setweight ( vector tsvector, weight \"char\", lexemes text[] ) \u2192 tsvector"], "Description": ["Assigns the specified weight to elements of the vector that are listed in lexemes. The strings in lexemes are taken as lexemes as-is, without further processing. Strings that do not match any lexeme in vector are ignored."], "Examples": ["setweight('fat:2,4 cat:3 rat:5,6B'::tsvector, 'A', '{cat,rat}') \u2192 'cat':3A 'fat':2,4 'rat':5A,6A"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["strip"], "Feature": ["strip ( tsvector ) \u2192 tsvector"], "Description": ["Removes positions and weights from the tsvector."], "Examples": ["strip('fat:2,4 cat:3 rat:5A'::tsvector) \u2192 'cat' 'fat' 'rat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["to_tsquery"], "Feature": ["to_tsquery ( [ config regconfig, ] query text ) \u2192 tsquery"], "Description": ["Converts text to a tsquery, normalizing words according to the specified or default configuration. The words must be combined by valid tsquery operators."], "Examples": ["to_tsquery('english', 'The & Fat & Rats') \u2192 'fat' & 'rat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["to_tsvector"], "Feature": ["to_tsvector ( [ config regconfig, ] document json ) \u2192 tsvector", "to_tsvector ( [ config regconfig, ] document jsonb ) \u2192 tsvector"], "Description": ["Converts each string value in the JSON document to a tsvector, normalizing words according to the specified or default configuration. The results are then concatenated in document order to produce the output. Position information is generated as though one stopword exists between each pair of string values. (Beware that \u201cdocument order\u201d of the fields of a JSON object is implementation-dependent when the input is jsonb; observe the difference in the examples.)"], "Examples": ["to_tsvector('english', '{\"aa\": \"The Fat Rats\", \"b\": \"dog\"}'::json) \u2192 'dog':5 'fat':2 'rat':3", "to_tsvector('english', '{\"aa\": \"The Fat Rats\", \"b\": \"dog\"}'::jsonb) \u2192 'dog':1 'fat':4 'rat':5"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["json_to_tsvector"], "Feature": ["json_to_tsvector ( [ config regconfig, ] document json, filter jsonb ) \u2192 tsvector", "jsonb_to_tsvector ( [ config regconfig, ] document jsonb, filter jsonb ) \u2192 tsvector"], "Description": ["Selects each item in the JSON document that is requested by the filter and converts each one to a tsvector, normalizing words according to the specified or default configuration. The results are then concatenated in document order to produce the output. Position information is generated as though one stopword exists between each pair of selected items. (Beware that \u201cdocument order\u201d of the fields of a JSON object is implementation-dependent when the input is jsonb.) The filter must be a jsonb array containing zero or more of these keywords: \"string\" (to include all string values), \"numeric\" (to include all numeric values), \"boolean\" (to include all boolean values), \"key\" (to include all keys), or \"all\" (to include all the above). As a special case, the filter can also be a simple JSON value that is one of these keywords."], "Examples": ["json_to_tsvector('english', '{\"a\": \"The Fat Rats\", \"b\": 123}'::json, '[\"string\", \"numeric\"]') \u2192 '123':5 'fat':2 'rat':3", "json_to_tsvector('english', '{\"cat\": \"The Fat Rats\", \"dog\": 123}'::json, '\"all\"') \u2192 '123':9 'cat':1 'dog':7 'fat':4 'rat':5"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["ts_delete"], "Feature": ["ts_delete ( vector tsvector, lexemes text[] ) \u2192 tsvector"], "Description": ["Removes any occurrences of the lexemes in lexemes from the vector. The strings in lexemes are taken as lexemes as-is, without further processing. Strings that do not match any lexeme in vector are ignored."], "Examples": ["ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, ARRAY['fat','rat']) \u2192 'cat':3"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["ts_filter"], "Feature": ["ts_filter ( vector tsvector, weights \"char\"[] ) \u2192 tsvector"], "Description": ["Selects only elements with the given weights from the vector."], "Examples": ["ts_filter('fat:2,4 cat:3b,7c rat:5A'::tsvector, '{a,b}') \u2192 'cat':3B 'rat':5A"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["ts_headline"], "Feature": ["ts_headline ( [ config regconfig, ] document json, query tsquery [, options text ] ) \u2192 text", "ts_headline ( [ config regconfig, ] document jsonb, query tsquery [, options text ] ) \u2192 text"], "Description": ["Displays, in an abbreviated form, match(es) for the query that occur in string values within the JSON document. See Section\u00a012.3.4 for more details."], "Examples": ["ts_headline('{\"cat\":\"raining cats and dogs\"}'::jsonb, 'cat') \u2192 {\"cat\": \"raining <b>cats</b> and dogs\"}"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["ts_rank"], "Feature": ["ts_rank ( [ weights real[], ] vector tsvector, query tsquery [, normalization integer ] ) \u2192 real"], "Description": ["Computes a score showing how well the vector matches the query. See Section\u00a012.3.3 for details."], "Examples": ["ts_rank(to_tsvector('raining cats and dogs'), 'cat') \u2192 0.06079271"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["ts_rank_cd"], "Feature": ["ts_rank_cd ( [ weights real[], ] vector tsvector, query tsquery [, normalization integer ] ) \u2192 real"], "Description": ["Computes a score showing how well the vector matches the query, using a cover density algorithm. See Section\u00a012.3.3 for details."], "Examples": ["ts_rank_cd(to_tsvector('raining cats and dogs'), 'cat') \u2192 0.1"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["ts_rewrite"], "Feature": ["ts_rewrite ( query tsquery, select text ) \u2192 tsquery"], "Description": ["Replaces portions of the query according to target(s) and substitute(s) obtained by executing a SELECT command. See Section\u00a012.4.2.1 for details."], "Examples": ["SELECT ts_rewrite('a & b'::tsquery, 'SELECT t,s FROM aliases') \u2192 'b' & ( 'foo' | 'bar' )"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["tsquery_phrase"], "Feature": ["tsquery_phrase ( query1 tsquery, query2 tsquery, distance integer ) \u2192 tsquery"], "Description": ["Constructs a phrase query that searches for matches of query1 and query2 that occur exactly distance lexemes apart."], "Examples": ["tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'), 10) \u2192 'fat' <10> 'cat'"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["tsvector_to_array"], "Feature": ["tsvector_to_array ( tsvector ) \u2192 text[]"], "Description": ["Converts a tsvector to an array of lexemes."], "Examples": ["tsvector_to_array('fat:2,4 cat:3 rat:5A'::tsvector) \u2192 {cat,fat,rat}"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["unnest"], "Feature": ["unnest ( tsvector ) \u2192 setof record ( lexeme text, positions smallint[], weights text )"], "Description": ["Expands a tsvector into a set of rows, one per lexeme."], "Examples": ["select * from unnest('cat:3 fat:2,4 rat:5A'::tsvector) \u2192"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["ts_debug"], "Feature": ["ts_debug ( [ config regconfig, ] document text ) \u2192 setof record ( alias text, description text, token text, dictionaries regdictionary[], dictionary regdictionary, lexemes text[] )"], "Description": ["Extracts and normalizes tokens from the document according to the specified or default text search configuration, and returns information about how each token was processed. See Section\u00a012.8.1 for details."], "Examples": ["ts_debug('english', 'The Brightest supernovaes') \u2192 (asciiword,\"Word, all ASCII\",The,{english_stem},english_stem,{}) ..."], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["ts_lexize"], "Feature": ["ts_lexize ( dict regdictionary, token text ) \u2192 text[]"], "Description": ["Returns an array of replacement lexemes if the input token is known to the dictionary, or an empty array if the token is known to the dictionary but it is a stop word, or NULL if it is not a known word. See Section\u00a012.8.3 for details."], "Examples": ["ts_lexize('english_stem', 'stars') \u2192 {star}"], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["ts_parse"], "Feature": ["ts_parse ( parser_oid oid, document text ) \u2192 setof record ( tokid integer, token text )"], "Description": ["Extracts tokens from the document using a parser specified by OID. See Section\u00a012.8.2 for details."], "Examples": ["ts_parse(3722, 'foo - bar') \u2192 (1,foo) ..."], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["ts_token_type"], "Feature": ["ts_token_type ( parser_oid oid ) \u2192 setof record ( tokid integer, alias text, description text )"], "Description": ["Returns a table that describes each type of token a parser specified by OID can recognize. See Section\u00a012.8.2 for details."], "Examples": ["ts_token_type(3722) \u2192 (1,asciiword,\"Word, all ASCII\") ..."], "Category": ["Text Search Functions and Operators"]}
{"HTML": ["https://www.postgresql.org/docs/16/functions-textsearch.html"], "Title": ["ts_stat"], "Feature": ["ts_stat ( sqlquery text [, weights text ] ) \u2192 setof record ( word text, ndoc integer, nentry integer )"], "Description": ["Executes the sqlquery, which must return a single tsvector column, and returns statistics about each distinct lexeme contained in the data. See Section\u00a012.4.4 for details."], "Examples": ["ts_stat('SELECT vector FROM apod') \u2192 (foo,10,15) ..."], "Category": ["Text Search Functions and Operators"]}
