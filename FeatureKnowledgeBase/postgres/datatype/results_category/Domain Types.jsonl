{"HTML": ["https://www.postgresql.org/docs/16/domains.html"], "Title": ["8.18. Domain Types"], "Feature": ["8.18. Domain Types"], "Description": ["\n\n\n8.18.\u00a0Domain Types #\n\n\n", "A domain is a user-defined data type that is based on another underlying type. Optionally, it can have constraints that restrict its valid values to a subset of what the underlying type would allow. Otherwise it behaves like the underlying type \u2014 for example, any operator or function that can be applied to the underlying type will work on the domain type. The underlying type can be any built-in or user-defined base type, enum type, array type, composite type, range type, or another domain.", "For example, we could create a domain over integers that accepts only positive integers:", "CREATE DOMAIN posint AS integer CHECK (VALUE > 0);\nCREATE TABLE mytable (id posint);\nINSERT INTO mytable VALUES(1);   -- works\nINSERT INTO mytable VALUES(-1);  -- fails\n", "When an operator or function of the underlying type is applied to a domain value, the domain is automatically down-cast to the underlying type. Thus, for example, the result of mytable.id - 1 is considered to be of type integer not posint. We could write (mytable.id - 1)::posint to cast the result back to posint, causing the domain's constraints to be rechecked. In this case, that would result in an error if the expression had been applied to an id value of 1. Assigning a value of the underlying type to a field or variable of the domain type is allowed without writing an explicit cast, but the domain's constraints will be checked.", "For additional information see CREATE DOMAIN."], "Examples": [], "Category": ["Domain Types"]}
