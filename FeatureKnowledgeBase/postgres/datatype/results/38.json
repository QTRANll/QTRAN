{
    "HTML": [
        "https://www.postgresql.org/docs/16/datatype-bit.html"
    ],
    "Title": [
        "8.10. Bit String Types"
    ],
    "Feature": [
        "8.10. Bit String Types"
    ],
    "Description": [
        "\n\n\n8.10.\u00a0Bit String Types #\n\n\n",
        "Bit strings are strings of 1's and 0's. They can be used to store or visualize bit masks. There are two SQL bit types: bit(n) and bit varying(n), where n is a positive integer.",
        "bit type data must match the length n exactly; it is an error to attempt to store shorter or longer bit strings. bit varying data is of variable length up to the maximum length n; longer strings will be rejected. Writing bit without a length is equivalent to bit(1), while bit varying without a length specification means unlimited length.",
        "\nNote\nIf one explicitly casts a bit-string value to bit(n), it will be truncated or zero-padded on the right to be exactly n bits, without raising an error. Similarly, if one explicitly casts a bit-string value to bit varying(n), it will be truncated on the right if it is more than n bits.\n",
        "Refer to Section\u00a04.1.2.5 for information about the syntax of bit string constants. Bit-logical operators and string manipulation functions are available; see Section\u00a09.6.",
        "\nExample\u00a08.3.\u00a0Using the Bit String Types\n\nCREATE TABLE test (a BIT(3), b BIT VARYING(5));\nINSERT INTO test VALUES (B'101', B'00');\nINSERT INTO test VALUES (B'10', B'101');\n\nERROR:  bit string length 2 does not match type bit(3)\n\nINSERT INTO test VALUES (B'10'::bit(3), B'101');\nSELECT * FROM test;\n\n  a  |  b\n-----+-----\n 101 | 00\n 100 | 101\n\n\n\n",
        "A bit string value requires 1 byte for each group of 8 bits, plus 5 or 8 bytes overhead depending on the length of the string (but long values may be compressed or moved out-of-line, as explained in Section\u00a08.3 for character strings)."
    ],
    "Examples": [
        "\nCREATE TABLE test (a BIT(3), b BIT VARYING(5));\nINSERT INTO test VALUES (B'101', B'00');\nINSERT INTO test VALUES (B'10', B'101');\n\nERROR:  bit string length 2 does not match type bit(3)\n\nINSERT INTO test VALUES (B'10'::bit(3), B'101');\nSELECT * FROM test;\n\n  a  |  b\n-----+-----\n 101 | 00\n 100 | 101\n\n\n"
    ],
    "Category": [
        "Bit String Types"
    ]
}