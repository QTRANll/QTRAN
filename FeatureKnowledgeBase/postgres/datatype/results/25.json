{
    "HTML": [
        "https://www.postgresql.org/docs/16/datatype-enum.html"
    ],
    "Title": [
        "8.7. Enumerated Types"
    ],
    "Feature": [
        "8.7. Enumerated Types"
    ],
    "Description": [
        "\n\n\n8.7.\u00a0Enumerated Types #\n\n\n",
        "\n\n8.7.1. Declaration of Enumerated Types\n8.7.2. Ordering\n8.7.3. Type Safety\n8.7.4. Implementation Details\n\n",
        "Enumerated (enum) types are data types that comprise a static, ordered set of values. They are equivalent to the enum types supported in a number of programming languages. An example of an enum type might be the days of the week, or a set of status values for a piece of data.",
        "\n\n\n\n8.7.1.\u00a0Declaration of Enumerated Types #\n\n\n\nEnum types are created using the CREATE TYPE command, for example:\nCREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');\n\nOnce created, the enum type can be used in table and function definitions much like any other type:\nCREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');\nCREATE TABLE person (\n    name text,\n    current_mood mood\n);\nINSERT INTO person VALUES ('Moe', 'happy');\nSELECT * FROM person WHERE current_mood = 'happy';\n name | current_mood\n------+--------------\n Moe  | happy\n(1 row)\n\n",
        "\n\n\n\n8.7.2.\u00a0Ordering #\n\n\n\nThe ordering of the values in an enum type is the order in which the values were listed when the type was created. All standard comparison operators and related aggregate functions are supported for enums. For example:\nINSERT INTO person VALUES ('Larry', 'sad');\nINSERT INTO person VALUES ('Curly', 'ok');\nSELECT * FROM person WHERE current_mood > 'sad';\n name  | current_mood\n-------+--------------\n Moe   | happy\n Curly | ok\n(2 rows)\n\nSELECT * FROM person WHERE current_mood > 'sad' ORDER BY current_mood;\n name  | current_mood\n-------+--------------\n Curly | ok\n Moe   | happy\n(2 rows)\n\nSELECT name\nFROM person\nWHERE current_mood = (SELECT MIN(current_mood) FROM person);\n name\n-------\n Larry\n(1 row)\n\n",
        "\n\n\n\n8.7.3.\u00a0Type Safety #\n\n\n\nEach enumerated data type is separate and cannot be compared with other enumerated types. See this example:\nCREATE TYPE happiness AS ENUM ('happy', 'very happy', 'ecstatic');\nCREATE TABLE holidays (\n    num_weeks integer,\n    happiness happiness\n);\nINSERT INTO holidays(num_weeks,happiness) VALUES (4, 'happy');\nINSERT INTO holidays(num_weeks,happiness) VALUES (6, 'very happy');\nINSERT INTO holidays(num_weeks,happiness) VALUES (8, 'ecstatic');\nINSERT INTO holidays(num_weeks,happiness) VALUES (2, 'sad');\nERROR:  invalid input value for enum happiness: \"sad\"\nSELECT person.name, holidays.num_weeks FROM person, holidays\n  WHERE person.current_mood = holidays.happiness;\nERROR:  operator does not exist: mood = happiness\n\nIf you really need to do something like that, you can either write a custom operator or add explicit casts to your query:\nSELECT person.name, holidays.num_weeks FROM person, holidays\n  WHERE person.current_mood::text = holidays.happiness::text;\n name | num_weeks\n------+-----------\n Moe  |         4\n(1 row)\n\n\n",
        "\n\n\n\n8.7.4.\u00a0Implementation Details #\n\n\n\nEnum labels are case sensitive, so 'happy' is not the same as 'HAPPY'. White space in the labels is significant too.\nAlthough enum types are primarily intended for static sets of values, there is support for adding new values to an existing enum type, and for renaming values (see ALTER TYPE). Existing values cannot be removed from an enum type, nor can the sort ordering of such values be changed, short of dropping and re-creating the enum type.\nAn enum value occupies four bytes on disk. The length of an enum value's textual label is limited by the NAMEDATALEN setting compiled into PostgreSQL; in standard builds this means at most 63 bytes.\nThe translations from internal enum values to textual labels are kept in the system catalog pg_enum. Querying this catalog directly can be useful.\n"
    ],
    "Examples": [],
    "Category": [
        "Enumerated Types"
    ],
    "EffectiveSQLsRefined": [],
    "EffectiveSQLsGenerated": [
        "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');"
    ],
    "EffectiveSQLsGeneratedCosts": [
        {
            "Total Tokens": 1256,
            "Prompt Tokens": 1229,
            "Completion Tokens": 27,
            "Total Cost (USD)": 0.00020055
        }
    ],
    "EffectiveSQLsGeneratedErrors": [
        "None"
    ],
    "EffectiveSQLs": [
        "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');"
    ]
}