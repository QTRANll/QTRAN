{"HTML": ["https://duckdb.org/docs/sql/data_types/list"], "Title": ["List"], "Feature": ["List"], "Description": ["\n\n\nDocumentation\n/ SQL\n/ Data Types\n\n\n\n\n\nDark Mode\n\n\n1.1 (stable)\n\n\n\n1.1 (stable)\n\n1.0\n0.10\n0.9\n0.8\n0.7\n\n\n\n\nList Type\n", "A LIST column encodes lists of values. Fields in the column can have values with different lengths, but they must all have the same underlying type. LISTs are typically used to store arrays of numbers, but can contain any uniform data type, including other LISTs and STRUCTs.", "LISTs are similar to PostgreSQL's ARRAY type. DuckDB uses the LIST terminology, but some array_ functions are provided for PostgreSQL compatibility.", "See the data types overview for a comparison between nested data types.", "Note\nFor storing fixed-length lists, DuckDB uses the ARRAY type.\n", "\nCreating Lists\n", "Lists can be created using the list_value(expr, ...) function or the equivalent bracket notation [expr, ...]. The expressions can be constants or arbitrary expressions. To create a list from a table column, use the list aggregate function.", "List of integers:", "SELECT [1, 2, 3];\n", "List of strings with a NULL value:", "SELECT ['duck', 'goose', NULL, 'heron'];\n", "List of lists with NULL values:", "SELECT [['duck', 'goose', 'heron'], NULL, ['frog', 'toad'], []];\n", "Create a list with the list_value function:", "SELECT list_value(1, 2, 3);\n", "Create a table with an INTEGER list column and a VARCHAR list column:", "CREATE TABLE list_table (int_list INTEGER[], varchar_list VARCHAR[]);\n", "\nRetrieving from Lists\n", "Retrieving one or more values from a list can be accomplished using brackets and slicing notation, or through list functions like list_extract. Multiple equivalent functions are provided as aliases for compatibility with systems that refer to lists as arrays. For example, the function array_slice.", "Note\nWe wrap the list creation in parenthesis so that it happens first.\nThis is only needed in our basic examples here, not when working with a list column.\nFor example, this can't be parsed: SELECT ['a', 'b', 'c'][1].\n", "\n\n\nExample\nResult\n\n\n\n\nSELECT (['a', 'b', 'c'])[3]\n'c'\n\n\nSELECT (['a', 'b', 'c'])[-1]\n'c'\n\n\nSELECT (['a', 'b', 'c'])[2 + 1]\n'c'\n\n\nSELECT list_extract(['a', 'b', 'c'], 3)\n'c'\n\n\nSELECT (['a', 'b', 'c'])[1:2]\n['a', 'b']\n\n\nSELECT (['a', 'b', 'c'])[:2]\n['a', 'b']\n\n\nSELECT (['a', 'b', 'c'])[-2:]\n['b', 'c']\n\n\nSELECT list_slice(['a', 'b', 'c'], 2, 3)\n['b', 'c']\n\n\n", "\nComparison and Ordering\n", "The LIST type can be compared using all the comparison operators.\nThese comparisons can be used in logical expressions\nsuch as WHERE and HAVING clauses, and return BOOLEAN values.", "The LIST ordering is defined positionally using the following rules, where min_len = min(len(l1), len(l2)).", "\nEquality. l1 and l2 are equal, if for each i in [1, min_len]: l1[i] = l2[i].\nLess Than. For the first index i in [1, min_len] where l1[i] != l2[i]:\nIf l1[i] < l2[i], l1 is less than l2.\n", "NULL values are compared following PostgreSQL's semantics.\nLower nesting levels are used for tie-breaking.", "Here are some queries returning true for the comparison.", "SELECT [1, 2] < [1, 3] AS result;\n", "SELECT [[1], [2, 4, 5]] < [[2]] AS result;\n", "SELECT [ ] < [1] AS result;\n", "These queries return false.", "SELECT [ ] < [ ] AS result;\n", "SELECT [1, 2] < [1] AS result;\n", "These queries return NULL.", "SELECT [1, 2] < [1, NULL, 4] AS result;\n", "\nUpdating Lists\n", "Updates on lists are internally represented as an insert and a delete operation.\nTherefore, updating list values may lead to a duplicate key error on primary/unique keys.\nSee the following example:", "CREATE TABLE tbl (id INTEGER PRIMARY KEY, lst INTEGER[], comment VARCHAR);\nINSERT INTO tbl VALUES (1, [12, 34], 'asd');\nUPDATE tbl SET lst = [56, 78] WHERE id = 1;\n", "Constraint Error: Duplicate key \"id: 1\" violates primary key constraint.\nIf this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).\n", "\nFunctions\n", "See List Functions.", "\n\nAbout this page\n\nReport content issue\nEdit this page on GitHub\n\n\n"], "Examples": ["SELECT [1, 2, 3];\n", "SELECT ['duck', 'goose', NULL, 'heron'];\n", "SELECT [['duck', 'goose', 'heron'], NULL, ['frog', 'toad'], []];\n", "SELECT list_value(1, 2, 3);\n", "CREATE TABLE list_table (int_list INTEGER[], varchar_list VARCHAR[]);\n", "SELECT [1, 2] < [1, 3] AS result;\n", "SELECT [[1], [2, 4, 5]] < [[2]] AS result;\n", "SELECT [ ] < [1] AS result;\n", "SELECT [ ] < [ ] AS result;\n", "SELECT [1, 2] < [1] AS result;\n", "SELECT [1, 2] < [1, NULL, 4] AS result;\n", "CREATE TABLE tbl (id INTEGER PRIMARY KEY, lst INTEGER[], comment VARCHAR);\nINSERT INTO tbl VALUES (1, [12, 34], 'asd');\nUPDATE tbl SET lst = [56, 78] WHERE id = 1;\n", "Constraint Error: Duplicate key \"id: 1\" violates primary key constraint.\nIf this is an unexpected constraint violation please double check with the known index limitations section in our documentation (https://duckdb.org/docs/sql/indexes).\n"], "Category": ["List"]}
