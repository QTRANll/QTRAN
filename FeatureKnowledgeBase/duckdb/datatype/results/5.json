{
    "HTML": [
        "https://duckdb.org/docs/sql/data_types/enum"
    ],
    "Title": [
        "Enum"
    ],
    "Feature": [
        "Enum"
    ],
    "Description": [
        "\n\n\nDocumentation\n/ SQL\n/ Data Types\n\n\n\n\n\nDark Mode\n\n\n1.1 (stable)\n\n\n\n1.1 (stable)\n\n1.0\n0.10\n0.9\n0.8\n0.7\n\n\n\n\nEnum Data Type\n",
        "\n\n\nName\nDescription\n\n\n\n\nenum\nDictionary Encoding representing all possible string values of a column.\n\n\n",
        "The enum type represents a dictionary data structure with all possible unique values of a column. For example, a column storing the days of the week can be an enum holding all possible days. Enums are particularly interesting for string columns with low cardinality (i.e., fewer distinct values). This is because the column only stores a numerical reference to the string in the enum dictionary, resulting in immense savings in disk storage and faster query performance.",
        "\nEnum Definition\n",
        "Enum types are created from either a hardcoded set of values or from a select statement that returns a single column of VARCHARs. The set of values in the select statement will be deduplicated, but if the enum is created from a hardcoded set there may not be any duplicates.",
        "Create enum using hardcoded values:",
        "CREATE TYPE \u27e8enum_name\u27e9 AS ENUM ([\u27e8value_1\u27e9, \u27e8value_2\u27e9,...]);\n",
        "Create enum using a SELECT statement that returns a single column of VARCHARs:",
        "CREATE TYPE \u27e8enum_name\u27e9 AS ENUM (select_expression\u27e9);\n",
        "For example:",
        "Creates new user defined type 'mood' as an enum:",
        "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');\n",
        "This will fail since the mood type already exists:",
        "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy', 'anxious');\n",
        "This will fail since enums cannot hold NULL values:",
        "CREATE TYPE breed AS ENUM ('maltese', NULL);\n",
        "This will fail since enum values must be unique:",
        "CREATE TYPE breed AS ENUM ('maltese', 'maltese');\n",
        "Create an enum from a select statement. First create an example table of values:",
        "CREATE TABLE my_inputs AS\n    SELECT 'duck'  AS my_varchar UNION ALL\n    SELECT 'duck'  AS my_varchar UNION ALL\n    SELECT 'goose' AS my_varchar;\n",
        "Create an enum using the unique string values in the my_varchar column:",
        "CREATE TYPE birds AS ENUM (SELECT my_varchar FROM my_inputs);\n",
        "Show the available values in the birds enum using the enum_range function:",
        "SELECT enum_range(NULL::birds) AS my_enum_range;\n",
        "\n\n\nmy_enum_range\n\n\n\n\n[duck, goose]\n\n\n",
        "\nEnum Usage\n",
        "After an enum has been created, it can be used anywhere a standard built-in type is used. For example, we can create a table with a column that references the enum.",
        "Creates a table person, with attributes name (string type) and current_mood (mood type):",
        "CREATE TABLE person (\n    name TEXT,\n    current_mood mood\n);\n",
        "Inserts tuples in the person table:",
        "INSERT INTO person\nVALUES ('Pedro', 'happy'), ('Mark', NULL), ('Pagliacci', 'sad'), ('Mr. Mackey', 'ok');\n",
        "The following query will fail since the mood type does not have quackity-quack value.",
        "INSERT INTO person\nVALUES ('Hannes', 'quackity-quack');\n",
        "The string sad is cast to the type mood, returning a numerical reference value.\nThis makes the comparison a numerical comparison instead of a string comparison.",
        "SELECT *\nFROM person\nWHERE current_mood = 'sad';\n",
        "\n\n\nname\ncurrent_mood\n\n\n\n\nPagliacci\nsad\n\n\n",
        "If you are importing data from a file, you can create an enum for a VARCHAR column before importing.\nGiven this, the following subquery selects automatically selects only distinct values:",
        "CREATE TYPE mood AS ENUM (SELECT mood FROM 'path/to/file.csv');\n",
        "Then you can create a table with the enum type and import using any data import statement:",
        "CREATE TABLE person (name TEXT, current_mood mood);\nCOPY person FROM 'path/to/file.csv';\n",
        "\nEnums vs. Strings\n",
        "DuckDB enums are automatically cast to VARCHAR types whenever necessary. This characteristic allows for enum columns to be used in any VARCHAR function. In addition, it also allows for comparisons between different enum columns, or an enum and a VARCHAR column.",
        "For example:",
        "Regexp_matches is a function that takes a VARCHAR, hence current_mood is cast to VARCHAR:",
        "SELECT regexp_matches(current_mood, '.*a.*') AS contains_a\nFROM person;\n",
        "\n\n\ncontains_a\n\n\n\n\ntrue\n\n\nNULL\n\n\ntrue\n\n\nfalse\n\n\n",
        "Create a new mood and table:",
        "CREATE TYPE new_mood AS ENUM ('happy', 'anxious');\nCREATE TABLE person_2 (\n    name text,\n    current_mood mood,\n    future_mood new_mood,\n    past_mood VARCHAR\n);\n",
        "Since the current_mood and future_mood columns are constructed on different enum types, DuckDB will cast both enums to strings and perform a string comparison:",
        "SELECT *\nFROM person_2\nWHERE current_mood = future_mood;\n",
        "When comparing the past_mood column (string), DuckDB will cast the current_mood enum to VARCHAR and perform a string comparison:",
        "SELECT *\nFROM person_2\nWHERE current_mood = past_mood;\n",
        "\nEnum Removal\n",
        "Enum types are stored in the catalog, and a catalog dependency is added to each table that uses them. It is possible to drop an enum from the catalog using the following command:",
        "DROP TYPE \u27e8enum_name\u27e9;\n",
        "Currently, it is possible to drop enums that are used in tables without affecting the tables.",
        "Warning\nThis behavior of the enum removal feature is subject to change. In future releases, it is expected that any dependent columns must be removed before dropping the enum, or the enum must be dropped with the additional CASCADE parameter.\n",
        "\nComparison of Enums\n",
        "Enum values are compared according to their order in the enum's definition. For example:",
        "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');\n",
        "SELECT 'sad'::mood < 'ok'::mood AS comp;\n",
        "\n\n\ncomp\n\n\n\n\ntrue\n\n\n",
        "SELECT unnest(['ok'::mood, 'happy'::mood, 'sad'::mood]) AS m\nORDER BY m;\n",
        "\n\n\nm\n\n\n\n\nsad\n\n\nok\n\n\nhappy\n\n\n",
        "\nFunctions\n",
        "See Enum Functions.",
        "\n\nAbout this page\n\nReport content issue\nEdit this page on GitHub\n\n\n"
    ],
    "Examples": [
        "CREATE TYPE \u27e8enum_name\u27e9 AS ENUM ([\u27e8value_1\u27e9, \u27e8value_2\u27e9,...]);\n",
        "CREATE TYPE \u27e8enum_name\u27e9 AS ENUM (select_expression\u27e9);\n",
        "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');\n",
        "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy', 'anxious');\n",
        "CREATE TYPE breed AS ENUM ('maltese', NULL);\n",
        "CREATE TYPE breed AS ENUM ('maltese', 'maltese');\n",
        "CREATE TABLE my_inputs AS\n    SELECT 'duck'  AS my_varchar UNION ALL\n    SELECT 'duck'  AS my_varchar UNION ALL\n    SELECT 'goose' AS my_varchar;\n",
        "CREATE TYPE birds AS ENUM (SELECT my_varchar FROM my_inputs);\n",
        "SELECT enum_range(NULL::birds) AS my_enum_range;\n",
        "CREATE TABLE person (\n    name TEXT,\n    current_mood mood\n);\n",
        "INSERT INTO person\nVALUES ('Pedro', 'happy'), ('Mark', NULL), ('Pagliacci', 'sad'), ('Mr. Mackey', 'ok');\n",
        "INSERT INTO person\nVALUES ('Hannes', 'quackity-quack');\n",
        "SELECT *\nFROM person\nWHERE current_mood = 'sad';\n",
        "CREATE TYPE mood AS ENUM (SELECT mood FROM 'path/to/file.csv');\n",
        "CREATE TABLE person (name TEXT, current_mood mood);\nCOPY person FROM 'path/to/file.csv';\n",
        "SELECT regexp_matches(current_mood, '.*a.*') AS contains_a\nFROM person;\n",
        "CREATE TYPE new_mood AS ENUM ('happy', 'anxious');\nCREATE TABLE person_2 (\n    name text,\n    current_mood mood,\n    future_mood new_mood,\n    past_mood VARCHAR\n);\n",
        "SELECT *\nFROM person_2\nWHERE current_mood = future_mood;\n",
        "SELECT *\nFROM person_2\nWHERE current_mood = past_mood;\n",
        "DROP TYPE \u27e8enum_name\u27e9;\n",
        "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');\n",
        "SELECT 'sad'::mood < 'ok'::mood AS comp;\n",
        "SELECT unnest(['ok'::mood, 'happy'::mood, 'sad'::mood]) AS m\nORDER BY m;\n"
    ],
    "Category": [
        "Enum"
    ],
    "EffectiveSQLsRefined": [
        "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');",
        "CREATE TABLE my_inputs AS\n    SELECT 'duck'  AS my_varchar UNION ALL\n    SELECT 'duck'  AS my_varchar UNION ALL\n    SELECT 'goose' AS my_varchar;",
        "CREATE TYPE birds AS ENUM (SELECT my_varchar FROM my_inputs);",
        "SELECT enum_range(NULL::birds) AS my_enum_range;",
        "CREATE TABLE person (\n    name TEXT,\n    current_mood mood\n);",
        "INSERT INTO person\nVALUES ('Pedro', 'happy'), ('Mark', NULL), ('Pagliacci', 'sad'), ('Mr. Mackey', 'ok');",
        "SELECT *\nFROM person\nWHERE current_mood = 'sad';",
        "SELECT regexp_matches(current_mood, '.*a.*') AS contains_a\nFROM person;",
        "CREATE TYPE new_mood AS ENUM ('happy', 'anxious');",
        "CREATE TABLE person_2 (\n    name text,\n    current_mood mood,\n    future_mood new_mood,\n    past_mood VARCHAR\n);",
        "SELECT *\nFROM person_2\nWHERE current_mood = future_mood;",
        "SELECT *\nFROM person_2\nWHERE current_mood = past_mood;",
        "SELECT 'sad'::mood < 'ok'::mood AS comp;",
        "SELECT unnest(['ok'::mood, 'happy'::mood, 'sad'::mood]) AS m\nORDER BY m;"
    ],
    "EffectiveSQLsGenerated": [],
    "EffectiveSQLsGeneratedCosts": [],
    "EffectiveSQLsGeneratedErrors": [],
    "EffectiveSQLs": [
        "CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');",
        "CREATE TABLE my_inputs AS\n    SELECT 'duck'  AS my_varchar UNION ALL\n    SELECT 'duck'  AS my_varchar UNION ALL\n    SELECT 'goose' AS my_varchar;",
        "CREATE TYPE birds AS ENUM (SELECT my_varchar FROM my_inputs);",
        "SELECT enum_range(NULL::birds) AS my_enum_range;",
        "CREATE TABLE person (\n    name TEXT,\n    current_mood mood\n);",
        "INSERT INTO person\nVALUES ('Pedro', 'happy'), ('Mark', NULL), ('Pagliacci', 'sad'), ('Mr. Mackey', 'ok');",
        "SELECT *\nFROM person\nWHERE current_mood = 'sad';",
        "SELECT regexp_matches(current_mood, '.*a.*') AS contains_a\nFROM person;",
        "CREATE TYPE new_mood AS ENUM ('happy', 'anxious');",
        "CREATE TABLE person_2 (\n    name text,\n    current_mood mood,\n    future_mood new_mood,\n    past_mood VARCHAR\n);",
        "SELECT *\nFROM person_2\nWHERE current_mood = future_mood;",
        "SELECT *\nFROM person_2\nWHERE current_mood = past_mood;",
        "SELECT 'sad'::mood < 'ok'::mood AS comp;",
        "SELECT unnest(['ok'::mood, 'happy'::mood, 'sad'::mood]) AS m\nORDER BY m;"
    ]
}