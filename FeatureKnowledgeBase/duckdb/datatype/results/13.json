{
    "HTML": [
        "https://duckdb.org/docs/sql/data_types/text"
    ],
    "Title": [
        "Text"
    ],
    "Feature": [
        "Text"
    ],
    "Description": [
        "\n\n\nDocumentation\n/ SQL\n/ Data Types\n\n\n\n\n\nDark Mode\n\n\n1.1 (stable)\n\n\n\n1.1 (stable)\n\n1.0\n0.10\n0.9\n0.8\n0.7\n\n\n\n\nText Types\n",
        "In DuckDB, strings can be stored in the VARCHAR field.\nThe field allows storage of Unicode characters. Internally, the data is encoded as UTF-8.",
        "\n\n\nName\nAliases\nDescription\n\n\n\n\nVARCHAR\nCHAR, BPCHAR, STRING, TEXT\nVariable-length character string.\n\n\nVARCHAR(n)\nCHAR(n), BPCHAR(n), STRING(n), TEXT(n)\nVariable-length character string. The maximum length n has no effect and is only provided for compatibility.\n\n\n",
        "\nSpecifying a Length Limit\n",
        "Specifying the length for the VARCHAR, STRING, and TEXT types is not required and has no effect on the system. Specifying the length will not improve performance or reduce storage space of the strings in the database. These variants variant is supported for compatibility reasons with other systems that do require a length to be specified for strings.",
        "If you wish to restrict the number of characters in a VARCHAR column for data integrity reasons the CHECK constraint should be used, for example:",
        "CREATE TABLE strings (\n    val VARCHAR CHECK (length(val) <= 10) -- val has a maximum length of 10\n);\n",
        "The VARCHAR field allows storage of Unicode characters. Internally, the data is encoded as UTF-8.",
        "\nText Type Values\n",
        "Values of the text type are character strings, also known as string values or simply strings. At runtime, string values are constructed in one of the following ways:",
        "\nreferencing columns whose declared or implied type is the text data type\nstring literals\ncasting expressions to a text type\napplying a string operator, or invoking a function that returns a text type value\n",
        "\nStrings with Special Characters\n",
        "To use special characters in string, use escape string literals or dollar-quoted string literals. Alternatively, you can use concatenation and the chr character function:",
        "SELECT 'Hello' || chr(10) || 'world' AS msg;\n",
        "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     msg      \u2502\n\u2502   varchar    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Hello\\nworld \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n",
        "\nFunctions\n",
        "See Text Functions and Pattern Matching.",
        "\n\nAbout this page\n\nReport content issue\nEdit this page on GitHub\n\n\n"
    ],
    "Examples": [
        "CREATE TABLE strings (\n    val VARCHAR CHECK (length(val) <= 10) -- val has a maximum length of 10\n);\n",
        "SELECT 'Hello' || chr(10) || 'world' AS msg;\n",
        "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     msg      \u2502\n\u2502   varchar    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Hello\\nworld \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"
    ],
    "Category": [
        "Text"
    ],
    "EffectiveSQLsRefined": [
        "CREATE TABLE strings (\n    val VARCHAR CHECK (length(val) <= 10) -- val has a maximum length of 10\n);",
        "SELECT 'Hello' || chr(10) || 'world' AS msg;"
    ],
    "EffectiveSQLsGenerated": [],
    "EffectiveSQLsGeneratedCosts": [],
    "EffectiveSQLsGeneratedErrors": [],
    "EffectiveSQLs": [
        "CREATE TABLE strings (\n    val VARCHAR CHECK (length(val) <= 10) -- val has a maximum length of 10\n);",
        "SELECT 'Hello' || chr(10) || 'world' AS msg;"
    ]
}