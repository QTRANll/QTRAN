{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list[index]", "Bracket notation serves as an alias for list_extract."], "Examples": ["[4, 5, 6][3]"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_slice"], "Feature": ["list_slice"], "Description": ["list[begin:end]", "Bracket notation with colon is an alias for list_slice."], "Examples": ["[4, 5, 6][2:3]"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list[begin:end:step]"], "Feature": ["list[begin:end:step]"], "Description": ["list_slice in bracket notation with an added step feature."], "Examples": ["[4, 5, 6][:-:2]"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_pop_back(list)"], "Feature": ["array_pop_back(list)"], "Description": ["Returns the list without the last element."], "Examples": ["array_pop_back([4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_pop_front(list)"], "Feature": ["array_pop_front(list)"], "Description": ["Returns the list without the first element."], "Examples": ["array_pop_front([4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["flatten(list_of_lists)"], "Feature": ["flatten(list_of_lists)"], "Description": ["Concatenate a list of lists into a single list. This only flattens one level of the list (see examples)."], "Examples": ["flatten([[1, 2], [3, 4]])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_length"], "Feature": ["array_length"], "Description": ["len(list)", "Return the length of the list."], "Examples": ["len([1, 2, 3])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_any_value(list)"], "Feature": ["list_any_value(list)"], "Description": ["Returns the first non-null value in the list."], "Examples": ["list_any_value([NULL, -3])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_back"], "Feature": ["array_push_back"], "Description": ["array_append", "list_append(list, element)", "Appends element to list."], "Examples": ["list_append([2, 3], 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenate two lists. NULL inputs are skipped. See also ||"], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_cosine_similarity(list1, list2)"], "Feature": ["list_cosine_similarity(list1, list2)"], "Description": ["Compute the cosine similarity between two lists."], "Examples": ["list_cosine_similarity([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_cosine_distance(list1, list2)"], "Feature": ["list_cosine_distance(list1, list2)"], "Description": ["Compute the cosine distance between two lists. Equivalent to 1.0 - list_cosine_similarity.", "Compute the cosine distance between two lists. Equivalent to 1.0 - list_cosine_similarity"], "Examples": ["list_cosine_distance([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_distance(list1, list2)"], "Feature": ["list_distance(list1, list2)"], "Description": ["Calculates the Euclidean distance between two points with coordinates given in two inputs lists of equal length."], "Examples": ["list_distance([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_distinct"], "Feature": ["array_distinct"], "Description": ["list_distinct(list)", "Removes all duplicates and NULL values from a list. Does not preserve the original order."], "Examples": ["list_distinct([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_inner_product"], "Feature": ["list_inner_product"], "Description": ["list_dot_product(list1, list2)", "Computes the dot product of two same-sized lists of numbers."], "Examples": ["list_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_negative_inner_product"], "Feature": ["list_negative_inner_product"], "Description": ["list_negative_dot_product(list1, list2)", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product.", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product"], "Examples": ["list_negative_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["list_element", "list_extract(list, index)", "Extract the indexth (1-based) value from the list."], "Examples": ["list_extract([4, 5, 6], 3)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions page for more details."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_grade_up"], "Feature": ["array_grade_up"], "Description": ["list_grade_up(list)", "Works like sort, but the results are the indexes that correspond to the position in the original list instead of the actual values."], "Examples": ["list_grade_up([30, 10, 40, 20])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_all"], "Feature": ["array_has_all"], "Description": ["list_has_all(list, sub-list)", "Returns true if all elements of sub-list exist in list."], "Examples": ["list_has_all([4, 5, 6], [4, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_any"], "Feature": ["array_has_any"], "Description": ["list_has_any(list1, list2)", "Returns true if any elements exist is both lists."], "Examples": ["list_has_any([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_intersect"], "Feature": ["array_intersect"], "Description": ["list_intersect(list1, list2)", "Returns a list of all the elements that exist in both l1 and l2, without duplicates."], "Examples": ["list_intersect([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_front"], "Feature": ["array_push_front"], "Description": ["array_prepend", "list_prepend(element, list)", "Prepends element to list."], "Examples": ["list_prepend(3, [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Returns a single value that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_resize"], "Feature": ["array_resize"], "Description": ["list_resize(list, size[, value])", "Resizes the list to contain size elements. Initializes new elements with value or NULL if value is not set."], "Examples": ["list_resize([1, 2, 3], 5, 0)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse_sort"], "Feature": ["array_reverse_sort"], "Description": ["list_reverse_sort(list)", "Sorts the elements of the list in reverse order. See the Sorting Lists section for more details about the NULL sorting order."], "Examples": ["list_reverse_sort([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse"], "Feature": ["array_reverse"], "Description": ["list_reverse(list)", "Reverses the list."], "Examples": ["list_reverse([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_select"], "Feature": ["array_select"], "Description": ["list_select(value_list, index_list)", "Returns a list based on the elements selected by the index_list."], "Examples": ["list_select([10, 20, 30, 40], [1, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["list_slice(list, begin, end, step)", "list_slice with added step feature."], "Examples": ["list_slice([4, 5, 6], 1, 3, 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_slice(list, begin, end)"], "Feature": ["list_slice(list, begin, end)"], "Description": ["Extract a sublist using slice conventions. Negative values are accepted. See slicing."], "Examples": ["list_slice([4, 5, 6], 2, 3)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_sort"], "Feature": ["array_sort"], "Description": ["list_sort(list)", "Sorts the elements of the list. See the Sorting Lists section for more details about the sorting order and the NULL sorting order."], "Examples": ["list_sort([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_unique"], "Feature": ["array_unique"], "Description": ["list_unique(list)", "Counts the unique elements of a list."], "Examples": ["list_unique([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_pack"], "Feature": ["list_pack"], "Description": ["list_value(any, ...)", "Create a LIST containing the argument values."], "Examples": ["list_value(4, 5, 6)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_where"], "Feature": ["array_where"], "Description": ["list_where(value_list, mask_list)", "Returns a list with the BOOLEANs in mask_list applied as a mask to the value_list."], "Examples": ["list_where([10, 20, 30, 40], [true, false, false, true])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_zip(list_1, list_2, ...[, truncate])"], "Feature": ["list_zip(list_1, list_2, ...[, truncate])"], "Description": ["Zips k LISTs to a new LIST whose length will be that of the longest list. Its elements are structs of k elements from each list list_1, \u2026, list_k, missing elements are replaced with NULL. If truncate is set, all lists are truncated to the smallest list length."], "Examples": [], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["unnest(list)"], "Feature": ["unnest(list)"], "Description": ["Unnests a list by one level. Note that this is a special function that alters the cardinality of the result. See the unnest page for more details."], "Examples": ["unnest([1, 2, 3])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list[index]", "Bracket notation serves as an alias for list_extract."], "Examples": ["[4, 5, 6][3]"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_slice"], "Feature": ["list_slice"], "Description": ["list[begin:end]", "Bracket notation with colon is an alias for list_slice."], "Examples": ["[4, 5, 6][2:3]"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_length"], "Feature": ["array_length"], "Description": ["len(list)", "Return the length of the list."], "Examples": ["len([1, 2, 3])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_back"], "Feature": ["array_push_back"], "Description": ["array_append", "list_append(list, element)", "Appends element to list."], "Examples": ["list_append([2, 3], 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_back"], "Feature": ["array_push_back"], "Description": ["array_append", "list_append(list, element)", "Appends element to list."], "Examples": ["list_append([2, 3], 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenate two lists. NULL inputs are skipped. See also ||"], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenate two lists. NULL inputs are skipped. See also ||"], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenate two lists. NULL inputs are skipped. See also ||"], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_distinct"], "Feature": ["array_distinct"], "Description": ["list_distinct(list)", "Removes all duplicates and NULL values from a list. Does not preserve the original order."], "Examples": ["list_distinct([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_inner_product"], "Feature": ["list_inner_product"], "Description": ["list_dot_product(list1, list2)", "Computes the dot product of two same-sized lists of numbers."], "Examples": ["list_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_negative_inner_product"], "Feature": ["list_negative_inner_product"], "Description": ["list_negative_dot_product(list1, list2)", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product.", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product"], "Examples": ["list_negative_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["list_element", "list_extract(list, index)", "Extract the indexth (1-based) value from the list."], "Examples": ["list_extract([4, 5, 6], 3)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["list_element", "list_extract(list, index)", "Extract the indexth (1-based) value from the list."], "Examples": ["list_extract([4, 5, 6], 3)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions page for more details."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions page for more details."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_grade_up"], "Feature": ["array_grade_up"], "Description": ["list_grade_up(list)", "Works like sort, but the results are the indexes that correspond to the position in the original list instead of the actual values."], "Examples": ["list_grade_up([30, 10, 40, 20])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_all"], "Feature": ["array_has_all"], "Description": ["list_has_all(list, sub-list)", "Returns true if all elements of sub-list exist in list."], "Examples": ["list_has_all([4, 5, 6], [4, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_any"], "Feature": ["array_has_any"], "Description": ["list_has_any(list1, list2)", "Returns true if any elements exist is both lists."], "Examples": ["list_has_any([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_intersect"], "Feature": ["array_intersect"], "Description": ["list_intersect(list1, list2)", "Returns a list of all the elements that exist in both l1 and l2, without duplicates."], "Examples": ["list_intersect([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_front"], "Feature": ["array_push_front"], "Description": ["array_prepend", "list_prepend(element, list)", "Prepends element to list."], "Examples": ["list_prepend(3, [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_front"], "Feature": ["array_push_front"], "Description": ["array_prepend", "list_prepend(element, list)", "Prepends element to list."], "Examples": ["list_prepend(3, [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Returns a single value that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Returns a single value that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_resize"], "Feature": ["array_resize"], "Description": ["list_resize(list, size[, value])", "Resizes the list to contain size elements. Initializes new elements with value or NULL if value is not set."], "Examples": ["list_resize([1, 2, 3], 5, 0)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse_sort"], "Feature": ["array_reverse_sort"], "Description": ["list_reverse_sort(list)", "Sorts the elements of the list in reverse order. See the Sorting Lists section for more details about the NULL sorting order."], "Examples": ["list_reverse_sort([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse"], "Feature": ["array_reverse"], "Description": ["list_reverse(list)", "Reverses the list."], "Examples": ["list_reverse([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_select"], "Feature": ["array_select"], "Description": ["list_select(value_list, index_list)", "Returns a list based on the elements selected by the index_list."], "Examples": ["list_select([10, 20, 30, 40], [1, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["list_slice(list, begin, end, step)", "list_slice with added step feature."], "Examples": ["list_slice([4, 5, 6], 1, 3, 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_sort"], "Feature": ["array_sort"], "Description": ["list_sort(list)", "Sorts the elements of the list. See the Sorting Lists section for more details about the sorting order and the NULL sorting order."], "Examples": ["list_sort([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_unique"], "Feature": ["array_unique"], "Description": ["list_unique(list)", "Counts the unique elements of a list."], "Examples": ["list_unique([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_pack"], "Feature": ["list_pack"], "Description": ["list_value(any, ...)", "Create a LIST containing the argument values."], "Examples": ["list_value(4, 5, 6)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_where"], "Feature": ["array_where"], "Description": ["list_where(value_list, mask_list)", "Returns a list with the BOOLEANs in mask_list applied as a mask to the value_list."], "Examples": ["list_where([10, 20, 30, 40], [true, false, false, true])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_zip"], "Feature": ["array_zip"], "Description": ["list_zip(list1, list2, ...)", "Zips k LISTs to a new LIST whose length will be that of the longest list. Its elements are structs of k elements from each list list_1, \u2026, list_k, missing elements are replaced with NULL. If truncate is set, all lists are truncated to the smallest list length."], "Examples": ["list_zip([1, 2], [3, 4], [5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_zip"], "Feature": ["array_zip"], "Description": ["list_zip(list1, list2, ...)", "Zips k LISTs to a new LIST whose length will be that of the longest list. Its elements are structs of k elements from each list list_1, \u2026, list_k, missing elements are replaced with NULL. If truncate is set, all lists are truncated to the smallest list length."], "Examples": ["list_zip([1, 2], [3, 4], [5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list[index]", "Bracket notation serves as an alias for list_extract."], "Examples": ["[4, 5, 6][3]"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_slice"], "Feature": ["list_slice"], "Description": ["list[begin:end]", "Bracket notation with colon is an alias for list_slice."], "Examples": ["[4, 5, 6][2:3]"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list[begin:end:step]"], "Feature": ["list[begin:end:step]"], "Description": ["list_slice in bracket notation with an added step feature."], "Examples": ["[4, 5, 6][:-:2]"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_pop_back(list)"], "Feature": ["array_pop_back(list)"], "Description": ["Returns the list without the last element."], "Examples": ["array_pop_back([4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_pop_front(list)"], "Feature": ["array_pop_front(list)"], "Description": ["Returns the list without the first element."], "Examples": ["array_pop_front([4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["flatten(list_of_lists)"], "Feature": ["flatten(list_of_lists)"], "Description": ["Concatenate a list of lists into a single list. This only flattens one level of the list (see examples)."], "Examples": ["flatten([[1, 2], [3, 4]])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_length"], "Feature": ["array_length"], "Description": ["len(list)", "Return the length of the list."], "Examples": ["len([1, 2, 3])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_any_value(list)"], "Feature": ["list_any_value(list)"], "Description": ["Returns the first non-null value in the list."], "Examples": ["list_any_value([NULL, -3])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_back"], "Feature": ["array_push_back"], "Description": ["array_append", "list_append(list, element)", "Appends element to list."], "Examples": ["list_append([2, 3], 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenate two lists. NULL inputs are skipped. See also ||"], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_cosine_similarity(list1, list2)"], "Feature": ["list_cosine_similarity(list1, list2)"], "Description": ["Compute the cosine similarity between two lists."], "Examples": ["list_cosine_similarity([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_cosine_distance(list1, list2)"], "Feature": ["list_cosine_distance(list1, list2)"], "Description": ["Compute the cosine distance between two lists. Equivalent to 1.0 - list_cosine_similarity.", "Compute the cosine distance between two lists. Equivalent to 1.0 - list_cosine_similarity"], "Examples": ["list_cosine_distance([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_distance(list1, list2)"], "Feature": ["list_distance(list1, list2)"], "Description": ["Calculates the Euclidean distance between two points with coordinates given in two inputs lists of equal length."], "Examples": ["list_distance([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_distinct"], "Feature": ["array_distinct"], "Description": ["list_distinct(list)", "Removes all duplicates and NULL values from a list. Does not preserve the original order."], "Examples": ["list_distinct([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_inner_product"], "Feature": ["list_inner_product"], "Description": ["list_dot_product(list1, list2)", "Computes the dot product of two same-sized lists of numbers."], "Examples": ["list_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_negative_inner_product"], "Feature": ["list_negative_inner_product"], "Description": ["list_negative_dot_product(list1, list2)", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product.", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product"], "Examples": ["list_negative_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["list_element", "list_extract(list, index)", "Extract the indexth (1-based) value from the list."], "Examples": ["list_extract([4, 5, 6], 3)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions page for more details."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_grade_up"], "Feature": ["array_grade_up"], "Description": ["list_grade_up(list)", "Works like sort, but the results are the indexes that correspond to the position in the original list instead of the actual values."], "Examples": ["list_grade_up([30, 10, 40, 20])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_all"], "Feature": ["array_has_all"], "Description": ["list_has_all(list, sub-list)", "Returns true if all elements of sub-list exist in list."], "Examples": ["list_has_all([4, 5, 6], [4, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_any"], "Feature": ["array_has_any"], "Description": ["list_has_any(list1, list2)", "Returns true if any elements exist is both lists."], "Examples": ["list_has_any([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_intersect"], "Feature": ["array_intersect"], "Description": ["list_intersect(list1, list2)", "Returns a list of all the elements that exist in both l1 and l2, without duplicates."], "Examples": ["list_intersect([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_front"], "Feature": ["array_push_front"], "Description": ["array_prepend", "list_prepend(element, list)", "Prepends element to list."], "Examples": ["list_prepend(3, [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Returns a single value that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_resize"], "Feature": ["array_resize"], "Description": ["list_resize(list, size[, value])", "Resizes the list to contain size elements. Initializes new elements with value or NULL if value is not set."], "Examples": ["list_resize([1, 2, 3], 5, 0)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse_sort"], "Feature": ["array_reverse_sort"], "Description": ["list_reverse_sort(list)", "Sorts the elements of the list in reverse order. See the Sorting Lists section for more details about the NULL sorting order."], "Examples": ["list_reverse_sort([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse"], "Feature": ["array_reverse"], "Description": ["list_reverse(list)", "Reverses the list."], "Examples": ["list_reverse([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_select"], "Feature": ["array_select"], "Description": ["list_select(value_list, index_list)", "Returns a list based on the elements selected by the index_list."], "Examples": ["list_select([10, 20, 30, 40], [1, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["list_slice(list, begin, end, step)", "list_slice with added step feature."], "Examples": ["list_slice([4, 5, 6], 1, 3, 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_slice(list, begin, end)"], "Feature": ["list_slice(list, begin, end)"], "Description": ["Extract a sublist using slice conventions. Negative values are accepted. See slicing."], "Examples": ["list_slice([4, 5, 6], 2, 3)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_sort"], "Feature": ["array_sort"], "Description": ["list_sort(list)", "Sorts the elements of the list. See the Sorting Lists section for more details about the sorting order and the NULL sorting order."], "Examples": ["list_sort([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_unique"], "Feature": ["array_unique"], "Description": ["list_unique(list)", "Counts the unique elements of a list."], "Examples": ["list_unique([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_pack"], "Feature": ["list_pack"], "Description": ["list_value(any, ...)", "Create a LIST containing the argument values."], "Examples": ["list_value(4, 5, 6)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_where"], "Feature": ["array_where"], "Description": ["list_where(value_list, mask_list)", "Returns a list with the BOOLEANs in mask_list applied as a mask to the value_list."], "Examples": ["list_where([10, 20, 30, 40], [true, false, false, true])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_zip(list_1, list_2, ...[, truncate])"], "Feature": ["list_zip(list_1, list_2, ...[, truncate])"], "Description": ["Zips k LISTs to a new LIST whose length will be that of the longest list. Its elements are structs of k elements from each list list_1, \u2026, list_k, missing elements are replaced with NULL. If truncate is set, all lists are truncated to the smallest list length."], "Examples": [], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["unnest(list)"], "Feature": ["unnest(list)"], "Description": ["Unnests a list by one level. Note that this is a special function that alters the cardinality of the result. See the unnest page for more details."], "Examples": ["unnest([1, 2, 3])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_extract"], "Feature": ["list_extract"], "Description": ["list[index]", "Bracket notation serves as an alias for list_extract."], "Examples": ["[4, 5, 6][3]"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_slice"], "Feature": ["list_slice"], "Description": ["list[begin:end]", "Bracket notation with colon is an alias for list_slice."], "Examples": ["[4, 5, 6][2:3]"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_length"], "Feature": ["array_length"], "Description": ["len(list)", "Return the length of the list."], "Examples": ["len([1, 2, 3])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_aggr"], "Feature": ["array_aggr"], "Description": ["array_aggregate", "aggregate", "list_aggr", "list_aggregate(list, name)", "Executes the aggregate function name on the elements of list. See the List Aggregates section for more details."], "Examples": ["list_aggregate([1, 2, NULL], 'min')"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_back"], "Feature": ["array_push_back"], "Description": ["array_append", "list_append(list, element)", "Appends element to list."], "Examples": ["list_append([2, 3], 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_back"], "Feature": ["array_push_back"], "Description": ["array_append", "list_append(list, element)", "Appends element to list."], "Examples": ["list_append([2, 3], 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenate two lists. NULL inputs are skipped. See also ||"], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenate two lists. NULL inputs are skipped. See also ||"], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_cat"], "Feature": ["array_cat"], "Description": ["array_concat", "list_cat", "list_concat(list1, list2)", "Concatenate two lists. NULL inputs are skipped. See also ||"], "Examples": ["list_concat([2, 3], [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has"], "Feature": ["array_has"], "Description": ["array_contains", "list_has", "list_contains(list, element)", "Returns true if the list contains the element."], "Examples": ["list_contains([1, 2, NULL], 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_distinct"], "Feature": ["array_distinct"], "Description": ["list_distinct(list)", "Removes all duplicates and NULL values from a list. Does not preserve the original order."], "Examples": ["list_distinct([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_inner_product"], "Feature": ["list_inner_product"], "Description": ["list_dot_product(list1, list2)", "Computes the dot product of two same-sized lists of numbers."], "Examples": ["list_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_negative_inner_product"], "Feature": ["list_negative_inner_product"], "Description": ["list_negative_dot_product(list1, list2)", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product.", "Computes the negative dot product of two same-sized lists of numbers. Equivalent to - list_dot_product"], "Examples": ["list_negative_dot_product([1, 2, 3], [1, 2, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["list_element", "list_extract(list, index)", "Extract the indexth (1-based) value from the list."], "Examples": ["list_extract([4, 5, 6], 3)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_extract"], "Feature": ["array_extract"], "Description": ["list_element", "list_extract(list, index)", "Extract the indexth (1-based) value from the list."], "Examples": ["list_extract([4, 5, 6], 3)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions page for more details."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["filter"], "Feature": ["filter"], "Description": ["array_filter", "list_filter(list, lambda)", "Constructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions page for more details."], "Examples": ["list_filter([4, 5, 6], x -> x > 4)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_grade_up"], "Feature": ["array_grade_up"], "Description": ["list_grade_up(list)", "Works like sort, but the results are the indexes that correspond to the position in the original list instead of the actual values."], "Examples": ["list_grade_up([30, 10, 40, 20])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_all"], "Feature": ["array_has_all"], "Description": ["list_has_all(list, sub-list)", "Returns true if all elements of sub-list exist in list."], "Examples": ["list_has_all([4, 5, 6], [4, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_has_any"], "Feature": ["array_has_any"], "Description": ["list_has_any(list1, list2)", "Returns true if any elements exist is both lists."], "Examples": ["list_has_any([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_intersect"], "Feature": ["array_intersect"], "Description": ["list_intersect(list1, list2)", "Returns a list of all the elements that exist in both l1 and l2, without duplicates."], "Examples": ["list_intersect([1, 2, 3], [2, 3, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_indexof"], "Feature": ["array_indexof"], "Description": ["array_position", "list_indexof", "list_position(list, element)", "Returns the index of the element if the list contains the element. If the element is not found, it returns NULL."], "Examples": ["list_position([1, 2, NULL], 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_front"], "Feature": ["array_push_front"], "Description": ["array_prepend", "list_prepend(element, list)", "Prepends element to list."], "Examples": ["list_prepend(3, [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_push_front"], "Feature": ["array_push_front"], "Description": ["array_prepend", "list_prepend(element, list)", "Prepends element to list."], "Examples": ["list_prepend(3, [4, 5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Returns a single value that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["reduce"], "Feature": ["reduce"], "Description": ["array_reduce", "list_reduce(list, lambda)", "Returns a single value that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_reduce([4, 5, 6], (x, y) -> x + y)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_resize"], "Feature": ["array_resize"], "Description": ["list_resize(list, size[, value])", "Resizes the list to contain size elements. Initializes new elements with value or NULL if value is not set."], "Examples": ["list_resize([1, 2, 3], 5, 0)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse_sort"], "Feature": ["array_reverse_sort"], "Description": ["list_reverse_sort(list)", "Sorts the elements of the list in reverse order. See the Sorting Lists section for more details about the NULL sorting order."], "Examples": ["list_reverse_sort([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_reverse"], "Feature": ["array_reverse"], "Description": ["list_reverse(list)", "Reverses the list."], "Examples": ["list_reverse([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_select"], "Feature": ["array_select"], "Description": ["list_select(value_list, index_list)", "Returns a list based on the elements selected by the index_list."], "Examples": ["list_select([10, 20, 30, 40], [1, 4])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_slice"], "Feature": ["array_slice"], "Description": ["list_slice(list, begin, end, step)", "list_slice with added step feature."], "Examples": ["list_slice([4, 5, 6], 1, 3, 2)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_sort"], "Feature": ["array_sort"], "Description": ["list_sort(list)", "Sorts the elements of the list. See the Sorting Lists section for more details about the sorting order and the NULL sorting order."], "Examples": ["list_sort([3, 6, 1, 2])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_apply"], "Feature": ["array_apply"], "Description": ["list_apply", "apply", "array_transform", "list_transform(list, lambda)", "Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions page for more details."], "Examples": ["list_transform([4, 5, 6], x -> x + 1)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_unique"], "Feature": ["array_unique"], "Description": ["list_unique(list)", "Counts the unique elements of a list."], "Examples": ["list_unique([1, 1, NULL, -3, 1, 5])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["list_pack"], "Feature": ["list_pack"], "Description": ["list_value(any, ...)", "Create a LIST containing the argument values."], "Examples": ["list_value(4, 5, 6)"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_where"], "Feature": ["array_where"], "Description": ["list_where(value_list, mask_list)", "Returns a list with the BOOLEANs in mask_list applied as a mask to the value_list."], "Examples": ["list_where([10, 20, 30, 40], [true, false, false, true])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_zip"], "Feature": ["array_zip"], "Description": ["list_zip(list1, list2, ...)", "Zips k LISTs to a new LIST whose length will be that of the longest list. Its elements are structs of k elements from each list list_1, \u2026, list_k, missing elements are replaced with NULL. If truncate is set, all lists are truncated to the smallest list length."], "Examples": ["list_zip([1, 2], [3, 4], [5, 6])"], "Category": ["List Functions"]}
{"HTML": ["https://duckdb.org/docs/sql/functions/list"], "Title": ["array_zip"], "Feature": ["array_zip"], "Description": ["list_zip(list1, list2, ...)", "Zips k LISTs to a new LIST whose length will be that of the longest list. Its elements are structs of k elements from each list list_1, \u2026, list_k, missing elements are replaced with NULL. If truncate is set, all lists are truncated to the smallest list length."], "Examples": ["list_zip([1, 2], [3, 4], [5, 6])"], "Category": ["List Functions"]}
