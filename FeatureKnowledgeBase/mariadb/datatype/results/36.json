{
    "HTML": [
        "https://mariadb.com/kb/en/time/"
    ],
    "Title": [
        "TIME"
    ],
    "Feature": [
        "TIME [(<microsecond precision>)]\n"
    ],
    "Description": [
        "A time. The range is '-838:59:59.999999' to '838:59:59.999999'. Microsecond precision can be from 0-6; if not specified 0 is used. Microseconds have been available since MariaDB 5.3. ",
        "MariaDB displays TIME values in 'HH:MM:SS.ssssss' format, but allows assignment of times in looser formats, including 'D HH:MM:SS', 'HH:MM:SS', 'HH:MM', 'D HH:MM', 'D HH', 'SS', or 'HHMMSS', as well as permitting dropping of any leading zeros when a delimiter is provided, for example '3:9:10'. For details, see date and time literals.",
        "MariaDB 10.1.2 introduced the --mysql56-temporal-format option, on by default, which allows MariaDB to store TIMEs using the same low-level format MySQL 5.6 uses.",
        "Internal Format",
        "In MariaDB 10.1.2 a new temporal format was introduced from MySQL 5.6 that alters how the TIME, DATETIME and TIMESTAMP columns operate at lower levels.  These changes allow these temporal data types to have fractional parts and negative values.  You can disable this feature using the mysql56_temporal_format system variable.",
        "Tables that include TIMESTAMP values that were created on an older version of MariaDB or that were created while the mysql56_temporal_format system variable was disabled continue to store data using the older data type format.",
        "In order to update table columns from the older format to the newer format, execute an ALTER TABLE... MODIFY COLUMN statement that changes the column to the *same* data type. This change may be needed if you want to export the table's tablespace and import it onto a server that has mysql56_temporal_format=ON set (see MDEV-15225).",
        "For instance, if you have a TIME column in your table: ",
        "SHOW VARIABLES LIKE 'mysql56_temporal_format';\n\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| mysql56_temporal_format | ON    |\n+-------------------------+-------+\n\nALTER TABLE example_table MODIFY ts_col TIME;\n",
        "When MariaDB executes the ALTER TABLE statement, it converts the data from the older temporal format to the newer one. ",
        "In the event that you have several tables and columns using temporal data types that you want to switch over to the new format, make sure the system variable is enabled, then perform a dump and restore using mariadb-dump.  The columns using relevant temporal data types are restored using the new temporal format.",
        "Starting from MariaDB 10.5.1 columns with old temporal formats are marked with a /* mariadb-5.3 */ comment in the output of SHOW CREATE TABLE, SHOW COLUMNS, DESCRIBE statements, as well as in the COLUMN_TYPE column of the INFORMATION_SCHEMA.COLUMNS Table.",
        "SHOW CREATE TABLE mariadb5312_time\\G\n*************************** 1. row ***************************\n       Table: mariadb5312_time\nCreate Table: CREATE TABLE `mariadb5312_time` (\n  `t0` time /* mariadb-5.3 */ DEFAULT NULL,\n  `t6` time(6) /* mariadb-5.3 */ DEFAULT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n",
        "Note, columns with the current format are not marked with a comment."
    ],
    "Examples": [
        "INSERT INTO time VALUES ('90:00:00'), ('800:00:00'), (800), (22), (151413), ('9:6:3'), ('12 09');\n\nSELECT * FROM time;\n+-----------+\n| t         |\n+-----------+\n| 90:00:00  |\n| 800:00:00 |\n| 00:08:00  |\n| 00:00:22  |\n| 15:14:13  |\n| 09:06:03  |\n| 297:00:00 |\n+-----------+\n"
    ],
    "Category": [
        "Date and Time Data Types"
    ]
}