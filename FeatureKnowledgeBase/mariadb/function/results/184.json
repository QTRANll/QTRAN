{
    "HTML": [
        "https://mariadb.com//kb/en/master_gtid_wait/"
    ],
    "Title": [
        "MASTER_GTID_WAIT"
    ],
    "Feature": [
        "MASTER_GTID_WAIT(gtid-list[, timeout)\n"
    ],
    "Description": [
        "This function takes a string containing a comma-separated list of global transaction id's\n(similar to the value of, for example, gtid_binlog_pos). It waits until the value of gtid_slave_pos has the same or higher seq_no within all replication domains specified in the gtid-list; in other words, it waits until the slave has\nreached the specified GTID position.",
        "An optional second argument gives a timeout in seconds. If the timeout\nexpires before the specified GTID position is reached, then the function\nreturns -1. Passing NULL or a negative number for the timeout means no timeout, and the function will wait indefinitely.",
        " If the wait completes without a timeout, 0 is returned. Passing NULL for the\n gtid-list makes the function return NULL immediately, without waiting.",
        "The gtid-list may be the empty string, in which case MASTER_GTID_WAIT()\nreturns immediately. If the gtid-list contains fewer domains than\ngtid_slave_pos, then only those domains are waited upon. If gtid-list\ncontains a domain that is not present in @@gtid_slave_pos, then\nMASTER_GTID_WAIT() will wait until an event containing such domain_id arrives\non the slave (or until timed out or killed).",
        "MASTER_GTID_WAIT() can be useful to ensure that a slave has caught up to\na master. Simply take the value of gtid_binlog_pos on the master, and use it in a MASTER_GTID_WAIT() call on the slave; when the call completes, the slave\nwill have caught up with that master position.",
        "MASTER_GTID_WAIT() can also be used in client applications together with the\nlast_gtid session variable. This is useful in a read-scaleout replication setup, where the application writes to a single master but divides the\nreads out to a number of slaves to distribute the load. In such a setup, there\nis a risk that an application could first do an update on the master, and then\na bit later do a read on a slave, and if the slave is not fast enough, the\ndata read from the slave might not include the update just made, possibly\nconfusing the application and/or the end-user. One way to avoid this is to\nrequest the value of last_gtid on the master just after the update. Then\nbefore doing the read on the slave, do a MASTER_GTID_WAIT() on the value\nobtained from the master; this will ensure that the read is not performed\nuntil the slave has replicated sufficiently far for the update to have become\nvisible.",
        "Note that MASTER_GTID_WAIT() can be used even if the slave is configured not\nto use GTID for connections (CHANGE MASTER TO master_use_gtid=no). This is\nbecause from MariaDB 10, GTIDs are always logged on the master server, and\nalways recorded on the slave servers."
    ],
    "Examples": [],
    "Category": [
        "Miscellaneous Functions"
    ],
    "EffectiveSQLsRefined": []
}