{
    "HTML": [
        "https://mariadb.com//kb/en/convert/"
    ],
    "Title": [
        "CONVERT"
    ],
    "Feature": [
        "CONVERT(expr,type), CONVERT(expr USING transcoding_name)\n"
    ],
    "Description": [
        "The\tCONVERT() and CAST() functions take a value of one type and produce a value of another type.",
        "The type can be one of the following values:",
        "BINARY\nCHAR\nDATE\nDATETIME\nDECIMAL[(M[,D])]\nDOUBLE\nFLOAT (from MariaDB 10.4.5)\nINTEGER\nShort for SIGNED INTEGER\n\nSIGNED [INTEGER]\nUNSIGNED [INTEGER]\nTIME\nVARCHAR (in Oracle mode, from MariaDB 10.3)\n",
        "Note that in MariaDB, INT and INTEGER are the same thing.",
        "BINARY produces a string with the BINARY data type.  If the optional length is given, BINARY(N) causes the cast to use no more than N bytes of the argument. Values shorter than the given number in bytes are padded with 0x00 bytes to make them equal the length value.",
        "CHAR(N) causes the cast to use no more than the number of characters given in the argument.",
        "The main difference between the CAST() and CONVERT() is that CONVERT(expr,type) is ODBC syntax while CAST(expr as type) and CONVERT(... USING ...) are SQL92 syntax.",
        "CONVERT() with USING is used to convert data between different character sets. In MariaDB, transcoding names are the same as the\ncorresponding character set names. For example, this statement\nconverts the string 'abc' in the default character set to the\ncorresponding string in the utf8 character set:",
        "SELECT CONVERT('abc' USING utf8);\n"
    ],
    "Examples": [
        "SELECT enum_col FROM tbl_name \nORDER BY CAST(enum_col AS CHAR);\n",
        "SET @x = 'AardVark';\n\nSET @x = BINARY 'AardVark';\n\nSELECT LOWER(@x), LOWER(CONVERT (@x USING latin1));\n+-----------+----------------------------------+\n| LOWER(@x) | LOWER(CONVERT (@x USING latin1)) |\n+-----------+----------------------------------+\n| AardVark  | aardvark                         |\n+-----------+----------------------------------+\n"
    ],
    "Category": [
        "String Functions"
    ],
    "EffectiveSQLsRefined": [
        "SELECT LOWER(@x), LOWER(CONVERT (@x USING latin1));"
    ],
    "EffectiveSQLsGenerated": [],
    "EffectiveSQLsGeneratedCosts": [],
    "EffectiveSQLsGeneratedErrors": [],
    "EffectiveSQLs": [
        "SELECT LOWER(@x), LOWER(CONVERT (@x USING latin1));"
    ]
}