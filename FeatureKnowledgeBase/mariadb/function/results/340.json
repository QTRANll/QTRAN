{
    "HTML": [
        "https://mariadb.com//kb/en/st_within/"
    ],
    "Title": [
        "ST_WITHIN"
    ],
    "Feature": [
        "ST_WITHIN(g1,g2)\n"
    ],
    "Description": [
        "Returns 1 or 0 to indicate whether geometry g1 is spatially within geometry g2.",
        "This tests the opposite relationship as ST_CONTAINS().",
        "ST_WITHIN() uses object shapes, while WITHIN(), based on the original MySQL implementation, uses object bounding rectangles."
    ],
    "Examples": [
        "SET @g1 = ST_GEOMFROMTEXT('POINT(174 149)');\n\nSET @g2 = ST_GEOMFROMTEXT('POLYGON((175 150, 20 40, 50 60, 125 100, 175 150))');\n\nSELECT ST_WITHIN(@g1,@g2);\n+--------------------+\n| ST_WITHIN(@g1,@g2) |\n+--------------------+\n|                  1 |\n+--------------------+\n\nSET @g1 = ST_GEOMFROMTEXT('POINT(176 151)');\n\nSELECT ST_WITHIN(@g1,@g2);\n+--------------------+\n| ST_WITHIN(@g1,@g2) |\n+--------------------+\n|                  0 |\n+--------------------+\n"
    ],
    "Category": [
        "Geographic Functions"
    ],
    "EffectiveSQLsRefined": [
        "SELECT ST_WITHIN(@g1,@g2);",
        "SELECT ST_WITHIN(@g1,@g2);"
    ],
    "EffectiveSQLsGenerated": [],
    "EffectiveSQLsGeneratedCosts": [],
    "EffectiveSQLsGeneratedErrors": [],
    "EffectiveSQLs": [
        "SELECT ST_WITHIN(@g1,@g2);",
        "SELECT ST_WITHIN(@g1,@g2);"
    ]
}