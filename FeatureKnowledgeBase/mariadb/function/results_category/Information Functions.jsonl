{"HTML": ["https://mariadb.com//kb/en/found_rows/"], "Title": ["FOUND_ROWS"], "Feature": ["FOUND_ROWS()\n"], "Description": ["A SELECT statement may include a LIMIT clause to restrict the number\nof rows the server returns to the client. In some cases, it is\ndesirable to know how many rows the statement would have returned\nwithout the LIMIT, but without running the statement again. To obtain\nthis row count, include a SQL_CALC_FOUND_ROWS option in the SELECT\nstatement, and then invoke FOUND_ROWS() afterwards.", "You can also use FOUND_ROWS() to obtain the number of rows returned by a SELECT which does not contain a LIMIT clause. In this case you don't need to use the SQL_CALC_FOUND_ROWS option. This can be useful for example in a stored procedure.", "Also, this function works with some other statements which return a resultset, including SHOW, DESC and HELP. For DELETE ... RETURNING you should use ROW_COUNT(). It also works as a prepared statement, or after executing a prepared statement.", "Statements which don't return any results don't affect FOUND_ROWS() - the previous value will still be returned.", "Warning: When used after a CALL statement, this function returns the number of rows selected by the last query in the procedure, not by the whole procedure.", "Statements using the FOUND_ROWS() function are not safe for statement-based replication."], "Examples": ["SHOW ENGINES\\G\n*************************** 1. row ***************************\n      Engine: CSV\n     Support: YES\n     Comment: Stores tables as CSV files\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n*************************** 2. row ***************************\n      Engine: MRG_MyISAM\n     Support: YES\n     Comment: Collection of identical MyISAM tables\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n\n...\n\n*************************** 8. row ***************************\n      Engine: PERFORMANCE_SCHEMA\n     Support: YES\n     Comment: Performance Schema\nTransactions: NO\n          XA: NO\n  Savepoints: NO\n8 rows in set (0.000 sec)\n\nSELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n|           8 |\n+--------------+\n\nSELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\n\nSELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n|           23 |\n+--------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/benchmark/"], "Title": ["BENCHMARK"], "Feature": ["BENCHMARK(count,expr)\n"], "Description": ["The BENCHMARK() function executes the expression expr repeatedly count\ntimes. It may be used to time how quickly MariaDB processes the\nexpression. The result value is always 0. The intended use is from\nwithin the mariadb client, which reports query execution times."], "Examples": ["SELECT BENCHMARK(1000000,ENCODE('hello','goodbye'));\n+----------------------------------------------+\n| BENCHMARK(1000000,ENCODE('hello','goodbye')) |\n+----------------------------------------------+\n|                                            0 |\n+----------------------------------------------+\n1 row in set (0.21 sec)\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/binlog_gtid_pos/"], "Title": ["BINLOG_GTID_POS"], "Feature": ["BINLOG_GTID_POS(binlog_filename,binlog_offset)\n"], "Description": ["The BINLOG_GTID_POS() function takes as input an old-style binary log position in the form of a file name and a file offset. It looks up the position in the current binlog, and returns a string representation of the corresponding GTID position. If the position is not found in the current binlog, NULL is returned."], "Examples": ["SELECT BINLOG_GTID_POS(\"master-bin.000001\", 600);\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/last_insert_id/"], "Title": ["LAST_INSERT_ID"], "Feature": ["LAST_INSERT_ID(), LAST_INSERT_ID(expr)\n"], "Description": ["LAST_INSERT_ID() (no arguments) returns\nthe first automatically generated value successfully inserted for an\nAUTO_INCREMENT column as a result of the most recently executed INSERT\nstatement. The value of LAST_INSERT_ID() remains unchanged if no rows\nare successfully inserted.", "If one gives an argument to LAST_INSERT_ID(), then it will return the value of the expression and\nthe next call to LAST_INSERT_ID() will return the same value. The value will also be sent to the client\nand can be accessed by the mysql_insert_id function.", "For example, after inserting a row that generates an AUTO_INCREMENT\nvalue, you can get the value like this:", "SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                9 |\n+------------------+\n", "You can also use LAST_INSERT_ID() to delete the last inserted row:", "DELETE FROM product WHERE id = LAST_INSERT_ID();\n", "If no rows were successfully inserted, LAST_INSERT_ID() returns 0.", "One can also use INSERT...RETURNING for this purpose.", "The value of LAST_INSERT_ID() will be consistent across all versions\nif all rows in the INSERT or UPDATE statement were successful.", "The currently executing statement does not affect the value of\nLAST_INSERT_ID(). Suppose that you generate an AUTO_INCREMENT value\nwith one statement, and then refer to LAST_INSERT_ID() in a\nmultiple-row INSERT statement that inserts rows into a table with its\nown AUTO_INCREMENT column. The value of LAST_INSERT_ID() will remain\nstable in the second statement; its value for the second and later\nrows is not affected by the earlier row insertions. (However, if you\nmix references to LAST_INSERT_ID() and LAST_INSERT_ID(expr), the\neffect is undefined.)", "If the previous statement returned an error, the value of\nLAST_INSERT_ID() is undefined. For transactional tables, if the\nstatement is rolled back due to an error, the value of\nLAST_INSERT_ID() is left undefined. For manual ROLLBACK, the value of\nLAST_INSERT_ID() is not restored to that before the transaction; it\nremains as it was at the point of the ROLLBACK.", "Within the body of a stored routine (procedure or function) or a\ntrigger, the value of LAST_INSERT_ID() changes the same way as for\nstatements executed outside the body of these kinds of objects. The\neffect of a stored routine or trigger upon the value of\nLAST_INSERT_ID() that is seen by following statements depends on the\nkind of routine:", "If a stored procedure executes statements that change the value of LAST_INSERT_ID(), the new value will be seen by statements that follow the procedure call.\n", "For stored functions and triggers that change the value, the value is restored when the function or trigger ends, so following statements will not see a changed value.\n"], "Examples": ["CREATE TABLE t (\n  id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY, \n  f VARCHAR(1)) \nENGINE = InnoDB;\n\nINSERT INTO t(f) VALUES('a');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                1 |\n+------------------+\n\nINSERT INTO t(f) VALUES('b');\n\nINSERT INTO t(f) VALUES('c');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                3 |\n+------------------+\n\nINSERT INTO t(f) VALUES('d'),('e');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                4 |\n+------------------+\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n+----+------+\n\nSELECT LAST_INSERT_ID(12);\n+--------------------+\n| LAST_INSERT_ID(12) |\n+--------------------+\n|                 12 |\n+--------------------+\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|               12 |\n+------------------+\n\nINSERT INTO t(f) VALUES('f');\n\nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n|                6 |\n+------------------+\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n|  6 | f    |\n+----+------+\n\nSELECT LAST_INSERT_ID(12);\n+--------------------+\n| LAST_INSERT_ID(12) |\n+--------------------+\n|                 12 |\n+--------------------+\n\nINSERT INTO t(f) VALUES('g');\n\nSELECT * FROM t;\n+----+------+\n| id | f    |\n+----+------+\n|  1 | a    |\n|  2 | b    |\n|  3 | c    |\n|  4 | d    |\n|  5 | e    |\n|  6 | f    |\n|  7 | g    |\n+----+------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/last_value/"], "Title": ["LAST_VALUE"], "Feature": ["LAST_VALUE(expr,[expr,...])\n", "LAST_VALUE(expr) OVER (\n  [ PARTITION BY partition_expression ]\n  [ ORDER BY order_list ]\n) \n"], "Description": ["LAST_VALUE() evaluates all expressions and returns the last.", "This is useful together with setting user variables to a value with @var:=expr, for example when you want to get data of rows updated/deleted without having to do two queries against the table.", "LAST_VALUE can be used as a window function.", "Returns NULL if no last value exists."], "Examples": ["CREATE TABLE t1 (a int, b int);\nINSERT INTO t1 VALUES(1,10),(2,20);\nDELETE FROM t1 WHERE a=1 AND last_value(@a:=a,@b:=b,1);\nSELECT @a,@b;\n+------+------+\n| @a   | @b   |\n+------+------+\n|    1 |   10 |\n+------+------+\n", "CREATE TABLE t1 (\n  pk int primary key,\n  a int,\n  b int,\n  c char(10),\n  d decimal(10, 3),\n  e real\n);\n\nINSERT INTO t1 VALUES\n( 1, 0, 1,    'one',    0.1,  0.001),\n( 2, 0, 2,    'two',    0.2,  0.002),\n( 3, 0, 3,    'three',  0.3,  0.003),\n( 4, 1, 2,    'three',  0.4,  0.004),\n( 5, 1, 1,    'two',    0.5,  0.005),\n( 6, 1, 1,    'one',    0.6,  0.006),\n( 7, 2, NULL, 'n_one',  0.5,  0.007),\n( 8, 2, 1,    'n_two',  NULL, 0.008),\n( 9, 2, 2,    NULL,     0.7,  0.009),\n(10, 2, 0,    'n_four', 0.8,  0.010),\n(11, 2, 10,   NULL,     0.9,  NULL);\n\nSELECT pk, FIRST_VALUE(pk) OVER (ORDER BY pk) AS first_asc,\n           LAST_VALUE(pk) OVER (ORDER BY pk) AS last_asc,\n           FIRST_VALUE(pk) OVER (ORDER BY pk DESC) AS first_desc,\n           LAST_VALUE(pk) OVER (ORDER BY pk DESC) AS last_desc\nFROM t1\nORDER BY pk DESC;\n\n+----+-----------+----------+------------+-----------+\n| pk | first_asc | last_asc | first_desc | last_desc |\n+----+-----------+----------+------------+-----------+\n| 11 |         1 |       11 |         11 |        11 |\n| 10 |         1 |       10 |         11 |        10 |\n|  9 |         1 |        9 |         11 |         9 |\n|  8 |         1 |        8 |         11 |         8 |\n|  7 |         1 |        7 |         11 |         7 |\n|  6 |         1 |        6 |         11 |         6 |\n|  5 |         1 |        5 |         11 |         5 |\n|  4 |         1 |        4 |         11 |         4 |\n|  3 |         1 |        3 |         11 |         3 |\n|  2 |         1 |        2 |         11 |         2 |\n|  1 |         1 |        1 |         11 |         1 |\n+----+-----------+----------+------------+-----------+\n", "CREATE OR REPLACE TABLE t1 (i int);\nINSERT INTO t1 VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);\n\nSELECT i,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS f_1f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and 1 FOLLOWING) AS l_1f,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS f_1p1f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS l_1p1f,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS f_2p1p,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING) AS l_2p1p,\n  FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS f_1f2f,\n  LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING) AS l_1f2f\nFROM t1;\n\n+------+------+------+--------+--------+--------+--------+--------+--------+\n| i    | f_1f | l_1f | f_1p1f | l_1p1f | f_2p1p | l_2p1p | f_1f2f | l_1f2f |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n|    1 |    1 |    2 |      1 |      2 |   NULL |   NULL |      2 |      3 |\n|    2 |    2 |    3 |      1 |      3 |      1 |      1 |      3 |      4 |\n|    3 |    3 |    4 |      2 |      4 |      1 |      2 |      4 |      5 |\n|    4 |    4 |    5 |      3 |      5 |      2 |      3 |      5 |      6 |\n|    5 |    5 |    6 |      4 |      6 |      3 |      4 |      6 |      7 |\n|    6 |    6 |    7 |      5 |      7 |      4 |      5 |      7 |      8 |\n|    7 |    7 |    8 |      6 |      8 |      5 |      6 |      8 |      9 |\n|    8 |    8 |    9 |      7 |      9 |      6 |      7 |      9 |     10 |\n|    9 |    9 |   10 |      8 |     10 |      7 |      8 |     10 |     10 |\n|   10 |   10 |   10 |      9 |     10 |      8 |      9 |   NULL |   NULL |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/charset/"], "Title": ["CHARSET"], "Feature": ["CHARSET(str)\n"], "Description": ["Returns the character set of the string argument. If str is not a string, it is considered as a binary string (so the function returns 'binary'). This applies to NULL, too.  The return value is a string in the utf8 character set."], "Examples": ["SELECT CHARSET('abc');\n+----------------+\n| CHARSET('abc') |\n+----------------+\n| latin1         |\n+----------------+\n\nSELECT CHARSET(CONVERT('abc' USING utf8));\n+------------------------------------+\n| CHARSET(CONVERT('abc' USING utf8)) |\n+------------------------------------+\n| utf8                               |\n+------------------------------------+\n\nSELECT CHARSET(USER());\n+-----------------+\n| CHARSET(USER()) |\n+-----------------+\n| utf8            |\n+-----------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/row_count/"], "Title": ["ROW_COUNT"], "Feature": ["ROW_COUNT()\n"], "Description": ["ROW_COUNT() returns the number of rows updated, inserted or deleted\nby the preceding statement. This is the same as the row count that the\nmariadb client displays and the value from the mysql_affected_rows() C\nAPI function.", "Generally:", "For statements which return a result set (such as SELECT, SHOW, DESC or HELP), returns -1, even when the result set is empty. This is also true for administrative statements, such as OPTIMIZE.\nFor DML statements other than SELECT and for ALTER TABLE, returns the number of affected rows.\nFor DDL statements (including TRUNCATE) and for other statements which don't return any result set (such as USE, DO, SIGNAL or DEALLOCATE PREPARE), returns 0.\n", "For UPDATE, affected rows is by default the number of rows that were actually changed. If the CLIENT_FOUND_ROWS flag to mysql_real_connect() is specified when connecting to mariadbd, affected rows is instead the number of rows matched by the WHERE clause. ", "For REPLACE, deleted rows are also counted. So, if REPLACE deletes a row and adds a new row, ROW_COUNT() returns 2.", "For INSERT ... ON DUPLICATE KEY, updated rows are counted twice. So, if INSERT adds a new rows and modifies another row, ROW_COUNT() returns 3.", "ROW_COUNT() does not take into account rows that are not directly deleted/updated by the last statement. This means that rows deleted by foreign keys or triggers are not counted.", "Warning: You can use ROW_COUNT() with prepared statements, but you need to call it after EXECUTE, not after DEALLOCATE PREPARE, because the row count for allocate prepare is always 0.", "Warning: When used after a CALL statement, this function returns the number of rows affected by the last statement in the procedure, not by the whole procedure.", "Warning: After INSERT DELAYED, ROW_COUNT() returns the number of the rows you tried to insert, not the number of the successful writes.", "This information can also be found in the diagnostics area.", "Statements using the ROW_COUNT() function are not safe for statement-based replication."], "Examples": ["CREATE TABLE t (A INT);\n\nINSERT INTO t VALUES(1),(2),(3);\n\nSELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n\nDELETE FROM t WHERE A IN(1,2);\n\nSELECT ROW_COUNT(); \n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           2 |\n+-------------+\n", "SET @q = 'INSERT INTO t VALUES(1),(2),(3);';\n\nPREPARE stmt FROM @q;\n\nEXECUTE stmt;\nQuery OK, 3 rows affected (0.39 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nSELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/schema/"], "Title": ["SCHEMA"], "Feature": ["SCHEMA()\n"], "Description": ["This function is a synonym for DATABASE()."], "Examples": [], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/session_user/"], "Title": ["SESSION_USER"], "Feature": ["SESSION_USER()\n"], "Description": ["SESSION_USER() is a synonym for USER()."], "Examples": [], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/coercibility/"], "Title": ["COERCIBILITY"], "Feature": ["COERCIBILITY(str)\n"], "Description": ["Returns the collation coercibility value of the string argument. Coercibility defines what will be converted to what in case of collation conflict, with an expression with higher coercibility being converted to the collation of an expression with lower coercibility.", "CoercibilityDescriptionExample\n0ExplicitValue using a COLLATE clause\n1No collationConcatenated strings using different collations\n2ImplicitA string data type column value, CAST to a string data type\n3System constantDATABASE(), USER() return value\n4CoercibleLiteral string\n5NumericNumeric and temporal values\n6IgnorableNULL or derived from NULL\n\n"], "Examples": ["SELECT COERCIBILITY('abc' COLLATE latin1_swedish_ci);\n+-----------------------------------------------+\n| COERCIBILITY('abc' COLLATE latin1_swedish_ci) |\n+-----------------------------------------------+\n|                                             0 |\n+-----------------------------------------------+\n\nSELECT COERCIBILITY(CAST(1 AS CHAR));\n+-------------------------------+\n| COERCIBILITY(CAST(1 AS CHAR)) |\n+-------------------------------+\n|                             2 |\n+-------------------------------+\n\nSELECT COERCIBILITY(USER());\n+----------------------+\n| COERCIBILITY(USER()) |\n+----------------------+\n|                    3 |\n+----------------------+\n\nSELECT COERCIBILITY('abc');\n+---------------------+\n| COERCIBILITY('abc') |\n+---------------------+\n|                   4 |\n+---------------------+\n\nSELECT COERCIBILITY(1);\n+-----------------+\n| COERCIBILITY(1) |\n+-----------------+\n|               5 |\n+-----------------+\n\nSELECT COERCIBILITY(NULL);\n+--------------------+\n| COERCIBILITY(NULL) |\n+--------------------+\n|                  6 |\n+--------------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/collation/"], "Title": ["COLLATION"], "Feature": ["COLLATION(str)\n"], "Description": ["Returns the collation of the string argument. If str is not a string, it is considered as a binary string (so the function returns 'binary'). This applies to NULL, too.  The return value is a string in the utf8 character set.", "See Character Sets and Collations."], "Examples": ["SELECT COLLATION('abc');\n+-------------------+\n| COLLATION('abc')  |\n+-------------------+\n| latin1_swedish_ci |\n+-------------------+\n\nSELECT COLLATION(_utf8'abc');\n+-----------------------+\n| COLLATION(_utf8'abc') |\n+-----------------------+\n| utf8_general_ci       |\n+-----------------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/system_user/"], "Title": ["SYSTEM_USER"], "Feature": ["SYSTEM_USER()\n"], "Description": ["SYSTEM_USER() is a synonym for USER()."], "Examples": [], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/user/"], "Title": ["USER"], "Feature": ["USER()\n"], "Description": ["Returns the current MariaDB user name and host name, given when authenticating to MariaDB,  as a string in the utf8 character set.", "Note that the value of USER() may differ from the value of CURRENT_USER(), which is the user used to authenticate the current client. \nCURRENT_ROLE() returns the current active role.", "SYSTEM_USER() and SESSION_USER are synonyms for USER().", "Statements using the USER() function or one of its synonyms are not safe for statement level replication."], "Examples": ["shell> mysql --user=\"anonymous\"\n\nSELECT USER(),CURRENT_USER();\n+---------------------+----------------+\n| USER()              | CURRENT_USER() |\n+---------------------+----------------+\n| anonymous@localhost | @localhost     |\n+---------------------+----------------+\n", "SELECT SUBSTRING_INDEX(USER(), '@', -1);\n+----------------------------------+\n| SUBSTRING_INDEX(USER(), '@', -1) |\n+----------------------------------+\n| 192.168.0.101                    |\n+----------------------------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/version/"], "Title": ["VERSION"], "Feature": ["VERSION()\n"], "Description": ["Returns a string that indicates the MariaDB server version. The string\nuses the utf8 character set."], "Examples": ["SELECT VERSION();\n+----------------+\n| VERSION()      |\n+----------------+\n| 10.4.7-MariaDB |\n+----------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/connection_id/"], "Title": ["CONNECTION_ID"], "Feature": ["CONNECTION_ID()\n"], "Description": ["Returns the connection ID for the connection. Every connection (including events) has an ID that is unique among the set of currently connected clients.", "Until MariaDB 10.3.1, returns MYSQL_TYPE_LONGLONG, or bigint(10). From MariaDB 10.3.1, returns MYSQL_TYPE_LONG, or int(10)."], "Examples": ["SELECT CONNECTION_ID();\n+-----------------+\n| CONNECTION_ID() |\n+-----------------+\n|               3 |\n+-----------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/current_role/"], "Title": ["CURRENT_ROLE"], "Feature": ["CURRENT_ROLE, CURRENT_ROLE()\n"], "Description": ["Returns the current role name. This determines your access privileges. The return value is a string in the\nutf8 character set.", "If there is no current role, NULL is returned.", "The output of SELECT CURRENT_ROLE is equivalent to the contents of the ENABLED_ROLES Information Schema table.", "USER() returns the combination of user and host used to login. CURRENT_USER() returns the account used to determine current connection's privileges.", "Statements using the CURRENT_ROLE function are not safe for statement-based replication."], "Examples": ["SELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| NULL         |\n+--------------+\n\nSET ROLE staff;\n\nSELECT CURRENT_ROLE;\n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| staff        |\n+--------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/current_user/"], "Title": ["CURRENT_USER"], "Feature": ["CURRENT_USER, CURRENT_USER()\n"], "Description": ["Returns the user name and host name combination for the MariaDB account\nthat the server used to authenticate the current client. This account\ndetermines your access privileges. The return value is a string in the\nutf8 character set.", "The value of CURRENT_USER() can differ from the value of USER(). CURRENT_ROLE() returns the current active role.", "Statements using the CURRENT_USER function are not safe for statement-based replication."], "Examples": ["shell> mysql --user=\"anonymous\"\n\nselect user(),current_user();\n+---------------------+----------------+\n| user()              | current_user() |\n+---------------------+----------------+\n| anonymous@localhost | @localhost     |\n+---------------------+----------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/database/"], "Title": ["DATABASE"], "Feature": ["DATABASE()\nSCHEMA()\n"], "Description": ["Returns the default (current) database name as a string in the utf8 character set. If there is no default database, DATABASE() returns NULL. Within a stored routine, the default database is the database that the routine is associated with, which is not necessarily the same as the database that is the default in the calling context.", "SCHEMA() is a synonym for DATABASE().", "To select a default database, the USE statement can be run. Another way to set the default database is specifying its name at mariadb command line client startup."], "Examples": ["SELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| NULL       |\n+------------+\n\nUSE test;\nDatabase changed\n\nSELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| test       |\n+------------+\n"], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/decode_histogram/"], "Title": ["DECODE_HISTOGRAM"], "Feature": ["DECODE_HISTOGRAM(hist_type,histogram)\n"], "Description": ["Returns a string of comma separated numeric values corresponding to a probability distribution represented by the histogram of type hist_type (SINGLE_PREC_HB or DOUBLE_PREC_HB). The hist_type and histogram would be commonly used from the mysql.column_stats table.", "See Histogram Based Statistics for details."], "Examples": [], "Category": ["Information Functions"]}
{"HTML": ["https://mariadb.com//kb/en/default/"], "Title": ["DEFAULT"], "Feature": ["DEFAULT(col_name)\n"], "Description": ["Returns the default value for a table column. If the column has no default value (and is not NULLABLE - NULLABLE fields have a NULL default), an error is returned.", "For integer columns using AUTO_INCREMENT, 0 is returned.", "When using DEFAULT as a value to set in an INSERT or UPDATE\nstatement, you can use the bare keyword DEFAULT without the parentheses and argument to\nrefer to the column in context. You can only use DEFAULT as a bare keyword if you are using it\nalone without a surrounding expression or function."], "Examples": ["SELECT i FROM t WHERE i != DEFAULT(i);\n", "UPDATE t SET i = DEFAULT(i)+1 WHERE i < 100;\n", "INSERT INTO t (i) VALUES (DEFAULT);\nUPDATE t SET i = DEFAULT WHERE i < 100;\n", "CREATE OR REPLACE TABLE t (\n  i INT NOT NULL AUTO_INCREMENT, \n  j INT NOT NULL, \n  k INT DEFAULT 3, \n  l INT NOT NULL DEFAULT 4, \n  m INT, \n  PRIMARY KEY (i)\n);\n\nDESC t;\n+-------+---------+------+-----+---------+----------------+\n| Field | Type    | Null | Key | Default | Extra          |\n+-------+---------+------+-----+---------+----------------+\n| i     | int(11) | NO   | PRI | NULL    | auto_increment |\n| j     | int(11) | NO   |     | NULL    |                |\n| k     | int(11) | YES  |     | 3       |                |\n| l     | int(11) | NO   |     | 4       |                |\n| m     | int(11) | YES  |     | NULL    |                |\n+-------+---------+------+-----+---------+----------------+\n\nINSERT INTO t (j) VALUES (1);\nINSERT INTO t (j,m) VALUES (2,2);\nINSERT INTO t (j,l,m) VALUES (3,3,3);\n\nSELECT * FROM t;\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n| 2 | 2 |    3 | 4 |    2 |\n| 3 | 3 |    3 | 3 |    3 |\n+---+---+------+---+------+\n\nSELECT DEFAULT(i), DEFAULT(k), DEFAULT (l), DEFAULT(m) FROM t;\n+------------+------------+-------------+------------+\n| DEFAULT(i) | DEFAULT(k) | DEFAULT (l) | DEFAULT(m) |\n+------------+------------+-------------+------------+\n|          0 |          3 |           4 |       NULL |\n|          0 |          3 |           4 |       NULL |\n|          0 |          3 |           4 |       NULL |\n+------------+------------+-------------+------------+\n\nSELECT DEFAULT(i), DEFAULT(k), DEFAULT (l), DEFAULT(m), DEFAULT(j)  FROM t;\nERROR 1364 (HY000): Field 'j' doesn't have a default value\n\nSELECT * FROM t WHERE i = DEFAULT(i);\nEmpty set (0.001 sec)\n\nSELECT * FROM t WHERE j = DEFAULT(j);\nERROR 1364 (HY000): Field 'j' doesn't have a default value\n\nSELECT * FROM t WHERE k = DEFAULT(k);\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n| 2 | 2 |    3 | 4 |    2 |\n| 3 | 3 |    3 | 3 |    3 |\n+---+---+------+---+------+\n\nSELECT * FROM t WHERE l = DEFAULT(l);\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n| 2 | 2 |    3 | 4 |    2 |\n+---+---+------+---+------+\n\nSELECT * FROM t WHERE m = DEFAULT(m);\nEmpty set (0.001 sec)\n\nSELECT * FROM t WHERE m <=> DEFAULT(m);\n+---+---+------+---+------+\n| i | j | k    | l | m    |\n+---+---+------+---+------+\n| 1 | 1 |    3 | 4 | NULL |\n+---+---+------+---+------+\n"], "Category": ["Information Functions"]}
