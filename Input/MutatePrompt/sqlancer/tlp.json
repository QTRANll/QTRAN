{
  "TLP (WHERE)": "Synthesize mutated SQL Q' that returns the same result as the user-provided seed SQL Q, using one of the following mutation strategy:\nIf Q is formatted as `SELECT <columns> FROM <tables> [<joins>]`, randomly generate a predicate P. Then, create three variants, Q'pattern, in the format `SELECT <columns> FROM <tables> [<joins>] WHERE <Pvariant>`, where `<Pvariant>` is `<P>`, `NOT <P>`, or `<P>` IS NULL. Finally, produce Q' by combining the three Q'patterns with `UNION ALL`.",
  "TLP (WHERE Extended)": "Synthesize mutated SQL Q' that returns the same result as the user-provided seed SQL Q, using one of the following mutation strategy:\nIf Q is formatted as `SELECT <columns> FROM <tables> [<joins>] WHERE <Pexisting>`, randomly generate a predicate P. Then, create three variants, Q'pattern, in the format `SELECT <columns> FROM <tables> [<joins>] WHERE <Pexisting> AND <Pvariant>`, where `<Pvariant>` is `<P>`, `NOT <P>`, or `<P>` IS NULL. Finally, produce Q' by combining the three Q'patterns with `UNION ALL`.",
  "TLP (GROUP BY)": "Synthesize mutated SQL Q' that returns the same result as the user-provided seed SQL Q, using one of the following mutation strategy:\nIf Q is formatted as `SELECT <columns> FROM <tables> [<joins>] GROUP BY <columns>`, randomly generate a predicate P. Then, create three variants, Q'pattern, in the format `SELECT <columns> FROM <tables> [<joins>] WHERE <Pvariant> GROUP BY <columns>`, where `<Pvariant>` is `<P>`, `NOT <P>`, or `<P>` IS NULL. Finally, produce Q' by combining the three Q'patterns with `UNION`.",
  "TLP (HAVING)": "Synthesize mutated SQL Q' that returns the same result as the user-provided seed SQL Q, using one of the following mutation strategy:\nIf Q is formatted as `SELECT <columns> FROM <tables> [<joins>] [WHERE ...] [GROUP BY ...]`, randomly generate a predicate P. Then, create three variants, Q'pattern, in the format `SELECT <columns> FROM <tables> [<joins>] [WHERE ...] [GROUP BY ...] HAVING <Pvariant>`, where `<Pvariant>` is `<P>`, `NOT <P>`, or `<P>` IS NULL. Finally, produce Q' by combining the three Q'patterns with `UNION ALL`.",
  "TLP (DISTINCT)": "Synthesize mutated SQL Q' that returns the same result as the user-provided seed SQL Q, using one of the following mutation strategy:\nIf Q is formatted as `SELECT DISTINCT <columns> FROM <tables> [<joins>]`, randomly generate a predicate P. Then, create three variants, Q'pattern, in the format `SELECT [DISTINCT] <columns> FROM <tables> [<joins>] WHERE <Pvariant>`, where `<Pvariant>` is `<P>`, `NOT <P>`, or `<P>` IS NULL. Finally, produce Q' by combining the three Q'patterns with `UNION`.",
  "TLP (aggregate min)": "Synthesize mutated SQL Q' that returns the same result as the user-provided seed SQL Q, using one of the following mutation strategy:\nIf Q is formatted as `SELECT MIN(<e>) FROM <tables> [<joins>]`, randomly generate a predicate P. Create three variants, Q'pattern, in the format `SELECT MIN(<e>) FROM <tables> [<joins>] WHERE <Pvariant>`, where `<Pvariant>` is `<P>`, `NOT <P>`, or `<P> IS NULL`. Finally, produce Q' by applying `MIN(.)` to the result of combining the Q'patterns with `UNION ALL`.",
  "TLP (aggregate max)": "Synthesize mutated SQL Q' that returns the same result as the user-provided seed SQL Q, using one of the following mutation strategy:\nIf Q is formatted as `SELECT MAX(<e>) FROM <tables> [<joins>]`, randomly generate a predicate P. Create three variants, Q'pattern, in the format `SELECT MAX(<e>) FROM <tables> [<joins>] WHERE <Pvariant>`, where `<Pvariant>` is `<P>`, `NOT <P>`, or `<P> IS NULL`. Finally, produce Q' by applying `MAX(.)` to the result of combining the Q'patterns with `UNION ALL`.",
  "TLP (aggregate sum)": "Synthesize mutated SQL Q' that returns the same result as the user-provided seed SQL Q, using one of the following mutation strategy:\nIf Q is formatted as `SELECT SUM(<e>) FROM <tables> [<joins>]`, randomly generate a predicate P. Create three variants, Q'pattern, in the format `SELECT SUM(<e>) FROM <tables> [<joins>] WHERE <Pvariant>`, where `<Pvariant>` is `<P>`, `NOT <P>`, or `<P> IS NULL`. Finally, produce Q' by applying `SUM(.)` to the result of combining the Q'patterns with `UNION ALL`.",
  "TLP (aggregate count)": "Synthesize mutated SQL Q' that returns the same result as the user-provided seed SQL Q, using one of the following mutation strategy:\nIf Q is formatted as `SELECT COUNT(<e>) FROM <tables> [<joins>]`, randomly generate a predicate P. Create three variants, Q'pattern, in the format `SELECT COUNT(<e>) FROM <tables> [<joins>] WHERE <Pvariant>`, where `<Pvariant>` is `<P>`, `NOT <P>`, or `<P> IS NULL`. Finally, produce Q' by applying `COUNT(.)` to the result of combining the Q'patterns with `UNION ALL`."
}